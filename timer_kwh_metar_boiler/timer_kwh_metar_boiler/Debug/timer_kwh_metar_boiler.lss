
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001a04  00001a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  0080016e  0080016e  00001b06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000223b  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e29  00000000  00000000  00004037  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018b8  00000000  00000000  00004e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000764  00000000  00000000  00006718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c1  00000000  00000000  00006e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021a8  00000000  00000000  0000783d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000099e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 07 09 	jmp	0x120e	; 0x120e <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_20>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e0       	ldi	r30, 0x04	; 4
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 36       	cpi	r26, 0x6E	; 110
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e6       	ldi	r26, 0x6E	; 110
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3c       	cpi	r26, 0xC5	; 197
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 54 07 	call	0xea8	; 0xea8 <main>
      9e:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
      a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
      a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
      ac:	80 ec       	ldi	r24, 0xC0	; 192
      ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
      b2:	8e ee       	ldi	r24, 0xEE	; 238
      b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
      b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
      bc:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
      c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
      c2:	1f 92       	push	r1
      c4:	0f 92       	push	r0
      c6:	0f b6       	in	r0, 0x3f	; 63
      c8:	0f 92       	push	r0
      ca:	11 24       	eor	r1, r1
      cc:	8f 93       	push	r24
      ce:	9f 93       	push	r25
      d0:	ef 93       	push	r30
      d2:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
      d4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
      d8:	81 11       	cpse	r24, r1
      da:	09 c0       	rjmp	.+18     	; 0xee <__vector_21+0x2c>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
      dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      e4:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <mereni_napon+0x1>
      e8:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <mereni_napon>
      ec:	0c c0       	rjmp	.+24     	; 0x106 <__vector_21+0x44>
	else if(ad_kanal == 1)
      ee:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	41 f4       	brne	.+16     	; 0x106 <__vector_21+0x44>
		merena_struja = (uint16_t)ADC;
      f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      fe:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <merena_struja+0x1>
     102:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     106:	ea e7       	ldi	r30, 0x7A	; 122
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
     110:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     114:	8f 5f       	subi	r24, 0xFF	; 255
     116:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     11a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	10 f0       	brcs	.+4      	; 0x126 <__vector_21+0x64>
		ad_kanal = 0;
     122:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
     126:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     12a:	88 23       	and	r24, r24
     12c:	19 f0       	breq	.+6      	; 0x134 <__vector_21+0x72>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	39 f0       	breq	.+14     	; 0x140 <__vector_21+0x7e>
     132:	0e c0       	rjmp	.+28     	; 0x150 <__vector_21+0x8e>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     134:	ec e7       	ldi	r30, 0x7C	; 124
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	8c 7f       	andi	r24, 0xFC	; 252
     13c:	80 83       	st	Z, r24
		break;
     13e:	08 c0       	rjmp	.+16     	; 0x150 <__vector_21+0x8e>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     140:	ec e7       	ldi	r30, 0x7C	; 124
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	8d 7f       	andi	r24, 0xFD	; 253
     148:	80 83       	st	Z, r24
				ADMUX |= (0b1);
     14a:	80 81       	ld	r24, Z
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     150:	ea e7       	ldi	r30, 0x7A	; 122
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 6c       	ori	r24, 0xC0	; 192
     158:	80 83       	st	Z, r24
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us


}
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	9f 91       	pop	r25
     160:	8f 91       	pop	r24
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     16c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     170:	88 e4       	ldi	r24, 0x48	; 72
     172:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     176:	08 95       	ret

00000178 <i2c_start_wait>:
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	ec eb       	ldi	r30, 0xBC	; 188
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	24 ea       	ldi	r18, 0xA4	; 164
     182:	a9 eb       	ldi	r26, 0xB9	; 185
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	cb eb       	ldi	r28, 0xBB	; 187
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	34 e8       	ldi	r19, 0x84	; 132
     18c:	44 e9       	ldi	r20, 0x94	; 148
     18e:	20 83       	st	Z, r18
     190:	90 81       	ld	r25, Z
     192:	99 23       	and	r25, r25
     194:	ec f7       	brge	.-6      	; 0x190 <i2c_start_wait+0x18>
     196:	9c 91       	ld	r25, X
     198:	98 7f       	andi	r25, 0xF8	; 248
     19a:	98 30       	cpi	r25, 0x08	; 8
     19c:	11 f0       	breq	.+4      	; 0x1a2 <i2c_start_wait+0x2a>
     19e:	90 31       	cpi	r25, 0x10	; 16
     1a0:	b1 f7       	brne	.-20     	; 0x18e <i2c_start_wait+0x16>
     1a2:	88 83       	st	Y, r24
     1a4:	30 83       	st	Z, r19
     1a6:	90 81       	ld	r25, Z
     1a8:	99 23       	and	r25, r25
     1aa:	ec f7       	brge	.-6      	; 0x1a6 <i2c_start_wait+0x2e>
     1ac:	9c 91       	ld	r25, X
     1ae:	98 7f       	andi	r25, 0xF8	; 248
     1b0:	90 32       	cpi	r25, 0x20	; 32
     1b2:	11 f0       	breq	.+4      	; 0x1b8 <i2c_start_wait+0x40>
     1b4:	98 35       	cpi	r25, 0x58	; 88
     1b6:	29 f4       	brne	.+10     	; 0x1c2 <i2c_start_wait+0x4a>
     1b8:	40 83       	st	Z, r20
     1ba:	90 81       	ld	r25, Z
     1bc:	94 fd       	sbrc	r25, 4
     1be:	fd cf       	rjmp	.-6      	; 0x1ba <i2c_start_wait+0x42>
     1c0:	e6 cf       	rjmp	.-52     	; 0x18e <i2c_start_wait+0x16>
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <i2c_stop>:
     1c8:	84 e9       	ldi	r24, 0x94	; 148
     1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1ce:	ec eb       	ldi	r30, 0xBC	; 188
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	84 fd       	sbrc	r24, 4
     1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <i2c_stop+0xa>
     1d8:	08 95       	ret

000001da <i2c_write>:
     1da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1de:	84 e8       	ldi	r24, 0x84	; 132
     1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1e4:	ec eb       	ldi	r30, 0xBC	; 188
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	88 23       	and	r24, r24
     1ec:	ec f7       	brge	.-6      	; 0x1e8 <i2c_write+0xe>
     1ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1f2:	98 7f       	andi	r25, 0xF8	; 248
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	98 32       	cpi	r25, 0x28	; 40
     1f8:	09 f4       	brne	.+2      	; 0x1fc <i2c_write+0x22>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	08 95       	ret

000001fe <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1fe:	84 e8       	ldi	r24, 0x84	; 132
     200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     204:	ec eb       	ldi	r30, 0xBC	; 188
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	88 23       	and	r24, r24
     20c:	ec f7       	brge	.-6      	; 0x208 <i2c_readNak+0xa>
	
    return TWDR;
     20e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     212:	08 95       	ret

00000214 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     214:	cf 93       	push	r28
     216:	c8 2f       	mov	r28, r24
     218:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     21a:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
	i2c_write(value);                      // write 
     21e:	8c 2f       	mov	r24, r28
     220:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     224:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_stop>
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	cf 93       	push	r28
     22e:	c8 2f       	mov	r28, r24
     230:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     234:	84 60       	ori	r24, 0x04	; 4
     236:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     23a:	6e e4       	ldi	r22, 0x4E	; 78
     23c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     240:	87 ec       	ldi	r24, 0xC7	; 199
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <putnibble+0x18>
     248:	00 c0       	rjmp	.+0      	; 0x24a <putnibble+0x1e>
     24a:	00 00       	nop
     24c:	c2 95       	swap	r28
     24e:	c0 7f       	andi	r28, 0xF0	; 240
     250:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     254:	6e e4       	ldi	r22, 0x4E	; 78
     256:	8c 2b       	or	r24, r28
     258:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     25c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     260:	8b 7f       	andi	r24, 0xFB	; 251
     262:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     266:	6e e4       	ldi	r22, 0x4E	; 78
     268:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     26c:	87 ec       	ldi	r24, 0xC7	; 199
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <putnibble+0x44>
     274:	00 c0       	rjmp	.+0      	; 0x276 <putnibble+0x4a>
     276:	00 00       	nop
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <lcd1602_send_byte>:
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	c8 2f       	mov	r28, r24
     282:	d8 2f       	mov	r29, r24
     284:	d2 95       	swap	r29
     286:	df 70       	andi	r29, 0x0F	; 15
     288:	61 11       	cpse	r22, r1
     28a:	09 c0       	rjmp	.+18     	; 0x29e <lcd1602_send_byte+0x22>
     28c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     290:	8e 7f       	andi	r24, 0xFE	; 254
     292:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     296:	6e e4       	ldi	r22, 0x4E	; 78
     298:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <lcd1602_send_byte+0x32>
     29e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     2a2:	81 60       	ori	r24, 0x01	; 1
     2a4:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     2a8:	6e e4       	ldi	r22, 0x4E	; 78
     2aa:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     2ae:	8d 2f       	mov	r24, r29
     2b0:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2b4:	8c 2f       	mov	r24, r28
     2b6:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <lcd1602_send_char>:
     2c0:	cf 93       	push	r28
     2c2:	c8 2f       	mov	r28, r24
     2c4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     2c8:	81 60       	ori	r24, 0x01	; 1
     2ca:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     2ce:	6e e4       	ldi	r22, 0x4E	; 78
     2d0:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     2d4:	8c 2f       	mov	r24, r28
     2d6:	82 95       	swap	r24
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2de:	8c 2f       	mov	r24, r28
     2e0:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <lcd1602_init>:
     2e8:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <led_pin>
     2ec:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_init>
     2f0:	8f e5       	ldi	r24, 0x5F	; 95
     2f2:	9a ee       	ldi	r25, 0xEA	; 234
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd1602_init+0xc>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd1602_init+0x12>
     2fa:	00 00       	nop
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     302:	8f e7       	ldi	r24, 0x7F	; 127
     304:	9e e3       	ldi	r25, 0x3E	; 62
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd1602_init+0x1e>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd1602_init+0x24>
     30c:	00 00       	nop
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     314:	8f e8       	ldi	r24, 0x8F	; 143
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <lcd1602_init+0x30>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd1602_init+0x36>
     31e:	00 00       	nop
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     326:	8f e9       	ldi	r24, 0x9F	; 159
     328:	9f e0       	ldi	r25, 0x0F	; 15
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <lcd1602_init+0x42>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <lcd1602_init+0x48>
     330:	00 00       	nop
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     338:	8f e9       	ldi	r24, 0x9F	; 159
     33a:	9f e0       	ldi	r25, 0x0F	; 15
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <lcd1602_init+0x54>
     340:	00 c0       	rjmp	.+0      	; 0x342 <lcd1602_init+0x5a>
     342:	00 00       	nop
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	88 e2       	ldi	r24, 0x28	; 40
     348:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     34c:	8f e9       	ldi	r24, 0x9F	; 159
     34e:	9f e0       	ldi	r25, 0x0F	; 15
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <lcd1602_init+0x68>
     354:	00 c0       	rjmp	.+0      	; 0x356 <lcd1602_init+0x6e>
     356:	00 00       	nop
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	8c e0       	ldi	r24, 0x0C	; 12
     35c:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     360:	8f e9       	ldi	r24, 0x9F	; 159
     362:	9f e0       	ldi	r25, 0x0F	; 15
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd1602_init+0x7c>
     368:	00 c0       	rjmp	.+0      	; 0x36a <lcd1602_init+0x82>
     36a:	00 00       	nop
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     374:	8f e9       	ldi	r24, 0x9F	; 159
     376:	9f e0       	ldi	r25, 0x0F	; 15
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <lcd1602_init+0x90>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <lcd1602_init+0x96>
     37e:	00 00       	nop
     380:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     384:	88 60       	ori	r24, 0x08	; 8
     386:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     38a:	6e e4       	ldi	r22, 0x4E	; 78
     38c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     390:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     394:	8d 7f       	andi	r24, 0xFD	; 253
     396:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     39a:	6e e4       	ldi	r22, 0x4E	; 78
     39c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     3a0:	08 95       	ret

000003a2 <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     3a2:	90 e4       	ldi	r25, 0x40	; 64
     3a4:	69 9f       	mul	r22, r25
     3a6:	80 0d       	add	r24, r0
     3a8:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     3b2:	08 95       	ret

000003b4 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     3bc:	80 81       	ld	r24, Z
     3be:	88 23       	and	r24, r24
     3c0:	59 f0       	breq	.+22     	; 0x3d8 <lcd1602_send_string+0x24>
     3c2:	8f 01       	movw	r16, r30
     3c4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     3c6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd1602_send_char>
		i++;
     3ca:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     3cc:	f8 01       	movw	r30, r16
     3ce:	ec 0f       	add	r30, r28
     3d0:	f1 1d       	adc	r31, r1
     3d2:	80 81       	ld	r24, Z
     3d4:	81 11       	cpse	r24, r1
     3d6:	f7 cf       	rjmp	.-18     	; 0x3c6 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     3e0:	88 23       	and	r24, r24
     3e2:	29 f0       	breq	.+10     	; 0x3ee <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	8f e0       	ldi	r24, 0x0F	; 15
     3e8:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     3ec:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	8c e0       	ldi	r24, 0x0C	; 12
     3f2:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     3f6:	08 95       	ret

000003f8 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     3f8:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     3fa:	dc 01       	movw	r26, r24
     3fc:	12 96       	adiw	r26, 0x02	; 2
     3fe:	2c 91       	ld	r18, X
     400:	12 97       	sbiw	r26, 0x02	; 2
     402:	54 e6       	ldi	r21, 0x64	; 100
     404:	11 96       	adiw	r26, 0x01	; 1
     406:	8c 91       	ld	r24, X
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	52 9f       	mul	r21, r18
     40c:	80 0d       	add	r24, r0
     40e:	91 1d       	adc	r25, r1
     410:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     412:	db 01       	movw	r26, r22
     414:	12 96       	adiw	r26, 0x02	; 2
     416:	2c 91       	ld	r18, X
     418:	12 97       	sbiw	r26, 0x02	; 2
     41a:	11 96       	adiw	r26, 0x01	; 1
     41c:	6c 91       	ld	r22, X
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	52 9f       	mul	r21, r18
     422:	60 0d       	add	r22, r0
     424:	71 1d       	adc	r23, r1
     426:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     428:	42 81       	ldd	r20, Z+2	; 0x02
     42a:	21 81       	ldd	r18, Z+1	; 0x01
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	54 9f       	mul	r21, r20
     430:	20 0d       	add	r18, r0
     432:	31 1d       	adc	r19, r1
     434:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     436:	86 17       	cp	r24, r22
     438:	97 07       	cpc	r25, r23
     43a:	68 f0       	brcs	.+26     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     43c:	28 17       	cp	r18, r24
     43e:	39 07       	cpc	r19, r25
     440:	20 f0       	brcs	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     442:	28 33       	cpi	r18, 0x38	; 56
     444:	b9 e0       	ldi	r27, 0x09	; 9
     446:	3b 07       	cpc	r19, r27
     448:	78 f0       	brcs	.+30     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	26 17       	cp	r18, r22
     44e:	37 07       	cpc	r19, r23
     450:	70 f0       	brcs	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     456:	28 17       	cp	r18, r24
     458:	39 07       	cpc	r19, r25
     45a:	40 f0       	brcs	.+16     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	26 17       	cp	r18, r22
     460:	37 07       	cpc	r19, r23
     462:	28 f0       	brcs	.+10     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     46c:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     46e:	08 95       	ret

00000470 <fsm_lcd_menu>:

void fsm_lcd_menu()
{
     470:	0f 93       	push	r16
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
	switch(STATE)
     476:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <STATE>
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	09 f4       	brne	.+2      	; 0x480 <fsm_lcd_menu+0x10>
     47e:	7c c0       	rjmp	.+248    	; 0x578 <fsm_lcd_menu+0x108>
     480:	18 f4       	brcc	.+6      	; 0x488 <fsm_lcd_menu+0x18>
     482:	88 23       	and	r24, r24
     484:	41 f0       	breq	.+16     	; 0x496 <fsm_lcd_menu+0x26>
     486:	0c c5       	rjmp	.+2584   	; 0xea0 <__stack+0x5a1>
     488:	83 30       	cpi	r24, 0x03	; 3
     48a:	09 f4       	brne	.+2      	; 0x48e <fsm_lcd_menu+0x1e>
     48c:	ed c0       	rjmp	.+474    	; 0x668 <fsm_lcd_menu+0x1f8>
     48e:	84 30       	cpi	r24, 0x04	; 4
     490:	09 f4       	brne	.+2      	; 0x494 <fsm_lcd_menu+0x24>
     492:	c6 c2       	rjmp	.+1420   	; 0xa20 <__stack+0x121>
     494:	05 c5       	rjmp	.+2570   	; 0xea0 <__stack+0x5a1>
	{
		
		case DISPL1:
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     496:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <flag_pc_int>
     49a:	88 23       	and	r24, r24
     49c:	09 f4       	brne	.+2      	; 0x4a0 <fsm_lcd_menu+0x30>
     49e:	60 c0       	rjmp	.+192    	; 0x560 <fsm_lcd_menu+0xf0>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     4a0:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <flag_pc_int>
			
					getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     4a4:	00 e0       	ldi	r16, 0x00	; 0
     4a6:	2a eb       	ldi	r18, 0xBA	; 186
     4a8:	31 e0       	ldi	r19, 0x01	; 1
     4aa:	42 eb       	ldi	r20, 0xB2	; 178
     4ac:	51 e0       	ldi	r21, 0x01	; 1
     4ae:	63 eb       	ldi	r22, 0xB3	; 179
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	84 eb       	ldi	r24, 0xB4	; 180
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 8a 08 	call	0x1114	; 0x1114 <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     4ba:	e2 eb       	ldi	r30, 0xB2	; 178
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	80 81       	ld	r24, Z
     4c0:	1f 92       	push	r1
     4c2:	8f 93       	push	r24
     4c4:	81 81       	ldd	r24, Z+1	; 0x01
     4c6:	1f 92       	push	r1
     4c8:	8f 93       	push	r24
     4ca:	82 81       	ldd	r24, Z+2	; 0x02
     4cc:	1f 92       	push	r1
     4ce:	8f 93       	push	r24
     4d0:	84 e0       	ldi	r24, 0x04	; 4
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	c3 e8       	ldi	r28, 0x83	; 131
     4da:	d1 e0       	ldi	r29, 0x01	; 1
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
					
					//lcd1602_clear();
			
					/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
					lcd1602_goto_xy(0,0);
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
					lcd1602_send_string("    ");
     4ec:	85 e3       	ldi	r24, 0x35	; 53
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
					lcd1602_send_string(bafer);
     4f4:	ce 01       	movw	r24, r28
     4f6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
					lcd1602_send_string("    ");
     4fa:	85 e3       	ldi	r24, 0x35	; 53
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			
					lcd1602_goto_xy(0,1);
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
					lcd1602_send_string("  ");
     50a:	87 e3       	ldi	r24, 0x37	; 55
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
					sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     512:	e9 ea       	ldi	r30, 0xA9	; 169
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	81 81       	ldd	r24, Z+1	; 0x01
     518:	1f 92       	push	r1
     51a:	8f 93       	push	r24
     51c:	82 81       	ldd	r24, Z+2	; 0x02
     51e:	1f 92       	push	r1
     520:	8f 93       	push	r24
     522:	e0 ea       	ldi	r30, 0xA0	; 160
     524:	f1 e0       	ldi	r31, 0x01	; 1
     526:	81 81       	ldd	r24, Z+1	; 0x01
     528:	1f 92       	push	r1
     52a:	8f 93       	push	r24
     52c:	82 81       	ldd	r24, Z+2	; 0x02
     52e:	1f 92       	push	r1
     530:	8f 93       	push	r24
     532:	83 e1       	ldi	r24, 0x13	; 19
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	df 93       	push	r29
     53c:	cf 93       	push	r28
     53e:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
					lcd1602_send_string(bafer);
     542:	ce 01       	movw	r24, r28
     544:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
					lcd1602_send_string("  ");
     548:	87 e3       	ldi	r24, 0x37	; 55
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
     550:	8d b7       	in	r24, 0x3d	; 61
     552:	9e b7       	in	r25, 0x3e	; 62
     554:	46 96       	adiw	r24, 0x16	; 22
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	9e bf       	out	0x3e, r25	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	8d bf       	out	0x3d, r24	; 61
			
				}
		
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut   !(tasteri & (1<<TASTER_ENTER))
     560:	65 e0       	ldi	r22, 0x05	; 5
     562:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     566:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     56a:	88 23       	and	r24, r24
     56c:	09 f4       	brne	.+2      	; 0x570 <fsm_lcd_menu+0x100>
     56e:	98 c4       	rjmp	.+2352   	; 0xea0 <__stack+0x5a1>
					STATE = MENU1;
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     576:	94 c4       	rjmp	.+2344   	; 0xea0 <__stack+0x5a1>
		break;
		
		case MENU1:
					//lcd1602_clear();
		
					lcd1602_goto_xy(0, kursor);
     578:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <kursor>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
					lcd1602_send_string(">");
     582:	88 e2       	ldi	r24, 0x28	; 40
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
					lcd1602_goto_xy(0, !kursor);
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     590:	81 11       	cpse	r24, r1
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
					lcd1602_send_string(" ");
     59a:	88 e3       	ldi	r24, 0x38	; 56
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
		
					lcd1602_goto_xy(1,0);
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
					lcd1602_send_string("PODESI SAT     ");
     5aa:	8a e2       	ldi	r24, 0x2A	; 42
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
					lcd1602_goto_xy(1,1);
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
					lcd1602_send_string("PODESI PERIOD  ");
     5ba:	8a e3       	ldi	r24, 0x3A	; 58
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     5c2:	63 e0       	ldi	r22, 0x03	; 3
     5c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     5c8:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     5cc:	88 23       	and	r24, r24
     5ce:	61 f0       	breq	.+24     	; 0x5e8 <fsm_lcd_menu+0x178>
					{
						kursor++;
     5d0:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     5d4:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor > 1)
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	1c f4       	brge	.+6      	; 0x5e0 <fsm_lcd_menu+0x170>
					lcd1602_goto_xy(1,1);
					lcd1602_send_string("PODESI PERIOD  ");
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor++;
     5da:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     5de:	60 c4       	rjmp	.+2240   	; 0xea0 <__stack+0x5a1>
						if(kursor > 1)
						kursor = 1;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     5e6:	5c c4       	rjmp	.+2232   	; 0xea0 <__stack+0x5a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     5e8:	62 e0       	ldi	r22, 0x02	; 2
     5ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     5ee:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     5f2:	88 23       	and	r24, r24
     5f4:	51 f0       	breq	.+20     	; 0x60a <fsm_lcd_menu+0x19a>
					{
						kursor--;
     5f6:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     5fa:	81 50       	subi	r24, 0x01	; 1
						if(kursor < 0)
     5fc:	1a f0       	brmi	.+6      	; 0x604 <fsm_lcd_menu+0x194>
						if(kursor > 1)
						kursor = 1;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor--;
     5fe:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     602:	4e c4       	rjmp	.+2204   	; 0xea0 <__stack+0x5a1>
						if(kursor < 0)
						kursor = 0;
     604:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
     608:	4b c4       	rjmp	.+2198   	; 0xea0 <__stack+0x5a1>
					}
					else if(kursor == 0 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     60a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     60e:	81 11       	cpse	r24, r1
     610:	0d c0       	rjmp	.+26     	; 0x62c <fsm_lcd_menu+0x1bc>
     612:	65 e0       	ldi	r22, 0x05	; 5
     614:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     618:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     61c:	88 23       	and	r24, r24
     61e:	31 f0       	breq	.+12     	; 0x62c <fsm_lcd_menu+0x1bc>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     620:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						STATE = POD_SAT;	//meni za podesavanje sata
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     62a:	3a c4       	rjmp	.+2164   	; 0xea0 <__stack+0x5a1>
					}
					else if(kursor == 1 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     62c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     630:	81 30       	cpi	r24, 0x01	; 1
     632:	69 f4       	brne	.+26     	; 0x64e <fsm_lcd_menu+0x1de>
     634:	65 e0       	ldi	r22, 0x05	; 5
     636:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     63a:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     63e:	88 23       	and	r24, r24
     640:	31 f0       	breq	.+12     	; 0x64e <fsm_lcd_menu+0x1de>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     642:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     646:	84 e0       	ldi	r24, 0x04	; 4
     648:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     64c:	29 c4       	rjmp	.+2130   	; 0xea0 <__stack+0x5a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     64e:	64 e0       	ldi	r22, 0x04	; 4
     650:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     654:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     658:	88 23       	and	r24, r24
     65a:	09 f4       	brne	.+2      	; 0x65e <fsm_lcd_menu+0x1ee>
     65c:	21 c4       	rjmp	.+2114   	; 0xea0 <__stack+0x5a1>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     65e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     662:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <STATE>
     666:	1c c4       	rjmp	.+2104   	; 0xea0 <__stack+0x5a1>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (flag_pod_vremena)
     668:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_pod_vremena>
     66c:	88 23       	and	r24, r24
     66e:	09 f4       	brne	.+2      	; 0x672 <fsm_lcd_menu+0x202>
     670:	4b c0       	rjmp	.+150    	; 0x708 <fsm_lcd_menu+0x298>
					{
						flag_pod_vremena = 0;
     672:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_pod_vremena>
						sanp_shot_vremena = vreme_datum;
     676:	89 e0       	ldi	r24, 0x09	; 9
     678:	e2 eb       	ldi	r30, 0xB2	; 178
     67a:	f1 e0       	ldi	r31, 0x01	; 1
     67c:	a7 e9       	ldi	r26, 0x97	; 151
     67e:	b1 e0       	ldi	r27, 0x01	; 1
     680:	01 90       	ld	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	8a 95       	dec	r24
     686:	e1 f7       	brne	.-8      	; 0x680 <fsm_lcd_menu+0x210>
						sprintf(bafer, "%02d:%02d:%02d", sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s);
     688:	e7 e9       	ldi	r30, 0x97	; 151
     68a:	f1 e0       	ldi	r31, 0x01	; 1
     68c:	80 81       	ld	r24, Z
     68e:	1f 92       	push	r1
     690:	8f 93       	push	r24
     692:	81 81       	ldd	r24, Z+1	; 0x01
     694:	1f 92       	push	r1
     696:	8f 93       	push	r24
     698:	82 81       	ldd	r24, Z+2	; 0x02
     69a:	1f 92       	push	r1
     69c:	8f 93       	push	r24
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	83 e8       	ldi	r24, 0x83	; 131
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
			
						kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     6b2:	85 e0       	ldi	r24, 0x05	; 5
     6b4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
			
						lcd1602_goto_xy(0,0);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string("PODESAVANJE SATA");
     6c0:	8a e4       	ldi	r24, 0x4A	; 74
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			
						lcd1602_goto_xy(0,1);
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string("    ");
     6d0:	85 e3       	ldi	r24, 0x35	; 53
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     6d8:	83 e8       	ldi	r24, 0x83	; 131
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						lcd1602_send_string("    ");
     6e0:	85 e3       	ldi	r24, 0x35	; 53
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			
						lcd1602_goto_xy(kursor,1);
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     6ee:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd1602_cursor_blink>
     6f8:	8d b7       	in	r24, 0x3d	; 61
     6fa:	9e b7       	in	r25, 0x3e	; 62
     6fc:	0a 96       	adiw	r24, 0x0a	; 10
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	9e bf       	out	0x3e, r25	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	8d bf       	out	0x3d, r24	; 61
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     70e:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     712:	88 23       	and	r24, r24
     714:	89 f0       	breq	.+34     	; 0x738 <fsm_lcd_menu+0x2c8>
					{
						kursor += 3;
     716:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     71a:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 11)
     71c:	8c 30       	cpi	r24, 0x0C	; 12
     71e:	1c f4       	brge	.+6      	; 0x726 <fsm_lcd_menu+0x2b6>
						lcd1602_cursor_blink(1);
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     720:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     724:	03 c0       	rjmp	.+6      	; 0x72c <fsm_lcd_menu+0x2bc>
						if(kursor > 11)
							kursor = 11;
     726:	8b e0       	ldi	r24, 0x0B	; 11
     728:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
						lcd1602_goto_xy(kursor,1);
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     732:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     736:	b4 c3       	rjmp	.+1896   	; 0xea0 <__stack+0x5a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     73e:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     742:	88 23       	and	r24, r24
     744:	89 f0       	breq	.+34     	; 0x768 <fsm_lcd_menu+0x2f8>
					{
						kursor -= 3;
     746:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     74a:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 5)
     74c:	85 30       	cpi	r24, 0x05	; 5
     74e:	1c f0       	brlt	.+6      	; 0x756 <fsm_lcd_menu+0x2e6>
							kursor = 11;
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     750:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     754:	03 c0       	rjmp	.+6      	; 0x75c <fsm_lcd_menu+0x2ec>
						if(kursor < 5)
							kursor = 5;
     756:	85 e0       	ldi	r24, 0x05	; 5
     758:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
						lcd1602_goto_xy(kursor,1);
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     762:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     766:	9c c3       	rjmp	.+1848   	; 0xea0 <__stack+0x5a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     768:	62 e0       	ldi	r22, 0x02	; 2
     76a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     76e:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     772:	88 23       	and	r24, r24
     774:	09 f4       	brne	.+2      	; 0x778 <fsm_lcd_menu+0x308>
     776:	99 c0       	rjmp	.+306    	; 0x8aa <fsm_lcd_menu+0x43a>
					{
						if (kursor == 5)	//podesava SATE ++
     778:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     77c:	85 30       	cpi	r24, 0x05	; 5
     77e:	81 f5       	brne	.+96     	; 0x7e0 <fsm_lcd_menu+0x370>
						{
							sanp_shot_vremena.hr++;
     780:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <sanp_shot_vremena+0x2>
							if(sanp_shot_vremena.hr >= 24 && sanp_shot_vremena.hr < 30)		//<30 posto je hr = unsigned int
     784:	99 ee       	ldi	r25, 0xE9	; 233
     786:	98 0f       	add	r25, r24
     788:	96 30       	cpi	r25, 0x06	; 6
     78a:	20 f0       	brcs	.+8      	; 0x794 <fsm_lcd_menu+0x324>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
					{
						if (kursor == 5)	//podesava SATE ++
						{
							sanp_shot_vremena.hr++;
     78c:	8f 5f       	subi	r24, 0xFF	; 255
     78e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <sanp_shot_vremena+0x2>
     792:	02 c0       	rjmp	.+4      	; 0x798 <fsm_lcd_menu+0x328>
							if(sanp_shot_vremena.hr >= 24 && sanp_shot_vremena.hr < 30)		//<30 posto je hr = unsigned int
								sanp_shot_vremena.hr = 0;
     794:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <sanp_shot_vremena+0x2>
				
							sprintf(bafer, "%02d", sanp_shot_vremena.hr);
     798:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <sanp_shot_vremena+0x2>
     79c:	1f 92       	push	r1
     79e:	8f 93       	push	r24
     7a0:	83 e2       	ldi	r24, 0x23	; 35
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	9f 93       	push	r25
     7a6:	8f 93       	push	r24
     7a8:	83 e8       	ldi	r24, 0x83	; 131
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     7b4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     7c0:	83 e8       	ldi	r24, 0x83	; 131
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     7ce:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	60 c3       	rjmp	.+1728   	; 0xea0 <__stack+0x5a1>
							//setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
						}
						else if (kursor == 8)	//podesava MINUTE ++
     7e0:	88 30       	cpi	r24, 0x08	; 8
     7e2:	81 f5       	brne	.+96     	; 0x844 <fsm_lcd_menu+0x3d4>
						{
							sanp_shot_vremena.min++;
     7e4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <sanp_shot_vremena+0x1>
							if(sanp_shot_vremena.min >= 60 && sanp_shot_vremena.min < 65)		//<65 posto je = unsigned int
     7e8:	95 ec       	ldi	r25, 0xC5	; 197
     7ea:	98 0f       	add	r25, r24
     7ec:	95 30       	cpi	r25, 0x05	; 5
     7ee:	20 f0       	brcs	.+8      	; 0x7f8 <fsm_lcd_menu+0x388>
							lcd1602_goto_xy(kursor,1);
							//setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
						}
						else if (kursor == 8)	//podesava MINUTE ++
						{
							sanp_shot_vremena.min++;
     7f0:	8f 5f       	subi	r24, 0xFF	; 255
     7f2:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <sanp_shot_vremena+0x1>
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <fsm_lcd_menu+0x38c>
							if(sanp_shot_vremena.min >= 60 && sanp_shot_vremena.min < 65)		//<65 posto je = unsigned int
								sanp_shot_vremena.min = 0;
     7f8:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <sanp_shot_vremena+0x1>
				
							sprintf(bafer, "%02d", sanp_shot_vremena.min);
     7fc:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <sanp_shot_vremena+0x1>
     800:	1f 92       	push	r1
     802:	8f 93       	push	r24
     804:	83 e2       	ldi	r24, 0x23	; 35
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	83 e8       	ldi	r24, 0x83	; 131
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	9f 93       	push	r25
     812:	8f 93       	push	r24
     814:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     818:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	81 50       	subi	r24, 0x01	; 1
     820:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     824:	83 e8       	ldi	r24, 0x83	; 131
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     832:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	2e c3       	rjmp	.+1628   	; 0xea0 <__stack+0x5a1>
							//setTime(vreme_datum.hr, sanp_shot_vremena.min, vreme_datum.s, am, _24_hour_format);
						}
						else if (kursor == 11)	//podesava SEKUNDE ++
     844:	8b 30       	cpi	r24, 0x0B	; 11
     846:	09 f0       	breq	.+2      	; 0x84a <fsm_lcd_menu+0x3da>
     848:	2b c3       	rjmp	.+1622   	; 0xea0 <__stack+0x5a1>
						{
							sanp_shot_vremena.s++;
     84a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <sanp_shot_vremena>
							if(sanp_shot_vremena.s >= 60 && sanp_shot_vremena.s < 65)		//<65 posto je = unsigned int
     84e:	95 ec       	ldi	r25, 0xC5	; 197
     850:	98 0f       	add	r25, r24
     852:	95 30       	cpi	r25, 0x05	; 5
     854:	20 f0       	brcs	.+8      	; 0x85e <fsm_lcd_menu+0x3ee>
							lcd1602_goto_xy(kursor,1);
							//setTime(vreme_datum.hr, sanp_shot_vremena.min, vreme_datum.s, am, _24_hour_format);
						}
						else if (kursor == 11)	//podesava SEKUNDE ++
						{
							sanp_shot_vremena.s++;
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <sanp_shot_vremena>
     85c:	02 c0       	rjmp	.+4      	; 0x862 <fsm_lcd_menu+0x3f2>
							if(sanp_shot_vremena.s >= 60 && sanp_shot_vremena.s < 65)		//<65 posto je = unsigned int
								sanp_shot_vremena.s = 0;
     85e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <sanp_shot_vremena>
				
							sprintf(bafer, "%02d", sanp_shot_vremena.s);
     862:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <sanp_shot_vremena>
     866:	1f 92       	push	r1
     868:	8f 93       	push	r24
     86a:	83 e2       	ldi	r24, 0x23	; 35
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	9f 93       	push	r25
     870:	8f 93       	push	r24
     872:	83 e8       	ldi	r24, 0x83	; 131
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	9f 93       	push	r25
     878:	8f 93       	push	r24
     87a:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     87e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	81 50       	subi	r24, 0x01	; 1
     886:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     88a:	83 e8       	ldi	r24, 0x83	; 131
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     898:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	fb c2       	rjmp	.+1526   	; 0xea0 <__stack+0x5a1>
							//setTime(vreme_datum.hr, vreme_datum.min, sanp_shot_vremena.s, am, _24_hour_format);
						}
			
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     8aa:	63 e0       	ldi	r22, 0x03	; 3
     8ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     8b0:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     8b4:	88 23       	and	r24, r24
     8b6:	09 f4       	brne	.+2      	; 0x8ba <fsm_lcd_menu+0x44a>
     8b8:	96 c0       	rjmp	.+300    	; 0x9e6 <__stack+0xe7>
					{
						if (kursor == 5)	//podesava SATE --
     8ba:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     8be:	85 30       	cpi	r24, 0x05	; 5
     8c0:	79 f5       	brne	.+94     	; 0x920 <__stack+0x21>
						{
							sanp_shot_vremena.hr--;
     8c2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <sanp_shot_vremena+0x2>
     8c6:	81 50       	subi	r24, 0x01	; 1
							if(sanp_shot_vremena.hr >= 250 && sanp_shot_vremena.hr <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     8c8:	8a 3f       	cpi	r24, 0xFA	; 250
     8ca:	18 f4       	brcc	.+6      	; 0x8d2 <fsm_lcd_menu+0x462>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
					{
						if (kursor == 5)	//podesava SATE --
						{
							sanp_shot_vremena.hr--;
     8cc:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <sanp_shot_vremena+0x2>
     8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <fsm_lcd_menu+0x468>
							if(sanp_shot_vremena.hr >= 250 && sanp_shot_vremena.hr <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
								sanp_shot_vremena.hr = 23;
     8d2:	87 e1       	ldi	r24, 0x17	; 23
     8d4:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <sanp_shot_vremena+0x2>
				
							sprintf(bafer, "%02d", sanp_shot_vremena.hr);
     8d8:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <sanp_shot_vremena+0x2>
     8dc:	1f 92       	push	r1
     8de:	8f 93       	push	r24
     8e0:	83 e2       	ldi	r24, 0x23	; 35
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	83 e8       	ldi	r24, 0x83	; 131
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	9f 93       	push	r25
     8ee:	8f 93       	push	r24
     8f0:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     8f4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	81 50       	subi	r24, 0x01	; 1
     8fc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     900:	83 e8       	ldi	r24, 0x83	; 131
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     90e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	c0 c2       	rjmp	.+1408   	; 0xea0 <__stack+0x5a1>
							//setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
						}
						else if (kursor == 8)	//podesava MINUTE --
     920:	88 30       	cpi	r24, 0x08	; 8
     922:	79 f5       	brne	.+94     	; 0x982 <__stack+0x83>
						{
							sanp_shot_vremena.min--;
     924:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <sanp_shot_vremena+0x1>
     928:	81 50       	subi	r24, 0x01	; 1
							if(sanp_shot_vremena.min >= 250 && sanp_shot_vremena.min <= 255)	//posto je = unsigned int 8 bit i overflow se desi
     92a:	8a 3f       	cpi	r24, 0xFA	; 250
     92c:	18 f4       	brcc	.+6      	; 0x934 <__stack+0x35>
							lcd1602_goto_xy(kursor,1);
							//setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
						}
						else if (kursor == 8)	//podesava MINUTE --
						{
							sanp_shot_vremena.min--;
     92e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <sanp_shot_vremena+0x1>
     932:	03 c0       	rjmp	.+6      	; 0x93a <__stack+0x3b>
							if(sanp_shot_vremena.min >= 250 && sanp_shot_vremena.min <= 255)	//posto je = unsigned int 8 bit i overflow se desi
								sanp_shot_vremena.min = 59;
     934:	8b e3       	ldi	r24, 0x3B	; 59
     936:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <sanp_shot_vremena+0x1>
				
							sprintf(bafer, "%02d", sanp_shot_vremena.min);
     93a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <sanp_shot_vremena+0x1>
     93e:	1f 92       	push	r1
     940:	8f 93       	push	r24
     942:	83 e2       	ldi	r24, 0x23	; 35
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	83 e8       	ldi	r24, 0x83	; 131
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	9f 93       	push	r25
     950:	8f 93       	push	r24
     952:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     956:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	81 50       	subi	r24, 0x01	; 1
     95e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     962:	83 e8       	ldi	r24, 0x83	; 131
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     970:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	8f c2       	rjmp	.+1310   	; 0xea0 <__stack+0x5a1>
							//setTime(vreme_datum.hr, sanp_shot_vremena.min, vreme_datum.s, am, _24_hour_format);
						}
						else if (kursor == 11)	//podesava SEKUNDE --
     982:	8b 30       	cpi	r24, 0x0B	; 11
     984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x89>
     986:	8c c2       	rjmp	.+1304   	; 0xea0 <__stack+0x5a1>
						{
							sanp_shot_vremena.s--;
     988:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <sanp_shot_vremena>
     98c:	81 50       	subi	r24, 0x01	; 1
							if(sanp_shot_vremena.s >= 250 && sanp_shot_vremena.s <= 255)	//posto je = unsigned int 8 bit i overflow se desi
     98e:	8a 3f       	cpi	r24, 0xFA	; 250
     990:	18 f4       	brcc	.+6      	; 0x998 <__stack+0x99>
							lcd1602_goto_xy(kursor,1);
							//setTime(vreme_datum.hr, sanp_shot_vremena.min, vreme_datum.s, am, _24_hour_format);
						}
						else if (kursor == 11)	//podesava SEKUNDE --
						{
							sanp_shot_vremena.s--;
     992:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <sanp_shot_vremena>
     996:	03 c0       	rjmp	.+6      	; 0x99e <__stack+0x9f>
							if(sanp_shot_vremena.s >= 250 && sanp_shot_vremena.s <= 255)	//posto je = unsigned int 8 bit i overflow se desi
								sanp_shot_vremena.s = 59;
     998:	8b e3       	ldi	r24, 0x3B	; 59
     99a:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <sanp_shot_vremena>
				
							sprintf(bafer, "%02d", sanp_shot_vremena.s);
     99e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <sanp_shot_vremena>
     9a2:	1f 92       	push	r1
     9a4:	8f 93       	push	r24
     9a6:	83 e2       	ldi	r24, 0x23	; 35
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	9f 93       	push	r25
     9ac:	8f 93       	push	r24
     9ae:	83 e8       	ldi	r24, 0x83	; 131
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     9ba:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	81 50       	subi	r24, 0x01	; 1
     9c2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     9c6:	83 e8       	ldi	r24, 0x83	; 131
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     9d4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	5d c2       	rjmp	.+1210   	; 0xea0 <__stack+0x5a1>
							//setTime(vreme_datum.hr, vreme_datum.min, sanp_shot_vremena.s, am, _24_hour_format);
						}
			
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     9e6:	64 e0       	ldi	r22, 0x04	; 4
     9e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     9ec:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     9f0:	88 23       	and	r24, r24
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	55 c2       	rjmp	.+1194   	; 0xea0 <__stack+0x5a1>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
     9f6:	e7 e9       	ldi	r30, 0x97	; 151
     9f8:	f1 e0       	ldi	r31, 0x01	; 1
     9fa:	00 e0       	ldi	r16, 0x00	; 0
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	40 81       	ld	r20, Z
     a00:	61 81       	ldd	r22, Z+1	; 0x01
     a02:	82 81       	ldd	r24, Z+2	; 0x02
     a04:	0e 94 c8 08 	call	0x1190	; 0x1190 <setTime>
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     a0e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     a1e:	40 c2       	rjmp	.+1152   	; 0xea0 <__stack+0x5a1>
		break;
		
		case POD_ON_OFF:
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
     a20:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a24:	88 23       	and	r24, r24
     a26:	09 f4       	brne	.+2      	; 0xa2a <__stack+0x12b>
     a28:	47 c0       	rjmp	.+142    	; 0xab8 <__stack+0x1b9>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
     a2a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
						
						lcd1602_goto_xy(0,0);
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string("  UPALI--UGASI  ");
     a3c:	8b e5       	ldi	r24, 0x5B	; 91
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     a44:	e9 ea       	ldi	r30, 0xA9	; 169
     a46:	f1 e0       	ldi	r31, 0x01	; 1
     a48:	81 81       	ldd	r24, Z+1	; 0x01
     a4a:	1f 92       	push	r1
     a4c:	8f 93       	push	r24
     a4e:	82 81       	ldd	r24, Z+2	; 0x02
     a50:	1f 92       	push	r1
     a52:	8f 93       	push	r24
     a54:	e0 ea       	ldi	r30, 0xA0	; 160
     a56:	f1 e0       	ldi	r31, 0x01	; 1
     a58:	81 81       	ldd	r24, Z+1	; 0x01
     a5a:	1f 92       	push	r1
     a5c:	8f 93       	push	r24
     a5e:	82 81       	ldd	r24, Z+2	; 0x02
     a60:	1f 92       	push	r1
     a62:	8f 93       	push	r24
     a64:	83 e1       	ldi	r24, 0x13	; 19
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	9f 93       	push	r25
     a6a:	8f 93       	push	r24
     a6c:	83 e8       	ldi	r24, 0x83	; 131
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	9f 93       	push	r25
     a72:	8f 93       	push	r24
     a74:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
						
						lcd1602_goto_xy(0,1);
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string("  ");
     a80:	87 e3       	ldi	r24, 0x37	; 55
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     a88:	83 e8       	ldi	r24, 0x83	; 131
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						lcd1602_send_string("  ");
     a90:	87 e3       	ldi	r24, 0x37	; 55
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     a9e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd1602_cursor_blink>
     aa8:	8d b7       	in	r24, 0x3d	; 61
     aaa:	9e b7       	in	r25, 0x3e	; 62
     aac:	0c 96       	adiw	r24, 0x0c	; 12
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	9e bf       	out	0x3e, r25	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     abe:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     ac2:	88 23       	and	r24, r24
     ac4:	c9 f0       	breq	.+50     	; 0xaf8 <__stack+0x1f9>
					{
						kursor += 3;
     ac6:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
     aca:	9c ef       	ldi	r25, 0xFC	; 252
     acc:	98 0f       	add	r25, r24
     ace:	93 30       	cpi	r25, 0x03	; 3
     ad0:	20 f4       	brcc	.+8      	; 0xada <__stack+0x1db>
							kursor = 10;
     ad2:	8a e0       	ldi	r24, 0x0A	; 10
     ad4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     ad8:	09 c0       	rjmp	.+18     	; 0xaec <__stack+0x1ed>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     ada:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
     adc:	8e 30       	cpi	r24, 0x0E	; 14
     ade:	1c f4       	brge	.+6      	; 0xae6 <__stack+0x1e7>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     ae0:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <__stack+0x1ed>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
							kursor = 13;
     ae6:	8d e0       	ldi	r24, 0x0D	; 13
     ae8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     af2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     af6:	d4 c1       	rjmp	.+936    	; 0xea0 <__stack+0x5a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     afe:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     b02:	88 23       	and	r24, r24
     b04:	c9 f0       	breq	.+50     	; 0xb38 <__stack+0x239>
					{
						kursor -= 3;
     b06:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
     b0a:	96 ef       	ldi	r25, 0xF6	; 246
     b0c:	98 0f       	add	r25, r24
     b0e:	93 30       	cpi	r25, 0x03	; 3
     b10:	20 f4       	brcc	.+8      	; 0xb1a <__stack+0x21b>
							kursor = 6;
     b12:	86 e0       	ldi	r24, 0x06	; 6
     b14:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     b18:	09 c0       	rjmp	.+18     	; 0xb2c <__stack+0x22d>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     b1a:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
     b1c:	83 30       	cpi	r24, 0x03	; 3
     b1e:	1c f0       	brlt	.+6      	; 0xb26 <__stack+0x227>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     b20:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <__stack+0x22d>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
							kursor = 3;
     b26:	83 e0       	ldi	r24, 0x03	; 3
     b28:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     b32:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     b36:	b4 c1       	rjmp	.+872    	; 0xea0 <__stack+0x5a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     b38:	62 e0       	ldi	r22, 0x02	; 2
     b3a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     b3e:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     b42:	88 23       	and	r24, r24
     b44:	09 f4       	brne	.+2      	; 0xb48 <__stack+0x249>
     b46:	cb c0       	rjmp	.+406    	; 0xcde <__stack+0x3df>
					{
						if (kursor == 3)									//podesava SATE_ON ++
     b48:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     b4c:	83 30       	cpi	r24, 0x03	; 3
     b4e:	81 f5       	brne	.+96     	; 0xbb0 <__stack+0x2b1>
						{
							vreme_paljenja.hr++;
     b50:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <vreme_paljenja+0x2>
							if(vreme_paljenja.hr >= 24 && vreme_paljenja.hr < 30)		//<30 posto je hr = unsigned int
     b54:	99 ee       	ldi	r25, 0xE9	; 233
     b56:	98 0f       	add	r25, r24
     b58:	96 30       	cpi	r25, 0x06	; 6
     b5a:	20 f0       	brcs	.+8      	; 0xb64 <__stack+0x265>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
					{
						if (kursor == 3)									//podesava SATE_ON ++
						{
							vreme_paljenja.hr++;
     b5c:	8f 5f       	subi	r24, 0xFF	; 255
     b5e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <vreme_paljenja+0x2>
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <__stack+0x269>
							if(vreme_paljenja.hr >= 24 && vreme_paljenja.hr < 30)		//<30 posto je hr = unsigned int
								vreme_paljenja.hr = 0;
     b64:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <vreme_paljenja+0x2>
							
							sprintf(bafer, "%02d", vreme_paljenja.hr);
     b68:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <vreme_paljenja+0x2>
     b6c:	1f 92       	push	r1
     b6e:	8f 93       	push	r24
     b70:	83 e2       	ldi	r24, 0x23	; 35
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	9f 93       	push	r25
     b76:	8f 93       	push	r24
     b78:	83 e8       	ldi	r24, 0x83	; 131
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     b84:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	81 50       	subi	r24, 0x01	; 1
     b8c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     b90:	83 e8       	ldi	r24, 0x83	; 131
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     b9e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	78 c1       	rjmp	.+752    	; 0xea0 <__stack+0x5a1>
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 6)								//podesava MINUTE_ON ++
     bb0:	86 30       	cpi	r24, 0x06	; 6
     bb2:	81 f5       	brne	.+96     	; 0xc14 <__stack+0x315>
						{
							vreme_paljenja.min++;
     bb4:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <vreme_paljenja+0x1>
							if(vreme_paljenja.min >= 60 && vreme_paljenja.min < 65)		//<65 posto je = unsigned int
     bb8:	95 ec       	ldi	r25, 0xC5	; 197
     bba:	98 0f       	add	r25, r24
     bbc:	95 30       	cpi	r25, 0x05	; 5
     bbe:	20 f0       	brcs	.+8      	; 0xbc8 <__stack+0x2c9>
							lcd1602_goto_xy(kursor,1);
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 6)								//podesava MINUTE_ON ++
						{
							vreme_paljenja.min++;
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <vreme_paljenja+0x1>
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <__stack+0x2cd>
							if(vreme_paljenja.min >= 60 && vreme_paljenja.min < 65)		//<65 posto je = unsigned int
								vreme_paljenja.min = 0;
     bc8:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <vreme_paljenja+0x1>
							
							sprintf(bafer, "%02d", vreme_paljenja.min);
     bcc:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <vreme_paljenja+0x1>
     bd0:	1f 92       	push	r1
     bd2:	8f 93       	push	r24
     bd4:	83 e2       	ldi	r24, 0x23	; 35
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	9f 93       	push	r25
     bda:	8f 93       	push	r24
     bdc:	83 e8       	ldi	r24, 0x83	; 131
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	9f 93       	push	r25
     be2:	8f 93       	push	r24
     be4:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     be8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	81 50       	subi	r24, 0x01	; 1
     bf0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     bf4:	83 e8       	ldi	r24, 0x83	; 131
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     c02:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	46 c1       	rjmp	.+652    	; 0xea0 <__stack+0x5a1>
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 10)								//podesava SATE_OFF ++
     c14:	8a 30       	cpi	r24, 0x0A	; 10
     c16:	81 f5       	brne	.+96     	; 0xc78 <__stack+0x379>
						{
							vreme_gasenja.hr++;
     c18:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <vreme_gasenja+0x2>
							if(vreme_gasenja.hr >= 24 && vreme_gasenja.hr < 30)		//<65 posto je = unsigned int
     c1c:	99 ee       	ldi	r25, 0xE9	; 233
     c1e:	98 0f       	add	r25, r24
     c20:	96 30       	cpi	r25, 0x06	; 6
     c22:	20 f0       	brcs	.+8      	; 0xc2c <__stack+0x32d>
							lcd1602_goto_xy(kursor,1);
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 10)								//podesava SATE_OFF ++
						{
							vreme_gasenja.hr++;
     c24:	8f 5f       	subi	r24, 0xFF	; 255
     c26:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <vreme_gasenja+0x2>
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <__stack+0x331>
							if(vreme_gasenja.hr >= 24 && vreme_gasenja.hr < 30)		//<65 posto je = unsigned int
								vreme_gasenja.hr = 0;
     c2c:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <vreme_gasenja+0x2>
							
							sprintf(bafer, "%02d", vreme_gasenja.hr);
     c30:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <vreme_gasenja+0x2>
     c34:	1f 92       	push	r1
     c36:	8f 93       	push	r24
     c38:	83 e2       	ldi	r24, 0x23	; 35
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	9f 93       	push	r25
     c3e:	8f 93       	push	r24
     c40:	83 e8       	ldi	r24, 0x83	; 131
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	9f 93       	push	r25
     c46:	8f 93       	push	r24
     c48:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     c4c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	81 50       	subi	r24, 0x01	; 1
     c54:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     c58:	83 e8       	ldi	r24, 0x83	; 131
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     c66:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	14 c1       	rjmp	.+552    	; 0xea0 <__stack+0x5a1>
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 13)								//podesava MINUTE_OFF ++
     c78:	8d 30       	cpi	r24, 0x0D	; 13
     c7a:	09 f0       	breq	.+2      	; 0xc7e <__stack+0x37f>
     c7c:	11 c1       	rjmp	.+546    	; 0xea0 <__stack+0x5a1>
						{
							vreme_gasenja.min++;
     c7e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <vreme_gasenja+0x1>
							if(vreme_gasenja.min >= 60 && vreme_gasenja.min < 65)		//<65 posto je = unsigned int
     c82:	95 ec       	ldi	r25, 0xC5	; 197
     c84:	98 0f       	add	r25, r24
     c86:	95 30       	cpi	r25, 0x05	; 5
     c88:	20 f0       	brcs	.+8      	; 0xc92 <__stack+0x393>
							lcd1602_goto_xy(kursor,1);
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 13)								//podesava MINUTE_OFF ++
						{
							vreme_gasenja.min++;
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
     c8c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <vreme_gasenja+0x1>
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <__stack+0x397>
							if(vreme_gasenja.min >= 60 && vreme_gasenja.min < 65)		//<65 posto je = unsigned int
								vreme_gasenja.min = 0;
     c92:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <vreme_gasenja+0x1>
							
							sprintf(bafer, "%02d", vreme_gasenja.min);
     c96:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <vreme_gasenja+0x1>
     c9a:	1f 92       	push	r1
     c9c:	8f 93       	push	r24
     c9e:	83 e2       	ldi	r24, 0x23	; 35
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	9f 93       	push	r25
     ca4:	8f 93       	push	r24
     ca6:	83 e8       	ldi	r24, 0x83	; 131
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	9f 93       	push	r25
     cac:	8f 93       	push	r24
     cae:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     cb2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	81 50       	subi	r24, 0x01	; 1
     cba:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     cbe:	83 e8       	ldi	r24, 0x83	; 131
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     ccc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	e1 c0       	rjmp	.+450    	; 0xea0 <__stack+0x5a1>
							//TODO: UPIS U EEPROM
						}
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     cde:	63 e0       	ldi	r22, 0x03	; 3
     ce0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     ce4:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     ce8:	88 23       	and	r24, r24
     cea:	09 f4       	brne	.+2      	; 0xcee <__stack+0x3ef>
     cec:	c7 c0       	rjmp	.+398    	; 0xe7c <__stack+0x57d>
					{
						if (kursor == 3)									//podesava SATE_ON --
     cee:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	79 f5       	brne	.+94     	; 0xd54 <__stack+0x455>
						{
							vreme_paljenja.hr--;
     cf6:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <vreme_paljenja+0x2>
     cfa:	81 50       	subi	r24, 0x01	; 1
							if(vreme_paljenja.hr >= 250 && vreme_paljenja.hr <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     cfc:	8a 3f       	cpi	r24, 0xFA	; 250
     cfe:	18 f4       	brcc	.+6      	; 0xd06 <__stack+0x407>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
					{
						if (kursor == 3)									//podesava SATE_ON --
						{
							vreme_paljenja.hr--;
     d00:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <vreme_paljenja+0x2>
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <__stack+0x40d>
							if(vreme_paljenja.hr >= 250 && vreme_paljenja.hr <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
								vreme_paljenja.hr = 23;
     d06:	87 e1       	ldi	r24, 0x17	; 23
     d08:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <vreme_paljenja+0x2>
							
							sprintf(bafer, "%02d", vreme_paljenja.hr);
     d0c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <vreme_paljenja+0x2>
     d10:	1f 92       	push	r1
     d12:	8f 93       	push	r24
     d14:	83 e2       	ldi	r24, 0x23	; 35
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	9f 93       	push	r25
     d1a:	8f 93       	push	r24
     d1c:	83 e8       	ldi	r24, 0x83	; 131
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     d28:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	81 50       	subi	r24, 0x01	; 1
     d30:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     d34:	83 e8       	ldi	r24, 0x83	; 131
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     d42:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	a6 c0       	rjmp	.+332    	; 0xea0 <__stack+0x5a1>
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 6)								//podesava MINUTE_ON --
     d54:	86 30       	cpi	r24, 0x06	; 6
     d56:	79 f5       	brne	.+94     	; 0xdb6 <__stack+0x4b7>
						{
							vreme_paljenja.min--;
     d58:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <vreme_paljenja+0x1>
     d5c:	81 50       	subi	r24, 0x01	; 1
							if(vreme_paljenja.min >= 250 && vreme_paljenja.min <= 255)	//posto je = unsigned int 8 bit i overflow se desi
     d5e:	8a 3f       	cpi	r24, 0xFA	; 250
     d60:	18 f4       	brcc	.+6      	; 0xd68 <__stack+0x469>
							lcd1602_goto_xy(kursor,1);
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 6)								//podesava MINUTE_ON --
						{
							vreme_paljenja.min--;
     d62:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <vreme_paljenja+0x1>
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <__stack+0x46f>
							if(vreme_paljenja.min >= 250 && vreme_paljenja.min <= 255)	//posto je = unsigned int 8 bit i overflow se desi
								vreme_paljenja.min = 59;
     d68:	8b e3       	ldi	r24, 0x3B	; 59
     d6a:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <vreme_paljenja+0x1>
							
							sprintf(bafer, "%02d", vreme_paljenja.min);
     d6e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <vreme_paljenja+0x1>
     d72:	1f 92       	push	r1
     d74:	8f 93       	push	r24
     d76:	83 e2       	ldi	r24, 0x23	; 35
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	83 e8       	ldi	r24, 0x83	; 131
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	9f 93       	push	r25
     d84:	8f 93       	push	r24
     d86:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     d8a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	81 50       	subi	r24, 0x01	; 1
     d92:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     d96:	83 e8       	ldi	r24, 0x83	; 131
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     da4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	75 c0       	rjmp	.+234    	; 0xea0 <__stack+0x5a1>
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 10)								//podesava SATE_OFF --
     db6:	8a 30       	cpi	r24, 0x0A	; 10
     db8:	79 f5       	brne	.+94     	; 0xe18 <__stack+0x519>
						{
							vreme_gasenja.hr--;
     dba:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <vreme_gasenja+0x2>
     dbe:	81 50       	subi	r24, 0x01	; 1
							if(vreme_gasenja.hr >= 250 && vreme_gasenja.hr <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     dc0:	8a 3f       	cpi	r24, 0xFA	; 250
     dc2:	18 f4       	brcc	.+6      	; 0xdca <__stack+0x4cb>
							lcd1602_goto_xy(kursor,1);
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 10)								//podesava SATE_OFF --
						{
							vreme_gasenja.hr--;
     dc4:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <vreme_gasenja+0x2>
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <__stack+0x4d1>
							if(vreme_gasenja.hr >= 250 && vreme_gasenja.hr <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
								vreme_gasenja.hr = 23;
     dca:	87 e1       	ldi	r24, 0x17	; 23
     dcc:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <vreme_gasenja+0x2>
							
							sprintf(bafer, "%02d", vreme_gasenja.hr);
     dd0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <vreme_gasenja+0x2>
     dd4:	1f 92       	push	r1
     dd6:	8f 93       	push	r24
     dd8:	83 e2       	ldi	r24, 0x23	; 35
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	9f 93       	push	r25
     dde:	8f 93       	push	r24
     de0:	83 e8       	ldi	r24, 0x83	; 131
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	9f 93       	push	r25
     de6:	8f 93       	push	r24
     de8:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     dec:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	81 50       	subi	r24, 0x01	; 1
     df4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     df8:	83 e8       	ldi	r24, 0x83	; 131
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     e06:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	44 c0       	rjmp	.+136    	; 0xea0 <__stack+0x5a1>
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 13)								//podesava MINUTE_OFF --
     e18:	8d 30       	cpi	r24, 0x0D	; 13
     e1a:	09 f0       	breq	.+2      	; 0xe1e <__stack+0x51f>
     e1c:	41 c0       	rjmp	.+130    	; 0xea0 <__stack+0x5a1>
						{
							vreme_gasenja.min--;
     e1e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <vreme_gasenja+0x1>
     e22:	81 50       	subi	r24, 0x01	; 1
							if(vreme_gasenja.min >= 250 && vreme_gasenja.min <= 255)	//posto je = unsigned int 8 bit i overflow se desi
     e24:	8a 3f       	cpi	r24, 0xFA	; 250
     e26:	18 f4       	brcc	.+6      	; 0xe2e <__stack+0x52f>
							lcd1602_goto_xy(kursor,1);
							//TODO: UPIS U EEPROM
						}
						else if (kursor == 13)								//podesava MINUTE_OFF --
						{
							vreme_gasenja.min--;
     e28:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <vreme_gasenja+0x1>
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <__stack+0x535>
							if(vreme_gasenja.min >= 250 && vreme_gasenja.min <= 255)	//posto je = unsigned int 8 bit i overflow se desi
								vreme_gasenja.min = 59;
     e2e:	8b e3       	ldi	r24, 0x3B	; 59
     e30:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <vreme_gasenja+0x1>
							
							sprintf(bafer, "%02d", vreme_gasenja.min);
     e34:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <vreme_gasenja+0x1>
     e38:	1f 92       	push	r1
     e3a:	8f 93       	push	r24
     e3c:	83 e2       	ldi	r24, 0x23	; 35
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	9f 93       	push	r25
     e42:	8f 93       	push	r24
     e44:	83 e8       	ldi	r24, 0x83	; 131
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	9f 93       	push	r25
     e4a:	8f 93       	push	r24
     e4c:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     e50:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	81 50       	subi	r24, 0x01	; 1
     e58:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     e5c:	83 e8       	ldi	r24, 0x83	; 131
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     e64:	61 e0       	ldi	r22, 0x01	; 1
     e66:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     e6a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	12 c0       	rjmp	.+36     	; 0xea0 <__stack+0x5a1>
							//TODO: UPIS U EEPROM
						}
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     e7c:	64 e0       	ldi	r22, 0x04	; 4
     e7e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     e82:	0e 94 1c 08 	call	0x1038	; 0x1038 <ocitaj_jedan_taster>
     e86:	88 23       	and	r24, r24
     e88:	59 f0       	breq	.+22     	; 0xea0 <__stack+0x5a1>
					{
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor = 0;					//reset kursora
     e90:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
		
		
		default: {}
		
	}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <main>:
}

int main(void)
{

	vreme_paljenja.hr = 23;
     ea8:	e0 ea       	ldi	r30, 0xA0	; 160
     eaa:	f1 e0       	ldi	r31, 0x01	; 1
     eac:	87 e1       	ldi	r24, 0x17	; 23
     eae:	82 83       	std	Z+2, r24	; 0x02
	vreme_paljenja.min = 30;
     eb0:	8e e1       	ldi	r24, 0x1E	; 30
     eb2:	81 83       	std	Z+1, r24	; 0x01
	vreme_gasenja.hr = 5;
     eb4:	e9 ea       	ldi	r30, 0xA9	; 169
     eb6:	f1 e0       	ldi	r31, 0x01	; 1
     eb8:	85 e0       	ldi	r24, 0x05	; 5
     eba:	82 83       	std	Z+2, r24	; 0x02
	vreme_gasenja.min = 40;
     ebc:	88 e2       	ldi	r24, 0x28	; 40
     ebe:	81 83       	std	Z+1, r24	; 0x01
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			////PD2-3 output
     ec0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
     ec4:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_init>
	lcd1602_init();
     ec8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd1602_init>
	ADC_init();				
     ecc:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda  500k
     ed0:	60 e2       	ldi	r22, 0x20	; 32
     ed2:	71 ea       	ldi	r23, 0xA1	; 161
     ed4:	87 e0       	ldi	r24, 0x07	; 7
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <uart_init>
	DS3231_init();			//RTC init
     edc:	0e 94 81 08 	call	0x1102	; 0x1102 <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
     ee0:	0e 94 c7 07 	call	0xf8e	; 0xf8e <pc_init>
	tasteri_init();			//NAPOMENA: PD4-7 i PB0-1 INPUT, INT_PULLUP=ON
     ee4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
     ee8:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;
     eea:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
     eec:	78 94       	sei
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
			
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     eee:	0f 2e       	mov	r0, r31
     ef0:	f4 e0       	ldi	r31, 0x04	; 4
     ef2:	ef 2e       	mov	r14, r31
     ef4:	f1 e0       	ldi	r31, 0x01	; 1
     ef6:	ff 2e       	mov	r15, r31
     ef8:	f0 2d       	mov	r31, r0
     efa:	c3 e8       	ldi	r28, 0x83	; 131
     efc:	d1 e0       	ldi	r29, 0x01	; 1
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
     efe:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <ocitaj_tastere>
     f02:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tasteri>
		
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
     f06:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <flag_pc_int_pomocni>
     f0a:	88 23       	and	r24, r24
     f0c:	e9 f1       	breq	.+122    	; 0xf88 <main+0xe0>
		{
			flag_pc_int_pomocni = 0;
     f0e:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     f12:	00 e0       	ldi	r16, 0x00	; 0
     f14:	2a eb       	ldi	r18, 0xBA	; 186
     f16:	31 e0       	ldi	r19, 0x01	; 1
     f18:	42 eb       	ldi	r20, 0xB2	; 178
     f1a:	51 e0       	ldi	r21, 0x01	; 1
     f1c:	63 eb       	ldi	r22, 0xB3	; 179
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	84 eb       	ldi	r24, 0xB4	; 180
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 8a 08 	call	0x1114	; 0x1114 <getTime>
			
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     f28:	e2 eb       	ldi	r30, 0xB2	; 178
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	80 81       	ld	r24, Z
     f2e:	1f 92       	push	r1
     f30:	8f 93       	push	r24
     f32:	81 81       	ldd	r24, Z+1	; 0x01
     f34:	1f 92       	push	r1
     f36:	8f 93       	push	r24
     f38:	82 81       	ldd	r24, Z+2	; 0x02
     f3a:	1f 92       	push	r1
     f3c:	8f 93       	push	r24
     f3e:	ff 92       	push	r15
     f40:	ef 92       	push	r14
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
			send_str(bafer);
     f4a:	ce 01       	movw	r24, r28
     f4c:	0e 94 03 0a 	call	0x1406	; 0x1406 <send_str>
			send_str("\n"); //novi red
     f50:	8c e6       	ldi	r24, 0x6C	; 108
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	0e 94 03 0a 	call	0x1406	; 0x1406 <send_str>
			
			/* paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno = period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);
     f58:	42 eb       	ldi	r20, 0xB2	; 178
     f5a:	51 e0       	ldi	r21, 0x01	; 1
     f5c:	69 ea       	ldi	r22, 0xA9	; 169
     f5e:	71 e0       	ldi	r23, 0x01	; 1
     f60:	80 ea       	ldi	r24, 0xA0	; 160
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <period_paljenja>
     f68:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <ukljuceno>
			
			if (ukljuceno)
     f6c:	2d b7       	in	r18, 0x3d	; 61
     f6e:	3e b7       	in	r19, 0x3e	; 62
     f70:	26 5f       	subi	r18, 0xF6	; 246
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	3e bf       	out	0x3e, r19	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	2d bf       	out	0x3d, r18	; 61
     f7e:	88 23       	and	r24, r24
     f80:	11 f0       	breq	.+4      	; 0xf86 <main+0xde>
				PORTB |= 1<<PINB5;   //high
     f82:	2d 9a       	sbi	0x05, 5	; 5
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <main+0xe0>
			else
				PORTB &= ~(1<<PINB5);	//low
     f86:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
     f88:	0e 94 38 02 	call	0x470	; 0x470 <fsm_lcd_menu>
		

		
    }
     f8c:	b8 cf       	rjmp	.-144    	; 0xefe <main+0x56>

00000f8e <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
     f8e:	e8 e6       	ldi	r30, 0x68	; 104
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	82 60       	ori	r24, 0x02	; 2
     f96:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
     f98:	ec e6       	ldi	r30, 0x6C	; 108
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	88 60       	ori	r24, 0x08	; 8
     fa0:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
     fa2:	3b 98       	cbi	0x07, 3	; 7
     fa4:	08 95       	ret

00000fa6 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
     fa6:	1f 92       	push	r1
     fa8:	0f 92       	push	r0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	0f 92       	push	r0
     fae:	11 24       	eor	r1, r1
     fb0:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
     fb2:	33 9b       	sbis	0x06, 3	; 6
     fb4:	05 c0       	rjmp	.+10     	; 0xfc0 <__vector_4+0x1a>
	{
		flag_pc_int = 1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <flag_pc_int>
		flag_pc_int_pomocni = 1;
     fbc:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <flag_pc_int_pomocni>
	}
		
     fc0:	8f 91       	pop	r24
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <tasteri_init>:
char buff[50];

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
     fcc:	8a b1       	in	r24, 0x0a	; 10
     fce:	8f 70       	andi	r24, 0x0F	; 15
     fd0:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
     fd2:	84 b1       	in	r24, 0x04	; 4
     fd4:	8c 7f       	andi	r24, 0xFC	; 252
     fd6:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
     fd8:	8b b1       	in	r24, 0x0b	; 11
     fda:	80 6f       	ori	r24, 0xF0	; 240
     fdc:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
     fde:	85 b1       	in	r24, 0x05	; 5
     fe0:	83 60       	ori	r24, 0x03	; 3
     fe2:	85 b9       	out	0x05, r24	; 5
     fe4:	08 95       	ret

00000fe6 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
     fe6:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <flag_prekid_debounce_time_half>
     fea:	88 23       	and	r24, r24
     fec:	69 f0       	breq	.+26     	; 0x1008 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
     fee:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
     ff2:	93 b1       	in	r25, 0x03	; 3
     ff4:	29 b1       	in	r18, 0x09	; 9
     ff6:	30 e1       	ldi	r19, 0x10	; 16
     ff8:	93 9f       	mul	r25, r19
     ffa:	c0 01       	movw	r24, r0
     ffc:	11 24       	eor	r1, r1
     ffe:	92 2f       	mov	r25, r18
    1000:	92 95       	swap	r25
    1002:	9f 70       	andi	r25, 0x0F	; 15
    1004:	89 2b       	or	r24, r25
    1006:	01 c0       	rjmp	.+2      	; 0x100a <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
    1008:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
    100a:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <flag_prekid_debounce_time>
    100e:	99 23       	and	r25, r25
    1010:	81 f0       	breq	.+32     	; 0x1032 <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
    1012:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
    1016:	93 b1       	in	r25, 0x03	; 3
    1018:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
    101a:	50 e1       	ldi	r21, 0x10	; 16
    101c:	95 9f       	mul	r25, r21
    101e:	90 01       	movw	r18, r0
    1020:	11 24       	eor	r1, r1
    1022:	94 2f       	mov	r25, r20
    1024:	92 95       	swap	r25
    1026:	9f 70       	andi	r25, 0x0F	; 15
    1028:	29 2b       	or	r18, r25
    102a:	82 13       	cpse	r24, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
    102e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasteri_reg.1950>
		
	}
	
	return tasteri_reg;
}
    1032:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri_reg.1950>
    1036:	08 95       	ret

00001038 <ocitaj_jedan_taster>:
	
	uint8_t stisnut = 0;
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	80 95       	com	r24
    103c:	90 95       	com	r25
    103e:	9c 01       	movw	r18, r24
    1040:	06 2e       	mov	r0, r22
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <ocitaj_jedan_taster+0x10>
    1044:	35 95       	asr	r19
    1046:	27 95       	ror	r18
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <ocitaj_jedan_taster+0xc>
    104c:	20 ff       	sbrs	r18, 0
    104e:	0a c0       	rjmp	.+20     	; 0x1064 <ocitaj_jedan_taster+0x2c>
    1050:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <flag_stisnut.1959>
    1054:	21 11       	cpse	r18, r1
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <ocitaj_jedan_taster+0x2c>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <flag_stisnut.1959>
		temp_tast = button;		//zapamtim koji je taster stisnut
    105e:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <temp_tast.1958>
    1062:	08 95       	ret
		stisnut = 1;
	}
	if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
    1064:	00 90 78 01 	lds	r0, 0x0178	; 0x800178 <temp_tast.1958>
    1068:	02 c0       	rjmp	.+4      	; 0x106e <ocitaj_jedan_taster+0x36>
    106a:	95 95       	asr	r25
    106c:	87 95       	ror	r24
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <ocitaj_jedan_taster+0x32>
    1072:	80 fd       	sbrc	r24, 0
    1074:	04 c0       	rjmp	.+8      	; 0x107e <ocitaj_jedan_taster+0x46>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
    1076:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <flag_stisnut.1959>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret
    107e:	80 e0       	ldi	r24, 0x00	; 0
	}
			
	
	return stisnut;
    1080:	08 95       	ret

00001082 <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
    1082:	98 2f       	mov	r25, r24
    1084:	92 95       	swap	r25
    1086:	9f 70       	andi	r25, 0x0F	; 15
    1088:	99 0f       	add	r25, r25
    108a:	29 2f       	mov	r18, r25
    108c:	22 0f       	add	r18, r18
    108e:	22 0f       	add	r18, r18
    1090:	92 0f       	add	r25, r18
    1092:	8f 70       	andi	r24, 0x0F	; 15
    1094:	89 0f       	add	r24, r25
    1096:	08 95       	ret

00001098 <decimal_to_bcd>:
    1098:	9d ec       	ldi	r25, 0xCD	; 205
    109a:	89 9f       	mul	r24, r25
    109c:	91 2d       	mov	r25, r1
    109e:	11 24       	eor	r1, r1
    10a0:	96 95       	lsr	r25
    10a2:	96 95       	lsr	r25
    10a4:	96 95       	lsr	r25
    10a6:	20 e1       	ldi	r18, 0x10	; 16
    10a8:	92 9f       	mul	r25, r18
    10aa:	a0 01       	movw	r20, r0
    10ac:	11 24       	eor	r1, r1
    10ae:	99 0f       	add	r25, r25
    10b0:	29 2f       	mov	r18, r25
    10b2:	22 0f       	add	r18, r18
    10b4:	22 0f       	add	r18, r18
    10b6:	92 0f       	add	r25, r18
    10b8:	89 1b       	sub	r24, r25
    10ba:	8f 70       	andi	r24, 0x0F	; 15
    10bc:	84 2b       	or	r24, r20
    10be:	08 95       	ret

000010c0 <DS3231_Read>:
    10c0:	cf 93       	push	r28
    10c2:	c8 2f       	mov	r28, r24
    10c4:	80 ed       	ldi	r24, 0xD0	; 208
    10c6:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
    10ca:	8c 2f       	mov	r24, r28
    10cc:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
    10d0:	81 ed       	ldi	r24, 0xD1	; 209
    10d2:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
    10d6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <i2c_readNak>
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <DS3231_Write>:
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	d8 2f       	mov	r29, r24
    10e4:	c6 2f       	mov	r28, r22
    10e6:	80 ed       	ldi	r24, 0xD0	; 208
    10e8:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
    10ec:	8d 2f       	mov	r24, r29
    10ee:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
    10f2:	8c 2f       	mov	r24, r28
    10f4:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
    10f8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_stop>
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <DS3231_init>:
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	8e e0       	ldi	r24, 0x0E	; 14
    1106:	0e 94 6f 08 	call	0x10de	; 0x10de <DS3231_Write>
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	8f e0       	ldi	r24, 0x0F	; 15
    110e:	0e 94 6f 08 	call	0x10de	; 0x10de <DS3231_Write>
    1112:	08 95       	ret

00001114 <getTime>:
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	ec 01       	movw	r28, r24
    1128:	7b 01       	movw	r14, r22
    112a:	6a 01       	movw	r12, r20
    112c:	59 01       	movw	r10, r18
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DS3231_Read>
    1134:	0e 94 41 08 	call	0x1082	; 0x1082 <bcd_to_decimal>
    1138:	f6 01       	movw	r30, r12
    113a:	80 83       	st	Z, r24
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DS3231_Read>
    1142:	0e 94 41 08 	call	0x1082	; 0x1082 <bcd_to_decimal>
    1146:	f7 01       	movw	r30, r14
    1148:	80 83       	st	Z, r24
    114a:	01 30       	cpi	r16, 0x01	; 1
    114c:	81 f4       	brne	.+32     	; 0x116e <getTime+0x5a>
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DS3231_Read>
    1154:	85 fb       	bst	r24, 5
    1156:	88 27       	eor	r24, r24
    1158:	80 f9       	bld	r24, 0
    115a:	f5 01       	movw	r30, r10
    115c:	80 83       	st	Z, r24
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DS3231_Read>
    1164:	8f 71       	andi	r24, 0x1F	; 31
    1166:	0e 94 41 08 	call	0x1082	; 0x1082 <bcd_to_decimal>
    116a:	88 83       	st	Y, r24
    116c:	07 c0       	rjmp	.+14     	; 0x117c <getTime+0x68>
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DS3231_Read>
    1174:	8f 73       	andi	r24, 0x3F	; 63
    1176:	0e 94 41 08 	call	0x1082	; 0x1082 <bcd_to_decimal>
    117a:	88 83       	st	Y, r24
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	bf 90       	pop	r11
    118c:	af 90       	pop	r10
    118e:	08 95       	ret

00001190 <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	d8 2f       	mov	r29, r24
    119a:	c6 2f       	mov	r28, r22
    119c:	84 2f       	mov	r24, r20
    119e:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
    11a0:	0e 94 4c 08 	call	0x1098	; 0x1098 <decimal_to_bcd>
    11a4:	68 2f       	mov	r22, r24
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	0e 94 6f 08 	call	0x10de	; 0x10de <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
    11ac:	8c 2f       	mov	r24, r28
    11ae:	0e 94 4c 08 	call	0x1098	; 0x1098 <decimal_to_bcd>
    11b2:	68 2f       	mov	r22, r24
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	0e 94 6f 08 	call	0x10de	; 0x10de <DS3231_Write>
	
	switch(hour_format)
    11ba:	01 30       	cpi	r16, 0x01	; 1
    11bc:	79 f4       	brne	.+30     	; 0x11dc <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    11be:	11 30       	cpi	r17, 0x01	; 1
    11c0:	11 f0       	breq	.+4      	; 0x11c6 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    11c2:	c0 e4       	ldi	r28, 0x40	; 64
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    11c6:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    11c8:	8d 2f       	mov	r24, r29
    11ca:	0e 94 4c 08 	call	0x1098	; 0x1098 <decimal_to_bcd>
    11ce:	8f 71       	andi	r24, 0x1F	; 31
    11d0:	68 2f       	mov	r22, r24
    11d2:	6c 2b       	or	r22, r28
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	0e 94 6f 08 	call	0x10de	; 0x10de <DS3231_Write>
			break;
    11da:	08 c0       	rjmp	.+16     	; 0x11ec <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    11dc:	8d 2f       	mov	r24, r29
    11de:	0e 94 4c 08 	call	0x1098	; 0x1098 <decimal_to_bcd>
    11e2:	68 2f       	mov	r22, r24
    11e4:	6f 73       	andi	r22, 0x3F	; 63
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	0e 94 6f 08 	call	0x10de	; 0x10de <DS3231_Write>
			break;
		}
	}
}
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	08 95       	ret

000011f6 <tajmer0_init>:
volatile uint8_t brojac_prekida_tajmera0_debounce = 0;
volatile uint8_t brojac_prekida_tajmera0_debounce_half = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    11fe:	99 ef       	ldi	r25, 0xF9	; 249
    1200:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    1202:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRD |= (1<<PIND2)|(1<<PIND3);  //PD2-3 output
    1206:	8a b1       	in	r24, 0x0a	; 10
    1208:	8c 60       	ori	r24, 0x0C	; 12
    120a:	8a b9       	out	0x0a, r24	; 10
    120c:	08 95       	ret

0000120e <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    120e:	1f 92       	push	r1
    1210:	0f 92       	push	r0
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	0f 92       	push	r0
    1216:	11 24       	eor	r1, r1
    1218:	8f 93       	push	r24
	flag_tajmer0_prekid = 1;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    1220:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <brojac_prekida_tajmera0>
    1224:	8f 5f       	subi	r24, 0xFF	; 255
    1226:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    122a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <brojac_prekida_tajmera0_debounce_half>
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    1234:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <brojac_prekida_tajmera0_debounce>
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <brojac_prekida_tajmera0_debounce>
		
	if(brojac_prekida_tajmera0 == 255)	//1ms * 10 = 10ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    123e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <brojac_prekida_tajmera0>
    1242:	8f 3f       	cpi	r24, 0xFF	; 255
    1244:	29 f4       	brne	.+10     	; 0x1250 <__vector_14+0x42>
	{
		brojac_prekida_tajmera0 = 0;
    1246:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;				
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <flag_prekid_10ms>
		
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    1250:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <brojac_prekida_tajmera0_debounce_half>
    1254:	83 30       	cpi	r24, 0x03	; 3
    1256:	31 f4       	brne	.+12     	; 0x1264 <__vector_14+0x56>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    1258:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <flag_prekid_debounce_time_half>
		PIND |= 1<<PIND2;	//toggle PD2
    1262:	4a 9a       	sbi	0x09, 2	; 9
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    1264:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <brojac_prekida_tajmera0_debounce>
    1268:	86 30       	cpi	r24, 0x06	; 6
    126a:	31 f4       	brne	.+12     	; 0x1278 <__vector_14+0x6a>
	{
		brojac_prekida_tajmera0_debounce = 0;
    126c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <flag_prekid_debounce_time>
		PIND |= 1<<PIND3;	//toggle PD3
    1276:	4b 9a       	sbi	0x09, 3	; 9
	}
	
    1278:	8f 91       	pop	r24
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
	poslato=0;
    128e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <poslato>
}
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	0f 90       	pop	r0
    1298:	1f 90       	pop	r1
    129a:	18 95       	reti

0000129c <__vector_18>:

ISR(USART_RX_vect)
{
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	8f 93       	push	r24
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
	input_char=UDR0;
    12ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    12b0:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    12b4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <buff_size>
    12b8:	88 30       	cpi	r24, 0x08	; 8
    12ba:	98 f4       	brcc	.+38     	; 0x12e2 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    12bc:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <buff_size>
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <input_char>
    12c6:	e3 54       	subi	r30, 0x43	; 67
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	80 83       	st	Z, r24
		buff_size++;
    12cc:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <buff_size>
    12d0:	8f 5f       	subi	r24, 0xFF	; 255
    12d2:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <buff_size>
		input_buffer[buff_size]='\0';
    12d6:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <buff_size>
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	e3 54       	subi	r30, 0x43	; 67
    12de:	fe 4f       	sbci	r31, 0xFE	; 254
    12e0:	10 82       	st	Z, r1
	}
}
    12e2:	ff 91       	pop	r31
    12e4:	ef 91       	pop	r30
    12e6:	8f 91       	pop	r24
    12e8:	0f 90       	pop	r0
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	0f 90       	pop	r0
    12ee:	1f 90       	pop	r1
    12f0:	18 95       	reti

000012f2 <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    12f2:	22 e0       	ldi	r18, 0x02	; 2
    12f4:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    12f8:	28 ed       	ldi	r18, 0xD8	; 216
    12fa:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    12fe:	26 e0       	ldi	r18, 0x06	; 6
    1300:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    1304:	61 15       	cp	r22, r1
    1306:	2c e2       	ldi	r18, 0x2C	; 44
    1308:	72 07       	cpc	r23, r18
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	82 07       	cpc	r24, r18
    130e:	91 05       	cpc	r25, r1
    1310:	09 f4       	brne	.+2      	; 0x1314 <uart_init+0x22>
    1312:	51 c0       	rjmp	.+162    	; 0x13b6 <uart_init+0xc4>
    1314:	c8 f4       	brcc	.+50     	; 0x1348 <uart_init+0x56>
    1316:	60 34       	cpi	r22, 0x40	; 64
    1318:	28 e3       	ldi	r18, 0x38	; 56
    131a:	72 07       	cpc	r23, r18
    131c:	81 05       	cpc	r24, r1
    131e:	91 05       	cpc	r25, r1
    1320:	a9 f1       	breq	.+106    	; 0x138c <uart_init+0x9a>
    1322:	30 f4       	brcc	.+12     	; 0x1330 <uart_init+0x3e>
    1324:	60 38       	cpi	r22, 0x80	; 128
    1326:	75 42       	sbci	r23, 0x25	; 37
    1328:	81 05       	cpc	r24, r1
    132a:	91 05       	cpc	r25, r1
    132c:	41 f1       	breq	.+80     	; 0x137e <uart_init+0x8c>
    132e:	64 c0       	rjmp	.+200    	; 0x13f8 <uart_init+0x106>
    1330:	61 15       	cp	r22, r1
    1332:	2b e4       	ldi	r18, 0x4B	; 75
    1334:	72 07       	cpc	r23, r18
    1336:	81 05       	cpc	r24, r1
    1338:	91 05       	cpc	r25, r1
    133a:	79 f1       	breq	.+94     	; 0x139a <uart_init+0xa8>
    133c:	61 15       	cp	r22, r1
    133e:	76 49       	sbci	r23, 0x96	; 150
    1340:	81 05       	cpc	r24, r1
    1342:	91 05       	cpc	r25, r1
    1344:	89 f1       	breq	.+98     	; 0x13a8 <uart_init+0xb6>
    1346:	58 c0       	rjmp	.+176    	; 0x13f8 <uart_init+0x106>
    1348:	60 32       	cpi	r22, 0x20	; 32
    134a:	21 ea       	ldi	r18, 0xA1	; 161
    134c:	72 07       	cpc	r23, r18
    134e:	27 e0       	ldi	r18, 0x07	; 7
    1350:	82 07       	cpc	r24, r18
    1352:	91 05       	cpc	r25, r1
    1354:	f1 f1       	breq	.+124    	; 0x13d2 <uart_init+0xe0>
    1356:	30 f4       	brcc	.+12     	; 0x1364 <uart_init+0x72>
    1358:	60 39       	cpi	r22, 0x90	; 144
    135a:	70 4d       	sbci	r23, 0xD0	; 208
    135c:	83 40       	sbci	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	89 f1       	breq	.+98     	; 0x13c4 <uart_init+0xd2>
    1362:	4a c0       	rjmp	.+148    	; 0x13f8 <uart_init+0x106>
    1364:	60 34       	cpi	r22, 0x40	; 64
    1366:	22 e4       	ldi	r18, 0x42	; 66
    1368:	72 07       	cpc	r23, r18
    136a:	2f e0       	ldi	r18, 0x0F	; 15
    136c:	82 07       	cpc	r24, r18
    136e:	91 05       	cpc	r25, r1
    1370:	b9 f1       	breq	.+110    	; 0x13e0 <uart_init+0xee>
    1372:	60 38       	cpi	r22, 0x80	; 128
    1374:	74 48       	sbci	r23, 0x84	; 132
    1376:	8e 41       	sbci	r24, 0x1E	; 30
    1378:	91 05       	cpc	r25, r1
    137a:	c9 f1       	breq	.+114    	; 0x13ee <uart_init+0xfc>
    137c:	3d c0       	rjmp	.+122    	; 0x13f8 <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    137e:	8f ec       	ldi	r24, 0xCF	; 207
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1386:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    138a:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    138c:	8a e8       	ldi	r24, 0x8A	; 138
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1394:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1398:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    139a:	87 e6       	ldi	r24, 0x67	; 103
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13a6:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    13a8:	83 e3       	ldi	r24, 0x33	; 51
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13b4:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    13b6:	89 e1       	ldi	r24, 0x19	; 25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13c2:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    13c4:	87 e0       	ldi	r24, 0x07	; 7
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13d0:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13de:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13ec:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    13ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13f2:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13f6:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    13f8:	8f ec       	ldi	r24, 0xCF	; 207
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1400:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1404:	08 95       	ret

00001406 <send_str>:
	}
	
}

void send_str(char *str)
{
    1406:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1408:	90 81       	ld	r25, Z
    140a:	99 23       	and	r25, r25
    140c:	71 f0       	breq	.+28     	; 0x142a <send_str+0x24>
    140e:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1410:	a6 ec       	ldi	r26, 0xC6	; 198
    1412:	b0 e0       	ldi	r27, 0x00	; 0
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1414:	81 e0       	ldi	r24, 0x01	; 1
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1416:	9c 93       	st	X, r25
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1418:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <poslato>
		while (poslato);	//koci dok ISR ne kaze da je gotovo
    141c:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <poslato>
    1420:	91 11       	cpse	r25, r1
    1422:	fc cf       	rjmp	.-8      	; 0x141c <send_str+0x16>

void send_str(char *str)
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1424:	91 91       	ld	r25, Z+
    1426:	91 11       	cpse	r25, r1
    1428:	f6 cf       	rjmp	.-20     	; 0x1416 <send_str+0x10>
    142a:	08 95       	ret

0000142c <sprintf>:
    142c:	ae e0       	ldi	r26, 0x0E	; 14
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ec e1       	ldi	r30, 0x1C	; 28
    1432:	fa e0       	ldi	r31, 0x0A	; 10
    1434:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__prologue_saves__+0x1c>
    1438:	0d 89       	ldd	r16, Y+21	; 0x15
    143a:	1e 89       	ldd	r17, Y+22	; 0x16
    143c:	86 e0       	ldi	r24, 0x06	; 6
    143e:	8c 83       	std	Y+4, r24	; 0x04
    1440:	1a 83       	std	Y+2, r17	; 0x02
    1442:	09 83       	std	Y+1, r16	; 0x01
    1444:	8f ef       	ldi	r24, 0xFF	; 255
    1446:	9f e7       	ldi	r25, 0x7F	; 127
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	ae 01       	movw	r20, r28
    144e:	47 5e       	subi	r20, 0xE7	; 231
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	6f 89       	ldd	r22, Y+23	; 0x17
    1454:	78 8d       	ldd	r23, Y+24	; 0x18
    1456:	ce 01       	movw	r24, r28
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	0e 94 38 0a 	call	0x1470	; 0x1470 <vfprintf>
    145e:	ef 81       	ldd	r30, Y+7	; 0x07
    1460:	f8 85       	ldd	r31, Y+8	; 0x08
    1462:	e0 0f       	add	r30, r16
    1464:	f1 1f       	adc	r31, r17
    1466:	10 82       	st	Z, r1
    1468:	2e 96       	adiw	r28, 0x0e	; 14
    146a:	e4 e0       	ldi	r30, 0x04	; 4
    146c:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__epilogue_restores__+0x1c>

00001470 <vfprintf>:
    1470:	ab e0       	ldi	r26, 0x0B	; 11
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ee e3       	ldi	r30, 0x3E	; 62
    1476:	fa e0       	ldi	r31, 0x0A	; 10
    1478:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__prologue_saves__>
    147c:	6c 01       	movw	r12, r24
    147e:	7b 01       	movw	r14, r22
    1480:	8a 01       	movw	r16, r20
    1482:	fc 01       	movw	r30, r24
    1484:	17 82       	std	Z+7, r1	; 0x07
    1486:	16 82       	std	Z+6, r1	; 0x06
    1488:	83 81       	ldd	r24, Z+3	; 0x03
    148a:	81 ff       	sbrs	r24, 1
    148c:	cc c1       	rjmp	.+920    	; 0x1826 <vfprintf+0x3b6>
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	3c 01       	movw	r6, r24
    1494:	f6 01       	movw	r30, r12
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	f7 01       	movw	r30, r14
    149a:	93 fd       	sbrc	r25, 3
    149c:	85 91       	lpm	r24, Z+
    149e:	93 ff       	sbrs	r25, 3
    14a0:	81 91       	ld	r24, Z+
    14a2:	7f 01       	movw	r14, r30
    14a4:	88 23       	and	r24, r24
    14a6:	09 f4       	brne	.+2      	; 0x14aa <vfprintf+0x3a>
    14a8:	ba c1       	rjmp	.+884    	; 0x181e <vfprintf+0x3ae>
    14aa:	85 32       	cpi	r24, 0x25	; 37
    14ac:	39 f4       	brne	.+14     	; 0x14bc <vfprintf+0x4c>
    14ae:	93 fd       	sbrc	r25, 3
    14b0:	85 91       	lpm	r24, Z+
    14b2:	93 ff       	sbrs	r25, 3
    14b4:	81 91       	ld	r24, Z+
    14b6:	7f 01       	movw	r14, r30
    14b8:	85 32       	cpi	r24, 0x25	; 37
    14ba:	29 f4       	brne	.+10     	; 0x14c6 <vfprintf+0x56>
    14bc:	b6 01       	movw	r22, r12
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 2f 0c 	call	0x185e	; 0x185e <fputc>
    14c4:	e7 cf       	rjmp	.-50     	; 0x1494 <vfprintf+0x24>
    14c6:	91 2c       	mov	r9, r1
    14c8:	21 2c       	mov	r2, r1
    14ca:	31 2c       	mov	r3, r1
    14cc:	ff e1       	ldi	r31, 0x1F	; 31
    14ce:	f3 15       	cp	r31, r3
    14d0:	d8 f0       	brcs	.+54     	; 0x1508 <vfprintf+0x98>
    14d2:	8b 32       	cpi	r24, 0x2B	; 43
    14d4:	79 f0       	breq	.+30     	; 0x14f4 <vfprintf+0x84>
    14d6:	38 f4       	brcc	.+14     	; 0x14e6 <vfprintf+0x76>
    14d8:	80 32       	cpi	r24, 0x20	; 32
    14da:	79 f0       	breq	.+30     	; 0x14fa <vfprintf+0x8a>
    14dc:	83 32       	cpi	r24, 0x23	; 35
    14de:	a1 f4       	brne	.+40     	; 0x1508 <vfprintf+0x98>
    14e0:	23 2d       	mov	r18, r3
    14e2:	20 61       	ori	r18, 0x10	; 16
    14e4:	1d c0       	rjmp	.+58     	; 0x1520 <vfprintf+0xb0>
    14e6:	8d 32       	cpi	r24, 0x2D	; 45
    14e8:	61 f0       	breq	.+24     	; 0x1502 <vfprintf+0x92>
    14ea:	80 33       	cpi	r24, 0x30	; 48
    14ec:	69 f4       	brne	.+26     	; 0x1508 <vfprintf+0x98>
    14ee:	23 2d       	mov	r18, r3
    14f0:	21 60       	ori	r18, 0x01	; 1
    14f2:	16 c0       	rjmp	.+44     	; 0x1520 <vfprintf+0xb0>
    14f4:	83 2d       	mov	r24, r3
    14f6:	82 60       	ori	r24, 0x02	; 2
    14f8:	38 2e       	mov	r3, r24
    14fa:	e3 2d       	mov	r30, r3
    14fc:	e4 60       	ori	r30, 0x04	; 4
    14fe:	3e 2e       	mov	r3, r30
    1500:	2a c0       	rjmp	.+84     	; 0x1556 <vfprintf+0xe6>
    1502:	f3 2d       	mov	r31, r3
    1504:	f8 60       	ori	r31, 0x08	; 8
    1506:	1d c0       	rjmp	.+58     	; 0x1542 <vfprintf+0xd2>
    1508:	37 fc       	sbrc	r3, 7
    150a:	2d c0       	rjmp	.+90     	; 0x1566 <vfprintf+0xf6>
    150c:	20 ed       	ldi	r18, 0xD0	; 208
    150e:	28 0f       	add	r18, r24
    1510:	2a 30       	cpi	r18, 0x0A	; 10
    1512:	40 f0       	brcs	.+16     	; 0x1524 <vfprintf+0xb4>
    1514:	8e 32       	cpi	r24, 0x2E	; 46
    1516:	b9 f4       	brne	.+46     	; 0x1546 <vfprintf+0xd6>
    1518:	36 fc       	sbrc	r3, 6
    151a:	81 c1       	rjmp	.+770    	; 0x181e <vfprintf+0x3ae>
    151c:	23 2d       	mov	r18, r3
    151e:	20 64       	ori	r18, 0x40	; 64
    1520:	32 2e       	mov	r3, r18
    1522:	19 c0       	rjmp	.+50     	; 0x1556 <vfprintf+0xe6>
    1524:	36 fe       	sbrs	r3, 6
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <vfprintf+0xc4>
    1528:	8a e0       	ldi	r24, 0x0A	; 10
    152a:	98 9e       	mul	r9, r24
    152c:	20 0d       	add	r18, r0
    152e:	11 24       	eor	r1, r1
    1530:	92 2e       	mov	r9, r18
    1532:	11 c0       	rjmp	.+34     	; 0x1556 <vfprintf+0xe6>
    1534:	ea e0       	ldi	r30, 0x0A	; 10
    1536:	2e 9e       	mul	r2, r30
    1538:	20 0d       	add	r18, r0
    153a:	11 24       	eor	r1, r1
    153c:	22 2e       	mov	r2, r18
    153e:	f3 2d       	mov	r31, r3
    1540:	f0 62       	ori	r31, 0x20	; 32
    1542:	3f 2e       	mov	r3, r31
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <vfprintf+0xe6>
    1546:	8c 36       	cpi	r24, 0x6C	; 108
    1548:	21 f4       	brne	.+8      	; 0x1552 <vfprintf+0xe2>
    154a:	83 2d       	mov	r24, r3
    154c:	80 68       	ori	r24, 0x80	; 128
    154e:	38 2e       	mov	r3, r24
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <vfprintf+0xe6>
    1552:	88 36       	cpi	r24, 0x68	; 104
    1554:	41 f4       	brne	.+16     	; 0x1566 <vfprintf+0xf6>
    1556:	f7 01       	movw	r30, r14
    1558:	93 fd       	sbrc	r25, 3
    155a:	85 91       	lpm	r24, Z+
    155c:	93 ff       	sbrs	r25, 3
    155e:	81 91       	ld	r24, Z+
    1560:	7f 01       	movw	r14, r30
    1562:	81 11       	cpse	r24, r1
    1564:	b3 cf       	rjmp	.-154    	; 0x14cc <vfprintf+0x5c>
    1566:	98 2f       	mov	r25, r24
    1568:	9f 7d       	andi	r25, 0xDF	; 223
    156a:	95 54       	subi	r25, 0x45	; 69
    156c:	93 30       	cpi	r25, 0x03	; 3
    156e:	28 f4       	brcc	.+10     	; 0x157a <vfprintf+0x10a>
    1570:	0c 5f       	subi	r16, 0xFC	; 252
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
    1574:	9f e3       	ldi	r25, 0x3F	; 63
    1576:	99 83       	std	Y+1, r25	; 0x01
    1578:	0d c0       	rjmp	.+26     	; 0x1594 <vfprintf+0x124>
    157a:	83 36       	cpi	r24, 0x63	; 99
    157c:	31 f0       	breq	.+12     	; 0x158a <vfprintf+0x11a>
    157e:	83 37       	cpi	r24, 0x73	; 115
    1580:	71 f0       	breq	.+28     	; 0x159e <vfprintf+0x12e>
    1582:	83 35       	cpi	r24, 0x53	; 83
    1584:	09 f0       	breq	.+2      	; 0x1588 <vfprintf+0x118>
    1586:	59 c0       	rjmp	.+178    	; 0x163a <vfprintf+0x1ca>
    1588:	21 c0       	rjmp	.+66     	; 0x15cc <vfprintf+0x15c>
    158a:	f8 01       	movw	r30, r16
    158c:	80 81       	ld	r24, Z
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	0e 5f       	subi	r16, 0xFE	; 254
    1592:	1f 4f       	sbci	r17, 0xFF	; 255
    1594:	88 24       	eor	r8, r8
    1596:	83 94       	inc	r8
    1598:	91 2c       	mov	r9, r1
    159a:	53 01       	movw	r10, r6
    159c:	13 c0       	rjmp	.+38     	; 0x15c4 <vfprintf+0x154>
    159e:	28 01       	movw	r4, r16
    15a0:	f2 e0       	ldi	r31, 0x02	; 2
    15a2:	4f 0e       	add	r4, r31
    15a4:	51 1c       	adc	r5, r1
    15a6:	f8 01       	movw	r30, r16
    15a8:	a0 80       	ld	r10, Z
    15aa:	b1 80       	ldd	r11, Z+1	; 0x01
    15ac:	36 fe       	sbrs	r3, 6
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <vfprintf+0x146>
    15b0:	69 2d       	mov	r22, r9
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <vfprintf+0x14a>
    15b6:	6f ef       	ldi	r22, 0xFF	; 255
    15b8:	7f ef       	ldi	r23, 0xFF	; 255
    15ba:	c5 01       	movw	r24, r10
    15bc:	0e 94 24 0c 	call	0x1848	; 0x1848 <strnlen>
    15c0:	4c 01       	movw	r8, r24
    15c2:	82 01       	movw	r16, r4
    15c4:	f3 2d       	mov	r31, r3
    15c6:	ff 77       	andi	r31, 0x7F	; 127
    15c8:	3f 2e       	mov	r3, r31
    15ca:	16 c0       	rjmp	.+44     	; 0x15f8 <vfprintf+0x188>
    15cc:	28 01       	movw	r4, r16
    15ce:	22 e0       	ldi	r18, 0x02	; 2
    15d0:	42 0e       	add	r4, r18
    15d2:	51 1c       	adc	r5, r1
    15d4:	f8 01       	movw	r30, r16
    15d6:	a0 80       	ld	r10, Z
    15d8:	b1 80       	ldd	r11, Z+1	; 0x01
    15da:	36 fe       	sbrs	r3, 6
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <vfprintf+0x174>
    15de:	69 2d       	mov	r22, r9
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <vfprintf+0x178>
    15e4:	6f ef       	ldi	r22, 0xFF	; 255
    15e6:	7f ef       	ldi	r23, 0xFF	; 255
    15e8:	c5 01       	movw	r24, r10
    15ea:	0e 94 19 0c 	call	0x1832	; 0x1832 <strnlen_P>
    15ee:	4c 01       	movw	r8, r24
    15f0:	f3 2d       	mov	r31, r3
    15f2:	f0 68       	ori	r31, 0x80	; 128
    15f4:	3f 2e       	mov	r3, r31
    15f6:	82 01       	movw	r16, r4
    15f8:	33 fc       	sbrc	r3, 3
    15fa:	1b c0       	rjmp	.+54     	; 0x1632 <vfprintf+0x1c2>
    15fc:	82 2d       	mov	r24, r2
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	88 16       	cp	r8, r24
    1602:	99 06       	cpc	r9, r25
    1604:	b0 f4       	brcc	.+44     	; 0x1632 <vfprintf+0x1c2>
    1606:	b6 01       	movw	r22, r12
    1608:	80 e2       	ldi	r24, 0x20	; 32
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 2f 0c 	call	0x185e	; 0x185e <fputc>
    1610:	2a 94       	dec	r2
    1612:	f4 cf       	rjmp	.-24     	; 0x15fc <vfprintf+0x18c>
    1614:	f5 01       	movw	r30, r10
    1616:	37 fc       	sbrc	r3, 7
    1618:	85 91       	lpm	r24, Z+
    161a:	37 fe       	sbrs	r3, 7
    161c:	81 91       	ld	r24, Z+
    161e:	5f 01       	movw	r10, r30
    1620:	b6 01       	movw	r22, r12
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 2f 0c 	call	0x185e	; 0x185e <fputc>
    1628:	21 10       	cpse	r2, r1
    162a:	2a 94       	dec	r2
    162c:	21 e0       	ldi	r18, 0x01	; 1
    162e:	82 1a       	sub	r8, r18
    1630:	91 08       	sbc	r9, r1
    1632:	81 14       	cp	r8, r1
    1634:	91 04       	cpc	r9, r1
    1636:	71 f7       	brne	.-36     	; 0x1614 <vfprintf+0x1a4>
    1638:	e8 c0       	rjmp	.+464    	; 0x180a <vfprintf+0x39a>
    163a:	84 36       	cpi	r24, 0x64	; 100
    163c:	11 f0       	breq	.+4      	; 0x1642 <vfprintf+0x1d2>
    163e:	89 36       	cpi	r24, 0x69	; 105
    1640:	41 f5       	brne	.+80     	; 0x1692 <vfprintf+0x222>
    1642:	f8 01       	movw	r30, r16
    1644:	37 fe       	sbrs	r3, 7
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <vfprintf+0x1e6>
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	0c 5f       	subi	r16, 0xFC	; 252
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	08 c0       	rjmp	.+16     	; 0x1666 <vfprintf+0x1f6>
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	07 2e       	mov	r0, r23
    165c:	00 0c       	add	r0, r0
    165e:	88 0b       	sbc	r24, r24
    1660:	99 0b       	sbc	r25, r25
    1662:	0e 5f       	subi	r16, 0xFE	; 254
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	f3 2d       	mov	r31, r3
    1668:	ff 76       	andi	r31, 0x6F	; 111
    166a:	3f 2e       	mov	r3, r31
    166c:	97 ff       	sbrs	r25, 7
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <vfprintf+0x212>
    1670:	90 95       	com	r25
    1672:	80 95       	com	r24
    1674:	70 95       	com	r23
    1676:	61 95       	neg	r22
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	8f 4f       	sbci	r24, 0xFF	; 255
    167c:	9f 4f       	sbci	r25, 0xFF	; 255
    167e:	f0 68       	ori	r31, 0x80	; 128
    1680:	3f 2e       	mov	r3, r31
    1682:	2a e0       	ldi	r18, 0x0A	; 10
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	a3 01       	movw	r20, r6
    1688:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__ultoa_invert>
    168c:	88 2e       	mov	r8, r24
    168e:	86 18       	sub	r8, r6
    1690:	45 c0       	rjmp	.+138    	; 0x171c <vfprintf+0x2ac>
    1692:	85 37       	cpi	r24, 0x75	; 117
    1694:	31 f4       	brne	.+12     	; 0x16a2 <vfprintf+0x232>
    1696:	23 2d       	mov	r18, r3
    1698:	2f 7e       	andi	r18, 0xEF	; 239
    169a:	b2 2e       	mov	r11, r18
    169c:	2a e0       	ldi	r18, 0x0A	; 10
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	25 c0       	rjmp	.+74     	; 0x16ec <vfprintf+0x27c>
    16a2:	93 2d       	mov	r25, r3
    16a4:	99 7f       	andi	r25, 0xF9	; 249
    16a6:	b9 2e       	mov	r11, r25
    16a8:	8f 36       	cpi	r24, 0x6F	; 111
    16aa:	c1 f0       	breq	.+48     	; 0x16dc <vfprintf+0x26c>
    16ac:	18 f4       	brcc	.+6      	; 0x16b4 <vfprintf+0x244>
    16ae:	88 35       	cpi	r24, 0x58	; 88
    16b0:	79 f0       	breq	.+30     	; 0x16d0 <vfprintf+0x260>
    16b2:	b5 c0       	rjmp	.+362    	; 0x181e <vfprintf+0x3ae>
    16b4:	80 37       	cpi	r24, 0x70	; 112
    16b6:	19 f0       	breq	.+6      	; 0x16be <vfprintf+0x24e>
    16b8:	88 37       	cpi	r24, 0x78	; 120
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <vfprintf+0x254>
    16bc:	b0 c0       	rjmp	.+352    	; 0x181e <vfprintf+0x3ae>
    16be:	e9 2f       	mov	r30, r25
    16c0:	e0 61       	ori	r30, 0x10	; 16
    16c2:	be 2e       	mov	r11, r30
    16c4:	b4 fe       	sbrs	r11, 4
    16c6:	0d c0       	rjmp	.+26     	; 0x16e2 <vfprintf+0x272>
    16c8:	fb 2d       	mov	r31, r11
    16ca:	f4 60       	ori	r31, 0x04	; 4
    16cc:	bf 2e       	mov	r11, r31
    16ce:	09 c0       	rjmp	.+18     	; 0x16e2 <vfprintf+0x272>
    16d0:	34 fe       	sbrs	r3, 4
    16d2:	0a c0       	rjmp	.+20     	; 0x16e8 <vfprintf+0x278>
    16d4:	29 2f       	mov	r18, r25
    16d6:	26 60       	ori	r18, 0x06	; 6
    16d8:	b2 2e       	mov	r11, r18
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <vfprintf+0x278>
    16dc:	28 e0       	ldi	r18, 0x08	; 8
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <vfprintf+0x27c>
    16e2:	20 e1       	ldi	r18, 0x10	; 16
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <vfprintf+0x27c>
    16e8:	20 e1       	ldi	r18, 0x10	; 16
    16ea:	32 e0       	ldi	r19, 0x02	; 2
    16ec:	f8 01       	movw	r30, r16
    16ee:	b7 fe       	sbrs	r11, 7
    16f0:	07 c0       	rjmp	.+14     	; 0x1700 <vfprintf+0x290>
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	0c 5f       	subi	r16, 0xFC	; 252
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <vfprintf+0x29c>
    1700:	60 81       	ld	r22, Z
    1702:	71 81       	ldd	r23, Z+1	; 0x01
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 5f       	subi	r16, 0xFE	; 254
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	a3 01       	movw	r20, r6
    170e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__ultoa_invert>
    1712:	88 2e       	mov	r8, r24
    1714:	86 18       	sub	r8, r6
    1716:	fb 2d       	mov	r31, r11
    1718:	ff 77       	andi	r31, 0x7F	; 127
    171a:	3f 2e       	mov	r3, r31
    171c:	36 fe       	sbrs	r3, 6
    171e:	0d c0       	rjmp	.+26     	; 0x173a <vfprintf+0x2ca>
    1720:	23 2d       	mov	r18, r3
    1722:	2e 7f       	andi	r18, 0xFE	; 254
    1724:	a2 2e       	mov	r10, r18
    1726:	89 14       	cp	r8, r9
    1728:	58 f4       	brcc	.+22     	; 0x1740 <vfprintf+0x2d0>
    172a:	34 fe       	sbrs	r3, 4
    172c:	0b c0       	rjmp	.+22     	; 0x1744 <vfprintf+0x2d4>
    172e:	32 fc       	sbrc	r3, 2
    1730:	09 c0       	rjmp	.+18     	; 0x1744 <vfprintf+0x2d4>
    1732:	83 2d       	mov	r24, r3
    1734:	8e 7e       	andi	r24, 0xEE	; 238
    1736:	a8 2e       	mov	r10, r24
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <vfprintf+0x2d4>
    173a:	b8 2c       	mov	r11, r8
    173c:	a3 2c       	mov	r10, r3
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <vfprintf+0x2d6>
    1740:	b8 2c       	mov	r11, r8
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <vfprintf+0x2d6>
    1744:	b9 2c       	mov	r11, r9
    1746:	a4 fe       	sbrs	r10, 4
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <vfprintf+0x2f8>
    174a:	fe 01       	movw	r30, r28
    174c:	e8 0d       	add	r30, r8
    174e:	f1 1d       	adc	r31, r1
    1750:	80 81       	ld	r24, Z
    1752:	80 33       	cpi	r24, 0x30	; 48
    1754:	21 f4       	brne	.+8      	; 0x175e <vfprintf+0x2ee>
    1756:	9a 2d       	mov	r25, r10
    1758:	99 7e       	andi	r25, 0xE9	; 233
    175a:	a9 2e       	mov	r10, r25
    175c:	09 c0       	rjmp	.+18     	; 0x1770 <vfprintf+0x300>
    175e:	a2 fe       	sbrs	r10, 2
    1760:	06 c0       	rjmp	.+12     	; 0x176e <vfprintf+0x2fe>
    1762:	b3 94       	inc	r11
    1764:	b3 94       	inc	r11
    1766:	04 c0       	rjmp	.+8      	; 0x1770 <vfprintf+0x300>
    1768:	8a 2d       	mov	r24, r10
    176a:	86 78       	andi	r24, 0x86	; 134
    176c:	09 f0       	breq	.+2      	; 0x1770 <vfprintf+0x300>
    176e:	b3 94       	inc	r11
    1770:	a3 fc       	sbrc	r10, 3
    1772:	11 c0       	rjmp	.+34     	; 0x1796 <vfprintf+0x326>
    1774:	a0 fe       	sbrs	r10, 0
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <vfprintf+0x314>
    1778:	b2 14       	cp	r11, r2
    177a:	88 f4       	brcc	.+34     	; 0x179e <vfprintf+0x32e>
    177c:	28 0c       	add	r2, r8
    177e:	92 2c       	mov	r9, r2
    1780:	9b 18       	sub	r9, r11
    1782:	0e c0       	rjmp	.+28     	; 0x17a0 <vfprintf+0x330>
    1784:	b2 14       	cp	r11, r2
    1786:	60 f4       	brcc	.+24     	; 0x17a0 <vfprintf+0x330>
    1788:	b6 01       	movw	r22, r12
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 2f 0c 	call	0x185e	; 0x185e <fputc>
    1792:	b3 94       	inc	r11
    1794:	f7 cf       	rjmp	.-18     	; 0x1784 <vfprintf+0x314>
    1796:	b2 14       	cp	r11, r2
    1798:	18 f4       	brcc	.+6      	; 0x17a0 <vfprintf+0x330>
    179a:	2b 18       	sub	r2, r11
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <vfprintf+0x332>
    179e:	98 2c       	mov	r9, r8
    17a0:	21 2c       	mov	r2, r1
    17a2:	a4 fe       	sbrs	r10, 4
    17a4:	10 c0       	rjmp	.+32     	; 0x17c6 <vfprintf+0x356>
    17a6:	b6 01       	movw	r22, r12
    17a8:	80 e3       	ldi	r24, 0x30	; 48
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 2f 0c 	call	0x185e	; 0x185e <fputc>
    17b0:	a2 fe       	sbrs	r10, 2
    17b2:	17 c0       	rjmp	.+46     	; 0x17e2 <vfprintf+0x372>
    17b4:	a1 fc       	sbrc	r10, 1
    17b6:	03 c0       	rjmp	.+6      	; 0x17be <vfprintf+0x34e>
    17b8:	88 e7       	ldi	r24, 0x78	; 120
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <vfprintf+0x352>
    17be:	88 e5       	ldi	r24, 0x58	; 88
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	b6 01       	movw	r22, r12
    17c4:	0c c0       	rjmp	.+24     	; 0x17de <vfprintf+0x36e>
    17c6:	8a 2d       	mov	r24, r10
    17c8:	86 78       	andi	r24, 0x86	; 134
    17ca:	59 f0       	breq	.+22     	; 0x17e2 <vfprintf+0x372>
    17cc:	a1 fe       	sbrs	r10, 1
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <vfprintf+0x364>
    17d0:	8b e2       	ldi	r24, 0x2B	; 43
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <vfprintf+0x366>
    17d4:	80 e2       	ldi	r24, 0x20	; 32
    17d6:	a7 fc       	sbrc	r10, 7
    17d8:	8d e2       	ldi	r24, 0x2D	; 45
    17da:	b6 01       	movw	r22, r12
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 2f 0c 	call	0x185e	; 0x185e <fputc>
    17e2:	89 14       	cp	r8, r9
    17e4:	38 f4       	brcc	.+14     	; 0x17f4 <vfprintf+0x384>
    17e6:	b6 01       	movw	r22, r12
    17e8:	80 e3       	ldi	r24, 0x30	; 48
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 2f 0c 	call	0x185e	; 0x185e <fputc>
    17f0:	9a 94       	dec	r9
    17f2:	f7 cf       	rjmp	.-18     	; 0x17e2 <vfprintf+0x372>
    17f4:	8a 94       	dec	r8
    17f6:	f3 01       	movw	r30, r6
    17f8:	e8 0d       	add	r30, r8
    17fa:	f1 1d       	adc	r31, r1
    17fc:	80 81       	ld	r24, Z
    17fe:	b6 01       	movw	r22, r12
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 2f 0c 	call	0x185e	; 0x185e <fputc>
    1806:	81 10       	cpse	r8, r1
    1808:	f5 cf       	rjmp	.-22     	; 0x17f4 <vfprintf+0x384>
    180a:	22 20       	and	r2, r2
    180c:	09 f4       	brne	.+2      	; 0x1810 <vfprintf+0x3a0>
    180e:	42 ce       	rjmp	.-892    	; 0x1494 <vfprintf+0x24>
    1810:	b6 01       	movw	r22, r12
    1812:	80 e2       	ldi	r24, 0x20	; 32
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 2f 0c 	call	0x185e	; 0x185e <fputc>
    181a:	2a 94       	dec	r2
    181c:	f6 cf       	rjmp	.-20     	; 0x180a <vfprintf+0x39a>
    181e:	f6 01       	movw	r30, r12
    1820:	86 81       	ldd	r24, Z+6	; 0x06
    1822:	97 81       	ldd	r25, Z+7	; 0x07
    1824:	02 c0       	rjmp	.+4      	; 0x182a <vfprintf+0x3ba>
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	9f ef       	ldi	r25, 0xFF	; 255
    182a:	2b 96       	adiw	r28, 0x0b	; 11
    182c:	e2 e1       	ldi	r30, 0x12	; 18
    182e:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__epilogue_restores__>

00001832 <strnlen_P>:
    1832:	fc 01       	movw	r30, r24
    1834:	05 90       	lpm	r0, Z+
    1836:	61 50       	subi	r22, 0x01	; 1
    1838:	70 40       	sbci	r23, 0x00	; 0
    183a:	01 10       	cpse	r0, r1
    183c:	d8 f7       	brcc	.-10     	; 0x1834 <strnlen_P+0x2>
    183e:	80 95       	com	r24
    1840:	90 95       	com	r25
    1842:	8e 0f       	add	r24, r30
    1844:	9f 1f       	adc	r25, r31
    1846:	08 95       	ret

00001848 <strnlen>:
    1848:	fc 01       	movw	r30, r24
    184a:	61 50       	subi	r22, 0x01	; 1
    184c:	70 40       	sbci	r23, 0x00	; 0
    184e:	01 90       	ld	r0, Z+
    1850:	01 10       	cpse	r0, r1
    1852:	d8 f7       	brcc	.-10     	; 0x184a <strnlen+0x2>
    1854:	80 95       	com	r24
    1856:	90 95       	com	r25
    1858:	8e 0f       	add	r24, r30
    185a:	9f 1f       	adc	r25, r31
    185c:	08 95       	ret

0000185e <fputc>:
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	fb 01       	movw	r30, r22
    1868:	23 81       	ldd	r18, Z+3	; 0x03
    186a:	21 fd       	sbrc	r18, 1
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <fputc+0x16>
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	9f ef       	ldi	r25, 0xFF	; 255
    1872:	2c c0       	rjmp	.+88     	; 0x18cc <fputc+0x6e>
    1874:	22 ff       	sbrs	r18, 2
    1876:	16 c0       	rjmp	.+44     	; 0x18a4 <fputc+0x46>
    1878:	46 81       	ldd	r20, Z+6	; 0x06
    187a:	57 81       	ldd	r21, Z+7	; 0x07
    187c:	24 81       	ldd	r18, Z+4	; 0x04
    187e:	35 81       	ldd	r19, Z+5	; 0x05
    1880:	42 17       	cp	r20, r18
    1882:	53 07       	cpc	r21, r19
    1884:	44 f4       	brge	.+16     	; 0x1896 <fputc+0x38>
    1886:	a0 81       	ld	r26, Z
    1888:	b1 81       	ldd	r27, Z+1	; 0x01
    188a:	9d 01       	movw	r18, r26
    188c:	2f 5f       	subi	r18, 0xFF	; 255
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	31 83       	std	Z+1, r19	; 0x01
    1892:	20 83       	st	Z, r18
    1894:	8c 93       	st	X, r24
    1896:	26 81       	ldd	r18, Z+6	; 0x06
    1898:	37 81       	ldd	r19, Z+7	; 0x07
    189a:	2f 5f       	subi	r18, 0xFF	; 255
    189c:	3f 4f       	sbci	r19, 0xFF	; 255
    189e:	37 83       	std	Z+7, r19	; 0x07
    18a0:	26 83       	std	Z+6, r18	; 0x06
    18a2:	14 c0       	rjmp	.+40     	; 0x18cc <fputc+0x6e>
    18a4:	8b 01       	movw	r16, r22
    18a6:	ec 01       	movw	r28, r24
    18a8:	fb 01       	movw	r30, r22
    18aa:	00 84       	ldd	r0, Z+8	; 0x08
    18ac:	f1 85       	ldd	r31, Z+9	; 0x09
    18ae:	e0 2d       	mov	r30, r0
    18b0:	09 95       	icall
    18b2:	89 2b       	or	r24, r25
    18b4:	e1 f6       	brne	.-72     	; 0x186e <fputc+0x10>
    18b6:	d8 01       	movw	r26, r16
    18b8:	16 96       	adiw	r26, 0x06	; 6
    18ba:	8d 91       	ld	r24, X+
    18bc:	9c 91       	ld	r25, X
    18be:	17 97       	sbiw	r26, 0x07	; 7
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	17 96       	adiw	r26, 0x07	; 7
    18c4:	9c 93       	st	X, r25
    18c6:	8e 93       	st	-X, r24
    18c8:	16 97       	sbiw	r26, 0x06	; 6
    18ca:	ce 01       	movw	r24, r28
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <__ultoa_invert>:
    18d6:	fa 01       	movw	r30, r20
    18d8:	aa 27       	eor	r26, r26
    18da:	28 30       	cpi	r18, 0x08	; 8
    18dc:	51 f1       	breq	.+84     	; 0x1932 <__ultoa_invert+0x5c>
    18de:	20 31       	cpi	r18, 0x10	; 16
    18e0:	81 f1       	breq	.+96     	; 0x1942 <__ultoa_invert+0x6c>
    18e2:	e8 94       	clt
    18e4:	6f 93       	push	r22
    18e6:	6e 7f       	andi	r22, 0xFE	; 254
    18e8:	6e 5f       	subi	r22, 0xFE	; 254
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	8f 4f       	sbci	r24, 0xFF	; 255
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	af 4f       	sbci	r26, 0xFF	; 255
    18f2:	b1 e0       	ldi	r27, 0x01	; 1
    18f4:	3e d0       	rcall	.+124    	; 0x1972 <__ultoa_invert+0x9c>
    18f6:	b4 e0       	ldi	r27, 0x04	; 4
    18f8:	3c d0       	rcall	.+120    	; 0x1972 <__ultoa_invert+0x9c>
    18fa:	67 0f       	add	r22, r23
    18fc:	78 1f       	adc	r23, r24
    18fe:	89 1f       	adc	r24, r25
    1900:	9a 1f       	adc	r25, r26
    1902:	a1 1d       	adc	r26, r1
    1904:	68 0f       	add	r22, r24
    1906:	79 1f       	adc	r23, r25
    1908:	8a 1f       	adc	r24, r26
    190a:	91 1d       	adc	r25, r1
    190c:	a1 1d       	adc	r26, r1
    190e:	6a 0f       	add	r22, r26
    1910:	71 1d       	adc	r23, r1
    1912:	81 1d       	adc	r24, r1
    1914:	91 1d       	adc	r25, r1
    1916:	a1 1d       	adc	r26, r1
    1918:	20 d0       	rcall	.+64     	; 0x195a <__ultoa_invert+0x84>
    191a:	09 f4       	brne	.+2      	; 0x191e <__ultoa_invert+0x48>
    191c:	68 94       	set
    191e:	3f 91       	pop	r19
    1920:	2a e0       	ldi	r18, 0x0A	; 10
    1922:	26 9f       	mul	r18, r22
    1924:	11 24       	eor	r1, r1
    1926:	30 19       	sub	r19, r0
    1928:	30 5d       	subi	r19, 0xD0	; 208
    192a:	31 93       	st	Z+, r19
    192c:	de f6       	brtc	.-74     	; 0x18e4 <__ultoa_invert+0xe>
    192e:	cf 01       	movw	r24, r30
    1930:	08 95       	ret
    1932:	46 2f       	mov	r20, r22
    1934:	47 70       	andi	r20, 0x07	; 7
    1936:	40 5d       	subi	r20, 0xD0	; 208
    1938:	41 93       	st	Z+, r20
    193a:	b3 e0       	ldi	r27, 0x03	; 3
    193c:	0f d0       	rcall	.+30     	; 0x195c <__ultoa_invert+0x86>
    193e:	c9 f7       	brne	.-14     	; 0x1932 <__ultoa_invert+0x5c>
    1940:	f6 cf       	rjmp	.-20     	; 0x192e <__ultoa_invert+0x58>
    1942:	46 2f       	mov	r20, r22
    1944:	4f 70       	andi	r20, 0x0F	; 15
    1946:	40 5d       	subi	r20, 0xD0	; 208
    1948:	4a 33       	cpi	r20, 0x3A	; 58
    194a:	18 f0       	brcs	.+6      	; 0x1952 <__ultoa_invert+0x7c>
    194c:	49 5d       	subi	r20, 0xD9	; 217
    194e:	31 fd       	sbrc	r19, 1
    1950:	40 52       	subi	r20, 0x20	; 32
    1952:	41 93       	st	Z+, r20
    1954:	02 d0       	rcall	.+4      	; 0x195a <__ultoa_invert+0x84>
    1956:	a9 f7       	brne	.-22     	; 0x1942 <__ultoa_invert+0x6c>
    1958:	ea cf       	rjmp	.-44     	; 0x192e <__ultoa_invert+0x58>
    195a:	b4 e0       	ldi	r27, 0x04	; 4
    195c:	a6 95       	lsr	r26
    195e:	97 95       	ror	r25
    1960:	87 95       	ror	r24
    1962:	77 95       	ror	r23
    1964:	67 95       	ror	r22
    1966:	ba 95       	dec	r27
    1968:	c9 f7       	brne	.-14     	; 0x195c <__ultoa_invert+0x86>
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	61 05       	cpc	r22, r1
    196e:	71 05       	cpc	r23, r1
    1970:	08 95       	ret
    1972:	9b 01       	movw	r18, r22
    1974:	ac 01       	movw	r20, r24
    1976:	0a 2e       	mov	r0, r26
    1978:	06 94       	lsr	r0
    197a:	57 95       	ror	r21
    197c:	47 95       	ror	r20
    197e:	37 95       	ror	r19
    1980:	27 95       	ror	r18
    1982:	ba 95       	dec	r27
    1984:	c9 f7       	brne	.-14     	; 0x1978 <__ultoa_invert+0xa2>
    1986:	62 0f       	add	r22, r18
    1988:	73 1f       	adc	r23, r19
    198a:	84 1f       	adc	r24, r20
    198c:	95 1f       	adc	r25, r21
    198e:	a0 1d       	adc	r26, r0
    1990:	08 95       	ret

00001992 <__prologue_saves__>:
    1992:	2f 92       	push	r2
    1994:	3f 92       	push	r3
    1996:	4f 92       	push	r4
    1998:	5f 92       	push	r5
    199a:	6f 92       	push	r6
    199c:	7f 92       	push	r7
    199e:	8f 92       	push	r8
    19a0:	9f 92       	push	r9
    19a2:	af 92       	push	r10
    19a4:	bf 92       	push	r11
    19a6:	cf 92       	push	r12
    19a8:	df 92       	push	r13
    19aa:	ef 92       	push	r14
    19ac:	ff 92       	push	r15
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	ca 1b       	sub	r28, r26
    19bc:	db 0b       	sbc	r29, r27
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	09 94       	ijmp

000019ca <__epilogue_restores__>:
    19ca:	2a 88       	ldd	r2, Y+18	; 0x12
    19cc:	39 88       	ldd	r3, Y+17	; 0x11
    19ce:	48 88       	ldd	r4, Y+16	; 0x10
    19d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    19d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    19d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    19d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    19d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    19da:	aa 84       	ldd	r10, Y+10	; 0x0a
    19dc:	b9 84       	ldd	r11, Y+9	; 0x09
    19de:	c8 84       	ldd	r12, Y+8	; 0x08
    19e0:	df 80       	ldd	r13, Y+7	; 0x07
    19e2:	ee 80       	ldd	r14, Y+6	; 0x06
    19e4:	fd 80       	ldd	r15, Y+5	; 0x05
    19e6:	0c 81       	ldd	r16, Y+4	; 0x04
    19e8:	1b 81       	ldd	r17, Y+3	; 0x03
    19ea:	aa 81       	ldd	r26, Y+2	; 0x02
    19ec:	b9 81       	ldd	r27, Y+1	; 0x01
    19ee:	ce 0f       	add	r28, r30
    19f0:	d1 1d       	adc	r29, r1
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	ed 01       	movw	r28, r26
    19fe:	08 95       	ret

00001a00 <_exit>:
    1a00:	f8 94       	cli

00001a02 <__stop_program>:
    1a02:	ff cf       	rjmp	.-2      	; 0x1a02 <__stop_program>
