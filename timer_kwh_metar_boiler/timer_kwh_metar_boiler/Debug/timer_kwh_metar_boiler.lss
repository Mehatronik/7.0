
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000e72  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800124  00800124  00000f2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020d4  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d21  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001151  00000000  00000000  00003fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  00005120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000819  00000000  00000000  00005654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001901  00000000  00000000  00005e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000776e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_20>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 34       	cpi	r26, 0x40	; 64
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
  9e:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
  a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
  a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
  b2:	8e ee       	ldi	r24, 0xEE	; 238
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
  b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
  bc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
  c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	/*
	AD konverzija
	ISR okine kada je gotova konverzija
	*/
	
	PORTD |= 1<<PINB7;       //togle za osciloskop
  d4:	5f 9a       	sbi	0x0b, 7	; 11
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
  d6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
  da:	81 11       	cpse	r24, r1
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <__vector_21+0x2e>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <mereni_napon+0x1>
  ea:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <mereni_napon>
  ee:	0c c0       	rjmp	.+24     	; 0x108 <__vector_21+0x46>
	else if(ad_kanal == 1)
  f0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	41 f4       	brne	.+16     	; 0x108 <__vector_21+0x46>
		merena_struja = (uint16_t)ADC;
  f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  fc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 100:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <merena_struja+0x1>
 104:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 77       	andi	r24, 0x7F	; 127
 110:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 112:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
 11c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	10 f0       	brcs	.+4      	; 0x128 <__vector_21+0x66>
		ad_kanal = 0;
 124:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
 128:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 12c:	88 23       	and	r24, r24
 12e:	19 f0       	breq	.+6      	; 0x136 <__vector_21+0x74>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	39 f0       	breq	.+14     	; 0x142 <__vector_21+0x80>
 134:	0e c0       	rjmp	.+28     	; 0x152 <__vector_21+0x90>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
		break;
 140:	08 c0       	rjmp	.+16     	; 0x152 <__vector_21+0x90>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	80 83       	st	Z, r24
				ADMUX |= (0b1);
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 6c       	ori	r24, 0xC0	; 192
 15a:	80 83       	st	Z, r24
	
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us

	PORTD &= ~(1<<7);       //togle za osciloskop
 15c:	5f 98       	cbi	0x0b, 7	; 11
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
 170:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 174:	88 e4       	ldi	r24, 0x48	; 72
 176:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 17a:	08 95       	ret

0000017c <i2c_start_wait>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec eb       	ldi	r30, 0xBC	; 188
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	24 ea       	ldi	r18, 0xA4	; 164
 186:	a9 eb       	ldi	r26, 0xB9	; 185
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	cb eb       	ldi	r28, 0xBB	; 187
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	34 e8       	ldi	r19, 0x84	; 132
 190:	44 e9       	ldi	r20, 0x94	; 148
 192:	20 83       	st	Z, r18
 194:	90 81       	ld	r25, Z
 196:	99 23       	and	r25, r25
 198:	ec f7       	brge	.-6      	; 0x194 <i2c_start_wait+0x18>
 19a:	9c 91       	ld	r25, X
 19c:	98 7f       	andi	r25, 0xF8	; 248
 19e:	98 30       	cpi	r25, 0x08	; 8
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <i2c_start_wait+0x2a>
 1a2:	90 31       	cpi	r25, 0x10	; 16
 1a4:	b1 f7       	brne	.-20     	; 0x192 <i2c_start_wait+0x16>
 1a6:	88 83       	st	Y, r24
 1a8:	30 83       	st	Z, r19
 1aa:	90 81       	ld	r25, Z
 1ac:	99 23       	and	r25, r25
 1ae:	ec f7       	brge	.-6      	; 0x1aa <i2c_start_wait+0x2e>
 1b0:	9c 91       	ld	r25, X
 1b2:	98 7f       	andi	r25, 0xF8	; 248
 1b4:	90 32       	cpi	r25, 0x20	; 32
 1b6:	11 f0       	breq	.+4      	; 0x1bc <i2c_start_wait+0x40>
 1b8:	98 35       	cpi	r25, 0x58	; 88
 1ba:	29 f4       	brne	.+10     	; 0x1c6 <i2c_start_wait+0x4a>
 1bc:	40 83       	st	Z, r20
 1be:	90 81       	ld	r25, Z
 1c0:	94 fd       	sbrc	r25, 4
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <i2c_start_wait+0x42>
 1c4:	e6 cf       	rjmp	.-52     	; 0x192 <i2c_start_wait+0x16>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <i2c_stop>:
 1cc:	84 e9       	ldi	r24, 0x94	; 148
 1ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	84 fd       	sbrc	r24, 4
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <i2c_stop+0xa>
 1dc:	08 95       	ret

000001de <i2c_write>:
 1de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1e2:	84 e8       	ldi	r24, 0x84	; 132
 1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1e8:	ec eb       	ldi	r30, 0xBC	; 188
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 23       	and	r24, r24
 1f0:	ec f7       	brge	.-6      	; 0x1ec <i2c_write+0xe>
 1f2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1f6:	98 7f       	andi	r25, 0xF8	; 248
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	98 32       	cpi	r25, 0x28	; 40
 1fc:	09 f4       	brne	.+2      	; 0x200 <i2c_write+0x22>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret

00000202 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 202:	84 e8       	ldi	r24, 0x84	; 132
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 208:	ec eb       	ldi	r30, 0xBC	; 188
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	88 23       	and	r24, r24
 210:	ec f7       	brge	.-6      	; 0x20c <i2c_readNak+0xa>
	
    return TWDR;
 212:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
 216:	08 95       	ret

00000218 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
 218:	cf 93       	push	r28
 21a:	c8 2f       	mov	r28, r24
 21c:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
 21e:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
	i2c_write(value);                      // write 
 222:	8c 2f       	mov	r24, r28
 224:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
 228:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <putnibble>:
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
 234:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <led_pin>
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <led_pin>
 23e:	6e e4       	ldi	r22, 0x4E	; 78
 240:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 244:	87 ec       	ldi	r24, 0xC7	; 199
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <putnibble+0x18>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <putnibble+0x1e>
 24e:	00 00       	nop
 250:	c2 95       	swap	r28
 252:	c0 7f       	andi	r28, 0xF0	; 240
 254:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <led_pin>
 258:	6e e4       	ldi	r22, 0x4E	; 78
 25a:	8c 2b       	or	r24, r28
 25c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 260:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <led_pin>
 264:	8b 7f       	andi	r24, 0xFB	; 251
 266:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <led_pin>
 26a:	6e e4       	ldi	r22, 0x4E	; 78
 26c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 270:	87 ec       	ldi	r24, 0xC7	; 199
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <putnibble+0x44>
 278:	00 c0       	rjmp	.+0      	; 0x27a <putnibble+0x4a>
 27a:	00 00       	nop
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <lcd1602_send_byte>:
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	c8 2f       	mov	r28, r24
 286:	d8 2f       	mov	r29, r24
 288:	d2 95       	swap	r29
 28a:	df 70       	andi	r29, 0x0F	; 15
 28c:	61 11       	cpse	r22, r1
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <lcd1602_send_byte+0x22>
 290:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <led_pin>
 294:	8e 7f       	andi	r24, 0xFE	; 254
 296:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <led_pin>
 29a:	6e e4       	ldi	r22, 0x4E	; 78
 29c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <lcd1602_send_byte+0x32>
 2a2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <led_pin>
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <led_pin>
 2ac:	6e e4       	ldi	r22, 0x4E	; 78
 2ae:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 2b2:	8d 2f       	mov	r24, r29
 2b4:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2b8:	8c 2f       	mov	r24, r28
 2ba:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <lcd1602_send_char>:
 2c4:	cf 93       	push	r28
 2c6:	c8 2f       	mov	r28, r24
 2c8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <led_pin>
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <led_pin>
 2d2:	6e e4       	ldi	r22, 0x4E	; 78
 2d4:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 2d8:	8c 2f       	mov	r24, r28
 2da:	82 95       	swap	r24
 2dc:	8f 70       	andi	r24, 0x0F	; 15
 2de:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2e2:	8c 2f       	mov	r24, r28
 2e4:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <lcd1602_init>:
 2ec:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <led_pin>
 2f0:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_init>
 2f4:	8f e5       	ldi	r24, 0x5F	; 95
 2f6:	9a ee       	ldi	r25, 0xEA	; 234
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd1602_init+0xc>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <lcd1602_init+0x12>
 2fe:	00 00       	nop
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 306:	8f e7       	ldi	r24, 0x7F	; 127
 308:	9e e3       	ldi	r25, 0x3E	; 62
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <lcd1602_init+0x1e>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <lcd1602_init+0x24>
 310:	00 00       	nop
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 318:	8f e8       	ldi	r24, 0x8F	; 143
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <lcd1602_init+0x30>
 320:	00 c0       	rjmp	.+0      	; 0x322 <lcd1602_init+0x36>
 322:	00 00       	nop
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 32a:	8f e9       	ldi	r24, 0x9F	; 159
 32c:	9f e0       	ldi	r25, 0x0F	; 15
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <lcd1602_init+0x42>
 332:	00 c0       	rjmp	.+0      	; 0x334 <lcd1602_init+0x48>
 334:	00 00       	nop
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 33c:	8f e9       	ldi	r24, 0x9F	; 159
 33e:	9f e0       	ldi	r25, 0x0F	; 15
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <lcd1602_init+0x54>
 344:	00 c0       	rjmp	.+0      	; 0x346 <lcd1602_init+0x5a>
 346:	00 00       	nop
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	88 e2       	ldi	r24, 0x28	; 40
 34c:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 350:	8f e9       	ldi	r24, 0x9F	; 159
 352:	9f e0       	ldi	r25, 0x0F	; 15
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd1602_init+0x68>
 358:	00 c0       	rjmp	.+0      	; 0x35a <lcd1602_init+0x6e>
 35a:	00 00       	nop
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 364:	8f e9       	ldi	r24, 0x9F	; 159
 366:	9f e0       	ldi	r25, 0x0F	; 15
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd1602_init+0x7c>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd1602_init+0x82>
 36e:	00 00       	nop
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	86 e0       	ldi	r24, 0x06	; 6
 374:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 378:	8f e9       	ldi	r24, 0x9F	; 159
 37a:	9f e0       	ldi	r25, 0x0F	; 15
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd1602_init+0x90>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd1602_init+0x96>
 382:	00 00       	nop
 384:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <led_pin>
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <led_pin>
 38e:	6e e4       	ldi	r22, 0x4E	; 78
 390:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 394:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <led_pin>
 398:	8d 7f       	andi	r24, 0xFD	; 253
 39a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <led_pin>
 39e:	6e e4       	ldi	r22, 0x4E	; 78
 3a0:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 3a4:	08 95       	ret

000003a6 <lcd1602_clear>:
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 3ae:	8f e6       	ldi	r24, 0x6F	; 111
 3b0:	97 e1       	ldi	r25, 0x17	; 23
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd1602_clear+0xc>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <lcd1602_clear+0x12>
 3b8:	00 00       	nop
 3ba:	08 95       	ret

000003bc <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3c4:	80 81       	ld	r24, Z
 3c6:	88 23       	and	r24, r24
 3c8:	59 f0       	breq	.+22     	; 0x3e0 <lcd1602_send_string+0x24>
 3ca:	8f 01       	movw	r16, r30
 3cc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
 3ce:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd1602_send_char>
		i++;
 3d2:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3d4:	f8 01       	movw	r30, r16
 3d6:	ec 0f       	add	r30, r28
 3d8:	f1 1d       	adc	r31, r1
 3da:	80 81       	ld	r24, Z
 3dc:	81 11       	cpse	r24, r1
 3de:	f7 cf       	rjmp	.-18     	; 0x3ce <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	08 95       	ret

000003e8 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	e2 97       	sbiw	r28, 0x32	; 50
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	fb 01       	movw	r30, r22
	static uint16_t vreme_trenutno;
	
	char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
 402:	dc 01       	movw	r26, r24
 404:	12 96       	adiw	r26, 0x02	; 2
 406:	2c 91       	ld	r18, X
 408:	12 97       	sbiw	r26, 0x02	; 2
 40a:	74 e6       	ldi	r23, 0x64	; 100
 40c:	11 96       	adiw	r26, 0x01	; 1
 40e:	8c 91       	ld	r24, X
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	72 9f       	mul	r23, r18
 414:	80 0d       	add	r24, r0
 416:	91 1d       	adc	r25, r1
 418:	11 24       	eor	r1, r1
 41a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <vreme_on.2060+0x1>
 41e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <vreme_on.2060>
	vreme_off = (Off_time->hr)*100 + Off_time->min;
 422:	62 81       	ldd	r22, Z+2	; 0x02
 424:	21 81       	ldd	r18, Z+1	; 0x01
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	76 9f       	mul	r23, r22
 42a:	20 0d       	add	r18, r0
 42c:	31 1d       	adc	r19, r1
 42e:	11 24       	eor	r1, r1
 430:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <vreme_off.2061+0x1>
 434:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <vreme_off.2061>
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
 438:	fa 01       	movw	r30, r20
 43a:	62 81       	ldd	r22, Z+2	; 0x02
 43c:	41 81       	ldd	r20, Z+1	; 0x01
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	76 9f       	mul	r23, r22
 442:	40 0d       	add	r20, r0
 444:	51 1d       	adc	r21, r1
 446:	11 24       	eor	r1, r1
 448:	50 93 2a 01 	sts	0x012A, r21	; 0x80012a <vreme_trenutno.2062+0x1>
 44c:	40 93 29 01 	sts	0x0129, r20	; 0x800129 <vreme_trenutno.2062>
	
	
	sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
 450:	5f 93       	push	r21
 452:	4f 93       	push	r20
 454:	3f 93       	push	r19
 456:	2f 93       	push	r18
 458:	9f 93       	push	r25
 45a:	8f 93       	push	r24
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	9f 93       	push	r25
 462:	8f 93       	push	r24
 464:	8e 01       	movw	r16, r28
 466:	0f 5f       	subi	r16, 0xFF	; 255
 468:	1f 4f       	sbci	r17, 0xFF	; 255
 46a:	1f 93       	push	r17
 46c:	0f 93       	push	r16
 46e:	0e 94 4d 04 	call	0x89a	; 0x89a <sprintf>
	send_str(buff);
 472:	c8 01       	movw	r24, r16
 474:	0e 94 3a 04 	call	0x874	; 0x874 <send_str>
	send_str("\n"); //novi red
 478:	83 e1       	ldi	r24, 0x13	; 19
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 3a 04 	call	0x874	; 0x874 <send_str>
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve
 480:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <vreme_on.2060>
 484:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <vreme_on.2060+0x1>
 488:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <vreme_off.2061>
 48c:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <vreme_off.2061+0x1>
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	82 17       	cp	r24, r18
 49c:	93 07       	cpc	r25, r19
 49e:	88 f0       	brcs	.+34     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
 4a0:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <vreme_trenutno.2062>
 4a4:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <vreme_trenutno.2062+0x1>
 4a8:	48 17       	cp	r20, r24
 4aa:	59 07       	cpc	r21, r25
 4ac:	20 f0       	brcs	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4ae:	48 33       	cpi	r20, 0x38	; 56
 4b0:	89 e0       	ldi	r24, 0x09	; 9
 4b2:	58 07       	cpc	r21, r24
 4b4:	98 f0       	brcs	.+38     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	42 17       	cp	r20, r18
 4ba:	53 07       	cpc	r21, r19
 4bc:	90 f0       	brcs	.+36     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	10 c0       	rjmp	.+32     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
 4c2:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <vreme_trenutno.2062>
 4c6:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <vreme_trenutno.2062+0x1>
 4ca:	48 17       	cp	r20, r24
 4cc:	59 07       	cpc	r21, r25
 4ce:	40 f0       	brcs	.+16     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	42 17       	cp	r20, r18
 4d4:	53 07       	cpc	r21, r19
 4d6:	28 f0       	brcs	.+10     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
 4e2:	e2 96       	adiw	r28, 0x32	; 50
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	cd bf       	out	0x3d, r28	; 61
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	08 95       	ret

000004f8 <main>:


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime);  //typedef struct mora biti pre prototipa da bi je video

int main(void)
{
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	af 97       	sbiw	r28, 0x2f	; 47
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61

	Time_date vreme_datum;
	Time_date Vreme_paljenja;
	Time_date Vreme_gasenja;
	
	Vreme_paljenja.hr = 23;
 50c:	87 e1       	ldi	r24, 0x17	; 23
 50e:	8c 87       	std	Y+12, r24	; 0x0c
	Vreme_paljenja.min = 58;
 510:	9a e3       	ldi	r25, 0x3A	; 58
 512:	9b 87       	std	Y+11, r25	; 0x0b
	Vreme_gasenja.hr = 23;
 514:	8d 8b       	std	Y+21, r24	; 0x15
	Vreme_gasenja.min = 59;
 516:	8b e3       	ldi	r24, 0x3B	; 59
 518:	8c 8b       	std	Y+20, r24	; 0x14
	char bafer[20];
	uint8_t ukljuceno = 0;  //0=OFF 1=ON
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();
 51a:	0e 94 c3 03 	call	0x786	; 0x786 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
 51e:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_init>
	lcd1602_init();
 522:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd1602_init>
	ADC_init();				//NAPOMENA:	PINB7 output
 526:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init();			//baud 9600
 52a:	0e 94 2a 04 	call	0x854	; 0x854 <uart_init>
	DS3231_init();			//RTC init
 52e:	0e 94 49 03 	call	0x692	; 0x692 <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
 532:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <pc_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
 536:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;
 538:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
 53a:	78 94       	sei
/**************************************************************************************************************/
	
	//getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
	//getDate(&vreme_datum.dy, &vreme_datum.dt, &vreme_datum.mt, &vreme_datum.yr);
	
	setTime(23, 57, 55, am, _24_hour_format);
 53c:	00 e0       	ldi	r16, 0x00	; 0
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	47 e3       	ldi	r20, 0x37	; 55
 542:	69 e3       	ldi	r22, 0x39	; 57
 544:	87 e1       	ldi	r24, 0x17	; 23
 546:	0e 94 90 03 	call	0x720	; 0x720 <setTime>
		{
			flag_pc_int = 0; //resetujem flag koji je u ISR
			
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
 54a:	0f 2e       	mov	r0, r31
 54c:	f5 e1       	ldi	r31, 0x15	; 21
 54e:	cf 2e       	mov	r12, r31
 550:	f1 e0       	ldi	r31, 0x01	; 1
 552:	df 2e       	mov	r13, r31
 554:	f0 2d       	mov	r31, r0
 556:	7e 01       	movw	r14, r28
 558:	2c e1       	ldi	r18, 0x1C	; 28
 55a:	e2 0e       	add	r14, r18
 55c:	f1 1c       	adc	r15, r1
	
    while (1) 
    {
		
		
		if(flag_pc_int)
 55e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <flag_pc_int>
 562:	88 23       	and	r24, r24
 564:	e1 f3       	breq	.-8      	; 0x55e <main+0x66>
		{
			flag_pc_int = 0; //resetujem flag koji je u ISR
 566:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <flag_pc_int>
			
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
 56a:	00 e0       	ldi	r16, 0x00	; 0
 56c:	9e 01       	movw	r18, r28
 56e:	27 5f       	subi	r18, 0xF7	; 247
 570:	3f 4f       	sbci	r19, 0xFF	; 255
 572:	ae 01       	movw	r20, r28
 574:	4f 5f       	subi	r20, 0xFF	; 255
 576:	5f 4f       	sbci	r21, 0xFF	; 255
 578:	be 01       	movw	r22, r28
 57a:	6e 5f       	subi	r22, 0xFE	; 254
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	ce 01       	movw	r24, r28
 580:	03 96       	adiw	r24, 0x03	; 3
 582:	0e 94 52 03 	call	0x6a4	; 0x6a4 <getTime>
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
 586:	89 81       	ldd	r24, Y+1	; 0x01
 588:	1f 92       	push	r1
 58a:	8f 93       	push	r24
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	1f 92       	push	r1
 590:	8f 93       	push	r24
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	1f 92       	push	r1
 596:	8f 93       	push	r24
 598:	df 92       	push	r13
 59a:	cf 92       	push	r12
 59c:	ff 92       	push	r15
 59e:	ef 92       	push	r14
 5a0:	0e 94 4d 04 	call	0x89a	; 0x89a <sprintf>
			//send_str(bafer);
			//send_str("\n"); //novi red
			
			lcd1602_clear();
 5a4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd1602_clear>
			lcd1602_send_string(bafer);
 5a8:	c7 01       	movw	r24, r14
 5aa:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcd1602_send_string>
			
			ukljuceno = period_paljenja(&Vreme_paljenja, &Vreme_gasenja, &vreme_datum);
 5ae:	ae 01       	movw	r20, r28
 5b0:	4f 5f       	subi	r20, 0xFF	; 255
 5b2:	5f 4f       	sbci	r21, 0xFF	; 255
 5b4:	be 01       	movw	r22, r28
 5b6:	6d 5e       	subi	r22, 0xED	; 237
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	ce 01       	movw	r24, r28
 5bc:	0a 96       	adiw	r24, 0x0a	; 10
 5be:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <period_paljenja>
			
			if (ukljuceno)
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	88 23       	and	r24, r24
 5ce:	11 f0       	breq	.+4      	; 0x5d4 <main+0xdc>
				PORTB |= 1<<PINB5;   //high
 5d0:	2d 9a       	sbi	0x05, 5	; 5
 5d2:	c5 cf       	rjmp	.-118    	; 0x55e <main+0x66>
			else
				PORTB &= ~(1<<PINB5);	//low
 5d4:	2d 98       	cbi	0x05, 5	; 5
 5d6:	c3 cf       	rjmp	.-122    	; 0x55e <main+0x66>

000005d8 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
 5d8:	e8 e6       	ldi	r30, 0x68	; 104
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	82 60       	ori	r24, 0x02	; 2
 5e0:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
 5e2:	ec e6       	ldi	r30, 0x6C	; 108
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	88 60       	ori	r24, 0x08	; 8
 5ea:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
 5ec:	3b 98       	cbi	0x07, 3	; 7
 5ee:	08 95       	ret

000005f0 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if(PINC & (1<<PINC3) )		
 5fc:	33 9b       	sbis	0x06, 3	; 6
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <__vector_4+0x16>
		flag_pc_int = 1;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <flag_pc_int>

 606:	8f 91       	pop	r24
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
 612:	98 2f       	mov	r25, r24
 614:	92 95       	swap	r25
 616:	9f 70       	andi	r25, 0x0F	; 15
 618:	99 0f       	add	r25, r25
 61a:	29 2f       	mov	r18, r25
 61c:	22 0f       	add	r18, r18
 61e:	22 0f       	add	r18, r18
 620:	92 0f       	add	r25, r18
 622:	8f 70       	andi	r24, 0x0F	; 15
 624:	89 0f       	add	r24, r25
 626:	08 95       	ret

00000628 <decimal_to_bcd>:
 628:	9d ec       	ldi	r25, 0xCD	; 205
 62a:	89 9f       	mul	r24, r25
 62c:	91 2d       	mov	r25, r1
 62e:	11 24       	eor	r1, r1
 630:	96 95       	lsr	r25
 632:	96 95       	lsr	r25
 634:	96 95       	lsr	r25
 636:	20 e1       	ldi	r18, 0x10	; 16
 638:	92 9f       	mul	r25, r18
 63a:	a0 01       	movw	r20, r0
 63c:	11 24       	eor	r1, r1
 63e:	99 0f       	add	r25, r25
 640:	29 2f       	mov	r18, r25
 642:	22 0f       	add	r18, r18
 644:	22 0f       	add	r18, r18
 646:	92 0f       	add	r25, r18
 648:	89 1b       	sub	r24, r25
 64a:	8f 70       	andi	r24, 0x0F	; 15
 64c:	84 2b       	or	r24, r20
 64e:	08 95       	ret

00000650 <DS3231_Read>:
 650:	cf 93       	push	r28
 652:	c8 2f       	mov	r28, r24
 654:	80 ed       	ldi	r24, 0xD0	; 208
 656:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
 65a:	8c 2f       	mov	r24, r28
 65c:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
 660:	81 ed       	ldi	r24, 0xD1	; 209
 662:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
 666:	0e 94 01 01 	call	0x202	; 0x202 <i2c_readNak>
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <DS3231_Write>:
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	d8 2f       	mov	r29, r24
 674:	c6 2f       	mov	r28, r22
 676:	80 ed       	ldi	r24, 0xD0	; 208
 678:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
 67c:	8d 2f       	mov	r24, r29
 67e:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
 682:	8c 2f       	mov	r24, r28
 684:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
 688:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <DS3231_init>:
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	8e e0       	ldi	r24, 0x0E	; 14
 696:	0e 94 37 03 	call	0x66e	; 0x66e <DS3231_Write>
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	8f e0       	ldi	r24, 0x0F	; 15
 69e:	0e 94 37 03 	call	0x66e	; 0x66e <DS3231_Write>
 6a2:	08 95       	ret

000006a4 <getTime>:
 6a4:	af 92       	push	r10
 6a6:	bf 92       	push	r11
 6a8:	cf 92       	push	r12
 6aa:	df 92       	push	r13
 6ac:	ef 92       	push	r14
 6ae:	ff 92       	push	r15
 6b0:	0f 93       	push	r16
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	ec 01       	movw	r28, r24
 6b8:	7b 01       	movw	r14, r22
 6ba:	6a 01       	movw	r12, r20
 6bc:	59 01       	movw	r10, r18
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	0e 94 28 03 	call	0x650	; 0x650 <DS3231_Read>
 6c4:	0e 94 09 03 	call	0x612	; 0x612 <bcd_to_decimal>
 6c8:	f6 01       	movw	r30, r12
 6ca:	80 83       	st	Z, r24
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	0e 94 28 03 	call	0x650	; 0x650 <DS3231_Read>
 6d2:	0e 94 09 03 	call	0x612	; 0x612 <bcd_to_decimal>
 6d6:	f7 01       	movw	r30, r14
 6d8:	80 83       	st	Z, r24
 6da:	01 30       	cpi	r16, 0x01	; 1
 6dc:	81 f4       	brne	.+32     	; 0x6fe <getTime+0x5a>
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	0e 94 28 03 	call	0x650	; 0x650 <DS3231_Read>
 6e4:	85 fb       	bst	r24, 5
 6e6:	88 27       	eor	r24, r24
 6e8:	80 f9       	bld	r24, 0
 6ea:	f5 01       	movw	r30, r10
 6ec:	80 83       	st	Z, r24
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	0e 94 28 03 	call	0x650	; 0x650 <DS3231_Read>
 6f4:	8f 71       	andi	r24, 0x1F	; 31
 6f6:	0e 94 09 03 	call	0x612	; 0x612 <bcd_to_decimal>
 6fa:	88 83       	st	Y, r24
 6fc:	07 c0       	rjmp	.+14     	; 0x70c <getTime+0x68>
 6fe:	82 e0       	ldi	r24, 0x02	; 2
 700:	0e 94 28 03 	call	0x650	; 0x650 <DS3231_Read>
 704:	8f 73       	andi	r24, 0x3F	; 63
 706:	0e 94 09 03 	call	0x612	; 0x612 <bcd_to_decimal>
 70a:	88 83       	st	Y, r24
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	0f 91       	pop	r16
 712:	ff 90       	pop	r15
 714:	ef 90       	pop	r14
 716:	df 90       	pop	r13
 718:	cf 90       	pop	r12
 71a:	bf 90       	pop	r11
 71c:	af 90       	pop	r10
 71e:	08 95       	ret

00000720 <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	d8 2f       	mov	r29, r24
 72a:	c6 2f       	mov	r28, r22
 72c:	84 2f       	mov	r24, r20
 72e:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
 730:	0e 94 14 03 	call	0x628	; 0x628 <decimal_to_bcd>
 734:	68 2f       	mov	r22, r24
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	0e 94 37 03 	call	0x66e	; 0x66e <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
 73c:	8c 2f       	mov	r24, r28
 73e:	0e 94 14 03 	call	0x628	; 0x628 <decimal_to_bcd>
 742:	68 2f       	mov	r22, r24
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	0e 94 37 03 	call	0x66e	; 0x66e <DS3231_Write>
	
	switch(hour_format)
 74a:	01 30       	cpi	r16, 0x01	; 1
 74c:	79 f4       	brne	.+30     	; 0x76c <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
 74e:	11 30       	cpi	r17, 0x01	; 1
 750:	11 f0       	breq	.+4      	; 0x756 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
 752:	c0 e4       	ldi	r28, 0x40	; 64
 754:	01 c0       	rjmp	.+2      	; 0x758 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
 756:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
 758:	8d 2f       	mov	r24, r29
 75a:	0e 94 14 03 	call	0x628	; 0x628 <decimal_to_bcd>
 75e:	8f 71       	andi	r24, 0x1F	; 31
 760:	68 2f       	mov	r22, r24
 762:	6c 2b       	or	r22, r28
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	0e 94 37 03 	call	0x66e	; 0x66e <DS3231_Write>
			break;
 76a:	08 c0       	rjmp	.+16     	; 0x77c <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
 76c:	8d 2f       	mov	r24, r29
 76e:	0e 94 14 03 	call	0x628	; 0x628 <decimal_to_bcd>
 772:	68 2f       	mov	r22, r24
 774:	6f 73       	andi	r22, 0x3F	; 63
 776:	82 e0       	ldi	r24, 0x02	; 2
 778:	0e 94 37 03 	call	0x66e	; 0x66e <DS3231_Write>
			break;
		}
	}
}
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17
 782:	0f 91       	pop	r16
 784:	08 95       	ret

00000786 <tajmer0_init>:
volatile unsigned int brojac_prekida_tajmera0;


void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 78a:	93 e0       	ldi	r25, 0x03	; 3
 78c:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 78e:	99 ef       	ldi	r25, 0xF9	; 249
 790:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 792:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 796:	08 95       	ret

00000798 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
 798:	1f 92       	push	r1
 79a:	0f 92       	push	r0
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	0f 92       	push	r0
 7a0:	11 24       	eor	r1, r1
 7a2:	8f 93       	push	r24
 7a4:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
 7ac:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <brojac_prekida_tajmera0>
 7b0:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <brojac_prekida_tajmera0+0x1>
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <brojac_prekida_tajmera0+0x1>
 7ba:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)	//1ms * 10 = 10ms
 7be:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <brojac_prekida_tajmera0>
 7c2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <brojac_prekida_tajmera0+0x1>
 7c6:	0a 97       	sbiw	r24, 0x0a	; 10
 7c8:	39 f4       	brne	.+14     	; 0x7d8 <__vector_14+0x40>
	{
		brojac_prekida_tajmera0 = 0;
 7ca:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <brojac_prekida_tajmera0+0x1>
 7ce:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;				
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <flag_prekid_10ms>
		
	}
	
	
 7d8:	9f 91       	pop	r25
 7da:	8f 91       	pop	r24
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 7e6:	1f 92       	push	r1
 7e8:	0f 92       	push	r0
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
	poslato=0;
 7f0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <poslato>
}
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <__vector_18>:

ISR(USART_RX_vect)
{
 7fe:	1f 92       	push	r1
 800:	0f 92       	push	r0
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	0f 92       	push	r0
 806:	11 24       	eor	r1, r1
 808:	8f 93       	push	r24
 80a:	ef 93       	push	r30
 80c:	ff 93       	push	r31
	input_char=UDR0;
 80e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 812:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 816:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <buff_size>
 81a:	88 30       	cpi	r24, 0x08	; 8
 81c:	98 f4       	brcc	.+38     	; 0x844 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 81e:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <buff_size>
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <input_char>
 828:	e8 5c       	subi	r30, 0xC8	; 200
 82a:	fe 4f       	sbci	r31, 0xFE	; 254
 82c:	80 83       	st	Z, r24
		buff_size++;
 82e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <buff_size>
 832:	8f 5f       	subi	r24, 0xFF	; 255
 834:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <buff_size>
		input_buffer[buff_size]='\0';
 838:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <buff_size>
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	e8 5c       	subi	r30, 0xC8	; 200
 840:	fe 4f       	sbci	r31, 0xFE	; 254
 842:	10 82       	st	Z, r1
	}
}
 844:	ff 91       	pop	r31
 846:	ef 91       	pop	r30
 848:	8f 91       	pop	r24
 84a:	0f 90       	pop	r0
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	0f 90       	pop	r0
 850:	1f 90       	pop	r1
 852:	18 95       	reti

00000854 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 854:	82 e0       	ldi	r24, 0x02	; 2
 856:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 85a:	88 ed       	ldi	r24, 0xD8	; 216
 85c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 860:	86 e0       	ldi	r24, 0x06	; 6
 862:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 866:	8f ec       	ldi	r24, 0xCF	; 207
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 86e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 872:	08 95       	ret

00000874 <send_str>:
}

void send_str(char *str)
{
 874:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 876:	90 81       	ld	r25, Z
 878:	99 23       	and	r25, r25
 87a:	71 f0       	breq	.+28     	; 0x898 <send_str+0x24>
 87c:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 87e:	a6 ec       	ldi	r26, 0xC6	; 198
 880:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 882:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 884:	9c 93       	st	X, r25
		poslato=1;
 886:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <poslato>
		while (poslato);
 88a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <poslato>
 88e:	91 11       	cpse	r25, r1
 890:	fc cf       	rjmp	.-8      	; 0x88a <send_str+0x16>
void send_str(char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 892:	91 91       	ld	r25, Z+
 894:	91 11       	cpse	r25, r1
 896:	f6 cf       	rjmp	.-20     	; 0x884 <send_str+0x10>
 898:	08 95       	ret

0000089a <sprintf>:
 89a:	ae e0       	ldi	r26, 0x0E	; 14
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	e3 e5       	ldi	r30, 0x53	; 83
 8a0:	f4 e0       	ldi	r31, 0x04	; 4
 8a2:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__prologue_saves__+0x1c>
 8a6:	0d 89       	ldd	r16, Y+21	; 0x15
 8a8:	1e 89       	ldd	r17, Y+22	; 0x16
 8aa:	86 e0       	ldi	r24, 0x06	; 6
 8ac:	8c 83       	std	Y+4, r24	; 0x04
 8ae:	1a 83       	std	Y+2, r17	; 0x02
 8b0:	09 83       	std	Y+1, r16	; 0x01
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	9f e7       	ldi	r25, 0x7F	; 127
 8b6:	9e 83       	std	Y+6, r25	; 0x06
 8b8:	8d 83       	std	Y+5, r24	; 0x05
 8ba:	ae 01       	movw	r20, r28
 8bc:	47 5e       	subi	r20, 0xE7	; 231
 8be:	5f 4f       	sbci	r21, 0xFF	; 255
 8c0:	6f 89       	ldd	r22, Y+23	; 0x17
 8c2:	78 8d       	ldd	r23, Y+24	; 0x18
 8c4:	ce 01       	movw	r24, r28
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	0e 94 6f 04 	call	0x8de	; 0x8de <vfprintf>
 8cc:	ef 81       	ldd	r30, Y+7	; 0x07
 8ce:	f8 85       	ldd	r31, Y+8	; 0x08
 8d0:	e0 0f       	add	r30, r16
 8d2:	f1 1f       	adc	r31, r17
 8d4:	10 82       	st	Z, r1
 8d6:	2e 96       	adiw	r28, 0x0e	; 14
 8d8:	e4 e0       	ldi	r30, 0x04	; 4
 8da:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__epilogue_restores__+0x1c>

000008de <vfprintf>:
 8de:	ab e0       	ldi	r26, 0x0B	; 11
 8e0:	b0 e0       	ldi	r27, 0x00	; 0
 8e2:	e5 e7       	ldi	r30, 0x75	; 117
 8e4:	f4 e0       	ldi	r31, 0x04	; 4
 8e6:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__prologue_saves__>
 8ea:	6c 01       	movw	r12, r24
 8ec:	7b 01       	movw	r14, r22
 8ee:	8a 01       	movw	r16, r20
 8f0:	fc 01       	movw	r30, r24
 8f2:	17 82       	std	Z+7, r1	; 0x07
 8f4:	16 82       	std	Z+6, r1	; 0x06
 8f6:	83 81       	ldd	r24, Z+3	; 0x03
 8f8:	81 ff       	sbrs	r24, 1
 8fa:	cc c1       	rjmp	.+920    	; 0xc94 <__stack+0x395>
 8fc:	ce 01       	movw	r24, r28
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	3c 01       	movw	r6, r24
 902:	f6 01       	movw	r30, r12
 904:	93 81       	ldd	r25, Z+3	; 0x03
 906:	f7 01       	movw	r30, r14
 908:	93 fd       	sbrc	r25, 3
 90a:	85 91       	lpm	r24, Z+
 90c:	93 ff       	sbrs	r25, 3
 90e:	81 91       	ld	r24, Z+
 910:	7f 01       	movw	r14, r30
 912:	88 23       	and	r24, r24
 914:	09 f4       	brne	.+2      	; 0x918 <__stack+0x19>
 916:	ba c1       	rjmp	.+884    	; 0xc8c <__stack+0x38d>
 918:	85 32       	cpi	r24, 0x25	; 37
 91a:	39 f4       	brne	.+14     	; 0x92a <__stack+0x2b>
 91c:	93 fd       	sbrc	r25, 3
 91e:	85 91       	lpm	r24, Z+
 920:	93 ff       	sbrs	r25, 3
 922:	81 91       	ld	r24, Z+
 924:	7f 01       	movw	r14, r30
 926:	85 32       	cpi	r24, 0x25	; 37
 928:	29 f4       	brne	.+10     	; 0x934 <__stack+0x35>
 92a:	b6 01       	movw	r22, r12
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 932:	e7 cf       	rjmp	.-50     	; 0x902 <__stack+0x3>
 934:	91 2c       	mov	r9, r1
 936:	21 2c       	mov	r2, r1
 938:	31 2c       	mov	r3, r1
 93a:	ff e1       	ldi	r31, 0x1F	; 31
 93c:	f3 15       	cp	r31, r3
 93e:	d8 f0       	brcs	.+54     	; 0x976 <__stack+0x77>
 940:	8b 32       	cpi	r24, 0x2B	; 43
 942:	79 f0       	breq	.+30     	; 0x962 <__stack+0x63>
 944:	38 f4       	brcc	.+14     	; 0x954 <__stack+0x55>
 946:	80 32       	cpi	r24, 0x20	; 32
 948:	79 f0       	breq	.+30     	; 0x968 <__stack+0x69>
 94a:	83 32       	cpi	r24, 0x23	; 35
 94c:	a1 f4       	brne	.+40     	; 0x976 <__stack+0x77>
 94e:	23 2d       	mov	r18, r3
 950:	20 61       	ori	r18, 0x10	; 16
 952:	1d c0       	rjmp	.+58     	; 0x98e <__stack+0x8f>
 954:	8d 32       	cpi	r24, 0x2D	; 45
 956:	61 f0       	breq	.+24     	; 0x970 <__stack+0x71>
 958:	80 33       	cpi	r24, 0x30	; 48
 95a:	69 f4       	brne	.+26     	; 0x976 <__stack+0x77>
 95c:	23 2d       	mov	r18, r3
 95e:	21 60       	ori	r18, 0x01	; 1
 960:	16 c0       	rjmp	.+44     	; 0x98e <__stack+0x8f>
 962:	83 2d       	mov	r24, r3
 964:	82 60       	ori	r24, 0x02	; 2
 966:	38 2e       	mov	r3, r24
 968:	e3 2d       	mov	r30, r3
 96a:	e4 60       	ori	r30, 0x04	; 4
 96c:	3e 2e       	mov	r3, r30
 96e:	2a c0       	rjmp	.+84     	; 0x9c4 <__stack+0xc5>
 970:	f3 2d       	mov	r31, r3
 972:	f8 60       	ori	r31, 0x08	; 8
 974:	1d c0       	rjmp	.+58     	; 0x9b0 <__stack+0xb1>
 976:	37 fc       	sbrc	r3, 7
 978:	2d c0       	rjmp	.+90     	; 0x9d4 <__stack+0xd5>
 97a:	20 ed       	ldi	r18, 0xD0	; 208
 97c:	28 0f       	add	r18, r24
 97e:	2a 30       	cpi	r18, 0x0A	; 10
 980:	40 f0       	brcs	.+16     	; 0x992 <__stack+0x93>
 982:	8e 32       	cpi	r24, 0x2E	; 46
 984:	b9 f4       	brne	.+46     	; 0x9b4 <__stack+0xb5>
 986:	36 fc       	sbrc	r3, 6
 988:	81 c1       	rjmp	.+770    	; 0xc8c <__stack+0x38d>
 98a:	23 2d       	mov	r18, r3
 98c:	20 64       	ori	r18, 0x40	; 64
 98e:	32 2e       	mov	r3, r18
 990:	19 c0       	rjmp	.+50     	; 0x9c4 <__stack+0xc5>
 992:	36 fe       	sbrs	r3, 6
 994:	06 c0       	rjmp	.+12     	; 0x9a2 <__stack+0xa3>
 996:	8a e0       	ldi	r24, 0x0A	; 10
 998:	98 9e       	mul	r9, r24
 99a:	20 0d       	add	r18, r0
 99c:	11 24       	eor	r1, r1
 99e:	92 2e       	mov	r9, r18
 9a0:	11 c0       	rjmp	.+34     	; 0x9c4 <__stack+0xc5>
 9a2:	ea e0       	ldi	r30, 0x0A	; 10
 9a4:	2e 9e       	mul	r2, r30
 9a6:	20 0d       	add	r18, r0
 9a8:	11 24       	eor	r1, r1
 9aa:	22 2e       	mov	r2, r18
 9ac:	f3 2d       	mov	r31, r3
 9ae:	f0 62       	ori	r31, 0x20	; 32
 9b0:	3f 2e       	mov	r3, r31
 9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <__stack+0xc5>
 9b4:	8c 36       	cpi	r24, 0x6C	; 108
 9b6:	21 f4       	brne	.+8      	; 0x9c0 <__stack+0xc1>
 9b8:	83 2d       	mov	r24, r3
 9ba:	80 68       	ori	r24, 0x80	; 128
 9bc:	38 2e       	mov	r3, r24
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__stack+0xc5>
 9c0:	88 36       	cpi	r24, 0x68	; 104
 9c2:	41 f4       	brne	.+16     	; 0x9d4 <__stack+0xd5>
 9c4:	f7 01       	movw	r30, r14
 9c6:	93 fd       	sbrc	r25, 3
 9c8:	85 91       	lpm	r24, Z+
 9ca:	93 ff       	sbrs	r25, 3
 9cc:	81 91       	ld	r24, Z+
 9ce:	7f 01       	movw	r14, r30
 9d0:	81 11       	cpse	r24, r1
 9d2:	b3 cf       	rjmp	.-154    	; 0x93a <__stack+0x3b>
 9d4:	98 2f       	mov	r25, r24
 9d6:	9f 7d       	andi	r25, 0xDF	; 223
 9d8:	95 54       	subi	r25, 0x45	; 69
 9da:	93 30       	cpi	r25, 0x03	; 3
 9dc:	28 f4       	brcc	.+10     	; 0x9e8 <__stack+0xe9>
 9de:	0c 5f       	subi	r16, 0xFC	; 252
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	9f e3       	ldi	r25, 0x3F	; 63
 9e4:	99 83       	std	Y+1, r25	; 0x01
 9e6:	0d c0       	rjmp	.+26     	; 0xa02 <__stack+0x103>
 9e8:	83 36       	cpi	r24, 0x63	; 99
 9ea:	31 f0       	breq	.+12     	; 0x9f8 <__stack+0xf9>
 9ec:	83 37       	cpi	r24, 0x73	; 115
 9ee:	71 f0       	breq	.+28     	; 0xa0c <__stack+0x10d>
 9f0:	83 35       	cpi	r24, 0x53	; 83
 9f2:	09 f0       	breq	.+2      	; 0x9f6 <__stack+0xf7>
 9f4:	59 c0       	rjmp	.+178    	; 0xaa8 <__stack+0x1a9>
 9f6:	21 c0       	rjmp	.+66     	; 0xa3a <__stack+0x13b>
 9f8:	f8 01       	movw	r30, r16
 9fa:	80 81       	ld	r24, Z
 9fc:	89 83       	std	Y+1, r24	; 0x01
 9fe:	0e 5f       	subi	r16, 0xFE	; 254
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	88 24       	eor	r8, r8
 a04:	83 94       	inc	r8
 a06:	91 2c       	mov	r9, r1
 a08:	53 01       	movw	r10, r6
 a0a:	13 c0       	rjmp	.+38     	; 0xa32 <__stack+0x133>
 a0c:	28 01       	movw	r4, r16
 a0e:	f2 e0       	ldi	r31, 0x02	; 2
 a10:	4f 0e       	add	r4, r31
 a12:	51 1c       	adc	r5, r1
 a14:	f8 01       	movw	r30, r16
 a16:	a0 80       	ld	r10, Z
 a18:	b1 80       	ldd	r11, Z+1	; 0x01
 a1a:	36 fe       	sbrs	r3, 6
 a1c:	03 c0       	rjmp	.+6      	; 0xa24 <__stack+0x125>
 a1e:	69 2d       	mov	r22, r9
 a20:	70 e0       	ldi	r23, 0x00	; 0
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <__stack+0x129>
 a24:	6f ef       	ldi	r22, 0xFF	; 255
 a26:	7f ef       	ldi	r23, 0xFF	; 255
 a28:	c5 01       	movw	r24, r10
 a2a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <strnlen>
 a2e:	4c 01       	movw	r8, r24
 a30:	82 01       	movw	r16, r4
 a32:	f3 2d       	mov	r31, r3
 a34:	ff 77       	andi	r31, 0x7F	; 127
 a36:	3f 2e       	mov	r3, r31
 a38:	16 c0       	rjmp	.+44     	; 0xa66 <__stack+0x167>
 a3a:	28 01       	movw	r4, r16
 a3c:	22 e0       	ldi	r18, 0x02	; 2
 a3e:	42 0e       	add	r4, r18
 a40:	51 1c       	adc	r5, r1
 a42:	f8 01       	movw	r30, r16
 a44:	a0 80       	ld	r10, Z
 a46:	b1 80       	ldd	r11, Z+1	; 0x01
 a48:	36 fe       	sbrs	r3, 6
 a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__stack+0x153>
 a4c:	69 2d       	mov	r22, r9
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <__stack+0x157>
 a52:	6f ef       	ldi	r22, 0xFF	; 255
 a54:	7f ef       	ldi	r23, 0xFF	; 255
 a56:	c5 01       	movw	r24, r10
 a58:	0e 94 50 06 	call	0xca0	; 0xca0 <strnlen_P>
 a5c:	4c 01       	movw	r8, r24
 a5e:	f3 2d       	mov	r31, r3
 a60:	f0 68       	ori	r31, 0x80	; 128
 a62:	3f 2e       	mov	r3, r31
 a64:	82 01       	movw	r16, r4
 a66:	33 fc       	sbrc	r3, 3
 a68:	1b c0       	rjmp	.+54     	; 0xaa0 <__stack+0x1a1>
 a6a:	82 2d       	mov	r24, r2
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	88 16       	cp	r8, r24
 a70:	99 06       	cpc	r9, r25
 a72:	b0 f4       	brcc	.+44     	; 0xaa0 <__stack+0x1a1>
 a74:	b6 01       	movw	r22, r12
 a76:	80 e2       	ldi	r24, 0x20	; 32
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 a7e:	2a 94       	dec	r2
 a80:	f4 cf       	rjmp	.-24     	; 0xa6a <__stack+0x16b>
 a82:	f5 01       	movw	r30, r10
 a84:	37 fc       	sbrc	r3, 7
 a86:	85 91       	lpm	r24, Z+
 a88:	37 fe       	sbrs	r3, 7
 a8a:	81 91       	ld	r24, Z+
 a8c:	5f 01       	movw	r10, r30
 a8e:	b6 01       	movw	r22, r12
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 a96:	21 10       	cpse	r2, r1
 a98:	2a 94       	dec	r2
 a9a:	21 e0       	ldi	r18, 0x01	; 1
 a9c:	82 1a       	sub	r8, r18
 a9e:	91 08       	sbc	r9, r1
 aa0:	81 14       	cp	r8, r1
 aa2:	91 04       	cpc	r9, r1
 aa4:	71 f7       	brne	.-36     	; 0xa82 <__stack+0x183>
 aa6:	e8 c0       	rjmp	.+464    	; 0xc78 <__stack+0x379>
 aa8:	84 36       	cpi	r24, 0x64	; 100
 aaa:	11 f0       	breq	.+4      	; 0xab0 <__stack+0x1b1>
 aac:	89 36       	cpi	r24, 0x69	; 105
 aae:	41 f5       	brne	.+80     	; 0xb00 <__stack+0x201>
 ab0:	f8 01       	movw	r30, r16
 ab2:	37 fe       	sbrs	r3, 7
 ab4:	07 c0       	rjmp	.+14     	; 0xac4 <__stack+0x1c5>
 ab6:	60 81       	ld	r22, Z
 ab8:	71 81       	ldd	r23, Z+1	; 0x01
 aba:	82 81       	ldd	r24, Z+2	; 0x02
 abc:	93 81       	ldd	r25, Z+3	; 0x03
 abe:	0c 5f       	subi	r16, 0xFC	; 252
 ac0:	1f 4f       	sbci	r17, 0xFF	; 255
 ac2:	08 c0       	rjmp	.+16     	; 0xad4 <__stack+0x1d5>
 ac4:	60 81       	ld	r22, Z
 ac6:	71 81       	ldd	r23, Z+1	; 0x01
 ac8:	07 2e       	mov	r0, r23
 aca:	00 0c       	add	r0, r0
 acc:	88 0b       	sbc	r24, r24
 ace:	99 0b       	sbc	r25, r25
 ad0:	0e 5f       	subi	r16, 0xFE	; 254
 ad2:	1f 4f       	sbci	r17, 0xFF	; 255
 ad4:	f3 2d       	mov	r31, r3
 ad6:	ff 76       	andi	r31, 0x6F	; 111
 ad8:	3f 2e       	mov	r3, r31
 ada:	97 ff       	sbrs	r25, 7
 adc:	09 c0       	rjmp	.+18     	; 0xaf0 <__stack+0x1f1>
 ade:	90 95       	com	r25
 ae0:	80 95       	com	r24
 ae2:	70 95       	com	r23
 ae4:	61 95       	neg	r22
 ae6:	7f 4f       	sbci	r23, 0xFF	; 255
 ae8:	8f 4f       	sbci	r24, 0xFF	; 255
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	f0 68       	ori	r31, 0x80	; 128
 aee:	3f 2e       	mov	r3, r31
 af0:	2a e0       	ldi	r18, 0x0A	; 10
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	a3 01       	movw	r20, r6
 af6:	0e 94 a2 06 	call	0xd44	; 0xd44 <__ultoa_invert>
 afa:	88 2e       	mov	r8, r24
 afc:	86 18       	sub	r8, r6
 afe:	45 c0       	rjmp	.+138    	; 0xb8a <__stack+0x28b>
 b00:	85 37       	cpi	r24, 0x75	; 117
 b02:	31 f4       	brne	.+12     	; 0xb10 <__stack+0x211>
 b04:	23 2d       	mov	r18, r3
 b06:	2f 7e       	andi	r18, 0xEF	; 239
 b08:	b2 2e       	mov	r11, r18
 b0a:	2a e0       	ldi	r18, 0x0A	; 10
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	25 c0       	rjmp	.+74     	; 0xb5a <__stack+0x25b>
 b10:	93 2d       	mov	r25, r3
 b12:	99 7f       	andi	r25, 0xF9	; 249
 b14:	b9 2e       	mov	r11, r25
 b16:	8f 36       	cpi	r24, 0x6F	; 111
 b18:	c1 f0       	breq	.+48     	; 0xb4a <__stack+0x24b>
 b1a:	18 f4       	brcc	.+6      	; 0xb22 <__stack+0x223>
 b1c:	88 35       	cpi	r24, 0x58	; 88
 b1e:	79 f0       	breq	.+30     	; 0xb3e <__stack+0x23f>
 b20:	b5 c0       	rjmp	.+362    	; 0xc8c <__stack+0x38d>
 b22:	80 37       	cpi	r24, 0x70	; 112
 b24:	19 f0       	breq	.+6      	; 0xb2c <__stack+0x22d>
 b26:	88 37       	cpi	r24, 0x78	; 120
 b28:	21 f0       	breq	.+8      	; 0xb32 <__stack+0x233>
 b2a:	b0 c0       	rjmp	.+352    	; 0xc8c <__stack+0x38d>
 b2c:	e9 2f       	mov	r30, r25
 b2e:	e0 61       	ori	r30, 0x10	; 16
 b30:	be 2e       	mov	r11, r30
 b32:	b4 fe       	sbrs	r11, 4
 b34:	0d c0       	rjmp	.+26     	; 0xb50 <__stack+0x251>
 b36:	fb 2d       	mov	r31, r11
 b38:	f4 60       	ori	r31, 0x04	; 4
 b3a:	bf 2e       	mov	r11, r31
 b3c:	09 c0       	rjmp	.+18     	; 0xb50 <__stack+0x251>
 b3e:	34 fe       	sbrs	r3, 4
 b40:	0a c0       	rjmp	.+20     	; 0xb56 <__stack+0x257>
 b42:	29 2f       	mov	r18, r25
 b44:	26 60       	ori	r18, 0x06	; 6
 b46:	b2 2e       	mov	r11, r18
 b48:	06 c0       	rjmp	.+12     	; 0xb56 <__stack+0x257>
 b4a:	28 e0       	ldi	r18, 0x08	; 8
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	05 c0       	rjmp	.+10     	; 0xb5a <__stack+0x25b>
 b50:	20 e1       	ldi	r18, 0x10	; 16
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <__stack+0x25b>
 b56:	20 e1       	ldi	r18, 0x10	; 16
 b58:	32 e0       	ldi	r19, 0x02	; 2
 b5a:	f8 01       	movw	r30, r16
 b5c:	b7 fe       	sbrs	r11, 7
 b5e:	07 c0       	rjmp	.+14     	; 0xb6e <__stack+0x26f>
 b60:	60 81       	ld	r22, Z
 b62:	71 81       	ldd	r23, Z+1	; 0x01
 b64:	82 81       	ldd	r24, Z+2	; 0x02
 b66:	93 81       	ldd	r25, Z+3	; 0x03
 b68:	0c 5f       	subi	r16, 0xFC	; 252
 b6a:	1f 4f       	sbci	r17, 0xFF	; 255
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <__stack+0x27b>
 b6e:	60 81       	ld	r22, Z
 b70:	71 81       	ldd	r23, Z+1	; 0x01
 b72:	80 e0       	ldi	r24, 0x00	; 0
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	0e 5f       	subi	r16, 0xFE	; 254
 b78:	1f 4f       	sbci	r17, 0xFF	; 255
 b7a:	a3 01       	movw	r20, r6
 b7c:	0e 94 a2 06 	call	0xd44	; 0xd44 <__ultoa_invert>
 b80:	88 2e       	mov	r8, r24
 b82:	86 18       	sub	r8, r6
 b84:	fb 2d       	mov	r31, r11
 b86:	ff 77       	andi	r31, 0x7F	; 127
 b88:	3f 2e       	mov	r3, r31
 b8a:	36 fe       	sbrs	r3, 6
 b8c:	0d c0       	rjmp	.+26     	; 0xba8 <__stack+0x2a9>
 b8e:	23 2d       	mov	r18, r3
 b90:	2e 7f       	andi	r18, 0xFE	; 254
 b92:	a2 2e       	mov	r10, r18
 b94:	89 14       	cp	r8, r9
 b96:	58 f4       	brcc	.+22     	; 0xbae <__stack+0x2af>
 b98:	34 fe       	sbrs	r3, 4
 b9a:	0b c0       	rjmp	.+22     	; 0xbb2 <__stack+0x2b3>
 b9c:	32 fc       	sbrc	r3, 2
 b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <__stack+0x2b3>
 ba0:	83 2d       	mov	r24, r3
 ba2:	8e 7e       	andi	r24, 0xEE	; 238
 ba4:	a8 2e       	mov	r10, r24
 ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <__stack+0x2b3>
 ba8:	b8 2c       	mov	r11, r8
 baa:	a3 2c       	mov	r10, r3
 bac:	03 c0       	rjmp	.+6      	; 0xbb4 <__stack+0x2b5>
 bae:	b8 2c       	mov	r11, r8
 bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <__stack+0x2b5>
 bb2:	b9 2c       	mov	r11, r9
 bb4:	a4 fe       	sbrs	r10, 4
 bb6:	0f c0       	rjmp	.+30     	; 0xbd6 <__stack+0x2d7>
 bb8:	fe 01       	movw	r30, r28
 bba:	e8 0d       	add	r30, r8
 bbc:	f1 1d       	adc	r31, r1
 bbe:	80 81       	ld	r24, Z
 bc0:	80 33       	cpi	r24, 0x30	; 48
 bc2:	21 f4       	brne	.+8      	; 0xbcc <__stack+0x2cd>
 bc4:	9a 2d       	mov	r25, r10
 bc6:	99 7e       	andi	r25, 0xE9	; 233
 bc8:	a9 2e       	mov	r10, r25
 bca:	09 c0       	rjmp	.+18     	; 0xbde <__stack+0x2df>
 bcc:	a2 fe       	sbrs	r10, 2
 bce:	06 c0       	rjmp	.+12     	; 0xbdc <__stack+0x2dd>
 bd0:	b3 94       	inc	r11
 bd2:	b3 94       	inc	r11
 bd4:	04 c0       	rjmp	.+8      	; 0xbde <__stack+0x2df>
 bd6:	8a 2d       	mov	r24, r10
 bd8:	86 78       	andi	r24, 0x86	; 134
 bda:	09 f0       	breq	.+2      	; 0xbde <__stack+0x2df>
 bdc:	b3 94       	inc	r11
 bde:	a3 fc       	sbrc	r10, 3
 be0:	11 c0       	rjmp	.+34     	; 0xc04 <__stack+0x305>
 be2:	a0 fe       	sbrs	r10, 0
 be4:	06 c0       	rjmp	.+12     	; 0xbf2 <__stack+0x2f3>
 be6:	b2 14       	cp	r11, r2
 be8:	88 f4       	brcc	.+34     	; 0xc0c <__stack+0x30d>
 bea:	28 0c       	add	r2, r8
 bec:	92 2c       	mov	r9, r2
 bee:	9b 18       	sub	r9, r11
 bf0:	0e c0       	rjmp	.+28     	; 0xc0e <__stack+0x30f>
 bf2:	b2 14       	cp	r11, r2
 bf4:	60 f4       	brcc	.+24     	; 0xc0e <__stack+0x30f>
 bf6:	b6 01       	movw	r22, r12
 bf8:	80 e2       	ldi	r24, 0x20	; 32
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c00:	b3 94       	inc	r11
 c02:	f7 cf       	rjmp	.-18     	; 0xbf2 <__stack+0x2f3>
 c04:	b2 14       	cp	r11, r2
 c06:	18 f4       	brcc	.+6      	; 0xc0e <__stack+0x30f>
 c08:	2b 18       	sub	r2, r11
 c0a:	02 c0       	rjmp	.+4      	; 0xc10 <__stack+0x311>
 c0c:	98 2c       	mov	r9, r8
 c0e:	21 2c       	mov	r2, r1
 c10:	a4 fe       	sbrs	r10, 4
 c12:	10 c0       	rjmp	.+32     	; 0xc34 <__stack+0x335>
 c14:	b6 01       	movw	r22, r12
 c16:	80 e3       	ldi	r24, 0x30	; 48
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c1e:	a2 fe       	sbrs	r10, 2
 c20:	17 c0       	rjmp	.+46     	; 0xc50 <__stack+0x351>
 c22:	a1 fc       	sbrc	r10, 1
 c24:	03 c0       	rjmp	.+6      	; 0xc2c <__stack+0x32d>
 c26:	88 e7       	ldi	r24, 0x78	; 120
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <__stack+0x331>
 c2c:	88 e5       	ldi	r24, 0x58	; 88
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	b6 01       	movw	r22, r12
 c32:	0c c0       	rjmp	.+24     	; 0xc4c <__stack+0x34d>
 c34:	8a 2d       	mov	r24, r10
 c36:	86 78       	andi	r24, 0x86	; 134
 c38:	59 f0       	breq	.+22     	; 0xc50 <__stack+0x351>
 c3a:	a1 fe       	sbrs	r10, 1
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <__stack+0x343>
 c3e:	8b e2       	ldi	r24, 0x2B	; 43
 c40:	01 c0       	rjmp	.+2      	; 0xc44 <__stack+0x345>
 c42:	80 e2       	ldi	r24, 0x20	; 32
 c44:	a7 fc       	sbrc	r10, 7
 c46:	8d e2       	ldi	r24, 0x2D	; 45
 c48:	b6 01       	movw	r22, r12
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c50:	89 14       	cp	r8, r9
 c52:	38 f4       	brcc	.+14     	; 0xc62 <__stack+0x363>
 c54:	b6 01       	movw	r22, r12
 c56:	80 e3       	ldi	r24, 0x30	; 48
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c5e:	9a 94       	dec	r9
 c60:	f7 cf       	rjmp	.-18     	; 0xc50 <__stack+0x351>
 c62:	8a 94       	dec	r8
 c64:	f3 01       	movw	r30, r6
 c66:	e8 0d       	add	r30, r8
 c68:	f1 1d       	adc	r31, r1
 c6a:	80 81       	ld	r24, Z
 c6c:	b6 01       	movw	r22, r12
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c74:	81 10       	cpse	r8, r1
 c76:	f5 cf       	rjmp	.-22     	; 0xc62 <__stack+0x363>
 c78:	22 20       	and	r2, r2
 c7a:	09 f4       	brne	.+2      	; 0xc7e <__stack+0x37f>
 c7c:	42 ce       	rjmp	.-892    	; 0x902 <__stack+0x3>
 c7e:	b6 01       	movw	r22, r12
 c80:	80 e2       	ldi	r24, 0x20	; 32
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c88:	2a 94       	dec	r2
 c8a:	f6 cf       	rjmp	.-20     	; 0xc78 <__stack+0x379>
 c8c:	f6 01       	movw	r30, r12
 c8e:	86 81       	ldd	r24, Z+6	; 0x06
 c90:	97 81       	ldd	r25, Z+7	; 0x07
 c92:	02 c0       	rjmp	.+4      	; 0xc98 <__stack+0x399>
 c94:	8f ef       	ldi	r24, 0xFF	; 255
 c96:	9f ef       	ldi	r25, 0xFF	; 255
 c98:	2b 96       	adiw	r28, 0x0b	; 11
 c9a:	e2 e1       	ldi	r30, 0x12	; 18
 c9c:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__epilogue_restores__>

00000ca0 <strnlen_P>:
 ca0:	fc 01       	movw	r30, r24
 ca2:	05 90       	lpm	r0, Z+
 ca4:	61 50       	subi	r22, 0x01	; 1
 ca6:	70 40       	sbci	r23, 0x00	; 0
 ca8:	01 10       	cpse	r0, r1
 caa:	d8 f7       	brcc	.-10     	; 0xca2 <strnlen_P+0x2>
 cac:	80 95       	com	r24
 cae:	90 95       	com	r25
 cb0:	8e 0f       	add	r24, r30
 cb2:	9f 1f       	adc	r25, r31
 cb4:	08 95       	ret

00000cb6 <strnlen>:
 cb6:	fc 01       	movw	r30, r24
 cb8:	61 50       	subi	r22, 0x01	; 1
 cba:	70 40       	sbci	r23, 0x00	; 0
 cbc:	01 90       	ld	r0, Z+
 cbe:	01 10       	cpse	r0, r1
 cc0:	d8 f7       	brcc	.-10     	; 0xcb8 <strnlen+0x2>
 cc2:	80 95       	com	r24
 cc4:	90 95       	com	r25
 cc6:	8e 0f       	add	r24, r30
 cc8:	9f 1f       	adc	r25, r31
 cca:	08 95       	ret

00000ccc <fputc>:
 ccc:	0f 93       	push	r16
 cce:	1f 93       	push	r17
 cd0:	cf 93       	push	r28
 cd2:	df 93       	push	r29
 cd4:	fb 01       	movw	r30, r22
 cd6:	23 81       	ldd	r18, Z+3	; 0x03
 cd8:	21 fd       	sbrc	r18, 1
 cda:	03 c0       	rjmp	.+6      	; 0xce2 <fputc+0x16>
 cdc:	8f ef       	ldi	r24, 0xFF	; 255
 cde:	9f ef       	ldi	r25, 0xFF	; 255
 ce0:	2c c0       	rjmp	.+88     	; 0xd3a <fputc+0x6e>
 ce2:	22 ff       	sbrs	r18, 2
 ce4:	16 c0       	rjmp	.+44     	; 0xd12 <fputc+0x46>
 ce6:	46 81       	ldd	r20, Z+6	; 0x06
 ce8:	57 81       	ldd	r21, Z+7	; 0x07
 cea:	24 81       	ldd	r18, Z+4	; 0x04
 cec:	35 81       	ldd	r19, Z+5	; 0x05
 cee:	42 17       	cp	r20, r18
 cf0:	53 07       	cpc	r21, r19
 cf2:	44 f4       	brge	.+16     	; 0xd04 <fputc+0x38>
 cf4:	a0 81       	ld	r26, Z
 cf6:	b1 81       	ldd	r27, Z+1	; 0x01
 cf8:	9d 01       	movw	r18, r26
 cfa:	2f 5f       	subi	r18, 0xFF	; 255
 cfc:	3f 4f       	sbci	r19, 0xFF	; 255
 cfe:	31 83       	std	Z+1, r19	; 0x01
 d00:	20 83       	st	Z, r18
 d02:	8c 93       	st	X, r24
 d04:	26 81       	ldd	r18, Z+6	; 0x06
 d06:	37 81       	ldd	r19, Z+7	; 0x07
 d08:	2f 5f       	subi	r18, 0xFF	; 255
 d0a:	3f 4f       	sbci	r19, 0xFF	; 255
 d0c:	37 83       	std	Z+7, r19	; 0x07
 d0e:	26 83       	std	Z+6, r18	; 0x06
 d10:	14 c0       	rjmp	.+40     	; 0xd3a <fputc+0x6e>
 d12:	8b 01       	movw	r16, r22
 d14:	ec 01       	movw	r28, r24
 d16:	fb 01       	movw	r30, r22
 d18:	00 84       	ldd	r0, Z+8	; 0x08
 d1a:	f1 85       	ldd	r31, Z+9	; 0x09
 d1c:	e0 2d       	mov	r30, r0
 d1e:	09 95       	icall
 d20:	89 2b       	or	r24, r25
 d22:	e1 f6       	brne	.-72     	; 0xcdc <fputc+0x10>
 d24:	d8 01       	movw	r26, r16
 d26:	16 96       	adiw	r26, 0x06	; 6
 d28:	8d 91       	ld	r24, X+
 d2a:	9c 91       	ld	r25, X
 d2c:	17 97       	sbiw	r26, 0x07	; 7
 d2e:	01 96       	adiw	r24, 0x01	; 1
 d30:	17 96       	adiw	r26, 0x07	; 7
 d32:	9c 93       	st	X, r25
 d34:	8e 93       	st	-X, r24
 d36:	16 97       	sbiw	r26, 0x06	; 6
 d38:	ce 01       	movw	r24, r28
 d3a:	df 91       	pop	r29
 d3c:	cf 91       	pop	r28
 d3e:	1f 91       	pop	r17
 d40:	0f 91       	pop	r16
 d42:	08 95       	ret

00000d44 <__ultoa_invert>:
 d44:	fa 01       	movw	r30, r20
 d46:	aa 27       	eor	r26, r26
 d48:	28 30       	cpi	r18, 0x08	; 8
 d4a:	51 f1       	breq	.+84     	; 0xda0 <__ultoa_invert+0x5c>
 d4c:	20 31       	cpi	r18, 0x10	; 16
 d4e:	81 f1       	breq	.+96     	; 0xdb0 <__ultoa_invert+0x6c>
 d50:	e8 94       	clt
 d52:	6f 93       	push	r22
 d54:	6e 7f       	andi	r22, 0xFE	; 254
 d56:	6e 5f       	subi	r22, 0xFE	; 254
 d58:	7f 4f       	sbci	r23, 0xFF	; 255
 d5a:	8f 4f       	sbci	r24, 0xFF	; 255
 d5c:	9f 4f       	sbci	r25, 0xFF	; 255
 d5e:	af 4f       	sbci	r26, 0xFF	; 255
 d60:	b1 e0       	ldi	r27, 0x01	; 1
 d62:	3e d0       	rcall	.+124    	; 0xde0 <__ultoa_invert+0x9c>
 d64:	b4 e0       	ldi	r27, 0x04	; 4
 d66:	3c d0       	rcall	.+120    	; 0xde0 <__ultoa_invert+0x9c>
 d68:	67 0f       	add	r22, r23
 d6a:	78 1f       	adc	r23, r24
 d6c:	89 1f       	adc	r24, r25
 d6e:	9a 1f       	adc	r25, r26
 d70:	a1 1d       	adc	r26, r1
 d72:	68 0f       	add	r22, r24
 d74:	79 1f       	adc	r23, r25
 d76:	8a 1f       	adc	r24, r26
 d78:	91 1d       	adc	r25, r1
 d7a:	a1 1d       	adc	r26, r1
 d7c:	6a 0f       	add	r22, r26
 d7e:	71 1d       	adc	r23, r1
 d80:	81 1d       	adc	r24, r1
 d82:	91 1d       	adc	r25, r1
 d84:	a1 1d       	adc	r26, r1
 d86:	20 d0       	rcall	.+64     	; 0xdc8 <__ultoa_invert+0x84>
 d88:	09 f4       	brne	.+2      	; 0xd8c <__ultoa_invert+0x48>
 d8a:	68 94       	set
 d8c:	3f 91       	pop	r19
 d8e:	2a e0       	ldi	r18, 0x0A	; 10
 d90:	26 9f       	mul	r18, r22
 d92:	11 24       	eor	r1, r1
 d94:	30 19       	sub	r19, r0
 d96:	30 5d       	subi	r19, 0xD0	; 208
 d98:	31 93       	st	Z+, r19
 d9a:	de f6       	brtc	.-74     	; 0xd52 <__ultoa_invert+0xe>
 d9c:	cf 01       	movw	r24, r30
 d9e:	08 95       	ret
 da0:	46 2f       	mov	r20, r22
 da2:	47 70       	andi	r20, 0x07	; 7
 da4:	40 5d       	subi	r20, 0xD0	; 208
 da6:	41 93       	st	Z+, r20
 da8:	b3 e0       	ldi	r27, 0x03	; 3
 daa:	0f d0       	rcall	.+30     	; 0xdca <__ultoa_invert+0x86>
 dac:	c9 f7       	brne	.-14     	; 0xda0 <__ultoa_invert+0x5c>
 dae:	f6 cf       	rjmp	.-20     	; 0xd9c <__ultoa_invert+0x58>
 db0:	46 2f       	mov	r20, r22
 db2:	4f 70       	andi	r20, 0x0F	; 15
 db4:	40 5d       	subi	r20, 0xD0	; 208
 db6:	4a 33       	cpi	r20, 0x3A	; 58
 db8:	18 f0       	brcs	.+6      	; 0xdc0 <__ultoa_invert+0x7c>
 dba:	49 5d       	subi	r20, 0xD9	; 217
 dbc:	31 fd       	sbrc	r19, 1
 dbe:	40 52       	subi	r20, 0x20	; 32
 dc0:	41 93       	st	Z+, r20
 dc2:	02 d0       	rcall	.+4      	; 0xdc8 <__ultoa_invert+0x84>
 dc4:	a9 f7       	brne	.-22     	; 0xdb0 <__ultoa_invert+0x6c>
 dc6:	ea cf       	rjmp	.-44     	; 0xd9c <__ultoa_invert+0x58>
 dc8:	b4 e0       	ldi	r27, 0x04	; 4
 dca:	a6 95       	lsr	r26
 dcc:	97 95       	ror	r25
 dce:	87 95       	ror	r24
 dd0:	77 95       	ror	r23
 dd2:	67 95       	ror	r22
 dd4:	ba 95       	dec	r27
 dd6:	c9 f7       	brne	.-14     	; 0xdca <__ultoa_invert+0x86>
 dd8:	00 97       	sbiw	r24, 0x00	; 0
 dda:	61 05       	cpc	r22, r1
 ddc:	71 05       	cpc	r23, r1
 dde:	08 95       	ret
 de0:	9b 01       	movw	r18, r22
 de2:	ac 01       	movw	r20, r24
 de4:	0a 2e       	mov	r0, r26
 de6:	06 94       	lsr	r0
 de8:	57 95       	ror	r21
 dea:	47 95       	ror	r20
 dec:	37 95       	ror	r19
 dee:	27 95       	ror	r18
 df0:	ba 95       	dec	r27
 df2:	c9 f7       	brne	.-14     	; 0xde6 <__ultoa_invert+0xa2>
 df4:	62 0f       	add	r22, r18
 df6:	73 1f       	adc	r23, r19
 df8:	84 1f       	adc	r24, r20
 dfa:	95 1f       	adc	r25, r21
 dfc:	a0 1d       	adc	r26, r0
 dfe:	08 95       	ret

00000e00 <__prologue_saves__>:
 e00:	2f 92       	push	r2
 e02:	3f 92       	push	r3
 e04:	4f 92       	push	r4
 e06:	5f 92       	push	r5
 e08:	6f 92       	push	r6
 e0a:	7f 92       	push	r7
 e0c:	8f 92       	push	r8
 e0e:	9f 92       	push	r9
 e10:	af 92       	push	r10
 e12:	bf 92       	push	r11
 e14:	cf 92       	push	r12
 e16:	df 92       	push	r13
 e18:	ef 92       	push	r14
 e1a:	ff 92       	push	r15
 e1c:	0f 93       	push	r16
 e1e:	1f 93       	push	r17
 e20:	cf 93       	push	r28
 e22:	df 93       	push	r29
 e24:	cd b7       	in	r28, 0x3d	; 61
 e26:	de b7       	in	r29, 0x3e	; 62
 e28:	ca 1b       	sub	r28, r26
 e2a:	db 0b       	sbc	r29, r27
 e2c:	0f b6       	in	r0, 0x3f	; 63
 e2e:	f8 94       	cli
 e30:	de bf       	out	0x3e, r29	; 62
 e32:	0f be       	out	0x3f, r0	; 63
 e34:	cd bf       	out	0x3d, r28	; 61
 e36:	09 94       	ijmp

00000e38 <__epilogue_restores__>:
 e38:	2a 88       	ldd	r2, Y+18	; 0x12
 e3a:	39 88       	ldd	r3, Y+17	; 0x11
 e3c:	48 88       	ldd	r4, Y+16	; 0x10
 e3e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e40:	6e 84       	ldd	r6, Y+14	; 0x0e
 e42:	7d 84       	ldd	r7, Y+13	; 0x0d
 e44:	8c 84       	ldd	r8, Y+12	; 0x0c
 e46:	9b 84       	ldd	r9, Y+11	; 0x0b
 e48:	aa 84       	ldd	r10, Y+10	; 0x0a
 e4a:	b9 84       	ldd	r11, Y+9	; 0x09
 e4c:	c8 84       	ldd	r12, Y+8	; 0x08
 e4e:	df 80       	ldd	r13, Y+7	; 0x07
 e50:	ee 80       	ldd	r14, Y+6	; 0x06
 e52:	fd 80       	ldd	r15, Y+5	; 0x05
 e54:	0c 81       	ldd	r16, Y+4	; 0x04
 e56:	1b 81       	ldd	r17, Y+3	; 0x03
 e58:	aa 81       	ldd	r26, Y+2	; 0x02
 e5a:	b9 81       	ldd	r27, Y+1	; 0x01
 e5c:	ce 0f       	add	r28, r30
 e5e:	d1 1d       	adc	r29, r1
 e60:	0f b6       	in	r0, 0x3f	; 63
 e62:	f8 94       	cli
 e64:	de bf       	out	0x3e, r29	; 62
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	cd bf       	out	0x3d, r28	; 61
 e6a:	ed 01       	movw	r28, r26
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
