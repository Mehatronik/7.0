
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000011bc  00001250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b9  00800108  00800108  00001258  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001656  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd9  00000000  00000000  00002aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d52  00000000  00000000  00003683  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  000043d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  000046e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a36  00000000  00000000  00004d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_20>
      54:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec eb       	ldi	r30, 0xBC	; 188
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3c       	cpi	r26, 0xC1	; 193
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2c 03 	call	0x658	; 0x658 <main>
      9e:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <sumator>:
}



volatile void sumator()
{
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
	//radi sumu po kolonama matrice, tj po kanalu, izvlaci prosek i upisuje u odgovarajucu promenljivu
	volatile static uint8_t i=0;


	
	if (ad_kanal == 0) //ref_napon_sa_pot
      b2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ad_kanal>
      b6:	81 11       	cpse	r24, r1
      b8:	4d c0       	rjmp	.+154    	; 0x154 <sumator+0xae>
	{
		ref_napon_sa_pot = 0; //nuliram da ne bi uticalo na sumiranje i prosek i stvarne vrednosti
      ba:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ref_napon_sa_pot+0x1>
      be:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ref_napon_sa_pot>
		
		for (i=0; i<BR_SEMPLOVA; i++)
      c2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
      c6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
      ca:	84 31       	cpi	r24, 0x14	; 20
      cc:	18 f5       	brcc	.+70     	; 0x114 <sumator+0x6e>
		{
			ref_napon_sa_pot += adc_res[ad_kanal][i];		//suma po nultoj koloni (nultom kanalu)
      ce:	44 e1       	ldi	r20, 0x14	; 20
      d0:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <ad_kanal>
      d4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
      d8:	4e 9f       	mul	r20, r30
      da:	f0 01       	movw	r30, r0
      dc:	11 24       	eor	r1, r1
      de:	e8 0f       	add	r30, r24
      e0:	f1 1d       	adc	r31, r1
      e2:	ee 0f       	add	r30, r30
      e4:	ff 1f       	adc	r31, r31
      e6:	ef 5e       	subi	r30, 0xEF	; 239
      e8:	fe 4f       	sbci	r31, 0xFE	; 254
      ea:	20 81       	ld	r18, Z
      ec:	31 81       	ldd	r19, Z+1	; 0x01
      ee:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ref_napon_sa_pot>
      f2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ref_napon_sa_pot+0x1>
      f6:	82 0f       	add	r24, r18
      f8:	93 1f       	adc	r25, r19
      fa:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <ref_napon_sa_pot+0x1>
      fe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ref_napon_sa_pot>
	
	if (ad_kanal == 0) //ref_napon_sa_pot
	{
		ref_napon_sa_pot = 0; //nuliram da ne bi uticalo na sumiranje i prosek i stvarne vrednosti
		
		for (i=0; i<BR_SEMPLOVA; i++)
     102:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     106:	8f 5f       	subi	r24, 0xFF	; 255
     108:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     10c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     110:	84 31       	cpi	r24, 0x14	; 20
     112:	f0 f2       	brcs	.-68     	; 0xd0 <sumator+0x2a>
		{
			ref_napon_sa_pot += adc_res[ad_kanal][i];		//suma po nultoj koloni (nultom kanalu)
		}
		ref_napon_sa_pot = (ref_napon_sa_pot/BR_SEMPLOVA) * 19.613;  //1023 = 20000 mV
     114:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <ref_napon_sa_pot>
     118:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <ref_napon_sa_pot+0x1>
     11c:	ad ec       	ldi	r26, 0xCD	; 205
     11e:	bc ec       	ldi	r27, 0xCC	; 204
     120:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__umulhisi3>
     124:	92 95       	swap	r25
     126:	82 95       	swap	r24
     128:	8f 70       	andi	r24, 0x0F	; 15
     12a:	89 27       	eor	r24, r25
     12c:	9f 70       	andi	r25, 0x0F	; 15
     12e:	89 27       	eor	r24, r25
     130:	bc 01       	movw	r22, r24
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 c0 04 	call	0x980	; 0x980 <__floatunsisf>
     13a:	2d e6       	ldi	r18, 0x6D	; 109
     13c:	37 ee       	ldi	r19, 0xE7	; 231
     13e:	4c e9       	ldi	r20, 0x9C	; 156
     140:	51 e4       	ldi	r21, 0x41	; 65
     142:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__mulsf3>
     146:	0e 94 91 04 	call	0x922	; 0x922 <__fixunssfsi>
     14a:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <ref_napon_sa_pot+0x1>
     14e:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <ref_napon_sa_pot>
     152:	b5 c0       	rjmp	.+362    	; 0x2be <sumator+0x218>
		
		//ref_napon_sa_pot = 9000; //za potrebe debagovanja
	}
	else if (ad_kanal == 1)	//merena struja
     154:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ad_kanal>
     158:	81 30       	cpi	r24, 0x01	; 1
     15a:	09 f0       	breq	.+2      	; 0x15e <sumator+0xb8>
     15c:	4d c0       	rjmp	.+154    	; 0x1f8 <sumator+0x152>
	{
		merena_struja = 0;
     15e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <merena_struja+0x1>
     162:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <merena_struja>
		
		for (i=0; i<BR_SEMPLOVA; i++)
     166:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     16a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     16e:	84 31       	cpi	r24, 0x14	; 20
     170:	18 f5       	brcc	.+70     	; 0x1b8 <sumator+0x112>
		{
			merena_struja += adc_res[ad_kanal][i];
     172:	44 e1       	ldi	r20, 0x14	; 20
     174:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <ad_kanal>
     178:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     17c:	4e 9f       	mul	r20, r30
     17e:	f0 01       	movw	r30, r0
     180:	11 24       	eor	r1, r1
     182:	e8 0f       	add	r30, r24
     184:	f1 1d       	adc	r31, r1
     186:	ee 0f       	add	r30, r30
     188:	ff 1f       	adc	r31, r31
     18a:	ef 5e       	subi	r30, 0xEF	; 239
     18c:	fe 4f       	sbci	r31, 0xFE	; 254
     18e:	20 81       	ld	r18, Z
     190:	31 81       	ldd	r19, Z+1	; 0x01
     192:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <merena_struja>
     196:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <merena_struja+0x1>
     19a:	82 0f       	add	r24, r18
     19c:	93 1f       	adc	r25, r19
     19e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <merena_struja+0x1>
     1a2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <merena_struja>
	}
	else if (ad_kanal == 1)	//merena struja
	{
		merena_struja = 0;
		
		for (i=0; i<BR_SEMPLOVA; i++)
     1a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     1aa:	8f 5f       	subi	r24, 0xFF	; 255
     1ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     1b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     1b4:	84 31       	cpi	r24, 0x14	; 20
     1b6:	f0 f2       	brcs	.-68     	; 0x174 <sumator+0xce>
		{
			merena_struja += adc_res[ad_kanal][i];
		}
		merena_struja = (merena_struja/BR_SEMPLOVA) * 4.895;  // 1023 = 1093 mV, R=220 mOhm, I=V/R = 4968 mA (MAX); izracunato i skalirano da se za max input dobija ~5A
     1b8:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <merena_struja>
     1bc:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <merena_struja+0x1>
     1c0:	ad ec       	ldi	r26, 0xCD	; 205
     1c2:	bc ec       	ldi	r27, 0xCC	; 204
     1c4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__umulhisi3>
     1c8:	92 95       	swap	r25
     1ca:	82 95       	swap	r24
     1cc:	8f 70       	andi	r24, 0x0F	; 15
     1ce:	89 27       	eor	r24, r25
     1d0:	9f 70       	andi	r25, 0x0F	; 15
     1d2:	89 27       	eor	r24, r25
     1d4:	bc 01       	movw	r22, r24
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 c0 04 	call	0x980	; 0x980 <__floatunsisf>
     1de:	27 ed       	ldi	r18, 0xD7	; 215
     1e0:	33 ea       	ldi	r19, 0xA3	; 163
     1e2:	4c e9       	ldi	r20, 0x9C	; 156
     1e4:	50 e4       	ldi	r21, 0x40	; 64
     1e6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__mulsf3>
     1ea:	0e 94 91 04 	call	0x922	; 0x922 <__fixunssfsi>
     1ee:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <merena_struja+0x1>
     1f2:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <merena_struja>
     1f6:	63 c0       	rjmp	.+198    	; 0x2be <sumator+0x218>
															  //malo je kompenzovan mnozitelj merenjem pomocu voltmetra
															 /***** Vref 1.1V je zapravo 1.093 V ******/
	}
	else if (ad_kanal == 2)	//mereni napon
     1f8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ad_kanal>
     1fc:	82 30       	cpi	r24, 0x02	; 2
     1fe:	09 f0       	breq	.+2      	; 0x202 <sumator+0x15c>
     200:	5e c0       	rjmp	.+188    	; 0x2be <sumator+0x218>
	{
		mereni_napon = 0;
     202:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mereni_napon+0x1>
     206:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <mereni_napon>
		
		for (i=0; i<BR_SEMPLOVA; i++)
     20a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     20e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     212:	84 31       	cpi	r24, 0x14	; 20
     214:	18 f5       	brcc	.+70     	; 0x25c <sumator+0x1b6>
		{
			mereni_napon += adc_res[ad_kanal][i];
     216:	44 e1       	ldi	r20, 0x14	; 20
     218:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <ad_kanal>
     21c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     220:	4e 9f       	mul	r20, r30
     222:	f0 01       	movw	r30, r0
     224:	11 24       	eor	r1, r1
     226:	e8 0f       	add	r30, r24
     228:	f1 1d       	adc	r31, r1
     22a:	ee 0f       	add	r30, r30
     22c:	ff 1f       	adc	r31, r31
     22e:	ef 5e       	subi	r30, 0xEF	; 239
     230:	fe 4f       	sbci	r31, 0xFE	; 254
     232:	80 81       	ld	r24, Z
     234:	91 81       	ldd	r25, Z+1	; 0x01
     236:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <mereni_napon>
     23a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <mereni_napon+0x1>
     23e:	82 0f       	add	r24, r18
     240:	93 1f       	adc	r25, r19
     242:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <mereni_napon+0x1>
     246:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mereni_napon>
	}
	else if (ad_kanal == 2)	//mereni napon
	{
		mereni_napon = 0;
		
		for (i=0; i<BR_SEMPLOVA; i++)
     24a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     254:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     258:	84 31       	cpi	r24, 0x14	; 20
     25a:	f0 f2       	brcs	.-68     	; 0x218 <sumator+0x172>
		{
			mereni_napon += adc_res[ad_kanal][i];
		}
		mereni_napon = ((mereni_napon/BR_SEMPLOVA) * 19.613) - (merena_struja * 0.22);  //1023 = 20000 mV - naposnki pad preko sant otpornika (220 mOhm)
     25c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <mereni_napon>
     260:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <mereni_napon+0x1>
     264:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <merena_struja>
     268:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <merena_struja+0x1>
     26c:	64 e1       	ldi	r22, 0x14	; 20
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	0e 94 bb 05 	call	0xb76	; 0xb76 <__divmodhi4>
     274:	07 2e       	mov	r0, r23
     276:	00 0c       	add	r0, r0
     278:	88 0b       	sbc	r24, r24
     27a:	99 0b       	sbc	r25, r25
     27c:	0e 94 c2 04 	call	0x984	; 0x984 <__floatsisf>
     280:	2d e6       	ldi	r18, 0x6D	; 109
     282:	37 ee       	ldi	r19, 0xE7	; 231
     284:	4c e9       	ldi	r20, 0x9C	; 156
     286:	51 e4       	ldi	r21, 0x41	; 65
     288:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__mulsf3>
     28c:	6b 01       	movw	r12, r22
     28e:	7c 01       	movw	r14, r24
     290:	be 01       	movw	r22, r28
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 c0 04 	call	0x980	; 0x980 <__floatunsisf>
     29a:	2e ea       	ldi	r18, 0xAE	; 174
     29c:	37 e4       	ldi	r19, 0x47	; 71
     29e:	41 e6       	ldi	r20, 0x61	; 97
     2a0:	5e e3       	ldi	r21, 0x3E	; 62
     2a2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__mulsf3>
     2a6:	9b 01       	movw	r18, r22
     2a8:	ac 01       	movw	r20, r24
     2aa:	c7 01       	movw	r24, r14
     2ac:	b6 01       	movw	r22, r12
     2ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__subsf3>
     2b2:	0e 94 8a 04 	call	0x914	; 0x914 <__fixsfsi>
     2b6:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <mereni_napon+0x1>
     2ba:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <mereni_napon>
																				//na buck, ili pak zbog ne bas real time podataka sa ad ulaza jer im uzimam prosek
																				//Svakako trebam ovo jos malo razmotriti
	}


}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	08 95       	ret

000002cc <__vector_21>:
	ad_kanal = 0; //prvo citam A0
	
}

ISR(ADC_vect)
{
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	2f 93       	push	r18
     2d8:	3f 93       	push	r19
     2da:	4f 93       	push	r20
     2dc:	5f 93       	push	r21
     2de:	6f 93       	push	r22
     2e0:	7f 93       	push	r23
     2e2:	8f 93       	push	r24
     2e4:	9f 93       	push	r25
     2e6:	af 93       	push	r26
     2e8:	bf 93       	push	r27
     2ea:	ef 93       	push	r30
     2ec:	ff 93       	push	r31
	/*
	AD konverzija
	ISR okine kada je gotova konverzija
	*/
	
	PORTD |= 1<<7;       //togle za osciloskop
     2ee:	5f 9a       	sbi	0x0b, 7	; 11
	
	adc_res[ad_kanal][brojac_sempla] = (uint16_t)ADC;   //upis adc rezultata u matricu; Trajanje ovog dela: ~2us
     2f0:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <ad_kanal>
     2f4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <brojac_sempla>
     2f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2fc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     300:	34 e1       	ldi	r19, 0x14	; 20
     302:	e3 9f       	mul	r30, r19
     304:	f0 01       	movw	r30, r0
     306:	11 24       	eor	r1, r1
     308:	e2 0f       	add	r30, r18
     30a:	f1 1d       	adc	r31, r1
     30c:	ee 0f       	add	r30, r30
     30e:	ff 1f       	adc	r31, r31
     310:	ef 5e       	subi	r30, 0xEF	; 239
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	91 83       	std	Z+1, r25	; 0x01
     316:	80 83       	st	Z, r24

	

	sumator();
     318:	0e 94 53 00 	call	0xa6	; 0xa6 <sumator>
	//trajanje ovog dela: ~ 70 do 120 us. Ovde se najvise vremena trosi
	
	
	ADCSRA &= ~(1<<ADEN);	//iskljucim adc da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     31c:	ea e7       	ldi	r30, 0x7A	; 122
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	80 81       	ld	r24, Z
     322:	8f 77       	andi	r24, 0x7F	; 127
     324:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
     326:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ad_kanal>
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ad_kanal>
	if(ad_kanal > 2)	//kreni opet od nule kad dodjes do poslednjeg; 2, da citam samo prva tri
     330:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ad_kanal>
     334:	83 30       	cpi	r24, 0x03	; 3
     336:	68 f0       	brcs	.+26     	; 0x352 <__vector_21+0x86>
	{
		ad_kanal = 0;
     338:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ad_kanal>
		
		brojac_sempla++; //kad dodjes do kraja kanala predji na sledeci red semplova
     33c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <brojac_sempla>
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <brojac_sempla>
		if(brojac_sempla >= BR_SEMPLOVA) //kad dodjes do kraja kreni opet od nule
     346:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <brojac_sempla>
     34a:	84 31       	cpi	r24, 0x14	; 20
     34c:	10 f0       	brcs	.+4      	; 0x352 <__vector_21+0x86>
			brojac_sempla = 0;
     34e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <brojac_sempla>
	
	
	
	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
     352:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ad_kanal>
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	61 f0       	breq	.+24     	; 0x372 <__vector_21+0xa6>
     35a:	28 f0       	brcs	.+10     	; 0x366 <__vector_21+0x9a>
     35c:	82 30       	cpi	r24, 0x02	; 2
     35e:	91 f0       	breq	.+36     	; 0x384 <__vector_21+0xb8>
     360:	83 30       	cpi	r24, 0x03	; 3
     362:	c9 f0       	breq	.+50     	; 0x396 <__vector_21+0xca>
     364:	1d c0       	rjmp	.+58     	; 0x3a0 <__vector_21+0xd4>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     366:	ec e7       	ldi	r30, 0x7C	; 124
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	8c 7f       	andi	r24, 0xFC	; 252
     36e:	80 83       	st	Z, r24
		break;
     370:	17 c0       	rjmp	.+46     	; 0x3a0 <__vector_21+0xd4>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     372:	ec e7       	ldi	r30, 0x7C	; 124
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	8d 7f       	andi	r24, 0xFD	; 253
     37a:	80 83       	st	Z, r24
				ADMUX |= (0b1);
     37c:	80 81       	ld	r24, Z
     37e:	81 60       	ori	r24, 0x01	; 1
     380:	80 83       	st	Z, r24
		break;
     382:	0e c0       	rjmp	.+28     	; 0x3a0 <__vector_21+0xd4>
		
		case 2:
				ADMUX &= ~(0b1);		//10;ref internal 1.1V, kanal A2
     384:	ec e7       	ldi	r30, 0x7C	; 124
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	8e 7f       	andi	r24, 0xFE	; 254
     38c:	80 83       	st	Z, r24
				ADMUX |= (0b10);
     38e:	80 81       	ld	r24, Z
     390:	82 60       	ori	r24, 0x02	; 2
     392:	80 83       	st	Z, r24
		break;
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <__vector_21+0xd4>
		
		case 3:
				ADMUX |= (0b11);		//11;ref internal 1.1V, kanal A3
     396:	ec e7       	ldi	r30, 0x7C	; 124
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	83 60       	ori	r24, 0x03	; 3
     39e:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     3a0:	ea e7       	ldi	r30, 0x7A	; 122
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	80 6c       	ori	r24, 0xC0	; 192
     3a8:	80 83       	st	Z, r24
	
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us

	PORTD &= ~(1<<7);       //togle za osciloskop
     3aa:	5f 98       	cbi	0x0b, 7	; 11
}
     3ac:	ff 91       	pop	r31
     3ae:	ef 91       	pop	r30
     3b0:	bf 91       	pop	r27
     3b2:	af 91       	pop	r26
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	7f 91       	pop	r23
     3ba:	6f 91       	pop	r22
     3bc:	5f 91       	pop	r21
     3be:	4f 91       	pop	r20
     3c0:	3f 91       	pop	r19
     3c2:	2f 91       	pop	r18
     3c4:	0f 90       	pop	r0
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	0f 90       	pop	r0
     3ca:	1f 90       	pop	r1
     3cc:	18 95       	reti

000003ce <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
     3ce:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3d2:	88 e4       	ldi	r24, 0x48	; 72
     3d4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     3d8:	88 b1       	in	r24, 0x08	; 8
     3da:	80 63       	ori	r24, 0x30	; 48
     3dc:	88 b9       	out	0x08, r24	; 8
     3de:	08 95       	ret

000003e0 <i2c_start_wait>:
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	ec eb       	ldi	r30, 0xBC	; 188
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	24 ea       	ldi	r18, 0xA4	; 164
     3ea:	a9 eb       	ldi	r26, 0xB9	; 185
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	cb eb       	ldi	r28, 0xBB	; 187
     3f0:	d0 e0       	ldi	r29, 0x00	; 0
     3f2:	34 e8       	ldi	r19, 0x84	; 132
     3f4:	44 e9       	ldi	r20, 0x94	; 148
     3f6:	20 83       	st	Z, r18
     3f8:	90 81       	ld	r25, Z
     3fa:	99 23       	and	r25, r25
     3fc:	ec f7       	brge	.-6      	; 0x3f8 <i2c_start_wait+0x18>
     3fe:	9c 91       	ld	r25, X
     400:	98 7f       	andi	r25, 0xF8	; 248
     402:	98 30       	cpi	r25, 0x08	; 8
     404:	11 f0       	breq	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     406:	90 31       	cpi	r25, 0x10	; 16
     408:	b1 f7       	brne	.-20     	; 0x3f6 <i2c_start_wait+0x16>
     40a:	88 83       	st	Y, r24
     40c:	30 83       	st	Z, r19
     40e:	90 81       	ld	r25, Z
     410:	99 23       	and	r25, r25
     412:	ec f7       	brge	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     414:	9c 91       	ld	r25, X
     416:	98 7f       	andi	r25, 0xF8	; 248
     418:	90 32       	cpi	r25, 0x20	; 32
     41a:	11 f0       	breq	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41c:	98 35       	cpi	r25, 0x58	; 88
     41e:	29 f4       	brne	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     420:	40 83       	st	Z, r20
     422:	90 81       	ld	r25, Z
     424:	94 fd       	sbrc	r25, 4
     426:	fd cf       	rjmp	.-6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     428:	e6 cf       	rjmp	.-52     	; 0x3f6 <i2c_start_wait+0x16>
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <i2c_stop>:
     430:	84 e9       	ldi	r24, 0x94	; 148
     432:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     436:	ec eb       	ldi	r30, 0xBC	; 188
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	84 fd       	sbrc	r24, 4
     43e:	fd cf       	rjmp	.-6      	; 0x43a <i2c_stop+0xa>
     440:	08 95       	ret

00000442 <i2c_write>:
     442:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     446:	84 e8       	ldi	r24, 0x84	; 132
     448:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     44c:	ec eb       	ldi	r30, 0xBC	; 188
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	88 23       	and	r24, r24
     454:	ec f7       	brge	.-6      	; 0x450 <i2c_write+0xe>
     456:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     45a:	98 7f       	andi	r25, 0xF8	; 248
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	98 32       	cpi	r25, 0x28	; 40
     460:	09 f4       	brne	.+2      	; 0x464 <i2c_write+0x22>
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	08 95       	ret

00000466 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     466:	cf 93       	push	r28
     468:	c8 2f       	mov	r28, r24
     46a:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     46c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <i2c_start_wait>
	i2c_write(value);                      // write 
     470:	8c 2f       	mov	r24, r28
     472:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     476:	0e 94 18 02 	call	0x430	; 0x430 <i2c_stop>
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <putnibble>:
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     47e:	cf 93       	push	r28
     480:	c8 2f       	mov	r28, r24
     482:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_pin>
     486:	84 60       	ori	r24, 0x04	; 4
     488:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <led_pin>
     48c:	6e e4       	ldi	r22, 0x4E	; 78
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 33 02 	call	0x466	; 0x466 <i2c_send_packet>
     496:	87 ec       	ldi	r24, 0xC7	; 199
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <putnibble+0x1c>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <putnibble+0x22>
     4a0:	00 00       	nop
     4a2:	8c 2f       	mov	r24, r28
     4a4:	82 95       	swap	r24
     4a6:	80 7f       	andi	r24, 0xF0	; 240
     4a8:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <led_pin>
     4ac:	89 2b       	or	r24, r25
     4ae:	6e e4       	ldi	r22, 0x4E	; 78
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 33 02 	call	0x466	; 0x466 <i2c_send_packet>
     4b8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_pin>
     4bc:	8b 7f       	andi	r24, 0xFB	; 251
     4be:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <led_pin>
     4c2:	6e e4       	ldi	r22, 0x4E	; 78
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 33 02 	call	0x466	; 0x466 <i2c_send_packet>
     4cc:	87 ec       	ldi	r24, 0xC7	; 199
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <putnibble+0x52>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <putnibble+0x58>
     4d6:	00 00       	nop
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <lcd1602_send_byte>:
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	c8 2f       	mov	r28, r24
     4e2:	d8 2f       	mov	r29, r24
     4e4:	d2 95       	swap	r29
     4e6:	df 70       	andi	r29, 0x0F	; 15
     4e8:	61 11       	cpse	r22, r1
     4ea:	0b c0       	rjmp	.+22     	; 0x502 <lcd1602_send_byte+0x26>
     4ec:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_pin>
     4f0:	8e 7f       	andi	r24, 0xFE	; 254
     4f2:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <led_pin>
     4f6:	6e e4       	ldi	r22, 0x4E	; 78
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 33 02 	call	0x466	; 0x466 <i2c_send_packet>
     500:	0a c0       	rjmp	.+20     	; 0x516 <lcd1602_send_byte+0x3a>
     502:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_pin>
     506:	81 60       	ori	r24, 0x01	; 1
     508:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <led_pin>
     50c:	6e e4       	ldi	r22, 0x4E	; 78
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 33 02 	call	0x466	; 0x466 <i2c_send_packet>
     516:	8d 2f       	mov	r24, r29
     518:	0e 94 3f 02 	call	0x47e	; 0x47e <putnibble>
     51c:	8c 2f       	mov	r24, r28
     51e:	0e 94 3f 02 	call	0x47e	; 0x47e <putnibble>
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <lcd1602_send_char>:
     528:	cf 93       	push	r28
     52a:	c8 2f       	mov	r28, r24
     52c:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_pin>
     530:	81 60       	ori	r24, 0x01	; 1
     532:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <led_pin>
     536:	6e e4       	ldi	r22, 0x4E	; 78
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 33 02 	call	0x466	; 0x466 <i2c_send_packet>
     540:	8c 2f       	mov	r24, r28
     542:	82 95       	swap	r24
     544:	8f 70       	andi	r24, 0x0F	; 15
     546:	0e 94 3f 02 	call	0x47e	; 0x47e <putnibble>
     54a:	8c 2f       	mov	r24, r28
     54c:	0e 94 3f 02 	call	0x47e	; 0x47e <putnibble>
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <lcd1602_init>:
     554:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <led_pin>
     558:	0e 94 e7 01 	call	0x3ce	; 0x3ce <i2c_init>
     55c:	8f e5       	ldi	r24, 0x5F	; 95
     55e:	9a ee       	ldi	r25, 0xEA	; 234
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <lcd1602_init+0xc>
     564:	00 c0       	rjmp	.+0      	; 0x566 <lcd1602_init+0x12>
     566:	00 00       	nop
     568:	83 e0       	ldi	r24, 0x03	; 3
     56a:	0e 94 3f 02 	call	0x47e	; 0x47e <putnibble>
     56e:	8f e7       	ldi	r24, 0x7F	; 127
     570:	9e e3       	ldi	r25, 0x3E	; 62
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <lcd1602_init+0x1e>
     576:	00 c0       	rjmp	.+0      	; 0x578 <lcd1602_init+0x24>
     578:	00 00       	nop
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	0e 94 3f 02 	call	0x47e	; 0x47e <putnibble>
     580:	8f e8       	ldi	r24, 0x8F	; 143
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	f1 f7       	brne	.-4      	; 0x584 <lcd1602_init+0x30>
     588:	00 c0       	rjmp	.+0      	; 0x58a <lcd1602_init+0x36>
     58a:	00 00       	nop
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	0e 94 3f 02 	call	0x47e	; 0x47e <putnibble>
     592:	8f e9       	ldi	r24, 0x9F	; 159
     594:	9f e0       	ldi	r25, 0x0F	; 15
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <lcd1602_init+0x42>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <lcd1602_init+0x48>
     59c:	00 00       	nop
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	0e 94 3f 02 	call	0x47e	; 0x47e <putnibble>
     5a4:	8f e9       	ldi	r24, 0x9F	; 159
     5a6:	9f e0       	ldi	r25, 0x0F	; 15
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd1602_init+0x54>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <lcd1602_init+0x5a>
     5ae:	00 00       	nop
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	88 e2       	ldi	r24, 0x28	; 40
     5b4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd1602_send_byte>
     5b8:	8f e9       	ldi	r24, 0x9F	; 159
     5ba:	9f e0       	ldi	r25, 0x0F	; 15
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <lcd1602_init+0x68>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <lcd1602_init+0x6e>
     5c2:	00 00       	nop
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	8c e0       	ldi	r24, 0x0C	; 12
     5c8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd1602_send_byte>
     5cc:	8f e9       	ldi	r24, 0x9F	; 159
     5ce:	9f e0       	ldi	r25, 0x0F	; 15
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <lcd1602_init+0x7c>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <lcd1602_init+0x82>
     5d6:	00 00       	nop
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd1602_send_byte>
     5e0:	8f e9       	ldi	r24, 0x9F	; 159
     5e2:	9f e0       	ldi	r25, 0x0F	; 15
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <lcd1602_init+0x90>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <lcd1602_init+0x96>
     5ea:	00 00       	nop
     5ec:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_pin>
     5f0:	88 60       	ori	r24, 0x08	; 8
     5f2:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <led_pin>
     5f6:	6e e4       	ldi	r22, 0x4E	; 78
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 33 02 	call	0x466	; 0x466 <i2c_send_packet>
     600:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_pin>
     604:	8d 7f       	andi	r24, 0xFD	; 253
     606:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <led_pin>
     60a:	6e e4       	ldi	r22, 0x4E	; 78
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 33 02 	call	0x466	; 0x466 <i2c_send_packet>
     614:	08 95       	ret

00000616 <lcd1602_clear>:
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd1602_send_byte>
     61e:	8f e6       	ldi	r24, 0x6F	; 111
     620:	97 e1       	ldi	r25, 0x17	; 23
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <lcd1602_clear+0xc>
     626:	00 c0       	rjmp	.+0      	; 0x628 <lcd1602_clear+0x12>
     628:	00 00       	nop
     62a:	08 95       	ret

0000062c <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     634:	80 81       	ld	r24, Z
     636:	88 23       	and	r24, r24
     638:	59 f0       	breq	.+22     	; 0x650 <lcd1602_send_string+0x24>
     63a:	8f 01       	movw	r16, r30
     63c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     63e:	0e 94 94 02 	call	0x528	; 0x528 <lcd1602_send_char>
		i++;
     642:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     644:	f8 01       	movw	r30, r16
     646:	ec 0f       	add	r30, r28
     648:	f1 1d       	adc	r31, r1
     64a:	80 81       	ld	r24, Z
     64c:	81 11       	cpse	r24, r1
     64e:	f7 cf       	rjmp	.-18     	; 0x63e <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	08 95       	ret

00000658 <main>:
#include "uart.h"
#include "lcd1602.h"


int main(void)
{
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	2f 97       	sbiw	r28, 0x0f	; 15
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
    
	char bafer[15];
	int a=10, b=5, c=255;

	uart_init();
     66c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <uart_init>
	i2c_init();				//NAPOMENA: uljuceni internal-pullup - ovi na SDA i SCL, unutar ove f-je
     670:	0e 94 e7 01 	call	0x3ce	; 0x3ce <i2c_init>
	lcd1602_init();
     674:	0e 94 aa 02 	call	0x554	; 0x554 <lcd1602_init>
	
	sei();	//global interrupt enable
     678:	78 94       	sei
	
	
	lcd1602_clear();
     67a:	0e 94 0b 03 	call	0x616	; 0x616 <lcd1602_clear>
		/* preko uarta se salju stringovi, pa da bi se int poslao mora se prvo konvertovati preko itoa() f-je */
		/* moguce je koristiti i ostale slicne f-je: utoa(), ltoa()..... */
		/* umesto itoa() bolje je koristiti sprintf(buffer, "%3d", int); */
		
		send_str("  ");
		sprintf(bafer, "%d", a);
     67e:	0f 2e       	mov	r0, r31
     680:	fa e0       	ldi	r31, 0x0A	; 10
     682:	bf 2e       	mov	r11, r31
     684:	f0 2d       	mov	r31, r0
     686:	0f 2e       	mov	r0, r31
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	ef 2e       	mov	r14, r31
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	ff 2e       	mov	r15, r31
     690:	f0 2d       	mov	r31, r0
     692:	8e 01       	movw	r16, r28
     694:	0f 5f       	subi	r16, 0xFF	; 255
     696:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd1602_send_string(bafer);
		send_str(bafer);
		
		send_str("  ");
		sprintf(bafer, "%d", b);
     698:	0f 2e       	mov	r0, r31
     69a:	f5 e0       	ldi	r31, 0x05	; 5
     69c:	cf 2e       	mov	r12, r31
     69e:	f0 2d       	mov	r31, r0
		lcd1602_send_string(bafer);
		send_str(bafer);
		
		send_str("  ");
		sprintf(bafer, "%d", c);
     6a0:	dd 24       	eor	r13, r13
     6a2:	da 94       	dec	r13
    {
		/* preko uarta se salju stringovi, pa da bi se int poslao mora se prvo konvertovati preko itoa() f-je */
		/* moguce je koristiti i ostale slicne f-je: utoa(), ltoa()..... */
		/* umesto itoa() bolje je koristiti sprintf(buffer, "%3d", int); */
		
		send_str("  ");
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 0a 04 	call	0x814	; 0x814 <send_str>
		sprintf(bafer, "%d", a);
     6ac:	1f 92       	push	r1
     6ae:	bf 92       	push	r11
     6b0:	ff 92       	push	r15
     6b2:	ef 92       	push	r14
     6b4:	1f 93       	push	r17
     6b6:	0f 93       	push	r16
     6b8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <sprintf>
		lcd1602_send_string(bafer);
     6bc:	c8 01       	movw	r24, r16
     6be:	0e 94 16 03 	call	0x62c	; 0x62c <lcd1602_send_string>
		send_str(bafer);
     6c2:	c8 01       	movw	r24, r16
     6c4:	0e 94 0a 04 	call	0x814	; 0x814 <send_str>
		
		send_str("  ");
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 0a 04 	call	0x814	; 0x814 <send_str>
		sprintf(bafer, "%d", b);
     6d0:	1f 92       	push	r1
     6d2:	cf 92       	push	r12
     6d4:	ff 92       	push	r15
     6d6:	ef 92       	push	r14
     6d8:	1f 93       	push	r17
     6da:	0f 93       	push	r16
     6dc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <sprintf>
		lcd1602_send_string(bafer);
     6e0:	c8 01       	movw	r24, r16
     6e2:	0e 94 16 03 	call	0x62c	; 0x62c <lcd1602_send_string>
		send_str(bafer);
     6e6:	c8 01       	movw	r24, r16
     6e8:	0e 94 0a 04 	call	0x814	; 0x814 <send_str>
		
		send_str("  ");
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 0a 04 	call	0x814	; 0x814 <send_str>
		sprintf(bafer, "%d", c);
     6f4:	1f 92       	push	r1
     6f6:	df 92       	push	r13
     6f8:	ff 92       	push	r15
     6fa:	ef 92       	push	r14
     6fc:	1f 93       	push	r17
     6fe:	0f 93       	push	r16
     700:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <sprintf>
		lcd1602_send_string(bafer);
     704:	c8 01       	movw	r24, r16
     706:	0e 94 16 03 	call	0x62c	; 0x62c <lcd1602_send_string>
		send_str(bafer);
     70a:	c8 01       	movw	r24, r16
     70c:	0e 94 0a 04 	call	0x814	; 0x814 <send_str>

		
		
		send_str("\n");  //novi red
     710:	86 e0       	ldi	r24, 0x06	; 6
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	0e 94 0a 04 	call	0x814	; 0x814 <send_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     718:	2f ef       	ldi	r18, 0xFF	; 255
     71a:	81 ee       	ldi	r24, 0xE1	; 225
     71c:	94 e0       	ldi	r25, 0x04	; 4
     71e:	21 50       	subi	r18, 0x01	; 1
     720:	80 40       	sbci	r24, 0x00	; 0
     722:	90 40       	sbci	r25, 0x00	; 0
     724:	e1 f7       	brne	.-8      	; 0x71e <main+0xc6>
     726:	00 c0       	rjmp	.+0      	; 0x728 <main+0xd0>
     728:	00 00       	nop
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	b7 cf       	rjmp	.-146    	; 0x6a4 <main+0x4c>

00000736 <__vector_14>:
	
	DDRB |= 1<<PINB5;
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
     736:	1f 92       	push	r1
     738:	0f 92       	push	r0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	0f 92       	push	r0
     73e:	11 24       	eor	r1, r1
     740:	8f 93       	push	r24
     742:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
     74a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <brojac_prekida_tajmera0>
     74e:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <brojac_prekida_tajmera0+0x1>
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <brojac_prekida_tajmera0+0x1>
     758:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)	//1ms * 10 = 10ms
     75c:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <brojac_prekida_tajmera0>
     760:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <brojac_prekida_tajmera0+0x1>
     764:	0a 97       	sbiw	r24, 0x0a	; 10
     766:	41 f4       	brne	.+16     	; 0x778 <__vector_14+0x42>
	{
		brojac_prekida_tajmera0 = 0;
     768:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <brojac_prekida_tajmera0+0x1>
     76c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <flag_prekid_10ms>
		PINB |= 1<<PINB5;					//toogle pin 5 - DIG13, test da vidim da li je korektna frekvencija
     776:	1d 9a       	sbi	0x03, 5	; 3
		
	}
	
	
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	1f 90       	pop	r1
     784:	18 95       	reti

00000786 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
     786:	1f 92       	push	r1
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
	poslato=0;
     790:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <poslato>
}
     794:	0f 90       	pop	r0
     796:	0f be       	out	0x3f, r0	; 63
     798:	0f 90       	pop	r0
     79a:	1f 90       	pop	r1
     79c:	18 95       	reti

0000079e <__vector_18>:

ISR(USART_RX_vect)
{
     79e:	1f 92       	push	r1
     7a0:	0f 92       	push	r0
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	0f 92       	push	r0
     7a6:	11 24       	eor	r1, r1
     7a8:	8f 93       	push	r24
     7aa:	ef 93       	push	r30
     7ac:	ff 93       	push	r31
	input_char=UDR0;
     7ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     7b2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
     7b6:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <buff_size>
     7ba:	88 30       	cpi	r24, 0x08	; 8
     7bc:	98 f4       	brcc	.+38     	; 0x7e4 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
     7be:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <buff_size>
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <input_char>
     7c8:	e7 54       	subi	r30, 0x47	; 71
     7ca:	fe 4f       	sbci	r31, 0xFE	; 254
     7cc:	80 83       	st	Z, r24
		buff_size++;
     7ce:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <buff_size>
     7d2:	8f 5f       	subi	r24, 0xFF	; 255
     7d4:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <buff_size>
		input_buffer[buff_size]='\0';
     7d8:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <buff_size>
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	e7 54       	subi	r30, 0x47	; 71
     7e0:	fe 4f       	sbci	r31, 0xFE	; 254
     7e2:	10 82       	st	Z, r1
	}
}
     7e4:	ff 91       	pop	r31
     7e6:	ef 91       	pop	r30
     7e8:	8f 91       	pop	r24
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
     7fa:	88 ed       	ldi	r24, 0xD8	; 216
     7fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
     800:	86 e0       	ldi	r24, 0x06	; 6
     802:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
     806:	8f ec       	ldi	r24, 0xCF	; 207
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     80e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     812:	08 95       	ret

00000814 <send_str>:
}

void send_str(unsigned char *str)
{
     814:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
     816:	90 81       	ld	r25, Z
     818:	99 23       	and	r25, r25
     81a:	71 f0       	breq	.+28     	; 0x838 <send_str+0x24>
     81c:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
     81e:	a6 ec       	ldi	r26, 0xC6	; 198
     820:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
     822:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
     824:	9c 93       	st	X, r25
		poslato=1;
     826:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <poslato>
		while (poslato);
     82a:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <poslato>
     82e:	91 11       	cpse	r25, r1
     830:	fc cf       	rjmp	.-8      	; 0x82a <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
     832:	91 91       	ld	r25, Z+
     834:	91 11       	cpse	r25, r1
     836:	f6 cf       	rjmp	.-20     	; 0x824 <send_str+0x10>
     838:	08 95       	ret

0000083a <__subsf3>:
     83a:	50 58       	subi	r21, 0x80	; 128

0000083c <__addsf3>:
     83c:	bb 27       	eor	r27, r27
     83e:	aa 27       	eor	r26, r26
     840:	0e 94 35 04 	call	0x86a	; 0x86a <__addsf3x>
     844:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_round>
     848:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_pscA>
     84c:	38 f0       	brcs	.+14     	; 0x85c <__addsf3+0x20>
     84e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscB>
     852:	20 f0       	brcs	.+8      	; 0x85c <__addsf3+0x20>
     854:	39 f4       	brne	.+14     	; 0x864 <__addsf3+0x28>
     856:	9f 3f       	cpi	r25, 0xFF	; 255
     858:	19 f4       	brne	.+6      	; 0x860 <__addsf3+0x24>
     85a:	26 f4       	brtc	.+8      	; 0x864 <__addsf3+0x28>
     85c:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>
     860:	0e f4       	brtc	.+2      	; 0x864 <__addsf3+0x28>
     862:	e0 95       	com	r30
     864:	e7 fb       	bst	r30, 7
     866:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>

0000086a <__addsf3x>:
     86a:	e9 2f       	mov	r30, r25
     86c:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_split3>
     870:	58 f3       	brcs	.-42     	; 0x848 <__addsf3+0xc>
     872:	ba 17       	cp	r27, r26
     874:	62 07       	cpc	r22, r18
     876:	73 07       	cpc	r23, r19
     878:	84 07       	cpc	r24, r20
     87a:	95 07       	cpc	r25, r21
     87c:	20 f0       	brcs	.+8      	; 0x886 <__addsf3x+0x1c>
     87e:	79 f4       	brne	.+30     	; 0x89e <__addsf3x+0x34>
     880:	a6 f5       	brtc	.+104    	; 0x8ea <__addsf3x+0x80>
     882:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_zero>
     886:	0e f4       	brtc	.+2      	; 0x88a <__addsf3x+0x20>
     888:	e0 95       	com	r30
     88a:	0b 2e       	mov	r0, r27
     88c:	ba 2f       	mov	r27, r26
     88e:	a0 2d       	mov	r26, r0
     890:	0b 01       	movw	r0, r22
     892:	b9 01       	movw	r22, r18
     894:	90 01       	movw	r18, r0
     896:	0c 01       	movw	r0, r24
     898:	ca 01       	movw	r24, r20
     89a:	a0 01       	movw	r20, r0
     89c:	11 24       	eor	r1, r1
     89e:	ff 27       	eor	r31, r31
     8a0:	59 1b       	sub	r21, r25
     8a2:	99 f0       	breq	.+38     	; 0x8ca <__addsf3x+0x60>
     8a4:	59 3f       	cpi	r21, 0xF9	; 249
     8a6:	50 f4       	brcc	.+20     	; 0x8bc <__addsf3x+0x52>
     8a8:	50 3e       	cpi	r21, 0xE0	; 224
     8aa:	68 f1       	brcs	.+90     	; 0x906 <__stack+0x7>
     8ac:	1a 16       	cp	r1, r26
     8ae:	f0 40       	sbci	r31, 0x00	; 0
     8b0:	a2 2f       	mov	r26, r18
     8b2:	23 2f       	mov	r18, r19
     8b4:	34 2f       	mov	r19, r20
     8b6:	44 27       	eor	r20, r20
     8b8:	58 5f       	subi	r21, 0xF8	; 248
     8ba:	f3 cf       	rjmp	.-26     	; 0x8a2 <__addsf3x+0x38>
     8bc:	46 95       	lsr	r20
     8be:	37 95       	ror	r19
     8c0:	27 95       	ror	r18
     8c2:	a7 95       	ror	r26
     8c4:	f0 40       	sbci	r31, 0x00	; 0
     8c6:	53 95       	inc	r21
     8c8:	c9 f7       	brne	.-14     	; 0x8bc <__addsf3x+0x52>
     8ca:	7e f4       	brtc	.+30     	; 0x8ea <__addsf3x+0x80>
     8cc:	1f 16       	cp	r1, r31
     8ce:	ba 0b       	sbc	r27, r26
     8d0:	62 0b       	sbc	r22, r18
     8d2:	73 0b       	sbc	r23, r19
     8d4:	84 0b       	sbc	r24, r20
     8d6:	ba f0       	brmi	.+46     	; 0x906 <__stack+0x7>
     8d8:	91 50       	subi	r25, 0x01	; 1
     8da:	a1 f0       	breq	.+40     	; 0x904 <__stack+0x5>
     8dc:	ff 0f       	add	r31, r31
     8de:	bb 1f       	adc	r27, r27
     8e0:	66 1f       	adc	r22, r22
     8e2:	77 1f       	adc	r23, r23
     8e4:	88 1f       	adc	r24, r24
     8e6:	c2 f7       	brpl	.-16     	; 0x8d8 <__addsf3x+0x6e>
     8e8:	0e c0       	rjmp	.+28     	; 0x906 <__stack+0x7>
     8ea:	ba 0f       	add	r27, r26
     8ec:	62 1f       	adc	r22, r18
     8ee:	73 1f       	adc	r23, r19
     8f0:	84 1f       	adc	r24, r20
     8f2:	48 f4       	brcc	.+18     	; 0x906 <__stack+0x7>
     8f4:	87 95       	ror	r24
     8f6:	77 95       	ror	r23
     8f8:	67 95       	ror	r22
     8fa:	b7 95       	ror	r27
     8fc:	f7 95       	ror	r31
     8fe:	9e 3f       	cpi	r25, 0xFE	; 254
     900:	08 f0       	brcs	.+2      	; 0x904 <__stack+0x5>
     902:	b0 cf       	rjmp	.-160    	; 0x864 <__addsf3+0x28>
     904:	93 95       	inc	r25
     906:	88 0f       	add	r24, r24
     908:	08 f0       	brcs	.+2      	; 0x90c <__stack+0xd>
     90a:	99 27       	eor	r25, r25
     90c:	ee 0f       	add	r30, r30
     90e:	97 95       	ror	r25
     910:	87 95       	ror	r24
     912:	08 95       	ret

00000914 <__fixsfsi>:
     914:	0e 94 91 04 	call	0x922	; 0x922 <__fixunssfsi>
     918:	68 94       	set
     91a:	b1 11       	cpse	r27, r1
     91c:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_szero>
     920:	08 95       	ret

00000922 <__fixunssfsi>:
     922:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_splitA>
     926:	88 f0       	brcs	.+34     	; 0x94a <__fixunssfsi+0x28>
     928:	9f 57       	subi	r25, 0x7F	; 127
     92a:	98 f0       	brcs	.+38     	; 0x952 <__fixunssfsi+0x30>
     92c:	b9 2f       	mov	r27, r25
     92e:	99 27       	eor	r25, r25
     930:	b7 51       	subi	r27, 0x17	; 23
     932:	b0 f0       	brcs	.+44     	; 0x960 <__fixunssfsi+0x3e>
     934:	e1 f0       	breq	.+56     	; 0x96e <__fixunssfsi+0x4c>
     936:	66 0f       	add	r22, r22
     938:	77 1f       	adc	r23, r23
     93a:	88 1f       	adc	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	1a f0       	brmi	.+6      	; 0x946 <__fixunssfsi+0x24>
     940:	ba 95       	dec	r27
     942:	c9 f7       	brne	.-14     	; 0x936 <__fixunssfsi+0x14>
     944:	14 c0       	rjmp	.+40     	; 0x96e <__fixunssfsi+0x4c>
     946:	b1 30       	cpi	r27, 0x01	; 1
     948:	91 f0       	breq	.+36     	; 0x96e <__fixunssfsi+0x4c>
     94a:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_zero>
     94e:	b1 e0       	ldi	r27, 0x01	; 1
     950:	08 95       	ret
     952:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_zero>
     956:	67 2f       	mov	r22, r23
     958:	78 2f       	mov	r23, r24
     95a:	88 27       	eor	r24, r24
     95c:	b8 5f       	subi	r27, 0xF8	; 248
     95e:	39 f0       	breq	.+14     	; 0x96e <__fixunssfsi+0x4c>
     960:	b9 3f       	cpi	r27, 0xF9	; 249
     962:	cc f3       	brlt	.-14     	; 0x956 <__fixunssfsi+0x34>
     964:	86 95       	lsr	r24
     966:	77 95       	ror	r23
     968:	67 95       	ror	r22
     96a:	b3 95       	inc	r27
     96c:	d9 f7       	brne	.-10     	; 0x964 <__fixunssfsi+0x42>
     96e:	3e f4       	brtc	.+14     	; 0x97e <__fixunssfsi+0x5c>
     970:	90 95       	com	r25
     972:	80 95       	com	r24
     974:	70 95       	com	r23
     976:	61 95       	neg	r22
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	8f 4f       	sbci	r24, 0xFF	; 255
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	08 95       	ret

00000980 <__floatunsisf>:
     980:	e8 94       	clt
     982:	09 c0       	rjmp	.+18     	; 0x996 <__floatsisf+0x12>

00000984 <__floatsisf>:
     984:	97 fb       	bst	r25, 7
     986:	3e f4       	brtc	.+14     	; 0x996 <__floatsisf+0x12>
     988:	90 95       	com	r25
     98a:	80 95       	com	r24
     98c:	70 95       	com	r23
     98e:	61 95       	neg	r22
     990:	7f 4f       	sbci	r23, 0xFF	; 255
     992:	8f 4f       	sbci	r24, 0xFF	; 255
     994:	9f 4f       	sbci	r25, 0xFF	; 255
     996:	99 23       	and	r25, r25
     998:	a9 f0       	breq	.+42     	; 0x9c4 <__floatsisf+0x40>
     99a:	f9 2f       	mov	r31, r25
     99c:	96 e9       	ldi	r25, 0x96	; 150
     99e:	bb 27       	eor	r27, r27
     9a0:	93 95       	inc	r25
     9a2:	f6 95       	lsr	r31
     9a4:	87 95       	ror	r24
     9a6:	77 95       	ror	r23
     9a8:	67 95       	ror	r22
     9aa:	b7 95       	ror	r27
     9ac:	f1 11       	cpse	r31, r1
     9ae:	f8 cf       	rjmp	.-16     	; 0x9a0 <__floatsisf+0x1c>
     9b0:	fa f4       	brpl	.+62     	; 0x9f0 <__floatsisf+0x6c>
     9b2:	bb 0f       	add	r27, r27
     9b4:	11 f4       	brne	.+4      	; 0x9ba <__floatsisf+0x36>
     9b6:	60 ff       	sbrs	r22, 0
     9b8:	1b c0       	rjmp	.+54     	; 0x9f0 <__floatsisf+0x6c>
     9ba:	6f 5f       	subi	r22, 0xFF	; 255
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	8f 4f       	sbci	r24, 0xFF	; 255
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	16 c0       	rjmp	.+44     	; 0x9f0 <__floatsisf+0x6c>
     9c4:	88 23       	and	r24, r24
     9c6:	11 f0       	breq	.+4      	; 0x9cc <__floatsisf+0x48>
     9c8:	96 e9       	ldi	r25, 0x96	; 150
     9ca:	11 c0       	rjmp	.+34     	; 0x9ee <__floatsisf+0x6a>
     9cc:	77 23       	and	r23, r23
     9ce:	21 f0       	breq	.+8      	; 0x9d8 <__floatsisf+0x54>
     9d0:	9e e8       	ldi	r25, 0x8E	; 142
     9d2:	87 2f       	mov	r24, r23
     9d4:	76 2f       	mov	r23, r22
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <__floatsisf+0x5e>
     9d8:	66 23       	and	r22, r22
     9da:	71 f0       	breq	.+28     	; 0x9f8 <__floatsisf+0x74>
     9dc:	96 e8       	ldi	r25, 0x86	; 134
     9de:	86 2f       	mov	r24, r22
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	2a f0       	brmi	.+10     	; 0x9f0 <__floatsisf+0x6c>
     9e6:	9a 95       	dec	r25
     9e8:	66 0f       	add	r22, r22
     9ea:	77 1f       	adc	r23, r23
     9ec:	88 1f       	adc	r24, r24
     9ee:	da f7       	brpl	.-10     	; 0x9e6 <__floatsisf+0x62>
     9f0:	88 0f       	add	r24, r24
     9f2:	96 95       	lsr	r25
     9f4:	87 95       	ror	r24
     9f6:	97 f9       	bld	r25, 7
     9f8:	08 95       	ret

000009fa <__fp_inf>:
     9fa:	97 f9       	bld	r25, 7
     9fc:	9f 67       	ori	r25, 0x7F	; 127
     9fe:	80 e8       	ldi	r24, 0x80	; 128
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	08 95       	ret

00000a06 <__fp_nan>:
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	80 ec       	ldi	r24, 0xC0	; 192
     a0a:	08 95       	ret

00000a0c <__fp_pscA>:
     a0c:	00 24       	eor	r0, r0
     a0e:	0a 94       	dec	r0
     a10:	16 16       	cp	r1, r22
     a12:	17 06       	cpc	r1, r23
     a14:	18 06       	cpc	r1, r24
     a16:	09 06       	cpc	r0, r25
     a18:	08 95       	ret

00000a1a <__fp_pscB>:
     a1a:	00 24       	eor	r0, r0
     a1c:	0a 94       	dec	r0
     a1e:	12 16       	cp	r1, r18
     a20:	13 06       	cpc	r1, r19
     a22:	14 06       	cpc	r1, r20
     a24:	05 06       	cpc	r0, r21
     a26:	08 95       	ret

00000a28 <__fp_round>:
     a28:	09 2e       	mov	r0, r25
     a2a:	03 94       	inc	r0
     a2c:	00 0c       	add	r0, r0
     a2e:	11 f4       	brne	.+4      	; 0xa34 <__fp_round+0xc>
     a30:	88 23       	and	r24, r24
     a32:	52 f0       	brmi	.+20     	; 0xa48 <__fp_round+0x20>
     a34:	bb 0f       	add	r27, r27
     a36:	40 f4       	brcc	.+16     	; 0xa48 <__fp_round+0x20>
     a38:	bf 2b       	or	r27, r31
     a3a:	11 f4       	brne	.+4      	; 0xa40 <__fp_round+0x18>
     a3c:	60 ff       	sbrs	r22, 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__fp_round+0x20>
     a40:	6f 5f       	subi	r22, 0xFF	; 255
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	8f 4f       	sbci	r24, 0xFF	; 255
     a46:	9f 4f       	sbci	r25, 0xFF	; 255
     a48:	08 95       	ret

00000a4a <__fp_split3>:
     a4a:	57 fd       	sbrc	r21, 7
     a4c:	90 58       	subi	r25, 0x80	; 128
     a4e:	44 0f       	add	r20, r20
     a50:	55 1f       	adc	r21, r21
     a52:	59 f0       	breq	.+22     	; 0xa6a <__fp_splitA+0x10>
     a54:	5f 3f       	cpi	r21, 0xFF	; 255
     a56:	71 f0       	breq	.+28     	; 0xa74 <__fp_splitA+0x1a>
     a58:	47 95       	ror	r20

00000a5a <__fp_splitA>:
     a5a:	88 0f       	add	r24, r24
     a5c:	97 fb       	bst	r25, 7
     a5e:	99 1f       	adc	r25, r25
     a60:	61 f0       	breq	.+24     	; 0xa7a <__fp_splitA+0x20>
     a62:	9f 3f       	cpi	r25, 0xFF	; 255
     a64:	79 f0       	breq	.+30     	; 0xa84 <__fp_splitA+0x2a>
     a66:	87 95       	ror	r24
     a68:	08 95       	ret
     a6a:	12 16       	cp	r1, r18
     a6c:	13 06       	cpc	r1, r19
     a6e:	14 06       	cpc	r1, r20
     a70:	55 1f       	adc	r21, r21
     a72:	f2 cf       	rjmp	.-28     	; 0xa58 <__fp_split3+0xe>
     a74:	46 95       	lsr	r20
     a76:	f1 df       	rcall	.-30     	; 0xa5a <__fp_splitA>
     a78:	08 c0       	rjmp	.+16     	; 0xa8a <__fp_splitA+0x30>
     a7a:	16 16       	cp	r1, r22
     a7c:	17 06       	cpc	r1, r23
     a7e:	18 06       	cpc	r1, r24
     a80:	99 1f       	adc	r25, r25
     a82:	f1 cf       	rjmp	.-30     	; 0xa66 <__fp_splitA+0xc>
     a84:	86 95       	lsr	r24
     a86:	71 05       	cpc	r23, r1
     a88:	61 05       	cpc	r22, r1
     a8a:	08 94       	sec
     a8c:	08 95       	ret

00000a8e <__fp_zero>:
     a8e:	e8 94       	clt

00000a90 <__fp_szero>:
     a90:	bb 27       	eor	r27, r27
     a92:	66 27       	eor	r22, r22
     a94:	77 27       	eor	r23, r23
     a96:	cb 01       	movw	r24, r22
     a98:	97 f9       	bld	r25, 7
     a9a:	08 95       	ret

00000a9c <__mulsf3>:
     a9c:	0e 94 61 05 	call	0xac2	; 0xac2 <__mulsf3x>
     aa0:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_round>
     aa4:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_pscA>
     aa8:	38 f0       	brcs	.+14     	; 0xab8 <__mulsf3+0x1c>
     aaa:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscB>
     aae:	20 f0       	brcs	.+8      	; 0xab8 <__mulsf3+0x1c>
     ab0:	95 23       	and	r25, r21
     ab2:	11 f0       	breq	.+4      	; 0xab8 <__mulsf3+0x1c>
     ab4:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
     ab8:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>
     abc:	11 24       	eor	r1, r1
     abe:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_szero>

00000ac2 <__mulsf3x>:
     ac2:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_split3>
     ac6:	70 f3       	brcs	.-36     	; 0xaa4 <__mulsf3+0x8>

00000ac8 <__mulsf3_pse>:
     ac8:	95 9f       	mul	r25, r21
     aca:	c1 f3       	breq	.-16     	; 0xabc <__mulsf3+0x20>
     acc:	95 0f       	add	r25, r21
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	55 1f       	adc	r21, r21
     ad2:	62 9f       	mul	r22, r18
     ad4:	f0 01       	movw	r30, r0
     ad6:	72 9f       	mul	r23, r18
     ad8:	bb 27       	eor	r27, r27
     ada:	f0 0d       	add	r31, r0
     adc:	b1 1d       	adc	r27, r1
     ade:	63 9f       	mul	r22, r19
     ae0:	aa 27       	eor	r26, r26
     ae2:	f0 0d       	add	r31, r0
     ae4:	b1 1d       	adc	r27, r1
     ae6:	aa 1f       	adc	r26, r26
     ae8:	64 9f       	mul	r22, r20
     aea:	66 27       	eor	r22, r22
     aec:	b0 0d       	add	r27, r0
     aee:	a1 1d       	adc	r26, r1
     af0:	66 1f       	adc	r22, r22
     af2:	82 9f       	mul	r24, r18
     af4:	22 27       	eor	r18, r18
     af6:	b0 0d       	add	r27, r0
     af8:	a1 1d       	adc	r26, r1
     afa:	62 1f       	adc	r22, r18
     afc:	73 9f       	mul	r23, r19
     afe:	b0 0d       	add	r27, r0
     b00:	a1 1d       	adc	r26, r1
     b02:	62 1f       	adc	r22, r18
     b04:	83 9f       	mul	r24, r19
     b06:	a0 0d       	add	r26, r0
     b08:	61 1d       	adc	r22, r1
     b0a:	22 1f       	adc	r18, r18
     b0c:	74 9f       	mul	r23, r20
     b0e:	33 27       	eor	r19, r19
     b10:	a0 0d       	add	r26, r0
     b12:	61 1d       	adc	r22, r1
     b14:	23 1f       	adc	r18, r19
     b16:	84 9f       	mul	r24, r20
     b18:	60 0d       	add	r22, r0
     b1a:	21 1d       	adc	r18, r1
     b1c:	82 2f       	mov	r24, r18
     b1e:	76 2f       	mov	r23, r22
     b20:	6a 2f       	mov	r22, r26
     b22:	11 24       	eor	r1, r1
     b24:	9f 57       	subi	r25, 0x7F	; 127
     b26:	50 40       	sbci	r21, 0x00	; 0
     b28:	9a f0       	brmi	.+38     	; 0xb50 <__mulsf3_pse+0x88>
     b2a:	f1 f0       	breq	.+60     	; 0xb68 <__mulsf3_pse+0xa0>
     b2c:	88 23       	and	r24, r24
     b2e:	4a f0       	brmi	.+18     	; 0xb42 <__mulsf3_pse+0x7a>
     b30:	ee 0f       	add	r30, r30
     b32:	ff 1f       	adc	r31, r31
     b34:	bb 1f       	adc	r27, r27
     b36:	66 1f       	adc	r22, r22
     b38:	77 1f       	adc	r23, r23
     b3a:	88 1f       	adc	r24, r24
     b3c:	91 50       	subi	r25, 0x01	; 1
     b3e:	50 40       	sbci	r21, 0x00	; 0
     b40:	a9 f7       	brne	.-22     	; 0xb2c <__mulsf3_pse+0x64>
     b42:	9e 3f       	cpi	r25, 0xFE	; 254
     b44:	51 05       	cpc	r21, r1
     b46:	80 f0       	brcs	.+32     	; 0xb68 <__mulsf3_pse+0xa0>
     b48:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
     b4c:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_szero>
     b50:	5f 3f       	cpi	r21, 0xFF	; 255
     b52:	e4 f3       	brlt	.-8      	; 0xb4c <__mulsf3_pse+0x84>
     b54:	98 3e       	cpi	r25, 0xE8	; 232
     b56:	d4 f3       	brlt	.-12     	; 0xb4c <__mulsf3_pse+0x84>
     b58:	86 95       	lsr	r24
     b5a:	77 95       	ror	r23
     b5c:	67 95       	ror	r22
     b5e:	b7 95       	ror	r27
     b60:	f7 95       	ror	r31
     b62:	e7 95       	ror	r30
     b64:	9f 5f       	subi	r25, 0xFF	; 255
     b66:	c1 f7       	brne	.-16     	; 0xb58 <__mulsf3_pse+0x90>
     b68:	fe 2b       	or	r31, r30
     b6a:	88 0f       	add	r24, r24
     b6c:	91 1d       	adc	r25, r1
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	97 f9       	bld	r25, 7
     b74:	08 95       	ret

00000b76 <__divmodhi4>:
     b76:	97 fb       	bst	r25, 7
     b78:	07 2e       	mov	r0, r23
     b7a:	16 f4       	brtc	.+4      	; 0xb80 <__divmodhi4+0xa>
     b7c:	00 94       	com	r0
     b7e:	07 d0       	rcall	.+14     	; 0xb8e <__divmodhi4_neg1>
     b80:	77 fd       	sbrc	r23, 7
     b82:	09 d0       	rcall	.+18     	; 0xb96 <__divmodhi4_neg2>
     b84:	0e 94 de 05 	call	0xbbc	; 0xbbc <__udivmodhi4>
     b88:	07 fc       	sbrc	r0, 7
     b8a:	05 d0       	rcall	.+10     	; 0xb96 <__divmodhi4_neg2>
     b8c:	3e f4       	brtc	.+14     	; 0xb9c <__divmodhi4_exit>

00000b8e <__divmodhi4_neg1>:
     b8e:	90 95       	com	r25
     b90:	81 95       	neg	r24
     b92:	9f 4f       	sbci	r25, 0xFF	; 255
     b94:	08 95       	ret

00000b96 <__divmodhi4_neg2>:
     b96:	70 95       	com	r23
     b98:	61 95       	neg	r22
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255

00000b9c <__divmodhi4_exit>:
     b9c:	08 95       	ret

00000b9e <__umulhisi3>:
     b9e:	a2 9f       	mul	r26, r18
     ba0:	b0 01       	movw	r22, r0
     ba2:	b3 9f       	mul	r27, r19
     ba4:	c0 01       	movw	r24, r0
     ba6:	a3 9f       	mul	r26, r19
     ba8:	70 0d       	add	r23, r0
     baa:	81 1d       	adc	r24, r1
     bac:	11 24       	eor	r1, r1
     bae:	91 1d       	adc	r25, r1
     bb0:	b2 9f       	mul	r27, r18
     bb2:	70 0d       	add	r23, r0
     bb4:	81 1d       	adc	r24, r1
     bb6:	11 24       	eor	r1, r1
     bb8:	91 1d       	adc	r25, r1
     bba:	08 95       	ret

00000bbc <__udivmodhi4>:
     bbc:	aa 1b       	sub	r26, r26
     bbe:	bb 1b       	sub	r27, r27
     bc0:	51 e1       	ldi	r21, 0x11	; 17
     bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <__udivmodhi4_ep>

00000bc4 <__udivmodhi4_loop>:
     bc4:	aa 1f       	adc	r26, r26
     bc6:	bb 1f       	adc	r27, r27
     bc8:	a6 17       	cp	r26, r22
     bca:	b7 07       	cpc	r27, r23
     bcc:	10 f0       	brcs	.+4      	; 0xbd2 <__udivmodhi4_ep>
     bce:	a6 1b       	sub	r26, r22
     bd0:	b7 0b       	sbc	r27, r23

00000bd2 <__udivmodhi4_ep>:
     bd2:	88 1f       	adc	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	5a 95       	dec	r21
     bd8:	a9 f7       	brne	.-22     	; 0xbc4 <__udivmodhi4_loop>
     bda:	80 95       	com	r24
     bdc:	90 95       	com	r25
     bde:	bc 01       	movw	r22, r24
     be0:	cd 01       	movw	r24, r26
     be2:	08 95       	ret

00000be4 <sprintf>:
     be4:	ae e0       	ldi	r26, 0x0E	; 14
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 ef       	ldi	r30, 0xF8	; 248
     bea:	f5 e0       	ldi	r31, 0x05	; 5
     bec:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__prologue_saves__+0x1c>
     bf0:	0d 89       	ldd	r16, Y+21	; 0x15
     bf2:	1e 89       	ldd	r17, Y+22	; 0x16
     bf4:	86 e0       	ldi	r24, 0x06	; 6
     bf6:	8c 83       	std	Y+4, r24	; 0x04
     bf8:	1a 83       	std	Y+2, r17	; 0x02
     bfa:	09 83       	std	Y+1, r16	; 0x01
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	9f e7       	ldi	r25, 0x7F	; 127
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	ae 01       	movw	r20, r28
     c06:	47 5e       	subi	r20, 0xE7	; 231
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	6f 89       	ldd	r22, Y+23	; 0x17
     c0c:	78 8d       	ldd	r23, Y+24	; 0x18
     c0e:	ce 01       	movw	r24, r28
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	0e 94 14 06 	call	0xc28	; 0xc28 <vfprintf>
     c16:	ef 81       	ldd	r30, Y+7	; 0x07
     c18:	f8 85       	ldd	r31, Y+8	; 0x08
     c1a:	e0 0f       	add	r30, r16
     c1c:	f1 1f       	adc	r31, r17
     c1e:	10 82       	st	Z, r1
     c20:	2e 96       	adiw	r28, 0x0e	; 14
     c22:	e4 e0       	ldi	r30, 0x04	; 4
     c24:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__epilogue_restores__+0x1c>

00000c28 <vfprintf>:
     c28:	ab e0       	ldi	r26, 0x0B	; 11
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ea e1       	ldi	r30, 0x1A	; 26
     c2e:	f6 e0       	ldi	r31, 0x06	; 6
     c30:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__prologue_saves__>
     c34:	6c 01       	movw	r12, r24
     c36:	7b 01       	movw	r14, r22
     c38:	8a 01       	movw	r16, r20
     c3a:	fc 01       	movw	r30, r24
     c3c:	17 82       	std	Z+7, r1	; 0x07
     c3e:	16 82       	std	Z+6, r1	; 0x06
     c40:	83 81       	ldd	r24, Z+3	; 0x03
     c42:	81 ff       	sbrs	r24, 1
     c44:	cc c1       	rjmp	.+920    	; 0xfde <vfprintf+0x3b6>
     c46:	ce 01       	movw	r24, r28
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	3c 01       	movw	r6, r24
     c4c:	f6 01       	movw	r30, r12
     c4e:	93 81       	ldd	r25, Z+3	; 0x03
     c50:	f7 01       	movw	r30, r14
     c52:	93 fd       	sbrc	r25, 3
     c54:	85 91       	lpm	r24, Z+
     c56:	93 ff       	sbrs	r25, 3
     c58:	81 91       	ld	r24, Z+
     c5a:	7f 01       	movw	r14, r30
     c5c:	88 23       	and	r24, r24
     c5e:	09 f4       	brne	.+2      	; 0xc62 <vfprintf+0x3a>
     c60:	ba c1       	rjmp	.+884    	; 0xfd6 <vfprintf+0x3ae>
     c62:	85 32       	cpi	r24, 0x25	; 37
     c64:	39 f4       	brne	.+14     	; 0xc74 <vfprintf+0x4c>
     c66:	93 fd       	sbrc	r25, 3
     c68:	85 91       	lpm	r24, Z+
     c6a:	93 ff       	sbrs	r25, 3
     c6c:	81 91       	ld	r24, Z+
     c6e:	7f 01       	movw	r14, r30
     c70:	85 32       	cpi	r24, 0x25	; 37
     c72:	29 f4       	brne	.+10     	; 0xc7e <vfprintf+0x56>
     c74:	b6 01       	movw	r22, r12
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     c7c:	e7 cf       	rjmp	.-50     	; 0xc4c <vfprintf+0x24>
     c7e:	91 2c       	mov	r9, r1
     c80:	21 2c       	mov	r2, r1
     c82:	31 2c       	mov	r3, r1
     c84:	ff e1       	ldi	r31, 0x1F	; 31
     c86:	f3 15       	cp	r31, r3
     c88:	d8 f0       	brcs	.+54     	; 0xcc0 <vfprintf+0x98>
     c8a:	8b 32       	cpi	r24, 0x2B	; 43
     c8c:	79 f0       	breq	.+30     	; 0xcac <vfprintf+0x84>
     c8e:	38 f4       	brcc	.+14     	; 0xc9e <vfprintf+0x76>
     c90:	80 32       	cpi	r24, 0x20	; 32
     c92:	79 f0       	breq	.+30     	; 0xcb2 <vfprintf+0x8a>
     c94:	83 32       	cpi	r24, 0x23	; 35
     c96:	a1 f4       	brne	.+40     	; 0xcc0 <vfprintf+0x98>
     c98:	23 2d       	mov	r18, r3
     c9a:	20 61       	ori	r18, 0x10	; 16
     c9c:	1d c0       	rjmp	.+58     	; 0xcd8 <vfprintf+0xb0>
     c9e:	8d 32       	cpi	r24, 0x2D	; 45
     ca0:	61 f0       	breq	.+24     	; 0xcba <vfprintf+0x92>
     ca2:	80 33       	cpi	r24, 0x30	; 48
     ca4:	69 f4       	brne	.+26     	; 0xcc0 <vfprintf+0x98>
     ca6:	23 2d       	mov	r18, r3
     ca8:	21 60       	ori	r18, 0x01	; 1
     caa:	16 c0       	rjmp	.+44     	; 0xcd8 <vfprintf+0xb0>
     cac:	83 2d       	mov	r24, r3
     cae:	82 60       	ori	r24, 0x02	; 2
     cb0:	38 2e       	mov	r3, r24
     cb2:	e3 2d       	mov	r30, r3
     cb4:	e4 60       	ori	r30, 0x04	; 4
     cb6:	3e 2e       	mov	r3, r30
     cb8:	2a c0       	rjmp	.+84     	; 0xd0e <vfprintf+0xe6>
     cba:	f3 2d       	mov	r31, r3
     cbc:	f8 60       	ori	r31, 0x08	; 8
     cbe:	1d c0       	rjmp	.+58     	; 0xcfa <vfprintf+0xd2>
     cc0:	37 fc       	sbrc	r3, 7
     cc2:	2d c0       	rjmp	.+90     	; 0xd1e <vfprintf+0xf6>
     cc4:	20 ed       	ldi	r18, 0xD0	; 208
     cc6:	28 0f       	add	r18, r24
     cc8:	2a 30       	cpi	r18, 0x0A	; 10
     cca:	40 f0       	brcs	.+16     	; 0xcdc <vfprintf+0xb4>
     ccc:	8e 32       	cpi	r24, 0x2E	; 46
     cce:	b9 f4       	brne	.+46     	; 0xcfe <vfprintf+0xd6>
     cd0:	36 fc       	sbrc	r3, 6
     cd2:	81 c1       	rjmp	.+770    	; 0xfd6 <vfprintf+0x3ae>
     cd4:	23 2d       	mov	r18, r3
     cd6:	20 64       	ori	r18, 0x40	; 64
     cd8:	32 2e       	mov	r3, r18
     cda:	19 c0       	rjmp	.+50     	; 0xd0e <vfprintf+0xe6>
     cdc:	36 fe       	sbrs	r3, 6
     cde:	06 c0       	rjmp	.+12     	; 0xcec <vfprintf+0xc4>
     ce0:	8a e0       	ldi	r24, 0x0A	; 10
     ce2:	98 9e       	mul	r9, r24
     ce4:	20 0d       	add	r18, r0
     ce6:	11 24       	eor	r1, r1
     ce8:	92 2e       	mov	r9, r18
     cea:	11 c0       	rjmp	.+34     	; 0xd0e <vfprintf+0xe6>
     cec:	ea e0       	ldi	r30, 0x0A	; 10
     cee:	2e 9e       	mul	r2, r30
     cf0:	20 0d       	add	r18, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	22 2e       	mov	r2, r18
     cf6:	f3 2d       	mov	r31, r3
     cf8:	f0 62       	ori	r31, 0x20	; 32
     cfa:	3f 2e       	mov	r3, r31
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <vfprintf+0xe6>
     cfe:	8c 36       	cpi	r24, 0x6C	; 108
     d00:	21 f4       	brne	.+8      	; 0xd0a <vfprintf+0xe2>
     d02:	83 2d       	mov	r24, r3
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	38 2e       	mov	r3, r24
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <vfprintf+0xe6>
     d0a:	88 36       	cpi	r24, 0x68	; 104
     d0c:	41 f4       	brne	.+16     	; 0xd1e <vfprintf+0xf6>
     d0e:	f7 01       	movw	r30, r14
     d10:	93 fd       	sbrc	r25, 3
     d12:	85 91       	lpm	r24, Z+
     d14:	93 ff       	sbrs	r25, 3
     d16:	81 91       	ld	r24, Z+
     d18:	7f 01       	movw	r14, r30
     d1a:	81 11       	cpse	r24, r1
     d1c:	b3 cf       	rjmp	.-154    	; 0xc84 <vfprintf+0x5c>
     d1e:	98 2f       	mov	r25, r24
     d20:	9f 7d       	andi	r25, 0xDF	; 223
     d22:	95 54       	subi	r25, 0x45	; 69
     d24:	93 30       	cpi	r25, 0x03	; 3
     d26:	28 f4       	brcc	.+10     	; 0xd32 <vfprintf+0x10a>
     d28:	0c 5f       	subi	r16, 0xFC	; 252
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	9f e3       	ldi	r25, 0x3F	; 63
     d2e:	99 83       	std	Y+1, r25	; 0x01
     d30:	0d c0       	rjmp	.+26     	; 0xd4c <vfprintf+0x124>
     d32:	83 36       	cpi	r24, 0x63	; 99
     d34:	31 f0       	breq	.+12     	; 0xd42 <vfprintf+0x11a>
     d36:	83 37       	cpi	r24, 0x73	; 115
     d38:	71 f0       	breq	.+28     	; 0xd56 <vfprintf+0x12e>
     d3a:	83 35       	cpi	r24, 0x53	; 83
     d3c:	09 f0       	breq	.+2      	; 0xd40 <vfprintf+0x118>
     d3e:	59 c0       	rjmp	.+178    	; 0xdf2 <vfprintf+0x1ca>
     d40:	21 c0       	rjmp	.+66     	; 0xd84 <vfprintf+0x15c>
     d42:	f8 01       	movw	r30, r16
     d44:	80 81       	ld	r24, Z
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	0e 5f       	subi	r16, 0xFE	; 254
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	88 24       	eor	r8, r8
     d4e:	83 94       	inc	r8
     d50:	91 2c       	mov	r9, r1
     d52:	53 01       	movw	r10, r6
     d54:	13 c0       	rjmp	.+38     	; 0xd7c <vfprintf+0x154>
     d56:	28 01       	movw	r4, r16
     d58:	f2 e0       	ldi	r31, 0x02	; 2
     d5a:	4f 0e       	add	r4, r31
     d5c:	51 1c       	adc	r5, r1
     d5e:	f8 01       	movw	r30, r16
     d60:	a0 80       	ld	r10, Z
     d62:	b1 80       	ldd	r11, Z+1	; 0x01
     d64:	36 fe       	sbrs	r3, 6
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <vfprintf+0x146>
     d68:	69 2d       	mov	r22, r9
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <vfprintf+0x14a>
     d6e:	6f ef       	ldi	r22, 0xFF	; 255
     d70:	7f ef       	ldi	r23, 0xFF	; 255
     d72:	c5 01       	movw	r24, r10
     d74:	0e 94 00 08 	call	0x1000	; 0x1000 <strnlen>
     d78:	4c 01       	movw	r8, r24
     d7a:	82 01       	movw	r16, r4
     d7c:	f3 2d       	mov	r31, r3
     d7e:	ff 77       	andi	r31, 0x7F	; 127
     d80:	3f 2e       	mov	r3, r31
     d82:	16 c0       	rjmp	.+44     	; 0xdb0 <vfprintf+0x188>
     d84:	28 01       	movw	r4, r16
     d86:	22 e0       	ldi	r18, 0x02	; 2
     d88:	42 0e       	add	r4, r18
     d8a:	51 1c       	adc	r5, r1
     d8c:	f8 01       	movw	r30, r16
     d8e:	a0 80       	ld	r10, Z
     d90:	b1 80       	ldd	r11, Z+1	; 0x01
     d92:	36 fe       	sbrs	r3, 6
     d94:	03 c0       	rjmp	.+6      	; 0xd9c <vfprintf+0x174>
     d96:	69 2d       	mov	r22, r9
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <vfprintf+0x178>
     d9c:	6f ef       	ldi	r22, 0xFF	; 255
     d9e:	7f ef       	ldi	r23, 0xFF	; 255
     da0:	c5 01       	movw	r24, r10
     da2:	0e 94 f5 07 	call	0xfea	; 0xfea <strnlen_P>
     da6:	4c 01       	movw	r8, r24
     da8:	f3 2d       	mov	r31, r3
     daa:	f0 68       	ori	r31, 0x80	; 128
     dac:	3f 2e       	mov	r3, r31
     dae:	82 01       	movw	r16, r4
     db0:	33 fc       	sbrc	r3, 3
     db2:	1b c0       	rjmp	.+54     	; 0xdea <vfprintf+0x1c2>
     db4:	82 2d       	mov	r24, r2
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	88 16       	cp	r8, r24
     dba:	99 06       	cpc	r9, r25
     dbc:	b0 f4       	brcc	.+44     	; 0xdea <vfprintf+0x1c2>
     dbe:	b6 01       	movw	r22, r12
     dc0:	80 e2       	ldi	r24, 0x20	; 32
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     dc8:	2a 94       	dec	r2
     dca:	f4 cf       	rjmp	.-24     	; 0xdb4 <vfprintf+0x18c>
     dcc:	f5 01       	movw	r30, r10
     dce:	37 fc       	sbrc	r3, 7
     dd0:	85 91       	lpm	r24, Z+
     dd2:	37 fe       	sbrs	r3, 7
     dd4:	81 91       	ld	r24, Z+
     dd6:	5f 01       	movw	r10, r30
     dd8:	b6 01       	movw	r22, r12
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     de0:	21 10       	cpse	r2, r1
     de2:	2a 94       	dec	r2
     de4:	21 e0       	ldi	r18, 0x01	; 1
     de6:	82 1a       	sub	r8, r18
     de8:	91 08       	sbc	r9, r1
     dea:	81 14       	cp	r8, r1
     dec:	91 04       	cpc	r9, r1
     dee:	71 f7       	brne	.-36     	; 0xdcc <vfprintf+0x1a4>
     df0:	e8 c0       	rjmp	.+464    	; 0xfc2 <vfprintf+0x39a>
     df2:	84 36       	cpi	r24, 0x64	; 100
     df4:	11 f0       	breq	.+4      	; 0xdfa <vfprintf+0x1d2>
     df6:	89 36       	cpi	r24, 0x69	; 105
     df8:	41 f5       	brne	.+80     	; 0xe4a <vfprintf+0x222>
     dfa:	f8 01       	movw	r30, r16
     dfc:	37 fe       	sbrs	r3, 7
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <vfprintf+0x1e6>
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	0c 5f       	subi	r16, 0xFC	; 252
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	08 c0       	rjmp	.+16     	; 0xe1e <vfprintf+0x1f6>
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	07 2e       	mov	r0, r23
     e14:	00 0c       	add	r0, r0
     e16:	88 0b       	sbc	r24, r24
     e18:	99 0b       	sbc	r25, r25
     e1a:	0e 5f       	subi	r16, 0xFE	; 254
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	f3 2d       	mov	r31, r3
     e20:	ff 76       	andi	r31, 0x6F	; 111
     e22:	3f 2e       	mov	r3, r31
     e24:	97 ff       	sbrs	r25, 7
     e26:	09 c0       	rjmp	.+18     	; 0xe3a <vfprintf+0x212>
     e28:	90 95       	com	r25
     e2a:	80 95       	com	r24
     e2c:	70 95       	com	r23
     e2e:	61 95       	neg	r22
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	8f 4f       	sbci	r24, 0xFF	; 255
     e34:	9f 4f       	sbci	r25, 0xFF	; 255
     e36:	f0 68       	ori	r31, 0x80	; 128
     e38:	3f 2e       	mov	r3, r31
     e3a:	2a e0       	ldi	r18, 0x0A	; 10
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	a3 01       	movw	r20, r6
     e40:	0e 94 47 08 	call	0x108e	; 0x108e <__ultoa_invert>
     e44:	88 2e       	mov	r8, r24
     e46:	86 18       	sub	r8, r6
     e48:	45 c0       	rjmp	.+138    	; 0xed4 <vfprintf+0x2ac>
     e4a:	85 37       	cpi	r24, 0x75	; 117
     e4c:	31 f4       	brne	.+12     	; 0xe5a <vfprintf+0x232>
     e4e:	23 2d       	mov	r18, r3
     e50:	2f 7e       	andi	r18, 0xEF	; 239
     e52:	b2 2e       	mov	r11, r18
     e54:	2a e0       	ldi	r18, 0x0A	; 10
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	25 c0       	rjmp	.+74     	; 0xea4 <vfprintf+0x27c>
     e5a:	93 2d       	mov	r25, r3
     e5c:	99 7f       	andi	r25, 0xF9	; 249
     e5e:	b9 2e       	mov	r11, r25
     e60:	8f 36       	cpi	r24, 0x6F	; 111
     e62:	c1 f0       	breq	.+48     	; 0xe94 <vfprintf+0x26c>
     e64:	18 f4       	brcc	.+6      	; 0xe6c <vfprintf+0x244>
     e66:	88 35       	cpi	r24, 0x58	; 88
     e68:	79 f0       	breq	.+30     	; 0xe88 <vfprintf+0x260>
     e6a:	b5 c0       	rjmp	.+362    	; 0xfd6 <vfprintf+0x3ae>
     e6c:	80 37       	cpi	r24, 0x70	; 112
     e6e:	19 f0       	breq	.+6      	; 0xe76 <vfprintf+0x24e>
     e70:	88 37       	cpi	r24, 0x78	; 120
     e72:	21 f0       	breq	.+8      	; 0xe7c <vfprintf+0x254>
     e74:	b0 c0       	rjmp	.+352    	; 0xfd6 <vfprintf+0x3ae>
     e76:	e9 2f       	mov	r30, r25
     e78:	e0 61       	ori	r30, 0x10	; 16
     e7a:	be 2e       	mov	r11, r30
     e7c:	b4 fe       	sbrs	r11, 4
     e7e:	0d c0       	rjmp	.+26     	; 0xe9a <vfprintf+0x272>
     e80:	fb 2d       	mov	r31, r11
     e82:	f4 60       	ori	r31, 0x04	; 4
     e84:	bf 2e       	mov	r11, r31
     e86:	09 c0       	rjmp	.+18     	; 0xe9a <vfprintf+0x272>
     e88:	34 fe       	sbrs	r3, 4
     e8a:	0a c0       	rjmp	.+20     	; 0xea0 <vfprintf+0x278>
     e8c:	29 2f       	mov	r18, r25
     e8e:	26 60       	ori	r18, 0x06	; 6
     e90:	b2 2e       	mov	r11, r18
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <vfprintf+0x278>
     e94:	28 e0       	ldi	r18, 0x08	; 8
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <vfprintf+0x27c>
     e9a:	20 e1       	ldi	r18, 0x10	; 16
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <vfprintf+0x27c>
     ea0:	20 e1       	ldi	r18, 0x10	; 16
     ea2:	32 e0       	ldi	r19, 0x02	; 2
     ea4:	f8 01       	movw	r30, r16
     ea6:	b7 fe       	sbrs	r11, 7
     ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <vfprintf+0x290>
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	0c 5f       	subi	r16, 0xFC	; 252
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	06 c0       	rjmp	.+12     	; 0xec4 <vfprintf+0x29c>
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 5f       	subi	r16, 0xFE	; 254
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	a3 01       	movw	r20, r6
     ec6:	0e 94 47 08 	call	0x108e	; 0x108e <__ultoa_invert>
     eca:	88 2e       	mov	r8, r24
     ecc:	86 18       	sub	r8, r6
     ece:	fb 2d       	mov	r31, r11
     ed0:	ff 77       	andi	r31, 0x7F	; 127
     ed2:	3f 2e       	mov	r3, r31
     ed4:	36 fe       	sbrs	r3, 6
     ed6:	0d c0       	rjmp	.+26     	; 0xef2 <vfprintf+0x2ca>
     ed8:	23 2d       	mov	r18, r3
     eda:	2e 7f       	andi	r18, 0xFE	; 254
     edc:	a2 2e       	mov	r10, r18
     ede:	89 14       	cp	r8, r9
     ee0:	58 f4       	brcc	.+22     	; 0xef8 <vfprintf+0x2d0>
     ee2:	34 fe       	sbrs	r3, 4
     ee4:	0b c0       	rjmp	.+22     	; 0xefc <vfprintf+0x2d4>
     ee6:	32 fc       	sbrc	r3, 2
     ee8:	09 c0       	rjmp	.+18     	; 0xefc <vfprintf+0x2d4>
     eea:	83 2d       	mov	r24, r3
     eec:	8e 7e       	andi	r24, 0xEE	; 238
     eee:	a8 2e       	mov	r10, r24
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <vfprintf+0x2d4>
     ef2:	b8 2c       	mov	r11, r8
     ef4:	a3 2c       	mov	r10, r3
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <vfprintf+0x2d6>
     ef8:	b8 2c       	mov	r11, r8
     efa:	01 c0       	rjmp	.+2      	; 0xefe <vfprintf+0x2d6>
     efc:	b9 2c       	mov	r11, r9
     efe:	a4 fe       	sbrs	r10, 4
     f00:	0f c0       	rjmp	.+30     	; 0xf20 <vfprintf+0x2f8>
     f02:	fe 01       	movw	r30, r28
     f04:	e8 0d       	add	r30, r8
     f06:	f1 1d       	adc	r31, r1
     f08:	80 81       	ld	r24, Z
     f0a:	80 33       	cpi	r24, 0x30	; 48
     f0c:	21 f4       	brne	.+8      	; 0xf16 <vfprintf+0x2ee>
     f0e:	9a 2d       	mov	r25, r10
     f10:	99 7e       	andi	r25, 0xE9	; 233
     f12:	a9 2e       	mov	r10, r25
     f14:	09 c0       	rjmp	.+18     	; 0xf28 <vfprintf+0x300>
     f16:	a2 fe       	sbrs	r10, 2
     f18:	06 c0       	rjmp	.+12     	; 0xf26 <vfprintf+0x2fe>
     f1a:	b3 94       	inc	r11
     f1c:	b3 94       	inc	r11
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <vfprintf+0x300>
     f20:	8a 2d       	mov	r24, r10
     f22:	86 78       	andi	r24, 0x86	; 134
     f24:	09 f0       	breq	.+2      	; 0xf28 <vfprintf+0x300>
     f26:	b3 94       	inc	r11
     f28:	a3 fc       	sbrc	r10, 3
     f2a:	11 c0       	rjmp	.+34     	; 0xf4e <vfprintf+0x326>
     f2c:	a0 fe       	sbrs	r10, 0
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <vfprintf+0x314>
     f30:	b2 14       	cp	r11, r2
     f32:	88 f4       	brcc	.+34     	; 0xf56 <vfprintf+0x32e>
     f34:	28 0c       	add	r2, r8
     f36:	92 2c       	mov	r9, r2
     f38:	9b 18       	sub	r9, r11
     f3a:	0e c0       	rjmp	.+28     	; 0xf58 <vfprintf+0x330>
     f3c:	b2 14       	cp	r11, r2
     f3e:	60 f4       	brcc	.+24     	; 0xf58 <vfprintf+0x330>
     f40:	b6 01       	movw	r22, r12
     f42:	80 e2       	ldi	r24, 0x20	; 32
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     f4a:	b3 94       	inc	r11
     f4c:	f7 cf       	rjmp	.-18     	; 0xf3c <vfprintf+0x314>
     f4e:	b2 14       	cp	r11, r2
     f50:	18 f4       	brcc	.+6      	; 0xf58 <vfprintf+0x330>
     f52:	2b 18       	sub	r2, r11
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <vfprintf+0x332>
     f56:	98 2c       	mov	r9, r8
     f58:	21 2c       	mov	r2, r1
     f5a:	a4 fe       	sbrs	r10, 4
     f5c:	10 c0       	rjmp	.+32     	; 0xf7e <vfprintf+0x356>
     f5e:	b6 01       	movw	r22, r12
     f60:	80 e3       	ldi	r24, 0x30	; 48
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     f68:	a2 fe       	sbrs	r10, 2
     f6a:	17 c0       	rjmp	.+46     	; 0xf9a <vfprintf+0x372>
     f6c:	a1 fc       	sbrc	r10, 1
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <vfprintf+0x34e>
     f70:	88 e7       	ldi	r24, 0x78	; 120
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <vfprintf+0x352>
     f76:	88 e5       	ldi	r24, 0x58	; 88
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	b6 01       	movw	r22, r12
     f7c:	0c c0       	rjmp	.+24     	; 0xf96 <vfprintf+0x36e>
     f7e:	8a 2d       	mov	r24, r10
     f80:	86 78       	andi	r24, 0x86	; 134
     f82:	59 f0       	breq	.+22     	; 0xf9a <vfprintf+0x372>
     f84:	a1 fe       	sbrs	r10, 1
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <vfprintf+0x364>
     f88:	8b e2       	ldi	r24, 0x2B	; 43
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <vfprintf+0x366>
     f8c:	80 e2       	ldi	r24, 0x20	; 32
     f8e:	a7 fc       	sbrc	r10, 7
     f90:	8d e2       	ldi	r24, 0x2D	; 45
     f92:	b6 01       	movw	r22, r12
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     f9a:	89 14       	cp	r8, r9
     f9c:	38 f4       	brcc	.+14     	; 0xfac <vfprintf+0x384>
     f9e:	b6 01       	movw	r22, r12
     fa0:	80 e3       	ldi	r24, 0x30	; 48
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     fa8:	9a 94       	dec	r9
     faa:	f7 cf       	rjmp	.-18     	; 0xf9a <vfprintf+0x372>
     fac:	8a 94       	dec	r8
     fae:	f3 01       	movw	r30, r6
     fb0:	e8 0d       	add	r30, r8
     fb2:	f1 1d       	adc	r31, r1
     fb4:	80 81       	ld	r24, Z
     fb6:	b6 01       	movw	r22, r12
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     fbe:	81 10       	cpse	r8, r1
     fc0:	f5 cf       	rjmp	.-22     	; 0xfac <vfprintf+0x384>
     fc2:	22 20       	and	r2, r2
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <vfprintf+0x3a0>
     fc6:	42 ce       	rjmp	.-892    	; 0xc4c <vfprintf+0x24>
     fc8:	b6 01       	movw	r22, r12
     fca:	80 e2       	ldi	r24, 0x20	; 32
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     fd2:	2a 94       	dec	r2
     fd4:	f6 cf       	rjmp	.-20     	; 0xfc2 <vfprintf+0x39a>
     fd6:	f6 01       	movw	r30, r12
     fd8:	86 81       	ldd	r24, Z+6	; 0x06
     fda:	97 81       	ldd	r25, Z+7	; 0x07
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <vfprintf+0x3ba>
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	9f ef       	ldi	r25, 0xFF	; 255
     fe2:	2b 96       	adiw	r28, 0x0b	; 11
     fe4:	e2 e1       	ldi	r30, 0x12	; 18
     fe6:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__epilogue_restores__>

00000fea <strnlen_P>:
     fea:	fc 01       	movw	r30, r24
     fec:	05 90       	lpm	r0, Z+
     fee:	61 50       	subi	r22, 0x01	; 1
     ff0:	70 40       	sbci	r23, 0x00	; 0
     ff2:	01 10       	cpse	r0, r1
     ff4:	d8 f7       	brcc	.-10     	; 0xfec <strnlen_P+0x2>
     ff6:	80 95       	com	r24
     ff8:	90 95       	com	r25
     ffa:	8e 0f       	add	r24, r30
     ffc:	9f 1f       	adc	r25, r31
     ffe:	08 95       	ret

00001000 <strnlen>:
    1000:	fc 01       	movw	r30, r24
    1002:	61 50       	subi	r22, 0x01	; 1
    1004:	70 40       	sbci	r23, 0x00	; 0
    1006:	01 90       	ld	r0, Z+
    1008:	01 10       	cpse	r0, r1
    100a:	d8 f7       	brcc	.-10     	; 0x1002 <strnlen+0x2>
    100c:	80 95       	com	r24
    100e:	90 95       	com	r25
    1010:	8e 0f       	add	r24, r30
    1012:	9f 1f       	adc	r25, r31
    1014:	08 95       	ret

00001016 <fputc>:
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	fb 01       	movw	r30, r22
    1020:	23 81       	ldd	r18, Z+3	; 0x03
    1022:	21 fd       	sbrc	r18, 1
    1024:	03 c0       	rjmp	.+6      	; 0x102c <fputc+0x16>
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	9f ef       	ldi	r25, 0xFF	; 255
    102a:	2c c0       	rjmp	.+88     	; 0x1084 <fputc+0x6e>
    102c:	22 ff       	sbrs	r18, 2
    102e:	16 c0       	rjmp	.+44     	; 0x105c <fputc+0x46>
    1030:	46 81       	ldd	r20, Z+6	; 0x06
    1032:	57 81       	ldd	r21, Z+7	; 0x07
    1034:	24 81       	ldd	r18, Z+4	; 0x04
    1036:	35 81       	ldd	r19, Z+5	; 0x05
    1038:	42 17       	cp	r20, r18
    103a:	53 07       	cpc	r21, r19
    103c:	44 f4       	brge	.+16     	; 0x104e <fputc+0x38>
    103e:	a0 81       	ld	r26, Z
    1040:	b1 81       	ldd	r27, Z+1	; 0x01
    1042:	9d 01       	movw	r18, r26
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	31 83       	std	Z+1, r19	; 0x01
    104a:	20 83       	st	Z, r18
    104c:	8c 93       	st	X, r24
    104e:	26 81       	ldd	r18, Z+6	; 0x06
    1050:	37 81       	ldd	r19, Z+7	; 0x07
    1052:	2f 5f       	subi	r18, 0xFF	; 255
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	37 83       	std	Z+7, r19	; 0x07
    1058:	26 83       	std	Z+6, r18	; 0x06
    105a:	14 c0       	rjmp	.+40     	; 0x1084 <fputc+0x6e>
    105c:	8b 01       	movw	r16, r22
    105e:	ec 01       	movw	r28, r24
    1060:	fb 01       	movw	r30, r22
    1062:	00 84       	ldd	r0, Z+8	; 0x08
    1064:	f1 85       	ldd	r31, Z+9	; 0x09
    1066:	e0 2d       	mov	r30, r0
    1068:	09 95       	icall
    106a:	89 2b       	or	r24, r25
    106c:	e1 f6       	brne	.-72     	; 0x1026 <fputc+0x10>
    106e:	d8 01       	movw	r26, r16
    1070:	16 96       	adiw	r26, 0x06	; 6
    1072:	8d 91       	ld	r24, X+
    1074:	9c 91       	ld	r25, X
    1076:	17 97       	sbiw	r26, 0x07	; 7
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	17 96       	adiw	r26, 0x07	; 7
    107c:	9c 93       	st	X, r25
    107e:	8e 93       	st	-X, r24
    1080:	16 97       	sbiw	r26, 0x06	; 6
    1082:	ce 01       	movw	r24, r28
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	08 95       	ret

0000108e <__ultoa_invert>:
    108e:	fa 01       	movw	r30, r20
    1090:	aa 27       	eor	r26, r26
    1092:	28 30       	cpi	r18, 0x08	; 8
    1094:	51 f1       	breq	.+84     	; 0x10ea <__ultoa_invert+0x5c>
    1096:	20 31       	cpi	r18, 0x10	; 16
    1098:	81 f1       	breq	.+96     	; 0x10fa <__ultoa_invert+0x6c>
    109a:	e8 94       	clt
    109c:	6f 93       	push	r22
    109e:	6e 7f       	andi	r22, 0xFE	; 254
    10a0:	6e 5f       	subi	r22, 0xFE	; 254
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	8f 4f       	sbci	r24, 0xFF	; 255
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	af 4f       	sbci	r26, 0xFF	; 255
    10aa:	b1 e0       	ldi	r27, 0x01	; 1
    10ac:	3e d0       	rcall	.+124    	; 0x112a <__ultoa_invert+0x9c>
    10ae:	b4 e0       	ldi	r27, 0x04	; 4
    10b0:	3c d0       	rcall	.+120    	; 0x112a <__ultoa_invert+0x9c>
    10b2:	67 0f       	add	r22, r23
    10b4:	78 1f       	adc	r23, r24
    10b6:	89 1f       	adc	r24, r25
    10b8:	9a 1f       	adc	r25, r26
    10ba:	a1 1d       	adc	r26, r1
    10bc:	68 0f       	add	r22, r24
    10be:	79 1f       	adc	r23, r25
    10c0:	8a 1f       	adc	r24, r26
    10c2:	91 1d       	adc	r25, r1
    10c4:	a1 1d       	adc	r26, r1
    10c6:	6a 0f       	add	r22, r26
    10c8:	71 1d       	adc	r23, r1
    10ca:	81 1d       	adc	r24, r1
    10cc:	91 1d       	adc	r25, r1
    10ce:	a1 1d       	adc	r26, r1
    10d0:	20 d0       	rcall	.+64     	; 0x1112 <__ultoa_invert+0x84>
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <__ultoa_invert+0x48>
    10d4:	68 94       	set
    10d6:	3f 91       	pop	r19
    10d8:	2a e0       	ldi	r18, 0x0A	; 10
    10da:	26 9f       	mul	r18, r22
    10dc:	11 24       	eor	r1, r1
    10de:	30 19       	sub	r19, r0
    10e0:	30 5d       	subi	r19, 0xD0	; 208
    10e2:	31 93       	st	Z+, r19
    10e4:	de f6       	brtc	.-74     	; 0x109c <__ultoa_invert+0xe>
    10e6:	cf 01       	movw	r24, r30
    10e8:	08 95       	ret
    10ea:	46 2f       	mov	r20, r22
    10ec:	47 70       	andi	r20, 0x07	; 7
    10ee:	40 5d       	subi	r20, 0xD0	; 208
    10f0:	41 93       	st	Z+, r20
    10f2:	b3 e0       	ldi	r27, 0x03	; 3
    10f4:	0f d0       	rcall	.+30     	; 0x1114 <__ultoa_invert+0x86>
    10f6:	c9 f7       	brne	.-14     	; 0x10ea <__ultoa_invert+0x5c>
    10f8:	f6 cf       	rjmp	.-20     	; 0x10e6 <__ultoa_invert+0x58>
    10fa:	46 2f       	mov	r20, r22
    10fc:	4f 70       	andi	r20, 0x0F	; 15
    10fe:	40 5d       	subi	r20, 0xD0	; 208
    1100:	4a 33       	cpi	r20, 0x3A	; 58
    1102:	18 f0       	brcs	.+6      	; 0x110a <__ultoa_invert+0x7c>
    1104:	49 5d       	subi	r20, 0xD9	; 217
    1106:	31 fd       	sbrc	r19, 1
    1108:	40 52       	subi	r20, 0x20	; 32
    110a:	41 93       	st	Z+, r20
    110c:	02 d0       	rcall	.+4      	; 0x1112 <__ultoa_invert+0x84>
    110e:	a9 f7       	brne	.-22     	; 0x10fa <__ultoa_invert+0x6c>
    1110:	ea cf       	rjmp	.-44     	; 0x10e6 <__ultoa_invert+0x58>
    1112:	b4 e0       	ldi	r27, 0x04	; 4
    1114:	a6 95       	lsr	r26
    1116:	97 95       	ror	r25
    1118:	87 95       	ror	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	ba 95       	dec	r27
    1120:	c9 f7       	brne	.-14     	; 0x1114 <__ultoa_invert+0x86>
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	61 05       	cpc	r22, r1
    1126:	71 05       	cpc	r23, r1
    1128:	08 95       	ret
    112a:	9b 01       	movw	r18, r22
    112c:	ac 01       	movw	r20, r24
    112e:	0a 2e       	mov	r0, r26
    1130:	06 94       	lsr	r0
    1132:	57 95       	ror	r21
    1134:	47 95       	ror	r20
    1136:	37 95       	ror	r19
    1138:	27 95       	ror	r18
    113a:	ba 95       	dec	r27
    113c:	c9 f7       	brne	.-14     	; 0x1130 <__ultoa_invert+0xa2>
    113e:	62 0f       	add	r22, r18
    1140:	73 1f       	adc	r23, r19
    1142:	84 1f       	adc	r24, r20
    1144:	95 1f       	adc	r25, r21
    1146:	a0 1d       	adc	r26, r0
    1148:	08 95       	ret

0000114a <__prologue_saves__>:
    114a:	2f 92       	push	r2
    114c:	3f 92       	push	r3
    114e:	4f 92       	push	r4
    1150:	5f 92       	push	r5
    1152:	6f 92       	push	r6
    1154:	7f 92       	push	r7
    1156:	8f 92       	push	r8
    1158:	9f 92       	push	r9
    115a:	af 92       	push	r10
    115c:	bf 92       	push	r11
    115e:	cf 92       	push	r12
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	ca 1b       	sub	r28, r26
    1174:	db 0b       	sbc	r29, r27
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	09 94       	ijmp

00001182 <__epilogue_restores__>:
    1182:	2a 88       	ldd	r2, Y+18	; 0x12
    1184:	39 88       	ldd	r3, Y+17	; 0x11
    1186:	48 88       	ldd	r4, Y+16	; 0x10
    1188:	5f 84       	ldd	r5, Y+15	; 0x0f
    118a:	6e 84       	ldd	r6, Y+14	; 0x0e
    118c:	7d 84       	ldd	r7, Y+13	; 0x0d
    118e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1190:	9b 84       	ldd	r9, Y+11	; 0x0b
    1192:	aa 84       	ldd	r10, Y+10	; 0x0a
    1194:	b9 84       	ldd	r11, Y+9	; 0x09
    1196:	c8 84       	ldd	r12, Y+8	; 0x08
    1198:	df 80       	ldd	r13, Y+7	; 0x07
    119a:	ee 80       	ldd	r14, Y+6	; 0x06
    119c:	fd 80       	ldd	r15, Y+5	; 0x05
    119e:	0c 81       	ldd	r16, Y+4	; 0x04
    11a0:	1b 81       	ldd	r17, Y+3	; 0x03
    11a2:	aa 81       	ldd	r26, Y+2	; 0x02
    11a4:	b9 81       	ldd	r27, Y+1	; 0x01
    11a6:	ce 0f       	add	r28, r30
    11a8:	d1 1d       	adc	r29, r1
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	ed 01       	movw	r28, r26
    11b6:	08 95       	ret

000011b8 <_exit>:
    11b8:	f8 94       	cli

000011ba <__stop_program>:
    11ba:	ff cf       	rjmp	.-2      	; 0x11ba <__stop_program>
