
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000bd4  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800108  00800108  00000c70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001568  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b64  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c6d  00000000  00000000  00002f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061f  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096b  00000000  00000000  00004473  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004dde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_20>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  9e:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
  a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
  a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
  b2:	8e ee       	ldi	r24, 0xEE	; 238
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
  b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
  bc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
  c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	/*
	AD konverzija
	ISR okine kada je gotova konverzija
	*/
	
	PORTD |= 1<<PINB7;       //togle za osciloskop
  d4:	5f 9a       	sbi	0x0b, 7	; 11
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
  d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
  da:	81 11       	cpse	r24, r1
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <__vector_21+0x2e>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <mereni_napon+0x1>
  ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <mereni_napon>
  ee:	0c c0       	rjmp	.+24     	; 0x108 <__vector_21+0x46>
	else if(ad_kanal == 1)
  f0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	41 f4       	brne	.+16     	; 0x108 <__vector_21+0x46>
		merena_struja = (uint16_t)ADC;
  f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  fc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 100:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <merena_struja+0x1>
 104:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 77       	andi	r24, 0x7F	; 127
 110:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 112:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
 11c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	10 f0       	brcs	.+4      	; 0x128 <__vector_21+0x66>
	{
		ad_kanal = 0;
 124:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
	
	
	
	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
 128:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 12c:	88 23       	and	r24, r24
 12e:	19 f0       	breq	.+6      	; 0x136 <__vector_21+0x74>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	39 f0       	breq	.+14     	; 0x142 <__vector_21+0x80>
 134:	0e c0       	rjmp	.+28     	; 0x152 <__vector_21+0x90>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
		break;
 140:	08 c0       	rjmp	.+16     	; 0x152 <__vector_21+0x90>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	80 83       	st	Z, r24
				ADMUX |= (0b1);
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 6c       	ori	r24, 0xC0	; 192
 15a:	80 83       	st	Z, r24
	
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us

	PORTD &= ~(1<<7);       //togle za osciloskop
 15c:	5f 98       	cbi	0x0b, 7	; 11
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
 170:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 174:	88 e4       	ldi	r24, 0x48	; 72
 176:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	80 63       	ori	r24, 0x30	; 48
 17e:	88 b9       	out	0x08, r24	; 8
 180:	08 95       	ret

00000182 <i2c_start_wait>:
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec eb       	ldi	r30, 0xBC	; 188
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	24 ea       	ldi	r18, 0xA4	; 164
 18c:	a9 eb       	ldi	r26, 0xB9	; 185
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	cb eb       	ldi	r28, 0xBB	; 187
 192:	d0 e0       	ldi	r29, 0x00	; 0
 194:	34 e8       	ldi	r19, 0x84	; 132
 196:	44 e9       	ldi	r20, 0x94	; 148
 198:	20 83       	st	Z, r18
 19a:	90 81       	ld	r25, Z
 19c:	99 23       	and	r25, r25
 19e:	ec f7       	brge	.-6      	; 0x19a <i2c_start_wait+0x18>
 1a0:	9c 91       	ld	r25, X
 1a2:	98 7f       	andi	r25, 0xF8	; 248
 1a4:	98 30       	cpi	r25, 0x08	; 8
 1a6:	11 f0       	breq	.+4      	; 0x1ac <i2c_start_wait+0x2a>
 1a8:	90 31       	cpi	r25, 0x10	; 16
 1aa:	b1 f7       	brne	.-20     	; 0x198 <i2c_start_wait+0x16>
 1ac:	88 83       	st	Y, r24
 1ae:	30 83       	st	Z, r19
 1b0:	90 81       	ld	r25, Z
 1b2:	99 23       	and	r25, r25
 1b4:	ec f7       	brge	.-6      	; 0x1b0 <i2c_start_wait+0x2e>
 1b6:	9c 91       	ld	r25, X
 1b8:	98 7f       	andi	r25, 0xF8	; 248
 1ba:	90 32       	cpi	r25, 0x20	; 32
 1bc:	11 f0       	breq	.+4      	; 0x1c2 <i2c_start_wait+0x40>
 1be:	98 35       	cpi	r25, 0x58	; 88
 1c0:	29 f4       	brne	.+10     	; 0x1cc <i2c_start_wait+0x4a>
 1c2:	40 83       	st	Z, r20
 1c4:	90 81       	ld	r25, Z
 1c6:	94 fd       	sbrc	r25, 4
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <i2c_start_wait+0x42>
 1ca:	e6 cf       	rjmp	.-52     	; 0x198 <i2c_start_wait+0x16>
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <i2c_stop>:
 1d2:	84 e9       	ldi	r24, 0x94	; 148
 1d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1d8:	ec eb       	ldi	r30, 0xBC	; 188
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	84 fd       	sbrc	r24, 4
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <i2c_stop+0xa>
 1e2:	08 95       	ret

000001e4 <i2c_write>:
 1e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1e8:	84 e8       	ldi	r24, 0x84	; 132
 1ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1ee:	ec eb       	ldi	r30, 0xBC	; 188
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	88 23       	and	r24, r24
 1f6:	ec f7       	brge	.-6      	; 0x1f2 <i2c_write+0xe>
 1f8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1fc:	98 7f       	andi	r25, 0xF8	; 248
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	98 32       	cpi	r25, 0x28	; 40
 202:	09 f4       	brne	.+2      	; 0x206 <i2c_write+0x22>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret

00000208 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
 208:	cf 93       	push	r28
 20a:	c8 2f       	mov	r28, r24
 20c:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
 20e:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_start_wait>
	i2c_write(value);                      // write 
 212:	8c 2f       	mov	r24, r28
 214:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
 218:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <i2c_stop>
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <putnibble>:
uint8_t led_pin;



void putnibble(char t)
{
 220:	cf 93       	push	r28
 222:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_W);		//SLA_W je i2c adresa shifotvana u levo za 1
 224:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <led_pin>
 228:	84 60       	ori	r24, 0x04	; 4
 22a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <led_pin>
 22e:	6e e4       	ldi	r22, 0x4E	; 78
 230:	0e 94 04 01 	call	0x208	; 0x208 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	87 ec       	ldi	r24, 0xC7	; 199
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <putnibble+0x18>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <putnibble+0x1e>
 23e:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_W);
 240:	c2 95       	swap	r28
 242:	c0 7f       	andi	r28, 0xF0	; 240
 244:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <led_pin>
 248:	6e e4       	ldi	r22, 0x4E	; 78
 24a:	8c 2b       	or	r24, r28
 24c:	0e 94 04 01 	call	0x208	; 0x208 <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_W);
 250:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <led_pin>
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <led_pin>
 25a:	6e e4       	ldi	r22, 0x4E	; 78
 25c:	0e 94 04 01 	call	0x208	; 0x208 <i2c_send_packet>
 260:	87 ec       	ldi	r24, 0xC7	; 199
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <putnibble+0x44>
 268:	00 c0       	rjmp	.+0      	; 0x26a <putnibble+0x4a>
 26a:	00 00       	nop
	_delay_us(50);
}
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <lcd1602_send_byte>:

void lcd1602_send_byte(char c, char rs)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
 276:	d8 2f       	mov	r29, r24
 278:	d2 95       	swap	r29
 27a:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
 27c:	61 11       	cpse	r22, r1
 27e:	09 c0       	rjmp	.+18     	; 0x292 <lcd1602_send_byte+0x22>
		i2c_send_packet(led_pin &=~ 0x01, SLA_W);
 280:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <led_pin>
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <led_pin>
 28a:	6e e4       	ldi	r22, 0x4E	; 78
 28c:	0e 94 04 01 	call	0x208	; 0x208 <i2c_send_packet>
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <lcd1602_send_byte+0x32>
	else
		i2c_send_packet(led_pin |= 0x01, SLA_W);
 292:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <led_pin>
 296:	81 60       	ori	r24, 0x01	; 1
 298:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <led_pin>
 29c:	6e e4       	ldi	r22, 0x4E	; 78
 29e:	0e 94 04 01 	call	0x208	; 0x208 <i2c_send_packet>
	putnibble(highc);
 2a2:	8d 2f       	mov	r24, r29
 2a4:	0e 94 10 01 	call	0x220	; 0x220 <putnibble>
	putnibble(c);
 2a8:	8c 2f       	mov	r24, r28
 2aa:	0e 94 10 01 	call	0x220	; 0x220 <putnibble>
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <lcd1602_send_char>:

void lcd1602_send_char(char c)
{
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_W);
 2b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <led_pin>
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <led_pin>
 2c2:	6e e4       	ldi	r22, 0x4E	; 78
 2c4:	0e 94 04 01 	call	0x208	; 0x208 <i2c_send_packet>
	putnibble(highc);
 2c8:	8c 2f       	mov	r24, r28
 2ca:	82 95       	swap	r24
 2cc:	8f 70       	andi	r24, 0x0F	; 15
 2ce:	0e 94 10 01 	call	0x220	; 0x220 <putnibble>
	putnibble(c);
 2d2:	8c 2f       	mov	r24, r28
 2d4:	0e 94 10 01 	call	0x220	; 0x220 <putnibble>
}
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <lcd1602_init>:

void lcd1602_init()
{
	led_pin = 0;
 2dc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <led_pin>
	i2c_init();
 2e0:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	8f e5       	ldi	r24, 0x5F	; 95
 2e6:	9a ee       	ldi	r25, 0xEA	; 234
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd1602_init+0xc>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd1602_init+0x12>
 2ee:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	0e 94 10 01 	call	0x220	; 0x220 <putnibble>
 2f6:	8f e7       	ldi	r24, 0x7F	; 127
 2f8:	9e e3       	ldi	r25, 0x3E	; 62
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd1602_init+0x1e>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <lcd1602_init+0x24>
 300:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	0e 94 10 01 	call	0x220	; 0x220 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 308:	8f e8       	ldi	r24, 0x8F	; 143
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <lcd1602_init+0x30>
 310:	00 c0       	rjmp	.+0      	; 0x312 <lcd1602_init+0x36>
 312:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	0e 94 10 01 	call	0x220	; 0x220 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31a:	8f e9       	ldi	r24, 0x9F	; 159
 31c:	9f e0       	ldi	r25, 0x0F	; 15
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <lcd1602_init+0x42>
 322:	00 c0       	rjmp	.+0      	; 0x324 <lcd1602_init+0x48>
 324:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	0e 94 10 01 	call	0x220	; 0x220 <putnibble>
 32c:	8f e9       	ldi	r24, 0x9F	; 159
 32e:	9f e0       	ldi	r25, 0x0F	; 15
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <lcd1602_init+0x54>
 334:	00 c0       	rjmp	.+0      	; 0x336 <lcd1602_init+0x5a>
 336:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x28, LCD_COMMAND);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	88 e2       	ldi	r24, 0x28	; 40
 33c:	0e 94 38 01 	call	0x270	; 0x270 <lcd1602_send_byte>
 340:	8f e9       	ldi	r24, 0x9F	; 159
 342:	9f e0       	ldi	r25, 0x0F	; 15
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <lcd1602_init+0x68>
 348:	00 c0       	rjmp	.+0      	; 0x34a <lcd1602_init+0x6e>
 34a:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x0C, LCD_COMMAND);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	8c e0       	ldi	r24, 0x0C	; 12
 350:	0e 94 38 01 	call	0x270	; 0x270 <lcd1602_send_byte>
 354:	8f e9       	ldi	r24, 0x9F	; 159
 356:	9f e0       	ldi	r25, 0x0F	; 15
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <lcd1602_init+0x7c>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <lcd1602_init+0x82>
 35e:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x06, LCD_COMMAND);
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	0e 94 38 01 	call	0x270	; 0x270 <lcd1602_send_byte>
 368:	8f e9       	ldi	r24, 0x9F	; 159
 36a:	9f e0       	ldi	r25, 0x0F	; 15
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <lcd1602_init+0x90>
 370:	00 c0       	rjmp	.+0      	; 0x372 <lcd1602_init+0x96>
 372:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_W);
 374:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <led_pin>
 378:	88 60       	ori	r24, 0x08	; 8
 37a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <led_pin>
 37e:	6e e4       	ldi	r22, 0x4E	; 78
 380:	0e 94 04 01 	call	0x208	; 0x208 <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_W);
 384:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <led_pin>
 388:	8d 7f       	andi	r24, 0xFD	; 253
 38a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <led_pin>
 38e:	6e e4       	ldi	r22, 0x4E	; 78
 390:	0e 94 04 01 	call	0x208	; 0x208 <i2c_send_packet>
 394:	08 95       	ret

00000396 <lcd1602_clear>:
}

void lcd1602_clear()
{
	lcd1602_send_byte(0x01, LCD_COMMAND);
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 38 01 	call	0x270	; 0x270 <lcd1602_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	8f e6       	ldi	r24, 0x6F	; 111
 3a0:	97 e1       	ldi	r25, 0x17	; 23
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd1602_clear+0xc>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd1602_clear+0x12>
 3a8:	00 00       	nop
 3aa:	08 95       	ret

000003ac <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
 3ac:	90 e4       	ldi	r25, 0x40	; 64
 3ae:	69 9f       	mul	r22, r25
 3b0:	80 0d       	add	r24, r0
 3b2:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	0e 94 38 01 	call	0x270	; 0x270 <lcd1602_send_byte>
 3bc:	08 95       	ret

000003be <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3c6:	80 81       	ld	r24, Z
 3c8:	88 23       	and	r24, r24
 3ca:	59 f0       	breq	.+22     	; 0x3e2 <lcd1602_send_string+0x24>
 3cc:	8f 01       	movw	r16, r30
 3ce:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
 3d0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd1602_send_char>
		i++;
 3d4:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3d6:	f8 01       	movw	r30, r16
 3d8:	ec 0f       	add	r30, r28
 3da:	f1 1d       	adc	r31, r1
 3dc:	80 81       	ld	r24, Z
 3de:	81 11       	cpse	r24, r1
 3e0:	f7 cf       	rjmp	.-18     	; 0x3d0 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	08 95       	ret

000003ea <main>:
/* extern promenljive */
extern volatile unsigned char flag_tajmer0_prekid;
extern volatile unsigned char flag_prekid_10ms;

int main(void)
{
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	2f 97       	sbiw	r28, 0x0f	; 15
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
    
	char bafer[15];
	int a=255, b=1500, c=-1;

	tajmer0_init();			//NAPOMENA:	PINB5 output
 3fe:	0e 94 72 02 	call	0x4e4	; 0x4e4 <tajmer0_init>
	i2c_init();				//NAPOMENA: uljuceni internal-pullup - ovi na SDA i SCL, unutar ove f-je
 402:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_init>
	lcd1602_init();
 406:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd1602_init>
	ADC_init();				//NAPOMENA:	PINB7 output
 40a:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init();			//baud 9600
 40e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uart_init>
	
	
	sei();	//global interrupt enable
 412:	78 94       	sei
	
	
	lcd1602_clear();
 414:	0e 94 cb 01 	call	0x396	; 0x396 <lcd1602_clear>
		
		
		lcd1602_clear();
		
		send_str("  ");
		sprintf(bafer, "%d", a);
 418:	dd 24       	eor	r13, r13
 41a:	da 94       	dec	r13
 41c:	0f 2e       	mov	r0, r31
 41e:	f3 e0       	ldi	r31, 0x03	; 3
 420:	ef 2e       	mov	r14, r31
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	ff 2e       	mov	r15, r31
 426:	f0 2d       	mov	r31, r0
 428:	8e 01       	movw	r16, r28
 42a:	0f 5f       	subi	r16, 0xFF	; 255
 42c:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd1602_send_string(bafer);
		send_str(bafer);
		
		send_str("  ");
		sprintf(bafer, "%d", b);
 42e:	0f 2e       	mov	r0, r31
 430:	f5 e0       	ldi	r31, 0x05	; 5
 432:	bf 2e       	mov	r11, r31
 434:	f0 2d       	mov	r31, r0
 436:	0f 2e       	mov	r0, r31
 438:	fc ed       	ldi	r31, 0xDC	; 220
 43a:	cf 2e       	mov	r12, r31
 43c:	f0 2d       	mov	r31, r0
		/* preko uarta se salju stringovi, pa da bi se int poslao mora se prvo konvertovati preko itoa() f-je */
		/* moguce je koristiti i ostale slicne f-je: utoa(), ltoa()..... */
		/* umesto itoa() bolje je koristiti sprintf(buffer, "%3d", int); */
		
		
		lcd1602_clear();
 43e:	0e 94 cb 01 	call	0x396	; 0x396 <lcd1602_clear>
		
		send_str("  ");
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <send_str>
		sprintf(bafer, "%d", a);
 44a:	1f 92       	push	r1
 44c:	df 92       	push	r13
 44e:	ff 92       	push	r15
 450:	ef 92       	push	r14
 452:	1f 93       	push	r17
 454:	0f 93       	push	r16
 456:	0e 94 fe 02 	call	0x5fc	; 0x5fc <sprintf>
		lcd1602_send_string(bafer);
 45a:	c8 01       	movw	r24, r16
 45c:	0e 94 df 01 	call	0x3be	; 0x3be <lcd1602_send_string>
		send_str(bafer);
 460:	c8 01       	movw	r24, r16
 462:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <send_str>
		
		send_str("  ");
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <send_str>
		sprintf(bafer, "%d", b);
 46e:	bf 92       	push	r11
 470:	cf 92       	push	r12
 472:	ff 92       	push	r15
 474:	ef 92       	push	r14
 476:	1f 93       	push	r17
 478:	0f 93       	push	r16
 47a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <sprintf>
		lcd1602_goto_xy(10,0);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	8a e0       	ldi	r24, 0x0A	; 10
 482:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd1602_goto_xy>
		lcd1602_send_string(bafer);
 486:	c8 01       	movw	r24, r16
 488:	0e 94 df 01 	call	0x3be	; 0x3be <lcd1602_send_string>
		send_str(bafer);
 48c:	c8 01       	movw	r24, r16
 48e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <send_str>
		
		send_str("  ");
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <send_str>
		sprintf(bafer, "%d", c);
 49a:	df 92       	push	r13
 49c:	df 92       	push	r13
 49e:	ff 92       	push	r15
 4a0:	ef 92       	push	r14
 4a2:	1f 93       	push	r17
 4a4:	0f 93       	push	r16
 4a6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <sprintf>
		lcd1602_goto_xy(0,1);
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd1602_goto_xy>
		lcd1602_send_string(bafer);
 4b2:	c8 01       	movw	r24, r16
 4b4:	0e 94 df 01 	call	0x3be	; 0x3be <lcd1602_send_string>
		send_str(bafer);
 4b8:	c8 01       	movw	r24, r16
 4ba:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <send_str>
		
		
		
		send_str("\n");  //novi red
 4be:	86 e0       	ldi	r24, 0x06	; 6
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <send_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	81 ee       	ldi	r24, 0xE1	; 225
 4ca:	94 e0       	ldi	r25, 0x04	; 4
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
 4e2:	ad cf       	rjmp	.-166    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>

000004e4 <tajmer0_init>:
volatile unsigned int brojac_prekida_tajmera0;


void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 4e8:	93 e0       	ldi	r25, 0x03	; 3
 4ea:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 4ec:	99 ef       	ldi	r25, 0xF9	; 249
 4ee:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 4f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT
 4f4:	25 9a       	sbi	0x04, 5	; 4
 4f6:	08 95       	ret

000004f8 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
 50c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <brojac_prekida_tajmera0>
 510:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <brojac_prekida_tajmera0+0x1>
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <brojac_prekida_tajmera0+0x1>
 51a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)	//1ms * 10 = 10ms
 51e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <brojac_prekida_tajmera0>
 522:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <brojac_prekida_tajmera0+0x1>
 526:	0a 97       	sbiw	r24, 0x0a	; 10
 528:	41 f4       	brne	.+16     	; 0x53a <__vector_14+0x42>
	{
		brojac_prekida_tajmera0 = 0;
 52a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <brojac_prekida_tajmera0+0x1>
 52e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flag_prekid_10ms>
		PINB |= 1<<PINB5;					//toogle pinB 5 - DIG13, test da vidim da li je korektna frekvencija
 538:	1d 9a       	sbi	0x03, 5	; 3
		
	}
	
	
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	0f 90       	pop	r0
 540:	0f be       	out	0x3f, r0	; 63
 542:	0f 90       	pop	r0
 544:	1f 90       	pop	r1
 546:	18 95       	reti

00000548 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 548:	1f 92       	push	r1
 54a:	0f 92       	push	r0
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	0f 92       	push	r0
 550:	11 24       	eor	r1, r1
	poslato=0;
 552:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <poslato>
}
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <__vector_18>:

ISR(USART_RX_vect)
{
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	8f 93       	push	r24
 56c:	ef 93       	push	r30
 56e:	ff 93       	push	r31
	input_char=UDR0;
 570:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 574:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 578:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <buff_size>
 57c:	88 30       	cpi	r24, 0x08	; 8
 57e:	98 f4       	brcc	.+38     	; 0x5a6 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 580:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <buff_size>
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <input_char>
 58a:	eb 5e       	subi	r30, 0xEB	; 235
 58c:	fe 4f       	sbci	r31, 0xFE	; 254
 58e:	80 83       	st	Z, r24
		buff_size++;
 590:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <buff_size>
 594:	8f 5f       	subi	r24, 0xFF	; 255
 596:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <buff_size>
		input_buffer[buff_size]='\0';
 59a:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <buff_size>
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	eb 5e       	subi	r30, 0xEB	; 235
 5a2:	fe 4f       	sbci	r31, 0xFE	; 254
 5a4:	10 82       	st	Z, r1
	}
}
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	8f 91       	pop	r24
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 5bc:	88 ed       	ldi	r24, 0xD8	; 216
 5be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 5c2:	86 e0       	ldi	r24, 0x06	; 6
 5c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 5c8:	8f ec       	ldi	r24, 0xCF	; 207
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 5d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 5d4:	08 95       	ret

000005d6 <send_str>:
}

void send_str(char *str)
{
 5d6:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 5d8:	90 81       	ld	r25, Z
 5da:	99 23       	and	r25, r25
 5dc:	71 f0       	breq	.+28     	; 0x5fa <send_str+0x24>
 5de:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 5e0:	a6 ec       	ldi	r26, 0xC6	; 198
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 5e6:	9c 93       	st	X, r25
		poslato=1;
 5e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <poslato>
		while (poslato);
 5ec:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <poslato>
 5f0:	91 11       	cpse	r25, r1
 5f2:	fc cf       	rjmp	.-8      	; 0x5ec <send_str+0x16>
void send_str(char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 5f4:	91 91       	ld	r25, Z+
 5f6:	91 11       	cpse	r25, r1
 5f8:	f6 cf       	rjmp	.-20     	; 0x5e6 <send_str+0x10>
 5fa:	08 95       	ret

000005fc <sprintf>:
 5fc:	ae e0       	ldi	r26, 0x0E	; 14
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	e4 e0       	ldi	r30, 0x04	; 4
 602:	f3 e0       	ldi	r31, 0x03	; 3
 604:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__prologue_saves__+0x1c>
 608:	0d 89       	ldd	r16, Y+21	; 0x15
 60a:	1e 89       	ldd	r17, Y+22	; 0x16
 60c:	86 e0       	ldi	r24, 0x06	; 6
 60e:	8c 83       	std	Y+4, r24	; 0x04
 610:	1a 83       	std	Y+2, r17	; 0x02
 612:	09 83       	std	Y+1, r16	; 0x01
 614:	8f ef       	ldi	r24, 0xFF	; 255
 616:	9f e7       	ldi	r25, 0x7F	; 127
 618:	9e 83       	std	Y+6, r25	; 0x06
 61a:	8d 83       	std	Y+5, r24	; 0x05
 61c:	ae 01       	movw	r20, r28
 61e:	47 5e       	subi	r20, 0xE7	; 231
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	6f 89       	ldd	r22, Y+23	; 0x17
 624:	78 8d       	ldd	r23, Y+24	; 0x18
 626:	ce 01       	movw	r24, r28
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	0e 94 20 03 	call	0x640	; 0x640 <vfprintf>
 62e:	ef 81       	ldd	r30, Y+7	; 0x07
 630:	f8 85       	ldd	r31, Y+8	; 0x08
 632:	e0 0f       	add	r30, r16
 634:	f1 1f       	adc	r31, r17
 636:	10 82       	st	Z, r1
 638:	2e 96       	adiw	r28, 0x0e	; 14
 63a:	e4 e0       	ldi	r30, 0x04	; 4
 63c:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__epilogue_restores__+0x1c>

00000640 <vfprintf>:
 640:	ab e0       	ldi	r26, 0x0B	; 11
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	e6 e2       	ldi	r30, 0x26	; 38
 646:	f3 e0       	ldi	r31, 0x03	; 3
 648:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__prologue_saves__>
 64c:	6c 01       	movw	r12, r24
 64e:	7b 01       	movw	r14, r22
 650:	8a 01       	movw	r16, r20
 652:	fc 01       	movw	r30, r24
 654:	17 82       	std	Z+7, r1	; 0x07
 656:	16 82       	std	Z+6, r1	; 0x06
 658:	83 81       	ldd	r24, Z+3	; 0x03
 65a:	81 ff       	sbrs	r24, 1
 65c:	cc c1       	rjmp	.+920    	; 0x9f6 <__stack+0xf7>
 65e:	ce 01       	movw	r24, r28
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	3c 01       	movw	r6, r24
 664:	f6 01       	movw	r30, r12
 666:	93 81       	ldd	r25, Z+3	; 0x03
 668:	f7 01       	movw	r30, r14
 66a:	93 fd       	sbrc	r25, 3
 66c:	85 91       	lpm	r24, Z+
 66e:	93 ff       	sbrs	r25, 3
 670:	81 91       	ld	r24, Z+
 672:	7f 01       	movw	r14, r30
 674:	88 23       	and	r24, r24
 676:	09 f4       	brne	.+2      	; 0x67a <vfprintf+0x3a>
 678:	ba c1       	rjmp	.+884    	; 0x9ee <__stack+0xef>
 67a:	85 32       	cpi	r24, 0x25	; 37
 67c:	39 f4       	brne	.+14     	; 0x68c <vfprintf+0x4c>
 67e:	93 fd       	sbrc	r25, 3
 680:	85 91       	lpm	r24, Z+
 682:	93 ff       	sbrs	r25, 3
 684:	81 91       	ld	r24, Z+
 686:	7f 01       	movw	r14, r30
 688:	85 32       	cpi	r24, 0x25	; 37
 68a:	29 f4       	brne	.+10     	; 0x696 <vfprintf+0x56>
 68c:	b6 01       	movw	r22, r12
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 694:	e7 cf       	rjmp	.-50     	; 0x664 <vfprintf+0x24>
 696:	91 2c       	mov	r9, r1
 698:	21 2c       	mov	r2, r1
 69a:	31 2c       	mov	r3, r1
 69c:	ff e1       	ldi	r31, 0x1F	; 31
 69e:	f3 15       	cp	r31, r3
 6a0:	d8 f0       	brcs	.+54     	; 0x6d8 <vfprintf+0x98>
 6a2:	8b 32       	cpi	r24, 0x2B	; 43
 6a4:	79 f0       	breq	.+30     	; 0x6c4 <vfprintf+0x84>
 6a6:	38 f4       	brcc	.+14     	; 0x6b6 <vfprintf+0x76>
 6a8:	80 32       	cpi	r24, 0x20	; 32
 6aa:	79 f0       	breq	.+30     	; 0x6ca <vfprintf+0x8a>
 6ac:	83 32       	cpi	r24, 0x23	; 35
 6ae:	a1 f4       	brne	.+40     	; 0x6d8 <vfprintf+0x98>
 6b0:	23 2d       	mov	r18, r3
 6b2:	20 61       	ori	r18, 0x10	; 16
 6b4:	1d c0       	rjmp	.+58     	; 0x6f0 <vfprintf+0xb0>
 6b6:	8d 32       	cpi	r24, 0x2D	; 45
 6b8:	61 f0       	breq	.+24     	; 0x6d2 <vfprintf+0x92>
 6ba:	80 33       	cpi	r24, 0x30	; 48
 6bc:	69 f4       	brne	.+26     	; 0x6d8 <vfprintf+0x98>
 6be:	23 2d       	mov	r18, r3
 6c0:	21 60       	ori	r18, 0x01	; 1
 6c2:	16 c0       	rjmp	.+44     	; 0x6f0 <vfprintf+0xb0>
 6c4:	83 2d       	mov	r24, r3
 6c6:	82 60       	ori	r24, 0x02	; 2
 6c8:	38 2e       	mov	r3, r24
 6ca:	e3 2d       	mov	r30, r3
 6cc:	e4 60       	ori	r30, 0x04	; 4
 6ce:	3e 2e       	mov	r3, r30
 6d0:	2a c0       	rjmp	.+84     	; 0x726 <vfprintf+0xe6>
 6d2:	f3 2d       	mov	r31, r3
 6d4:	f8 60       	ori	r31, 0x08	; 8
 6d6:	1d c0       	rjmp	.+58     	; 0x712 <vfprintf+0xd2>
 6d8:	37 fc       	sbrc	r3, 7
 6da:	2d c0       	rjmp	.+90     	; 0x736 <vfprintf+0xf6>
 6dc:	20 ed       	ldi	r18, 0xD0	; 208
 6de:	28 0f       	add	r18, r24
 6e0:	2a 30       	cpi	r18, 0x0A	; 10
 6e2:	40 f0       	brcs	.+16     	; 0x6f4 <vfprintf+0xb4>
 6e4:	8e 32       	cpi	r24, 0x2E	; 46
 6e6:	b9 f4       	brne	.+46     	; 0x716 <vfprintf+0xd6>
 6e8:	36 fc       	sbrc	r3, 6
 6ea:	81 c1       	rjmp	.+770    	; 0x9ee <__stack+0xef>
 6ec:	23 2d       	mov	r18, r3
 6ee:	20 64       	ori	r18, 0x40	; 64
 6f0:	32 2e       	mov	r3, r18
 6f2:	19 c0       	rjmp	.+50     	; 0x726 <vfprintf+0xe6>
 6f4:	36 fe       	sbrs	r3, 6
 6f6:	06 c0       	rjmp	.+12     	; 0x704 <vfprintf+0xc4>
 6f8:	8a e0       	ldi	r24, 0x0A	; 10
 6fa:	98 9e       	mul	r9, r24
 6fc:	20 0d       	add	r18, r0
 6fe:	11 24       	eor	r1, r1
 700:	92 2e       	mov	r9, r18
 702:	11 c0       	rjmp	.+34     	; 0x726 <vfprintf+0xe6>
 704:	ea e0       	ldi	r30, 0x0A	; 10
 706:	2e 9e       	mul	r2, r30
 708:	20 0d       	add	r18, r0
 70a:	11 24       	eor	r1, r1
 70c:	22 2e       	mov	r2, r18
 70e:	f3 2d       	mov	r31, r3
 710:	f0 62       	ori	r31, 0x20	; 32
 712:	3f 2e       	mov	r3, r31
 714:	08 c0       	rjmp	.+16     	; 0x726 <vfprintf+0xe6>
 716:	8c 36       	cpi	r24, 0x6C	; 108
 718:	21 f4       	brne	.+8      	; 0x722 <vfprintf+0xe2>
 71a:	83 2d       	mov	r24, r3
 71c:	80 68       	ori	r24, 0x80	; 128
 71e:	38 2e       	mov	r3, r24
 720:	02 c0       	rjmp	.+4      	; 0x726 <vfprintf+0xe6>
 722:	88 36       	cpi	r24, 0x68	; 104
 724:	41 f4       	brne	.+16     	; 0x736 <vfprintf+0xf6>
 726:	f7 01       	movw	r30, r14
 728:	93 fd       	sbrc	r25, 3
 72a:	85 91       	lpm	r24, Z+
 72c:	93 ff       	sbrs	r25, 3
 72e:	81 91       	ld	r24, Z+
 730:	7f 01       	movw	r14, r30
 732:	81 11       	cpse	r24, r1
 734:	b3 cf       	rjmp	.-154    	; 0x69c <vfprintf+0x5c>
 736:	98 2f       	mov	r25, r24
 738:	9f 7d       	andi	r25, 0xDF	; 223
 73a:	95 54       	subi	r25, 0x45	; 69
 73c:	93 30       	cpi	r25, 0x03	; 3
 73e:	28 f4       	brcc	.+10     	; 0x74a <vfprintf+0x10a>
 740:	0c 5f       	subi	r16, 0xFC	; 252
 742:	1f 4f       	sbci	r17, 0xFF	; 255
 744:	9f e3       	ldi	r25, 0x3F	; 63
 746:	99 83       	std	Y+1, r25	; 0x01
 748:	0d c0       	rjmp	.+26     	; 0x764 <vfprintf+0x124>
 74a:	83 36       	cpi	r24, 0x63	; 99
 74c:	31 f0       	breq	.+12     	; 0x75a <vfprintf+0x11a>
 74e:	83 37       	cpi	r24, 0x73	; 115
 750:	71 f0       	breq	.+28     	; 0x76e <vfprintf+0x12e>
 752:	83 35       	cpi	r24, 0x53	; 83
 754:	09 f0       	breq	.+2      	; 0x758 <vfprintf+0x118>
 756:	59 c0       	rjmp	.+178    	; 0x80a <vfprintf+0x1ca>
 758:	21 c0       	rjmp	.+66     	; 0x79c <vfprintf+0x15c>
 75a:	f8 01       	movw	r30, r16
 75c:	80 81       	ld	r24, Z
 75e:	89 83       	std	Y+1, r24	; 0x01
 760:	0e 5f       	subi	r16, 0xFE	; 254
 762:	1f 4f       	sbci	r17, 0xFF	; 255
 764:	88 24       	eor	r8, r8
 766:	83 94       	inc	r8
 768:	91 2c       	mov	r9, r1
 76a:	53 01       	movw	r10, r6
 76c:	13 c0       	rjmp	.+38     	; 0x794 <vfprintf+0x154>
 76e:	28 01       	movw	r4, r16
 770:	f2 e0       	ldi	r31, 0x02	; 2
 772:	4f 0e       	add	r4, r31
 774:	51 1c       	adc	r5, r1
 776:	f8 01       	movw	r30, r16
 778:	a0 80       	ld	r10, Z
 77a:	b1 80       	ldd	r11, Z+1	; 0x01
 77c:	36 fe       	sbrs	r3, 6
 77e:	03 c0       	rjmp	.+6      	; 0x786 <vfprintf+0x146>
 780:	69 2d       	mov	r22, r9
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0x14a>
 786:	6f ef       	ldi	r22, 0xFF	; 255
 788:	7f ef       	ldi	r23, 0xFF	; 255
 78a:	c5 01       	movw	r24, r10
 78c:	0e 94 0c 05 	call	0xa18	; 0xa18 <strnlen>
 790:	4c 01       	movw	r8, r24
 792:	82 01       	movw	r16, r4
 794:	f3 2d       	mov	r31, r3
 796:	ff 77       	andi	r31, 0x7F	; 127
 798:	3f 2e       	mov	r3, r31
 79a:	16 c0       	rjmp	.+44     	; 0x7c8 <vfprintf+0x188>
 79c:	28 01       	movw	r4, r16
 79e:	22 e0       	ldi	r18, 0x02	; 2
 7a0:	42 0e       	add	r4, r18
 7a2:	51 1c       	adc	r5, r1
 7a4:	f8 01       	movw	r30, r16
 7a6:	a0 80       	ld	r10, Z
 7a8:	b1 80       	ldd	r11, Z+1	; 0x01
 7aa:	36 fe       	sbrs	r3, 6
 7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <vfprintf+0x174>
 7ae:	69 2d       	mov	r22, r9
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <vfprintf+0x178>
 7b4:	6f ef       	ldi	r22, 0xFF	; 255
 7b6:	7f ef       	ldi	r23, 0xFF	; 255
 7b8:	c5 01       	movw	r24, r10
 7ba:	0e 94 01 05 	call	0xa02	; 0xa02 <strnlen_P>
 7be:	4c 01       	movw	r8, r24
 7c0:	f3 2d       	mov	r31, r3
 7c2:	f0 68       	ori	r31, 0x80	; 128
 7c4:	3f 2e       	mov	r3, r31
 7c6:	82 01       	movw	r16, r4
 7c8:	33 fc       	sbrc	r3, 3
 7ca:	1b c0       	rjmp	.+54     	; 0x802 <vfprintf+0x1c2>
 7cc:	82 2d       	mov	r24, r2
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	88 16       	cp	r8, r24
 7d2:	99 06       	cpc	r9, r25
 7d4:	b0 f4       	brcc	.+44     	; 0x802 <vfprintf+0x1c2>
 7d6:	b6 01       	movw	r22, r12
 7d8:	80 e2       	ldi	r24, 0x20	; 32
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 7e0:	2a 94       	dec	r2
 7e2:	f4 cf       	rjmp	.-24     	; 0x7cc <vfprintf+0x18c>
 7e4:	f5 01       	movw	r30, r10
 7e6:	37 fc       	sbrc	r3, 7
 7e8:	85 91       	lpm	r24, Z+
 7ea:	37 fe       	sbrs	r3, 7
 7ec:	81 91       	ld	r24, Z+
 7ee:	5f 01       	movw	r10, r30
 7f0:	b6 01       	movw	r22, r12
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 7f8:	21 10       	cpse	r2, r1
 7fa:	2a 94       	dec	r2
 7fc:	21 e0       	ldi	r18, 0x01	; 1
 7fe:	82 1a       	sub	r8, r18
 800:	91 08       	sbc	r9, r1
 802:	81 14       	cp	r8, r1
 804:	91 04       	cpc	r9, r1
 806:	71 f7       	brne	.-36     	; 0x7e4 <vfprintf+0x1a4>
 808:	e8 c0       	rjmp	.+464    	; 0x9da <__stack+0xdb>
 80a:	84 36       	cpi	r24, 0x64	; 100
 80c:	11 f0       	breq	.+4      	; 0x812 <vfprintf+0x1d2>
 80e:	89 36       	cpi	r24, 0x69	; 105
 810:	41 f5       	brne	.+80     	; 0x862 <vfprintf+0x222>
 812:	f8 01       	movw	r30, r16
 814:	37 fe       	sbrs	r3, 7
 816:	07 c0       	rjmp	.+14     	; 0x826 <vfprintf+0x1e6>
 818:	60 81       	ld	r22, Z
 81a:	71 81       	ldd	r23, Z+1	; 0x01
 81c:	82 81       	ldd	r24, Z+2	; 0x02
 81e:	93 81       	ldd	r25, Z+3	; 0x03
 820:	0c 5f       	subi	r16, 0xFC	; 252
 822:	1f 4f       	sbci	r17, 0xFF	; 255
 824:	08 c0       	rjmp	.+16     	; 0x836 <vfprintf+0x1f6>
 826:	60 81       	ld	r22, Z
 828:	71 81       	ldd	r23, Z+1	; 0x01
 82a:	07 2e       	mov	r0, r23
 82c:	00 0c       	add	r0, r0
 82e:	88 0b       	sbc	r24, r24
 830:	99 0b       	sbc	r25, r25
 832:	0e 5f       	subi	r16, 0xFE	; 254
 834:	1f 4f       	sbci	r17, 0xFF	; 255
 836:	f3 2d       	mov	r31, r3
 838:	ff 76       	andi	r31, 0x6F	; 111
 83a:	3f 2e       	mov	r3, r31
 83c:	97 ff       	sbrs	r25, 7
 83e:	09 c0       	rjmp	.+18     	; 0x852 <vfprintf+0x212>
 840:	90 95       	com	r25
 842:	80 95       	com	r24
 844:	70 95       	com	r23
 846:	61 95       	neg	r22
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	f0 68       	ori	r31, 0x80	; 128
 850:	3f 2e       	mov	r3, r31
 852:	2a e0       	ldi	r18, 0x0A	; 10
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	a3 01       	movw	r20, r6
 858:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__ultoa_invert>
 85c:	88 2e       	mov	r8, r24
 85e:	86 18       	sub	r8, r6
 860:	45 c0       	rjmp	.+138    	; 0x8ec <vfprintf+0x2ac>
 862:	85 37       	cpi	r24, 0x75	; 117
 864:	31 f4       	brne	.+12     	; 0x872 <vfprintf+0x232>
 866:	23 2d       	mov	r18, r3
 868:	2f 7e       	andi	r18, 0xEF	; 239
 86a:	b2 2e       	mov	r11, r18
 86c:	2a e0       	ldi	r18, 0x0A	; 10
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	25 c0       	rjmp	.+74     	; 0x8bc <vfprintf+0x27c>
 872:	93 2d       	mov	r25, r3
 874:	99 7f       	andi	r25, 0xF9	; 249
 876:	b9 2e       	mov	r11, r25
 878:	8f 36       	cpi	r24, 0x6F	; 111
 87a:	c1 f0       	breq	.+48     	; 0x8ac <vfprintf+0x26c>
 87c:	18 f4       	brcc	.+6      	; 0x884 <vfprintf+0x244>
 87e:	88 35       	cpi	r24, 0x58	; 88
 880:	79 f0       	breq	.+30     	; 0x8a0 <vfprintf+0x260>
 882:	b5 c0       	rjmp	.+362    	; 0x9ee <__stack+0xef>
 884:	80 37       	cpi	r24, 0x70	; 112
 886:	19 f0       	breq	.+6      	; 0x88e <vfprintf+0x24e>
 888:	88 37       	cpi	r24, 0x78	; 120
 88a:	21 f0       	breq	.+8      	; 0x894 <vfprintf+0x254>
 88c:	b0 c0       	rjmp	.+352    	; 0x9ee <__stack+0xef>
 88e:	e9 2f       	mov	r30, r25
 890:	e0 61       	ori	r30, 0x10	; 16
 892:	be 2e       	mov	r11, r30
 894:	b4 fe       	sbrs	r11, 4
 896:	0d c0       	rjmp	.+26     	; 0x8b2 <vfprintf+0x272>
 898:	fb 2d       	mov	r31, r11
 89a:	f4 60       	ori	r31, 0x04	; 4
 89c:	bf 2e       	mov	r11, r31
 89e:	09 c0       	rjmp	.+18     	; 0x8b2 <vfprintf+0x272>
 8a0:	34 fe       	sbrs	r3, 4
 8a2:	0a c0       	rjmp	.+20     	; 0x8b8 <vfprintf+0x278>
 8a4:	29 2f       	mov	r18, r25
 8a6:	26 60       	ori	r18, 0x06	; 6
 8a8:	b2 2e       	mov	r11, r18
 8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <vfprintf+0x278>
 8ac:	28 e0       	ldi	r18, 0x08	; 8
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <vfprintf+0x27c>
 8b2:	20 e1       	ldi	r18, 0x10	; 16
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <vfprintf+0x27c>
 8b8:	20 e1       	ldi	r18, 0x10	; 16
 8ba:	32 e0       	ldi	r19, 0x02	; 2
 8bc:	f8 01       	movw	r30, r16
 8be:	b7 fe       	sbrs	r11, 7
 8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <vfprintf+0x290>
 8c2:	60 81       	ld	r22, Z
 8c4:	71 81       	ldd	r23, Z+1	; 0x01
 8c6:	82 81       	ldd	r24, Z+2	; 0x02
 8c8:	93 81       	ldd	r25, Z+3	; 0x03
 8ca:	0c 5f       	subi	r16, 0xFC	; 252
 8cc:	1f 4f       	sbci	r17, 0xFF	; 255
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <vfprintf+0x29c>
 8d0:	60 81       	ld	r22, Z
 8d2:	71 81       	ldd	r23, Z+1	; 0x01
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 5f       	subi	r16, 0xFE	; 254
 8da:	1f 4f       	sbci	r17, 0xFF	; 255
 8dc:	a3 01       	movw	r20, r6
 8de:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__ultoa_invert>
 8e2:	88 2e       	mov	r8, r24
 8e4:	86 18       	sub	r8, r6
 8e6:	fb 2d       	mov	r31, r11
 8e8:	ff 77       	andi	r31, 0x7F	; 127
 8ea:	3f 2e       	mov	r3, r31
 8ec:	36 fe       	sbrs	r3, 6
 8ee:	0d c0       	rjmp	.+26     	; 0x90a <__stack+0xb>
 8f0:	23 2d       	mov	r18, r3
 8f2:	2e 7f       	andi	r18, 0xFE	; 254
 8f4:	a2 2e       	mov	r10, r18
 8f6:	89 14       	cp	r8, r9
 8f8:	58 f4       	brcc	.+22     	; 0x910 <__stack+0x11>
 8fa:	34 fe       	sbrs	r3, 4
 8fc:	0b c0       	rjmp	.+22     	; 0x914 <__stack+0x15>
 8fe:	32 fc       	sbrc	r3, 2
 900:	09 c0       	rjmp	.+18     	; 0x914 <__stack+0x15>
 902:	83 2d       	mov	r24, r3
 904:	8e 7e       	andi	r24, 0xEE	; 238
 906:	a8 2e       	mov	r10, r24
 908:	05 c0       	rjmp	.+10     	; 0x914 <__stack+0x15>
 90a:	b8 2c       	mov	r11, r8
 90c:	a3 2c       	mov	r10, r3
 90e:	03 c0       	rjmp	.+6      	; 0x916 <__stack+0x17>
 910:	b8 2c       	mov	r11, r8
 912:	01 c0       	rjmp	.+2      	; 0x916 <__stack+0x17>
 914:	b9 2c       	mov	r11, r9
 916:	a4 fe       	sbrs	r10, 4
 918:	0f c0       	rjmp	.+30     	; 0x938 <__stack+0x39>
 91a:	fe 01       	movw	r30, r28
 91c:	e8 0d       	add	r30, r8
 91e:	f1 1d       	adc	r31, r1
 920:	80 81       	ld	r24, Z
 922:	80 33       	cpi	r24, 0x30	; 48
 924:	21 f4       	brne	.+8      	; 0x92e <__stack+0x2f>
 926:	9a 2d       	mov	r25, r10
 928:	99 7e       	andi	r25, 0xE9	; 233
 92a:	a9 2e       	mov	r10, r25
 92c:	09 c0       	rjmp	.+18     	; 0x940 <__stack+0x41>
 92e:	a2 fe       	sbrs	r10, 2
 930:	06 c0       	rjmp	.+12     	; 0x93e <__stack+0x3f>
 932:	b3 94       	inc	r11
 934:	b3 94       	inc	r11
 936:	04 c0       	rjmp	.+8      	; 0x940 <__stack+0x41>
 938:	8a 2d       	mov	r24, r10
 93a:	86 78       	andi	r24, 0x86	; 134
 93c:	09 f0       	breq	.+2      	; 0x940 <__stack+0x41>
 93e:	b3 94       	inc	r11
 940:	a3 fc       	sbrc	r10, 3
 942:	11 c0       	rjmp	.+34     	; 0x966 <__stack+0x67>
 944:	a0 fe       	sbrs	r10, 0
 946:	06 c0       	rjmp	.+12     	; 0x954 <__stack+0x55>
 948:	b2 14       	cp	r11, r2
 94a:	88 f4       	brcc	.+34     	; 0x96e <__stack+0x6f>
 94c:	28 0c       	add	r2, r8
 94e:	92 2c       	mov	r9, r2
 950:	9b 18       	sub	r9, r11
 952:	0e c0       	rjmp	.+28     	; 0x970 <__stack+0x71>
 954:	b2 14       	cp	r11, r2
 956:	60 f4       	brcc	.+24     	; 0x970 <__stack+0x71>
 958:	b6 01       	movw	r22, r12
 95a:	80 e2       	ldi	r24, 0x20	; 32
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 962:	b3 94       	inc	r11
 964:	f7 cf       	rjmp	.-18     	; 0x954 <__stack+0x55>
 966:	b2 14       	cp	r11, r2
 968:	18 f4       	brcc	.+6      	; 0x970 <__stack+0x71>
 96a:	2b 18       	sub	r2, r11
 96c:	02 c0       	rjmp	.+4      	; 0x972 <__stack+0x73>
 96e:	98 2c       	mov	r9, r8
 970:	21 2c       	mov	r2, r1
 972:	a4 fe       	sbrs	r10, 4
 974:	10 c0       	rjmp	.+32     	; 0x996 <__stack+0x97>
 976:	b6 01       	movw	r22, r12
 978:	80 e3       	ldi	r24, 0x30	; 48
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 980:	a2 fe       	sbrs	r10, 2
 982:	17 c0       	rjmp	.+46     	; 0x9b2 <__stack+0xb3>
 984:	a1 fc       	sbrc	r10, 1
 986:	03 c0       	rjmp	.+6      	; 0x98e <__stack+0x8f>
 988:	88 e7       	ldi	r24, 0x78	; 120
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x93>
 98e:	88 e5       	ldi	r24, 0x58	; 88
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	b6 01       	movw	r22, r12
 994:	0c c0       	rjmp	.+24     	; 0x9ae <__stack+0xaf>
 996:	8a 2d       	mov	r24, r10
 998:	86 78       	andi	r24, 0x86	; 134
 99a:	59 f0       	breq	.+22     	; 0x9b2 <__stack+0xb3>
 99c:	a1 fe       	sbrs	r10, 1
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__stack+0xa5>
 9a0:	8b e2       	ldi	r24, 0x2B	; 43
 9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <__stack+0xa7>
 9a4:	80 e2       	ldi	r24, 0x20	; 32
 9a6:	a7 fc       	sbrc	r10, 7
 9a8:	8d e2       	ldi	r24, 0x2D	; 45
 9aa:	b6 01       	movw	r22, r12
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 9b2:	89 14       	cp	r8, r9
 9b4:	38 f4       	brcc	.+14     	; 0x9c4 <__stack+0xc5>
 9b6:	b6 01       	movw	r22, r12
 9b8:	80 e3       	ldi	r24, 0x30	; 48
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 9c0:	9a 94       	dec	r9
 9c2:	f7 cf       	rjmp	.-18     	; 0x9b2 <__stack+0xb3>
 9c4:	8a 94       	dec	r8
 9c6:	f3 01       	movw	r30, r6
 9c8:	e8 0d       	add	r30, r8
 9ca:	f1 1d       	adc	r31, r1
 9cc:	80 81       	ld	r24, Z
 9ce:	b6 01       	movw	r22, r12
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 9d6:	81 10       	cpse	r8, r1
 9d8:	f5 cf       	rjmp	.-22     	; 0x9c4 <__stack+0xc5>
 9da:	22 20       	and	r2, r2
 9dc:	09 f4       	brne	.+2      	; 0x9e0 <__stack+0xe1>
 9de:	42 ce       	rjmp	.-892    	; 0x664 <vfprintf+0x24>
 9e0:	b6 01       	movw	r22, r12
 9e2:	80 e2       	ldi	r24, 0x20	; 32
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 9ea:	2a 94       	dec	r2
 9ec:	f6 cf       	rjmp	.-20     	; 0x9da <__stack+0xdb>
 9ee:	f6 01       	movw	r30, r12
 9f0:	86 81       	ldd	r24, Z+6	; 0x06
 9f2:	97 81       	ldd	r25, Z+7	; 0x07
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <__stack+0xfb>
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	9f ef       	ldi	r25, 0xFF	; 255
 9fa:	2b 96       	adiw	r28, 0x0b	; 11
 9fc:	e2 e1       	ldi	r30, 0x12	; 18
 9fe:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__epilogue_restores__>

00000a02 <strnlen_P>:
 a02:	fc 01       	movw	r30, r24
 a04:	05 90       	lpm	r0, Z+
 a06:	61 50       	subi	r22, 0x01	; 1
 a08:	70 40       	sbci	r23, 0x00	; 0
 a0a:	01 10       	cpse	r0, r1
 a0c:	d8 f7       	brcc	.-10     	; 0xa04 <strnlen_P+0x2>
 a0e:	80 95       	com	r24
 a10:	90 95       	com	r25
 a12:	8e 0f       	add	r24, r30
 a14:	9f 1f       	adc	r25, r31
 a16:	08 95       	ret

00000a18 <strnlen>:
 a18:	fc 01       	movw	r30, r24
 a1a:	61 50       	subi	r22, 0x01	; 1
 a1c:	70 40       	sbci	r23, 0x00	; 0
 a1e:	01 90       	ld	r0, Z+
 a20:	01 10       	cpse	r0, r1
 a22:	d8 f7       	brcc	.-10     	; 0xa1a <strnlen+0x2>
 a24:	80 95       	com	r24
 a26:	90 95       	com	r25
 a28:	8e 0f       	add	r24, r30
 a2a:	9f 1f       	adc	r25, r31
 a2c:	08 95       	ret

00000a2e <fputc>:
 a2e:	0f 93       	push	r16
 a30:	1f 93       	push	r17
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	fb 01       	movw	r30, r22
 a38:	23 81       	ldd	r18, Z+3	; 0x03
 a3a:	21 fd       	sbrc	r18, 1
 a3c:	03 c0       	rjmp	.+6      	; 0xa44 <fputc+0x16>
 a3e:	8f ef       	ldi	r24, 0xFF	; 255
 a40:	9f ef       	ldi	r25, 0xFF	; 255
 a42:	2c c0       	rjmp	.+88     	; 0xa9c <fputc+0x6e>
 a44:	22 ff       	sbrs	r18, 2
 a46:	16 c0       	rjmp	.+44     	; 0xa74 <fputc+0x46>
 a48:	46 81       	ldd	r20, Z+6	; 0x06
 a4a:	57 81       	ldd	r21, Z+7	; 0x07
 a4c:	24 81       	ldd	r18, Z+4	; 0x04
 a4e:	35 81       	ldd	r19, Z+5	; 0x05
 a50:	42 17       	cp	r20, r18
 a52:	53 07       	cpc	r21, r19
 a54:	44 f4       	brge	.+16     	; 0xa66 <fputc+0x38>
 a56:	a0 81       	ld	r26, Z
 a58:	b1 81       	ldd	r27, Z+1	; 0x01
 a5a:	9d 01       	movw	r18, r26
 a5c:	2f 5f       	subi	r18, 0xFF	; 255
 a5e:	3f 4f       	sbci	r19, 0xFF	; 255
 a60:	31 83       	std	Z+1, r19	; 0x01
 a62:	20 83       	st	Z, r18
 a64:	8c 93       	st	X, r24
 a66:	26 81       	ldd	r18, Z+6	; 0x06
 a68:	37 81       	ldd	r19, Z+7	; 0x07
 a6a:	2f 5f       	subi	r18, 0xFF	; 255
 a6c:	3f 4f       	sbci	r19, 0xFF	; 255
 a6e:	37 83       	std	Z+7, r19	; 0x07
 a70:	26 83       	std	Z+6, r18	; 0x06
 a72:	14 c0       	rjmp	.+40     	; 0xa9c <fputc+0x6e>
 a74:	8b 01       	movw	r16, r22
 a76:	ec 01       	movw	r28, r24
 a78:	fb 01       	movw	r30, r22
 a7a:	00 84       	ldd	r0, Z+8	; 0x08
 a7c:	f1 85       	ldd	r31, Z+9	; 0x09
 a7e:	e0 2d       	mov	r30, r0
 a80:	09 95       	icall
 a82:	89 2b       	or	r24, r25
 a84:	e1 f6       	brne	.-72     	; 0xa3e <fputc+0x10>
 a86:	d8 01       	movw	r26, r16
 a88:	16 96       	adiw	r26, 0x06	; 6
 a8a:	8d 91       	ld	r24, X+
 a8c:	9c 91       	ld	r25, X
 a8e:	17 97       	sbiw	r26, 0x07	; 7
 a90:	01 96       	adiw	r24, 0x01	; 1
 a92:	17 96       	adiw	r26, 0x07	; 7
 a94:	9c 93       	st	X, r25
 a96:	8e 93       	st	-X, r24
 a98:	16 97       	sbiw	r26, 0x06	; 6
 a9a:	ce 01       	movw	r24, r28
 a9c:	df 91       	pop	r29
 a9e:	cf 91       	pop	r28
 aa0:	1f 91       	pop	r17
 aa2:	0f 91       	pop	r16
 aa4:	08 95       	ret

00000aa6 <__ultoa_invert>:
 aa6:	fa 01       	movw	r30, r20
 aa8:	aa 27       	eor	r26, r26
 aaa:	28 30       	cpi	r18, 0x08	; 8
 aac:	51 f1       	breq	.+84     	; 0xb02 <__ultoa_invert+0x5c>
 aae:	20 31       	cpi	r18, 0x10	; 16
 ab0:	81 f1       	breq	.+96     	; 0xb12 <__ultoa_invert+0x6c>
 ab2:	e8 94       	clt
 ab4:	6f 93       	push	r22
 ab6:	6e 7f       	andi	r22, 0xFE	; 254
 ab8:	6e 5f       	subi	r22, 0xFE	; 254
 aba:	7f 4f       	sbci	r23, 0xFF	; 255
 abc:	8f 4f       	sbci	r24, 0xFF	; 255
 abe:	9f 4f       	sbci	r25, 0xFF	; 255
 ac0:	af 4f       	sbci	r26, 0xFF	; 255
 ac2:	b1 e0       	ldi	r27, 0x01	; 1
 ac4:	3e d0       	rcall	.+124    	; 0xb42 <__ultoa_invert+0x9c>
 ac6:	b4 e0       	ldi	r27, 0x04	; 4
 ac8:	3c d0       	rcall	.+120    	; 0xb42 <__ultoa_invert+0x9c>
 aca:	67 0f       	add	r22, r23
 acc:	78 1f       	adc	r23, r24
 ace:	89 1f       	adc	r24, r25
 ad0:	9a 1f       	adc	r25, r26
 ad2:	a1 1d       	adc	r26, r1
 ad4:	68 0f       	add	r22, r24
 ad6:	79 1f       	adc	r23, r25
 ad8:	8a 1f       	adc	r24, r26
 ada:	91 1d       	adc	r25, r1
 adc:	a1 1d       	adc	r26, r1
 ade:	6a 0f       	add	r22, r26
 ae0:	71 1d       	adc	r23, r1
 ae2:	81 1d       	adc	r24, r1
 ae4:	91 1d       	adc	r25, r1
 ae6:	a1 1d       	adc	r26, r1
 ae8:	20 d0       	rcall	.+64     	; 0xb2a <__ultoa_invert+0x84>
 aea:	09 f4       	brne	.+2      	; 0xaee <__ultoa_invert+0x48>
 aec:	68 94       	set
 aee:	3f 91       	pop	r19
 af0:	2a e0       	ldi	r18, 0x0A	; 10
 af2:	26 9f       	mul	r18, r22
 af4:	11 24       	eor	r1, r1
 af6:	30 19       	sub	r19, r0
 af8:	30 5d       	subi	r19, 0xD0	; 208
 afa:	31 93       	st	Z+, r19
 afc:	de f6       	brtc	.-74     	; 0xab4 <__ultoa_invert+0xe>
 afe:	cf 01       	movw	r24, r30
 b00:	08 95       	ret
 b02:	46 2f       	mov	r20, r22
 b04:	47 70       	andi	r20, 0x07	; 7
 b06:	40 5d       	subi	r20, 0xD0	; 208
 b08:	41 93       	st	Z+, r20
 b0a:	b3 e0       	ldi	r27, 0x03	; 3
 b0c:	0f d0       	rcall	.+30     	; 0xb2c <__ultoa_invert+0x86>
 b0e:	c9 f7       	brne	.-14     	; 0xb02 <__ultoa_invert+0x5c>
 b10:	f6 cf       	rjmp	.-20     	; 0xafe <__ultoa_invert+0x58>
 b12:	46 2f       	mov	r20, r22
 b14:	4f 70       	andi	r20, 0x0F	; 15
 b16:	40 5d       	subi	r20, 0xD0	; 208
 b18:	4a 33       	cpi	r20, 0x3A	; 58
 b1a:	18 f0       	brcs	.+6      	; 0xb22 <__ultoa_invert+0x7c>
 b1c:	49 5d       	subi	r20, 0xD9	; 217
 b1e:	31 fd       	sbrc	r19, 1
 b20:	40 52       	subi	r20, 0x20	; 32
 b22:	41 93       	st	Z+, r20
 b24:	02 d0       	rcall	.+4      	; 0xb2a <__ultoa_invert+0x84>
 b26:	a9 f7       	brne	.-22     	; 0xb12 <__ultoa_invert+0x6c>
 b28:	ea cf       	rjmp	.-44     	; 0xafe <__ultoa_invert+0x58>
 b2a:	b4 e0       	ldi	r27, 0x04	; 4
 b2c:	a6 95       	lsr	r26
 b2e:	97 95       	ror	r25
 b30:	87 95       	ror	r24
 b32:	77 95       	ror	r23
 b34:	67 95       	ror	r22
 b36:	ba 95       	dec	r27
 b38:	c9 f7       	brne	.-14     	; 0xb2c <__ultoa_invert+0x86>
 b3a:	00 97       	sbiw	r24, 0x00	; 0
 b3c:	61 05       	cpc	r22, r1
 b3e:	71 05       	cpc	r23, r1
 b40:	08 95       	ret
 b42:	9b 01       	movw	r18, r22
 b44:	ac 01       	movw	r20, r24
 b46:	0a 2e       	mov	r0, r26
 b48:	06 94       	lsr	r0
 b4a:	57 95       	ror	r21
 b4c:	47 95       	ror	r20
 b4e:	37 95       	ror	r19
 b50:	27 95       	ror	r18
 b52:	ba 95       	dec	r27
 b54:	c9 f7       	brne	.-14     	; 0xb48 <__ultoa_invert+0xa2>
 b56:	62 0f       	add	r22, r18
 b58:	73 1f       	adc	r23, r19
 b5a:	84 1f       	adc	r24, r20
 b5c:	95 1f       	adc	r25, r21
 b5e:	a0 1d       	adc	r26, r0
 b60:	08 95       	ret

00000b62 <__prologue_saves__>:
 b62:	2f 92       	push	r2
 b64:	3f 92       	push	r3
 b66:	4f 92       	push	r4
 b68:	5f 92       	push	r5
 b6a:	6f 92       	push	r6
 b6c:	7f 92       	push	r7
 b6e:	8f 92       	push	r8
 b70:	9f 92       	push	r9
 b72:	af 92       	push	r10
 b74:	bf 92       	push	r11
 b76:	cf 92       	push	r12
 b78:	df 92       	push	r13
 b7a:	ef 92       	push	r14
 b7c:	ff 92       	push	r15
 b7e:	0f 93       	push	r16
 b80:	1f 93       	push	r17
 b82:	cf 93       	push	r28
 b84:	df 93       	push	r29
 b86:	cd b7       	in	r28, 0x3d	; 61
 b88:	de b7       	in	r29, 0x3e	; 62
 b8a:	ca 1b       	sub	r28, r26
 b8c:	db 0b       	sbc	r29, r27
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	f8 94       	cli
 b92:	de bf       	out	0x3e, r29	; 62
 b94:	0f be       	out	0x3f, r0	; 63
 b96:	cd bf       	out	0x3d, r28	; 61
 b98:	09 94       	ijmp

00000b9a <__epilogue_restores__>:
 b9a:	2a 88       	ldd	r2, Y+18	; 0x12
 b9c:	39 88       	ldd	r3, Y+17	; 0x11
 b9e:	48 88       	ldd	r4, Y+16	; 0x10
 ba0:	5f 84       	ldd	r5, Y+15	; 0x0f
 ba2:	6e 84       	ldd	r6, Y+14	; 0x0e
 ba4:	7d 84       	ldd	r7, Y+13	; 0x0d
 ba6:	8c 84       	ldd	r8, Y+12	; 0x0c
 ba8:	9b 84       	ldd	r9, Y+11	; 0x0b
 baa:	aa 84       	ldd	r10, Y+10	; 0x0a
 bac:	b9 84       	ldd	r11, Y+9	; 0x09
 bae:	c8 84       	ldd	r12, Y+8	; 0x08
 bb0:	df 80       	ldd	r13, Y+7	; 0x07
 bb2:	ee 80       	ldd	r14, Y+6	; 0x06
 bb4:	fd 80       	ldd	r15, Y+5	; 0x05
 bb6:	0c 81       	ldd	r16, Y+4	; 0x04
 bb8:	1b 81       	ldd	r17, Y+3	; 0x03
 bba:	aa 81       	ldd	r26, Y+2	; 0x02
 bbc:	b9 81       	ldd	r27, Y+1	; 0x01
 bbe:	ce 0f       	add	r28, r30
 bc0:	d1 1d       	adc	r29, r1
 bc2:	0f b6       	in	r0, 0x3f	; 63
 bc4:	f8 94       	cli
 bc6:	de bf       	out	0x3e, r29	; 62
 bc8:	0f be       	out	0x3f, r0	; 63
 bca:	cd bf       	out	0x3d, r28	; 61
 bcc:	ed 01       	movw	r28, r26
 bce:	08 95       	ret

00000bd0 <_exit>:
 bd0:	f8 94       	cli

00000bd2 <__stop_program>:
 bd2:	ff cf       	rjmp	.-2      	; 0xbd2 <__stop_program>
