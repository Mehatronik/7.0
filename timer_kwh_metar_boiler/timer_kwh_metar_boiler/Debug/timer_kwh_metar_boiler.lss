
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00001c96  00001d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  00800196  00800196  00001dc0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000295d  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc8  00000000  00000000  00004a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d18  00000000  00000000  00005a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  0000774c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac6  00000000  00000000  00007ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002461  00000000  00000000  0000898e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000adef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_20>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e9       	ldi	r30, 0x96	; 150
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 39       	cpi	r26, 0x96	; 150
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 e9       	ldi	r26, 0x96	; 150
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 31       	cpi	r26, 0x13	; 19
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <main>
      9e:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
      a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
      a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
      ac:	80 ec       	ldi	r24, 0xC0	; 192
      ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
      b2:	8e ee       	ldi	r24, 0xEE	; 238
      b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
      b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
      bc:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
      c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
      c2:	1f 92       	push	r1
      c4:	0f 92       	push	r0
      c6:	0f b6       	in	r0, 0x3f	; 63
      c8:	0f 92       	push	r0
      ca:	11 24       	eor	r1, r1
      cc:	8f 93       	push	r24
      ce:	9f 93       	push	r25
      d0:	ef 93       	push	r30
      d2:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
      d4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
      d8:	81 11       	cpse	r24, r1
      da:	09 c0       	rjmp	.+18     	; 0xee <__vector_21+0x2c>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
      dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      e4:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <mereni_napon+0x1>
      e8:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <mereni_napon>
      ec:	0c c0       	rjmp	.+24     	; 0x106 <__vector_21+0x44>
	else if(ad_kanal == 1)
      ee:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	41 f4       	brne	.+16     	; 0x106 <__vector_21+0x44>
		merena_struja = (uint16_t)ADC;
      f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      fe:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <merena_struja+0x1>
     102:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     106:	ea e7       	ldi	r30, 0x7A	; 122
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
     110:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
     114:	8f 5f       	subi	r24, 0xFF	; 255
     116:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     11a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	10 f0       	brcs	.+4      	; 0x126 <__vector_21+0x64>
		ad_kanal = 0;
     122:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
     126:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
     12a:	88 23       	and	r24, r24
     12c:	19 f0       	breq	.+6      	; 0x134 <__vector_21+0x72>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	39 f0       	breq	.+14     	; 0x140 <__vector_21+0x7e>
     132:	0e c0       	rjmp	.+28     	; 0x150 <__vector_21+0x8e>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     134:	ec e7       	ldi	r30, 0x7C	; 124
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	8c 7f       	andi	r24, 0xFC	; 252
     13c:	80 83       	st	Z, r24
		break;
     13e:	08 c0       	rjmp	.+16     	; 0x150 <__vector_21+0x8e>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     140:	ec e7       	ldi	r30, 0x7C	; 124
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	8d 7f       	andi	r24, 0xFD	; 253
     148:	80 83       	st	Z, r24
				ADMUX |= (0b1);
     14a:	80 81       	ld	r24, Z
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     150:	ea e7       	ldi	r30, 0x7A	; 122
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 6c       	ori	r24, 0xC0	; 192
     158:	80 83       	st	Z, r24
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us


}
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	9f 91       	pop	r25
     160:	8f 91       	pop	r24
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <EEPROM_read>:


uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     16c:	f9 99       	sbic	0x1f, 1	; 31
     16e:	fe cf       	rjmp	.-4      	; 0x16c <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
     170:	92 bd       	out	0x22, r25	; 34
     172:	81 bd       	out	0x21, r24	; 33
	
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     174:	f8 9a       	sbi	0x1f, 0	; 31
	
	/* Return data from Data Register */
	return EEDR;
     176:	80 b5       	in	r24, 0x20	; 32
}
     178:	08 95       	ret

0000017a <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     17a:	f9 99       	sbic	0x1f, 1	; 31
     17c:	fe cf       	rjmp	.-4      	; 0x17a <EEPROM_write>
	
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     17e:	92 bd       	out	0x22, r25	; 34
     180:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     182:	60 bd       	out	0x20, r22	; 32
	
	/**********************!!!!!!!!!!!!!!!!!!!!!!***************************/
	cli();		//zabrana interapta, po preporuci iz datasheet-a, doci ce do write-faila ako se desi interapt izmedju ova dva koraka
     184:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     186:	fa 9a       	sbi	0x1f, 2	; 31
	
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     188:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();		//dozvola interapta
     18a:	78 94       	sei
     18c:	08 95       	ret

0000018e <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     18e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     192:	88 e4       	ldi	r24, 0x48	; 72
     194:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     198:	08 95       	ret

0000019a <i2c_start_wait>:
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	ec eb       	ldi	r30, 0xBC	; 188
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	24 ea       	ldi	r18, 0xA4	; 164
     1a4:	a9 eb       	ldi	r26, 0xB9	; 185
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	cb eb       	ldi	r28, 0xBB	; 187
     1aa:	d0 e0       	ldi	r29, 0x00	; 0
     1ac:	34 e8       	ldi	r19, 0x84	; 132
     1ae:	44 e9       	ldi	r20, 0x94	; 148
     1b0:	20 83       	st	Z, r18
     1b2:	90 81       	ld	r25, Z
     1b4:	99 23       	and	r25, r25
     1b6:	ec f7       	brge	.-6      	; 0x1b2 <i2c_start_wait+0x18>
     1b8:	9c 91       	ld	r25, X
     1ba:	98 7f       	andi	r25, 0xF8	; 248
     1bc:	98 30       	cpi	r25, 0x08	; 8
     1be:	11 f0       	breq	.+4      	; 0x1c4 <i2c_start_wait+0x2a>
     1c0:	90 31       	cpi	r25, 0x10	; 16
     1c2:	b1 f7       	brne	.-20     	; 0x1b0 <i2c_start_wait+0x16>
     1c4:	88 83       	st	Y, r24
     1c6:	30 83       	st	Z, r19
     1c8:	90 81       	ld	r25, Z
     1ca:	99 23       	and	r25, r25
     1cc:	ec f7       	brge	.-6      	; 0x1c8 <i2c_start_wait+0x2e>
     1ce:	9c 91       	ld	r25, X
     1d0:	98 7f       	andi	r25, 0xF8	; 248
     1d2:	90 32       	cpi	r25, 0x20	; 32
     1d4:	11 f0       	breq	.+4      	; 0x1da <i2c_start_wait+0x40>
     1d6:	98 35       	cpi	r25, 0x58	; 88
     1d8:	29 f4       	brne	.+10     	; 0x1e4 <i2c_start_wait+0x4a>
     1da:	40 83       	st	Z, r20
     1dc:	90 81       	ld	r25, Z
     1de:	94 fd       	sbrc	r25, 4
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <i2c_start_wait+0x42>
     1e2:	e6 cf       	rjmp	.-52     	; 0x1b0 <i2c_start_wait+0x16>
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <i2c_stop>:
     1ea:	84 e9       	ldi	r24, 0x94	; 148
     1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1f0:	ec eb       	ldi	r30, 0xBC	; 188
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	84 fd       	sbrc	r24, 4
     1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <i2c_stop+0xa>
     1fa:	08 95       	ret

000001fc <i2c_write>:
     1fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     200:	84 e8       	ldi	r24, 0x84	; 132
     202:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     206:	ec eb       	ldi	r30, 0xBC	; 188
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	88 23       	and	r24, r24
     20e:	ec f7       	brge	.-6      	; 0x20a <i2c_write+0xe>
     210:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     214:	98 7f       	andi	r25, 0xF8	; 248
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	98 32       	cpi	r25, 0x28	; 40
     21a:	09 f4       	brne	.+2      	; 0x21e <i2c_write+0x22>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	08 95       	ret

00000220 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     220:	84 e8       	ldi	r24, 0x84	; 132
     222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     226:	ec eb       	ldi	r30, 0xBC	; 188
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	88 23       	and	r24, r24
     22e:	ec f7       	brge	.-6      	; 0x22a <i2c_readNak+0xa>
	
    return TWDR;
     230:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     234:	08 95       	ret

00000236 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     236:	cf 93       	push	r28
     238:	c8 2f       	mov	r28, r24
     23a:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     23c:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
	i2c_write(value);                      // write 
     240:	8c 2f       	mov	r24, r28
     242:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     246:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2c_stop>
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <sati_ispis>:




void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	fc 01       	movw	r30, r24
     258:	06 2f       	mov	r16, r22
     25a:	17 2f       	mov	r17, r23
     25c:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     25e:	21 11       	cpse	r18, r1
     260:	28 c0       	rjmp	.+80     	; 0x2b2 <sati_ispis+0x64>
	{
		(*sat)++;
     262:	80 81       	ld	r24, Z
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
     264:	99 ee       	ldi	r25, 0xE9	; 233
     266:	98 0f       	add	r25, r24
     268:	96 30       	cpi	r25, 0x06	; 6
     26a:	18 f0       	brcs	.+6      	; 0x272 <sati_ispis+0x24>
void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sat)++;
     26c:	8f 5f       	subi	r24, 0xFF	; 255
     26e:	80 83       	st	Z, r24
     270:	01 c0       	rjmp	.+2      	; 0x274 <sati_ispis+0x26>
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
			*sat = 0;
     272:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sat);
     274:	80 81       	ld	r24, Z
     276:	1f 92       	push	r1
     278:	8f 93       	push	r24
     27a:	8c e5       	ldi	r24, 0x5C	; 92
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	9f 93       	push	r25
     280:	8f 93       	push	r24
     282:	1f 93       	push	r17
     284:	0f 93       	push	r16
     286:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     28a:	88 81       	ld	r24, Y
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	81 50       	subi	r24, 0x01	; 1
     290:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     294:	80 2f       	mov	r24, r16
     296:	91 2f       	mov	r25, r17
     298:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	88 81       	ld	r24, Y
     2a0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	28 c0       	rjmp	.+80     	; 0x302 <sati_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     2b2:	21 30       	cpi	r18, 0x01	; 1
     2b4:	31 f5       	brne	.+76     	; 0x302 <sati_ispis+0xb4>
	{
		(*sat)--;
     2b6:	80 81       	ld	r24, Z
     2b8:	81 50       	subi	r24, 0x01	; 1
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     2ba:	8a 3f       	cpi	r24, 0xFA	; 250
     2bc:	10 f4       	brcc	.+4      	; 0x2c2 <sati_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sat)--;
     2be:	80 83       	st	Z, r24
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <sati_ispis+0x78>
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sat = 23;
     2c2:	87 e1       	ldi	r24, 0x17	; 23
     2c4:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sat);
     2c6:	80 81       	ld	r24, Z
     2c8:	1f 92       	push	r1
     2ca:	8f 93       	push	r24
     2cc:	8c e5       	ldi	r24, 0x5C	; 92
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	9f 93       	push	r25
     2d2:	8f 93       	push	r24
     2d4:	1f 93       	push	r17
     2d6:	0f 93       	push	r16
     2d8:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     2dc:	88 81       	ld	r24, Y
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	81 50       	subi	r24, 0x01	; 1
     2e2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     2e6:	80 2f       	mov	r24, r16
     2e8:	91 2f       	mov	r25, r17
     2ea:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	88 81       	ld	r24, Y
     2f2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
	}
	
	
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	08 95       	ret

0000030c <minuti_ispis>:

void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	fc 01       	movw	r30, r24
     316:	06 2f       	mov	r16, r22
     318:	17 2f       	mov	r17, r23
     31a:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     31c:	21 11       	cpse	r18, r1
     31e:	28 c0       	rjmp	.+80     	; 0x370 <minuti_ispis+0x64>
	{
		(*minut)++;
     320:	80 81       	ld	r24, Z
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
     322:	95 ec       	ldi	r25, 0xC5	; 197
     324:	98 0f       	add	r25, r24
     326:	95 30       	cpi	r25, 0x05	; 5
     328:	18 f0       	brcs	.+6      	; 0x330 <minuti_ispis+0x24>
void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*minut)++;
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	80 83       	st	Z, r24
     32e:	01 c0       	rjmp	.+2      	; 0x332 <minuti_ispis+0x26>
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
			*minut = 0;
     330:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *minut);
     332:	80 81       	ld	r24, Z
     334:	1f 92       	push	r1
     336:	8f 93       	push	r24
     338:	8c e5       	ldi	r24, 0x5C	; 92
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	1f 93       	push	r17
     342:	0f 93       	push	r16
     344:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     348:	88 81       	ld	r24, Y
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     352:	80 2f       	mov	r24, r16
     354:	91 2f       	mov	r25, r17
     356:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     35a:	61 e0       	ldi	r22, 0x01	; 1
     35c:	88 81       	ld	r24, Y
     35e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	28 c0       	rjmp	.+80     	; 0x3c0 <minuti_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     370:	21 30       	cpi	r18, 0x01	; 1
     372:	31 f5       	brne	.+76     	; 0x3c0 <minuti_ispis+0xb4>
	{
		(*minut)--;
     374:	80 81       	ld	r24, Z
     376:	81 50       	subi	r24, 0x01	; 1
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     378:	8a 3f       	cpi	r24, 0xFA	; 250
     37a:	10 f4       	brcc	.+4      	; 0x380 <minuti_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*minut)--;
     37c:	80 83       	st	Z, r24
     37e:	02 c0       	rjmp	.+4      	; 0x384 <minuti_ispis+0x78>
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*minut = 59;
     380:	8b e3       	ldi	r24, 0x3B	; 59
     382:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *minut);
     384:	80 81       	ld	r24, Z
     386:	1f 92       	push	r1
     388:	8f 93       	push	r24
     38a:	8c e5       	ldi	r24, 0x5C	; 92
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	9f 93       	push	r25
     390:	8f 93       	push	r24
     392:	1f 93       	push	r17
     394:	0f 93       	push	r16
     396:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     39a:	88 81       	ld	r24, Y
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	81 50       	subi	r24, 0x01	; 1
     3a0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     3a4:	80 2f       	mov	r24, r16
     3a6:	91 2f       	mov	r25, r17
     3a8:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	88 81       	ld	r24, Y
     3b0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
	}
	
	
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <sekundi_ispis>:

void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	fc 01       	movw	r30, r24
     3d4:	06 2f       	mov	r16, r22
     3d6:	17 2f       	mov	r17, r23
     3d8:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     3da:	21 11       	cpse	r18, r1
     3dc:	28 c0       	rjmp	.+80     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		(*sekund)++;
     3de:	80 81       	ld	r24, Z
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
     3e0:	95 ec       	ldi	r25, 0xC5	; 197
     3e2:	98 0f       	add	r25, r24
     3e4:	95 30       	cpi	r25, 0x05	; 5
     3e6:	18 f0       	brcs	.+6      	; 0x3ee <sekundi_ispis+0x24>
void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sekund)++;
     3e8:	8f 5f       	subi	r24, 0xFF	; 255
     3ea:	80 83       	st	Z, r24
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <sekundi_ispis+0x26>
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
			*sekund = 0;
     3ee:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sekund);
     3f0:	80 81       	ld	r24, Z
     3f2:	1f 92       	push	r1
     3f4:	8f 93       	push	r24
     3f6:	8c e5       	ldi	r24, 0x5C	; 92
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	1f 93       	push	r17
     400:	0f 93       	push	r16
     402:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     406:	88 81       	ld	r24, Y
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	81 50       	subi	r24, 0x01	; 1
     40c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     410:	80 2f       	mov	r24, r16
     412:	91 2f       	mov	r25, r17
     414:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	88 81       	ld	r24, Y
     41c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	28 c0       	rjmp	.+80     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	}
	else if (inc_dec == UMANJI)
     42e:	21 30       	cpi	r18, 0x01	; 1
     430:	31 f5       	brne	.+76     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	{
		(*sekund)--;
     432:	80 81       	ld	r24, Z
     434:	81 50       	subi	r24, 0x01	; 1
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     436:	8a 3f       	cpi	r24, 0xFA	; 250
     438:	10 f4       	brcc	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sekund)--;
     43a:	80 83       	st	Z, r24
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sekund = 59;
     43e:	8b e3       	ldi	r24, 0x3B	; 59
     440:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sekund);
     442:	80 81       	ld	r24, Z
     444:	1f 92       	push	r1
     446:	8f 93       	push	r24
     448:	8c e5       	ldi	r24, 0x5C	; 92
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	1f 93       	push	r17
     452:	0f 93       	push	r16
     454:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     458:	88 81       	ld	r24, Y
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	81 50       	subi	r24, 0x01	; 1
     45e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     462:	80 2f       	mov	r24, r16
     464:	91 2f       	mov	r25, r17
     466:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	88 81       	ld	r24, Y
     46e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
	}
	
	
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     488:	cf 93       	push	r28
     48a:	c8 2f       	mov	r28, r24
     48c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <led_pin>
     490:	84 60       	ori	r24, 0x04	; 4
     492:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <led_pin>
     496:	6e e4       	ldi	r22, 0x4E	; 78
     498:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     49c:	87 ec       	ldi	r24, 0xC7	; 199
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <putnibble+0x18>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <putnibble+0x1e>
     4a6:	00 00       	nop
     4a8:	c2 95       	swap	r28
     4aa:	c0 7f       	andi	r28, 0xF0	; 240
     4ac:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <led_pin>
     4b0:	6e e4       	ldi	r22, 0x4E	; 78
     4b2:	8c 2b       	or	r24, r28
     4b4:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     4b8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <led_pin>
     4bc:	8b 7f       	andi	r24, 0xFB	; 251
     4be:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <led_pin>
     4c2:	6e e4       	ldi	r22, 0x4E	; 78
     4c4:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     4c8:	87 ec       	ldi	r24, 0xC7	; 199
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <putnibble+0x44>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <putnibble+0x4a>
     4d2:	00 00       	nop
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <lcd1602_send_byte>:
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	c8 2f       	mov	r28, r24
     4de:	d8 2f       	mov	r29, r24
     4e0:	d2 95       	swap	r29
     4e2:	df 70       	andi	r29, 0x0F	; 15
     4e4:	61 11       	cpse	r22, r1
     4e6:	09 c0       	rjmp	.+18     	; 0x4fa <lcd1602_send_byte+0x22>
     4e8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <led_pin>
     4ec:	8e 7f       	andi	r24, 0xFE	; 254
     4ee:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <led_pin>
     4f2:	6e e4       	ldi	r22, 0x4E	; 78
     4f4:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     4f8:	08 c0       	rjmp	.+16     	; 0x50a <lcd1602_send_byte+0x32>
     4fa:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <led_pin>
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <led_pin>
     504:	6e e4       	ldi	r22, 0x4E	; 78
     506:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     50a:	8d 2f       	mov	r24, r29
     50c:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     510:	8c 2f       	mov	r24, r28
     512:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <lcd1602_send_char>:
     51c:	cf 93       	push	r28
     51e:	c8 2f       	mov	r28, r24
     520:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <led_pin>
     524:	81 60       	ori	r24, 0x01	; 1
     526:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <led_pin>
     52a:	6e e4       	ldi	r22, 0x4E	; 78
     52c:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     530:	8c 2f       	mov	r24, r28
     532:	82 95       	swap	r24
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     53a:	8c 2f       	mov	r24, r28
     53c:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <lcd1602_init>:
     544:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <led_pin>
     548:	0e 94 c7 00 	call	0x18e	; 0x18e <i2c_init>
     54c:	8f e5       	ldi	r24, 0x5F	; 95
     54e:	9a ee       	ldi	r25, 0xEA	; 234
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <lcd1602_init+0xc>
     554:	00 c0       	rjmp	.+0      	; 0x556 <lcd1602_init+0x12>
     556:	00 00       	nop
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     55e:	8f e7       	ldi	r24, 0x7F	; 127
     560:	9e e3       	ldi	r25, 0x3E	; 62
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <lcd1602_init+0x1e>
     566:	00 c0       	rjmp	.+0      	; 0x568 <lcd1602_init+0x24>
     568:	00 00       	nop
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     570:	8f e8       	ldi	r24, 0x8F	; 143
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <lcd1602_init+0x30>
     578:	00 c0       	rjmp	.+0      	; 0x57a <lcd1602_init+0x36>
     57a:	00 00       	nop
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     582:	8f e9       	ldi	r24, 0x9F	; 159
     584:	9f e0       	ldi	r25, 0x0F	; 15
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <lcd1602_init+0x42>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <lcd1602_init+0x48>
     58c:	00 00       	nop
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     594:	8f e9       	ldi	r24, 0x9F	; 159
     596:	9f e0       	ldi	r25, 0x0F	; 15
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <lcd1602_init+0x54>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <lcd1602_init+0x5a>
     59e:	00 00       	nop
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	88 e2       	ldi	r24, 0x28	; 40
     5a4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     5a8:	8f e9       	ldi	r24, 0x9F	; 159
     5aa:	9f e0       	ldi	r25, 0x0F	; 15
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <lcd1602_init+0x68>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <lcd1602_init+0x6e>
     5b2:	00 00       	nop
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	8c e0       	ldi	r24, 0x0C	; 12
     5b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     5bc:	8f e9       	ldi	r24, 0x9F	; 159
     5be:	9f e0       	ldi	r25, 0x0F	; 15
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <lcd1602_init+0x7c>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <lcd1602_init+0x82>
     5c6:	00 00       	nop
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	86 e0       	ldi	r24, 0x06	; 6
     5cc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     5d0:	8f e9       	ldi	r24, 0x9F	; 159
     5d2:	9f e0       	ldi	r25, 0x0F	; 15
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <lcd1602_init+0x90>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <lcd1602_init+0x96>
     5da:	00 00       	nop
     5dc:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <led_pin>
     5e0:	88 60       	ori	r24, 0x08	; 8
     5e2:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <led_pin>
     5e6:	6e e4       	ldi	r22, 0x4E	; 78
     5e8:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     5ec:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <led_pin>
     5f0:	8d 7f       	andi	r24, 0xFD	; 253
     5f2:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <led_pin>
     5f6:	6e e4       	ldi	r22, 0x4E	; 78
     5f8:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     5fc:	08 95       	ret

000005fe <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     5fe:	90 e4       	ldi	r25, 0x40	; 64
     600:	69 9f       	mul	r22, r25
     602:	80 0d       	add	r24, r0
     604:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	80 68       	ori	r24, 0x80	; 128
     60a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     60e:	08 95       	ret

00000610 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     618:	80 81       	ld	r24, Z
     61a:	88 23       	and	r24, r24
     61c:	59 f0       	breq	.+22     	; 0x634 <lcd1602_send_string+0x24>
     61e:	8f 01       	movw	r16, r30
     620:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     622:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd1602_send_char>
		i++;
     626:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     628:	f8 01       	movw	r30, r16
     62a:	ec 0f       	add	r30, r28
     62c:	f1 1d       	adc	r31, r1
     62e:	80 81       	ld	r24, Z
     630:	81 11       	cpse	r24, r1
     632:	f7 cf       	rjmp	.-18     	; 0x622 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     63c:	88 23       	and	r24, r24
     63e:	29 f0       	breq	.+10     	; 0x64a <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	8f e0       	ldi	r24, 0x0F	; 15
     644:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     648:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	8c e0       	ldi	r24, 0x0C	; 12
     64e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     652:	08 95       	ret

00000654 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     654:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     656:	dc 01       	movw	r26, r24
     658:	12 96       	adiw	r26, 0x02	; 2
     65a:	2c 91       	ld	r18, X
     65c:	12 97       	sbiw	r26, 0x02	; 2
     65e:	54 e6       	ldi	r21, 0x64	; 100
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	8c 91       	ld	r24, X
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	52 9f       	mul	r21, r18
     668:	80 0d       	add	r24, r0
     66a:	91 1d       	adc	r25, r1
     66c:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     66e:	db 01       	movw	r26, r22
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	2c 91       	ld	r18, X
     674:	12 97       	sbiw	r26, 0x02	; 2
     676:	11 96       	adiw	r26, 0x01	; 1
     678:	6c 91       	ld	r22, X
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	52 9f       	mul	r21, r18
     67e:	60 0d       	add	r22, r0
     680:	71 1d       	adc	r23, r1
     682:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     684:	42 81       	ldd	r20, Z+2	; 0x02
     686:	21 81       	ldd	r18, Z+1	; 0x01
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	54 9f       	mul	r21, r20
     68c:	20 0d       	add	r18, r0
     68e:	31 1d       	adc	r19, r1
     690:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     692:	86 17       	cp	r24, r22
     694:	97 07       	cpc	r25, r23
     696:	68 f0       	brcs	.+26     	; 0x6b2 <period_paljenja+0x5e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	20 f0       	brcs	.+8      	; 0x6a6 <period_paljenja+0x52>
     69e:	28 33       	cpi	r18, 0x38	; 56
     6a0:	b9 e0       	ldi	r27, 0x09	; 9
     6a2:	3b 07       	cpc	r19, r27
     6a4:	78 f0       	brcs	.+30     	; 0x6c4 <period_paljenja+0x70>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	26 17       	cp	r18, r22
     6aa:	37 07       	cpc	r19, r23
     6ac:	70 f0       	brcs	.+28     	; 0x6ca <period_paljenja+0x76>
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     6b2:	28 17       	cp	r18, r24
     6b4:	39 07       	cpc	r19, r25
     6b6:	40 f0       	brcs	.+16     	; 0x6c8 <period_paljenja+0x74>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	26 17       	cp	r18, r22
     6bc:	37 07       	cpc	r19, r23
     6be:	28 f0       	brcs	.+10     	; 0x6ca <period_paljenja+0x76>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     6ca:	08 95       	ret

000006cc <fsm_lcd_menu>:

void fsm_lcd_menu()
{
     6cc:	0f 93       	push	r16
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
	int pom;
	
	switch(STATE)
     6d2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <STATE>
     6d6:	83 30       	cpi	r24, 0x03	; 3
     6d8:	09 f4       	brne	.+2      	; 0x6dc <fsm_lcd_menu+0x10>
     6da:	12 c1       	rjmp	.+548    	; 0x900 <__stack+0x1>
     6dc:	30 f4       	brcc	.+12     	; 0x6ea <fsm_lcd_menu+0x1e>
     6de:	88 23       	and	r24, r24
     6e0:	59 f0       	breq	.+22     	; 0x6f8 <fsm_lcd_menu+0x2c>
     6e2:	82 30       	cpi	r24, 0x02	; 2
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <fsm_lcd_menu+0x1c>
     6e6:	79 c0       	rjmp	.+242    	; 0x7da <fsm_lcd_menu+0x10e>
     6e8:	db c4       	rjmp	.+2486   	; 0x10a0 <__stack+0x7a1>
     6ea:	84 30       	cpi	r24, 0x04	; 4
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <fsm_lcd_menu+0x24>
     6ee:	14 c2       	rjmp	.+1064   	; 0xb18 <__stack+0x219>
     6f0:	85 30       	cpi	r24, 0x05	; 5
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <fsm_lcd_menu+0x2a>
     6f4:	74 c3       	rjmp	.+1768   	; 0xdde <__stack+0x4df>
     6f6:	d4 c4       	rjmp	.+2472   	; 0x10a0 <__stack+0x7a1>
	{
		
		case DISPL1:
				/* prvi, tj. glavni meni sa ispisom tren. vremena i vremena on/off */
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     6f8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <flag_pc_int>
     6fc:	88 23       	and	r24, r24
     6fe:	09 f4       	brne	.+2      	; 0x702 <fsm_lcd_menu+0x36>
     700:	60 c0       	rjmp	.+192    	; 0x7c2 <fsm_lcd_menu+0xf6>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     702:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <flag_pc_int>
			
					getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     706:	00 e0       	ldi	r16, 0x00	; 0
     708:	28 e0       	ldi	r18, 0x08	; 8
     70a:	32 e0       	ldi	r19, 0x02	; 2
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	52 e0       	ldi	r21, 0x02	; 2
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	72 e0       	ldi	r23, 0x02	; 2
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     71c:	e0 e0       	ldi	r30, 0x00	; 0
     71e:	f2 e0       	ldi	r31, 0x02	; 2
     720:	80 81       	ld	r24, Z
     722:	1f 92       	push	r1
     724:	8f 93       	push	r24
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	1f 92       	push	r1
     72a:	8f 93       	push	r24
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	1f 92       	push	r1
     730:	8f 93       	push	r24
     732:	88 e3       	ldi	r24, 0x38	; 56
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	c8 ec       	ldi	r28, 0xC8	; 200
     73c:	d1 e0       	ldi	r29, 0x01	; 1
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
					
					//lcd1602_clear();
			
					/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
					lcd1602_goto_xy(0,0);
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string("    ");
     74e:	87 e4       	ldi	r24, 0x47	; 71
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_send_string(bafer);
     756:	ce 01       	movw	r24, r28
     758:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_send_string("    ");
     75c:	87 e4       	ldi	r24, 0x47	; 71
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
			
					lcd1602_goto_xy(0,1);
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string("  ");
     76c:	89 e4       	ldi	r24, 0x49	; 73
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     774:	e7 ef       	ldi	r30, 0xF7	; 247
     776:	f1 e0       	ldi	r31, 0x01	; 1
     778:	81 81       	ldd	r24, Z+1	; 0x01
     77a:	1f 92       	push	r1
     77c:	8f 93       	push	r24
     77e:	82 81       	ldd	r24, Z+2	; 0x02
     780:	1f 92       	push	r1
     782:	8f 93       	push	r24
     784:	e5 ee       	ldi	r30, 0xE5	; 229
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	81 81       	ldd	r24, Z+1	; 0x01
     78a:	1f 92       	push	r1
     78c:	8f 93       	push	r24
     78e:	82 81       	ldd	r24, Z+2	; 0x02
     790:	1f 92       	push	r1
     792:	8f 93       	push	r24
     794:	8c e4       	ldi	r24, 0x4C	; 76
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9f 93       	push	r25
     79a:	8f 93       	push	r24
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
					lcd1602_send_string(bafer);
     7a4:	ce 01       	movw	r24, r28
     7a6:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_send_string("  ");
     7aa:	89 e4       	ldi	r24, 0x49	; 73
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
     7b2:	8d b7       	in	r24, 0x3d	; 61
     7b4:	9e b7       	in	r25, 0x3e	; 62
     7b6:	46 96       	adiw	r24, 0x16	; 22
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	9e bf       	out	0x3e, r25	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	8d bf       	out	0x3d, r24	; 61
			
				}
		
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut   !(tasteri & (1<<TASTER_ENTER))
     7c2:	65 e0       	ldi	r22, 0x05	; 5
     7c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     7c8:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     7cc:	88 23       	and	r24, r24
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <fsm_lcd_menu+0x106>
     7d0:	67 c4       	rjmp	.+2254   	; 0x10a0 <__stack+0x7a1>
					STATE = MENU1;
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <STATE>
     7d8:	63 c4       	rjmp	.+2246   	; 0x10a0 <__stack+0x7a1>
		break;
		
		case MENU1:
					//lcd1602_clear();
					pom = kursor;
     7da:	c0 91 9b 01 	lds	r28, 0x019B	; 0x80019b <kursor>
     7de:	0c 2e       	mov	r0, r28
     7e0:	00 0c       	add	r0, r0
     7e2:	dd 0b       	sbc	r29, r29
					
					lcd1602_goto_xy(0, 0);
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string(">");	//fiksno, a djiram text za menije vertikalno
     7ec:	81 e6       	ldi	r24, 0x61	; 97
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					
					lcd1602_goto_xy(1,0);
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string(menu1_txt[kursor]);
     7fc:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     800:	21 e1       	ldi	r18, 0x11	; 17
     802:	82 02       	muls	r24, r18
     804:	c0 01       	movw	r24, r0
     806:	11 24       	eor	r1, r1
     808:	80 50       	subi	r24, 0x00	; 0
     80a:	9f 4f       	sbci	r25, 0xFF	; 255
     80c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_goto_xy(1,1);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					pom = (pom==2) ? -1 : pom;	//if-else, wrap-around ekran
     818:	c2 30       	cpi	r28, 0x02	; 2
     81a:	d1 05       	cpc	r29, r1
     81c:	11 f4       	brne	.+4      	; 0x822 <fsm_lcd_menu+0x156>
     81e:	cf ef       	ldi	r28, 0xFF	; 255
     820:	df ef       	ldi	r29, 0xFF	; 255
					lcd1602_send_string(menu1_txt[pom + 1]);
     822:	21 96       	adiw	r28, 0x01	; 1
     824:	21 e1       	ldi	r18, 0x11	; 17
     826:	2c 9f       	mul	r18, r28
     828:	c0 01       	movw	r24, r0
     82a:	2d 9f       	mul	r18, r29
     82c:	90 0d       	add	r25, r0
     82e:	11 24       	eor	r1, r1
     830:	80 50       	subi	r24, 0x00	; 0
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					

		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     838:	63 e0       	ldi	r22, 0x03	; 3
     83a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     83e:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     842:	88 23       	and	r24, r24
     844:	59 f0       	breq	.+22     	; 0x85c <fsm_lcd_menu+0x190>
					{
						kursor++;
     846:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     84a:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor > 2)
     84c:	83 30       	cpi	r24, 0x03	; 3
     84e:	1c f4       	brge	.+6      	; 0x856 <fsm_lcd_menu+0x18a>
					

		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor++;
     850:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     854:	25 c4       	rjmp	.+2122   	; 0x10a0 <__stack+0x7a1>
						if(kursor > 2)
						kursor = 0;
     856:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
     85a:	22 c4       	rjmp	.+2116   	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     85c:	62 e0       	ldi	r22, 0x02	; 2
     85e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     862:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     866:	88 23       	and	r24, r24
     868:	59 f0       	breq	.+22     	; 0x880 <fsm_lcd_menu+0x1b4>
					{
						kursor--;
     86a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     86e:	81 50       	subi	r24, 0x01	; 1
						if(kursor < 0)
     870:	1a f0       	brmi	.+6      	; 0x878 <fsm_lcd_menu+0x1ac>
						if(kursor > 2)
						kursor = 0;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor--;
     872:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     876:	14 c4       	rjmp	.+2088   	; 0x10a0 <__stack+0x7a1>
						if(kursor < 0)
						kursor = 2;
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     87e:	10 c4       	rjmp	.+2080   	; 0x10a0 <__stack+0x7a1>
					}
					else if(kursor == 0 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     880:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     884:	81 11       	cpse	r24, r1
     886:	0d c0       	rjmp	.+26     	; 0x8a2 <fsm_lcd_menu+0x1d6>
     888:	65 e0       	ldi	r22, 0x05	; 5
     88a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     88e:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     892:	88 23       	and	r24, r24
     894:	31 f0       	breq	.+12     	; 0x8a2 <fsm_lcd_menu+0x1d6>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     896:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
						STATE = POD_SAT;	//meni za podesavanje sata
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <STATE>
     8a0:	ff c3       	rjmp	.+2046   	; 0x10a0 <__stack+0x7a1>
					}
					else if(kursor == 1 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     8a2:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     8a6:	81 30       	cpi	r24, 0x01	; 1
     8a8:	69 f4       	brne	.+26     	; 0x8c4 <fsm_lcd_menu+0x1f8>
     8aa:	65 e0       	ldi	r22, 0x05	; 5
     8ac:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     8b0:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     8b4:	88 23       	and	r24, r24
     8b6:	31 f0       	breq	.+12     	; 0x8c4 <fsm_lcd_menu+0x1f8>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     8b8:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     8bc:	84 e0       	ldi	r24, 0x04	; 4
     8be:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <STATE>
     8c2:	ee c3       	rjmp	.+2012   	; 0x10a0 <__stack+0x7a1>
					}
					else if(kursor == 2 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     8c4:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	69 f4       	brne	.+26     	; 0x8e6 <fsm_lcd_menu+0x21a>
     8cc:	65 e0       	ldi	r22, 0x05	; 5
     8ce:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     8d2:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     8d6:	88 23       	and	r24, r24
     8d8:	31 f0       	breq	.+12     	; 0x8e6 <fsm_lcd_menu+0x21a>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     8da:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
						STATE = JEDNOKRATNO;	//sub_meni za podesavanje on ili off vremena jednokratno
     8de:	85 e0       	ldi	r24, 0x05	; 5
     8e0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <STATE>
     8e4:	dd c3       	rjmp	.+1978   	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     8e6:	64 e0       	ldi	r22, 0x04	; 4
     8e8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     8ec:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     8f0:	88 23       	and	r24, r24
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <fsm_lcd_menu+0x22a>
     8f4:	d5 c3       	rjmp	.+1962   	; 0x10a0 <__stack+0x7a1>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     8f6:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     8fa:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <STATE>
     8fe:	d0 c3       	rjmp	.+1952   	; 0x10a0 <__stack+0x7a1>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (flag_pod_vremena)
     900:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <flag_pod_vremena>
     904:	88 23       	and	r24, r24
     906:	09 f4       	brne	.+2      	; 0x90a <__stack+0xb>
     908:	4b c0       	rjmp	.+150    	; 0x9a0 <__stack+0xa1>
					{
						flag_pod_vremena = 0;
     90a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <flag_pod_vremena>
						snap_shot_vremena = vreme_datum;
     90e:	89 e0       	ldi	r24, 0x09	; 9
     910:	e0 e0       	ldi	r30, 0x00	; 0
     912:	f2 e0       	ldi	r31, 0x02	; 2
     914:	af eb       	ldi	r26, 0xBF	; 191
     916:	b1 e0       	ldi	r27, 0x01	; 1
     918:	01 90       	ld	r0, Z+
     91a:	0d 92       	st	X+, r0
     91c:	8a 95       	dec	r24
     91e:	e1 f7       	brne	.-8      	; 0x918 <__stack+0x19>
						sprintf(bafer, "%02d:%02d:%02d", snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s);
     920:	ef eb       	ldi	r30, 0xBF	; 191
     922:	f1 e0       	ldi	r31, 0x01	; 1
     924:	80 81       	ld	r24, Z
     926:	1f 92       	push	r1
     928:	8f 93       	push	r24
     92a:	81 81       	ldd	r24, Z+1	; 0x01
     92c:	1f 92       	push	r1
     92e:	8f 93       	push	r24
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	1f 92       	push	r1
     934:	8f 93       	push	r24
     936:	88 e3       	ldi	r24, 0x38	; 56
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	88 ec       	ldi	r24, 0xC8	; 200
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
			
						kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     94a:	85 e0       	ldi	r24, 0x05	; 5
     94c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
			
						lcd1602_goto_xy(0,0);
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("PODESAVANJE SATA");
     958:	83 e6       	ldi	r24, 0x63	; 99
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
			
						lcd1602_goto_xy(0,1);
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("    ");
     968:	87 e4       	ldi	r24, 0x47	; 71
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     970:	88 ec       	ldi	r24, 0xC8	; 200
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string("    ");
     978:	87 e4       	ldi	r24, 0x47	; 71
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
			
						lcd1602_goto_xy(kursor,1);
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     986:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
     990:	8d b7       	in	r24, 0x3d	; 61
     992:	9e b7       	in	r25, 0x3e	; 62
     994:	0a 96       	adiw	r24, 0x0a	; 10
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	9e bf       	out	0x3e, r25	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	8d bf       	out	0x3d, r24	; 61
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     9a6:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     9aa:	88 23       	and	r24, r24
     9ac:	89 f0       	breq	.+34     	; 0x9d0 <__stack+0xd1>
					{
						kursor += 3;
     9ae:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     9b2:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 11)
     9b4:	8c 30       	cpi	r24, 0x0C	; 12
     9b6:	1c f4       	brge	.+6      	; 0x9be <__stack+0xbf>
						lcd1602_cursor_blink(1);
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     9b8:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <__stack+0xc5>
						if(kursor > 11)
							kursor = 11;
     9be:	8b e0       	ldi	r24, 0x0B	; 11
     9c0:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
						lcd1602_goto_xy(kursor,1);
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     9ca:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     9ce:	68 c3       	rjmp	.+1744   	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     9d6:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     9da:	88 23       	and	r24, r24
     9dc:	89 f0       	breq	.+34     	; 0xa00 <__stack+0x101>
					{
						kursor -= 3;
     9de:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     9e2:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 5)
     9e4:	85 30       	cpi	r24, 0x05	; 5
     9e6:	1c f0       	brlt	.+6      	; 0x9ee <__stack+0xef>
							kursor = 11;
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     9e8:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <__stack+0xf5>
						if(kursor < 5)
							kursor = 5;
     9ee:	85 e0       	ldi	r24, 0x05	; 5
     9f0:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
						lcd1602_goto_xy(kursor,1);
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     9fa:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     9fe:	50 c3       	rjmp	.+1696   	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     a00:	62 e0       	ldi	r22, 0x02	; 2
     a02:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     a06:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     a0a:	88 23       	and	r24, r24
     a0c:	39 f1       	breq	.+78     	; 0xa5c <__stack+0x15d>
					{
						if (kursor == 5)												//podesava SATE ++
     a0e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     a12:	85 30       	cpi	r24, 0x05	; 5
     a14:	51 f4       	brne	.+20     	; 0xa2a <__stack+0x12b>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UVECAJ);
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	4b e9       	ldi	r20, 0x9B	; 155
     a1a:	51 e0       	ldi	r21, 0x01	; 1
     a1c:	68 ec       	ldi	r22, 0xC8	; 200
     a1e:	71 e0       	ldi	r23, 0x01	; 1
     a20:	81 ec       	ldi	r24, 0xC1	; 193
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     a28:	3b c3       	rjmp	.+1654   	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 8)											//podesava MINUTE ++
     a2a:	88 30       	cpi	r24, 0x08	; 8
     a2c:	51 f4       	brne	.+20     	; 0xa42 <__stack+0x143>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UVECAJ);
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	4b e9       	ldi	r20, 0x9B	; 155
     a32:	51 e0       	ldi	r21, 0x01	; 1
     a34:	68 ec       	ldi	r22, 0xC8	; 200
     a36:	71 e0       	ldi	r23, 0x01	; 1
     a38:	80 ec       	ldi	r24, 0xC0	; 192
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     a40:	2f c3       	rjmp	.+1630   	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 11)											//podesava SEKUNDE ++
     a42:	8b 30       	cpi	r24, 0x0B	; 11
     a44:	09 f0       	breq	.+2      	; 0xa48 <__stack+0x149>
     a46:	2c c3       	rjmp	.+1624   	; 0x10a0 <__stack+0x7a1>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UVECAJ);
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	4b e9       	ldi	r20, 0x9B	; 155
     a4c:	51 e0       	ldi	r21, 0x01	; 1
     a4e:	68 ec       	ldi	r22, 0xC8	; 200
     a50:	71 e0       	ldi	r23, 0x01	; 1
     a52:	8f eb       	ldi	r24, 0xBF	; 191
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0e 94 e5 01 	call	0x3ca	; 0x3ca <sekundi_ispis>
     a5a:	22 c3       	rjmp	.+1604   	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     a5c:	63 e0       	ldi	r22, 0x03	; 3
     a5e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     a62:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     a66:	88 23       	and	r24, r24
     a68:	39 f1       	breq	.+78     	; 0xab8 <__stack+0x1b9>
					{
						if (kursor == 5)												//podesava SATE --
     a6a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     a6e:	85 30       	cpi	r24, 0x05	; 5
     a70:	51 f4       	brne	.+20     	; 0xa86 <__stack+0x187>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UMANJI);
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	4b e9       	ldi	r20, 0x9B	; 155
     a76:	51 e0       	ldi	r21, 0x01	; 1
     a78:	68 ec       	ldi	r22, 0xC8	; 200
     a7a:	71 e0       	ldi	r23, 0x01	; 1
     a7c:	81 ec       	ldi	r24, 0xC1	; 193
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     a84:	0d c3       	rjmp	.+1562   	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 8)											//podesava MINUTE --
     a86:	88 30       	cpi	r24, 0x08	; 8
     a88:	51 f4       	brne	.+20     	; 0xa9e <__stack+0x19f>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UMANJI);
     a8a:	21 e0       	ldi	r18, 0x01	; 1
     a8c:	4b e9       	ldi	r20, 0x9B	; 155
     a8e:	51 e0       	ldi	r21, 0x01	; 1
     a90:	68 ec       	ldi	r22, 0xC8	; 200
     a92:	71 e0       	ldi	r23, 0x01	; 1
     a94:	80 ec       	ldi	r24, 0xC0	; 192
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     a9c:	01 c3       	rjmp	.+1538   	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 11)											//podesava SEKUNDE --
     a9e:	8b 30       	cpi	r24, 0x0B	; 11
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <__stack+0x1a5>
     aa2:	fe c2       	rjmp	.+1532   	; 0x10a0 <__stack+0x7a1>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UMANJI);
     aa4:	21 e0       	ldi	r18, 0x01	; 1
     aa6:	4b e9       	ldi	r20, 0x9B	; 155
     aa8:	51 e0       	ldi	r21, 0x01	; 1
     aaa:	68 ec       	ldi	r22, 0xC8	; 200
     aac:	71 e0       	ldi	r23, 0x01	; 1
     aae:	8f eb       	ldi	r24, 0xBF	; 191
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <sekundi_ispis>
     ab6:	f4 c2       	rjmp	.+1512   	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//Potvrdi vreme koje vidis na ekranu i promeni vreme; izadji iz menija
     ab8:	65 e0       	ldi	r22, 0x05	; 5
     aba:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     abe:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     ac2:	88 23       	and	r24, r24
     ac4:	a9 f0       	breq	.+42     	; 0xaf0 <__stack+0x1f1>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s, am, _24_hour_format);
     ac6:	ef eb       	ldi	r30, 0xBF	; 191
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	00 e0       	ldi	r16, 0x00	; 0
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	40 81       	ld	r20, Z
     ad0:	61 81       	ldd	r22, Z+1	; 0x01
     ad2:	82 81       	ldd	r24, Z+2	; 0x02
     ad4:	0e 94 1e 0a 	call	0x143c	; 0x143c <setTime>
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     ade:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <STATE>
     aee:	d8 c2       	rjmp	.+1456   	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     af0:	64 e0       	ldi	r22, 0x04	; 4
     af2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     af6:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     afa:	88 23       	and	r24, r24
     afc:	09 f4       	brne	.+2      	; 0xb00 <__stack+0x201>
     afe:	d0 c2       	rjmp	.+1440   	; 0x10a0 <__stack+0x7a1>
					{
						/* Vreme setujem samo ako je stisnut ENTER, ako je stisnuto NAZAD, vreme se ne dira, tj. ovde se ne dira */
								//setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     b06:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <STATE>
     b16:	c4 c2       	rjmp	.+1416   	; 0x10a0 <__stack+0x7a1>
		break;
		
		case POD_ON_OFF:																				
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
     b18:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <flag_pod_ONOFF>
     b1c:	88 23       	and	r24, r24
     b1e:	09 f4       	brne	.+2      	; 0xb22 <__stack+0x223>
     b20:	59 c0       	rjmp	.+178    	; 0xbd4 <__stack+0x2d5>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
     b22:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <flag_pod_ONOFF>
						
						snap_vreme_paljenja = vreme_paljenja;	
     b26:	89 e0       	ldi	r24, 0x09	; 9
     b28:	e5 ee       	ldi	r30, 0xE5	; 229
     b2a:	f1 e0       	ldi	r31, 0x01	; 1
     b2c:	ae ee       	ldi	r26, 0xEE	; 238
     b2e:	b1 e0       	ldi	r27, 0x01	; 1
     b30:	01 90       	ld	r0, Z+
     b32:	0d 92       	st	X+, r0
     b34:	8a 95       	dec	r24
     b36:	e1 f7       	brne	.-8      	; 0xb30 <__stack+0x231>
						snap_vreme_gasenja = vreme_gasenja;
     b38:	89 e0       	ldi	r24, 0x09	; 9
     b3a:	e7 ef       	ldi	r30, 0xF7	; 247
     b3c:	f1 e0       	ldi	r31, 0x01	; 1
     b3e:	ac ed       	ldi	r26, 0xDC	; 220
     b40:	b1 e0       	ldi	r27, 0x01	; 1
     b42:	01 90       	ld	r0, Z+
     b44:	0d 92       	st	X+, r0
     b46:	8a 95       	dec	r24
     b48:	e1 f7       	brne	.-8      	; 0xb42 <__stack+0x243>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
						
						lcd1602_goto_xy(0,0);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("  UPALI--UGASI  ");
     b58:	84 e7       	ldi	r24, 0x74	; 116
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     b60:	ec ed       	ldi	r30, 0xDC	; 220
     b62:	f1 e0       	ldi	r31, 0x01	; 1
     b64:	81 81       	ldd	r24, Z+1	; 0x01
     b66:	1f 92       	push	r1
     b68:	8f 93       	push	r24
     b6a:	82 81       	ldd	r24, Z+2	; 0x02
     b6c:	1f 92       	push	r1
     b6e:	8f 93       	push	r24
     b70:	ee ee       	ldi	r30, 0xEE	; 238
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	81 81       	ldd	r24, Z+1	; 0x01
     b76:	1f 92       	push	r1
     b78:	8f 93       	push	r24
     b7a:	82 81       	ldd	r24, Z+2	; 0x02
     b7c:	1f 92       	push	r1
     b7e:	8f 93       	push	r24
     b80:	8c e4       	ldi	r24, 0x4C	; 76
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	9f 93       	push	r25
     b86:	8f 93       	push	r24
     b88:	88 ec       	ldi	r24, 0xC8	; 200
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	9f 93       	push	r25
     b8e:	8f 93       	push	r24
     b90:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
						
						lcd1602_goto_xy(0,1);
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("  ");
     b9c:	89 e4       	ldi	r24, 0x49	; 73
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     ba4:	88 ec       	ldi	r24, 0xC8	; 200
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string("  ");
     bac:	89 e4       	ldi	r24, 0x49	; 73
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     bba:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
     bc4:	8d b7       	in	r24, 0x3d	; 61
     bc6:	9e b7       	in	r25, 0x3e	; 62
     bc8:	0c 96       	adiw	r24, 0x0c	; 12
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	9e bf       	out	0x3e, r25	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     bda:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     bde:	88 23       	and	r24, r24
     be0:	c9 f0       	breq	.+50     	; 0xc14 <__stack+0x315>
					{
						kursor += 3;
     be2:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
     be6:	9c ef       	ldi	r25, 0xFC	; 252
     be8:	98 0f       	add	r25, r24
     bea:	93 30       	cpi	r25, 0x03	; 3
     bec:	20 f4       	brcc	.+8      	; 0xbf6 <__stack+0x2f7>
							kursor = 10;
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     bf4:	09 c0       	rjmp	.+18     	; 0xc08 <__stack+0x309>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     bf6:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
     bf8:	8e 30       	cpi	r24, 0x0E	; 14
     bfa:	1c f4       	brge	.+6      	; 0xc02 <__stack+0x303>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     bfc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     c00:	03 c0       	rjmp	.+6      	; 0xc08 <__stack+0x309>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
							kursor = 13;
     c02:	8d e0       	ldi	r24, 0x0D	; 13
     c04:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
							
						lcd1602_goto_xy(kursor,1);
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     c0e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     c12:	46 c2       	rjmp	.+1164   	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     c1a:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     c1e:	88 23       	and	r24, r24
     c20:	c9 f0       	breq	.+50     	; 0xc54 <__stack+0x355>
					{
						kursor -= 3;
     c22:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
     c26:	96 ef       	ldi	r25, 0xF6	; 246
     c28:	98 0f       	add	r25, r24
     c2a:	93 30       	cpi	r25, 0x03	; 3
     c2c:	20 f4       	brcc	.+8      	; 0xc36 <__stack+0x337>
							kursor = 6;
     c2e:	86 e0       	ldi	r24, 0x06	; 6
     c30:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     c34:	09 c0       	rjmp	.+18     	; 0xc48 <__stack+0x349>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     c36:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
     c38:	83 30       	cpi	r24, 0x03	; 3
     c3a:	1c f0       	brlt	.+6      	; 0xc42 <__stack+0x343>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     c3c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <__stack+0x349>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
							kursor = 3;
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
							
						lcd1602_goto_xy(kursor,1);
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     c4e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     c52:	26 c2       	rjmp	.+1100   	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     c54:	62 e0       	ldi	r22, 0x02	; 2
     c56:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     c5a:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     c5e:	88 23       	and	r24, r24
     c60:	99 f1       	breq	.+102    	; 0xcc8 <__stack+0x3c9>
					{
						if (kursor == 3)												//podesava SATE_ON ++
     c62:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     c66:	83 30       	cpi	r24, 0x03	; 3
     c68:	51 f4       	brne	.+20     	; 0xc7e <__stack+0x37f>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	4b e9       	ldi	r20, 0x9B	; 155
     c6e:	51 e0       	ldi	r21, 0x01	; 1
     c70:	68 ec       	ldi	r22, 0xC8	; 200
     c72:	71 e0       	ldi	r23, 0x01	; 1
     c74:	80 ef       	ldi	r24, 0xF0	; 240
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     c7c:	11 c2       	rjmp	.+1058   	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 6)											//podesava MINUTE_ON ++
     c7e:	86 30       	cpi	r24, 0x06	; 6
     c80:	51 f4       	brne	.+20     	; 0xc96 <__stack+0x397>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	4b e9       	ldi	r20, 0x9B	; 155
     c86:	51 e0       	ldi	r21, 0x01	; 1
     c88:	68 ec       	ldi	r22, 0xC8	; 200
     c8a:	71 e0       	ldi	r23, 0x01	; 1
     c8c:	8f ee       	ldi	r24, 0xEF	; 239
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     c94:	05 c2       	rjmp	.+1034   	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 10)											//podesava SATE_OFF ++
     c96:	8a 30       	cpi	r24, 0x0A	; 10
     c98:	51 f4       	brne	.+20     	; 0xcae <__stack+0x3af>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	4b e9       	ldi	r20, 0x9B	; 155
     c9e:	51 e0       	ldi	r21, 0x01	; 1
     ca0:	68 ec       	ldi	r22, 0xC8	; 200
     ca2:	71 e0       	ldi	r23, 0x01	; 1
     ca4:	8e ed       	ldi	r24, 0xDE	; 222
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     cac:	f9 c1       	rjmp	.+1010   	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
     cae:	8d 30       	cpi	r24, 0x0D	; 13
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__stack+0x3b5>
     cb2:	f6 c1       	rjmp	.+1004   	; 0x10a0 <__stack+0x7a1>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	4b e9       	ldi	r20, 0x9B	; 155
     cb8:	51 e0       	ldi	r21, 0x01	; 1
     cba:	68 ec       	ldi	r22, 0xC8	; 200
     cbc:	71 e0       	ldi	r23, 0x01	; 1
     cbe:	8d ed       	ldi	r24, 0xDD	; 221
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     cc6:	ec c1       	rjmp	.+984    	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     cc8:	63 e0       	ldi	r22, 0x03	; 3
     cca:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     cce:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     cd2:	88 23       	and	r24, r24
     cd4:	99 f1       	breq	.+102    	; 0xd3c <__stack+0x43d>
					{
						if (kursor == 3)												//podesava SATE_ON --
     cd6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     cda:	83 30       	cpi	r24, 0x03	; 3
     cdc:	51 f4       	brne	.+20     	; 0xcf2 <__stack+0x3f3>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
     cde:	21 e0       	ldi	r18, 0x01	; 1
     ce0:	4b e9       	ldi	r20, 0x9B	; 155
     ce2:	51 e0       	ldi	r21, 0x01	; 1
     ce4:	68 ec       	ldi	r22, 0xC8	; 200
     ce6:	71 e0       	ldi	r23, 0x01	; 1
     ce8:	80 ef       	ldi	r24, 0xF0	; 240
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     cf0:	d7 c1       	rjmp	.+942    	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 6)											//podesava MINUTE_ON --
     cf2:	86 30       	cpi	r24, 0x06	; 6
     cf4:	51 f4       	brne	.+20     	; 0xd0a <__stack+0x40b>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
     cf6:	21 e0       	ldi	r18, 0x01	; 1
     cf8:	4b e9       	ldi	r20, 0x9B	; 155
     cfa:	51 e0       	ldi	r21, 0x01	; 1
     cfc:	68 ec       	ldi	r22, 0xC8	; 200
     cfe:	71 e0       	ldi	r23, 0x01	; 1
     d00:	8f ee       	ldi	r24, 0xEF	; 239
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     d08:	cb c1       	rjmp	.+918    	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 10)											//podesava SATE_OFF --
     d0a:	8a 30       	cpi	r24, 0x0A	; 10
     d0c:	51 f4       	brne	.+20     	; 0xd22 <__stack+0x423>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	4b e9       	ldi	r20, 0x9B	; 155
     d12:	51 e0       	ldi	r21, 0x01	; 1
     d14:	68 ec       	ldi	r22, 0xC8	; 200
     d16:	71 e0       	ldi	r23, 0x01	; 1
     d18:	8e ed       	ldi	r24, 0xDE	; 222
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     d20:	bf c1       	rjmp	.+894    	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 13)											//podesava MINUTE_OFF --
     d22:	8d 30       	cpi	r24, 0x0D	; 13
     d24:	09 f0       	breq	.+2      	; 0xd28 <__stack+0x429>
     d26:	bc c1       	rjmp	.+888    	; 0x10a0 <__stack+0x7a1>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
     d28:	21 e0       	ldi	r18, 0x01	; 1
     d2a:	4b e9       	ldi	r20, 0x9B	; 155
     d2c:	51 e0       	ldi	r21, 0x01	; 1
     d2e:	68 ec       	ldi	r22, 0xC8	; 200
     d30:	71 e0       	ldi	r23, 0x01	; 1
     d32:	8d ed       	ldi	r24, 0xDD	; 221
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     d3a:	b2 c1       	rjmp	.+868    	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
     d3c:	65 e0       	ldi	r22, 0x05	; 5
     d3e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     d42:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     d46:	88 23       	and	r24, r24
     d48:	b1 f1       	breq	.+108    	; 0xdb6 <__stack+0x4b7>
					{
						vreme_paljenja = snap_vreme_paljenja;	//konacno upisem
     d4a:	89 e0       	ldi	r24, 0x09	; 9
     d4c:	ee ee       	ldi	r30, 0xEE	; 238
     d4e:	f1 e0       	ldi	r31, 0x01	; 1
     d50:	a5 ee       	ldi	r26, 0xE5	; 229
     d52:	b1 e0       	ldi	r27, 0x01	; 1
     d54:	01 90       	ld	r0, Z+
     d56:	0d 92       	st	X+, r0
     d58:	8a 95       	dec	r24
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <__stack+0x455>
						vreme_gasenja = snap_vreme_gasenja;
     d5c:	89 e0       	ldi	r24, 0x09	; 9
     d5e:	ec ed       	ldi	r30, 0xDC	; 220
     d60:	f1 e0       	ldi	r31, 0x01	; 1
     d62:	a7 ef       	ldi	r26, 0xF7	; 247
     d64:	b1 e0       	ldi	r27, 0x01	; 1
     d66:	01 90       	ld	r0, Z+
     d68:	0d 92       	st	X+, r0
     d6a:	8a 95       	dec	r24
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <__stack+0x467>
						
						/* upis u eeprom */
						EEPROM_write(UPALI_HR_ADR, vreme_paljenja.hr);
     d6e:	c5 ee       	ldi	r28, 0xE5	; 229
     d70:	d1 e0       	ldi	r29, 0x01	; 1
     d72:	6a 81       	ldd	r22, Y+2	; 0x02
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(UPALI_MIN_ADR, vreme_paljenja.min);
     d7c:	69 81       	ldd	r22, Y+1	; 0x01
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(UGASI_HR_ADR, vreme_gasenja.hr);
     d86:	c7 ef       	ldi	r28, 0xF7	; 247
     d88:	d1 e0       	ldi	r29, 0x01	; 1
     d8a:	6a 81       	ldd	r22, Y+2	; 0x02
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(UGASI_MIN_ADR, vreme_gasenja.min);
     d94:	69 81       	ldd	r22, Y+1	; 0x01
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
     da4:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <STATE>
     db4:	75 c1       	rjmp	.+746    	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     db6:	64 e0       	ldi	r22, 0x04	; 4
     db8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     dbc:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     dc0:	88 23       	and	r24, r24
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <__stack+0x4c7>
     dc4:	6d c1       	rjmp	.+730    	; 0x10a0 <__stack+0x7a1>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
     dcc:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <STATE>
     ddc:	61 c1       	rjmp	.+706    	; 0x10a0 <__stack+0x7a1>
		case JEDNOKRATNO:
					//da opali samo jednom, bez obzira na glavni period
					/* prakticno kopija POD-ON-OFF samo se u drugu promenljivu belezi, cak pozajmljujem i iste tmp promenljive */
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
     dde:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <flag_pod_ONOFF>
     de2:	88 23       	and	r24, r24
     de4:	09 f4       	brne	.+2      	; 0xde8 <__stack+0x4e9>
     de6:	59 c0       	rjmp	.+178    	; 0xe9a <__stack+0x59b>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
     de8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <flag_pod_ONOFF>
						
						snap_vreme_paljenja = jednokratno_paljenje;
     dec:	89 e0       	ldi	r24, 0x09	; 9
     dee:	e6 eb       	ldi	r30, 0xB6	; 182
     df0:	f1 e0       	ldi	r31, 0x01	; 1
     df2:	ae ee       	ldi	r26, 0xEE	; 238
     df4:	b1 e0       	ldi	r27, 0x01	; 1
     df6:	01 90       	ld	r0, Z+
     df8:	0d 92       	st	X+, r0
     dfa:	8a 95       	dec	r24
     dfc:	e1 f7       	brne	.-8      	; 0xdf6 <__stack+0x4f7>
						snap_vreme_gasenja = jednokratno_gasenje;
     dfe:	89 e0       	ldi	r24, 0x09	; 9
     e00:	ed ea       	ldi	r30, 0xAD	; 173
     e02:	f1 e0       	ldi	r31, 0x01	; 1
     e04:	ac ed       	ldi	r26, 0xDC	; 220
     e06:	b1 e0       	ldi	r27, 0x01	; 1
     e08:	01 90       	ld	r0, Z+
     e0a:	0d 92       	st	X+, r0
     e0c:	8a 95       	dec	r24
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <__stack+0x509>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
						
						lcd1602_goto_xy(0,0);
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("  JEDNOKRATNO:  ");
     e1e:	85 e8       	ldi	r24, 0x85	; 133
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     e26:	ec ed       	ldi	r30, 0xDC	; 220
     e28:	f1 e0       	ldi	r31, 0x01	; 1
     e2a:	81 81       	ldd	r24, Z+1	; 0x01
     e2c:	1f 92       	push	r1
     e2e:	8f 93       	push	r24
     e30:	82 81       	ldd	r24, Z+2	; 0x02
     e32:	1f 92       	push	r1
     e34:	8f 93       	push	r24
     e36:	ee ee       	ldi	r30, 0xEE	; 238
     e38:	f1 e0       	ldi	r31, 0x01	; 1
     e3a:	81 81       	ldd	r24, Z+1	; 0x01
     e3c:	1f 92       	push	r1
     e3e:	8f 93       	push	r24
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	1f 92       	push	r1
     e44:	8f 93       	push	r24
     e46:	8c e4       	ldi	r24, 0x4C	; 76
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	9f 93       	push	r25
     e4c:	8f 93       	push	r24
     e4e:	88 ec       	ldi	r24, 0xC8	; 200
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	9f 93       	push	r25
     e54:	8f 93       	push	r24
     e56:	0e 94 5f 0b 	call	0x16be	; 0x16be <sprintf>
						
						lcd1602_goto_xy(0,1);
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("  ");
     e62:	89 e4       	ldi	r24, 0x49	; 73
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     e6a:	88 ec       	ldi	r24, 0xC8	; 200
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string("  ");
     e72:	89 e4       	ldi	r24, 0x49	; 73
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     e80:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
     e8a:	8d b7       	in	r24, 0x3d	; 61
     e8c:	9e b7       	in	r25, 0x3e	; 62
     e8e:	0c 96       	adiw	r24, 0x0c	; 12
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	9e bf       	out	0x3e, r25	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     ea0:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     ea4:	88 23       	and	r24, r24
     ea6:	c9 f0       	breq	.+50     	; 0xeda <__stack+0x5db>
					{
						kursor += 3;
     ea8:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
     eac:	9c ef       	ldi	r25, 0xFC	; 252
     eae:	98 0f       	add	r25, r24
     eb0:	93 30       	cpi	r25, 0x03	; 3
     eb2:	20 f4       	brcc	.+8      	; 0xebc <__stack+0x5bd>
						kursor = 10;
     eb4:	8a e0       	ldi	r24, 0x0A	; 10
     eb6:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     eba:	09 c0       	rjmp	.+18     	; 0xece <__stack+0x5cf>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     ebc:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 10;
						else if (kursor > 13)
     ebe:	8e 30       	cpi	r24, 0x0E	; 14
     ec0:	1c f4       	brge	.+6      	; 0xec8 <__stack+0x5c9>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     ec2:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     ec6:	03 c0       	rjmp	.+6      	; 0xece <__stack+0x5cf>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 10;
						else if (kursor > 13)
						kursor = 13;
     ec8:	8d e0       	ldi	r24, 0x0D	; 13
     eca:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
						
						lcd1602_goto_xy(kursor,1);
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     ed4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     ed8:	e3 c0       	rjmp	.+454    	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     ee0:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     ee4:	88 23       	and	r24, r24
     ee6:	c9 f0       	breq	.+50     	; 0xf1a <__stack+0x61b>
					{
						kursor -= 3;
     ee8:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
     eec:	96 ef       	ldi	r25, 0xF6	; 246
     eee:	98 0f       	add	r25, r24
     ef0:	93 30       	cpi	r25, 0x03	; 3
     ef2:	20 f4       	brcc	.+8      	; 0xefc <__stack+0x5fd>
						kursor = 6;
     ef4:	86 e0       	ldi	r24, 0x06	; 6
     ef6:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     efa:	09 c0       	rjmp	.+18     	; 0xf0e <__stack+0x60f>
						
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     efc:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 6;
						else if(kursor < 3)
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	1c f0       	brlt	.+6      	; 0xf08 <__stack+0x609>
						
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     f02:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <__stack+0x60f>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 6;
						else if(kursor < 3)
						kursor = 3;
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kursor>
						
						lcd1602_goto_xy(kursor,1);
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     f14:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     f18:	c3 c0       	rjmp	.+390    	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     f1a:	62 e0       	ldi	r22, 0x02	; 2
     f1c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     f20:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     f24:	88 23       	and	r24, r24
     f26:	99 f1       	breq	.+102    	; 0xf8e <__stack+0x68f>
					{
						if (kursor == 3)												//podesava SATE_ON ++
     f28:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	51 f4       	brne	.+20     	; 0xf44 <__stack+0x645>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	4b e9       	ldi	r20, 0x9B	; 155
     f34:	51 e0       	ldi	r21, 0x01	; 1
     f36:	68 ec       	ldi	r22, 0xC8	; 200
     f38:	71 e0       	ldi	r23, 0x01	; 1
     f3a:	80 ef       	ldi	r24, 0xF0	; 240
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     f42:	ae c0       	rjmp	.+348    	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 6)											//podesava MINUTE_ON ++
     f44:	86 30       	cpi	r24, 0x06	; 6
     f46:	51 f4       	brne	.+20     	; 0xf5c <__stack+0x65d>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	4b e9       	ldi	r20, 0x9B	; 155
     f4c:	51 e0       	ldi	r21, 0x01	; 1
     f4e:	68 ec       	ldi	r22, 0xC8	; 200
     f50:	71 e0       	ldi	r23, 0x01	; 1
     f52:	8f ee       	ldi	r24, 0xEF	; 239
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     f5a:	a2 c0       	rjmp	.+324    	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 10)											//podesava SATE_OFF ++
     f5c:	8a 30       	cpi	r24, 0x0A	; 10
     f5e:	51 f4       	brne	.+20     	; 0xf74 <__stack+0x675>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	4b e9       	ldi	r20, 0x9B	; 155
     f64:	51 e0       	ldi	r21, 0x01	; 1
     f66:	68 ec       	ldi	r22, 0xC8	; 200
     f68:	71 e0       	ldi	r23, 0x01	; 1
     f6a:	8e ed       	ldi	r24, 0xDE	; 222
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     f72:	96 c0       	rjmp	.+300    	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
     f74:	8d 30       	cpi	r24, 0x0D	; 13
     f76:	09 f0       	breq	.+2      	; 0xf7a <__stack+0x67b>
     f78:	93 c0       	rjmp	.+294    	; 0x10a0 <__stack+0x7a1>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	4b e9       	ldi	r20, 0x9B	; 155
     f7e:	51 e0       	ldi	r21, 0x01	; 1
     f80:	68 ec       	ldi	r22, 0xC8	; 200
     f82:	71 e0       	ldi	r23, 0x01	; 1
     f84:	8d ed       	ldi	r24, 0xDD	; 221
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     f8c:	89 c0       	rjmp	.+274    	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     f8e:	63 e0       	ldi	r22, 0x03	; 3
     f90:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     f94:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
     f98:	88 23       	and	r24, r24
     f9a:	99 f1       	breq	.+102    	; 0x1002 <__stack+0x703>
					{
						if (kursor == 3)												//podesava SATE_ON --
     f9c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kursor>
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	51 f4       	brne	.+20     	; 0xfb8 <__stack+0x6b9>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	4b e9       	ldi	r20, 0x9B	; 155
     fa8:	51 e0       	ldi	r21, 0x01	; 1
     faa:	68 ec       	ldi	r22, 0xC8	; 200
     fac:	71 e0       	ldi	r23, 0x01	; 1
     fae:	80 ef       	ldi	r24, 0xF0	; 240
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     fb6:	74 c0       	rjmp	.+232    	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 6)											//podesava MINUTE_ON --
     fb8:	86 30       	cpi	r24, 0x06	; 6
     fba:	51 f4       	brne	.+20     	; 0xfd0 <__stack+0x6d1>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
     fbc:	21 e0       	ldi	r18, 0x01	; 1
     fbe:	4b e9       	ldi	r20, 0x9B	; 155
     fc0:	51 e0       	ldi	r21, 0x01	; 1
     fc2:	68 ec       	ldi	r22, 0xC8	; 200
     fc4:	71 e0       	ldi	r23, 0x01	; 1
     fc6:	8f ee       	ldi	r24, 0xEF	; 239
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     fce:	68 c0       	rjmp	.+208    	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 10)											//podesava SATE_OFF --
     fd0:	8a 30       	cpi	r24, 0x0A	; 10
     fd2:	51 f4       	brne	.+20     	; 0xfe8 <__stack+0x6e9>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
     fd4:	21 e0       	ldi	r18, 0x01	; 1
     fd6:	4b e9       	ldi	r20, 0x9B	; 155
     fd8:	51 e0       	ldi	r21, 0x01	; 1
     fda:	68 ec       	ldi	r22, 0xC8	; 200
     fdc:	71 e0       	ldi	r23, 0x01	; 1
     fde:	8e ed       	ldi	r24, 0xDE	; 222
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     fe6:	5c c0       	rjmp	.+184    	; 0x10a0 <__stack+0x7a1>
						else if (kursor == 13)											//podesava MINUTE_OFF --
     fe8:	8d 30       	cpi	r24, 0x0D	; 13
     fea:	09 f0       	breq	.+2      	; 0xfee <__stack+0x6ef>
     fec:	59 c0       	rjmp	.+178    	; 0x10a0 <__stack+0x7a1>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
     fee:	21 e0       	ldi	r18, 0x01	; 1
     ff0:	4b e9       	ldi	r20, 0x9B	; 155
     ff2:	51 e0       	ldi	r21, 0x01	; 1
     ff4:	68 ec       	ldi	r22, 0xC8	; 200
     ff6:	71 e0       	ldi	r23, 0x01	; 1
     ff8:	8d ed       	ldi	r24, 0xDD	; 221
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
    1000:	4f c0       	rjmp	.+158    	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    1002:	65 e0       	ldi	r22, 0x05	; 5
    1004:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
    1008:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
    100c:	88 23       	and	r24, r24
    100e:	b1 f1       	breq	.+108    	; 0x107c <__stack+0x77d>
					{
						jednokratno_paljenje = snap_vreme_paljenja;	//konacno upisem
    1010:	89 e0       	ldi	r24, 0x09	; 9
    1012:	ee ee       	ldi	r30, 0xEE	; 238
    1014:	f1 e0       	ldi	r31, 0x01	; 1
    1016:	a6 eb       	ldi	r26, 0xB6	; 182
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	01 90       	ld	r0, Z+
    101c:	0d 92       	st	X+, r0
    101e:	8a 95       	dec	r24
    1020:	e1 f7       	brne	.-8      	; 0x101a <__stack+0x71b>
						jednokratno_gasenje = snap_vreme_gasenja;
    1022:	89 e0       	ldi	r24, 0x09	; 9
    1024:	ec ed       	ldi	r30, 0xDC	; 220
    1026:	f1 e0       	ldi	r31, 0x01	; 1
    1028:	ad ea       	ldi	r26, 0xAD	; 173
    102a:	b1 e0       	ldi	r27, 0x01	; 1
    102c:	01 90       	ld	r0, Z+
    102e:	0d 92       	st	X+, r0
    1030:	8a 95       	dec	r24
    1032:	e1 f7       	brne	.-8      	; 0x102c <__stack+0x72d>
						
						/* upis u eeprom */
						EEPROM_write(JEDNOK_UPALI_HR_ADR, jednokratno_paljenje.hr);
    1034:	c6 eb       	ldi	r28, 0xB6	; 182
    1036:	d1 e0       	ldi	r29, 0x01	; 1
    1038:	6a 81       	ldd	r22, Y+2	; 0x02
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(JEDNOK_UPALI_MIN_ADR, jednokratno_paljenje.min);
    1042:	69 81       	ldd	r22, Y+1	; 0x01
    1044:	85 e0       	ldi	r24, 0x05	; 5
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_HR_ADR, jednokratno_gasenje.hr);
    104c:	cd ea       	ldi	r28, 0xAD	; 173
    104e:	d1 e0       	ldi	r29, 0x01	; 1
    1050:	6a 81       	ldd	r22, Y+2	; 0x02
    1052:	86 e0       	ldi	r24, 0x06	; 6
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_MIN_ADR, jednokratno_gasenje.min);
    105a:	69 81       	ldd	r22, Y+1	; 0x01
    105c:	87 e0       	ldi	r24, 0x07	; 7
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    106a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <STATE>
    107a:	12 c0       	rjmp	.+36     	; 0x10a0 <__stack+0x7a1>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    107c:	64 e0       	ldi	r22, 0x04	; 4
    107e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
    1082:	0e 94 29 09 	call	0x1252	; 0x1252 <ocitaj_jedan_taster>
    1086:	88 23       	and	r24, r24
    1088:	59 f0       	breq	.+22     	; 0x10a0 <__stack+0x7a1>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    1090:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <STATE>
		break;
		
		default: {}
		
	}
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <main>:
{
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			
    10a8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
    10ac:	0e 94 c7 00 	call	0x18e	; 0x18e <i2c_init>
	lcd1602_init();
    10b0:	0e 94 a2 02 	call	0x544	; 0x544 <lcd1602_init>
	ADC_init();				
    10b4:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda 500k
    10b8:	60 e2       	ldi	r22, 0x20	; 32
    10ba:	71 ea       	ldi	r23, 0xA1	; 161
    10bc:	87 e0       	ldi	r24, 0x07	; 7
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <uart_init>
	DS3231_init();			//RTC init
    10c4:	0e 94 d7 09 	call	0x13ae	; 0x13ae <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
    10c8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <pc_init>
	tasteri_init();			//NAPOMENA: PD2-7 INPUT, INT_PULLUP=ON
    10cc:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
    10d0:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;		//pinB 4 OUTPUT 
    10d2:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
    10d4:	78 94       	sei
	//EEPROM_write(UPALI_MIN_ADR, 25);
	//EEPROM_write(UGASI_HR_ADR, 5);
	//EEPROM_write(UGASI_MIN_ADR, 45);
	
	/* citanje on-off vremena iz eeproma pri inicijalizaciji */
	vreme_paljenja.hr = EEPROM_read(UPALI_HR_ADR);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    10de:	c5 ee       	ldi	r28, 0xE5	; 229
    10e0:	d1 e0       	ldi	r29, 0x01	; 1
    10e2:	8a 83       	std	Y+2, r24	; 0x02
	vreme_paljenja.min = EEPROM_read(UPALI_MIN_ADR);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    10ec:	89 83       	std	Y+1, r24	; 0x01
	vreme_gasenja.hr = EEPROM_read(UGASI_HR_ADR);
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    10f6:	c7 ef       	ldi	r28, 0xF7	; 247
    10f8:	d1 e0       	ldi	r29, 0x01	; 1
    10fa:	8a 83       	std	Y+2, r24	; 0x02
	vreme_gasenja.min = EEPROM_read(UGASI_MIN_ADR);
    10fc:	83 e0       	ldi	r24, 0x03	; 3
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    1104:	89 83       	std	Y+1, r24	; 0x01
	
	jednokratno_paljenje.hr = EEPROM_read(JEDNOK_UPALI_HR_ADR);
    1106:	84 e0       	ldi	r24, 0x04	; 4
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    110e:	c6 eb       	ldi	r28, 0xB6	; 182
    1110:	d1 e0       	ldi	r29, 0x01	; 1
    1112:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_paljenje.min = EEPROM_read(JEDNOK_UPALI_MIN_ADR);
    1114:	85 e0       	ldi	r24, 0x05	; 5
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    111c:	89 83       	std	Y+1, r24	; 0x01
	jednokratno_gasenje.hr = EEPROM_read(JEDNOK_UGASI_HR_ADR);
    111e:	86 e0       	ldi	r24, 0x06	; 6
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    1126:	cd ea       	ldi	r28, 0xAD	; 173
    1128:	d1 e0       	ldi	r29, 0x01	; 1
    112a:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_gasenje.min = EEPROM_read(JEDNOK_UGASI_MIN_ADR);
    112c:	87 e0       	ldi	r24, 0x07	; 7
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    1134:	89 83       	std	Y+1, r24	; 0x01
	
	snap_vreme_paljenja = vreme_paljenja;
    1136:	89 e0       	ldi	r24, 0x09	; 9
    1138:	e5 ee       	ldi	r30, 0xE5	; 229
    113a:	f1 e0       	ldi	r31, 0x01	; 1
    113c:	ae ee       	ldi	r26, 0xEE	; 238
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	01 90       	ld	r0, Z+
    1142:	0d 92       	st	X+, r0
    1144:	8a 95       	dec	r24
    1146:	e1 f7       	brne	.-8      	; 0x1140 <main+0x98>
	snap_vreme_gasenja = vreme_gasenja;
    1148:	89 e0       	ldi	r24, 0x09	; 9
    114a:	e7 ef       	ldi	r30, 0xF7	; 247
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	ac ed       	ldi	r26, 0xDC	; 220
    1150:	b1 e0       	ldi	r27, 0x01	; 1
    1152:	01 90       	ld	r0, Z+
    1154:	0d 92       	st	X+, r0
    1156:	8a 95       	dec	r24
    1158:	e1 f7       	brne	.-8      	; 0x1152 <main+0xaa>
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
    115a:	0e 94 00 09 	call	0x1200	; 0x1200 <ocitaj_tastere>
    115e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <tasteri>
		
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
    1162:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <flag_pc_int_pomocni>
    1166:	88 23       	and	r24, r24
    1168:	e1 f0       	breq	.+56     	; 0x11a2 <main+0xfa>
		{
			flag_pc_int_pomocni = 0;
    116a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
    116e:	00 e0       	ldi	r16, 0x00	; 0
    1170:	28 e0       	ldi	r18, 0x08	; 8
    1172:	32 e0       	ldi	r19, 0x02	; 2
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	52 e0       	ldi	r21, 0x02	; 2
    1178:	61 e0       	ldi	r22, 0x01	; 1
    117a:	72 e0       	ldi	r23, 0x02	; 2
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	92 e0       	ldi	r25, 0x02	; 2
    1180:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <getTime>
			//sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
			//send_str(bafer);
			//send_str("\n"); //novi red
			
			/* paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno = period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	52 e0       	ldi	r21, 0x02	; 2
    1188:	67 ef       	ldi	r22, 0xF7	; 247
    118a:	71 e0       	ldi	r23, 0x01	; 1
    118c:	85 ee       	ldi	r24, 0xE5	; 229
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 2a 03 	call	0x654	; 0x654 <period_paljenja>
    1194:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <ukljuceno>
			
			if (ukljuceno)
    1198:	88 23       	and	r24, r24
    119a:	11 f0       	breq	.+4      	; 0x11a0 <main+0xf8>
				PORTB |= 1<<PINB5;   //high
    119c:	2d 9a       	sbi	0x05, 5	; 5
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <main+0xfa>
			else
				PORTB &= ~(1<<PINB5);	//low
    11a0:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
    11a2:	0e 94 66 03 	call	0x6cc	; 0x6cc <fsm_lcd_menu>
		

		
    }
    11a6:	d9 cf       	rjmp	.-78     	; 0x115a <main+0xb2>

000011a8 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
    11a8:	e8 e6       	ldi	r30, 0x68	; 104
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	82 60       	ori	r24, 0x02	; 2
    11b0:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
    11b2:	ec e6       	ldi	r30, 0x6C	; 108
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	88 60       	ori	r24, 0x08	; 8
    11ba:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
    11bc:	3b 98       	cbi	0x07, 3	; 7
    11be:	08 95       	ret

000011c0 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
    11c0:	1f 92       	push	r1
    11c2:	0f 92       	push	r0
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	0f 92       	push	r0
    11c8:	11 24       	eor	r1, r1
    11ca:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
    11cc:	33 9b       	sbis	0x06, 3	; 6
    11ce:	05 c0       	rjmp	.+10     	; 0x11da <__vector_4+0x1a>
	{
		flag_pc_int = 1;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <flag_pc_int>
		flag_pc_int_pomocni = 1;
    11d6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <flag_pc_int_pomocni>
	}
		
    11da:	8f 91       	pop	r24
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <tasteri_init>:
extern const char *byte_to_binary(int x);

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
    11e6:	8a b1       	in	r24, 0x0a	; 10
    11e8:	8f 70       	andi	r24, 0x0F	; 15
    11ea:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
    11ec:	84 b1       	in	r24, 0x04	; 4
    11ee:	8c 7f       	andi	r24, 0xFC	; 252
    11f0:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
    11f2:	8b b1       	in	r24, 0x0b	; 11
    11f4:	80 6f       	ori	r24, 0xF0	; 240
    11f6:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
    11f8:	85 b1       	in	r24, 0x05	; 5
    11fa:	83 60       	ori	r24, 0x03	; 3
    11fc:	85 b9       	out	0x05, r24	; 5
    11fe:	08 95       	ret

00001200 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
    1200:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <flag_prekid_debounce_time_half>
    1204:	88 23       	and	r24, r24
    1206:	69 f0       	breq	.+26     	; 0x1222 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
    1208:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
    120c:	93 b1       	in	r25, 0x03	; 3
    120e:	29 b1       	in	r18, 0x09	; 9
    1210:	30 e1       	ldi	r19, 0x10	; 16
    1212:	93 9f       	mul	r25, r19
    1214:	c0 01       	movw	r24, r0
    1216:	11 24       	eor	r1, r1
    1218:	92 2f       	mov	r25, r18
    121a:	92 95       	swap	r25
    121c:	9f 70       	andi	r25, 0x0F	; 15
    121e:	89 2b       	or	r24, r25
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
    1222:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
    1224:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <flag_prekid_debounce_time>
    1228:	99 23       	and	r25, r25
    122a:	81 f0       	breq	.+32     	; 0x124c <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
    122c:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
    1230:	93 b1       	in	r25, 0x03	; 3
    1232:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
    1234:	50 e1       	ldi	r21, 0x10	; 16
    1236:	95 9f       	mul	r25, r21
    1238:	90 01       	movw	r18, r0
    123a:	11 24       	eor	r1, r1
    123c:	94 2f       	mov	r25, r20
    123e:	92 95       	swap	r25
    1240:	9f 70       	andi	r25, 0x0F	; 15
    1242:	29 2b       	or	r18, r25
    1244:	82 13       	cpse	r24, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
    1248:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <tasteri_reg.1953>
		
	}
	
	return tasteri_reg;
}
    124c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <tasteri_reg.1953>
    1250:	08 95       	ret

00001252 <ocitaj_jedan_taster>:
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	static uint8_t delay_enable = 1;
	uint8_t pom;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	20 95       	com	r18
    1258:	30 95       	com	r19
    125a:	e6 2f       	mov	r30, r22
    125c:	a9 01       	movw	r20, r18
    125e:	06 2e       	mov	r0, r22
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <ocitaj_jedan_taster+0x14>
    1262:	55 95       	asr	r21
    1264:	47 95       	ror	r20
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <ocitaj_jedan_taster+0x10>
    126a:	40 ff       	sbrs	r20, 0
    126c:	17 c0       	rjmp	.+46     	; 0x129c <ocitaj_jedan_taster+0x4a>
    126e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <flag_stisnut.1962>
    1272:	91 11       	cpse	r25, r1
    1274:	13 c0       	rjmp	.+38     	; 0x129c <ocitaj_jedan_taster+0x4a>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <flag_stisnut.1962>
		temp_tast = button;		//zapamtim koji je taster stisnut
    127c:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <temp_tast.1961>
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1280:	80 95       	com	r24
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	06 2e       	mov	r0, r22
    1288:	02 c0       	rjmp	.+4      	; 0x128e <ocitaj_jedan_taster+0x3c>
    128a:	44 0f       	add	r20, r20
    128c:	55 1f       	adc	r21, r21
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <ocitaj_jedan_taster+0x38>
    1292:	84 23       	and	r24, r20
    1294:	09 f0       	breq	.+2      	; 0x1298 <ocitaj_jedan_taster+0x46>
    1296:	45 c0       	rjmp	.+138    	; 0x1322 <ocitaj_jedan_taster+0xd0>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	08 95       	ret
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
    129c:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <temp_tast.1961>
    12a0:	e9 2f       	mov	r30, r25
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    12a2:	80 95       	com	r24
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	09 2e       	mov	r0, r25
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <ocitaj_jedan_taster+0x5e>
    12ac:	44 0f       	add	r20, r20
    12ae:	55 1f       	adc	r21, r21
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <ocitaj_jedan_taster+0x5a>
    12b4:	84 23       	and	r24, r20
    12b6:	19 f1       	breq	.+70     	; 0x12fe <ocitaj_jedan_taster+0xac>
    12b8:	8e ef       	ldi	r24, 0xFE	; 254
    12ba:	89 0f       	add	r24, r25
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	08 f5       	brcc	.+66     	; 0x1302 <ocitaj_jedan_taster+0xb0>
    12c0:	69 13       	cpse	r22, r25
    12c2:	21 c0       	rjmp	.+66     	; 0x1306 <ocitaj_jedan_taster+0xb4>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	01 c0       	rjmp	.+2      	; 0x12ca <ocitaj_jedan_taster+0x78>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
		   ovo radim da bi bilo moguce brze menjati sate ako je taster ostao stisnut, da ne bi morao 30 puta stiskati i pustati taster */
		//startuj "delay" tajmer, ali samo prvi put
		//ako je delay istekao periodicno togluj promenljivu "stisnut", jer ce to napraviti efekat brzog stiskanja
		//kada je taster otpusten opet dozvoli startovanje "delay" tajmera
		
		if (delay_enable == 1)
    12ca:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <delay_enable.1963>
    12ce:	91 30       	cpi	r25, 0x01	; 1
    12d0:	31 f4       	brne	.+12     	; 0x12de <ocitaj_jedan_taster+0x8c>
		{
			delay_enable = 0;	//spreci ponovni ulazak
    12d2:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <delay_enable.1963>
			delay_timer = 0;	//start, timer ISR ga uvecava
    12d6:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <delay_timer+0x1>
    12da:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <delay_timer>
		}
		if (delay_timer >= 400)	//ako je delay veci od 400ms togluj "stisnut"
    12de:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <delay_timer>
    12e2:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <delay_timer+0x1>
    12e6:	20 39       	cpi	r18, 0x90	; 144
    12e8:	31 40       	sbci	r19, 0x01	; 1
    12ea:	00 f1       	brcs	.+64     	; 0x132c <ocitaj_jedan_taster+0xda>
		{
			if(flag_prekid_50ms)
    12ec:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <flag_prekid_50ms>
    12f0:	99 23       	and	r25, r25
    12f2:	e1 f0       	breq	.+56     	; 0x132c <ocitaj_jedan_taster+0xda>
			{
				flag_prekid_50ms = 0; //reset flag-a
    12f4:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <flag_prekid_50ms>
				stisnut ^= 0b1;	//toggle
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	89 27       	eor	r24, r25
    12fc:	08 95       	ret
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <ocitaj_jedan_taster+0xb6>
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <ocitaj_jedan_taster+0xb6>
    1306:	80 e0       	ldi	r24, 0x00	; 0
			}
			
				
		}		
	}
	else if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
    1308:	02 c0       	rjmp	.+4      	; 0x130e <ocitaj_jedan_taster+0xbc>
    130a:	35 95       	asr	r19
    130c:	27 95       	ror	r18
    130e:	ea 95       	dec	r30
    1310:	e2 f7       	brpl	.-8      	; 0x130a <ocitaj_jedan_taster+0xb8>
    1312:	20 fd       	sbrc	r18, 0
    1314:	0b c0       	rjmp	.+22     	; 0x132c <ocitaj_jedan_taster+0xda>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
    1316:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <flag_stisnut.1962>
		delay_enable = 1;	//dozvoli ponovno startovanje "delay" tajmera ako je taster otpusten
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <delay_enable.1963>
	sprintf(buff, "flag_stis:%d  ", flag_stisnut);
	send_str(buff);		
	send_str("\n");
	*/
	
	return stisnut;
    1320:	08 95       	ret
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1322:	62 50       	subi	r22, 0x02	; 2
    1324:	62 30       	cpi	r22, 0x02	; 2
    1326:	80 f2       	brcs	.-96     	; 0x12c8 <ocitaj_jedan_taster+0x76>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	ee cf       	rjmp	.-36     	; 0x1308 <ocitaj_jedan_taster+0xb6>
	send_str(buff);		
	send_str("\n");
	*/
	
	return stisnut;
    132c:	08 95       	ret

0000132e <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
    132e:	98 2f       	mov	r25, r24
    1330:	92 95       	swap	r25
    1332:	9f 70       	andi	r25, 0x0F	; 15
    1334:	99 0f       	add	r25, r25
    1336:	29 2f       	mov	r18, r25
    1338:	22 0f       	add	r18, r18
    133a:	22 0f       	add	r18, r18
    133c:	92 0f       	add	r25, r18
    133e:	8f 70       	andi	r24, 0x0F	; 15
    1340:	89 0f       	add	r24, r25
    1342:	08 95       	ret

00001344 <decimal_to_bcd>:
    1344:	9d ec       	ldi	r25, 0xCD	; 205
    1346:	89 9f       	mul	r24, r25
    1348:	91 2d       	mov	r25, r1
    134a:	11 24       	eor	r1, r1
    134c:	96 95       	lsr	r25
    134e:	96 95       	lsr	r25
    1350:	96 95       	lsr	r25
    1352:	20 e1       	ldi	r18, 0x10	; 16
    1354:	92 9f       	mul	r25, r18
    1356:	a0 01       	movw	r20, r0
    1358:	11 24       	eor	r1, r1
    135a:	99 0f       	add	r25, r25
    135c:	29 2f       	mov	r18, r25
    135e:	22 0f       	add	r18, r18
    1360:	22 0f       	add	r18, r18
    1362:	92 0f       	add	r25, r18
    1364:	89 1b       	sub	r24, r25
    1366:	8f 70       	andi	r24, 0x0F	; 15
    1368:	84 2b       	or	r24, r20
    136a:	08 95       	ret

0000136c <DS3231_Read>:
    136c:	cf 93       	push	r28
    136e:	c8 2f       	mov	r28, r24
    1370:	80 ed       	ldi	r24, 0xD0	; 208
    1372:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
    1376:	8c 2f       	mov	r24, r28
    1378:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
    137c:	81 ed       	ldi	r24, 0xD1	; 209
    137e:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
    1382:	0e 94 10 01 	call	0x220	; 0x220 <i2c_readNak>
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <DS3231_Write>:
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	d8 2f       	mov	r29, r24
    1390:	c6 2f       	mov	r28, r22
    1392:	80 ed       	ldi	r24, 0xD0	; 208
    1394:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
    1398:	8d 2f       	mov	r24, r29
    139a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
    139e:	8c 2f       	mov	r24, r28
    13a0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
    13a4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2c_stop>
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <DS3231_init>:
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	8e e0       	ldi	r24, 0x0E	; 14
    13b2:	0e 94 c5 09 	call	0x138a	; 0x138a <DS3231_Write>
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	8f e0       	ldi	r24, 0x0F	; 15
    13ba:	0e 94 c5 09 	call	0x138a	; 0x138a <DS3231_Write>
    13be:	08 95       	ret

000013c0 <getTime>:
    13c0:	af 92       	push	r10
    13c2:	bf 92       	push	r11
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	ec 01       	movw	r28, r24
    13d4:	7b 01       	movw	r14, r22
    13d6:	6a 01       	movw	r12, r20
    13d8:	59 01       	movw	r10, r18
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	0e 94 b6 09 	call	0x136c	; 0x136c <DS3231_Read>
    13e0:	0e 94 97 09 	call	0x132e	; 0x132e <bcd_to_decimal>
    13e4:	f6 01       	movw	r30, r12
    13e6:	80 83       	st	Z, r24
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	0e 94 b6 09 	call	0x136c	; 0x136c <DS3231_Read>
    13ee:	0e 94 97 09 	call	0x132e	; 0x132e <bcd_to_decimal>
    13f2:	f7 01       	movw	r30, r14
    13f4:	80 83       	st	Z, r24
    13f6:	01 30       	cpi	r16, 0x01	; 1
    13f8:	81 f4       	brne	.+32     	; 0x141a <getTime+0x5a>
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	0e 94 b6 09 	call	0x136c	; 0x136c <DS3231_Read>
    1400:	85 fb       	bst	r24, 5
    1402:	88 27       	eor	r24, r24
    1404:	80 f9       	bld	r24, 0
    1406:	f5 01       	movw	r30, r10
    1408:	80 83       	st	Z, r24
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	0e 94 b6 09 	call	0x136c	; 0x136c <DS3231_Read>
    1410:	8f 71       	andi	r24, 0x1F	; 31
    1412:	0e 94 97 09 	call	0x132e	; 0x132e <bcd_to_decimal>
    1416:	88 83       	st	Y, r24
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <getTime+0x68>
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	0e 94 b6 09 	call	0x136c	; 0x136c <DS3231_Read>
    1420:	8f 73       	andi	r24, 0x3F	; 63
    1422:	0e 94 97 09 	call	0x132e	; 0x132e <bcd_to_decimal>
    1426:	88 83       	st	Y, r24
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	df 90       	pop	r13
    1434:	cf 90       	pop	r12
    1436:	bf 90       	pop	r11
    1438:	af 90       	pop	r10
    143a:	08 95       	ret

0000143c <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	d8 2f       	mov	r29, r24
    1446:	c6 2f       	mov	r28, r22
    1448:	84 2f       	mov	r24, r20
    144a:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
    144c:	0e 94 a2 09 	call	0x1344	; 0x1344 <decimal_to_bcd>
    1450:	68 2f       	mov	r22, r24
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	0e 94 c5 09 	call	0x138a	; 0x138a <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
    1458:	8c 2f       	mov	r24, r28
    145a:	0e 94 a2 09 	call	0x1344	; 0x1344 <decimal_to_bcd>
    145e:	68 2f       	mov	r22, r24
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	0e 94 c5 09 	call	0x138a	; 0x138a <DS3231_Write>
	
	switch(hour_format)
    1466:	01 30       	cpi	r16, 0x01	; 1
    1468:	79 f4       	brne	.+30     	; 0x1488 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    146a:	11 30       	cpi	r17, 0x01	; 1
    146c:	11 f0       	breq	.+4      	; 0x1472 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    146e:	c0 e4       	ldi	r28, 0x40	; 64
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    1472:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    1474:	8d 2f       	mov	r24, r29
    1476:	0e 94 a2 09 	call	0x1344	; 0x1344 <decimal_to_bcd>
    147a:	8f 71       	andi	r24, 0x1F	; 31
    147c:	68 2f       	mov	r22, r24
    147e:	6c 2b       	or	r22, r28
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	0e 94 c5 09 	call	0x138a	; 0x138a <DS3231_Write>
			break;
    1486:	08 c0       	rjmp	.+16     	; 0x1498 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    1488:	8d 2f       	mov	r24, r29
    148a:	0e 94 a2 09 	call	0x1344	; 0x1344 <decimal_to_bcd>
    148e:	68 2f       	mov	r22, r24
    1490:	6f 73       	andi	r22, 0x3F	; 63
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	0e 94 c5 09 	call	0x138a	; 0x138a <DS3231_Write>
			break;
		}
	}
}
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <tajmer0_init>:

volatile uint16_t delay_timer = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    14a6:	93 e0       	ldi	r25, 0x03	; 3
    14a8:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    14aa:	99 ef       	ldi	r25, 0xF9	; 249
    14ac:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    14ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    14b2:	08 95       	ret

000014b4 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    14b4:	1f 92       	push	r1
    14b6:	0f 92       	push	r0
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	0f 92       	push	r0
    14bc:	11 24       	eor	r1, r1
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    14c8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <brojac_prekida_tajmera0>
    14cc:	8f 5f       	subi	r24, 0xFF	; 255
    14ce:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    14d2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <brojac_prekida_tajmera0_debounce_half>
    14d6:	8f 5f       	subi	r24, 0xFF	; 255
    14d8:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    14dc:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <brojac_prekida_tajmera0_debounce>
    14e0:	8f 5f       	subi	r24, 0xFF	; 255
    14e2:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <brojac_prekida_tajmera0_debounce>
	delay_timer++;		//overflow posle 65.5 sekundi, ali koga briga ne remeti normalan rad
    14e6:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <delay_timer>
    14ea:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <delay_timer+0x1>
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <delay_timer+0x1>
    14f4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <delay_timer>
		
	if(brojac_prekida_tajmera0 == 100)	//1ms * 50 = 50ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    14f8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <brojac_prekida_tajmera0>
    14fc:	84 36       	cpi	r24, 0x64	; 100
    14fe:	29 f4       	brne	.+10     	; 0x150a <__vector_14+0x56>
	{
		brojac_prekida_tajmera0 = 0;
    1500:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <brojac_prekida_tajmera0>
		flag_prekid_50ms = 1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <flag_prekid_50ms>
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    150a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <brojac_prekida_tajmera0_debounce_half>
    150e:	83 30       	cpi	r24, 0x03	; 3
    1510:	29 f4       	brne	.+10     	; 0x151c <__vector_14+0x68>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    1512:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <flag_prekid_debounce_time_half>
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    151c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <brojac_prekida_tajmera0_debounce>
    1520:	86 30       	cpi	r24, 0x06	; 6
    1522:	29 f4       	brne	.+10     	; 0x152e <__vector_14+0x7a>
	{
		brojac_prekida_tajmera0_debounce = 0;
    1524:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <flag_prekid_debounce_time>
	}
	
    152e:	9f 91       	pop	r25
    1530:	8f 91       	pop	r24
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	0f 90       	pop	r0
    1538:	1f 90       	pop	r1
    153a:	18 95       	reti

0000153c <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
	poslato=0;
    1546:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <poslato>
}
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <__vector_18>:

ISR(USART_RX_vect)
{
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	8f 93       	push	r24
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31
	input_char=UDR0;
    1564:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1568:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    156c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <buff_size>
    1570:	88 30       	cpi	r24, 0x08	; 8
    1572:	98 f4       	brcc	.+38     	; 0x159a <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    1574:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <buff_size>
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <input_char>
    157e:	e5 5f       	subi	r30, 0xF5	; 245
    1580:	fd 4f       	sbci	r31, 0xFD	; 253
    1582:	80 83       	st	Z, r24
		buff_size++;
    1584:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <buff_size>
    1588:	8f 5f       	subi	r24, 0xFF	; 255
    158a:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <buff_size>
		input_buffer[buff_size]='\0';
    158e:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <buff_size>
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	e5 5f       	subi	r30, 0xF5	; 245
    1596:	fd 4f       	sbci	r31, 0xFD	; 253
    1598:	10 82       	st	Z, r1
	}
}
    159a:	ff 91       	pop	r31
    159c:	ef 91       	pop	r30
    159e:	8f 91       	pop	r24
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0
    15a6:	1f 90       	pop	r1
    15a8:	18 95       	reti

000015aa <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    15aa:	22 e0       	ldi	r18, 0x02	; 2
    15ac:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    15b0:	28 ed       	ldi	r18, 0xD8	; 216
    15b2:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    15b6:	26 e0       	ldi	r18, 0x06	; 6
    15b8:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    15bc:	61 15       	cp	r22, r1
    15be:	2c e2       	ldi	r18, 0x2C	; 44
    15c0:	72 07       	cpc	r23, r18
    15c2:	21 e0       	ldi	r18, 0x01	; 1
    15c4:	82 07       	cpc	r24, r18
    15c6:	91 05       	cpc	r25, r1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <uart_init+0x22>
    15ca:	51 c0       	rjmp	.+162    	; 0x166e <uart_init+0xc4>
    15cc:	c8 f4       	brcc	.+50     	; 0x1600 <uart_init+0x56>
    15ce:	60 34       	cpi	r22, 0x40	; 64
    15d0:	28 e3       	ldi	r18, 0x38	; 56
    15d2:	72 07       	cpc	r23, r18
    15d4:	81 05       	cpc	r24, r1
    15d6:	91 05       	cpc	r25, r1
    15d8:	a9 f1       	breq	.+106    	; 0x1644 <uart_init+0x9a>
    15da:	30 f4       	brcc	.+12     	; 0x15e8 <uart_init+0x3e>
    15dc:	60 38       	cpi	r22, 0x80	; 128
    15de:	75 42       	sbci	r23, 0x25	; 37
    15e0:	81 05       	cpc	r24, r1
    15e2:	91 05       	cpc	r25, r1
    15e4:	41 f1       	breq	.+80     	; 0x1636 <uart_init+0x8c>
    15e6:	64 c0       	rjmp	.+200    	; 0x16b0 <uart_init+0x106>
    15e8:	61 15       	cp	r22, r1
    15ea:	2b e4       	ldi	r18, 0x4B	; 75
    15ec:	72 07       	cpc	r23, r18
    15ee:	81 05       	cpc	r24, r1
    15f0:	91 05       	cpc	r25, r1
    15f2:	79 f1       	breq	.+94     	; 0x1652 <uart_init+0xa8>
    15f4:	61 15       	cp	r22, r1
    15f6:	76 49       	sbci	r23, 0x96	; 150
    15f8:	81 05       	cpc	r24, r1
    15fa:	91 05       	cpc	r25, r1
    15fc:	89 f1       	breq	.+98     	; 0x1660 <uart_init+0xb6>
    15fe:	58 c0       	rjmp	.+176    	; 0x16b0 <uart_init+0x106>
    1600:	60 32       	cpi	r22, 0x20	; 32
    1602:	21 ea       	ldi	r18, 0xA1	; 161
    1604:	72 07       	cpc	r23, r18
    1606:	27 e0       	ldi	r18, 0x07	; 7
    1608:	82 07       	cpc	r24, r18
    160a:	91 05       	cpc	r25, r1
    160c:	f1 f1       	breq	.+124    	; 0x168a <uart_init+0xe0>
    160e:	30 f4       	brcc	.+12     	; 0x161c <uart_init+0x72>
    1610:	60 39       	cpi	r22, 0x90	; 144
    1612:	70 4d       	sbci	r23, 0xD0	; 208
    1614:	83 40       	sbci	r24, 0x03	; 3
    1616:	91 05       	cpc	r25, r1
    1618:	89 f1       	breq	.+98     	; 0x167c <uart_init+0xd2>
    161a:	4a c0       	rjmp	.+148    	; 0x16b0 <uart_init+0x106>
    161c:	60 34       	cpi	r22, 0x40	; 64
    161e:	22 e4       	ldi	r18, 0x42	; 66
    1620:	72 07       	cpc	r23, r18
    1622:	2f e0       	ldi	r18, 0x0F	; 15
    1624:	82 07       	cpc	r24, r18
    1626:	91 05       	cpc	r25, r1
    1628:	b9 f1       	breq	.+110    	; 0x1698 <uart_init+0xee>
    162a:	60 38       	cpi	r22, 0x80	; 128
    162c:	74 48       	sbci	r23, 0x84	; 132
    162e:	8e 41       	sbci	r24, 0x1E	; 30
    1630:	91 05       	cpc	r25, r1
    1632:	c9 f1       	breq	.+114    	; 0x16a6 <uart_init+0xfc>
    1634:	3d c0       	rjmp	.+122    	; 0x16b0 <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    1636:	8f ec       	ldi	r24, 0xCF	; 207
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    163e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1642:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    1644:	8a e8       	ldi	r24, 0x8A	; 138
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    164c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1650:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    1652:	87 e6       	ldi	r24, 0x67	; 103
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    165a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    165e:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    1660:	83 e3       	ldi	r24, 0x33	; 51
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1668:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    166c:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    166e:	89 e1       	ldi	r24, 0x19	; 25
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1676:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    167a:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    167c:	87 e0       	ldi	r24, 0x07	; 7
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1684:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1688:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    168a:	83 e0       	ldi	r24, 0x03	; 3
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1692:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1696:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    16a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    16a4:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    16a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    16aa:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    16ae:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    16b0:	8f ec       	ldi	r24, 0xCF	; 207
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    16b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    16bc:	08 95       	ret

000016be <sprintf>:
    16be:	ae e0       	ldi	r26, 0x0E	; 14
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e6       	ldi	r30, 0x65	; 101
    16c4:	fb e0       	ldi	r31, 0x0B	; 11
    16c6:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__prologue_saves__+0x1c>
    16ca:	0d 89       	ldd	r16, Y+21	; 0x15
    16cc:	1e 89       	ldd	r17, Y+22	; 0x16
    16ce:	86 e0       	ldi	r24, 0x06	; 6
    16d0:	8c 83       	std	Y+4, r24	; 0x04
    16d2:	1a 83       	std	Y+2, r17	; 0x02
    16d4:	09 83       	std	Y+1, r16	; 0x01
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	9f e7       	ldi	r25, 0x7F	; 127
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	ae 01       	movw	r20, r28
    16e0:	47 5e       	subi	r20, 0xE7	; 231
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	6f 89       	ldd	r22, Y+23	; 0x17
    16e6:	78 8d       	ldd	r23, Y+24	; 0x18
    16e8:	ce 01       	movw	r24, r28
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	0e 94 81 0b 	call	0x1702	; 0x1702 <vfprintf>
    16f0:	ef 81       	ldd	r30, Y+7	; 0x07
    16f2:	f8 85       	ldd	r31, Y+8	; 0x08
    16f4:	e0 0f       	add	r30, r16
    16f6:	f1 1f       	adc	r31, r17
    16f8:	10 82       	st	Z, r1
    16fa:	2e 96       	adiw	r28, 0x0e	; 14
    16fc:	e4 e0       	ldi	r30, 0x04	; 4
    16fe:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__epilogue_restores__+0x1c>

00001702 <vfprintf>:
    1702:	ab e0       	ldi	r26, 0x0B	; 11
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e7 e8       	ldi	r30, 0x87	; 135
    1708:	fb e0       	ldi	r31, 0x0B	; 11
    170a:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__prologue_saves__>
    170e:	6c 01       	movw	r12, r24
    1710:	7b 01       	movw	r14, r22
    1712:	8a 01       	movw	r16, r20
    1714:	fc 01       	movw	r30, r24
    1716:	17 82       	std	Z+7, r1	; 0x07
    1718:	16 82       	std	Z+6, r1	; 0x06
    171a:	83 81       	ldd	r24, Z+3	; 0x03
    171c:	81 ff       	sbrs	r24, 1
    171e:	cc c1       	rjmp	.+920    	; 0x1ab8 <vfprintf+0x3b6>
    1720:	ce 01       	movw	r24, r28
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	3c 01       	movw	r6, r24
    1726:	f6 01       	movw	r30, r12
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	f7 01       	movw	r30, r14
    172c:	93 fd       	sbrc	r25, 3
    172e:	85 91       	lpm	r24, Z+
    1730:	93 ff       	sbrs	r25, 3
    1732:	81 91       	ld	r24, Z+
    1734:	7f 01       	movw	r14, r30
    1736:	88 23       	and	r24, r24
    1738:	09 f4       	brne	.+2      	; 0x173c <vfprintf+0x3a>
    173a:	ba c1       	rjmp	.+884    	; 0x1ab0 <vfprintf+0x3ae>
    173c:	85 32       	cpi	r24, 0x25	; 37
    173e:	39 f4       	brne	.+14     	; 0x174e <vfprintf+0x4c>
    1740:	93 fd       	sbrc	r25, 3
    1742:	85 91       	lpm	r24, Z+
    1744:	93 ff       	sbrs	r25, 3
    1746:	81 91       	ld	r24, Z+
    1748:	7f 01       	movw	r14, r30
    174a:	85 32       	cpi	r24, 0x25	; 37
    174c:	29 f4       	brne	.+10     	; 0x1758 <vfprintf+0x56>
    174e:	b6 01       	movw	r22, r12
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1756:	e7 cf       	rjmp	.-50     	; 0x1726 <vfprintf+0x24>
    1758:	91 2c       	mov	r9, r1
    175a:	21 2c       	mov	r2, r1
    175c:	31 2c       	mov	r3, r1
    175e:	ff e1       	ldi	r31, 0x1F	; 31
    1760:	f3 15       	cp	r31, r3
    1762:	d8 f0       	brcs	.+54     	; 0x179a <vfprintf+0x98>
    1764:	8b 32       	cpi	r24, 0x2B	; 43
    1766:	79 f0       	breq	.+30     	; 0x1786 <vfprintf+0x84>
    1768:	38 f4       	brcc	.+14     	; 0x1778 <vfprintf+0x76>
    176a:	80 32       	cpi	r24, 0x20	; 32
    176c:	79 f0       	breq	.+30     	; 0x178c <vfprintf+0x8a>
    176e:	83 32       	cpi	r24, 0x23	; 35
    1770:	a1 f4       	brne	.+40     	; 0x179a <vfprintf+0x98>
    1772:	23 2d       	mov	r18, r3
    1774:	20 61       	ori	r18, 0x10	; 16
    1776:	1d c0       	rjmp	.+58     	; 0x17b2 <vfprintf+0xb0>
    1778:	8d 32       	cpi	r24, 0x2D	; 45
    177a:	61 f0       	breq	.+24     	; 0x1794 <vfprintf+0x92>
    177c:	80 33       	cpi	r24, 0x30	; 48
    177e:	69 f4       	brne	.+26     	; 0x179a <vfprintf+0x98>
    1780:	23 2d       	mov	r18, r3
    1782:	21 60       	ori	r18, 0x01	; 1
    1784:	16 c0       	rjmp	.+44     	; 0x17b2 <vfprintf+0xb0>
    1786:	83 2d       	mov	r24, r3
    1788:	82 60       	ori	r24, 0x02	; 2
    178a:	38 2e       	mov	r3, r24
    178c:	e3 2d       	mov	r30, r3
    178e:	e4 60       	ori	r30, 0x04	; 4
    1790:	3e 2e       	mov	r3, r30
    1792:	2a c0       	rjmp	.+84     	; 0x17e8 <vfprintf+0xe6>
    1794:	f3 2d       	mov	r31, r3
    1796:	f8 60       	ori	r31, 0x08	; 8
    1798:	1d c0       	rjmp	.+58     	; 0x17d4 <vfprintf+0xd2>
    179a:	37 fc       	sbrc	r3, 7
    179c:	2d c0       	rjmp	.+90     	; 0x17f8 <vfprintf+0xf6>
    179e:	20 ed       	ldi	r18, 0xD0	; 208
    17a0:	28 0f       	add	r18, r24
    17a2:	2a 30       	cpi	r18, 0x0A	; 10
    17a4:	40 f0       	brcs	.+16     	; 0x17b6 <vfprintf+0xb4>
    17a6:	8e 32       	cpi	r24, 0x2E	; 46
    17a8:	b9 f4       	brne	.+46     	; 0x17d8 <vfprintf+0xd6>
    17aa:	36 fc       	sbrc	r3, 6
    17ac:	81 c1       	rjmp	.+770    	; 0x1ab0 <vfprintf+0x3ae>
    17ae:	23 2d       	mov	r18, r3
    17b0:	20 64       	ori	r18, 0x40	; 64
    17b2:	32 2e       	mov	r3, r18
    17b4:	19 c0       	rjmp	.+50     	; 0x17e8 <vfprintf+0xe6>
    17b6:	36 fe       	sbrs	r3, 6
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <vfprintf+0xc4>
    17ba:	8a e0       	ldi	r24, 0x0A	; 10
    17bc:	98 9e       	mul	r9, r24
    17be:	20 0d       	add	r18, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	92 2e       	mov	r9, r18
    17c4:	11 c0       	rjmp	.+34     	; 0x17e8 <vfprintf+0xe6>
    17c6:	ea e0       	ldi	r30, 0x0A	; 10
    17c8:	2e 9e       	mul	r2, r30
    17ca:	20 0d       	add	r18, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	22 2e       	mov	r2, r18
    17d0:	f3 2d       	mov	r31, r3
    17d2:	f0 62       	ori	r31, 0x20	; 32
    17d4:	3f 2e       	mov	r3, r31
    17d6:	08 c0       	rjmp	.+16     	; 0x17e8 <vfprintf+0xe6>
    17d8:	8c 36       	cpi	r24, 0x6C	; 108
    17da:	21 f4       	brne	.+8      	; 0x17e4 <vfprintf+0xe2>
    17dc:	83 2d       	mov	r24, r3
    17de:	80 68       	ori	r24, 0x80	; 128
    17e0:	38 2e       	mov	r3, r24
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <vfprintf+0xe6>
    17e4:	88 36       	cpi	r24, 0x68	; 104
    17e6:	41 f4       	brne	.+16     	; 0x17f8 <vfprintf+0xf6>
    17e8:	f7 01       	movw	r30, r14
    17ea:	93 fd       	sbrc	r25, 3
    17ec:	85 91       	lpm	r24, Z+
    17ee:	93 ff       	sbrs	r25, 3
    17f0:	81 91       	ld	r24, Z+
    17f2:	7f 01       	movw	r14, r30
    17f4:	81 11       	cpse	r24, r1
    17f6:	b3 cf       	rjmp	.-154    	; 0x175e <vfprintf+0x5c>
    17f8:	98 2f       	mov	r25, r24
    17fa:	9f 7d       	andi	r25, 0xDF	; 223
    17fc:	95 54       	subi	r25, 0x45	; 69
    17fe:	93 30       	cpi	r25, 0x03	; 3
    1800:	28 f4       	brcc	.+10     	; 0x180c <vfprintf+0x10a>
    1802:	0c 5f       	subi	r16, 0xFC	; 252
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	9f e3       	ldi	r25, 0x3F	; 63
    1808:	99 83       	std	Y+1, r25	; 0x01
    180a:	0d c0       	rjmp	.+26     	; 0x1826 <vfprintf+0x124>
    180c:	83 36       	cpi	r24, 0x63	; 99
    180e:	31 f0       	breq	.+12     	; 0x181c <vfprintf+0x11a>
    1810:	83 37       	cpi	r24, 0x73	; 115
    1812:	71 f0       	breq	.+28     	; 0x1830 <vfprintf+0x12e>
    1814:	83 35       	cpi	r24, 0x53	; 83
    1816:	09 f0       	breq	.+2      	; 0x181a <vfprintf+0x118>
    1818:	59 c0       	rjmp	.+178    	; 0x18cc <vfprintf+0x1ca>
    181a:	21 c0       	rjmp	.+66     	; 0x185e <vfprintf+0x15c>
    181c:	f8 01       	movw	r30, r16
    181e:	80 81       	ld	r24, Z
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	0e 5f       	subi	r16, 0xFE	; 254
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	88 24       	eor	r8, r8
    1828:	83 94       	inc	r8
    182a:	91 2c       	mov	r9, r1
    182c:	53 01       	movw	r10, r6
    182e:	13 c0       	rjmp	.+38     	; 0x1856 <vfprintf+0x154>
    1830:	28 01       	movw	r4, r16
    1832:	f2 e0       	ldi	r31, 0x02	; 2
    1834:	4f 0e       	add	r4, r31
    1836:	51 1c       	adc	r5, r1
    1838:	f8 01       	movw	r30, r16
    183a:	a0 80       	ld	r10, Z
    183c:	b1 80       	ldd	r11, Z+1	; 0x01
    183e:	36 fe       	sbrs	r3, 6
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <vfprintf+0x146>
    1842:	69 2d       	mov	r22, r9
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	02 c0       	rjmp	.+4      	; 0x184c <vfprintf+0x14a>
    1848:	6f ef       	ldi	r22, 0xFF	; 255
    184a:	7f ef       	ldi	r23, 0xFF	; 255
    184c:	c5 01       	movw	r24, r10
    184e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <strnlen>
    1852:	4c 01       	movw	r8, r24
    1854:	82 01       	movw	r16, r4
    1856:	f3 2d       	mov	r31, r3
    1858:	ff 77       	andi	r31, 0x7F	; 127
    185a:	3f 2e       	mov	r3, r31
    185c:	16 c0       	rjmp	.+44     	; 0x188a <vfprintf+0x188>
    185e:	28 01       	movw	r4, r16
    1860:	22 e0       	ldi	r18, 0x02	; 2
    1862:	42 0e       	add	r4, r18
    1864:	51 1c       	adc	r5, r1
    1866:	f8 01       	movw	r30, r16
    1868:	a0 80       	ld	r10, Z
    186a:	b1 80       	ldd	r11, Z+1	; 0x01
    186c:	36 fe       	sbrs	r3, 6
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <vfprintf+0x174>
    1870:	69 2d       	mov	r22, r9
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <vfprintf+0x178>
    1876:	6f ef       	ldi	r22, 0xFF	; 255
    1878:	7f ef       	ldi	r23, 0xFF	; 255
    187a:	c5 01       	movw	r24, r10
    187c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <strnlen_P>
    1880:	4c 01       	movw	r8, r24
    1882:	f3 2d       	mov	r31, r3
    1884:	f0 68       	ori	r31, 0x80	; 128
    1886:	3f 2e       	mov	r3, r31
    1888:	82 01       	movw	r16, r4
    188a:	33 fc       	sbrc	r3, 3
    188c:	1b c0       	rjmp	.+54     	; 0x18c4 <vfprintf+0x1c2>
    188e:	82 2d       	mov	r24, r2
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	88 16       	cp	r8, r24
    1894:	99 06       	cpc	r9, r25
    1896:	b0 f4       	brcc	.+44     	; 0x18c4 <vfprintf+0x1c2>
    1898:	b6 01       	movw	r22, r12
    189a:	80 e2       	ldi	r24, 0x20	; 32
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    18a2:	2a 94       	dec	r2
    18a4:	f4 cf       	rjmp	.-24     	; 0x188e <vfprintf+0x18c>
    18a6:	f5 01       	movw	r30, r10
    18a8:	37 fc       	sbrc	r3, 7
    18aa:	85 91       	lpm	r24, Z+
    18ac:	37 fe       	sbrs	r3, 7
    18ae:	81 91       	ld	r24, Z+
    18b0:	5f 01       	movw	r10, r30
    18b2:	b6 01       	movw	r22, r12
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    18ba:	21 10       	cpse	r2, r1
    18bc:	2a 94       	dec	r2
    18be:	21 e0       	ldi	r18, 0x01	; 1
    18c0:	82 1a       	sub	r8, r18
    18c2:	91 08       	sbc	r9, r1
    18c4:	81 14       	cp	r8, r1
    18c6:	91 04       	cpc	r9, r1
    18c8:	71 f7       	brne	.-36     	; 0x18a6 <vfprintf+0x1a4>
    18ca:	e8 c0       	rjmp	.+464    	; 0x1a9c <vfprintf+0x39a>
    18cc:	84 36       	cpi	r24, 0x64	; 100
    18ce:	11 f0       	breq	.+4      	; 0x18d4 <vfprintf+0x1d2>
    18d0:	89 36       	cpi	r24, 0x69	; 105
    18d2:	41 f5       	brne	.+80     	; 0x1924 <vfprintf+0x222>
    18d4:	f8 01       	movw	r30, r16
    18d6:	37 fe       	sbrs	r3, 7
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <vfprintf+0x1e6>
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	0c 5f       	subi	r16, 0xFC	; 252
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	08 c0       	rjmp	.+16     	; 0x18f8 <vfprintf+0x1f6>
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	07 2e       	mov	r0, r23
    18ee:	00 0c       	add	r0, r0
    18f0:	88 0b       	sbc	r24, r24
    18f2:	99 0b       	sbc	r25, r25
    18f4:	0e 5f       	subi	r16, 0xFE	; 254
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	f3 2d       	mov	r31, r3
    18fa:	ff 76       	andi	r31, 0x6F	; 111
    18fc:	3f 2e       	mov	r3, r31
    18fe:	97 ff       	sbrs	r25, 7
    1900:	09 c0       	rjmp	.+18     	; 0x1914 <vfprintf+0x212>
    1902:	90 95       	com	r25
    1904:	80 95       	com	r24
    1906:	70 95       	com	r23
    1908:	61 95       	neg	r22
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	8f 4f       	sbci	r24, 0xFF	; 255
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	f0 68       	ori	r31, 0x80	; 128
    1912:	3f 2e       	mov	r3, r31
    1914:	2a e0       	ldi	r18, 0x0A	; 10
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	a3 01       	movw	r20, r6
    191a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__ultoa_invert>
    191e:	88 2e       	mov	r8, r24
    1920:	86 18       	sub	r8, r6
    1922:	45 c0       	rjmp	.+138    	; 0x19ae <vfprintf+0x2ac>
    1924:	85 37       	cpi	r24, 0x75	; 117
    1926:	31 f4       	brne	.+12     	; 0x1934 <vfprintf+0x232>
    1928:	23 2d       	mov	r18, r3
    192a:	2f 7e       	andi	r18, 0xEF	; 239
    192c:	b2 2e       	mov	r11, r18
    192e:	2a e0       	ldi	r18, 0x0A	; 10
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	25 c0       	rjmp	.+74     	; 0x197e <vfprintf+0x27c>
    1934:	93 2d       	mov	r25, r3
    1936:	99 7f       	andi	r25, 0xF9	; 249
    1938:	b9 2e       	mov	r11, r25
    193a:	8f 36       	cpi	r24, 0x6F	; 111
    193c:	c1 f0       	breq	.+48     	; 0x196e <vfprintf+0x26c>
    193e:	18 f4       	brcc	.+6      	; 0x1946 <vfprintf+0x244>
    1940:	88 35       	cpi	r24, 0x58	; 88
    1942:	79 f0       	breq	.+30     	; 0x1962 <vfprintf+0x260>
    1944:	b5 c0       	rjmp	.+362    	; 0x1ab0 <vfprintf+0x3ae>
    1946:	80 37       	cpi	r24, 0x70	; 112
    1948:	19 f0       	breq	.+6      	; 0x1950 <vfprintf+0x24e>
    194a:	88 37       	cpi	r24, 0x78	; 120
    194c:	21 f0       	breq	.+8      	; 0x1956 <vfprintf+0x254>
    194e:	b0 c0       	rjmp	.+352    	; 0x1ab0 <vfprintf+0x3ae>
    1950:	e9 2f       	mov	r30, r25
    1952:	e0 61       	ori	r30, 0x10	; 16
    1954:	be 2e       	mov	r11, r30
    1956:	b4 fe       	sbrs	r11, 4
    1958:	0d c0       	rjmp	.+26     	; 0x1974 <vfprintf+0x272>
    195a:	fb 2d       	mov	r31, r11
    195c:	f4 60       	ori	r31, 0x04	; 4
    195e:	bf 2e       	mov	r11, r31
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <vfprintf+0x272>
    1962:	34 fe       	sbrs	r3, 4
    1964:	0a c0       	rjmp	.+20     	; 0x197a <vfprintf+0x278>
    1966:	29 2f       	mov	r18, r25
    1968:	26 60       	ori	r18, 0x06	; 6
    196a:	b2 2e       	mov	r11, r18
    196c:	06 c0       	rjmp	.+12     	; 0x197a <vfprintf+0x278>
    196e:	28 e0       	ldi	r18, 0x08	; 8
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	05 c0       	rjmp	.+10     	; 0x197e <vfprintf+0x27c>
    1974:	20 e1       	ldi	r18, 0x10	; 16
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	02 c0       	rjmp	.+4      	; 0x197e <vfprintf+0x27c>
    197a:	20 e1       	ldi	r18, 0x10	; 16
    197c:	32 e0       	ldi	r19, 0x02	; 2
    197e:	f8 01       	movw	r30, r16
    1980:	b7 fe       	sbrs	r11, 7
    1982:	07 c0       	rjmp	.+14     	; 0x1992 <vfprintf+0x290>
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	0c 5f       	subi	r16, 0xFC	; 252
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	06 c0       	rjmp	.+12     	; 0x199e <vfprintf+0x29c>
    1992:	60 81       	ld	r22, Z
    1994:	71 81       	ldd	r23, Z+1	; 0x01
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 5f       	subi	r16, 0xFE	; 254
    199c:	1f 4f       	sbci	r17, 0xFF	; 255
    199e:	a3 01       	movw	r20, r6
    19a0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__ultoa_invert>
    19a4:	88 2e       	mov	r8, r24
    19a6:	86 18       	sub	r8, r6
    19a8:	fb 2d       	mov	r31, r11
    19aa:	ff 77       	andi	r31, 0x7F	; 127
    19ac:	3f 2e       	mov	r3, r31
    19ae:	36 fe       	sbrs	r3, 6
    19b0:	0d c0       	rjmp	.+26     	; 0x19cc <vfprintf+0x2ca>
    19b2:	23 2d       	mov	r18, r3
    19b4:	2e 7f       	andi	r18, 0xFE	; 254
    19b6:	a2 2e       	mov	r10, r18
    19b8:	89 14       	cp	r8, r9
    19ba:	58 f4       	brcc	.+22     	; 0x19d2 <vfprintf+0x2d0>
    19bc:	34 fe       	sbrs	r3, 4
    19be:	0b c0       	rjmp	.+22     	; 0x19d6 <vfprintf+0x2d4>
    19c0:	32 fc       	sbrc	r3, 2
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <vfprintf+0x2d4>
    19c4:	83 2d       	mov	r24, r3
    19c6:	8e 7e       	andi	r24, 0xEE	; 238
    19c8:	a8 2e       	mov	r10, r24
    19ca:	05 c0       	rjmp	.+10     	; 0x19d6 <vfprintf+0x2d4>
    19cc:	b8 2c       	mov	r11, r8
    19ce:	a3 2c       	mov	r10, r3
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <vfprintf+0x2d6>
    19d2:	b8 2c       	mov	r11, r8
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <vfprintf+0x2d6>
    19d6:	b9 2c       	mov	r11, r9
    19d8:	a4 fe       	sbrs	r10, 4
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <vfprintf+0x2f8>
    19dc:	fe 01       	movw	r30, r28
    19de:	e8 0d       	add	r30, r8
    19e0:	f1 1d       	adc	r31, r1
    19e2:	80 81       	ld	r24, Z
    19e4:	80 33       	cpi	r24, 0x30	; 48
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <vfprintf+0x2ee>
    19e8:	9a 2d       	mov	r25, r10
    19ea:	99 7e       	andi	r25, 0xE9	; 233
    19ec:	a9 2e       	mov	r10, r25
    19ee:	09 c0       	rjmp	.+18     	; 0x1a02 <vfprintf+0x300>
    19f0:	a2 fe       	sbrs	r10, 2
    19f2:	06 c0       	rjmp	.+12     	; 0x1a00 <vfprintf+0x2fe>
    19f4:	b3 94       	inc	r11
    19f6:	b3 94       	inc	r11
    19f8:	04 c0       	rjmp	.+8      	; 0x1a02 <vfprintf+0x300>
    19fa:	8a 2d       	mov	r24, r10
    19fc:	86 78       	andi	r24, 0x86	; 134
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <vfprintf+0x300>
    1a00:	b3 94       	inc	r11
    1a02:	a3 fc       	sbrc	r10, 3
    1a04:	11 c0       	rjmp	.+34     	; 0x1a28 <vfprintf+0x326>
    1a06:	a0 fe       	sbrs	r10, 0
    1a08:	06 c0       	rjmp	.+12     	; 0x1a16 <vfprintf+0x314>
    1a0a:	b2 14       	cp	r11, r2
    1a0c:	88 f4       	brcc	.+34     	; 0x1a30 <vfprintf+0x32e>
    1a0e:	28 0c       	add	r2, r8
    1a10:	92 2c       	mov	r9, r2
    1a12:	9b 18       	sub	r9, r11
    1a14:	0e c0       	rjmp	.+28     	; 0x1a32 <vfprintf+0x330>
    1a16:	b2 14       	cp	r11, r2
    1a18:	60 f4       	brcc	.+24     	; 0x1a32 <vfprintf+0x330>
    1a1a:	b6 01       	movw	r22, r12
    1a1c:	80 e2       	ldi	r24, 0x20	; 32
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1a24:	b3 94       	inc	r11
    1a26:	f7 cf       	rjmp	.-18     	; 0x1a16 <vfprintf+0x314>
    1a28:	b2 14       	cp	r11, r2
    1a2a:	18 f4       	brcc	.+6      	; 0x1a32 <vfprintf+0x330>
    1a2c:	2b 18       	sub	r2, r11
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <vfprintf+0x332>
    1a30:	98 2c       	mov	r9, r8
    1a32:	21 2c       	mov	r2, r1
    1a34:	a4 fe       	sbrs	r10, 4
    1a36:	10 c0       	rjmp	.+32     	; 0x1a58 <vfprintf+0x356>
    1a38:	b6 01       	movw	r22, r12
    1a3a:	80 e3       	ldi	r24, 0x30	; 48
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1a42:	a2 fe       	sbrs	r10, 2
    1a44:	17 c0       	rjmp	.+46     	; 0x1a74 <vfprintf+0x372>
    1a46:	a1 fc       	sbrc	r10, 1
    1a48:	03 c0       	rjmp	.+6      	; 0x1a50 <vfprintf+0x34e>
    1a4a:	88 e7       	ldi	r24, 0x78	; 120
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <vfprintf+0x352>
    1a50:	88 e5       	ldi	r24, 0x58	; 88
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	b6 01       	movw	r22, r12
    1a56:	0c c0       	rjmp	.+24     	; 0x1a70 <vfprintf+0x36e>
    1a58:	8a 2d       	mov	r24, r10
    1a5a:	86 78       	andi	r24, 0x86	; 134
    1a5c:	59 f0       	breq	.+22     	; 0x1a74 <vfprintf+0x372>
    1a5e:	a1 fe       	sbrs	r10, 1
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <vfprintf+0x364>
    1a62:	8b e2       	ldi	r24, 0x2B	; 43
    1a64:	01 c0       	rjmp	.+2      	; 0x1a68 <vfprintf+0x366>
    1a66:	80 e2       	ldi	r24, 0x20	; 32
    1a68:	a7 fc       	sbrc	r10, 7
    1a6a:	8d e2       	ldi	r24, 0x2D	; 45
    1a6c:	b6 01       	movw	r22, r12
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1a74:	89 14       	cp	r8, r9
    1a76:	38 f4       	brcc	.+14     	; 0x1a86 <vfprintf+0x384>
    1a78:	b6 01       	movw	r22, r12
    1a7a:	80 e3       	ldi	r24, 0x30	; 48
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1a82:	9a 94       	dec	r9
    1a84:	f7 cf       	rjmp	.-18     	; 0x1a74 <vfprintf+0x372>
    1a86:	8a 94       	dec	r8
    1a88:	f3 01       	movw	r30, r6
    1a8a:	e8 0d       	add	r30, r8
    1a8c:	f1 1d       	adc	r31, r1
    1a8e:	80 81       	ld	r24, Z
    1a90:	b6 01       	movw	r22, r12
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1a98:	81 10       	cpse	r8, r1
    1a9a:	f5 cf       	rjmp	.-22     	; 0x1a86 <vfprintf+0x384>
    1a9c:	22 20       	and	r2, r2
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <vfprintf+0x3a0>
    1aa0:	42 ce       	rjmp	.-892    	; 0x1726 <vfprintf+0x24>
    1aa2:	b6 01       	movw	r22, r12
    1aa4:	80 e2       	ldi	r24, 0x20	; 32
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1aac:	2a 94       	dec	r2
    1aae:	f6 cf       	rjmp	.-20     	; 0x1a9c <vfprintf+0x39a>
    1ab0:	f6 01       	movw	r30, r12
    1ab2:	86 81       	ldd	r24, Z+6	; 0x06
    1ab4:	97 81       	ldd	r25, Z+7	; 0x07
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <vfprintf+0x3ba>
    1ab8:	8f ef       	ldi	r24, 0xFF	; 255
    1aba:	9f ef       	ldi	r25, 0xFF	; 255
    1abc:	2b 96       	adiw	r28, 0x0b	; 11
    1abe:	e2 e1       	ldi	r30, 0x12	; 18
    1ac0:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__epilogue_restores__>

00001ac4 <strnlen_P>:
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	05 90       	lpm	r0, Z+
    1ac8:	61 50       	subi	r22, 0x01	; 1
    1aca:	70 40       	sbci	r23, 0x00	; 0
    1acc:	01 10       	cpse	r0, r1
    1ace:	d8 f7       	brcc	.-10     	; 0x1ac6 <strnlen_P+0x2>
    1ad0:	80 95       	com	r24
    1ad2:	90 95       	com	r25
    1ad4:	8e 0f       	add	r24, r30
    1ad6:	9f 1f       	adc	r25, r31
    1ad8:	08 95       	ret

00001ada <strnlen>:
    1ada:	fc 01       	movw	r30, r24
    1adc:	61 50       	subi	r22, 0x01	; 1
    1ade:	70 40       	sbci	r23, 0x00	; 0
    1ae0:	01 90       	ld	r0, Z+
    1ae2:	01 10       	cpse	r0, r1
    1ae4:	d8 f7       	brcc	.-10     	; 0x1adc <strnlen+0x2>
    1ae6:	80 95       	com	r24
    1ae8:	90 95       	com	r25
    1aea:	8e 0f       	add	r24, r30
    1aec:	9f 1f       	adc	r25, r31
    1aee:	08 95       	ret

00001af0 <fputc>:
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	fb 01       	movw	r30, r22
    1afa:	23 81       	ldd	r18, Z+3	; 0x03
    1afc:	21 fd       	sbrc	r18, 1
    1afe:	03 c0       	rjmp	.+6      	; 0x1b06 <fputc+0x16>
    1b00:	8f ef       	ldi	r24, 0xFF	; 255
    1b02:	9f ef       	ldi	r25, 0xFF	; 255
    1b04:	2c c0       	rjmp	.+88     	; 0x1b5e <fputc+0x6e>
    1b06:	22 ff       	sbrs	r18, 2
    1b08:	16 c0       	rjmp	.+44     	; 0x1b36 <fputc+0x46>
    1b0a:	46 81       	ldd	r20, Z+6	; 0x06
    1b0c:	57 81       	ldd	r21, Z+7	; 0x07
    1b0e:	24 81       	ldd	r18, Z+4	; 0x04
    1b10:	35 81       	ldd	r19, Z+5	; 0x05
    1b12:	42 17       	cp	r20, r18
    1b14:	53 07       	cpc	r21, r19
    1b16:	44 f4       	brge	.+16     	; 0x1b28 <fputc+0x38>
    1b18:	a0 81       	ld	r26, Z
    1b1a:	b1 81       	ldd	r27, Z+1	; 0x01
    1b1c:	9d 01       	movw	r18, r26
    1b1e:	2f 5f       	subi	r18, 0xFF	; 255
    1b20:	3f 4f       	sbci	r19, 0xFF	; 255
    1b22:	31 83       	std	Z+1, r19	; 0x01
    1b24:	20 83       	st	Z, r18
    1b26:	8c 93       	st	X, r24
    1b28:	26 81       	ldd	r18, Z+6	; 0x06
    1b2a:	37 81       	ldd	r19, Z+7	; 0x07
    1b2c:	2f 5f       	subi	r18, 0xFF	; 255
    1b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b30:	37 83       	std	Z+7, r19	; 0x07
    1b32:	26 83       	std	Z+6, r18	; 0x06
    1b34:	14 c0       	rjmp	.+40     	; 0x1b5e <fputc+0x6e>
    1b36:	8b 01       	movw	r16, r22
    1b38:	ec 01       	movw	r28, r24
    1b3a:	fb 01       	movw	r30, r22
    1b3c:	00 84       	ldd	r0, Z+8	; 0x08
    1b3e:	f1 85       	ldd	r31, Z+9	; 0x09
    1b40:	e0 2d       	mov	r30, r0
    1b42:	09 95       	icall
    1b44:	89 2b       	or	r24, r25
    1b46:	e1 f6       	brne	.-72     	; 0x1b00 <fputc+0x10>
    1b48:	d8 01       	movw	r26, r16
    1b4a:	16 96       	adiw	r26, 0x06	; 6
    1b4c:	8d 91       	ld	r24, X+
    1b4e:	9c 91       	ld	r25, X
    1b50:	17 97       	sbiw	r26, 0x07	; 7
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	17 96       	adiw	r26, 0x07	; 7
    1b56:	9c 93       	st	X, r25
    1b58:	8e 93       	st	-X, r24
    1b5a:	16 97       	sbiw	r26, 0x06	; 6
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	08 95       	ret

00001b68 <__ultoa_invert>:
    1b68:	fa 01       	movw	r30, r20
    1b6a:	aa 27       	eor	r26, r26
    1b6c:	28 30       	cpi	r18, 0x08	; 8
    1b6e:	51 f1       	breq	.+84     	; 0x1bc4 <__ultoa_invert+0x5c>
    1b70:	20 31       	cpi	r18, 0x10	; 16
    1b72:	81 f1       	breq	.+96     	; 0x1bd4 <__ultoa_invert+0x6c>
    1b74:	e8 94       	clt
    1b76:	6f 93       	push	r22
    1b78:	6e 7f       	andi	r22, 0xFE	; 254
    1b7a:	6e 5f       	subi	r22, 0xFE	; 254
    1b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b80:	9f 4f       	sbci	r25, 0xFF	; 255
    1b82:	af 4f       	sbci	r26, 0xFF	; 255
    1b84:	b1 e0       	ldi	r27, 0x01	; 1
    1b86:	3e d0       	rcall	.+124    	; 0x1c04 <__ultoa_invert+0x9c>
    1b88:	b4 e0       	ldi	r27, 0x04	; 4
    1b8a:	3c d0       	rcall	.+120    	; 0x1c04 <__ultoa_invert+0x9c>
    1b8c:	67 0f       	add	r22, r23
    1b8e:	78 1f       	adc	r23, r24
    1b90:	89 1f       	adc	r24, r25
    1b92:	9a 1f       	adc	r25, r26
    1b94:	a1 1d       	adc	r26, r1
    1b96:	68 0f       	add	r22, r24
    1b98:	79 1f       	adc	r23, r25
    1b9a:	8a 1f       	adc	r24, r26
    1b9c:	91 1d       	adc	r25, r1
    1b9e:	a1 1d       	adc	r26, r1
    1ba0:	6a 0f       	add	r22, r26
    1ba2:	71 1d       	adc	r23, r1
    1ba4:	81 1d       	adc	r24, r1
    1ba6:	91 1d       	adc	r25, r1
    1ba8:	a1 1d       	adc	r26, r1
    1baa:	20 d0       	rcall	.+64     	; 0x1bec <__ultoa_invert+0x84>
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <__ultoa_invert+0x48>
    1bae:	68 94       	set
    1bb0:	3f 91       	pop	r19
    1bb2:	2a e0       	ldi	r18, 0x0A	; 10
    1bb4:	26 9f       	mul	r18, r22
    1bb6:	11 24       	eor	r1, r1
    1bb8:	30 19       	sub	r19, r0
    1bba:	30 5d       	subi	r19, 0xD0	; 208
    1bbc:	31 93       	st	Z+, r19
    1bbe:	de f6       	brtc	.-74     	; 0x1b76 <__ultoa_invert+0xe>
    1bc0:	cf 01       	movw	r24, r30
    1bc2:	08 95       	ret
    1bc4:	46 2f       	mov	r20, r22
    1bc6:	47 70       	andi	r20, 0x07	; 7
    1bc8:	40 5d       	subi	r20, 0xD0	; 208
    1bca:	41 93       	st	Z+, r20
    1bcc:	b3 e0       	ldi	r27, 0x03	; 3
    1bce:	0f d0       	rcall	.+30     	; 0x1bee <__ultoa_invert+0x86>
    1bd0:	c9 f7       	brne	.-14     	; 0x1bc4 <__ultoa_invert+0x5c>
    1bd2:	f6 cf       	rjmp	.-20     	; 0x1bc0 <__ultoa_invert+0x58>
    1bd4:	46 2f       	mov	r20, r22
    1bd6:	4f 70       	andi	r20, 0x0F	; 15
    1bd8:	40 5d       	subi	r20, 0xD0	; 208
    1bda:	4a 33       	cpi	r20, 0x3A	; 58
    1bdc:	18 f0       	brcs	.+6      	; 0x1be4 <__ultoa_invert+0x7c>
    1bde:	49 5d       	subi	r20, 0xD9	; 217
    1be0:	31 fd       	sbrc	r19, 1
    1be2:	40 52       	subi	r20, 0x20	; 32
    1be4:	41 93       	st	Z+, r20
    1be6:	02 d0       	rcall	.+4      	; 0x1bec <__ultoa_invert+0x84>
    1be8:	a9 f7       	brne	.-22     	; 0x1bd4 <__ultoa_invert+0x6c>
    1bea:	ea cf       	rjmp	.-44     	; 0x1bc0 <__ultoa_invert+0x58>
    1bec:	b4 e0       	ldi	r27, 0x04	; 4
    1bee:	a6 95       	lsr	r26
    1bf0:	97 95       	ror	r25
    1bf2:	87 95       	ror	r24
    1bf4:	77 95       	ror	r23
    1bf6:	67 95       	ror	r22
    1bf8:	ba 95       	dec	r27
    1bfa:	c9 f7       	brne	.-14     	; 0x1bee <__ultoa_invert+0x86>
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	61 05       	cpc	r22, r1
    1c00:	71 05       	cpc	r23, r1
    1c02:	08 95       	ret
    1c04:	9b 01       	movw	r18, r22
    1c06:	ac 01       	movw	r20, r24
    1c08:	0a 2e       	mov	r0, r26
    1c0a:	06 94       	lsr	r0
    1c0c:	57 95       	ror	r21
    1c0e:	47 95       	ror	r20
    1c10:	37 95       	ror	r19
    1c12:	27 95       	ror	r18
    1c14:	ba 95       	dec	r27
    1c16:	c9 f7       	brne	.-14     	; 0x1c0a <__ultoa_invert+0xa2>
    1c18:	62 0f       	add	r22, r18
    1c1a:	73 1f       	adc	r23, r19
    1c1c:	84 1f       	adc	r24, r20
    1c1e:	95 1f       	adc	r25, r21
    1c20:	a0 1d       	adc	r26, r0
    1c22:	08 95       	ret

00001c24 <__prologue_saves__>:
    1c24:	2f 92       	push	r2
    1c26:	3f 92       	push	r3
    1c28:	4f 92       	push	r4
    1c2a:	5f 92       	push	r5
    1c2c:	6f 92       	push	r6
    1c2e:	7f 92       	push	r7
    1c30:	8f 92       	push	r8
    1c32:	9f 92       	push	r9
    1c34:	af 92       	push	r10
    1c36:	bf 92       	push	r11
    1c38:	cf 92       	push	r12
    1c3a:	df 92       	push	r13
    1c3c:	ef 92       	push	r14
    1c3e:	ff 92       	push	r15
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	ca 1b       	sub	r28, r26
    1c4e:	db 0b       	sbc	r29, r27
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	09 94       	ijmp

00001c5c <__epilogue_restores__>:
    1c5c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c5e:	39 88       	ldd	r3, Y+17	; 0x11
    1c60:	48 88       	ldd	r4, Y+16	; 0x10
    1c62:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c64:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c66:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c68:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c6e:	b9 84       	ldd	r11, Y+9	; 0x09
    1c70:	c8 84       	ldd	r12, Y+8	; 0x08
    1c72:	df 80       	ldd	r13, Y+7	; 0x07
    1c74:	ee 80       	ldd	r14, Y+6	; 0x06
    1c76:	fd 80       	ldd	r15, Y+5	; 0x05
    1c78:	0c 81       	ldd	r16, Y+4	; 0x04
    1c7a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c7c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c7e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c80:	ce 0f       	add	r28, r30
    1c82:	d1 1d       	adc	r29, r1
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	ed 01       	movw	r28, r26
    1c90:	08 95       	ret

00001c92 <_exit>:
    1c92:	f8 94       	cli

00001c94 <__stop_program>:
    1c94:	ff cf       	rjmp	.-2      	; 0x1c94 <__stop_program>
