
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00001d82  00001e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  0080019e  0080019e  00001eb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029ba  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc8  00000000  00000000  00004bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dcc  00000000  00000000  00005b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00007950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae2  00000000  00000000  000080cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002461  00000000  00000000  00008bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000b00f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__vector_20>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e8       	ldi	r30, 0x82	; 130
      7c:	fd e1       	ldi	r31, 0x1D	; 29
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 39       	cpi	r26, 0x9E	; 158
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	ae e9       	ldi	r26, 0x9E	; 158
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 31       	cpi	r26, 0x1D	; 29
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a5 08 	call	0x114a	; 0x114a <main>
      9e:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
      a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
      a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
      ac:	80 ec       	ldi	r24, 0xC0	; 192
      ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
      b2:	8e ee       	ldi	r24, 0xEE	; 238
      b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
      b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
      bc:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
      c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
      c2:	1f 92       	push	r1
      c4:	0f 92       	push	r0
      c6:	0f b6       	in	r0, 0x3f	; 63
      c8:	0f 92       	push	r0
      ca:	11 24       	eor	r1, r1
      cc:	8f 93       	push	r24
      ce:	9f 93       	push	r25
      d0:	ef 93       	push	r30
      d2:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
      d4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
      d8:	81 11       	cpse	r24, r1
      da:	09 c0       	rjmp	.+18     	; 0xee <__vector_21+0x2c>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
      dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      e4:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <mereni_napon+0x1>
      e8:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <mereni_napon>
      ec:	0c c0       	rjmp	.+24     	; 0x106 <__vector_21+0x44>
	else if(ad_kanal == 1)
      ee:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	41 f4       	brne	.+16     	; 0x106 <__vector_21+0x44>
		merena_struja = (uint16_t)ADC;
      f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      fe:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <merena_struja+0x1>
     102:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     106:	ea e7       	ldi	r30, 0x7A	; 122
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
     110:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
     114:	8f 5f       	subi	r24, 0xFF	; 255
     116:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     11a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	10 f0       	brcs	.+4      	; 0x126 <__vector_21+0x64>
		ad_kanal = 0;
     122:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
     126:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
     12a:	88 23       	and	r24, r24
     12c:	19 f0       	breq	.+6      	; 0x134 <__vector_21+0x72>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	39 f0       	breq	.+14     	; 0x140 <__vector_21+0x7e>
     132:	0e c0       	rjmp	.+28     	; 0x150 <__vector_21+0x8e>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     134:	ec e7       	ldi	r30, 0x7C	; 124
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	8c 7f       	andi	r24, 0xFC	; 252
     13c:	80 83       	st	Z, r24
		break;
     13e:	08 c0       	rjmp	.+16     	; 0x150 <__vector_21+0x8e>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     140:	ec e7       	ldi	r30, 0x7C	; 124
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	8d 7f       	andi	r24, 0xFD	; 253
     148:	80 83       	st	Z, r24
				ADMUX |= (0b1);
     14a:	80 81       	ld	r24, Z
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     150:	ea e7       	ldi	r30, 0x7A	; 122
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 6c       	ori	r24, 0xC0	; 192
     158:	80 83       	st	Z, r24
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us


}
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	9f 91       	pop	r25
     160:	8f 91       	pop	r24
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <EEPROM_read>:


uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     16c:	f9 99       	sbic	0x1f, 1	; 31
     16e:	fe cf       	rjmp	.-4      	; 0x16c <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
     170:	92 bd       	out	0x22, r25	; 34
     172:	81 bd       	out	0x21, r24	; 33
	
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     174:	f8 9a       	sbi	0x1f, 0	; 31
	
	/* Return data from Data Register */
	return EEDR;
     176:	80 b5       	in	r24, 0x20	; 32
}
     178:	08 95       	ret

0000017a <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     17a:	f9 99       	sbic	0x1f, 1	; 31
     17c:	fe cf       	rjmp	.-4      	; 0x17a <EEPROM_write>
	
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     17e:	92 bd       	out	0x22, r25	; 34
     180:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     182:	60 bd       	out	0x20, r22	; 32
	
	/**********************!!!!!!!!!!!!!!!!!!!!!!***************************/
	cli();									//zabrana interapta, po preporuci iz datasheet-a, doci ce do write-faila ako se desi interapt izmedju ova dva koraka
     184:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     186:	fa 9a       	sbi	0x1f, 2	; 31
	
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     188:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();									//dozvola interapta
     18a:	78 94       	sei
     18c:	08 95       	ret

0000018e <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     18e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     192:	88 e4       	ldi	r24, 0x48	; 72
     194:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     198:	08 95       	ret

0000019a <i2c_start_wait>:
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	ec eb       	ldi	r30, 0xBC	; 188
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	24 ea       	ldi	r18, 0xA4	; 164
     1a4:	a9 eb       	ldi	r26, 0xB9	; 185
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	cb eb       	ldi	r28, 0xBB	; 187
     1aa:	d0 e0       	ldi	r29, 0x00	; 0
     1ac:	34 e8       	ldi	r19, 0x84	; 132
     1ae:	44 e9       	ldi	r20, 0x94	; 148
     1b0:	20 83       	st	Z, r18
     1b2:	90 81       	ld	r25, Z
     1b4:	99 23       	and	r25, r25
     1b6:	ec f7       	brge	.-6      	; 0x1b2 <i2c_start_wait+0x18>
     1b8:	9c 91       	ld	r25, X
     1ba:	98 7f       	andi	r25, 0xF8	; 248
     1bc:	98 30       	cpi	r25, 0x08	; 8
     1be:	11 f0       	breq	.+4      	; 0x1c4 <i2c_start_wait+0x2a>
     1c0:	90 31       	cpi	r25, 0x10	; 16
     1c2:	b1 f7       	brne	.-20     	; 0x1b0 <i2c_start_wait+0x16>
     1c4:	88 83       	st	Y, r24
     1c6:	30 83       	st	Z, r19
     1c8:	90 81       	ld	r25, Z
     1ca:	99 23       	and	r25, r25
     1cc:	ec f7       	brge	.-6      	; 0x1c8 <i2c_start_wait+0x2e>
     1ce:	9c 91       	ld	r25, X
     1d0:	98 7f       	andi	r25, 0xF8	; 248
     1d2:	90 32       	cpi	r25, 0x20	; 32
     1d4:	11 f0       	breq	.+4      	; 0x1da <i2c_start_wait+0x40>
     1d6:	98 35       	cpi	r25, 0x58	; 88
     1d8:	29 f4       	brne	.+10     	; 0x1e4 <i2c_start_wait+0x4a>
     1da:	40 83       	st	Z, r20
     1dc:	90 81       	ld	r25, Z
     1de:	94 fd       	sbrc	r25, 4
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <i2c_start_wait+0x42>
     1e2:	e6 cf       	rjmp	.-52     	; 0x1b0 <i2c_start_wait+0x16>
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <i2c_stop>:
     1ea:	84 e9       	ldi	r24, 0x94	; 148
     1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1f0:	ec eb       	ldi	r30, 0xBC	; 188
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	84 fd       	sbrc	r24, 4
     1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <i2c_stop+0xa>
     1fa:	08 95       	ret

000001fc <i2c_write>:
     1fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     200:	84 e8       	ldi	r24, 0x84	; 132
     202:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     206:	ec eb       	ldi	r30, 0xBC	; 188
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	88 23       	and	r24, r24
     20e:	ec f7       	brge	.-6      	; 0x20a <i2c_write+0xe>
     210:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     214:	98 7f       	andi	r25, 0xF8	; 248
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	98 32       	cpi	r25, 0x28	; 40
     21a:	09 f4       	brne	.+2      	; 0x21e <i2c_write+0x22>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	08 95       	ret

00000220 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     220:	84 e8       	ldi	r24, 0x84	; 132
     222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     226:	ec eb       	ldi	r30, 0xBC	; 188
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	88 23       	and	r24, r24
     22e:	ec f7       	brge	.-6      	; 0x22a <i2c_readNak+0xa>
	
    return TWDR;
     230:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     234:	08 95       	ret

00000236 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     236:	cf 93       	push	r28
     238:	c8 2f       	mov	r28, r24
     23a:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     23c:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
	i2c_write(value);                      // write 
     240:	8c 2f       	mov	r24, r28
     242:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     246:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2c_stop>
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <sati_ispis>:




void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	fc 01       	movw	r30, r24
     258:	06 2f       	mov	r16, r22
     25a:	17 2f       	mov	r17, r23
     25c:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     25e:	21 11       	cpse	r18, r1
     260:	28 c0       	rjmp	.+80     	; 0x2b2 <sati_ispis+0x64>
	{
		(*sat)++;
     262:	80 81       	ld	r24, Z
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
     264:	99 ee       	ldi	r25, 0xE9	; 233
     266:	98 0f       	add	r25, r24
     268:	96 30       	cpi	r25, 0x06	; 6
     26a:	18 f0       	brcs	.+6      	; 0x272 <sati_ispis+0x24>
void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sat)++;
     26c:	8f 5f       	subi	r24, 0xFF	; 255
     26e:	80 83       	st	Z, r24
     270:	01 c0       	rjmp	.+2      	; 0x274 <sati_ispis+0x26>
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
			*sat = 0;
     272:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sat);
     274:	80 81       	ld	r24, Z
     276:	1f 92       	push	r1
     278:	8f 93       	push	r24
     27a:	8c e5       	ldi	r24, 0x5C	; 92
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	9f 93       	push	r25
     280:	8f 93       	push	r24
     282:	1f 93       	push	r17
     284:	0f 93       	push	r16
     286:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     28a:	88 81       	ld	r24, Y
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	81 50       	subi	r24, 0x01	; 1
     290:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     294:	80 2f       	mov	r24, r16
     296:	91 2f       	mov	r25, r17
     298:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	88 81       	ld	r24, Y
     2a0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	28 c0       	rjmp	.+80     	; 0x302 <sati_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     2b2:	21 30       	cpi	r18, 0x01	; 1
     2b4:	31 f5       	brne	.+76     	; 0x302 <sati_ispis+0xb4>
	{
		(*sat)--;
     2b6:	80 81       	ld	r24, Z
     2b8:	81 50       	subi	r24, 0x01	; 1
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     2ba:	8a 3f       	cpi	r24, 0xFA	; 250
     2bc:	10 f4       	brcc	.+4      	; 0x2c2 <sati_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sat)--;
     2be:	80 83       	st	Z, r24
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <sati_ispis+0x78>
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sat = 23;
     2c2:	87 e1       	ldi	r24, 0x17	; 23
     2c4:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sat);
     2c6:	80 81       	ld	r24, Z
     2c8:	1f 92       	push	r1
     2ca:	8f 93       	push	r24
     2cc:	8c e5       	ldi	r24, 0x5C	; 92
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	9f 93       	push	r25
     2d2:	8f 93       	push	r24
     2d4:	1f 93       	push	r17
     2d6:	0f 93       	push	r16
     2d8:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     2dc:	88 81       	ld	r24, Y
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	81 50       	subi	r24, 0x01	; 1
     2e2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     2e6:	80 2f       	mov	r24, r16
     2e8:	91 2f       	mov	r25, r17
     2ea:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	88 81       	ld	r24, Y
     2f2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
	}
	
	
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	08 95       	ret

0000030c <minuti_ispis>:

void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	fc 01       	movw	r30, r24
     316:	06 2f       	mov	r16, r22
     318:	17 2f       	mov	r17, r23
     31a:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     31c:	21 11       	cpse	r18, r1
     31e:	28 c0       	rjmp	.+80     	; 0x370 <minuti_ispis+0x64>
	{
		(*minut)++;
     320:	80 81       	ld	r24, Z
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
     322:	95 ec       	ldi	r25, 0xC5	; 197
     324:	98 0f       	add	r25, r24
     326:	95 30       	cpi	r25, 0x05	; 5
     328:	18 f0       	brcs	.+6      	; 0x330 <minuti_ispis+0x24>
void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*minut)++;
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	80 83       	st	Z, r24
     32e:	01 c0       	rjmp	.+2      	; 0x332 <minuti_ispis+0x26>
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
			*minut = 0;
     330:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *minut);
     332:	80 81       	ld	r24, Z
     334:	1f 92       	push	r1
     336:	8f 93       	push	r24
     338:	8c e5       	ldi	r24, 0x5C	; 92
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	1f 93       	push	r17
     342:	0f 93       	push	r16
     344:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     348:	88 81       	ld	r24, Y
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     352:	80 2f       	mov	r24, r16
     354:	91 2f       	mov	r25, r17
     356:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     35a:	61 e0       	ldi	r22, 0x01	; 1
     35c:	88 81       	ld	r24, Y
     35e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	28 c0       	rjmp	.+80     	; 0x3c0 <minuti_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     370:	21 30       	cpi	r18, 0x01	; 1
     372:	31 f5       	brne	.+76     	; 0x3c0 <minuti_ispis+0xb4>
	{
		(*minut)--;
     374:	80 81       	ld	r24, Z
     376:	81 50       	subi	r24, 0x01	; 1
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     378:	8a 3f       	cpi	r24, 0xFA	; 250
     37a:	10 f4       	brcc	.+4      	; 0x380 <minuti_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*minut)--;
     37c:	80 83       	st	Z, r24
     37e:	02 c0       	rjmp	.+4      	; 0x384 <minuti_ispis+0x78>
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*minut = 59;
     380:	8b e3       	ldi	r24, 0x3B	; 59
     382:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *minut);
     384:	80 81       	ld	r24, Z
     386:	1f 92       	push	r1
     388:	8f 93       	push	r24
     38a:	8c e5       	ldi	r24, 0x5C	; 92
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	9f 93       	push	r25
     390:	8f 93       	push	r24
     392:	1f 93       	push	r17
     394:	0f 93       	push	r16
     396:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     39a:	88 81       	ld	r24, Y
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	81 50       	subi	r24, 0x01	; 1
     3a0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     3a4:	80 2f       	mov	r24, r16
     3a6:	91 2f       	mov	r25, r17
     3a8:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	88 81       	ld	r24, Y
     3b0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
	}
	
	
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <sekundi_ispis>:

void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	fc 01       	movw	r30, r24
     3d4:	06 2f       	mov	r16, r22
     3d6:	17 2f       	mov	r17, r23
     3d8:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     3da:	21 11       	cpse	r18, r1
     3dc:	28 c0       	rjmp	.+80     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		(*sekund)++;
     3de:	80 81       	ld	r24, Z
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
     3e0:	95 ec       	ldi	r25, 0xC5	; 197
     3e2:	98 0f       	add	r25, r24
     3e4:	95 30       	cpi	r25, 0x05	; 5
     3e6:	18 f0       	brcs	.+6      	; 0x3ee <sekundi_ispis+0x24>
void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sekund)++;
     3e8:	8f 5f       	subi	r24, 0xFF	; 255
     3ea:	80 83       	st	Z, r24
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <sekundi_ispis+0x26>
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
			*sekund = 0;
     3ee:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sekund);
     3f0:	80 81       	ld	r24, Z
     3f2:	1f 92       	push	r1
     3f4:	8f 93       	push	r24
     3f6:	8c e5       	ldi	r24, 0x5C	; 92
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	1f 93       	push	r17
     400:	0f 93       	push	r16
     402:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     406:	88 81       	ld	r24, Y
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	81 50       	subi	r24, 0x01	; 1
     40c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     410:	80 2f       	mov	r24, r16
     412:	91 2f       	mov	r25, r17
     414:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	88 81       	ld	r24, Y
     41c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	28 c0       	rjmp	.+80     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	}
	else if (inc_dec == UMANJI)
     42e:	21 30       	cpi	r18, 0x01	; 1
     430:	31 f5       	brne	.+76     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	{
		(*sekund)--;
     432:	80 81       	ld	r24, Z
     434:	81 50       	subi	r24, 0x01	; 1
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     436:	8a 3f       	cpi	r24, 0xFA	; 250
     438:	10 f4       	brcc	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sekund)--;
     43a:	80 83       	st	Z, r24
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sekund = 59;
     43e:	8b e3       	ldi	r24, 0x3B	; 59
     440:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sekund);
     442:	80 81       	ld	r24, Z
     444:	1f 92       	push	r1
     446:	8f 93       	push	r24
     448:	8c e5       	ldi	r24, 0x5C	; 92
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	1f 93       	push	r17
     452:	0f 93       	push	r16
     454:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     458:	88 81       	ld	r24, Y
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	81 50       	subi	r24, 0x01	; 1
     45e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     462:	80 2f       	mov	r24, r16
     464:	91 2f       	mov	r25, r17
     466:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	88 81       	ld	r24, Y
     46e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
	}
	
	
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     488:	cf 93       	push	r28
     48a:	c8 2f       	mov	r28, r24
     48c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <led_pin>
     490:	84 60       	ori	r24, 0x04	; 4
     492:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <led_pin>
     496:	6e e4       	ldi	r22, 0x4E	; 78
     498:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     49c:	87 ec       	ldi	r24, 0xC7	; 199
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <putnibble+0x18>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <putnibble+0x1e>
     4a6:	00 00       	nop
     4a8:	c2 95       	swap	r28
     4aa:	c0 7f       	andi	r28, 0xF0	; 240
     4ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <led_pin>
     4b0:	6e e4       	ldi	r22, 0x4E	; 78
     4b2:	8c 2b       	or	r24, r28
     4b4:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     4b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <led_pin>
     4bc:	8b 7f       	andi	r24, 0xFB	; 251
     4be:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <led_pin>
     4c2:	6e e4       	ldi	r22, 0x4E	; 78
     4c4:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     4c8:	87 ec       	ldi	r24, 0xC7	; 199
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <putnibble+0x44>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <putnibble+0x4a>
     4d2:	00 00       	nop
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <lcd1602_send_byte>:
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	c8 2f       	mov	r28, r24
     4de:	d8 2f       	mov	r29, r24
     4e0:	d2 95       	swap	r29
     4e2:	df 70       	andi	r29, 0x0F	; 15
     4e4:	61 11       	cpse	r22, r1
     4e6:	09 c0       	rjmp	.+18     	; 0x4fa <lcd1602_send_byte+0x22>
     4e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <led_pin>
     4ec:	8e 7f       	andi	r24, 0xFE	; 254
     4ee:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <led_pin>
     4f2:	6e e4       	ldi	r22, 0x4E	; 78
     4f4:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     4f8:	08 c0       	rjmp	.+16     	; 0x50a <lcd1602_send_byte+0x32>
     4fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <led_pin>
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <led_pin>
     504:	6e e4       	ldi	r22, 0x4E	; 78
     506:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     50a:	8d 2f       	mov	r24, r29
     50c:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     510:	8c 2f       	mov	r24, r28
     512:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <lcd1602_send_char>:
     51c:	cf 93       	push	r28
     51e:	c8 2f       	mov	r28, r24
     520:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <led_pin>
     524:	81 60       	ori	r24, 0x01	; 1
     526:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <led_pin>
     52a:	6e e4       	ldi	r22, 0x4E	; 78
     52c:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     530:	8c 2f       	mov	r24, r28
     532:	82 95       	swap	r24
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     53a:	8c 2f       	mov	r24, r28
     53c:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <lcd1602_init>:
     544:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <led_pin>
     548:	0e 94 c7 00 	call	0x18e	; 0x18e <i2c_init>
     54c:	8f e5       	ldi	r24, 0x5F	; 95
     54e:	9a ee       	ldi	r25, 0xEA	; 234
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <lcd1602_init+0xc>
     554:	00 c0       	rjmp	.+0      	; 0x556 <lcd1602_init+0x12>
     556:	00 00       	nop
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     55e:	8f e7       	ldi	r24, 0x7F	; 127
     560:	9e e3       	ldi	r25, 0x3E	; 62
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <lcd1602_init+0x1e>
     566:	00 c0       	rjmp	.+0      	; 0x568 <lcd1602_init+0x24>
     568:	00 00       	nop
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     570:	8f e8       	ldi	r24, 0x8F	; 143
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <lcd1602_init+0x30>
     578:	00 c0       	rjmp	.+0      	; 0x57a <lcd1602_init+0x36>
     57a:	00 00       	nop
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     582:	8f e9       	ldi	r24, 0x9F	; 159
     584:	9f e0       	ldi	r25, 0x0F	; 15
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <lcd1602_init+0x42>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <lcd1602_init+0x48>
     58c:	00 00       	nop
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     594:	8f e9       	ldi	r24, 0x9F	; 159
     596:	9f e0       	ldi	r25, 0x0F	; 15
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <lcd1602_init+0x54>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <lcd1602_init+0x5a>
     59e:	00 00       	nop
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	88 e2       	ldi	r24, 0x28	; 40
     5a4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     5a8:	8f e9       	ldi	r24, 0x9F	; 159
     5aa:	9f e0       	ldi	r25, 0x0F	; 15
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <lcd1602_init+0x68>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <lcd1602_init+0x6e>
     5b2:	00 00       	nop
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	8c e0       	ldi	r24, 0x0C	; 12
     5b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     5bc:	8f e9       	ldi	r24, 0x9F	; 159
     5be:	9f e0       	ldi	r25, 0x0F	; 15
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <lcd1602_init+0x7c>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <lcd1602_init+0x82>
     5c6:	00 00       	nop
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	86 e0       	ldi	r24, 0x06	; 6
     5cc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     5d0:	8f e9       	ldi	r24, 0x9F	; 159
     5d2:	9f e0       	ldi	r25, 0x0F	; 15
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <lcd1602_init+0x90>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <lcd1602_init+0x96>
     5da:	00 00       	nop
     5dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <led_pin>
     5e0:	88 60       	ori	r24, 0x08	; 8
     5e2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <led_pin>
     5e6:	6e e4       	ldi	r22, 0x4E	; 78
     5e8:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     5ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <led_pin>
     5f0:	8d 7f       	andi	r24, 0xFD	; 253
     5f2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <led_pin>
     5f6:	6e e4       	ldi	r22, 0x4E	; 78
     5f8:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     5fc:	08 95       	ret

000005fe <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     5fe:	90 e4       	ldi	r25, 0x40	; 64
     600:	69 9f       	mul	r22, r25
     602:	80 0d       	add	r24, r0
     604:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	80 68       	ori	r24, 0x80	; 128
     60a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     60e:	08 95       	ret

00000610 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     618:	80 81       	ld	r24, Z
     61a:	88 23       	and	r24, r24
     61c:	59 f0       	breq	.+22     	; 0x634 <lcd1602_send_string+0x24>
     61e:	8f 01       	movw	r16, r30
     620:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     622:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd1602_send_char>
		i++;
     626:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     628:	f8 01       	movw	r30, r16
     62a:	ec 0f       	add	r30, r28
     62c:	f1 1d       	adc	r31, r1
     62e:	80 81       	ld	r24, Z
     630:	81 11       	cpse	r24, r1
     632:	f7 cf       	rjmp	.-18     	; 0x622 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     63c:	88 23       	and	r24, r24
     63e:	29 f0       	breq	.+10     	; 0x64a <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	8f e0       	ldi	r24, 0x0F	; 15
     644:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     648:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	8c e0       	ldi	r24, 0x0C	; 12
     64e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     652:	08 95       	ret

00000654 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     654:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     656:	dc 01       	movw	r26, r24
     658:	12 96       	adiw	r26, 0x02	; 2
     65a:	2c 91       	ld	r18, X
     65c:	12 97       	sbiw	r26, 0x02	; 2
     65e:	54 e6       	ldi	r21, 0x64	; 100
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	8c 91       	ld	r24, X
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	52 9f       	mul	r21, r18
     668:	80 0d       	add	r24, r0
     66a:	91 1d       	adc	r25, r1
     66c:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     66e:	db 01       	movw	r26, r22
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	2c 91       	ld	r18, X
     674:	12 97       	sbiw	r26, 0x02	; 2
     676:	11 96       	adiw	r26, 0x01	; 1
     678:	6c 91       	ld	r22, X
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	52 9f       	mul	r21, r18
     67e:	60 0d       	add	r22, r0
     680:	71 1d       	adc	r23, r1
     682:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     684:	42 81       	ldd	r20, Z+2	; 0x02
     686:	21 81       	ldd	r18, Z+1	; 0x01
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	54 9f       	mul	r21, r20
     68c:	20 0d       	add	r18, r0
     68e:	31 1d       	adc	r19, r1
     690:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     692:	86 17       	cp	r24, r22
     694:	97 07       	cpc	r25, r23
     696:	68 f0       	brcs	.+26     	; 0x6b2 <period_paljenja+0x5e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	20 f0       	brcs	.+8      	; 0x6a6 <period_paljenja+0x52>
     69e:	28 33       	cpi	r18, 0x38	; 56
     6a0:	b9 e0       	ldi	r27, 0x09	; 9
     6a2:	3b 07       	cpc	r19, r27
     6a4:	78 f0       	brcs	.+30     	; 0x6c4 <period_paljenja+0x70>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	26 17       	cp	r18, r22
     6aa:	37 07       	cpc	r19, r23
     6ac:	70 f0       	brcs	.+28     	; 0x6ca <period_paljenja+0x76>
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     6b2:	28 17       	cp	r18, r24
     6b4:	39 07       	cpc	r19, r25
     6b6:	40 f0       	brcs	.+16     	; 0x6c8 <period_paljenja+0x74>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	26 17       	cp	r18, r22
     6bc:	37 07       	cpc	r19, r23
     6be:	28 f0       	brcs	.+10     	; 0x6ca <period_paljenja+0x76>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     6ca:	08 95       	ret

000006cc <fsm_lcd_menu>:

void fsm_lcd_menu()
{
     6cc:	0f 93       	push	r16
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
	int pom;
	
	switch(STATE)
     6d2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <STATE>
     6d6:	83 30       	cpi	r24, 0x03	; 3
     6d8:	09 f4       	brne	.+2      	; 0x6dc <fsm_lcd_menu+0x10>
     6da:	5d c1       	rjmp	.+698    	; 0x996 <__stack+0x97>
     6dc:	30 f4       	brcc	.+12     	; 0x6ea <fsm_lcd_menu+0x1e>
     6de:	88 23       	and	r24, r24
     6e0:	59 f0       	breq	.+22     	; 0x6f8 <fsm_lcd_menu+0x2c>
     6e2:	82 30       	cpi	r24, 0x02	; 2
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <fsm_lcd_menu+0x1c>
     6e6:	79 c0       	rjmp	.+242    	; 0x7da <fsm_lcd_menu+0x10e>
     6e8:	2c c5       	rjmp	.+2648   	; 0x1142 <__stack+0x843>
     6ea:	84 30       	cpi	r24, 0x04	; 4
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <fsm_lcd_menu+0x24>
     6ee:	5f c2       	rjmp	.+1214   	; 0xbae <__stack+0x2af>
     6f0:	85 30       	cpi	r24, 0x05	; 5
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <fsm_lcd_menu+0x2a>
     6f4:	bf c3       	rjmp	.+1918   	; 0xe74 <__stack+0x575>
     6f6:	25 c5       	rjmp	.+2634   	; 0x1142 <__stack+0x843>
	{
		
		case DISPL1:
				/* prvi, tj. glavni meni sa ispisom tren. vremena i vremena on/off */
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     6f8:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <flag_pc_int>
     6fc:	88 23       	and	r24, r24
     6fe:	09 f4       	brne	.+2      	; 0x702 <fsm_lcd_menu+0x36>
     700:	60 c0       	rjmp	.+192    	; 0x7c2 <fsm_lcd_menu+0xf6>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     702:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <flag_pc_int>
			
					getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     706:	00 e0       	ldi	r16, 0x00	; 0
     708:	22 e1       	ldi	r18, 0x12	; 18
     70a:	32 e0       	ldi	r19, 0x02	; 2
     70c:	4a e0       	ldi	r20, 0x0A	; 10
     70e:	52 e0       	ldi	r21, 0x02	; 2
     710:	6b e0       	ldi	r22, 0x0B	; 11
     712:	72 e0       	ldi	r23, 0x02	; 2
     714:	8c e0       	ldi	r24, 0x0C	; 12
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	0e 94 56 0a 	call	0x14ac	; 0x14ac <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     71c:	ea e0       	ldi	r30, 0x0A	; 10
     71e:	f2 e0       	ldi	r31, 0x02	; 2
     720:	80 81       	ld	r24, Z
     722:	1f 92       	push	r1
     724:	8f 93       	push	r24
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	1f 92       	push	r1
     72a:	8f 93       	push	r24
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	1f 92       	push	r1
     730:	8f 93       	push	r24
     732:	88 e3       	ldi	r24, 0x38	; 56
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	c2 ed       	ldi	r28, 0xD2	; 210
     73c:	d1 e0       	ldi	r29, 0x01	; 1
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
					
					//lcd1602_clear();
			
					/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
					lcd1602_goto_xy(0,0);
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string("    ");
     74e:	87 e4       	ldi	r24, 0x47	; 71
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_send_string(bafer);
     756:	ce 01       	movw	r24, r28
     758:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_send_string("    ");
     75c:	87 e4       	ldi	r24, 0x47	; 71
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
			
					lcd1602_goto_xy(0,1);
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string("  ");
     76c:	89 e4       	ldi	r24, 0x49	; 73
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     774:	e1 e0       	ldi	r30, 0x01	; 1
     776:	f2 e0       	ldi	r31, 0x02	; 2
     778:	81 81       	ldd	r24, Z+1	; 0x01
     77a:	1f 92       	push	r1
     77c:	8f 93       	push	r24
     77e:	82 81       	ldd	r24, Z+2	; 0x02
     780:	1f 92       	push	r1
     782:	8f 93       	push	r24
     784:	ef ee       	ldi	r30, 0xEF	; 239
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	81 81       	ldd	r24, Z+1	; 0x01
     78a:	1f 92       	push	r1
     78c:	8f 93       	push	r24
     78e:	82 81       	ldd	r24, Z+2	; 0x02
     790:	1f 92       	push	r1
     792:	8f 93       	push	r24
     794:	8c e4       	ldi	r24, 0x4C	; 76
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9f 93       	push	r25
     79a:	8f 93       	push	r24
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
					lcd1602_send_string(bafer);
     7a4:	ce 01       	movw	r24, r28
     7a6:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_send_string("  ");
     7aa:	89 e4       	ldi	r24, 0x49	; 73
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
     7b2:	8d b7       	in	r24, 0x3d	; 61
     7b4:	9e b7       	in	r25, 0x3e	; 62
     7b6:	46 96       	adiw	r24, 0x16	; 22
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	9e bf       	out	0x3e, r25	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	8d bf       	out	0x3d, r24	; 61
			
				}
		
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     7c2:	65 e0       	ldi	r22, 0x05	; 5
     7c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     7c8:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     7cc:	88 23       	and	r24, r24
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <fsm_lcd_menu+0x106>
     7d0:	b8 c4       	rjmp	.+2416   	; 0x1142 <__stack+0x843>
					STATE = MENU1;
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <STATE>
     7d8:	b4 c4       	rjmp	.+2408   	; 0x1142 <__stack+0x843>
		break;
		
		case MENU1:
					//lcd1602_clear();
					pom = kursor;
     7da:	c0 91 a5 01 	lds	r28, 0x01A5	; 0x8001a5 <kursor>
     7de:	0c 2e       	mov	r0, r28
     7e0:	00 0c       	add	r0, r0
     7e2:	dd 0b       	sbc	r29, r29
					
					lcd1602_goto_xy(0, 0);
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string(">");	//fiksno, a djiram text za menije vertikalno
     7ec:	89 e6       	ldi	r24, 0x69	; 105
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					
					lcd1602_goto_xy(1,0);
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string(menu1_txt[kursor]);
     7fc:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     800:	21 e1       	ldi	r18, 0x11	; 17
     802:	82 02       	muls	r24, r18
     804:	c0 01       	movw	r24, r0
     806:	11 24       	eor	r1, r1
     808:	80 50       	subi	r24, 0x00	; 0
     80a:	9f 4f       	sbci	r25, 0xFF	; 255
     80c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					if (kursor == KURSOR_JEDNOKRAT)			//jednokrat na prvoj liniji
     810:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     814:	81 11       	cpse	r24, r1
     816:	15 c0       	rjmp	.+42     	; 0x842 <fsm_lcd_menu+0x176>
					{
						if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     818:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <jednok_on_off>
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	49 f4       	brne	.+18     	; 0x832 <fsm_lcd_menu+0x166>
						{
							lcd1602_goto_xy(12,0);
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	8c e0       	ldi	r24, 0x0C	; 12
     824:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
							lcd1602_send_string("<ON>");
     828:	81 e6       	ldi	r24, 0x61	; 97
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
     830:	08 c0       	rjmp	.+16     	; 0x842 <fsm_lcd_menu+0x176>
						}
						else					//ako je off ispisi <OF> pored JEDNOKRATNO
						{
							lcd1602_goto_xy(12,0);
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	8c e0       	ldi	r24, 0x0C	; 12
     836:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
							lcd1602_send_string("<OF>");
     83a:	86 e6       	ldi	r24, 0x66	; 102
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						}
					}
					
					lcd1602_goto_xy(1,1);
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					pom = (pom==KURSOR_MENU1_MAX) ? -1 : pom;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
     84a:	c2 30       	cpi	r28, 0x02	; 2
     84c:	d1 05       	cpc	r29, r1
     84e:	09 f4       	brne	.+2      	; 0x852 <fsm_lcd_menu+0x186>
     850:	73 c4       	rjmp	.+2278   	; 0x1138 <__stack+0x839>
					lcd1602_send_string(menu1_txt[pom + 1]);
     852:	9e 01       	movw	r18, r28
     854:	2f 5f       	subi	r18, 0xFF	; 255
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	41 e1       	ldi	r20, 0x11	; 17
     85a:	42 9f       	mul	r20, r18
     85c:	c0 01       	movw	r24, r0
     85e:	43 9f       	mul	r20, r19
     860:	90 0d       	add	r25, r0
     862:	11 24       	eor	r1, r1
     864:	80 50       	subi	r24, 0x00	; 0
     866:	9f 4f       	sbci	r25, 0xFF	; 255
     868:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					if ( (pom+1) == KURSOR_JEDNOKRAT)			//jednokrat na drugoj liniji, sa wrap-around-om
     86c:	21 96       	adiw	r28, 0x01	; 1
     86e:	a9 f4       	brne	.+42     	; 0x89a <fsm_lcd_menu+0x1ce>
					{
						if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     870:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <jednok_on_off>
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	49 f4       	brne	.+18     	; 0x88a <fsm_lcd_menu+0x1be>
						{
							lcd1602_goto_xy(12,1);
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	8c e0       	ldi	r24, 0x0C	; 12
     87c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
							lcd1602_send_string("<ON>");
     880:	81 e6       	ldi	r24, 0x61	; 97
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
     888:	08 c0       	rjmp	.+16     	; 0x89a <fsm_lcd_menu+0x1ce>
						}
						else					//ako je off ispisi <OF> pored JEDNOKRATNO
						{
							lcd1602_goto_xy(12,1);
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	8c e0       	ldi	r24, 0x0C	; 12
     88e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
							lcd1602_send_string("<OF>");
     892:	86 e6       	ldi	r24, 0x66	; 102
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						}
					}

		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     89a:	63 e0       	ldi	r22, 0x03	; 3
     89c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     8a0:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     8a4:	88 23       	and	r24, r24
     8a6:	59 f0       	breq	.+22     	; 0x8be <fsm_lcd_menu+0x1f2>
					{
						kursor++;
     8a8:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     8ac:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor > KURSOR_MENU1_MAX)
     8ae:	83 30       	cpi	r24, 0x03	; 3
     8b0:	1c f4       	brge	.+6      	; 0x8b8 <fsm_lcd_menu+0x1ec>
					}

		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor++;
     8b2:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     8b6:	45 c4       	rjmp	.+2186   	; 0x1142 <__stack+0x843>
						if(kursor > KURSOR_MENU1_MAX)
						kursor = 0;
     8b8:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
     8bc:	42 c4       	rjmp	.+2180   	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     8be:	62 e0       	ldi	r22, 0x02	; 2
     8c0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     8c4:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     8c8:	88 23       	and	r24, r24
     8ca:	59 f0       	breq	.+22     	; 0x8e2 <fsm_lcd_menu+0x216>
					{
						kursor--;
     8cc:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     8d0:	81 50       	subi	r24, 0x01	; 1
						if(kursor < 0)		//min je 0, logicno
     8d2:	1a f0       	brmi	.+6      	; 0x8da <fsm_lcd_menu+0x20e>
						if(kursor > KURSOR_MENU1_MAX)
						kursor = 0;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor--;
     8d4:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     8d8:	34 c4       	rjmp	.+2152   	; 0x1142 <__stack+0x843>
						if(kursor < 0)		//min je 0, logicno
						kursor = 2;
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     8e0:	30 c4       	rjmp	.+2144   	; 0x1142 <__stack+0x843>
					}
					else if(kursor == KURSOR_PODSAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     8e2:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	69 f4       	brne	.+26     	; 0x904 <__stack+0x5>
     8ea:	65 e0       	ldi	r22, 0x05	; 5
     8ec:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     8f0:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     8f4:	88 23       	and	r24, r24
     8f6:	31 f0       	breq	.+12     	; 0x904 <__stack+0x5>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     8f8:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
						STATE = POD_SAT;	//meni za podesavanje sata
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <STATE>
     902:	1f c4       	rjmp	.+2110   	; 0x1142 <__stack+0x843>
					}
					else if(kursor == KURSOR_PODONOF && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     904:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	69 f4       	brne	.+26     	; 0x926 <__stack+0x27>
     90c:	65 e0       	ldi	r22, 0x05	; 5
     90e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     912:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     916:	88 23       	and	r24, r24
     918:	31 f0       	breq	.+12     	; 0x926 <__stack+0x27>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     91a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     91e:	84 e0       	ldi	r24, 0x04	; 4
     920:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <STATE>
     924:	0e c4       	rjmp	.+2076   	; 0x1142 <__stack+0x843>
					}
					else if(kursor == KURSOR_JEDNOKRAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     926:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     92a:	81 11       	cpse	r24, r1
     92c:	27 c0       	rjmp	.+78     	; 0x97c <__stack+0x7d>
     92e:	65 e0       	ldi	r22, 0x05	; 5
     930:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     934:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     938:	88 23       	and	r24, r24
     93a:	31 f0       	breq	.+12     	; 0x948 <__stack+0x49>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     93c:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
						STATE = JEDNOKRATNO;	//sub_meni za podesavanje on ili off vremena jednokratno
     940:	85 e0       	ldi	r24, 0x05	; 5
     942:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <STATE>
     946:	fd c3       	rjmp	.+2042   	; 0x1142 <__stack+0x843>
					}
					else if( kursor == KURSOR_JEDNOKRAT && ( ocitaj_jedan_taster(tasteri, TASTER_LEVO) ||  ocitaj_jedan_taster(tasteri, TASTER_DESNO) ) ) //levo ili desno kad je na JEDNOKRATNO da togluje on/of
     948:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     94c:	81 11       	cpse	r24, r1
     94e:	16 c0       	rjmp	.+44     	; 0x97c <__stack+0x7d>
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     956:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     95a:	81 11       	cpse	r24, r1
     95c:	07 c0       	rjmp	.+14     	; 0x96c <__stack+0x6d>
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     964:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     968:	88 23       	and	r24, r24
     96a:	41 f0       	breq	.+16     	; 0x97c <__stack+0x7d>
					{
						jednok_on_off = !jednok_on_off;	//toggle
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <jednok_on_off>
     972:	91 11       	cpse	r25, r1
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <jednok_on_off>
     97a:	e3 c3       	rjmp	.+1990   	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     97c:	64 e0       	ldi	r22, 0x04	; 4
     97e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     982:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     986:	88 23       	and	r24, r24
     988:	09 f4       	brne	.+2      	; 0x98c <__stack+0x8d>
     98a:	db c3       	rjmp	.+1974   	; 0x1142 <__stack+0x843>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     98c:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     990:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <STATE>
     994:	d6 c3       	rjmp	.+1964   	; 0x1142 <__stack+0x843>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (flag_pod_vremena)
     996:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <flag_pod_vremena>
     99a:	88 23       	and	r24, r24
     99c:	09 f4       	brne	.+2      	; 0x9a0 <__stack+0xa1>
     99e:	4b c0       	rjmp	.+150    	; 0xa36 <__stack+0x137>
					{
						flag_pod_vremena = 0;
     9a0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <flag_pod_vremena>
						snap_shot_vremena = vreme_datum;
     9a4:	89 e0       	ldi	r24, 0x09	; 9
     9a6:	ea e0       	ldi	r30, 0x0A	; 10
     9a8:	f2 e0       	ldi	r31, 0x02	; 2
     9aa:	a9 ec       	ldi	r26, 0xC9	; 201
     9ac:	b1 e0       	ldi	r27, 0x01	; 1
     9ae:	01 90       	ld	r0, Z+
     9b0:	0d 92       	st	X+, r0
     9b2:	8a 95       	dec	r24
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <__stack+0xaf>
						sprintf(bafer, "%02d:%02d:%02d", snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s);
     9b6:	e9 ec       	ldi	r30, 0xC9	; 201
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	80 81       	ld	r24, Z
     9bc:	1f 92       	push	r1
     9be:	8f 93       	push	r24
     9c0:	81 81       	ldd	r24, Z+1	; 0x01
     9c2:	1f 92       	push	r1
     9c4:	8f 93       	push	r24
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	1f 92       	push	r1
     9ca:	8f 93       	push	r24
     9cc:	88 e3       	ldi	r24, 0x38	; 56
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	9f 93       	push	r25
     9d2:	8f 93       	push	r24
     9d4:	82 ed       	ldi	r24, 0xD2	; 210
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	9f 93       	push	r25
     9da:	8f 93       	push	r24
     9dc:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
			
						kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     9e0:	85 e0       	ldi	r24, 0x05	; 5
     9e2:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
			
						lcd1602_goto_xy(0,0);
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("PODESAVANJE SATA");
     9ee:	8b e6       	ldi	r24, 0x6B	; 107
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
			
						lcd1602_goto_xy(0,1);
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("    ");
     9fe:	87 e4       	ldi	r24, 0x47	; 71
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     a06:	82 ed       	ldi	r24, 0xD2	; 210
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string("    ");
     a0e:	87 e4       	ldi	r24, 0x47	; 71
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
			
						lcd1602_goto_xy(kursor,1);
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     a1c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
     a26:	8d b7       	in	r24, 0x3d	; 61
     a28:	9e b7       	in	r25, 0x3e	; 62
     a2a:	0a 96       	adiw	r24, 0x0a	; 10
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	9e bf       	out	0x3e, r25	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	8d bf       	out	0x3d, r24	; 61
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     a3c:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     a40:	88 23       	and	r24, r24
     a42:	89 f0       	breq	.+34     	; 0xa66 <__stack+0x167>
					{
						kursor += 3;
     a44:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     a48:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 11)
     a4a:	8c 30       	cpi	r24, 0x0C	; 12
     a4c:	1c f4       	brge	.+6      	; 0xa54 <__stack+0x155>
						lcd1602_cursor_blink(1);
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     a4e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     a52:	03 c0       	rjmp	.+6      	; 0xa5a <__stack+0x15b>
						if(kursor > 11)
							kursor = 11;
     a54:	8b e0       	ldi	r24, 0x0B	; 11
     a56:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
						lcd1602_goto_xy(kursor,1);
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     a60:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     a64:	6e c3       	rjmp	.+1756   	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     a6c:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     a70:	88 23       	and	r24, r24
     a72:	89 f0       	breq	.+34     	; 0xa96 <__stack+0x197>
					{
						kursor -= 3;
     a74:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     a78:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 5)
     a7a:	85 30       	cpi	r24, 0x05	; 5
     a7c:	1c f0       	brlt	.+6      	; 0xa84 <__stack+0x185>
							kursor = 11;
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     a7e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <__stack+0x18b>
						if(kursor < 5)
							kursor = 5;
     a84:	85 e0       	ldi	r24, 0x05	; 5
     a86:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
						lcd1602_goto_xy(kursor,1);
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     a90:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     a94:	56 c3       	rjmp	.+1708   	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     a9c:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     aa0:	88 23       	and	r24, r24
     aa2:	39 f1       	breq	.+78     	; 0xaf2 <__stack+0x1f3>
					{
						if (kursor == 5)												//podesava SATE ++
     aa4:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     aa8:	85 30       	cpi	r24, 0x05	; 5
     aaa:	51 f4       	brne	.+20     	; 0xac0 <__stack+0x1c1>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UVECAJ);
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	45 ea       	ldi	r20, 0xA5	; 165
     ab0:	51 e0       	ldi	r21, 0x01	; 1
     ab2:	62 ed       	ldi	r22, 0xD2	; 210
     ab4:	71 e0       	ldi	r23, 0x01	; 1
     ab6:	8b ec       	ldi	r24, 0xCB	; 203
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     abe:	41 c3       	rjmp	.+1666   	; 0x1142 <__stack+0x843>
						else if (kursor == 8)											//podesava MINUTE ++
     ac0:	88 30       	cpi	r24, 0x08	; 8
     ac2:	51 f4       	brne	.+20     	; 0xad8 <__stack+0x1d9>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UVECAJ);
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	45 ea       	ldi	r20, 0xA5	; 165
     ac8:	51 e0       	ldi	r21, 0x01	; 1
     aca:	62 ed       	ldi	r22, 0xD2	; 210
     acc:	71 e0       	ldi	r23, 0x01	; 1
     ace:	8a ec       	ldi	r24, 0xCA	; 202
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     ad6:	35 c3       	rjmp	.+1642   	; 0x1142 <__stack+0x843>
						else if (kursor == 11)											//podesava SEKUNDE ++
     ad8:	8b 30       	cpi	r24, 0x0B	; 11
     ada:	09 f0       	breq	.+2      	; 0xade <__stack+0x1df>
     adc:	32 c3       	rjmp	.+1636   	; 0x1142 <__stack+0x843>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UVECAJ);
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	45 ea       	ldi	r20, 0xA5	; 165
     ae2:	51 e0       	ldi	r21, 0x01	; 1
     ae4:	62 ed       	ldi	r22, 0xD2	; 210
     ae6:	71 e0       	ldi	r23, 0x01	; 1
     ae8:	89 ec       	ldi	r24, 0xC9	; 201
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	0e 94 e5 01 	call	0x3ca	; 0x3ca <sekundi_ispis>
     af0:	28 c3       	rjmp	.+1616   	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     af2:	63 e0       	ldi	r22, 0x03	; 3
     af4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     af8:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     afc:	88 23       	and	r24, r24
     afe:	39 f1       	breq	.+78     	; 0xb4e <__stack+0x24f>
					{
						if (kursor == 5)												//podesava SATE --
     b00:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     b04:	85 30       	cpi	r24, 0x05	; 5
     b06:	51 f4       	brne	.+20     	; 0xb1c <__stack+0x21d>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UMANJI);
     b08:	21 e0       	ldi	r18, 0x01	; 1
     b0a:	45 ea       	ldi	r20, 0xA5	; 165
     b0c:	51 e0       	ldi	r21, 0x01	; 1
     b0e:	62 ed       	ldi	r22, 0xD2	; 210
     b10:	71 e0       	ldi	r23, 0x01	; 1
     b12:	8b ec       	ldi	r24, 0xCB	; 203
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     b1a:	13 c3       	rjmp	.+1574   	; 0x1142 <__stack+0x843>
						else if (kursor == 8)											//podesava MINUTE --
     b1c:	88 30       	cpi	r24, 0x08	; 8
     b1e:	51 f4       	brne	.+20     	; 0xb34 <__stack+0x235>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UMANJI);
     b20:	21 e0       	ldi	r18, 0x01	; 1
     b22:	45 ea       	ldi	r20, 0xA5	; 165
     b24:	51 e0       	ldi	r21, 0x01	; 1
     b26:	62 ed       	ldi	r22, 0xD2	; 210
     b28:	71 e0       	ldi	r23, 0x01	; 1
     b2a:	8a ec       	ldi	r24, 0xCA	; 202
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     b32:	07 c3       	rjmp	.+1550   	; 0x1142 <__stack+0x843>
						else if (kursor == 11)											//podesava SEKUNDE --
     b34:	8b 30       	cpi	r24, 0x0B	; 11
     b36:	09 f0       	breq	.+2      	; 0xb3a <__stack+0x23b>
     b38:	04 c3       	rjmp	.+1544   	; 0x1142 <__stack+0x843>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UMANJI);
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	45 ea       	ldi	r20, 0xA5	; 165
     b3e:	51 e0       	ldi	r21, 0x01	; 1
     b40:	62 ed       	ldi	r22, 0xD2	; 210
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	89 ec       	ldi	r24, 0xC9	; 201
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 e5 01 	call	0x3ca	; 0x3ca <sekundi_ispis>
     b4c:	fa c2       	rjmp	.+1524   	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//Potvrdi vreme koje vidis na ekranu i promeni vreme; izadji iz menija
     b4e:	65 e0       	ldi	r22, 0x05	; 5
     b50:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     b54:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     b58:	88 23       	and	r24, r24
     b5a:	a9 f0       	breq	.+42     	; 0xb86 <__stack+0x287>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s, am, _24_hour_format);
     b5c:	e9 ec       	ldi	r30, 0xC9	; 201
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	00 e0       	ldi	r16, 0x00	; 0
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	40 81       	ld	r20, Z
     b66:	61 81       	ldd	r22, Z+1	; 0x01
     b68:	82 81       	ldd	r24, Z+2	; 0x02
     b6a:	0e 94 94 0a 	call	0x1528	; 0x1528 <setTime>
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     b74:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <STATE>
     b84:	de c2       	rjmp	.+1468   	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     b86:	64 e0       	ldi	r22, 0x04	; 4
     b88:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     b8c:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     b90:	88 23       	and	r24, r24
     b92:	09 f4       	brne	.+2      	; 0xb96 <__stack+0x297>
     b94:	d6 c2       	rjmp	.+1452   	; 0x1142 <__stack+0x843>
					{
						/* Vreme setujem samo ako je stisnut ENTER, ako je stisnuto NAZAD, vreme se ne dira, tj. ovde se ne dira */
								//setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     b9c:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <STATE>
     bac:	ca c2       	rjmp	.+1428   	; 0x1142 <__stack+0x843>
		break;
		
		case POD_ON_OFF:																				
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
     bae:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <flag_pod_ONOFF>
     bb2:	88 23       	and	r24, r24
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <__stack+0x2b9>
     bb6:	59 c0       	rjmp	.+178    	; 0xc6a <__stack+0x36b>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
     bb8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <flag_pod_ONOFF>
						
						snap_vreme_paljenja = vreme_paljenja;	
     bbc:	89 e0       	ldi	r24, 0x09	; 9
     bbe:	ef ee       	ldi	r30, 0xEF	; 239
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	a8 ef       	ldi	r26, 0xF8	; 248
     bc4:	b1 e0       	ldi	r27, 0x01	; 1
     bc6:	01 90       	ld	r0, Z+
     bc8:	0d 92       	st	X+, r0
     bca:	8a 95       	dec	r24
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <__stack+0x2c7>
						snap_vreme_gasenja = vreme_gasenja;
     bce:	89 e0       	ldi	r24, 0x09	; 9
     bd0:	e1 e0       	ldi	r30, 0x01	; 1
     bd2:	f2 e0       	ldi	r31, 0x02	; 2
     bd4:	a6 ee       	ldi	r26, 0xE6	; 230
     bd6:	b1 e0       	ldi	r27, 0x01	; 1
     bd8:	01 90       	ld	r0, Z+
     bda:	0d 92       	st	X+, r0
     bdc:	8a 95       	dec	r24
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <__stack+0x2d9>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
						
						lcd1602_goto_xy(0,0);
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("  UPALI--UGASI  ");
     bee:	8c e7       	ldi	r24, 0x7C	; 124
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     bf6:	e6 ee       	ldi	r30, 0xE6	; 230
     bf8:	f1 e0       	ldi	r31, 0x01	; 1
     bfa:	81 81       	ldd	r24, Z+1	; 0x01
     bfc:	1f 92       	push	r1
     bfe:	8f 93       	push	r24
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	1f 92       	push	r1
     c04:	8f 93       	push	r24
     c06:	e8 ef       	ldi	r30, 0xF8	; 248
     c08:	f1 e0       	ldi	r31, 0x01	; 1
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	1f 92       	push	r1
     c0e:	8f 93       	push	r24
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	1f 92       	push	r1
     c14:	8f 93       	push	r24
     c16:	8c e4       	ldi	r24, 0x4C	; 76
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	9f 93       	push	r25
     c1c:	8f 93       	push	r24
     c1e:	82 ed       	ldi	r24, 0xD2	; 210
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	9f 93       	push	r25
     c24:	8f 93       	push	r24
     c26:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
						
						lcd1602_goto_xy(0,1);
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("  ");
     c32:	89 e4       	ldi	r24, 0x49	; 73
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     c3a:	82 ed       	ldi	r24, 0xD2	; 210
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string("  ");
     c42:	89 e4       	ldi	r24, 0x49	; 73
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     c50:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
     c5a:	8d b7       	in	r24, 0x3d	; 61
     c5c:	9e b7       	in	r25, 0x3e	; 62
     c5e:	0c 96       	adiw	r24, 0x0c	; 12
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	9e bf       	out	0x3e, r25	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     c70:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     c74:	88 23       	and	r24, r24
     c76:	c9 f0       	breq	.+50     	; 0xcaa <__stack+0x3ab>
					{
						kursor += 3;
     c78:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
     c7c:	9c ef       	ldi	r25, 0xFC	; 252
     c7e:	98 0f       	add	r25, r24
     c80:	93 30       	cpi	r25, 0x03	; 3
     c82:	20 f4       	brcc	.+8      	; 0xc8c <__stack+0x38d>
							kursor = 10;
     c84:	8a e0       	ldi	r24, 0x0A	; 10
     c86:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     c8a:	09 c0       	rjmp	.+18     	; 0xc9e <__stack+0x39f>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     c8c:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
     c8e:	8e 30       	cpi	r24, 0x0E	; 14
     c90:	1c f4       	brge	.+6      	; 0xc98 <__stack+0x399>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     c92:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <__stack+0x39f>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
							kursor = 13;
     c98:	8d e0       	ldi	r24, 0x0D	; 13
     c9a:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     ca4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     ca8:	4c c2       	rjmp	.+1176   	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     cb0:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     cb4:	88 23       	and	r24, r24
     cb6:	c9 f0       	breq	.+50     	; 0xcea <__stack+0x3eb>
					{
						kursor -= 3;
     cb8:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
     cbc:	96 ef       	ldi	r25, 0xF6	; 246
     cbe:	98 0f       	add	r25, r24
     cc0:	93 30       	cpi	r25, 0x03	; 3
     cc2:	20 f4       	brcc	.+8      	; 0xccc <__stack+0x3cd>
							kursor = 6;
     cc4:	86 e0       	ldi	r24, 0x06	; 6
     cc6:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     cca:	09 c0       	rjmp	.+18     	; 0xcde <__stack+0x3df>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     ccc:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
     cce:	83 30       	cpi	r24, 0x03	; 3
     cd0:	1c f0       	brlt	.+6      	; 0xcd8 <__stack+0x3d9>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     cd2:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     cd6:	03 c0       	rjmp	.+6      	; 0xcde <__stack+0x3df>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
							kursor = 3;
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     ce4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     ce8:	2c c2       	rjmp	.+1112   	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     cea:	62 e0       	ldi	r22, 0x02	; 2
     cec:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     cf0:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     cf4:	88 23       	and	r24, r24
     cf6:	99 f1       	breq	.+102    	; 0xd5e <__stack+0x45f>
					{
						if (kursor == 3)												//podesava SATE_ON ++
     cf8:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	51 f4       	brne	.+20     	; 0xd14 <__stack+0x415>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	45 ea       	ldi	r20, 0xA5	; 165
     d04:	51 e0       	ldi	r21, 0x01	; 1
     d06:	62 ed       	ldi	r22, 0xD2	; 210
     d08:	71 e0       	ldi	r23, 0x01	; 1
     d0a:	8a ef       	ldi	r24, 0xFA	; 250
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     d12:	17 c2       	rjmp	.+1070   	; 0x1142 <__stack+0x843>
						else if (kursor == 6)											//podesava MINUTE_ON ++
     d14:	86 30       	cpi	r24, 0x06	; 6
     d16:	51 f4       	brne	.+20     	; 0xd2c <__stack+0x42d>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	45 ea       	ldi	r20, 0xA5	; 165
     d1c:	51 e0       	ldi	r21, 0x01	; 1
     d1e:	62 ed       	ldi	r22, 0xD2	; 210
     d20:	71 e0       	ldi	r23, 0x01	; 1
     d22:	89 ef       	ldi	r24, 0xF9	; 249
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     d2a:	0b c2       	rjmp	.+1046   	; 0x1142 <__stack+0x843>
						else if (kursor == 10)											//podesava SATE_OFF ++
     d2c:	8a 30       	cpi	r24, 0x0A	; 10
     d2e:	51 f4       	brne	.+20     	; 0xd44 <__stack+0x445>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	45 ea       	ldi	r20, 0xA5	; 165
     d34:	51 e0       	ldi	r21, 0x01	; 1
     d36:	62 ed       	ldi	r22, 0xD2	; 210
     d38:	71 e0       	ldi	r23, 0x01	; 1
     d3a:	88 ee       	ldi	r24, 0xE8	; 232
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     d42:	ff c1       	rjmp	.+1022   	; 0x1142 <__stack+0x843>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
     d44:	8d 30       	cpi	r24, 0x0D	; 13
     d46:	09 f0       	breq	.+2      	; 0xd4a <__stack+0x44b>
     d48:	fc c1       	rjmp	.+1016   	; 0x1142 <__stack+0x843>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	45 ea       	ldi	r20, 0xA5	; 165
     d4e:	51 e0       	ldi	r21, 0x01	; 1
     d50:	62 ed       	ldi	r22, 0xD2	; 210
     d52:	71 e0       	ldi	r23, 0x01	; 1
     d54:	87 ee       	ldi	r24, 0xE7	; 231
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     d5c:	f2 c1       	rjmp	.+996    	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     d5e:	63 e0       	ldi	r22, 0x03	; 3
     d60:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     d64:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     d68:	88 23       	and	r24, r24
     d6a:	99 f1       	breq	.+102    	; 0xdd2 <__stack+0x4d3>
					{
						if (kursor == 3)												//podesava SATE_ON --
     d6c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	51 f4       	brne	.+20     	; 0xd88 <__stack+0x489>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
     d74:	21 e0       	ldi	r18, 0x01	; 1
     d76:	45 ea       	ldi	r20, 0xA5	; 165
     d78:	51 e0       	ldi	r21, 0x01	; 1
     d7a:	62 ed       	ldi	r22, 0xD2	; 210
     d7c:	71 e0       	ldi	r23, 0x01	; 1
     d7e:	8a ef       	ldi	r24, 0xFA	; 250
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     d86:	dd c1       	rjmp	.+954    	; 0x1142 <__stack+0x843>
						else if (kursor == 6)											//podesava MINUTE_ON --
     d88:	86 30       	cpi	r24, 0x06	; 6
     d8a:	51 f4       	brne	.+20     	; 0xda0 <__stack+0x4a1>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	45 ea       	ldi	r20, 0xA5	; 165
     d90:	51 e0       	ldi	r21, 0x01	; 1
     d92:	62 ed       	ldi	r22, 0xD2	; 210
     d94:	71 e0       	ldi	r23, 0x01	; 1
     d96:	89 ef       	ldi	r24, 0xF9	; 249
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     d9e:	d1 c1       	rjmp	.+930    	; 0x1142 <__stack+0x843>
						else if (kursor == 10)											//podesava SATE_OFF --
     da0:	8a 30       	cpi	r24, 0x0A	; 10
     da2:	51 f4       	brne	.+20     	; 0xdb8 <__stack+0x4b9>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	45 ea       	ldi	r20, 0xA5	; 165
     da8:	51 e0       	ldi	r21, 0x01	; 1
     daa:	62 ed       	ldi	r22, 0xD2	; 210
     dac:	71 e0       	ldi	r23, 0x01	; 1
     dae:	88 ee       	ldi	r24, 0xE8	; 232
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     db6:	c5 c1       	rjmp	.+906    	; 0x1142 <__stack+0x843>
						else if (kursor == 13)											//podesava MINUTE_OFF --
     db8:	8d 30       	cpi	r24, 0x0D	; 13
     dba:	09 f0       	breq	.+2      	; 0xdbe <__stack+0x4bf>
     dbc:	c2 c1       	rjmp	.+900    	; 0x1142 <__stack+0x843>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
     dbe:	21 e0       	ldi	r18, 0x01	; 1
     dc0:	45 ea       	ldi	r20, 0xA5	; 165
     dc2:	51 e0       	ldi	r21, 0x01	; 1
     dc4:	62 ed       	ldi	r22, 0xD2	; 210
     dc6:	71 e0       	ldi	r23, 0x01	; 1
     dc8:	87 ee       	ldi	r24, 0xE7	; 231
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     dd0:	b8 c1       	rjmp	.+880    	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
     dd2:	65 e0       	ldi	r22, 0x05	; 5
     dd4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     dd8:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     ddc:	88 23       	and	r24, r24
     dde:	b1 f1       	breq	.+108    	; 0xe4c <__stack+0x54d>
					{
						vreme_paljenja = snap_vreme_paljenja;	//konacno upisem
     de0:	89 e0       	ldi	r24, 0x09	; 9
     de2:	e8 ef       	ldi	r30, 0xF8	; 248
     de4:	f1 e0       	ldi	r31, 0x01	; 1
     de6:	af ee       	ldi	r26, 0xEF	; 239
     de8:	b1 e0       	ldi	r27, 0x01	; 1
     dea:	01 90       	ld	r0, Z+
     dec:	0d 92       	st	X+, r0
     dee:	8a 95       	dec	r24
     df0:	e1 f7       	brne	.-8      	; 0xdea <__stack+0x4eb>
						vreme_gasenja = snap_vreme_gasenja;
     df2:	89 e0       	ldi	r24, 0x09	; 9
     df4:	e6 ee       	ldi	r30, 0xE6	; 230
     df6:	f1 e0       	ldi	r31, 0x01	; 1
     df8:	a1 e0       	ldi	r26, 0x01	; 1
     dfa:	b2 e0       	ldi	r27, 0x02	; 2
     dfc:	01 90       	ld	r0, Z+
     dfe:	0d 92       	st	X+, r0
     e00:	8a 95       	dec	r24
     e02:	e1 f7       	brne	.-8      	; 0xdfc <__stack+0x4fd>
						
						/* upis u eeprom */
						EEPROM_write(UPALI_HR_ADR, vreme_paljenja.hr);
     e04:	cf ee       	ldi	r28, 0xEF	; 239
     e06:	d1 e0       	ldi	r29, 0x01	; 1
     e08:	6a 81       	ldd	r22, Y+2	; 0x02
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(UPALI_MIN_ADR, vreme_paljenja.min);
     e12:	69 81       	ldd	r22, Y+1	; 0x01
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(UGASI_HR_ADR, vreme_gasenja.hr);
     e1c:	c1 e0       	ldi	r28, 0x01	; 1
     e1e:	d2 e0       	ldi	r29, 0x02	; 2
     e20:	6a 81       	ldd	r22, Y+2	; 0x02
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(UGASI_MIN_ADR, vreme_gasenja.min);
     e2a:	69 81       	ldd	r22, Y+1	; 0x01
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
     e3a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <STATE>
     e4a:	7b c1       	rjmp	.+758    	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     e4c:	64 e0       	ldi	r22, 0x04	; 4
     e4e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     e52:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     e56:	88 23       	and	r24, r24
     e58:	09 f4       	brne	.+2      	; 0xe5c <__stack+0x55d>
     e5a:	73 c1       	rjmp	.+742    	; 0x1142 <__stack+0x843>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
     e62:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <STATE>
     e72:	67 c1       	rjmp	.+718    	; 0x1142 <__stack+0x843>
		case JEDNOKRATNO:
					//da opali samo jednom, bez obzira na glavni period
					/* prakticno kopija POD-ON-OFF samo se u drugu promenljivu belezi, cak pozajmljujem i iste tmp promenljive */
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
     e74:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <flag_pod_ONOFF>
     e78:	88 23       	and	r24, r24
     e7a:	09 f4       	brne	.+2      	; 0xe7e <__stack+0x57f>
     e7c:	59 c0       	rjmp	.+178    	; 0xf30 <__stack+0x631>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
     e7e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <flag_pod_ONOFF>
						
						snap_vreme_paljenja = jednokratno_paljenje;
     e82:	89 e0       	ldi	r24, 0x09	; 9
     e84:	e0 ec       	ldi	r30, 0xC0	; 192
     e86:	f1 e0       	ldi	r31, 0x01	; 1
     e88:	a8 ef       	ldi	r26, 0xF8	; 248
     e8a:	b1 e0       	ldi	r27, 0x01	; 1
     e8c:	01 90       	ld	r0, Z+
     e8e:	0d 92       	st	X+, r0
     e90:	8a 95       	dec	r24
     e92:	e1 f7       	brne	.-8      	; 0xe8c <__stack+0x58d>
						snap_vreme_gasenja = jednokratno_gasenje;
     e94:	89 e0       	ldi	r24, 0x09	; 9
     e96:	e7 eb       	ldi	r30, 0xB7	; 183
     e98:	f1 e0       	ldi	r31, 0x01	; 1
     e9a:	a6 ee       	ldi	r26, 0xE6	; 230
     e9c:	b1 e0       	ldi	r27, 0x01	; 1
     e9e:	01 90       	ld	r0, Z+
     ea0:	0d 92       	st	X+, r0
     ea2:	8a 95       	dec	r24
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <__stack+0x59f>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
						
						lcd1602_goto_xy(0,0);
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("  JEDNOKRATNO:  ");
     eb4:	8d e8       	ldi	r24, 0x8D	; 141
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     ebc:	e6 ee       	ldi	r30, 0xE6	; 230
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	1f 92       	push	r1
     ec4:	8f 93       	push	r24
     ec6:	82 81       	ldd	r24, Z+2	; 0x02
     ec8:	1f 92       	push	r1
     eca:	8f 93       	push	r24
     ecc:	e8 ef       	ldi	r30, 0xF8	; 248
     ece:	f1 e0       	ldi	r31, 0x01	; 1
     ed0:	81 81       	ldd	r24, Z+1	; 0x01
     ed2:	1f 92       	push	r1
     ed4:	8f 93       	push	r24
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	1f 92       	push	r1
     eda:	8f 93       	push	r24
     edc:	8c e4       	ldi	r24, 0x4C	; 76
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	82 ed       	ldi	r24, 0xD2	; 210
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	9f 93       	push	r25
     eea:	8f 93       	push	r24
     eec:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
						
						lcd1602_goto_xy(0,1);
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("  ");
     ef8:	89 e4       	ldi	r24, 0x49	; 73
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     f00:	82 ed       	ldi	r24, 0xD2	; 210
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string("  ");
     f08:	89 e4       	ldi	r24, 0x49	; 73
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     f16:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
     f20:	8d b7       	in	r24, 0x3d	; 61
     f22:	9e b7       	in	r25, 0x3e	; 62
     f24:	0c 96       	adiw	r24, 0x0c	; 12
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	9e bf       	out	0x3e, r25	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     f36:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     f3a:	88 23       	and	r24, r24
     f3c:	c9 f0       	breq	.+50     	; 0xf70 <__stack+0x671>
					{
						kursor += 3;
     f3e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
     f42:	9c ef       	ldi	r25, 0xFC	; 252
     f44:	98 0f       	add	r25, r24
     f46:	93 30       	cpi	r25, 0x03	; 3
     f48:	20 f4       	brcc	.+8      	; 0xf52 <__stack+0x653>
						kursor = 10;
     f4a:	8a e0       	ldi	r24, 0x0A	; 10
     f4c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     f50:	09 c0       	rjmp	.+18     	; 0xf64 <__stack+0x665>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     f52:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 10;
						else if (kursor > 13)
     f54:	8e 30       	cpi	r24, 0x0E	; 14
     f56:	1c f4       	brge	.+6      	; 0xf5e <__stack+0x65f>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     f58:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <__stack+0x665>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 10;
						else if (kursor > 13)
						kursor = 13;
     f5e:	8d e0       	ldi	r24, 0x0D	; 13
     f60:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
						
						lcd1602_goto_xy(kursor,1);
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     f6a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     f6e:	e9 c0       	rjmp	.+466    	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     f76:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     f7a:	88 23       	and	r24, r24
     f7c:	c9 f0       	breq	.+50     	; 0xfb0 <__stack+0x6b1>
					{
						kursor -= 3;
     f7e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
     f82:	96 ef       	ldi	r25, 0xF6	; 246
     f84:	98 0f       	add	r25, r24
     f86:	93 30       	cpi	r25, 0x03	; 3
     f88:	20 f4       	brcc	.+8      	; 0xf92 <__stack+0x693>
						kursor = 6;
     f8a:	86 e0       	ldi	r24, 0x06	; 6
     f8c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     f90:	09 c0       	rjmp	.+18     	; 0xfa4 <__stack+0x6a5>
						
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     f92:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 6;
						else if(kursor < 3)
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	1c f0       	brlt	.+6      	; 0xf9e <__stack+0x69f>
						
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     f98:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
     f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <__stack+0x6a5>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 6;
						else if(kursor < 3)
						kursor = 3;
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <kursor>
						
						lcd1602_goto_xy(kursor,1);
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     faa:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     fae:	c9 c0       	rjmp	.+402    	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     fb0:	62 e0       	ldi	r22, 0x02	; 2
     fb2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
     fb6:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
     fba:	88 23       	and	r24, r24
     fbc:	99 f1       	breq	.+102    	; 0x1024 <__stack+0x725>
					{
						if (kursor == 3)												//podesava SATE_ON ++
     fbe:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	51 f4       	brne	.+20     	; 0xfda <__stack+0x6db>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	45 ea       	ldi	r20, 0xA5	; 165
     fca:	51 e0       	ldi	r21, 0x01	; 1
     fcc:	62 ed       	ldi	r22, 0xD2	; 210
     fce:	71 e0       	ldi	r23, 0x01	; 1
     fd0:	8a ef       	ldi	r24, 0xFA	; 250
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     fd8:	b4 c0       	rjmp	.+360    	; 0x1142 <__stack+0x843>
						else if (kursor == 6)											//podesava MINUTE_ON ++
     fda:	86 30       	cpi	r24, 0x06	; 6
     fdc:	51 f4       	brne	.+20     	; 0xff2 <__stack+0x6f3>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	45 ea       	ldi	r20, 0xA5	; 165
     fe2:	51 e0       	ldi	r21, 0x01	; 1
     fe4:	62 ed       	ldi	r22, 0xD2	; 210
     fe6:	71 e0       	ldi	r23, 0x01	; 1
     fe8:	89 ef       	ldi	r24, 0xF9	; 249
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     ff0:	a8 c0       	rjmp	.+336    	; 0x1142 <__stack+0x843>
						else if (kursor == 10)											//podesava SATE_OFF ++
     ff2:	8a 30       	cpi	r24, 0x0A	; 10
     ff4:	51 f4       	brne	.+20     	; 0x100a <__stack+0x70b>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	45 ea       	ldi	r20, 0xA5	; 165
     ffa:	51 e0       	ldi	r21, 0x01	; 1
     ffc:	62 ed       	ldi	r22, 0xD2	; 210
     ffe:	71 e0       	ldi	r23, 0x01	; 1
    1000:	88 ee       	ldi	r24, 0xE8	; 232
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
    1008:	9c c0       	rjmp	.+312    	; 0x1142 <__stack+0x843>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
    100a:	8d 30       	cpi	r24, 0x0D	; 13
    100c:	09 f0       	breq	.+2      	; 0x1010 <__stack+0x711>
    100e:	99 c0       	rjmp	.+306    	; 0x1142 <__stack+0x843>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	45 ea       	ldi	r20, 0xA5	; 165
    1014:	51 e0       	ldi	r21, 0x01	; 1
    1016:	62 ed       	ldi	r22, 0xD2	; 210
    1018:	71 e0       	ldi	r23, 0x01	; 1
    101a:	87 ee       	ldi	r24, 0xE7	; 231
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
    1022:	8f c0       	rjmp	.+286    	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    1024:	63 e0       	ldi	r22, 0x03	; 3
    1026:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
    102a:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
    102e:	88 23       	and	r24, r24
    1030:	99 f1       	breq	.+102    	; 0x1098 <__stack+0x799>
					{
						if (kursor == 3)												//podesava SATE_ON --
    1032:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <kursor>
    1036:	83 30       	cpi	r24, 0x03	; 3
    1038:	51 f4       	brne	.+20     	; 0x104e <__stack+0x74f>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
    103a:	21 e0       	ldi	r18, 0x01	; 1
    103c:	45 ea       	ldi	r20, 0xA5	; 165
    103e:	51 e0       	ldi	r21, 0x01	; 1
    1040:	62 ed       	ldi	r22, 0xD2	; 210
    1042:	71 e0       	ldi	r23, 0x01	; 1
    1044:	8a ef       	ldi	r24, 0xFA	; 250
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
    104c:	7a c0       	rjmp	.+244    	; 0x1142 <__stack+0x843>
						else if (kursor == 6)											//podesava MINUTE_ON --
    104e:	86 30       	cpi	r24, 0x06	; 6
    1050:	51 f4       	brne	.+20     	; 0x1066 <__stack+0x767>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
    1052:	21 e0       	ldi	r18, 0x01	; 1
    1054:	45 ea       	ldi	r20, 0xA5	; 165
    1056:	51 e0       	ldi	r21, 0x01	; 1
    1058:	62 ed       	ldi	r22, 0xD2	; 210
    105a:	71 e0       	ldi	r23, 0x01	; 1
    105c:	89 ef       	ldi	r24, 0xF9	; 249
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
    1064:	6e c0       	rjmp	.+220    	; 0x1142 <__stack+0x843>
						else if (kursor == 10)											//podesava SATE_OFF --
    1066:	8a 30       	cpi	r24, 0x0A	; 10
    1068:	51 f4       	brne	.+20     	; 0x107e <__stack+0x77f>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
    106a:	21 e0       	ldi	r18, 0x01	; 1
    106c:	45 ea       	ldi	r20, 0xA5	; 165
    106e:	51 e0       	ldi	r21, 0x01	; 1
    1070:	62 ed       	ldi	r22, 0xD2	; 210
    1072:	71 e0       	ldi	r23, 0x01	; 1
    1074:	88 ee       	ldi	r24, 0xE8	; 232
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
    107c:	62 c0       	rjmp	.+196    	; 0x1142 <__stack+0x843>
						else if (kursor == 13)											//podesava MINUTE_OFF --
    107e:	8d 30       	cpi	r24, 0x0D	; 13
    1080:	09 f0       	breq	.+2      	; 0x1084 <__stack+0x785>
    1082:	5f c0       	rjmp	.+190    	; 0x1142 <__stack+0x843>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
    1084:	21 e0       	ldi	r18, 0x01	; 1
    1086:	45 ea       	ldi	r20, 0xA5	; 165
    1088:	51 e0       	ldi	r21, 0x01	; 1
    108a:	62 ed       	ldi	r22, 0xD2	; 210
    108c:	71 e0       	ldi	r23, 0x01	; 1
    108e:	87 ee       	ldi	r24, 0xE7	; 231
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
    1096:	55 c0       	rjmp	.+170    	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    1098:	65 e0       	ldi	r22, 0x05	; 5
    109a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
    109e:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
    10a2:	88 23       	and	r24, r24
    10a4:	b1 f1       	breq	.+108    	; 0x1112 <__stack+0x813>
					{
						jednokratno_paljenje = snap_vreme_paljenja;	//konacno upisem
    10a6:	89 e0       	ldi	r24, 0x09	; 9
    10a8:	e8 ef       	ldi	r30, 0xF8	; 248
    10aa:	f1 e0       	ldi	r31, 0x01	; 1
    10ac:	a0 ec       	ldi	r26, 0xC0	; 192
    10ae:	b1 e0       	ldi	r27, 0x01	; 1
    10b0:	01 90       	ld	r0, Z+
    10b2:	0d 92       	st	X+, r0
    10b4:	8a 95       	dec	r24
    10b6:	e1 f7       	brne	.-8      	; 0x10b0 <__stack+0x7b1>
						jednokratno_gasenje = snap_vreme_gasenja;
    10b8:	89 e0       	ldi	r24, 0x09	; 9
    10ba:	e6 ee       	ldi	r30, 0xE6	; 230
    10bc:	f1 e0       	ldi	r31, 0x01	; 1
    10be:	a7 eb       	ldi	r26, 0xB7	; 183
    10c0:	b1 e0       	ldi	r27, 0x01	; 1
    10c2:	01 90       	ld	r0, Z+
    10c4:	0d 92       	st	X+, r0
    10c6:	8a 95       	dec	r24
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <__stack+0x7c3>
						
						/* upis u eeprom */
						EEPROM_write(JEDNOK_UPALI_HR_ADR, jednokratno_paljenje.hr);
    10ca:	c0 ec       	ldi	r28, 0xC0	; 192
    10cc:	d1 e0       	ldi	r29, 0x01	; 1
    10ce:	6a 81       	ldd	r22, Y+2	; 0x02
    10d0:	84 e0       	ldi	r24, 0x04	; 4
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(JEDNOK_UPALI_MIN_ADR, jednokratno_paljenje.min);
    10d8:	69 81       	ldd	r22, Y+1	; 0x01
    10da:	85 e0       	ldi	r24, 0x05	; 5
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_HR_ADR, jednokratno_gasenje.hr);
    10e2:	c7 eb       	ldi	r28, 0xB7	; 183
    10e4:	d1 e0       	ldi	r29, 0x01	; 1
    10e6:	6a 81       	ldd	r22, Y+2	; 0x02
    10e8:	86 e0       	ldi	r24, 0x06	; 6
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_MIN_ADR, jednokratno_gasenje.min);
    10f0:	69 81       	ldd	r22, Y+1	; 0x01
    10f2:	87 e0       	ldi	r24, 0x07	; 7
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    1100:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <STATE>
    1110:	18 c0       	rjmp	.+48     	; 0x1142 <__stack+0x843>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1112:	64 e0       	ldi	r22, 0x04	; 4
    1114:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tasteri>
    1118:	0e 94 9f 09 	call	0x133e	; 0x133e <ocitaj_jedan_taster>
    111c:	88 23       	and	r24, r24
    111e:	89 f0       	breq	.+34     	; 0x1142 <__stack+0x843>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    1126:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <STATE>
		break;
		
		default: {}
		
	}
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <__stack+0x843>
						}
					}
					
					lcd1602_goto_xy(1,1);
					pom = (pom==KURSOR_MENU1_MAX) ? -1 : pom;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
					lcd1602_send_string(menu1_txt[pom + 1]);
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
    1140:	97 cb       	rjmp	.-2258   	; 0x870 <fsm_lcd_menu+0x1a4>
		break;
		
		default: {}
		
	}
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	0f 91       	pop	r16
    1148:	08 95       	ret

0000114a <main>:
{
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			
    114a:	0e 94 c7 0a 	call	0x158e	; 0x158e <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
    114e:	0e 94 c7 00 	call	0x18e	; 0x18e <i2c_init>
	lcd1602_init();
    1152:	0e 94 a2 02 	call	0x544	; 0x544 <lcd1602_init>
	ADC_init();				
    1156:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda 500k
    115a:	60 e2       	ldi	r22, 0x20	; 32
    115c:	71 ea       	ldi	r23, 0xA1	; 161
    115e:	87 e0       	ldi	r24, 0x07	; 7
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 4b 0b 	call	0x1696	; 0x1696 <uart_init>
	DS3231_init();			//RTC init
    1166:	0e 94 4d 0a 	call	0x149a	; 0x149a <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
    116a:	0e 94 4a 09 	call	0x1294	; 0x1294 <pc_init>
	tasteri_init();			//NAPOMENA: PD2-7 INPUT, INT_PULLUP=ON
    116e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
    1172:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;		//pinB 4 OUTPUT 
    1174:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
    1176:	78 94       	sei
	//EEPROM_write(UPALI_MIN_ADR, 25);
	//EEPROM_write(UGASI_HR_ADR, 5);
	//EEPROM_write(UGASI_MIN_ADR, 45);
	
	/* citanje on-off vremena iz eeproma pri inicijalizaciji */
	vreme_paljenja.hr = EEPROM_read(UPALI_HR_ADR);
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    1180:	cf ee       	ldi	r28, 0xEF	; 239
    1182:	d1 e0       	ldi	r29, 0x01	; 1
    1184:	8a 83       	std	Y+2, r24	; 0x02
	vreme_paljenja.min = EEPROM_read(UPALI_MIN_ADR);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    118e:	89 83       	std	Y+1, r24	; 0x01
	vreme_gasenja.hr = EEPROM_read(UGASI_HR_ADR);
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    1198:	c1 e0       	ldi	r28, 0x01	; 1
    119a:	d2 e0       	ldi	r29, 0x02	; 2
    119c:	8a 83       	std	Y+2, r24	; 0x02
	vreme_gasenja.min = EEPROM_read(UGASI_MIN_ADR);
    119e:	83 e0       	ldi	r24, 0x03	; 3
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    11a6:	89 83       	std	Y+1, r24	; 0x01
	
	jednokratno_paljenje.hr = EEPROM_read(JEDNOK_UPALI_HR_ADR);
    11a8:	84 e0       	ldi	r24, 0x04	; 4
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    11b0:	c0 ec       	ldi	r28, 0xC0	; 192
    11b2:	d1 e0       	ldi	r29, 0x01	; 1
    11b4:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_paljenje.min = EEPROM_read(JEDNOK_UPALI_MIN_ADR);
    11b6:	85 e0       	ldi	r24, 0x05	; 5
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    11be:	89 83       	std	Y+1, r24	; 0x01
	jednokratno_gasenje.hr = EEPROM_read(JEDNOK_UGASI_HR_ADR);
    11c0:	86 e0       	ldi	r24, 0x06	; 6
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    11c8:	c7 eb       	ldi	r28, 0xB7	; 183
    11ca:	d1 e0       	ldi	r29, 0x01	; 1
    11cc:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_gasenje.min = EEPROM_read(JEDNOK_UGASI_MIN_ADR);
    11ce:	87 e0       	ldi	r24, 0x07	; 7
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
    11d6:	89 83       	std	Y+1, r24	; 0x01
	
	snap_vreme_paljenja = vreme_paljenja;
    11d8:	89 e0       	ldi	r24, 0x09	; 9
    11da:	ef ee       	ldi	r30, 0xEF	; 239
    11dc:	f1 e0       	ldi	r31, 0x01	; 1
    11de:	a8 ef       	ldi	r26, 0xF8	; 248
    11e0:	b1 e0       	ldi	r27, 0x01	; 1
    11e2:	01 90       	ld	r0, Z+
    11e4:	0d 92       	st	X+, r0
    11e6:	8a 95       	dec	r24
    11e8:	e1 f7       	brne	.-8      	; 0x11e2 <main+0x98>
	snap_vreme_gasenja = vreme_gasenja;
    11ea:	89 e0       	ldi	r24, 0x09	; 9
    11ec:	e1 e0       	ldi	r30, 0x01	; 1
    11ee:	f2 e0       	ldi	r31, 0x02	; 2
    11f0:	a6 ee       	ldi	r26, 0xE6	; 230
    11f2:	b1 e0       	ldi	r27, 0x01	; 1
    11f4:	01 90       	ld	r0, Z+
    11f6:	0d 92       	st	X+, r0
    11f8:	8a 95       	dec	r24
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <main+0xaa>
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    11fc:	c1 e0       	ldi	r28, 0x01	; 1
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
    11fe:	0e 94 76 09 	call	0x12ec	; 0x12ec <ocitaj_tastere>
    1202:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <tasteri>
		
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
    1206:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <flag_pc_int_pomocni>
    120a:	88 23       	and	r24, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <main+0xc6>
    120e:	3f c0       	rjmp	.+126    	; 0x128e <main+0x144>
		{
			flag_pc_int_pomocni = 0;
    1210:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
    1214:	00 e0       	ldi	r16, 0x00	; 0
    1216:	22 e1       	ldi	r18, 0x12	; 18
    1218:	32 e0       	ldi	r19, 0x02	; 2
    121a:	4a e0       	ldi	r20, 0x0A	; 10
    121c:	52 e0       	ldi	r21, 0x02	; 2
    121e:	6b e0       	ldi	r22, 0x0B	; 11
    1220:	72 e0       	ldi	r23, 0x02	; 2
    1222:	8c e0       	ldi	r24, 0x0C	; 12
    1224:	92 e0       	ldi	r25, 0x02	; 2
    1226:	0e 94 56 0a 	call	0x14ac	; 0x14ac <getTime>
			//uart_send_str(bafer);
			//uart_send_str("\n"); //novi red
			
			
			/* JEDNOKRATNI PERIOD PALJENJA */						
			if (jednok_on_off==1)
    122a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <jednok_on_off>
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	d1 f4       	brne	.+52     	; 0x1266 <main+0x11c>
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
    1232:	4a e0       	ldi	r20, 0x0A	; 10
    1234:	52 e0       	ldi	r21, 0x02	; 2
    1236:	67 eb       	ldi	r22, 0xB7	; 183
    1238:	71 e0       	ldi	r23, 0x01	; 1
    123a:	80 ec       	ldi	r24, 0xC0	; 192
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	0e 94 2a 03 	call	0x654	; 0x654 <period_paljenja>
    1242:	88 23       	and	r24, r24
    1244:	29 f0       	breq	.+10     	; 0x1250 <main+0x106>
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    1246:	c0 93 a7 01 	sts	0x01A7, r28	; 0x8001a7 <ukljuceno>
					jednok_se_desio = 1;
    124a:	c0 93 a3 01 	sts	0x01A3, r28	; 0x8001a3 <jednok_se_desio>
    124e:	0d c0       	rjmp	.+26     	; 0x126a <main+0x120>
				}
				else if(jednok_se_desio)												//jednok. setovan, ALI ISTEKAO
    1250:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <jednok_se_desio>
    1254:	88 23       	and	r24, r24
    1256:	49 f0       	breq	.+18     	; 0x126a <main+0x120>
				{																		//proverava se tek kad period paljenja vraca 0, tj kada gornji IF nije ispunjen
					ukljuceno = 0;
    1258:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <ukljuceno>
					jednok_on_off = 0;		//resetujem flag		
    125c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <jednok_on_off>
					jednok_se_desio = 0;	//resetujem i ovaj flag. Da nema ovoga Jednokratno paljenje nikada ne bi startovalo ako tek treba da se desi
    1260:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <jednok_se_desio>
    1264:	02 c0       	rjmp	.+4      	; 0x126a <main+0x120>
				}
			}
			else
				ukljuceno = 0;
    1266:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <ukljuceno>
			
			/* GLAVNI PERIOD; paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno |= period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);	//ILI veza glavnog i jednok. perioda
    126a:	4a e0       	ldi	r20, 0x0A	; 10
    126c:	52 e0       	ldi	r21, 0x02	; 2
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	72 e0       	ldi	r23, 0x02	; 2
    1272:	8f ee       	ldi	r24, 0xEF	; 239
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0e 94 2a 03 	call	0x654	; 0x654 <period_paljenja>
    127a:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <ukljuceno>
    127e:	89 2b       	or	r24, r25
    1280:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <ukljuceno>
			
			if (ukljuceno)
    1284:	88 23       	and	r24, r24
    1286:	11 f0       	breq	.+4      	; 0x128c <main+0x142>
				PORTB |= 1<<PINB5;   //high
    1288:	2d 9a       	sbi	0x05, 5	; 5
    128a:	01 c0       	rjmp	.+2      	; 0x128e <main+0x144>
			else
				PORTB &= ~(1<<PINB5);	//low
    128c:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
    128e:	0e 94 66 03 	call	0x6cc	; 0x6cc <fsm_lcd_menu>
		

		
    }
    1292:	b5 cf       	rjmp	.-150    	; 0x11fe <main+0xb4>

00001294 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
    1294:	e8 e6       	ldi	r30, 0x68	; 104
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	82 60       	ori	r24, 0x02	; 2
    129c:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
    129e:	ec e6       	ldi	r30, 0x6C	; 108
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	88 60       	ori	r24, 0x08	; 8
    12a6:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
    12a8:	3b 98       	cbi	0x07, 3	; 7
    12aa:	08 95       	ret

000012ac <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
    12b8:	33 9b       	sbis	0x06, 3	; 6
    12ba:	05 c0       	rjmp	.+10     	; 0x12c6 <__vector_4+0x1a>
	{
		flag_pc_int = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <flag_pc_int>
		flag_pc_int_pomocni = 1;
    12c2:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <flag_pc_int_pomocni>
	}
		
    12c6:	8f 91       	pop	r24
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <tasteri_init>:
extern const char *byte_to_binary(int x);

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
    12d2:	8a b1       	in	r24, 0x0a	; 10
    12d4:	8f 70       	andi	r24, 0x0F	; 15
    12d6:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
    12d8:	84 b1       	in	r24, 0x04	; 4
    12da:	8c 7f       	andi	r24, 0xFC	; 252
    12dc:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
    12de:	8b b1       	in	r24, 0x0b	; 11
    12e0:	80 6f       	ori	r24, 0xF0	; 240
    12e2:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
    12e4:	85 b1       	in	r24, 0x05	; 5
    12e6:	83 60       	ori	r24, 0x03	; 3
    12e8:	85 b9       	out	0x05, r24	; 5
    12ea:	08 95       	ret

000012ec <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
    12ec:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <flag_prekid_debounce_time_half>
    12f0:	88 23       	and	r24, r24
    12f2:	69 f0       	breq	.+26     	; 0x130e <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
    12f4:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
    12f8:	93 b1       	in	r25, 0x03	; 3
    12fa:	29 b1       	in	r18, 0x09	; 9
    12fc:	30 e1       	ldi	r19, 0x10	; 16
    12fe:	93 9f       	mul	r25, r19
    1300:	c0 01       	movw	r24, r0
    1302:	11 24       	eor	r1, r1
    1304:	92 2f       	mov	r25, r18
    1306:	92 95       	swap	r25
    1308:	9f 70       	andi	r25, 0x0F	; 15
    130a:	89 2b       	or	r24, r25
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
    130e:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
    1310:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <flag_prekid_debounce_time>
    1314:	99 23       	and	r25, r25
    1316:	81 f0       	breq	.+32     	; 0x1338 <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
    1318:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
    131c:	93 b1       	in	r25, 0x03	; 3
    131e:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
    1320:	50 e1       	ldi	r21, 0x10	; 16
    1322:	95 9f       	mul	r25, r21
    1324:	90 01       	movw	r18, r0
    1326:	11 24       	eor	r1, r1
    1328:	94 2f       	mov	r25, r20
    132a:	92 95       	swap	r25
    132c:	9f 70       	andi	r25, 0x0F	; 15
    132e:	29 2b       	or	r18, r25
    1330:	82 13       	cpse	r24, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
    1334:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <tasteri_reg.1953>
		
	}
	
	return tasteri_reg;
}
    1338:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <tasteri_reg.1953>
    133c:	08 95       	ret

0000133e <ocitaj_jedan_taster>:
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	static uint8_t delay_enable = 1;
	uint8_t pom;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	20 95       	com	r18
    1344:	30 95       	com	r19
    1346:	e6 2f       	mov	r30, r22
    1348:	a9 01       	movw	r20, r18
    134a:	06 2e       	mov	r0, r22
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <ocitaj_jedan_taster+0x14>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <ocitaj_jedan_taster+0x10>
    1356:	40 ff       	sbrs	r20, 0
    1358:	17 c0       	rjmp	.+46     	; 0x1388 <ocitaj_jedan_taster+0x4a>
    135a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <flag_stisnut.1962>
    135e:	91 11       	cpse	r25, r1
    1360:	13 c0       	rjmp	.+38     	; 0x1388 <ocitaj_jedan_taster+0x4a>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <flag_stisnut.1962>
		temp_tast = button;		//zapamtim koji je taster stisnut
    1368:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <temp_tast.1961>
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    136c:	80 95       	com	r24
    136e:	41 e0       	ldi	r20, 0x01	; 1
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	06 2e       	mov	r0, r22
    1374:	02 c0       	rjmp	.+4      	; 0x137a <ocitaj_jedan_taster+0x3c>
    1376:	44 0f       	add	r20, r20
    1378:	55 1f       	adc	r21, r21
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <ocitaj_jedan_taster+0x38>
    137e:	84 23       	and	r24, r20
    1380:	09 f0       	breq	.+2      	; 0x1384 <ocitaj_jedan_taster+0x46>
    1382:	45 c0       	rjmp	.+138    	; 0x140e <ocitaj_jedan_taster+0xd0>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	08 95       	ret
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
    1388:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <temp_tast.1961>
    138c:	e9 2f       	mov	r30, r25
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    138e:	80 95       	com	r24
    1390:	41 e0       	ldi	r20, 0x01	; 1
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	09 2e       	mov	r0, r25
    1396:	02 c0       	rjmp	.+4      	; 0x139c <ocitaj_jedan_taster+0x5e>
    1398:	44 0f       	add	r20, r20
    139a:	55 1f       	adc	r21, r21
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <ocitaj_jedan_taster+0x5a>
    13a0:	84 23       	and	r24, r20
    13a2:	19 f1       	breq	.+70     	; 0x13ea <ocitaj_jedan_taster+0xac>
    13a4:	8e ef       	ldi	r24, 0xFE	; 254
    13a6:	89 0f       	add	r24, r25
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	08 f5       	brcc	.+66     	; 0x13ee <ocitaj_jedan_taster+0xb0>
    13ac:	69 13       	cpse	r22, r25
    13ae:	21 c0       	rjmp	.+66     	; 0x13f2 <ocitaj_jedan_taster+0xb4>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <ocitaj_jedan_taster+0x78>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
		   ovo radim da bi bilo moguce brze menjati sate ako je taster ostao stisnut, da ne bi morao 30 puta stiskati i pustati taster */
		//startuj "delay" tajmer, ali samo prvi put
		//ako je delay istekao periodicno togluj promenljivu "stisnut", jer ce to napraviti efekat brzog stiskanja
		//kada je taster otpusten opet dozvoli startovanje "delay" tajmera
		
		if (delay_enable == 1)
    13b6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <delay_enable.1963>
    13ba:	91 30       	cpi	r25, 0x01	; 1
    13bc:	31 f4       	brne	.+12     	; 0x13ca <ocitaj_jedan_taster+0x8c>
		{
			delay_enable = 0;	//spreci ponovni ulazak
    13be:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <delay_enable.1963>
			delay_timer = 0;	//start, timer ISR ga uvecava
    13c2:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <delay_timer+0x1>
    13c6:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <delay_timer>
		}
		if (delay_timer >= 400)	//ako je delay veci od 400ms togluj "stisnut"
    13ca:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <delay_timer>
    13ce:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <delay_timer+0x1>
    13d2:	20 39       	cpi	r18, 0x90	; 144
    13d4:	31 40       	sbci	r19, 0x01	; 1
    13d6:	00 f1       	brcs	.+64     	; 0x1418 <ocitaj_jedan_taster+0xda>
		{
			if(flag_prekid_50ms)
    13d8:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <flag_prekid_50ms>
    13dc:	99 23       	and	r25, r25
    13de:	e1 f0       	breq	.+56     	; 0x1418 <ocitaj_jedan_taster+0xda>
			{
				flag_prekid_50ms = 0; //reset flag-a
    13e0:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <flag_prekid_50ms>
				stisnut ^= 0b1;	//toggle
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	89 27       	eor	r24, r25
    13e8:	08 95       	ret
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <ocitaj_jedan_taster+0xb6>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <ocitaj_jedan_taster+0xb6>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
			}
			
				
		}		
	}
	else if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <ocitaj_jedan_taster+0xbc>
    13f6:	35 95       	asr	r19
    13f8:	27 95       	ror	r18
    13fa:	ea 95       	dec	r30
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <ocitaj_jedan_taster+0xb8>
    13fe:	20 fd       	sbrc	r18, 0
    1400:	0b c0       	rjmp	.+22     	; 0x1418 <ocitaj_jedan_taster+0xda>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
    1402:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <flag_stisnut.1962>
		delay_enable = 1;	//dozvoli ponovno startovanje "delay" tajmera ako je taster otpusten
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <delay_enable.1963>
	sprintf(buff, "flag_stis:%d  ", flag_stisnut);
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    140c:	08 95       	ret
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    140e:	62 50       	subi	r22, 0x02	; 2
    1410:	62 30       	cpi	r22, 0x02	; 2
    1412:	80 f2       	brcs	.-96     	; 0x13b4 <ocitaj_jedan_taster+0x76>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	ee cf       	rjmp	.-36     	; 0x13f4 <ocitaj_jedan_taster+0xb6>
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    1418:	08 95       	ret

0000141a <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
    141a:	98 2f       	mov	r25, r24
    141c:	92 95       	swap	r25
    141e:	9f 70       	andi	r25, 0x0F	; 15
    1420:	99 0f       	add	r25, r25
    1422:	29 2f       	mov	r18, r25
    1424:	22 0f       	add	r18, r18
    1426:	22 0f       	add	r18, r18
    1428:	92 0f       	add	r25, r18
    142a:	8f 70       	andi	r24, 0x0F	; 15
    142c:	89 0f       	add	r24, r25
    142e:	08 95       	ret

00001430 <decimal_to_bcd>:
    1430:	9d ec       	ldi	r25, 0xCD	; 205
    1432:	89 9f       	mul	r24, r25
    1434:	91 2d       	mov	r25, r1
    1436:	11 24       	eor	r1, r1
    1438:	96 95       	lsr	r25
    143a:	96 95       	lsr	r25
    143c:	96 95       	lsr	r25
    143e:	20 e1       	ldi	r18, 0x10	; 16
    1440:	92 9f       	mul	r25, r18
    1442:	a0 01       	movw	r20, r0
    1444:	11 24       	eor	r1, r1
    1446:	99 0f       	add	r25, r25
    1448:	29 2f       	mov	r18, r25
    144a:	22 0f       	add	r18, r18
    144c:	22 0f       	add	r18, r18
    144e:	92 0f       	add	r25, r18
    1450:	89 1b       	sub	r24, r25
    1452:	8f 70       	andi	r24, 0x0F	; 15
    1454:	84 2b       	or	r24, r20
    1456:	08 95       	ret

00001458 <DS3231_Read>:
    1458:	cf 93       	push	r28
    145a:	c8 2f       	mov	r28, r24
    145c:	80 ed       	ldi	r24, 0xD0	; 208
    145e:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
    1462:	8c 2f       	mov	r24, r28
    1464:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
    1468:	81 ed       	ldi	r24, 0xD1	; 209
    146a:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
    146e:	0e 94 10 01 	call	0x220	; 0x220 <i2c_readNak>
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <DS3231_Write>:
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	d8 2f       	mov	r29, r24
    147c:	c6 2f       	mov	r28, r22
    147e:	80 ed       	ldi	r24, 0xD0	; 208
    1480:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
    1484:	8d 2f       	mov	r24, r29
    1486:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
    148a:	8c 2f       	mov	r24, r28
    148c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
    1490:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2c_stop>
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <DS3231_init>:
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	8e e0       	ldi	r24, 0x0E	; 14
    149e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DS3231_Write>
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	8f e0       	ldi	r24, 0x0F	; 15
    14a6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DS3231_Write>
    14aa:	08 95       	ret

000014ac <getTime>:
    14ac:	af 92       	push	r10
    14ae:	bf 92       	push	r11
    14b0:	cf 92       	push	r12
    14b2:	df 92       	push	r13
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	ec 01       	movw	r28, r24
    14c0:	7b 01       	movw	r14, r22
    14c2:	6a 01       	movw	r12, r20
    14c4:	59 01       	movw	r10, r18
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DS3231_Read>
    14cc:	0e 94 0d 0a 	call	0x141a	; 0x141a <bcd_to_decimal>
    14d0:	f6 01       	movw	r30, r12
    14d2:	80 83       	st	Z, r24
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DS3231_Read>
    14da:	0e 94 0d 0a 	call	0x141a	; 0x141a <bcd_to_decimal>
    14de:	f7 01       	movw	r30, r14
    14e0:	80 83       	st	Z, r24
    14e2:	01 30       	cpi	r16, 0x01	; 1
    14e4:	81 f4       	brne	.+32     	; 0x1506 <getTime+0x5a>
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DS3231_Read>
    14ec:	85 fb       	bst	r24, 5
    14ee:	88 27       	eor	r24, r24
    14f0:	80 f9       	bld	r24, 0
    14f2:	f5 01       	movw	r30, r10
    14f4:	80 83       	st	Z, r24
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DS3231_Read>
    14fc:	8f 71       	andi	r24, 0x1F	; 31
    14fe:	0e 94 0d 0a 	call	0x141a	; 0x141a <bcd_to_decimal>
    1502:	88 83       	st	Y, r24
    1504:	07 c0       	rjmp	.+14     	; 0x1514 <getTime+0x68>
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DS3231_Read>
    150c:	8f 73       	andi	r24, 0x3F	; 63
    150e:	0e 94 0d 0a 	call	0x141a	; 0x141a <bcd_to_decimal>
    1512:	88 83       	st	Y, r24
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	cf 90       	pop	r12
    1522:	bf 90       	pop	r11
    1524:	af 90       	pop	r10
    1526:	08 95       	ret

00001528 <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	d8 2f       	mov	r29, r24
    1532:	c6 2f       	mov	r28, r22
    1534:	84 2f       	mov	r24, r20
    1536:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
    1538:	0e 94 18 0a 	call	0x1430	; 0x1430 <decimal_to_bcd>
    153c:	68 2f       	mov	r22, r24
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
    1544:	8c 2f       	mov	r24, r28
    1546:	0e 94 18 0a 	call	0x1430	; 0x1430 <decimal_to_bcd>
    154a:	68 2f       	mov	r22, r24
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DS3231_Write>
	
	switch(hour_format)
    1552:	01 30       	cpi	r16, 0x01	; 1
    1554:	79 f4       	brne	.+30     	; 0x1574 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    1556:	11 30       	cpi	r17, 0x01	; 1
    1558:	11 f0       	breq	.+4      	; 0x155e <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    155a:	c0 e4       	ldi	r28, 0x40	; 64
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    155e:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    1560:	8d 2f       	mov	r24, r29
    1562:	0e 94 18 0a 	call	0x1430	; 0x1430 <decimal_to_bcd>
    1566:	8f 71       	andi	r24, 0x1F	; 31
    1568:	68 2f       	mov	r22, r24
    156a:	6c 2b       	or	r22, r28
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DS3231_Write>
			break;
    1572:	08 c0       	rjmp	.+16     	; 0x1584 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    1574:	8d 2f       	mov	r24, r29
    1576:	0e 94 18 0a 	call	0x1430	; 0x1430 <decimal_to_bcd>
    157a:	68 2f       	mov	r22, r24
    157c:	6f 73       	andi	r22, 0x3F	; 63
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DS3231_Write>
			break;
		}
	}
}
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	08 95       	ret

0000158e <tajmer0_init>:

volatile uint16_t delay_timer = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    1592:	93 e0       	ldi	r25, 0x03	; 3
    1594:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    1596:	99 ef       	ldi	r25, 0xF9	; 249
    1598:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    159a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    159e:	08 95       	ret

000015a0 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	8f 93       	push	r24
    15ac:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    15b4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <brojac_prekida_tajmera0>
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    15be:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <brojac_prekida_tajmera0_debounce_half>
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    15c8:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <brojac_prekida_tajmera0_debounce>
    15cc:	8f 5f       	subi	r24, 0xFF	; 255
    15ce:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <brojac_prekida_tajmera0_debounce>
	delay_timer++;		//overflow posle 65.5 sekundi, ali koga briga ne remeti normalan rad
    15d2:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <delay_timer>
    15d6:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <delay_timer+0x1>
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <delay_timer+0x1>
    15e0:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <delay_timer>
		
	if(brojac_prekida_tajmera0 == 100)	//1ms * 50 = 50ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    15e4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <brojac_prekida_tajmera0>
    15e8:	84 36       	cpi	r24, 0x64	; 100
    15ea:	29 f4       	brne	.+10     	; 0x15f6 <__vector_14+0x56>
	{
		brojac_prekida_tajmera0 = 0;
    15ec:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <brojac_prekida_tajmera0>
		flag_prekid_50ms = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <flag_prekid_50ms>
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    15f6:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <brojac_prekida_tajmera0_debounce_half>
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	29 f4       	brne	.+10     	; 0x1608 <__vector_14+0x68>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    15fe:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <flag_prekid_debounce_time_half>
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    1608:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <brojac_prekida_tajmera0_debounce>
    160c:	86 30       	cpi	r24, 0x06	; 6
    160e:	29 f4       	brne	.+10     	; 0x161a <__vector_14+0x7a>
	{
		brojac_prekida_tajmera0_debounce = 0;
    1610:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <flag_prekid_debounce_time>
	}
	
    161a:	9f 91       	pop	r25
    161c:	8f 91       	pop	r24
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	0f 90       	pop	r0
    1624:	1f 90       	pop	r1
    1626:	18 95       	reti

00001628 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    1628:	1f 92       	push	r1
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
	poslato=0;
    1632:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <poslato>
}
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <__vector_18>:

ISR(USART_RX_vect)
{
    1640:	1f 92       	push	r1
    1642:	0f 92       	push	r0
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	0f 92       	push	r0
    1648:	11 24       	eor	r1, r1
    164a:	8f 93       	push	r24
    164c:	ef 93       	push	r30
    164e:	ff 93       	push	r31
	input_char=UDR0;
    1650:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1654:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    1658:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <buff_size>
    165c:	88 30       	cpi	r24, 0x08	; 8
    165e:	98 f4       	brcc	.+38     	; 0x1686 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    1660:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <buff_size>
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <input_char>
    166a:	eb 5e       	subi	r30, 0xEB	; 235
    166c:	fd 4f       	sbci	r31, 0xFD	; 253
    166e:	80 83       	st	Z, r24
		buff_size++;
    1670:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <buff_size>
    1674:	8f 5f       	subi	r24, 0xFF	; 255
    1676:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <buff_size>
		input_buffer[buff_size]='\0';
    167a:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <buff_size>
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	eb 5e       	subi	r30, 0xEB	; 235
    1682:	fd 4f       	sbci	r31, 0xFD	; 253
    1684:	10 82       	st	Z, r1
	}
}
    1686:	ff 91       	pop	r31
    1688:	ef 91       	pop	r30
    168a:	8f 91       	pop	r24
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	0f 90       	pop	r0
    1692:	1f 90       	pop	r1
    1694:	18 95       	reti

00001696 <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    1696:	22 e0       	ldi	r18, 0x02	; 2
    1698:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    169c:	28 ed       	ldi	r18, 0xD8	; 216
    169e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    16a2:	26 e0       	ldi	r18, 0x06	; 6
    16a4:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    16a8:	61 15       	cp	r22, r1
    16aa:	2c e2       	ldi	r18, 0x2C	; 44
    16ac:	72 07       	cpc	r23, r18
    16ae:	21 e0       	ldi	r18, 0x01	; 1
    16b0:	82 07       	cpc	r24, r18
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <uart_init+0x22>
    16b6:	51 c0       	rjmp	.+162    	; 0x175a <uart_init+0xc4>
    16b8:	c8 f4       	brcc	.+50     	; 0x16ec <uart_init+0x56>
    16ba:	60 34       	cpi	r22, 0x40	; 64
    16bc:	28 e3       	ldi	r18, 0x38	; 56
    16be:	72 07       	cpc	r23, r18
    16c0:	81 05       	cpc	r24, r1
    16c2:	91 05       	cpc	r25, r1
    16c4:	a9 f1       	breq	.+106    	; 0x1730 <uart_init+0x9a>
    16c6:	30 f4       	brcc	.+12     	; 0x16d4 <uart_init+0x3e>
    16c8:	60 38       	cpi	r22, 0x80	; 128
    16ca:	75 42       	sbci	r23, 0x25	; 37
    16cc:	81 05       	cpc	r24, r1
    16ce:	91 05       	cpc	r25, r1
    16d0:	41 f1       	breq	.+80     	; 0x1722 <uart_init+0x8c>
    16d2:	64 c0       	rjmp	.+200    	; 0x179c <uart_init+0x106>
    16d4:	61 15       	cp	r22, r1
    16d6:	2b e4       	ldi	r18, 0x4B	; 75
    16d8:	72 07       	cpc	r23, r18
    16da:	81 05       	cpc	r24, r1
    16dc:	91 05       	cpc	r25, r1
    16de:	79 f1       	breq	.+94     	; 0x173e <uart_init+0xa8>
    16e0:	61 15       	cp	r22, r1
    16e2:	76 49       	sbci	r23, 0x96	; 150
    16e4:	81 05       	cpc	r24, r1
    16e6:	91 05       	cpc	r25, r1
    16e8:	89 f1       	breq	.+98     	; 0x174c <uart_init+0xb6>
    16ea:	58 c0       	rjmp	.+176    	; 0x179c <uart_init+0x106>
    16ec:	60 32       	cpi	r22, 0x20	; 32
    16ee:	21 ea       	ldi	r18, 0xA1	; 161
    16f0:	72 07       	cpc	r23, r18
    16f2:	27 e0       	ldi	r18, 0x07	; 7
    16f4:	82 07       	cpc	r24, r18
    16f6:	91 05       	cpc	r25, r1
    16f8:	f1 f1       	breq	.+124    	; 0x1776 <uart_init+0xe0>
    16fa:	30 f4       	brcc	.+12     	; 0x1708 <uart_init+0x72>
    16fc:	60 39       	cpi	r22, 0x90	; 144
    16fe:	70 4d       	sbci	r23, 0xD0	; 208
    1700:	83 40       	sbci	r24, 0x03	; 3
    1702:	91 05       	cpc	r25, r1
    1704:	89 f1       	breq	.+98     	; 0x1768 <uart_init+0xd2>
    1706:	4a c0       	rjmp	.+148    	; 0x179c <uart_init+0x106>
    1708:	60 34       	cpi	r22, 0x40	; 64
    170a:	22 e4       	ldi	r18, 0x42	; 66
    170c:	72 07       	cpc	r23, r18
    170e:	2f e0       	ldi	r18, 0x0F	; 15
    1710:	82 07       	cpc	r24, r18
    1712:	91 05       	cpc	r25, r1
    1714:	b9 f1       	breq	.+110    	; 0x1784 <uart_init+0xee>
    1716:	60 38       	cpi	r22, 0x80	; 128
    1718:	74 48       	sbci	r23, 0x84	; 132
    171a:	8e 41       	sbci	r24, 0x1E	; 30
    171c:	91 05       	cpc	r25, r1
    171e:	c9 f1       	breq	.+114    	; 0x1792 <uart_init+0xfc>
    1720:	3d c0       	rjmp	.+122    	; 0x179c <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    1722:	8f ec       	ldi	r24, 0xCF	; 207
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    172a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    172e:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    1730:	8a e8       	ldi	r24, 0x8A	; 138
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1738:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    173c:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    173e:	87 e6       	ldi	r24, 0x67	; 103
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1746:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    174a:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    174c:	83 e3       	ldi	r24, 0x33	; 51
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1754:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1758:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    175a:	89 e1       	ldi	r24, 0x19	; 25
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1762:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1766:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    1768:	87 e0       	ldi	r24, 0x07	; 7
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1770:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1774:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    177e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1782:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    178c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1790:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    1792:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1796:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    179a:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    179c:	8f ec       	ldi	r24, 0xCF	; 207
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    17a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    17a8:	08 95       	ret

000017aa <sprintf>:
    17aa:	ae e0       	ldi	r26, 0x0E	; 14
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb ed       	ldi	r30, 0xDB	; 219
    17b0:	fb e0       	ldi	r31, 0x0B	; 11
    17b2:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__+0x1c>
    17b6:	0d 89       	ldd	r16, Y+21	; 0x15
    17b8:	1e 89       	ldd	r17, Y+22	; 0x16
    17ba:	86 e0       	ldi	r24, 0x06	; 6
    17bc:	8c 83       	std	Y+4, r24	; 0x04
    17be:	1a 83       	std	Y+2, r17	; 0x02
    17c0:	09 83       	std	Y+1, r16	; 0x01
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	9f e7       	ldi	r25, 0x7F	; 127
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	ae 01       	movw	r20, r28
    17cc:	47 5e       	subi	r20, 0xE7	; 231
    17ce:	5f 4f       	sbci	r21, 0xFF	; 255
    17d0:	6f 89       	ldd	r22, Y+23	; 0x17
    17d2:	78 8d       	ldd	r23, Y+24	; 0x18
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vfprintf>
    17dc:	ef 81       	ldd	r30, Y+7	; 0x07
    17de:	f8 85       	ldd	r31, Y+8	; 0x08
    17e0:	e0 0f       	add	r30, r16
    17e2:	f1 1f       	adc	r31, r17
    17e4:	10 82       	st	Z, r1
    17e6:	2e 96       	adiw	r28, 0x0e	; 14
    17e8:	e4 e0       	ldi	r30, 0x04	; 4
    17ea:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__+0x1c>

000017ee <vfprintf>:
    17ee:	ab e0       	ldi	r26, 0x0B	; 11
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	ed ef       	ldi	r30, 0xFD	; 253
    17f4:	fb e0       	ldi	r31, 0x0B	; 11
    17f6:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__prologue_saves__>
    17fa:	6c 01       	movw	r12, r24
    17fc:	7b 01       	movw	r14, r22
    17fe:	8a 01       	movw	r16, r20
    1800:	fc 01       	movw	r30, r24
    1802:	17 82       	std	Z+7, r1	; 0x07
    1804:	16 82       	std	Z+6, r1	; 0x06
    1806:	83 81       	ldd	r24, Z+3	; 0x03
    1808:	81 ff       	sbrs	r24, 1
    180a:	cc c1       	rjmp	.+920    	; 0x1ba4 <vfprintf+0x3b6>
    180c:	ce 01       	movw	r24, r28
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	3c 01       	movw	r6, r24
    1812:	f6 01       	movw	r30, r12
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	f7 01       	movw	r30, r14
    1818:	93 fd       	sbrc	r25, 3
    181a:	85 91       	lpm	r24, Z+
    181c:	93 ff       	sbrs	r25, 3
    181e:	81 91       	ld	r24, Z+
    1820:	7f 01       	movw	r14, r30
    1822:	88 23       	and	r24, r24
    1824:	09 f4       	brne	.+2      	; 0x1828 <vfprintf+0x3a>
    1826:	ba c1       	rjmp	.+884    	; 0x1b9c <vfprintf+0x3ae>
    1828:	85 32       	cpi	r24, 0x25	; 37
    182a:	39 f4       	brne	.+14     	; 0x183a <vfprintf+0x4c>
    182c:	93 fd       	sbrc	r25, 3
    182e:	85 91       	lpm	r24, Z+
    1830:	93 ff       	sbrs	r25, 3
    1832:	81 91       	ld	r24, Z+
    1834:	7f 01       	movw	r14, r30
    1836:	85 32       	cpi	r24, 0x25	; 37
    1838:	29 f4       	brne	.+10     	; 0x1844 <vfprintf+0x56>
    183a:	b6 01       	movw	r22, r12
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <fputc>
    1842:	e7 cf       	rjmp	.-50     	; 0x1812 <vfprintf+0x24>
    1844:	91 2c       	mov	r9, r1
    1846:	21 2c       	mov	r2, r1
    1848:	31 2c       	mov	r3, r1
    184a:	ff e1       	ldi	r31, 0x1F	; 31
    184c:	f3 15       	cp	r31, r3
    184e:	d8 f0       	brcs	.+54     	; 0x1886 <vfprintf+0x98>
    1850:	8b 32       	cpi	r24, 0x2B	; 43
    1852:	79 f0       	breq	.+30     	; 0x1872 <vfprintf+0x84>
    1854:	38 f4       	brcc	.+14     	; 0x1864 <vfprintf+0x76>
    1856:	80 32       	cpi	r24, 0x20	; 32
    1858:	79 f0       	breq	.+30     	; 0x1878 <vfprintf+0x8a>
    185a:	83 32       	cpi	r24, 0x23	; 35
    185c:	a1 f4       	brne	.+40     	; 0x1886 <vfprintf+0x98>
    185e:	23 2d       	mov	r18, r3
    1860:	20 61       	ori	r18, 0x10	; 16
    1862:	1d c0       	rjmp	.+58     	; 0x189e <vfprintf+0xb0>
    1864:	8d 32       	cpi	r24, 0x2D	; 45
    1866:	61 f0       	breq	.+24     	; 0x1880 <vfprintf+0x92>
    1868:	80 33       	cpi	r24, 0x30	; 48
    186a:	69 f4       	brne	.+26     	; 0x1886 <vfprintf+0x98>
    186c:	23 2d       	mov	r18, r3
    186e:	21 60       	ori	r18, 0x01	; 1
    1870:	16 c0       	rjmp	.+44     	; 0x189e <vfprintf+0xb0>
    1872:	83 2d       	mov	r24, r3
    1874:	82 60       	ori	r24, 0x02	; 2
    1876:	38 2e       	mov	r3, r24
    1878:	e3 2d       	mov	r30, r3
    187a:	e4 60       	ori	r30, 0x04	; 4
    187c:	3e 2e       	mov	r3, r30
    187e:	2a c0       	rjmp	.+84     	; 0x18d4 <vfprintf+0xe6>
    1880:	f3 2d       	mov	r31, r3
    1882:	f8 60       	ori	r31, 0x08	; 8
    1884:	1d c0       	rjmp	.+58     	; 0x18c0 <vfprintf+0xd2>
    1886:	37 fc       	sbrc	r3, 7
    1888:	2d c0       	rjmp	.+90     	; 0x18e4 <vfprintf+0xf6>
    188a:	20 ed       	ldi	r18, 0xD0	; 208
    188c:	28 0f       	add	r18, r24
    188e:	2a 30       	cpi	r18, 0x0A	; 10
    1890:	40 f0       	brcs	.+16     	; 0x18a2 <vfprintf+0xb4>
    1892:	8e 32       	cpi	r24, 0x2E	; 46
    1894:	b9 f4       	brne	.+46     	; 0x18c4 <vfprintf+0xd6>
    1896:	36 fc       	sbrc	r3, 6
    1898:	81 c1       	rjmp	.+770    	; 0x1b9c <vfprintf+0x3ae>
    189a:	23 2d       	mov	r18, r3
    189c:	20 64       	ori	r18, 0x40	; 64
    189e:	32 2e       	mov	r3, r18
    18a0:	19 c0       	rjmp	.+50     	; 0x18d4 <vfprintf+0xe6>
    18a2:	36 fe       	sbrs	r3, 6
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <vfprintf+0xc4>
    18a6:	8a e0       	ldi	r24, 0x0A	; 10
    18a8:	98 9e       	mul	r9, r24
    18aa:	20 0d       	add	r18, r0
    18ac:	11 24       	eor	r1, r1
    18ae:	92 2e       	mov	r9, r18
    18b0:	11 c0       	rjmp	.+34     	; 0x18d4 <vfprintf+0xe6>
    18b2:	ea e0       	ldi	r30, 0x0A	; 10
    18b4:	2e 9e       	mul	r2, r30
    18b6:	20 0d       	add	r18, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	22 2e       	mov	r2, r18
    18bc:	f3 2d       	mov	r31, r3
    18be:	f0 62       	ori	r31, 0x20	; 32
    18c0:	3f 2e       	mov	r3, r31
    18c2:	08 c0       	rjmp	.+16     	; 0x18d4 <vfprintf+0xe6>
    18c4:	8c 36       	cpi	r24, 0x6C	; 108
    18c6:	21 f4       	brne	.+8      	; 0x18d0 <vfprintf+0xe2>
    18c8:	83 2d       	mov	r24, r3
    18ca:	80 68       	ori	r24, 0x80	; 128
    18cc:	38 2e       	mov	r3, r24
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <vfprintf+0xe6>
    18d0:	88 36       	cpi	r24, 0x68	; 104
    18d2:	41 f4       	brne	.+16     	; 0x18e4 <vfprintf+0xf6>
    18d4:	f7 01       	movw	r30, r14
    18d6:	93 fd       	sbrc	r25, 3
    18d8:	85 91       	lpm	r24, Z+
    18da:	93 ff       	sbrs	r25, 3
    18dc:	81 91       	ld	r24, Z+
    18de:	7f 01       	movw	r14, r30
    18e0:	81 11       	cpse	r24, r1
    18e2:	b3 cf       	rjmp	.-154    	; 0x184a <vfprintf+0x5c>
    18e4:	98 2f       	mov	r25, r24
    18e6:	9f 7d       	andi	r25, 0xDF	; 223
    18e8:	95 54       	subi	r25, 0x45	; 69
    18ea:	93 30       	cpi	r25, 0x03	; 3
    18ec:	28 f4       	brcc	.+10     	; 0x18f8 <vfprintf+0x10a>
    18ee:	0c 5f       	subi	r16, 0xFC	; 252
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	9f e3       	ldi	r25, 0x3F	; 63
    18f4:	99 83       	std	Y+1, r25	; 0x01
    18f6:	0d c0       	rjmp	.+26     	; 0x1912 <vfprintf+0x124>
    18f8:	83 36       	cpi	r24, 0x63	; 99
    18fa:	31 f0       	breq	.+12     	; 0x1908 <vfprintf+0x11a>
    18fc:	83 37       	cpi	r24, 0x73	; 115
    18fe:	71 f0       	breq	.+28     	; 0x191c <vfprintf+0x12e>
    1900:	83 35       	cpi	r24, 0x53	; 83
    1902:	09 f0       	breq	.+2      	; 0x1906 <vfprintf+0x118>
    1904:	59 c0       	rjmp	.+178    	; 0x19b8 <vfprintf+0x1ca>
    1906:	21 c0       	rjmp	.+66     	; 0x194a <vfprintf+0x15c>
    1908:	f8 01       	movw	r30, r16
    190a:	80 81       	ld	r24, Z
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	0e 5f       	subi	r16, 0xFE	; 254
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	88 24       	eor	r8, r8
    1914:	83 94       	inc	r8
    1916:	91 2c       	mov	r9, r1
    1918:	53 01       	movw	r10, r6
    191a:	13 c0       	rjmp	.+38     	; 0x1942 <vfprintf+0x154>
    191c:	28 01       	movw	r4, r16
    191e:	f2 e0       	ldi	r31, 0x02	; 2
    1920:	4f 0e       	add	r4, r31
    1922:	51 1c       	adc	r5, r1
    1924:	f8 01       	movw	r30, r16
    1926:	a0 80       	ld	r10, Z
    1928:	b1 80       	ldd	r11, Z+1	; 0x01
    192a:	36 fe       	sbrs	r3, 6
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <vfprintf+0x146>
    192e:	69 2d       	mov	r22, r9
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <vfprintf+0x14a>
    1934:	6f ef       	ldi	r22, 0xFF	; 255
    1936:	7f ef       	ldi	r23, 0xFF	; 255
    1938:	c5 01       	movw	r24, r10
    193a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <strnlen>
    193e:	4c 01       	movw	r8, r24
    1940:	82 01       	movw	r16, r4
    1942:	f3 2d       	mov	r31, r3
    1944:	ff 77       	andi	r31, 0x7F	; 127
    1946:	3f 2e       	mov	r3, r31
    1948:	16 c0       	rjmp	.+44     	; 0x1976 <vfprintf+0x188>
    194a:	28 01       	movw	r4, r16
    194c:	22 e0       	ldi	r18, 0x02	; 2
    194e:	42 0e       	add	r4, r18
    1950:	51 1c       	adc	r5, r1
    1952:	f8 01       	movw	r30, r16
    1954:	a0 80       	ld	r10, Z
    1956:	b1 80       	ldd	r11, Z+1	; 0x01
    1958:	36 fe       	sbrs	r3, 6
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x174>
    195c:	69 2d       	mov	r22, r9
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <vfprintf+0x178>
    1962:	6f ef       	ldi	r22, 0xFF	; 255
    1964:	7f ef       	ldi	r23, 0xFF	; 255
    1966:	c5 01       	movw	r24, r10
    1968:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <strnlen_P>
    196c:	4c 01       	movw	r8, r24
    196e:	f3 2d       	mov	r31, r3
    1970:	f0 68       	ori	r31, 0x80	; 128
    1972:	3f 2e       	mov	r3, r31
    1974:	82 01       	movw	r16, r4
    1976:	33 fc       	sbrc	r3, 3
    1978:	1b c0       	rjmp	.+54     	; 0x19b0 <vfprintf+0x1c2>
    197a:	82 2d       	mov	r24, r2
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	88 16       	cp	r8, r24
    1980:	99 06       	cpc	r9, r25
    1982:	b0 f4       	brcc	.+44     	; 0x19b0 <vfprintf+0x1c2>
    1984:	b6 01       	movw	r22, r12
    1986:	80 e2       	ldi	r24, 0x20	; 32
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <fputc>
    198e:	2a 94       	dec	r2
    1990:	f4 cf       	rjmp	.-24     	; 0x197a <vfprintf+0x18c>
    1992:	f5 01       	movw	r30, r10
    1994:	37 fc       	sbrc	r3, 7
    1996:	85 91       	lpm	r24, Z+
    1998:	37 fe       	sbrs	r3, 7
    199a:	81 91       	ld	r24, Z+
    199c:	5f 01       	movw	r10, r30
    199e:	b6 01       	movw	r22, r12
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <fputc>
    19a6:	21 10       	cpse	r2, r1
    19a8:	2a 94       	dec	r2
    19aa:	21 e0       	ldi	r18, 0x01	; 1
    19ac:	82 1a       	sub	r8, r18
    19ae:	91 08       	sbc	r9, r1
    19b0:	81 14       	cp	r8, r1
    19b2:	91 04       	cpc	r9, r1
    19b4:	71 f7       	brne	.-36     	; 0x1992 <vfprintf+0x1a4>
    19b6:	e8 c0       	rjmp	.+464    	; 0x1b88 <vfprintf+0x39a>
    19b8:	84 36       	cpi	r24, 0x64	; 100
    19ba:	11 f0       	breq	.+4      	; 0x19c0 <vfprintf+0x1d2>
    19bc:	89 36       	cpi	r24, 0x69	; 105
    19be:	41 f5       	brne	.+80     	; 0x1a10 <vfprintf+0x222>
    19c0:	f8 01       	movw	r30, r16
    19c2:	37 fe       	sbrs	r3, 7
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <vfprintf+0x1e6>
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	0c 5f       	subi	r16, 0xFC	; 252
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <vfprintf+0x1f6>
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	07 2e       	mov	r0, r23
    19da:	00 0c       	add	r0, r0
    19dc:	88 0b       	sbc	r24, r24
    19de:	99 0b       	sbc	r25, r25
    19e0:	0e 5f       	subi	r16, 0xFE	; 254
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    19e4:	f3 2d       	mov	r31, r3
    19e6:	ff 76       	andi	r31, 0x6F	; 111
    19e8:	3f 2e       	mov	r3, r31
    19ea:	97 ff       	sbrs	r25, 7
    19ec:	09 c0       	rjmp	.+18     	; 0x1a00 <vfprintf+0x212>
    19ee:	90 95       	com	r25
    19f0:	80 95       	com	r24
    19f2:	70 95       	com	r23
    19f4:	61 95       	neg	r22
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	8f 4f       	sbci	r24, 0xFF	; 255
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	f0 68       	ori	r31, 0x80	; 128
    19fe:	3f 2e       	mov	r3, r31
    1a00:	2a e0       	ldi	r18, 0x0A	; 10
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	a3 01       	movw	r20, r6
    1a06:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__ultoa_invert>
    1a0a:	88 2e       	mov	r8, r24
    1a0c:	86 18       	sub	r8, r6
    1a0e:	45 c0       	rjmp	.+138    	; 0x1a9a <vfprintf+0x2ac>
    1a10:	85 37       	cpi	r24, 0x75	; 117
    1a12:	31 f4       	brne	.+12     	; 0x1a20 <vfprintf+0x232>
    1a14:	23 2d       	mov	r18, r3
    1a16:	2f 7e       	andi	r18, 0xEF	; 239
    1a18:	b2 2e       	mov	r11, r18
    1a1a:	2a e0       	ldi	r18, 0x0A	; 10
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	25 c0       	rjmp	.+74     	; 0x1a6a <vfprintf+0x27c>
    1a20:	93 2d       	mov	r25, r3
    1a22:	99 7f       	andi	r25, 0xF9	; 249
    1a24:	b9 2e       	mov	r11, r25
    1a26:	8f 36       	cpi	r24, 0x6F	; 111
    1a28:	c1 f0       	breq	.+48     	; 0x1a5a <vfprintf+0x26c>
    1a2a:	18 f4       	brcc	.+6      	; 0x1a32 <vfprintf+0x244>
    1a2c:	88 35       	cpi	r24, 0x58	; 88
    1a2e:	79 f0       	breq	.+30     	; 0x1a4e <vfprintf+0x260>
    1a30:	b5 c0       	rjmp	.+362    	; 0x1b9c <vfprintf+0x3ae>
    1a32:	80 37       	cpi	r24, 0x70	; 112
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <vfprintf+0x24e>
    1a36:	88 37       	cpi	r24, 0x78	; 120
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <vfprintf+0x254>
    1a3a:	b0 c0       	rjmp	.+352    	; 0x1b9c <vfprintf+0x3ae>
    1a3c:	e9 2f       	mov	r30, r25
    1a3e:	e0 61       	ori	r30, 0x10	; 16
    1a40:	be 2e       	mov	r11, r30
    1a42:	b4 fe       	sbrs	r11, 4
    1a44:	0d c0       	rjmp	.+26     	; 0x1a60 <vfprintf+0x272>
    1a46:	fb 2d       	mov	r31, r11
    1a48:	f4 60       	ori	r31, 0x04	; 4
    1a4a:	bf 2e       	mov	r11, r31
    1a4c:	09 c0       	rjmp	.+18     	; 0x1a60 <vfprintf+0x272>
    1a4e:	34 fe       	sbrs	r3, 4
    1a50:	0a c0       	rjmp	.+20     	; 0x1a66 <vfprintf+0x278>
    1a52:	29 2f       	mov	r18, r25
    1a54:	26 60       	ori	r18, 0x06	; 6
    1a56:	b2 2e       	mov	r11, r18
    1a58:	06 c0       	rjmp	.+12     	; 0x1a66 <vfprintf+0x278>
    1a5a:	28 e0       	ldi	r18, 0x08	; 8
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <vfprintf+0x27c>
    1a60:	20 e1       	ldi	r18, 0x10	; 16
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <vfprintf+0x27c>
    1a66:	20 e1       	ldi	r18, 0x10	; 16
    1a68:	32 e0       	ldi	r19, 0x02	; 2
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	b7 fe       	sbrs	r11, 7
    1a6e:	07 c0       	rjmp	.+14     	; 0x1a7e <vfprintf+0x290>
    1a70:	60 81       	ld	r22, Z
    1a72:	71 81       	ldd	r23, Z+1	; 0x01
    1a74:	82 81       	ldd	r24, Z+2	; 0x02
    1a76:	93 81       	ldd	r25, Z+3	; 0x03
    1a78:	0c 5f       	subi	r16, 0xFC	; 252
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	06 c0       	rjmp	.+12     	; 0x1a8a <vfprintf+0x29c>
    1a7e:	60 81       	ld	r22, Z
    1a80:	71 81       	ldd	r23, Z+1	; 0x01
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 5f       	subi	r16, 0xFE	; 254
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	a3 01       	movw	r20, r6
    1a8c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__ultoa_invert>
    1a90:	88 2e       	mov	r8, r24
    1a92:	86 18       	sub	r8, r6
    1a94:	fb 2d       	mov	r31, r11
    1a96:	ff 77       	andi	r31, 0x7F	; 127
    1a98:	3f 2e       	mov	r3, r31
    1a9a:	36 fe       	sbrs	r3, 6
    1a9c:	0d c0       	rjmp	.+26     	; 0x1ab8 <vfprintf+0x2ca>
    1a9e:	23 2d       	mov	r18, r3
    1aa0:	2e 7f       	andi	r18, 0xFE	; 254
    1aa2:	a2 2e       	mov	r10, r18
    1aa4:	89 14       	cp	r8, r9
    1aa6:	58 f4       	brcc	.+22     	; 0x1abe <vfprintf+0x2d0>
    1aa8:	34 fe       	sbrs	r3, 4
    1aaa:	0b c0       	rjmp	.+22     	; 0x1ac2 <vfprintf+0x2d4>
    1aac:	32 fc       	sbrc	r3, 2
    1aae:	09 c0       	rjmp	.+18     	; 0x1ac2 <vfprintf+0x2d4>
    1ab0:	83 2d       	mov	r24, r3
    1ab2:	8e 7e       	andi	r24, 0xEE	; 238
    1ab4:	a8 2e       	mov	r10, r24
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <vfprintf+0x2d4>
    1ab8:	b8 2c       	mov	r11, r8
    1aba:	a3 2c       	mov	r10, r3
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <vfprintf+0x2d6>
    1abe:	b8 2c       	mov	r11, r8
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <vfprintf+0x2d6>
    1ac2:	b9 2c       	mov	r11, r9
    1ac4:	a4 fe       	sbrs	r10, 4
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <vfprintf+0x2f8>
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e8 0d       	add	r30, r8
    1acc:	f1 1d       	adc	r31, r1
    1ace:	80 81       	ld	r24, Z
    1ad0:	80 33       	cpi	r24, 0x30	; 48
    1ad2:	21 f4       	brne	.+8      	; 0x1adc <vfprintf+0x2ee>
    1ad4:	9a 2d       	mov	r25, r10
    1ad6:	99 7e       	andi	r25, 0xE9	; 233
    1ad8:	a9 2e       	mov	r10, r25
    1ada:	09 c0       	rjmp	.+18     	; 0x1aee <vfprintf+0x300>
    1adc:	a2 fe       	sbrs	r10, 2
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <vfprintf+0x2fe>
    1ae0:	b3 94       	inc	r11
    1ae2:	b3 94       	inc	r11
    1ae4:	04 c0       	rjmp	.+8      	; 0x1aee <vfprintf+0x300>
    1ae6:	8a 2d       	mov	r24, r10
    1ae8:	86 78       	andi	r24, 0x86	; 134
    1aea:	09 f0       	breq	.+2      	; 0x1aee <vfprintf+0x300>
    1aec:	b3 94       	inc	r11
    1aee:	a3 fc       	sbrc	r10, 3
    1af0:	11 c0       	rjmp	.+34     	; 0x1b14 <vfprintf+0x326>
    1af2:	a0 fe       	sbrs	r10, 0
    1af4:	06 c0       	rjmp	.+12     	; 0x1b02 <vfprintf+0x314>
    1af6:	b2 14       	cp	r11, r2
    1af8:	88 f4       	brcc	.+34     	; 0x1b1c <vfprintf+0x32e>
    1afa:	28 0c       	add	r2, r8
    1afc:	92 2c       	mov	r9, r2
    1afe:	9b 18       	sub	r9, r11
    1b00:	0e c0       	rjmp	.+28     	; 0x1b1e <vfprintf+0x330>
    1b02:	b2 14       	cp	r11, r2
    1b04:	60 f4       	brcc	.+24     	; 0x1b1e <vfprintf+0x330>
    1b06:	b6 01       	movw	r22, r12
    1b08:	80 e2       	ldi	r24, 0x20	; 32
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <fputc>
    1b10:	b3 94       	inc	r11
    1b12:	f7 cf       	rjmp	.-18     	; 0x1b02 <vfprintf+0x314>
    1b14:	b2 14       	cp	r11, r2
    1b16:	18 f4       	brcc	.+6      	; 0x1b1e <vfprintf+0x330>
    1b18:	2b 18       	sub	r2, r11
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <vfprintf+0x332>
    1b1c:	98 2c       	mov	r9, r8
    1b1e:	21 2c       	mov	r2, r1
    1b20:	a4 fe       	sbrs	r10, 4
    1b22:	10 c0       	rjmp	.+32     	; 0x1b44 <vfprintf+0x356>
    1b24:	b6 01       	movw	r22, r12
    1b26:	80 e3       	ldi	r24, 0x30	; 48
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <fputc>
    1b2e:	a2 fe       	sbrs	r10, 2
    1b30:	17 c0       	rjmp	.+46     	; 0x1b60 <vfprintf+0x372>
    1b32:	a1 fc       	sbrc	r10, 1
    1b34:	03 c0       	rjmp	.+6      	; 0x1b3c <vfprintf+0x34e>
    1b36:	88 e7       	ldi	r24, 0x78	; 120
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <vfprintf+0x352>
    1b3c:	88 e5       	ldi	r24, 0x58	; 88
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	b6 01       	movw	r22, r12
    1b42:	0c c0       	rjmp	.+24     	; 0x1b5c <vfprintf+0x36e>
    1b44:	8a 2d       	mov	r24, r10
    1b46:	86 78       	andi	r24, 0x86	; 134
    1b48:	59 f0       	breq	.+22     	; 0x1b60 <vfprintf+0x372>
    1b4a:	a1 fe       	sbrs	r10, 1
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <vfprintf+0x364>
    1b4e:	8b e2       	ldi	r24, 0x2B	; 43
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <vfprintf+0x366>
    1b52:	80 e2       	ldi	r24, 0x20	; 32
    1b54:	a7 fc       	sbrc	r10, 7
    1b56:	8d e2       	ldi	r24, 0x2D	; 45
    1b58:	b6 01       	movw	r22, r12
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <fputc>
    1b60:	89 14       	cp	r8, r9
    1b62:	38 f4       	brcc	.+14     	; 0x1b72 <vfprintf+0x384>
    1b64:	b6 01       	movw	r22, r12
    1b66:	80 e3       	ldi	r24, 0x30	; 48
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <fputc>
    1b6e:	9a 94       	dec	r9
    1b70:	f7 cf       	rjmp	.-18     	; 0x1b60 <vfprintf+0x372>
    1b72:	8a 94       	dec	r8
    1b74:	f3 01       	movw	r30, r6
    1b76:	e8 0d       	add	r30, r8
    1b78:	f1 1d       	adc	r31, r1
    1b7a:	80 81       	ld	r24, Z
    1b7c:	b6 01       	movw	r22, r12
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <fputc>
    1b84:	81 10       	cpse	r8, r1
    1b86:	f5 cf       	rjmp	.-22     	; 0x1b72 <vfprintf+0x384>
    1b88:	22 20       	and	r2, r2
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <vfprintf+0x3a0>
    1b8c:	42 ce       	rjmp	.-892    	; 0x1812 <vfprintf+0x24>
    1b8e:	b6 01       	movw	r22, r12
    1b90:	80 e2       	ldi	r24, 0x20	; 32
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <fputc>
    1b98:	2a 94       	dec	r2
    1b9a:	f6 cf       	rjmp	.-20     	; 0x1b88 <vfprintf+0x39a>
    1b9c:	f6 01       	movw	r30, r12
    1b9e:	86 81       	ldd	r24, Z+6	; 0x06
    1ba0:	97 81       	ldd	r25, Z+7	; 0x07
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <vfprintf+0x3ba>
    1ba4:	8f ef       	ldi	r24, 0xFF	; 255
    1ba6:	9f ef       	ldi	r25, 0xFF	; 255
    1ba8:	2b 96       	adiw	r28, 0x0b	; 11
    1baa:	e2 e1       	ldi	r30, 0x12	; 18
    1bac:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__epilogue_restores__>

00001bb0 <strnlen_P>:
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	05 90       	lpm	r0, Z+
    1bb4:	61 50       	subi	r22, 0x01	; 1
    1bb6:	70 40       	sbci	r23, 0x00	; 0
    1bb8:	01 10       	cpse	r0, r1
    1bba:	d8 f7       	brcc	.-10     	; 0x1bb2 <strnlen_P+0x2>
    1bbc:	80 95       	com	r24
    1bbe:	90 95       	com	r25
    1bc0:	8e 0f       	add	r24, r30
    1bc2:	9f 1f       	adc	r25, r31
    1bc4:	08 95       	ret

00001bc6 <strnlen>:
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	61 50       	subi	r22, 0x01	; 1
    1bca:	70 40       	sbci	r23, 0x00	; 0
    1bcc:	01 90       	ld	r0, Z+
    1bce:	01 10       	cpse	r0, r1
    1bd0:	d8 f7       	brcc	.-10     	; 0x1bc8 <strnlen+0x2>
    1bd2:	80 95       	com	r24
    1bd4:	90 95       	com	r25
    1bd6:	8e 0f       	add	r24, r30
    1bd8:	9f 1f       	adc	r25, r31
    1bda:	08 95       	ret

00001bdc <fputc>:
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	fb 01       	movw	r30, r22
    1be6:	23 81       	ldd	r18, Z+3	; 0x03
    1be8:	21 fd       	sbrc	r18, 1
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <fputc+0x16>
    1bec:	8f ef       	ldi	r24, 0xFF	; 255
    1bee:	9f ef       	ldi	r25, 0xFF	; 255
    1bf0:	2c c0       	rjmp	.+88     	; 0x1c4a <fputc+0x6e>
    1bf2:	22 ff       	sbrs	r18, 2
    1bf4:	16 c0       	rjmp	.+44     	; 0x1c22 <fputc+0x46>
    1bf6:	46 81       	ldd	r20, Z+6	; 0x06
    1bf8:	57 81       	ldd	r21, Z+7	; 0x07
    1bfa:	24 81       	ldd	r18, Z+4	; 0x04
    1bfc:	35 81       	ldd	r19, Z+5	; 0x05
    1bfe:	42 17       	cp	r20, r18
    1c00:	53 07       	cpc	r21, r19
    1c02:	44 f4       	brge	.+16     	; 0x1c14 <fputc+0x38>
    1c04:	a0 81       	ld	r26, Z
    1c06:	b1 81       	ldd	r27, Z+1	; 0x01
    1c08:	9d 01       	movw	r18, r26
    1c0a:	2f 5f       	subi	r18, 0xFF	; 255
    1c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0e:	31 83       	std	Z+1, r19	; 0x01
    1c10:	20 83       	st	Z, r18
    1c12:	8c 93       	st	X, r24
    1c14:	26 81       	ldd	r18, Z+6	; 0x06
    1c16:	37 81       	ldd	r19, Z+7	; 0x07
    1c18:	2f 5f       	subi	r18, 0xFF	; 255
    1c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1c:	37 83       	std	Z+7, r19	; 0x07
    1c1e:	26 83       	std	Z+6, r18	; 0x06
    1c20:	14 c0       	rjmp	.+40     	; 0x1c4a <fputc+0x6e>
    1c22:	8b 01       	movw	r16, r22
    1c24:	ec 01       	movw	r28, r24
    1c26:	fb 01       	movw	r30, r22
    1c28:	00 84       	ldd	r0, Z+8	; 0x08
    1c2a:	f1 85       	ldd	r31, Z+9	; 0x09
    1c2c:	e0 2d       	mov	r30, r0
    1c2e:	09 95       	icall
    1c30:	89 2b       	or	r24, r25
    1c32:	e1 f6       	brne	.-72     	; 0x1bec <fputc+0x10>
    1c34:	d8 01       	movw	r26, r16
    1c36:	16 96       	adiw	r26, 0x06	; 6
    1c38:	8d 91       	ld	r24, X+
    1c3a:	9c 91       	ld	r25, X
    1c3c:	17 97       	sbiw	r26, 0x07	; 7
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	17 96       	adiw	r26, 0x07	; 7
    1c42:	9c 93       	st	X, r25
    1c44:	8e 93       	st	-X, r24
    1c46:	16 97       	sbiw	r26, 0x06	; 6
    1c48:	ce 01       	movw	r24, r28
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	08 95       	ret

00001c54 <__ultoa_invert>:
    1c54:	fa 01       	movw	r30, r20
    1c56:	aa 27       	eor	r26, r26
    1c58:	28 30       	cpi	r18, 0x08	; 8
    1c5a:	51 f1       	breq	.+84     	; 0x1cb0 <__ultoa_invert+0x5c>
    1c5c:	20 31       	cpi	r18, 0x10	; 16
    1c5e:	81 f1       	breq	.+96     	; 0x1cc0 <__ultoa_invert+0x6c>
    1c60:	e8 94       	clt
    1c62:	6f 93       	push	r22
    1c64:	6e 7f       	andi	r22, 0xFE	; 254
    1c66:	6e 5f       	subi	r22, 0xFE	; 254
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	af 4f       	sbci	r26, 0xFF	; 255
    1c70:	b1 e0       	ldi	r27, 0x01	; 1
    1c72:	3e d0       	rcall	.+124    	; 0x1cf0 <__ultoa_invert+0x9c>
    1c74:	b4 e0       	ldi	r27, 0x04	; 4
    1c76:	3c d0       	rcall	.+120    	; 0x1cf0 <__ultoa_invert+0x9c>
    1c78:	67 0f       	add	r22, r23
    1c7a:	78 1f       	adc	r23, r24
    1c7c:	89 1f       	adc	r24, r25
    1c7e:	9a 1f       	adc	r25, r26
    1c80:	a1 1d       	adc	r26, r1
    1c82:	68 0f       	add	r22, r24
    1c84:	79 1f       	adc	r23, r25
    1c86:	8a 1f       	adc	r24, r26
    1c88:	91 1d       	adc	r25, r1
    1c8a:	a1 1d       	adc	r26, r1
    1c8c:	6a 0f       	add	r22, r26
    1c8e:	71 1d       	adc	r23, r1
    1c90:	81 1d       	adc	r24, r1
    1c92:	91 1d       	adc	r25, r1
    1c94:	a1 1d       	adc	r26, r1
    1c96:	20 d0       	rcall	.+64     	; 0x1cd8 <__ultoa_invert+0x84>
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <__ultoa_invert+0x48>
    1c9a:	68 94       	set
    1c9c:	3f 91       	pop	r19
    1c9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ca0:	26 9f       	mul	r18, r22
    1ca2:	11 24       	eor	r1, r1
    1ca4:	30 19       	sub	r19, r0
    1ca6:	30 5d       	subi	r19, 0xD0	; 208
    1ca8:	31 93       	st	Z+, r19
    1caa:	de f6       	brtc	.-74     	; 0x1c62 <__ultoa_invert+0xe>
    1cac:	cf 01       	movw	r24, r30
    1cae:	08 95       	ret
    1cb0:	46 2f       	mov	r20, r22
    1cb2:	47 70       	andi	r20, 0x07	; 7
    1cb4:	40 5d       	subi	r20, 0xD0	; 208
    1cb6:	41 93       	st	Z+, r20
    1cb8:	b3 e0       	ldi	r27, 0x03	; 3
    1cba:	0f d0       	rcall	.+30     	; 0x1cda <__ultoa_invert+0x86>
    1cbc:	c9 f7       	brne	.-14     	; 0x1cb0 <__ultoa_invert+0x5c>
    1cbe:	f6 cf       	rjmp	.-20     	; 0x1cac <__ultoa_invert+0x58>
    1cc0:	46 2f       	mov	r20, r22
    1cc2:	4f 70       	andi	r20, 0x0F	; 15
    1cc4:	40 5d       	subi	r20, 0xD0	; 208
    1cc6:	4a 33       	cpi	r20, 0x3A	; 58
    1cc8:	18 f0       	brcs	.+6      	; 0x1cd0 <__ultoa_invert+0x7c>
    1cca:	49 5d       	subi	r20, 0xD9	; 217
    1ccc:	31 fd       	sbrc	r19, 1
    1cce:	40 52       	subi	r20, 0x20	; 32
    1cd0:	41 93       	st	Z+, r20
    1cd2:	02 d0       	rcall	.+4      	; 0x1cd8 <__ultoa_invert+0x84>
    1cd4:	a9 f7       	brne	.-22     	; 0x1cc0 <__ultoa_invert+0x6c>
    1cd6:	ea cf       	rjmp	.-44     	; 0x1cac <__ultoa_invert+0x58>
    1cd8:	b4 e0       	ldi	r27, 0x04	; 4
    1cda:	a6 95       	lsr	r26
    1cdc:	97 95       	ror	r25
    1cde:	87 95       	ror	r24
    1ce0:	77 95       	ror	r23
    1ce2:	67 95       	ror	r22
    1ce4:	ba 95       	dec	r27
    1ce6:	c9 f7       	brne	.-14     	; 0x1cda <__ultoa_invert+0x86>
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	61 05       	cpc	r22, r1
    1cec:	71 05       	cpc	r23, r1
    1cee:	08 95       	ret
    1cf0:	9b 01       	movw	r18, r22
    1cf2:	ac 01       	movw	r20, r24
    1cf4:	0a 2e       	mov	r0, r26
    1cf6:	06 94       	lsr	r0
    1cf8:	57 95       	ror	r21
    1cfa:	47 95       	ror	r20
    1cfc:	37 95       	ror	r19
    1cfe:	27 95       	ror	r18
    1d00:	ba 95       	dec	r27
    1d02:	c9 f7       	brne	.-14     	; 0x1cf6 <__ultoa_invert+0xa2>
    1d04:	62 0f       	add	r22, r18
    1d06:	73 1f       	adc	r23, r19
    1d08:	84 1f       	adc	r24, r20
    1d0a:	95 1f       	adc	r25, r21
    1d0c:	a0 1d       	adc	r26, r0
    1d0e:	08 95       	ret

00001d10 <__prologue_saves__>:
    1d10:	2f 92       	push	r2
    1d12:	3f 92       	push	r3
    1d14:	4f 92       	push	r4
    1d16:	5f 92       	push	r5
    1d18:	6f 92       	push	r6
    1d1a:	7f 92       	push	r7
    1d1c:	8f 92       	push	r8
    1d1e:	9f 92       	push	r9
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	ca 1b       	sub	r28, r26
    1d3a:	db 0b       	sbc	r29, r27
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	09 94       	ijmp

00001d48 <__epilogue_restores__>:
    1d48:	2a 88       	ldd	r2, Y+18	; 0x12
    1d4a:	39 88       	ldd	r3, Y+17	; 0x11
    1d4c:	48 88       	ldd	r4, Y+16	; 0x10
    1d4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d50:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d52:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d54:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d56:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d58:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d5a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d5c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d5e:	df 80       	ldd	r13, Y+7	; 0x07
    1d60:	ee 80       	ldd	r14, Y+6	; 0x06
    1d62:	fd 80       	ldd	r15, Y+5	; 0x05
    1d64:	0c 81       	ldd	r16, Y+4	; 0x04
    1d66:	1b 81       	ldd	r17, Y+3	; 0x03
    1d68:	aa 81       	ldd	r26, Y+2	; 0x02
    1d6a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d6c:	ce 0f       	add	r28, r30
    1d6e:	d1 1d       	adc	r29, r1
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	ed 01       	movw	r28, r26
    1d7c:	08 95       	ret

00001d7e <_exit>:
    1d7e:	f8 94       	cli

00001d80 <__stop_program>:
    1d80:	ff cf       	rjmp	.-2      	; 0x1d80 <__stop_program>
