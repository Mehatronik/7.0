
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  0000107a  0000110e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800158  00800158  00001166  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268b  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6d  00000000  00000000  00003ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001477  00000000  00000000  00004944  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  00005dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000987  00000000  00000000  00006324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ae6  00000000  00000000  00006cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00008791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__vector_20>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e7       	ldi	r30, 0x7A	; 122
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 35       	cpi	r26, 0x58	; 88
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 e5       	ldi	r26, 0x58	; 88
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 37       	cpi	r26, 0x74	; 116
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2c 02 	call	0x458	; 0x458 <main>
      9e:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
      a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
      a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
      ac:	80 ec       	ldi	r24, 0xC0	; 192
      ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
      b2:	8e ee       	ldi	r24, 0xEE	; 238
      b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
      b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
      bc:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__data_end>
      c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
      c2:	1f 92       	push	r1
      c4:	0f 92       	push	r0
      c6:	0f b6       	in	r0, 0x3f	; 63
      c8:	0f 92       	push	r0
      ca:	11 24       	eor	r1, r1
      cc:	8f 93       	push	r24
      ce:	9f 93       	push	r25
      d0:	ef 93       	push	r30
      d2:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
      d4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
      d8:	81 11       	cpse	r24, r1
      da:	09 c0       	rjmp	.+18     	; 0xee <__vector_21+0x2c>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
      dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      e4:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <mereni_napon+0x1>
      e8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <mereni_napon>
      ec:	0c c0       	rjmp	.+24     	; 0x106 <__vector_21+0x44>
	else if(ad_kanal == 1)
      ee:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	41 f4       	brne	.+16     	; 0x106 <__vector_21+0x44>
		merena_struja = (uint16_t)ADC;
      f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      fe:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <merena_struja+0x1>
     102:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     106:	ea e7       	ldi	r30, 0x7A	; 122
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
     110:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
     114:	8f 5f       	subi	r24, 0xFF	; 255
     116:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     11a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	10 f0       	brcs	.+4      	; 0x126 <__vector_21+0x64>
		ad_kanal = 0;
     122:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
     126:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
     12a:	88 23       	and	r24, r24
     12c:	19 f0       	breq	.+6      	; 0x134 <__vector_21+0x72>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	39 f0       	breq	.+14     	; 0x140 <__vector_21+0x7e>
     132:	0e c0       	rjmp	.+28     	; 0x150 <__vector_21+0x8e>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     134:	ec e7       	ldi	r30, 0x7C	; 124
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	8c 7f       	andi	r24, 0xFC	; 252
     13c:	80 83       	st	Z, r24
		break;
     13e:	08 c0       	rjmp	.+16     	; 0x150 <__vector_21+0x8e>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     140:	ec e7       	ldi	r30, 0x7C	; 124
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	8d 7f       	andi	r24, 0xFD	; 253
     148:	80 83       	st	Z, r24
				ADMUX |= (0b1);
     14a:	80 81       	ld	r24, Z
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     150:	ea e7       	ldi	r30, 0x7A	; 122
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 6c       	ori	r24, 0xC0	; 192
     158:	80 83       	st	Z, r24
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us


}
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	9f 91       	pop	r25
     160:	8f 91       	pop	r24
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     16c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     170:	88 e4       	ldi	r24, 0x48	; 72
     172:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     176:	08 95       	ret

00000178 <i2c_start_wait>:
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	ec eb       	ldi	r30, 0xBC	; 188
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	24 ea       	ldi	r18, 0xA4	; 164
     182:	a9 eb       	ldi	r26, 0xB9	; 185
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	cb eb       	ldi	r28, 0xBB	; 187
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	34 e8       	ldi	r19, 0x84	; 132
     18c:	44 e9       	ldi	r20, 0x94	; 148
     18e:	20 83       	st	Z, r18
     190:	90 81       	ld	r25, Z
     192:	99 23       	and	r25, r25
     194:	ec f7       	brge	.-6      	; 0x190 <i2c_start_wait+0x18>
     196:	9c 91       	ld	r25, X
     198:	98 7f       	andi	r25, 0xF8	; 248
     19a:	98 30       	cpi	r25, 0x08	; 8
     19c:	11 f0       	breq	.+4      	; 0x1a2 <i2c_start_wait+0x2a>
     19e:	90 31       	cpi	r25, 0x10	; 16
     1a0:	b1 f7       	brne	.-20     	; 0x18e <i2c_start_wait+0x16>
     1a2:	88 83       	st	Y, r24
     1a4:	30 83       	st	Z, r19
     1a6:	90 81       	ld	r25, Z
     1a8:	99 23       	and	r25, r25
     1aa:	ec f7       	brge	.-6      	; 0x1a6 <i2c_start_wait+0x2e>
     1ac:	9c 91       	ld	r25, X
     1ae:	98 7f       	andi	r25, 0xF8	; 248
     1b0:	90 32       	cpi	r25, 0x20	; 32
     1b2:	11 f0       	breq	.+4      	; 0x1b8 <i2c_start_wait+0x40>
     1b4:	98 35       	cpi	r25, 0x58	; 88
     1b6:	29 f4       	brne	.+10     	; 0x1c2 <i2c_start_wait+0x4a>
     1b8:	40 83       	st	Z, r20
     1ba:	90 81       	ld	r25, Z
     1bc:	94 fd       	sbrc	r25, 4
     1be:	fd cf       	rjmp	.-6      	; 0x1ba <i2c_start_wait+0x42>
     1c0:	e6 cf       	rjmp	.-52     	; 0x18e <i2c_start_wait+0x16>
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <i2c_stop>:
     1c8:	84 e9       	ldi	r24, 0x94	; 148
     1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1ce:	ec eb       	ldi	r30, 0xBC	; 188
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	84 fd       	sbrc	r24, 4
     1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <i2c_stop+0xa>
     1d8:	08 95       	ret

000001da <i2c_write>:
     1da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1de:	84 e8       	ldi	r24, 0x84	; 132
     1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1e4:	ec eb       	ldi	r30, 0xBC	; 188
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	88 23       	and	r24, r24
     1ec:	ec f7       	brge	.-6      	; 0x1e8 <i2c_write+0xe>
     1ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1f2:	98 7f       	andi	r25, 0xF8	; 248
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	98 32       	cpi	r25, 0x28	; 40
     1f8:	09 f4       	brne	.+2      	; 0x1fc <i2c_write+0x22>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	08 95       	ret

000001fe <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1fe:	84 e8       	ldi	r24, 0x84	; 132
     200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     204:	ec eb       	ldi	r30, 0xBC	; 188
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	88 23       	and	r24, r24
     20c:	ec f7       	brge	.-6      	; 0x208 <i2c_readNak+0xa>
	
    return TWDR;
     20e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     212:	08 95       	ret

00000214 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     214:	cf 93       	push	r28
     216:	c8 2f       	mov	r28, r24
     218:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     21a:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
	i2c_write(value);                      // write 
     21e:	8c 2f       	mov	r24, r28
     220:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     224:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_stop>
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	cf 93       	push	r28
     22e:	c8 2f       	mov	r28, r24
     230:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <led_pin>
     234:	84 60       	ori	r24, 0x04	; 4
     236:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <led_pin>
     23a:	6e e4       	ldi	r22, 0x4E	; 78
     23c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     240:	87 ec       	ldi	r24, 0xC7	; 199
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <putnibble+0x18>
     248:	00 c0       	rjmp	.+0      	; 0x24a <putnibble+0x1e>
     24a:	00 00       	nop
     24c:	c2 95       	swap	r28
     24e:	c0 7f       	andi	r28, 0xF0	; 240
     250:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <led_pin>
     254:	6e e4       	ldi	r22, 0x4E	; 78
     256:	8c 2b       	or	r24, r28
     258:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     25c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <led_pin>
     260:	8b 7f       	andi	r24, 0xFB	; 251
     262:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <led_pin>
     266:	6e e4       	ldi	r22, 0x4E	; 78
     268:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     26c:	87 ec       	ldi	r24, 0xC7	; 199
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <putnibble+0x44>
     274:	00 c0       	rjmp	.+0      	; 0x276 <putnibble+0x4a>
     276:	00 00       	nop
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <lcd1602_send_byte>:
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	c8 2f       	mov	r28, r24
     282:	d8 2f       	mov	r29, r24
     284:	d2 95       	swap	r29
     286:	df 70       	andi	r29, 0x0F	; 15
     288:	61 11       	cpse	r22, r1
     28a:	09 c0       	rjmp	.+18     	; 0x29e <lcd1602_send_byte+0x22>
     28c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <led_pin>
     290:	8e 7f       	andi	r24, 0xFE	; 254
     292:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <led_pin>
     296:	6e e4       	ldi	r22, 0x4E	; 78
     298:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <lcd1602_send_byte+0x32>
     29e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <led_pin>
     2a2:	81 60       	ori	r24, 0x01	; 1
     2a4:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <led_pin>
     2a8:	6e e4       	ldi	r22, 0x4E	; 78
     2aa:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     2ae:	8d 2f       	mov	r24, r29
     2b0:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2b4:	8c 2f       	mov	r24, r28
     2b6:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <lcd1602_send_char>:
     2c0:	cf 93       	push	r28
     2c2:	c8 2f       	mov	r28, r24
     2c4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <led_pin>
     2c8:	81 60       	ori	r24, 0x01	; 1
     2ca:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <led_pin>
     2ce:	6e e4       	ldi	r22, 0x4E	; 78
     2d0:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     2d4:	8c 2f       	mov	r24, r28
     2d6:	82 95       	swap	r24
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2de:	8c 2f       	mov	r24, r28
     2e0:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <lcd1602_init>:
     2e8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <led_pin>
     2ec:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_init>
     2f0:	8f e5       	ldi	r24, 0x5F	; 95
     2f2:	9a ee       	ldi	r25, 0xEA	; 234
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd1602_init+0xc>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd1602_init+0x12>
     2fa:	00 00       	nop
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     302:	8f e7       	ldi	r24, 0x7F	; 127
     304:	9e e3       	ldi	r25, 0x3E	; 62
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd1602_init+0x1e>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd1602_init+0x24>
     30c:	00 00       	nop
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     314:	8f e8       	ldi	r24, 0x8F	; 143
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <lcd1602_init+0x30>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd1602_init+0x36>
     31e:	00 00       	nop
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     326:	8f e9       	ldi	r24, 0x9F	; 159
     328:	9f e0       	ldi	r25, 0x0F	; 15
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <lcd1602_init+0x42>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <lcd1602_init+0x48>
     330:	00 00       	nop
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     338:	8f e9       	ldi	r24, 0x9F	; 159
     33a:	9f e0       	ldi	r25, 0x0F	; 15
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <lcd1602_init+0x54>
     340:	00 c0       	rjmp	.+0      	; 0x342 <lcd1602_init+0x5a>
     342:	00 00       	nop
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	88 e2       	ldi	r24, 0x28	; 40
     348:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     34c:	8f e9       	ldi	r24, 0x9F	; 159
     34e:	9f e0       	ldi	r25, 0x0F	; 15
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <lcd1602_init+0x68>
     354:	00 c0       	rjmp	.+0      	; 0x356 <lcd1602_init+0x6e>
     356:	00 00       	nop
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	8c e0       	ldi	r24, 0x0C	; 12
     35c:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     360:	8f e9       	ldi	r24, 0x9F	; 159
     362:	9f e0       	ldi	r25, 0x0F	; 15
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd1602_init+0x7c>
     368:	00 c0       	rjmp	.+0      	; 0x36a <lcd1602_init+0x82>
     36a:	00 00       	nop
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     374:	8f e9       	ldi	r24, 0x9F	; 159
     376:	9f e0       	ldi	r25, 0x0F	; 15
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <lcd1602_init+0x90>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <lcd1602_init+0x96>
     37e:	00 00       	nop
     380:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <led_pin>
     384:	88 60       	ori	r24, 0x08	; 8
     386:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <led_pin>
     38a:	6e e4       	ldi	r22, 0x4E	; 78
     38c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     390:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <led_pin>
     394:	8d 7f       	andi	r24, 0xFD	; 253
     396:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <led_pin>
     39a:	6e e4       	ldi	r22, 0x4E	; 78
     39c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     3a0:	08 95       	ret

000003a2 <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     3a2:	90 e4       	ldi	r25, 0x40	; 64
     3a4:	69 9f       	mul	r22, r25
     3a6:	80 0d       	add	r24, r0
     3a8:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     3b2:	08 95       	ret

000003b4 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     3bc:	80 81       	ld	r24, Z
     3be:	88 23       	and	r24, r24
     3c0:	59 f0       	breq	.+22     	; 0x3d8 <lcd1602_send_string+0x24>
     3c2:	8f 01       	movw	r16, r30
     3c4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     3c6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd1602_send_char>
		i++;
     3ca:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     3cc:	f8 01       	movw	r30, r16
     3ce:	ec 0f       	add	r30, r28
     3d0:	f1 1d       	adc	r31, r1
     3d2:	80 81       	ld	r24, Z
     3d4:	81 11       	cpse	r24, r1
     3d6:	f7 cf       	rjmp	.-18     	; 0x3c6 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     3e0:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     3e2:	dc 01       	movw	r26, r24
     3e4:	12 96       	adiw	r26, 0x02	; 2
     3e6:	2c 91       	ld	r18, X
     3e8:	12 97       	sbiw	r26, 0x02	; 2
     3ea:	54 e6       	ldi	r21, 0x64	; 100
     3ec:	11 96       	adiw	r26, 0x01	; 1
     3ee:	8c 91       	ld	r24, X
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	52 9f       	mul	r21, r18
     3f4:	80 0d       	add	r24, r0
     3f6:	91 1d       	adc	r25, r1
     3f8:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     3fa:	db 01       	movw	r26, r22
     3fc:	12 96       	adiw	r26, 0x02	; 2
     3fe:	2c 91       	ld	r18, X
     400:	12 97       	sbiw	r26, 0x02	; 2
     402:	11 96       	adiw	r26, 0x01	; 1
     404:	6c 91       	ld	r22, X
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	52 9f       	mul	r21, r18
     40a:	60 0d       	add	r22, r0
     40c:	71 1d       	adc	r23, r1
     40e:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     410:	42 81       	ldd	r20, Z+2	; 0x02
     412:	21 81       	ldd	r18, Z+1	; 0x01
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	54 9f       	mul	r21, r20
     418:	20 0d       	add	r18, r0
     41a:	31 1d       	adc	r19, r1
     41c:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fuli radi
     41e:	86 17       	cp	r24, r22
     420:	97 07       	cpc	r25, r23
     422:	68 f0       	brcs	.+26     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     424:	28 17       	cp	r18, r24
     426:	39 07       	cpc	r19, r25
     428:	20 f0       	brcs	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42a:	28 33       	cpi	r18, 0x38	; 56
     42c:	b9 e0       	ldi	r27, 0x09	; 9
     42e:	3b 07       	cpc	r19, r27
     430:	78 f0       	brcs	.+30     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	26 17       	cp	r18, r22
     436:	37 07       	cpc	r19, r23
     438:	70 f0       	brcs	.+28     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     43e:	28 17       	cp	r18, r24
     440:	39 07       	cpc	r19, r25
     442:	40 f0       	brcs	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	26 17       	cp	r18, r22
     448:	37 07       	cpc	r19, r23
     44a:	28 f0       	brcs	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     454:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     456:	08 95       	ret

00000458 <main>:

	return b;
}

int main(void)
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	af 97       	sbiw	r28, 0x2f	; 47
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
	Time_date vreme_datum;
	Time_date vreme_paljenja;
	Time_date vreme_gasenja;
	Time_date sanp_shot_vremena;	//za potrebe podesavanje vremena
	
	vreme_paljenja.hr = 23;
     46c:	87 e1       	ldi	r24, 0x17	; 23
     46e:	8c 87       	std	Y+12, r24	; 0x0c
	vreme_paljenja.min = 30;
     470:	8e e1       	ldi	r24, 0x1E	; 30
     472:	8b 87       	std	Y+11, r24	; 0x0b
	vreme_gasenja.hr = 5;
     474:	85 e0       	ldi	r24, 0x05	; 5
     476:	8d 8b       	std	Y+21, r24	; 0x15
	vreme_gasenja.min = 40;
     478:	88 e2       	ldi	r24, 0x28	; 40
     47a:	8c 8b       	std	Y+20, r24	; 0x14
	int8_t kursor = 0;
	uint8_t flag_pod_vremena = 1;
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			////PD2-3 output
     47c:	0e 94 c3 04 	call	0x986	; 0x986 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
     480:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_init>
	lcd1602_init();
     484:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd1602_init>
	ADC_init();				
     488:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init();			//baud 9600
     48c:	0e 94 41 05 	call	0xa82	; 0xa82 <uart_init>
	DS3231_init();			//RTC init
     490:	0e 94 49 04 	call	0x892	; 0x892 <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
     494:	0e 94 8f 03 	call	0x71e	; 0x71e <pc_init>
	tasteri_init();			//NAPOMENA: PD4-7 i PB0-1 INPUT, INT_PULLUP=ON
     498:	0e 94 ae 03 	call	0x75c	; 0x75c <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
     49c:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;
     49e:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
     4a0:	78 94       	sei
/**************************************************************************************************************/
	
	//getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
	//getDate(&vreme_datum.dy, &vreme_datum.dt, &vreme_datum.mt, &vreme_datum.yr);
	
	setTime(23, 59, 55, am, _24_hour_format);
     4a2:	00 e0       	ldi	r16, 0x00	; 0
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	47 e3       	ldi	r20, 0x37	; 55
     4a8:	6b e3       	ldi	r22, 0x3B	; 59
     4aa:	87 e1       	ldi	r24, 0x17	; 23
     4ac:	0e 94 90 04 	call	0x920	; 0x920 <setTime>
	uint8_t ukljuceno = 0;  //0=OFF 1=ON
	uint8_t tasteri = 0xFF;

	uint8_t STATE = DISPL1;
	int8_t kursor = 0;
	uint8_t flag_pod_vremena = 1;
     4b0:	bb 24       	eor	r11, r11
     4b2:	b3 94       	inc	r11
	char bafer[20];
	uint8_t ukljuceno = 0;  //0=OFF 1=ON
	uint8_t tasteri = 0xFF;

	uint8_t STATE = DISPL1;
	int8_t kursor = 0;
     4b4:	e1 2c       	mov	r14, r1
	
	char bafer[20];
	uint8_t ukljuceno = 0;  //0=OFF 1=ON
	uint8_t tasteri = 0xFF;

	uint8_t STATE = DISPL1;
     4b6:	10 e0       	ldi	r17, 0x00	; 0
						lcd1602_goto_xy(0,0);
						lcd1602_send_string("PODESAVANJE SATA");
						
						lcd1602_goto_xy(0,1);
						lcd1602_send_string("    ");
						lcd1602_send_string(bafer);
     4b8:	6e 01       	movw	r12, r28
     4ba:	8c e1       	ldi	r24, 0x1C	; 28
     4bc:	c8 0e       	add	r12, r24
     4be:	d1 1c       	adc	r13, r1
     4c0:	06 c0       	rjmp	.+12     	; 0x4ce <main+0x76>
								kursor = 0;
						}
						else if(kursor == 0 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
						{
							kursor = 0;		//resetujem kursor jer ostane memorisan
							STATE = POD_SAT;	//meni za podesavanje sata
     4c2:	13 e0       	ldi	r17, 0x03	; 3
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <main+0x76>
						}
						else if(kursor == 1 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
						{
							kursor = 0;		//resetujem kursor jer ostane memorisan
     4c6:	e1 2c       	mov	r14, r1
							STATE = SUB_MENU1;	//sub_meni za podesavanje on ili off vremena
     4c8:	14 e0       	ldi	r17, 0x04	; 4
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <main+0x76>
     4cc:	b1 2c       	mov	r11, r1
	
	
    while (1) 
    {
		/* polling tastera */
		tasteri = ocitaj_tastere();
     4ce:	0e 94 bb 03 	call	0x776	; 0x776 <ocitaj_tastere>
     4d2:	f8 2e       	mov	r15, r24
		
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)
     4d4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <flag_pc_int_pomocni>
     4d8:	88 23       	and	r24, r24
     4da:	f9 f0       	breq	.+62     	; 0x51a <main+0xc2>
		{
			flag_pc_int_pomocni = 0;
     4dc:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     4e0:	00 e0       	ldi	r16, 0x00	; 0
     4e2:	9e 01       	movw	r18, r28
     4e4:	27 5f       	subi	r18, 0xF7	; 247
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	ae 01       	movw	r20, r28
     4ea:	4f 5f       	subi	r20, 0xFF	; 255
     4ec:	5f 4f       	sbci	r21, 0xFF	; 255
     4ee:	be 01       	movw	r22, r28
     4f0:	6e 5f       	subi	r22, 0xFE	; 254
     4f2:	7f 4f       	sbci	r23, 0xFF	; 255
     4f4:	ce 01       	movw	r24, r28
     4f6:	03 96       	adiw	r24, 0x03	; 3
     4f8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <getTime>
			
			
			/* paljenje/gasenje releja > grjaca bojlera */
			ukljuceno = period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);
     4fc:	ae 01       	movw	r20, r28
     4fe:	4f 5f       	subi	r20, 0xFF	; 255
     500:	5f 4f       	sbci	r21, 0xFF	; 255
     502:	be 01       	movw	r22, r28
     504:	6d 5e       	subi	r22, 0xED	; 237
     506:	7f 4f       	sbci	r23, 0xFF	; 255
     508:	ce 01       	movw	r24, r28
     50a:	0a 96       	adiw	r24, 0x0a	; 10
     50c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <period_paljenja>
			
			if (ukljuceno)
     510:	88 23       	and	r24, r24
     512:	11 f0       	breq	.+4      	; 0x518 <main+0xc0>
				PORTB |= 1<<PINB5;   //high
     514:	2d 9a       	sbi	0x05, 5	; 5
     516:	01 c0       	rjmp	.+2      	; 0x51a <main+0xc2>
			else
				PORTB &= ~(1<<PINB5);	//low
     518:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		switch(STATE)
     51a:	12 30       	cpi	r17, 0x02	; 2
     51c:	09 f4       	brne	.+2      	; 0x520 <main+0xc8>
     51e:	6b c0       	rjmp	.+214    	; 0x5f6 <main+0x19e>
     520:	13 30       	cpi	r17, 0x03	; 3
     522:	09 f4       	brne	.+2      	; 0x526 <main+0xce>
     524:	c2 c0       	rjmp	.+388    	; 0x6aa <main+0x252>
     526:	11 11       	cpse	r17, r1
     528:	d2 cf       	rjmp	.-92     	; 0x4ce <main+0x76>
		{
			
			case DISPL1:
						/* ispis vremena svaki sekund dok je u ovom CASE-u */
						if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     52a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <flag_pc_int>
     52e:	88 23       	and	r24, r24
     530:	09 f4       	brne	.+2      	; 0x534 <main+0xdc>
     532:	58 c0       	rjmp	.+176    	; 0x5e4 <main+0x18c>
						{
							flag_pc_int = 0; //resetujem flag koji je u ISR
     534:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <flag_pc_int>
							
							getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     538:	00 e0       	ldi	r16, 0x00	; 0
     53a:	9e 01       	movw	r18, r28
     53c:	27 5f       	subi	r18, 0xF7	; 247
     53e:	3f 4f       	sbci	r19, 0xFF	; 255
     540:	ae 01       	movw	r20, r28
     542:	4f 5f       	subi	r20, 0xFF	; 255
     544:	5f 4f       	sbci	r21, 0xFF	; 255
     546:	be 01       	movw	r22, r28
     548:	6e 5f       	subi	r22, 0xFE	; 254
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	ce 01       	movw	r24, r28
     54e:	03 96       	adiw	r24, 0x03	; 3
     550:	0e 94 52 04 	call	0x8a4	; 0x8a4 <getTime>
							sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	1f 92       	push	r1
     558:	8f 93       	push	r24
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	1f 92       	push	r1
     55e:	8f 93       	push	r24
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	1f 92       	push	r1
     564:	8f 93       	push	r24
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	df 92       	push	r13
     570:	cf 92       	push	r12
     572:	0e 94 51 05 	call	0xaa2	; 0xaa2 <sprintf>
							//send_str("\n"); //novi red
							
							//lcd1602_clear();
							
							/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
							lcd1602_goto_xy(0,0);
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string("    ");
     57e:	82 e3       	ldi	r24, 0x32	; 50
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_send_string(bafer);
     586:	c6 01       	movw	r24, r12
     588:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_send_string("    ");
     58c:	82 e3       	ldi	r24, 0x32	; 50
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							
							lcd1602_goto_xy(0,1);
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string("  ");
     59c:	84 e3       	ldi	r24, 0x34	; 52
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							sprintf(bafer, "%02d:%02d->%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     5a4:	8c 89       	ldd	r24, Y+20	; 0x14
     5a6:	1f 92       	push	r1
     5a8:	8f 93       	push	r24
     5aa:	8d 89       	ldd	r24, Y+21	; 0x15
     5ac:	1f 92       	push	r1
     5ae:	8f 93       	push	r24
     5b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b2:	1f 92       	push	r1
     5b4:	8f 93       	push	r24
     5b6:	8c 85       	ldd	r24, Y+12	; 0x0c
     5b8:	1f 92       	push	r1
     5ba:	8f 93       	push	r24
     5bc:	80 e1       	ldi	r24, 0x10	; 16
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	df 92       	push	r13
     5c6:	cf 92       	push	r12
     5c8:	0e 94 51 05 	call	0xaa2	; 0xaa2 <sprintf>
							lcd1602_send_string(bafer);
     5cc:	c6 01       	movw	r24, r12
     5ce:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_send_string("  ");
     5d2:	84 e3       	ldi	r24, 0x34	; 52
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
		
						}
						
						if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut   !(tasteri & (1<<TASTER_ENTER))
     5e4:	65 e0       	ldi	r22, 0x05	; 5
     5e6:	8f 2d       	mov	r24, r15
     5e8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ocitaj_jedan_taster>
     5ec:	88 23       	and	r24, r24
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <main+0x19a>
     5f0:	6e cf       	rjmp	.-292    	; 0x4ce <main+0x76>
							STATE = MENU1;
     5f2:	12 e0       	ldi	r17, 0x02	; 2
     5f4:	6c cf       	rjmp	.-296    	; 0x4ce <main+0x76>
			break;
			
			case MENU1:
						//lcd1602_clear();
						
						lcd1602_goto_xy(0, kursor);
     5f6:	0e 2d       	mov	r16, r14
     5f8:	6e 2d       	mov	r22, r14
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string(">");
     600:	85 e2       	ldi	r24, 0x25	; 37
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						lcd1602_goto_xy(0, !kursor);
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	e1 10       	cpse	r14, r1
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string(" ");
     614:	85 e3       	ldi	r24, 0x35	; 53
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						
						lcd1602_goto_xy(1,0);
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string("PODESI SAT     ");
     624:	87 e2       	ldi	r24, 0x27	; 39
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						lcd1602_goto_xy(1,1);
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string("PODESI PERIOD  ");
     634:	87 e3       	ldi	r24, 0x37	; 55
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						
						if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) ) //ocitaj_jedan_taster(tasteri, TASTER_DOLE)
     63c:	62 e0       	ldi	r22, 0x02	; 2
     63e:	8f 2d       	mov	r24, r15
     640:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ocitaj_jedan_taster>
     644:	88 23       	and	r24, r24
     646:	49 f0       	breq	.+18     	; 0x65a <main+0x202>
						{
							kursor++;
     648:	ee 24       	eor	r14, r14
     64a:	e3 94       	inc	r14
     64c:	e0 0e       	add	r14, r16
     64e:	1e 14       	cp	r1, r14
     650:	0c f0       	brlt	.+2      	; 0x654 <main+0x1fc>
     652:	3d cf       	rjmp	.-390    	; 0x4ce <main+0x76>
     654:	ee 24       	eor	r14, r14
     656:	e3 94       	inc	r14
     658:	3a cf       	rjmp	.-396    	; 0x4ce <main+0x76>
							if(kursor > 1)
								kursor = 1;
						}
						else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     65a:	63 e0       	ldi	r22, 0x03	; 3
     65c:	8f 2d       	mov	r24, r15
     65e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ocitaj_jedan_taster>
     662:	88 23       	and	r24, r24
     664:	39 f0       	breq	.+14     	; 0x674 <main+0x21c>
						{
							kursor--;
     666:	ee 24       	eor	r14, r14
     668:	ea 94       	dec	r14
     66a:	e0 0e       	add	r14, r16
     66c:	0a f0       	brmi	.+2      	; 0x670 <main+0x218>
     66e:	2f cf       	rjmp	.-418    	; 0x4ce <main+0x76>
     670:	e1 2c       	mov	r14, r1
     672:	2d cf       	rjmp	.-422    	; 0x4ce <main+0x76>
							if(kursor < 0)
								kursor = 0;
						}
						else if(kursor == 0 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     674:	e1 10       	cpse	r14, r1
     676:	06 c0       	rjmp	.+12     	; 0x684 <main+0x22c>
     678:	65 e0       	ldi	r22, 0x05	; 5
     67a:	8f 2d       	mov	r24, r15
     67c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ocitaj_jedan_taster>
     680:	81 11       	cpse	r24, r1
     682:	1f cf       	rjmp	.-450    	; 0x4c2 <main+0x6a>
						{
							kursor = 0;		//resetujem kursor jer ostane memorisan
							STATE = POD_SAT;	//meni za podesavanje sata
						}
						else if(kursor == 1 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	e9 12       	cpse	r14, r25
     688:	06 c0       	rjmp	.+12     	; 0x696 <main+0x23e>
     68a:	65 e0       	ldi	r22, 0x05	; 5
     68c:	8f 2d       	mov	r24, r15
     68e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ocitaj_jedan_taster>
     692:	81 11       	cpse	r24, r1
     694:	18 cf       	rjmp	.-464    	; 0x4c6 <main+0x6e>
						{
							kursor = 0;		//resetujem kursor jer ostane memorisan
							STATE = SUB_MENU1;	//sub_meni za podesavanje on ili off vremena
						}
						else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     696:	64 e0       	ldi	r22, 0x04	; 4
     698:	8f 2d       	mov	r24, r15
     69a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ocitaj_jedan_taster>
     69e:	88 23       	and	r24, r24
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <main+0x24c>
     6a2:	15 cf       	rjmp	.-470    	; 0x4ce <main+0x76>
						{
							kursor = 0;		//resetujem kursor jer ostane memorisan
     6a4:	e1 2c       	mov	r14, r1
							STATE = DISPL1;
     6a6:	10 e0       	ldi	r17, 0x00	; 0
     6a8:	12 cf       	rjmp	.-476    	; 0x4ce <main+0x76>
			break;
			
			case POD_SAT:
						
						/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
						if (flag_pod_vremena)
     6aa:	bb 20       	and	r11, r11
     6ac:	b1 f0       	breq	.+44     	; 0x6da <main+0x282>
						{
							flag_pod_vremena = 0;
							sanp_shot_vremena = vreme_datum;
							sprintf(bafer, "%02d:%02d:%02d", sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s);
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	1f 92       	push	r1
     6b2:	8f 93       	push	r24
     6b4:	8a 81       	ldd	r24, Y+2	; 0x02
     6b6:	1f 92       	push	r1
     6b8:	8f 93       	push	r24
     6ba:	8b 81       	ldd	r24, Y+3	; 0x03
     6bc:	1f 92       	push	r1
     6be:	8f 93       	push	r24
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	df 92       	push	r13
     6ca:	cf 92       	push	r12
     6cc:	0e 94 51 05 	call	0xaa2	; 0xaa2 <sprintf>
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
						}
						
						lcd1602_goto_xy(0,0);
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string("PODESAVANJE SATA");
     6e2:	87 e4       	ldi	r24, 0x47	; 71
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						
						lcd1602_goto_xy(0,1);
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string("    ");
     6f2:	82 e3       	ldi	r24, 0x32	; 50
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     6fa:	c6 01       	movw	r24, r12
     6fc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						lcd1602_send_string("    ");
     700:	82 e3       	ldi	r24, 0x32	; 50
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						
						if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )
     708:	64 e0       	ldi	r22, 0x04	; 4
     70a:	8f 2d       	mov	r24, r15
     70c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ocitaj_jedan_taster>
     710:	88 23       	and	r24, r24
     712:	09 f4       	brne	.+2      	; 0x716 <main+0x2be>
     714:	db ce       	rjmp	.-586    	; 0x4cc <main+0x74>
						{
							flag_pod_vremena = 1; //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     716:	bb 24       	eor	r11, r11
     718:	b3 94       	inc	r11
							STATE = MENU1;	//vraca se u prethodni meni
     71a:	12 e0       	ldi	r17, 0x02	; 2
     71c:	d8 ce       	rjmp	.-592    	; 0x4ce <main+0x76>

0000071e <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
     71e:	e8 e6       	ldi	r30, 0x68	; 104
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	82 60       	ori	r24, 0x02	; 2
     726:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
     728:	ec e6       	ldi	r30, 0x6C	; 108
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
     72e:	88 60       	ori	r24, 0x08	; 8
     730:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
     732:	3b 98       	cbi	0x07, 3	; 7
     734:	08 95       	ret

00000736 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
     736:	1f 92       	push	r1
     738:	0f 92       	push	r0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	0f 92       	push	r0
     73e:	11 24       	eor	r1, r1
     740:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
     742:	33 9b       	sbis	0x06, 3	; 6
     744:	05 c0       	rjmp	.+10     	; 0x750 <__vector_4+0x1a>
	{
		flag_pc_int = 1;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <flag_pc_int>
		flag_pc_int_pomocni = 1;
     74c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <flag_pc_int_pomocni>
	}
		
     750:	8f 91       	pop	r24
     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f 90       	pop	r0
     758:	1f 90       	pop	r1
     75a:	18 95       	reti

0000075c <tasteri_init>:
char buff[50];

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
     75c:	8a b1       	in	r24, 0x0a	; 10
     75e:	8f 70       	andi	r24, 0x0F	; 15
     760:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
     762:	84 b1       	in	r24, 0x04	; 4
     764:	8c 7f       	andi	r24, 0xFC	; 252
     766:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
     768:	8b b1       	in	r24, 0x0b	; 11
     76a:	80 6f       	ori	r24, 0xF0	; 240
     76c:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
     76e:	85 b1       	in	r24, 0x05	; 5
     770:	83 60       	ori	r24, 0x03	; 3
     772:	85 b9       	out	0x05, r24	; 5
     774:	08 95       	ret

00000776 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
     776:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <flag_prekid_debounce_time_half>
     77a:	88 23       	and	r24, r24
     77c:	69 f0       	breq	.+26     	; 0x798 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
     77e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
     782:	93 b1       	in	r25, 0x03	; 3
     784:	29 b1       	in	r18, 0x09	; 9
     786:	30 e1       	ldi	r19, 0x10	; 16
     788:	93 9f       	mul	r25, r19
     78a:	c0 01       	movw	r24, r0
     78c:	11 24       	eor	r1, r1
     78e:	92 2f       	mov	r25, r18
     790:	92 95       	swap	r25
     792:	9f 70       	andi	r25, 0x0F	; 15
     794:	89 2b       	or	r24, r25
     796:	01 c0       	rjmp	.+2      	; 0x79a <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
     798:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
     79a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <flag_prekid_debounce_time>
     79e:	99 23       	and	r25, r25
     7a0:	81 f0       	breq	.+32     	; 0x7c2 <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
     7a2:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
     7a6:	93 b1       	in	r25, 0x03	; 3
     7a8:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
     7aa:	50 e1       	ldi	r21, 0x10	; 16
     7ac:	95 9f       	mul	r25, r21
     7ae:	90 01       	movw	r18, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	94 2f       	mov	r25, r20
     7b4:	92 95       	swap	r25
     7b6:	9f 70       	andi	r25, 0x0F	; 15
     7b8:	29 2b       	or	r18, r25
     7ba:	82 13       	cpse	r24, r18
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
     7be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
	}
	
	return tasteri_reg;
}
     7c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7c6:	08 95       	ret

000007c8 <ocitaj_jedan_taster>:
	
	uint8_t stisnut = 0;
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	80 95       	com	r24
     7cc:	90 95       	com	r25
     7ce:	9c 01       	movw	r18, r24
     7d0:	06 2e       	mov	r0, r22
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <ocitaj_jedan_taster+0x10>
     7d4:	35 95       	asr	r19
     7d6:	27 95       	ror	r18
     7d8:	0a 94       	dec	r0
     7da:	e2 f7       	brpl	.-8      	; 0x7d4 <ocitaj_jedan_taster+0xc>
     7dc:	20 ff       	sbrs	r18, 0
     7de:	0a c0       	rjmp	.+20     	; 0x7f4 <ocitaj_jedan_taster+0x2c>
     7e0:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <flag_stisnut.1958>
     7e4:	21 11       	cpse	r18, r1
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <ocitaj_jedan_taster+0x2c>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <flag_stisnut.1958>
		temp_tast = button;		//zapamtim koji je taster stisnut
     7ee:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <temp_tast.1957>
     7f2:	08 95       	ret
		stisnut = 1;
	}
	if ( (~buttons_reg & (1<<temp_tast)) == 0 )	
     7f4:	00 90 5f 01 	lds	r0, 0x015F	; 0x80015f <temp_tast.1957>
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <ocitaj_jedan_taster+0x36>
     7fa:	95 95       	asr	r25
     7fc:	87 95       	ror	r24
     7fe:	0a 94       	dec	r0
     800:	e2 f7       	brpl	.-8      	; 0x7fa <ocitaj_jedan_taster+0x32>
     802:	80 fd       	sbrc	r24, 0
     804:	04 c0       	rjmp	.+8      	; 0x80e <ocitaj_jedan_taster+0x46>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
     806:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <flag_stisnut.1958>
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	08 95       	ret
     80e:	80 e0       	ldi	r24, 0x00	; 0
	}
			
	
	return stisnut;
     810:	08 95       	ret

00000812 <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
     812:	98 2f       	mov	r25, r24
     814:	92 95       	swap	r25
     816:	9f 70       	andi	r25, 0x0F	; 15
     818:	99 0f       	add	r25, r25
     81a:	29 2f       	mov	r18, r25
     81c:	22 0f       	add	r18, r18
     81e:	22 0f       	add	r18, r18
     820:	92 0f       	add	r25, r18
     822:	8f 70       	andi	r24, 0x0F	; 15
     824:	89 0f       	add	r24, r25
     826:	08 95       	ret

00000828 <decimal_to_bcd>:
     828:	9d ec       	ldi	r25, 0xCD	; 205
     82a:	89 9f       	mul	r24, r25
     82c:	91 2d       	mov	r25, r1
     82e:	11 24       	eor	r1, r1
     830:	96 95       	lsr	r25
     832:	96 95       	lsr	r25
     834:	96 95       	lsr	r25
     836:	20 e1       	ldi	r18, 0x10	; 16
     838:	92 9f       	mul	r25, r18
     83a:	a0 01       	movw	r20, r0
     83c:	11 24       	eor	r1, r1
     83e:	99 0f       	add	r25, r25
     840:	29 2f       	mov	r18, r25
     842:	22 0f       	add	r18, r18
     844:	22 0f       	add	r18, r18
     846:	92 0f       	add	r25, r18
     848:	89 1b       	sub	r24, r25
     84a:	8f 70       	andi	r24, 0x0F	; 15
     84c:	84 2b       	or	r24, r20
     84e:	08 95       	ret

00000850 <DS3231_Read>:
     850:	cf 93       	push	r28
     852:	c8 2f       	mov	r28, r24
     854:	80 ed       	ldi	r24, 0xD0	; 208
     856:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     85a:	8c 2f       	mov	r24, r28
     85c:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     860:	81 ed       	ldi	r24, 0xD1	; 209
     862:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     866:	0e 94 ff 00 	call	0x1fe	; 0x1fe <i2c_readNak>
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <DS3231_Write>:
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	d8 2f       	mov	r29, r24
     874:	c6 2f       	mov	r28, r22
     876:	80 ed       	ldi	r24, 0xD0	; 208
     878:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     87c:	8d 2f       	mov	r24, r29
     87e:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     882:	8c 2f       	mov	r24, r28
     884:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     888:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_stop>
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <DS3231_init>:
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	8e e0       	ldi	r24, 0x0E	; 14
     896:	0e 94 37 04 	call	0x86e	; 0x86e <DS3231_Write>
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	8f e0       	ldi	r24, 0x0F	; 15
     89e:	0e 94 37 04 	call	0x86e	; 0x86e <DS3231_Write>
     8a2:	08 95       	ret

000008a4 <getTime>:
     8a4:	af 92       	push	r10
     8a6:	bf 92       	push	r11
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
     8b8:	7b 01       	movw	r14, r22
     8ba:	6a 01       	movw	r12, r20
     8bc:	59 01       	movw	r10, r18
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 28 04 	call	0x850	; 0x850 <DS3231_Read>
     8c4:	0e 94 09 04 	call	0x812	; 0x812 <bcd_to_decimal>
     8c8:	f6 01       	movw	r30, r12
     8ca:	80 83       	st	Z, r24
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0e 94 28 04 	call	0x850	; 0x850 <DS3231_Read>
     8d2:	0e 94 09 04 	call	0x812	; 0x812 <bcd_to_decimal>
     8d6:	f7 01       	movw	r30, r14
     8d8:	80 83       	st	Z, r24
     8da:	01 30       	cpi	r16, 0x01	; 1
     8dc:	81 f4       	brne	.+32     	; 0x8fe <getTime+0x5a>
     8de:	82 e0       	ldi	r24, 0x02	; 2
     8e0:	0e 94 28 04 	call	0x850	; 0x850 <DS3231_Read>
     8e4:	85 fb       	bst	r24, 5
     8e6:	88 27       	eor	r24, r24
     8e8:	80 f9       	bld	r24, 0
     8ea:	f5 01       	movw	r30, r10
     8ec:	80 83       	st	Z, r24
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	0e 94 28 04 	call	0x850	; 0x850 <DS3231_Read>
     8f4:	8f 71       	andi	r24, 0x1F	; 31
     8f6:	0e 94 09 04 	call	0x812	; 0x812 <bcd_to_decimal>
     8fa:	88 83       	st	Y, r24
     8fc:	07 c0       	rjmp	.+14     	; 0x90c <__stack+0xd>
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	0e 94 28 04 	call	0x850	; 0x850 <DS3231_Read>
     904:	8f 73       	andi	r24, 0x3F	; 63
     906:	0e 94 09 04 	call	0x812	; 0x812 <bcd_to_decimal>
     90a:	88 83       	st	Y, r24
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	df 90       	pop	r13
     918:	cf 90       	pop	r12
     91a:	bf 90       	pop	r11
     91c:	af 90       	pop	r10
     91e:	08 95       	ret

00000920 <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	d8 2f       	mov	r29, r24
     92a:	c6 2f       	mov	r28, r22
     92c:	84 2f       	mov	r24, r20
     92e:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
     930:	0e 94 14 04 	call	0x828	; 0x828 <decimal_to_bcd>
     934:	68 2f       	mov	r22, r24
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 37 04 	call	0x86e	; 0x86e <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
     93c:	8c 2f       	mov	r24, r28
     93e:	0e 94 14 04 	call	0x828	; 0x828 <decimal_to_bcd>
     942:	68 2f       	mov	r22, r24
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	0e 94 37 04 	call	0x86e	; 0x86e <DS3231_Write>
	
	switch(hour_format)
     94a:	01 30       	cpi	r16, 0x01	; 1
     94c:	79 f4       	brne	.+30     	; 0x96c <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
     94e:	11 30       	cpi	r17, 0x01	; 1
     950:	11 f0       	breq	.+4      	; 0x956 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
     952:	c0 e4       	ldi	r28, 0x40	; 64
     954:	01 c0       	rjmp	.+2      	; 0x958 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
     956:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
     958:	8d 2f       	mov	r24, r29
     95a:	0e 94 14 04 	call	0x828	; 0x828 <decimal_to_bcd>
     95e:	8f 71       	andi	r24, 0x1F	; 31
     960:	68 2f       	mov	r22, r24
     962:	6c 2b       	or	r22, r28
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	0e 94 37 04 	call	0x86e	; 0x86e <DS3231_Write>
			break;
     96a:	08 c0       	rjmp	.+16     	; 0x97c <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
     96c:	8d 2f       	mov	r24, r29
     96e:	0e 94 14 04 	call	0x828	; 0x828 <decimal_to_bcd>
     972:	68 2f       	mov	r22, r24
     974:	6f 73       	andi	r22, 0x3F	; 63
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	0e 94 37 04 	call	0x86e	; 0x86e <DS3231_Write>
			break;
		}
	}
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <tajmer0_init>:
volatile uint8_t brojac_prekida_tajmera0_debounce = 0;
volatile uint8_t brojac_prekida_tajmera0_debounce_half = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
     98e:	99 ef       	ldi	r25, 0xF9	; 249
     990:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
     992:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRD |= (1<<PIND2)|(1<<PIND3);  //PD2-3 output
     996:	8a b1       	in	r24, 0x0a	; 10
     998:	8c 60       	ori	r24, 0x0C	; 12
     99a:	8a b9       	out	0x0a, r24	; 10
     99c:	08 95       	ret

0000099e <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
     99e:	1f 92       	push	r1
     9a0:	0f 92       	push	r0
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	0f 92       	push	r0
     9a6:	11 24       	eor	r1, r1
     9a8:	8f 93       	push	r24
	flag_tajmer0_prekid = 1;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
     9b0:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <brojac_prekida_tajmera0>
     9b4:	8f 5f       	subi	r24, 0xFF	; 255
     9b6:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
     9ba:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <brojac_prekida_tajmera0_debounce_half>
     9be:	8f 5f       	subi	r24, 0xFF	; 255
     9c0:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
     9c4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <brojac_prekida_tajmera0_debounce>
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <brojac_prekida_tajmera0_debounce>
		
	if(brojac_prekida_tajmera0 == 255)	//1ms * 10 = 10ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
     9ce:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <brojac_prekida_tajmera0>
     9d2:	8f 3f       	cpi	r24, 0xFF	; 255
     9d4:	29 f4       	brne	.+10     	; 0x9e0 <__vector_14+0x42>
	{
		brojac_prekida_tajmera0 = 0;
     9d6:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;				
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <flag_prekid_10ms>
		
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
     9e0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <brojac_prekida_tajmera0_debounce_half>
     9e4:	83 30       	cpi	r24, 0x03	; 3
     9e6:	31 f4       	brne	.+12     	; 0x9f4 <__vector_14+0x56>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
     9e8:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <flag_prekid_debounce_time_half>
		PIND |= 1<<PIND2;	//toggle PD2
     9f2:	4a 9a       	sbi	0x09, 2	; 9
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
     9f4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <brojac_prekida_tajmera0_debounce>
     9f8:	86 30       	cpi	r24, 0x06	; 6
     9fa:	31 f4       	brne	.+12     	; 0xa08 <__vector_14+0x6a>
	{
		brojac_prekida_tajmera0_debounce = 0;
     9fc:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <flag_prekid_debounce_time>
		PIND |= 1<<PIND3;	//toggle PD3
     a06:	4b 9a       	sbi	0x09, 3	; 9
	}
	
     a08:	8f 91       	pop	r24
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	0f 90       	pop	r0
     a10:	1f 90       	pop	r1
     a12:	18 95       	reti

00000a14 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
     a14:	1f 92       	push	r1
     a16:	0f 92       	push	r0
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	0f 92       	push	r0
     a1c:	11 24       	eor	r1, r1
	poslato=0;
     a1e:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <poslato>
}
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_18>:

ISR(USART_RX_vect)
{
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	8f 93       	push	r24
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
	input_char=UDR0;
     a3c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a40:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
     a44:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buff_size>
     a48:	88 30       	cpi	r24, 0x08	; 8
     a4a:	98 f4       	brcc	.+38     	; 0xa72 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
     a4c:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <buff_size>
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <input_char>
     a56:	e4 59       	subi	r30, 0x94	; 148
     a58:	fe 4f       	sbci	r31, 0xFE	; 254
     a5a:	80 83       	st	Z, r24
		buff_size++;
     a5c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buff_size>
     a60:	8f 5f       	subi	r24, 0xFF	; 255
     a62:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <buff_size>
		input_buffer[buff_size]='\0';
     a66:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <buff_size>
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	e4 59       	subi	r30, 0x94	; 148
     a6e:	fe 4f       	sbci	r31, 0xFE	; 254
     a70:	10 82       	st	Z, r1
	}
}
     a72:	ff 91       	pop	r31
     a74:	ef 91       	pop	r30
     a76:	8f 91       	pop	r24
     a78:	0f 90       	pop	r0
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	0f 90       	pop	r0
     a7e:	1f 90       	pop	r1
     a80:	18 95       	reti

00000a82 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
     a88:	88 ed       	ldi	r24, 0xD8	; 216
     a8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
     a8e:	86 e0       	ldi	r24, 0x06	; 6
     a90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
     a94:	8f ec       	ldi	r24, 0xCF	; 207
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     a9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     aa0:	08 95       	ret

00000aa2 <sprintf>:
     aa2:	ae e0       	ldi	r26, 0x0E	; 14
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e7 e5       	ldi	r30, 0x57	; 87
     aa8:	f5 e0       	ldi	r31, 0x05	; 5
     aaa:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__prologue_saves__+0x1c>
     aae:	0d 89       	ldd	r16, Y+21	; 0x15
     ab0:	1e 89       	ldd	r17, Y+22	; 0x16
     ab2:	86 e0       	ldi	r24, 0x06	; 6
     ab4:	8c 83       	std	Y+4, r24	; 0x04
     ab6:	1a 83       	std	Y+2, r17	; 0x02
     ab8:	09 83       	std	Y+1, r16	; 0x01
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	9f e7       	ldi	r25, 0x7F	; 127
     abe:	9e 83       	std	Y+6, r25	; 0x06
     ac0:	8d 83       	std	Y+5, r24	; 0x05
     ac2:	ae 01       	movw	r20, r28
     ac4:	47 5e       	subi	r20, 0xE7	; 231
     ac6:	5f 4f       	sbci	r21, 0xFF	; 255
     ac8:	6f 89       	ldd	r22, Y+23	; 0x17
     aca:	78 8d       	ldd	r23, Y+24	; 0x18
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	0e 94 73 05 	call	0xae6	; 0xae6 <vfprintf>
     ad4:	ef 81       	ldd	r30, Y+7	; 0x07
     ad6:	f8 85       	ldd	r31, Y+8	; 0x08
     ad8:	e0 0f       	add	r30, r16
     ada:	f1 1f       	adc	r31, r17
     adc:	10 82       	st	Z, r1
     ade:	2e 96       	adiw	r28, 0x0e	; 14
     ae0:	e4 e0       	ldi	r30, 0x04	; 4
     ae2:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__epilogue_restores__+0x1c>

00000ae6 <vfprintf>:
     ae6:	ab e0       	ldi	r26, 0x0B	; 11
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e9 e7       	ldi	r30, 0x79	; 121
     aec:	f5 e0       	ldi	r31, 0x05	; 5
     aee:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__prologue_saves__>
     af2:	6c 01       	movw	r12, r24
     af4:	7b 01       	movw	r14, r22
     af6:	8a 01       	movw	r16, r20
     af8:	fc 01       	movw	r30, r24
     afa:	17 82       	std	Z+7, r1	; 0x07
     afc:	16 82       	std	Z+6, r1	; 0x06
     afe:	83 81       	ldd	r24, Z+3	; 0x03
     b00:	81 ff       	sbrs	r24, 1
     b02:	cc c1       	rjmp	.+920    	; 0xe9c <vfprintf+0x3b6>
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	3c 01       	movw	r6, r24
     b0a:	f6 01       	movw	r30, r12
     b0c:	93 81       	ldd	r25, Z+3	; 0x03
     b0e:	f7 01       	movw	r30, r14
     b10:	93 fd       	sbrc	r25, 3
     b12:	85 91       	lpm	r24, Z+
     b14:	93 ff       	sbrs	r25, 3
     b16:	81 91       	ld	r24, Z+
     b18:	7f 01       	movw	r14, r30
     b1a:	88 23       	and	r24, r24
     b1c:	09 f4       	brne	.+2      	; 0xb20 <vfprintf+0x3a>
     b1e:	ba c1       	rjmp	.+884    	; 0xe94 <vfprintf+0x3ae>
     b20:	85 32       	cpi	r24, 0x25	; 37
     b22:	39 f4       	brne	.+14     	; 0xb32 <vfprintf+0x4c>
     b24:	93 fd       	sbrc	r25, 3
     b26:	85 91       	lpm	r24, Z+
     b28:	93 ff       	sbrs	r25, 3
     b2a:	81 91       	ld	r24, Z+
     b2c:	7f 01       	movw	r14, r30
     b2e:	85 32       	cpi	r24, 0x25	; 37
     b30:	29 f4       	brne	.+10     	; 0xb3c <vfprintf+0x56>
     b32:	b6 01       	movw	r22, r12
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     b3a:	e7 cf       	rjmp	.-50     	; 0xb0a <vfprintf+0x24>
     b3c:	91 2c       	mov	r9, r1
     b3e:	21 2c       	mov	r2, r1
     b40:	31 2c       	mov	r3, r1
     b42:	ff e1       	ldi	r31, 0x1F	; 31
     b44:	f3 15       	cp	r31, r3
     b46:	d8 f0       	brcs	.+54     	; 0xb7e <vfprintf+0x98>
     b48:	8b 32       	cpi	r24, 0x2B	; 43
     b4a:	79 f0       	breq	.+30     	; 0xb6a <vfprintf+0x84>
     b4c:	38 f4       	brcc	.+14     	; 0xb5c <vfprintf+0x76>
     b4e:	80 32       	cpi	r24, 0x20	; 32
     b50:	79 f0       	breq	.+30     	; 0xb70 <vfprintf+0x8a>
     b52:	83 32       	cpi	r24, 0x23	; 35
     b54:	a1 f4       	brne	.+40     	; 0xb7e <vfprintf+0x98>
     b56:	23 2d       	mov	r18, r3
     b58:	20 61       	ori	r18, 0x10	; 16
     b5a:	1d c0       	rjmp	.+58     	; 0xb96 <vfprintf+0xb0>
     b5c:	8d 32       	cpi	r24, 0x2D	; 45
     b5e:	61 f0       	breq	.+24     	; 0xb78 <vfprintf+0x92>
     b60:	80 33       	cpi	r24, 0x30	; 48
     b62:	69 f4       	brne	.+26     	; 0xb7e <vfprintf+0x98>
     b64:	23 2d       	mov	r18, r3
     b66:	21 60       	ori	r18, 0x01	; 1
     b68:	16 c0       	rjmp	.+44     	; 0xb96 <vfprintf+0xb0>
     b6a:	83 2d       	mov	r24, r3
     b6c:	82 60       	ori	r24, 0x02	; 2
     b6e:	38 2e       	mov	r3, r24
     b70:	e3 2d       	mov	r30, r3
     b72:	e4 60       	ori	r30, 0x04	; 4
     b74:	3e 2e       	mov	r3, r30
     b76:	2a c0       	rjmp	.+84     	; 0xbcc <vfprintf+0xe6>
     b78:	f3 2d       	mov	r31, r3
     b7a:	f8 60       	ori	r31, 0x08	; 8
     b7c:	1d c0       	rjmp	.+58     	; 0xbb8 <vfprintf+0xd2>
     b7e:	37 fc       	sbrc	r3, 7
     b80:	2d c0       	rjmp	.+90     	; 0xbdc <vfprintf+0xf6>
     b82:	20 ed       	ldi	r18, 0xD0	; 208
     b84:	28 0f       	add	r18, r24
     b86:	2a 30       	cpi	r18, 0x0A	; 10
     b88:	40 f0       	brcs	.+16     	; 0xb9a <vfprintf+0xb4>
     b8a:	8e 32       	cpi	r24, 0x2E	; 46
     b8c:	b9 f4       	brne	.+46     	; 0xbbc <vfprintf+0xd6>
     b8e:	36 fc       	sbrc	r3, 6
     b90:	81 c1       	rjmp	.+770    	; 0xe94 <vfprintf+0x3ae>
     b92:	23 2d       	mov	r18, r3
     b94:	20 64       	ori	r18, 0x40	; 64
     b96:	32 2e       	mov	r3, r18
     b98:	19 c0       	rjmp	.+50     	; 0xbcc <vfprintf+0xe6>
     b9a:	36 fe       	sbrs	r3, 6
     b9c:	06 c0       	rjmp	.+12     	; 0xbaa <vfprintf+0xc4>
     b9e:	8a e0       	ldi	r24, 0x0A	; 10
     ba0:	98 9e       	mul	r9, r24
     ba2:	20 0d       	add	r18, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	92 2e       	mov	r9, r18
     ba8:	11 c0       	rjmp	.+34     	; 0xbcc <vfprintf+0xe6>
     baa:	ea e0       	ldi	r30, 0x0A	; 10
     bac:	2e 9e       	mul	r2, r30
     bae:	20 0d       	add	r18, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	22 2e       	mov	r2, r18
     bb4:	f3 2d       	mov	r31, r3
     bb6:	f0 62       	ori	r31, 0x20	; 32
     bb8:	3f 2e       	mov	r3, r31
     bba:	08 c0       	rjmp	.+16     	; 0xbcc <vfprintf+0xe6>
     bbc:	8c 36       	cpi	r24, 0x6C	; 108
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <vfprintf+0xe2>
     bc0:	83 2d       	mov	r24, r3
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	38 2e       	mov	r3, r24
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <vfprintf+0xe6>
     bc8:	88 36       	cpi	r24, 0x68	; 104
     bca:	41 f4       	brne	.+16     	; 0xbdc <vfprintf+0xf6>
     bcc:	f7 01       	movw	r30, r14
     bce:	93 fd       	sbrc	r25, 3
     bd0:	85 91       	lpm	r24, Z+
     bd2:	93 ff       	sbrs	r25, 3
     bd4:	81 91       	ld	r24, Z+
     bd6:	7f 01       	movw	r14, r30
     bd8:	81 11       	cpse	r24, r1
     bda:	b3 cf       	rjmp	.-154    	; 0xb42 <vfprintf+0x5c>
     bdc:	98 2f       	mov	r25, r24
     bde:	9f 7d       	andi	r25, 0xDF	; 223
     be0:	95 54       	subi	r25, 0x45	; 69
     be2:	93 30       	cpi	r25, 0x03	; 3
     be4:	28 f4       	brcc	.+10     	; 0xbf0 <vfprintf+0x10a>
     be6:	0c 5f       	subi	r16, 0xFC	; 252
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	9f e3       	ldi	r25, 0x3F	; 63
     bec:	99 83       	std	Y+1, r25	; 0x01
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <vfprintf+0x124>
     bf0:	83 36       	cpi	r24, 0x63	; 99
     bf2:	31 f0       	breq	.+12     	; 0xc00 <vfprintf+0x11a>
     bf4:	83 37       	cpi	r24, 0x73	; 115
     bf6:	71 f0       	breq	.+28     	; 0xc14 <vfprintf+0x12e>
     bf8:	83 35       	cpi	r24, 0x53	; 83
     bfa:	09 f0       	breq	.+2      	; 0xbfe <vfprintf+0x118>
     bfc:	59 c0       	rjmp	.+178    	; 0xcb0 <vfprintf+0x1ca>
     bfe:	21 c0       	rjmp	.+66     	; 0xc42 <vfprintf+0x15c>
     c00:	f8 01       	movw	r30, r16
     c02:	80 81       	ld	r24, Z
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	0e 5f       	subi	r16, 0xFE	; 254
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	88 24       	eor	r8, r8
     c0c:	83 94       	inc	r8
     c0e:	91 2c       	mov	r9, r1
     c10:	53 01       	movw	r10, r6
     c12:	13 c0       	rjmp	.+38     	; 0xc3a <vfprintf+0x154>
     c14:	28 01       	movw	r4, r16
     c16:	f2 e0       	ldi	r31, 0x02	; 2
     c18:	4f 0e       	add	r4, r31
     c1a:	51 1c       	adc	r5, r1
     c1c:	f8 01       	movw	r30, r16
     c1e:	a0 80       	ld	r10, Z
     c20:	b1 80       	ldd	r11, Z+1	; 0x01
     c22:	36 fe       	sbrs	r3, 6
     c24:	03 c0       	rjmp	.+6      	; 0xc2c <vfprintf+0x146>
     c26:	69 2d       	mov	r22, r9
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <vfprintf+0x14a>
     c2c:	6f ef       	ldi	r22, 0xFF	; 255
     c2e:	7f ef       	ldi	r23, 0xFF	; 255
     c30:	c5 01       	movw	r24, r10
     c32:	0e 94 5f 07 	call	0xebe	; 0xebe <strnlen>
     c36:	4c 01       	movw	r8, r24
     c38:	82 01       	movw	r16, r4
     c3a:	f3 2d       	mov	r31, r3
     c3c:	ff 77       	andi	r31, 0x7F	; 127
     c3e:	3f 2e       	mov	r3, r31
     c40:	16 c0       	rjmp	.+44     	; 0xc6e <vfprintf+0x188>
     c42:	28 01       	movw	r4, r16
     c44:	22 e0       	ldi	r18, 0x02	; 2
     c46:	42 0e       	add	r4, r18
     c48:	51 1c       	adc	r5, r1
     c4a:	f8 01       	movw	r30, r16
     c4c:	a0 80       	ld	r10, Z
     c4e:	b1 80       	ldd	r11, Z+1	; 0x01
     c50:	36 fe       	sbrs	r3, 6
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <vfprintf+0x174>
     c54:	69 2d       	mov	r22, r9
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <vfprintf+0x178>
     c5a:	6f ef       	ldi	r22, 0xFF	; 255
     c5c:	7f ef       	ldi	r23, 0xFF	; 255
     c5e:	c5 01       	movw	r24, r10
     c60:	0e 94 54 07 	call	0xea8	; 0xea8 <strnlen_P>
     c64:	4c 01       	movw	r8, r24
     c66:	f3 2d       	mov	r31, r3
     c68:	f0 68       	ori	r31, 0x80	; 128
     c6a:	3f 2e       	mov	r3, r31
     c6c:	82 01       	movw	r16, r4
     c6e:	33 fc       	sbrc	r3, 3
     c70:	1b c0       	rjmp	.+54     	; 0xca8 <vfprintf+0x1c2>
     c72:	82 2d       	mov	r24, r2
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	88 16       	cp	r8, r24
     c78:	99 06       	cpc	r9, r25
     c7a:	b0 f4       	brcc	.+44     	; 0xca8 <vfprintf+0x1c2>
     c7c:	b6 01       	movw	r22, r12
     c7e:	80 e2       	ldi	r24, 0x20	; 32
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     c86:	2a 94       	dec	r2
     c88:	f4 cf       	rjmp	.-24     	; 0xc72 <vfprintf+0x18c>
     c8a:	f5 01       	movw	r30, r10
     c8c:	37 fc       	sbrc	r3, 7
     c8e:	85 91       	lpm	r24, Z+
     c90:	37 fe       	sbrs	r3, 7
     c92:	81 91       	ld	r24, Z+
     c94:	5f 01       	movw	r10, r30
     c96:	b6 01       	movw	r22, r12
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     c9e:	21 10       	cpse	r2, r1
     ca0:	2a 94       	dec	r2
     ca2:	21 e0       	ldi	r18, 0x01	; 1
     ca4:	82 1a       	sub	r8, r18
     ca6:	91 08       	sbc	r9, r1
     ca8:	81 14       	cp	r8, r1
     caa:	91 04       	cpc	r9, r1
     cac:	71 f7       	brne	.-36     	; 0xc8a <vfprintf+0x1a4>
     cae:	e8 c0       	rjmp	.+464    	; 0xe80 <vfprintf+0x39a>
     cb0:	84 36       	cpi	r24, 0x64	; 100
     cb2:	11 f0       	breq	.+4      	; 0xcb8 <vfprintf+0x1d2>
     cb4:	89 36       	cpi	r24, 0x69	; 105
     cb6:	41 f5       	brne	.+80     	; 0xd08 <vfprintf+0x222>
     cb8:	f8 01       	movw	r30, r16
     cba:	37 fe       	sbrs	r3, 7
     cbc:	07 c0       	rjmp	.+14     	; 0xccc <vfprintf+0x1e6>
     cbe:	60 81       	ld	r22, Z
     cc0:	71 81       	ldd	r23, Z+1	; 0x01
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	93 81       	ldd	r25, Z+3	; 0x03
     cc6:	0c 5f       	subi	r16, 0xFC	; 252
     cc8:	1f 4f       	sbci	r17, 0xFF	; 255
     cca:	08 c0       	rjmp	.+16     	; 0xcdc <vfprintf+0x1f6>
     ccc:	60 81       	ld	r22, Z
     cce:	71 81       	ldd	r23, Z+1	; 0x01
     cd0:	07 2e       	mov	r0, r23
     cd2:	00 0c       	add	r0, r0
     cd4:	88 0b       	sbc	r24, r24
     cd6:	99 0b       	sbc	r25, r25
     cd8:	0e 5f       	subi	r16, 0xFE	; 254
     cda:	1f 4f       	sbci	r17, 0xFF	; 255
     cdc:	f3 2d       	mov	r31, r3
     cde:	ff 76       	andi	r31, 0x6F	; 111
     ce0:	3f 2e       	mov	r3, r31
     ce2:	97 ff       	sbrs	r25, 7
     ce4:	09 c0       	rjmp	.+18     	; 0xcf8 <vfprintf+0x212>
     ce6:	90 95       	com	r25
     ce8:	80 95       	com	r24
     cea:	70 95       	com	r23
     cec:	61 95       	neg	r22
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	8f 4f       	sbci	r24, 0xFF	; 255
     cf2:	9f 4f       	sbci	r25, 0xFF	; 255
     cf4:	f0 68       	ori	r31, 0x80	; 128
     cf6:	3f 2e       	mov	r3, r31
     cf8:	2a e0       	ldi	r18, 0x0A	; 10
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	a3 01       	movw	r20, r6
     cfe:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__ultoa_invert>
     d02:	88 2e       	mov	r8, r24
     d04:	86 18       	sub	r8, r6
     d06:	45 c0       	rjmp	.+138    	; 0xd92 <vfprintf+0x2ac>
     d08:	85 37       	cpi	r24, 0x75	; 117
     d0a:	31 f4       	brne	.+12     	; 0xd18 <vfprintf+0x232>
     d0c:	23 2d       	mov	r18, r3
     d0e:	2f 7e       	andi	r18, 0xEF	; 239
     d10:	b2 2e       	mov	r11, r18
     d12:	2a e0       	ldi	r18, 0x0A	; 10
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	25 c0       	rjmp	.+74     	; 0xd62 <vfprintf+0x27c>
     d18:	93 2d       	mov	r25, r3
     d1a:	99 7f       	andi	r25, 0xF9	; 249
     d1c:	b9 2e       	mov	r11, r25
     d1e:	8f 36       	cpi	r24, 0x6F	; 111
     d20:	c1 f0       	breq	.+48     	; 0xd52 <vfprintf+0x26c>
     d22:	18 f4       	brcc	.+6      	; 0xd2a <vfprintf+0x244>
     d24:	88 35       	cpi	r24, 0x58	; 88
     d26:	79 f0       	breq	.+30     	; 0xd46 <vfprintf+0x260>
     d28:	b5 c0       	rjmp	.+362    	; 0xe94 <vfprintf+0x3ae>
     d2a:	80 37       	cpi	r24, 0x70	; 112
     d2c:	19 f0       	breq	.+6      	; 0xd34 <vfprintf+0x24e>
     d2e:	88 37       	cpi	r24, 0x78	; 120
     d30:	21 f0       	breq	.+8      	; 0xd3a <vfprintf+0x254>
     d32:	b0 c0       	rjmp	.+352    	; 0xe94 <vfprintf+0x3ae>
     d34:	e9 2f       	mov	r30, r25
     d36:	e0 61       	ori	r30, 0x10	; 16
     d38:	be 2e       	mov	r11, r30
     d3a:	b4 fe       	sbrs	r11, 4
     d3c:	0d c0       	rjmp	.+26     	; 0xd58 <vfprintf+0x272>
     d3e:	fb 2d       	mov	r31, r11
     d40:	f4 60       	ori	r31, 0x04	; 4
     d42:	bf 2e       	mov	r11, r31
     d44:	09 c0       	rjmp	.+18     	; 0xd58 <vfprintf+0x272>
     d46:	34 fe       	sbrs	r3, 4
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <vfprintf+0x278>
     d4a:	29 2f       	mov	r18, r25
     d4c:	26 60       	ori	r18, 0x06	; 6
     d4e:	b2 2e       	mov	r11, r18
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <vfprintf+0x278>
     d52:	28 e0       	ldi	r18, 0x08	; 8
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	05 c0       	rjmp	.+10     	; 0xd62 <vfprintf+0x27c>
     d58:	20 e1       	ldi	r18, 0x10	; 16
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <vfprintf+0x27c>
     d5e:	20 e1       	ldi	r18, 0x10	; 16
     d60:	32 e0       	ldi	r19, 0x02	; 2
     d62:	f8 01       	movw	r30, r16
     d64:	b7 fe       	sbrs	r11, 7
     d66:	07 c0       	rjmp	.+14     	; 0xd76 <vfprintf+0x290>
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	0c 5f       	subi	r16, 0xFC	; 252
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <vfprintf+0x29c>
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 5f       	subi	r16, 0xFE	; 254
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	a3 01       	movw	r20, r6
     d84:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__ultoa_invert>
     d88:	88 2e       	mov	r8, r24
     d8a:	86 18       	sub	r8, r6
     d8c:	fb 2d       	mov	r31, r11
     d8e:	ff 77       	andi	r31, 0x7F	; 127
     d90:	3f 2e       	mov	r3, r31
     d92:	36 fe       	sbrs	r3, 6
     d94:	0d c0       	rjmp	.+26     	; 0xdb0 <vfprintf+0x2ca>
     d96:	23 2d       	mov	r18, r3
     d98:	2e 7f       	andi	r18, 0xFE	; 254
     d9a:	a2 2e       	mov	r10, r18
     d9c:	89 14       	cp	r8, r9
     d9e:	58 f4       	brcc	.+22     	; 0xdb6 <vfprintf+0x2d0>
     da0:	34 fe       	sbrs	r3, 4
     da2:	0b c0       	rjmp	.+22     	; 0xdba <vfprintf+0x2d4>
     da4:	32 fc       	sbrc	r3, 2
     da6:	09 c0       	rjmp	.+18     	; 0xdba <vfprintf+0x2d4>
     da8:	83 2d       	mov	r24, r3
     daa:	8e 7e       	andi	r24, 0xEE	; 238
     dac:	a8 2e       	mov	r10, r24
     dae:	05 c0       	rjmp	.+10     	; 0xdba <vfprintf+0x2d4>
     db0:	b8 2c       	mov	r11, r8
     db2:	a3 2c       	mov	r10, r3
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <vfprintf+0x2d6>
     db6:	b8 2c       	mov	r11, r8
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <vfprintf+0x2d6>
     dba:	b9 2c       	mov	r11, r9
     dbc:	a4 fe       	sbrs	r10, 4
     dbe:	0f c0       	rjmp	.+30     	; 0xdde <vfprintf+0x2f8>
     dc0:	fe 01       	movw	r30, r28
     dc2:	e8 0d       	add	r30, r8
     dc4:	f1 1d       	adc	r31, r1
     dc6:	80 81       	ld	r24, Z
     dc8:	80 33       	cpi	r24, 0x30	; 48
     dca:	21 f4       	brne	.+8      	; 0xdd4 <vfprintf+0x2ee>
     dcc:	9a 2d       	mov	r25, r10
     dce:	99 7e       	andi	r25, 0xE9	; 233
     dd0:	a9 2e       	mov	r10, r25
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <vfprintf+0x300>
     dd4:	a2 fe       	sbrs	r10, 2
     dd6:	06 c0       	rjmp	.+12     	; 0xde4 <vfprintf+0x2fe>
     dd8:	b3 94       	inc	r11
     dda:	b3 94       	inc	r11
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <vfprintf+0x300>
     dde:	8a 2d       	mov	r24, r10
     de0:	86 78       	andi	r24, 0x86	; 134
     de2:	09 f0       	breq	.+2      	; 0xde6 <vfprintf+0x300>
     de4:	b3 94       	inc	r11
     de6:	a3 fc       	sbrc	r10, 3
     de8:	11 c0       	rjmp	.+34     	; 0xe0c <vfprintf+0x326>
     dea:	a0 fe       	sbrs	r10, 0
     dec:	06 c0       	rjmp	.+12     	; 0xdfa <vfprintf+0x314>
     dee:	b2 14       	cp	r11, r2
     df0:	88 f4       	brcc	.+34     	; 0xe14 <vfprintf+0x32e>
     df2:	28 0c       	add	r2, r8
     df4:	92 2c       	mov	r9, r2
     df6:	9b 18       	sub	r9, r11
     df8:	0e c0       	rjmp	.+28     	; 0xe16 <vfprintf+0x330>
     dfa:	b2 14       	cp	r11, r2
     dfc:	60 f4       	brcc	.+24     	; 0xe16 <vfprintf+0x330>
     dfe:	b6 01       	movw	r22, r12
     e00:	80 e2       	ldi	r24, 0x20	; 32
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e08:	b3 94       	inc	r11
     e0a:	f7 cf       	rjmp	.-18     	; 0xdfa <vfprintf+0x314>
     e0c:	b2 14       	cp	r11, r2
     e0e:	18 f4       	brcc	.+6      	; 0xe16 <vfprintf+0x330>
     e10:	2b 18       	sub	r2, r11
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <vfprintf+0x332>
     e14:	98 2c       	mov	r9, r8
     e16:	21 2c       	mov	r2, r1
     e18:	a4 fe       	sbrs	r10, 4
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <vfprintf+0x356>
     e1c:	b6 01       	movw	r22, r12
     e1e:	80 e3       	ldi	r24, 0x30	; 48
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e26:	a2 fe       	sbrs	r10, 2
     e28:	17 c0       	rjmp	.+46     	; 0xe58 <vfprintf+0x372>
     e2a:	a1 fc       	sbrc	r10, 1
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <vfprintf+0x34e>
     e2e:	88 e7       	ldi	r24, 0x78	; 120
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <vfprintf+0x352>
     e34:	88 e5       	ldi	r24, 0x58	; 88
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	b6 01       	movw	r22, r12
     e3a:	0c c0       	rjmp	.+24     	; 0xe54 <vfprintf+0x36e>
     e3c:	8a 2d       	mov	r24, r10
     e3e:	86 78       	andi	r24, 0x86	; 134
     e40:	59 f0       	breq	.+22     	; 0xe58 <vfprintf+0x372>
     e42:	a1 fe       	sbrs	r10, 1
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x364>
     e46:	8b e2       	ldi	r24, 0x2B	; 43
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <vfprintf+0x366>
     e4a:	80 e2       	ldi	r24, 0x20	; 32
     e4c:	a7 fc       	sbrc	r10, 7
     e4e:	8d e2       	ldi	r24, 0x2D	; 45
     e50:	b6 01       	movw	r22, r12
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e58:	89 14       	cp	r8, r9
     e5a:	38 f4       	brcc	.+14     	; 0xe6a <vfprintf+0x384>
     e5c:	b6 01       	movw	r22, r12
     e5e:	80 e3       	ldi	r24, 0x30	; 48
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e66:	9a 94       	dec	r9
     e68:	f7 cf       	rjmp	.-18     	; 0xe58 <vfprintf+0x372>
     e6a:	8a 94       	dec	r8
     e6c:	f3 01       	movw	r30, r6
     e6e:	e8 0d       	add	r30, r8
     e70:	f1 1d       	adc	r31, r1
     e72:	80 81       	ld	r24, Z
     e74:	b6 01       	movw	r22, r12
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e7c:	81 10       	cpse	r8, r1
     e7e:	f5 cf       	rjmp	.-22     	; 0xe6a <vfprintf+0x384>
     e80:	22 20       	and	r2, r2
     e82:	09 f4       	brne	.+2      	; 0xe86 <vfprintf+0x3a0>
     e84:	42 ce       	rjmp	.-892    	; 0xb0a <vfprintf+0x24>
     e86:	b6 01       	movw	r22, r12
     e88:	80 e2       	ldi	r24, 0x20	; 32
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e90:	2a 94       	dec	r2
     e92:	f6 cf       	rjmp	.-20     	; 0xe80 <vfprintf+0x39a>
     e94:	f6 01       	movw	r30, r12
     e96:	86 81       	ldd	r24, Z+6	; 0x06
     e98:	97 81       	ldd	r25, Z+7	; 0x07
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <vfprintf+0x3ba>
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	9f ef       	ldi	r25, 0xFF	; 255
     ea0:	2b 96       	adiw	r28, 0x0b	; 11
     ea2:	e2 e1       	ldi	r30, 0x12	; 18
     ea4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__epilogue_restores__>

00000ea8 <strnlen_P>:
     ea8:	fc 01       	movw	r30, r24
     eaa:	05 90       	lpm	r0, Z+
     eac:	61 50       	subi	r22, 0x01	; 1
     eae:	70 40       	sbci	r23, 0x00	; 0
     eb0:	01 10       	cpse	r0, r1
     eb2:	d8 f7       	brcc	.-10     	; 0xeaa <strnlen_P+0x2>
     eb4:	80 95       	com	r24
     eb6:	90 95       	com	r25
     eb8:	8e 0f       	add	r24, r30
     eba:	9f 1f       	adc	r25, r31
     ebc:	08 95       	ret

00000ebe <strnlen>:
     ebe:	fc 01       	movw	r30, r24
     ec0:	61 50       	subi	r22, 0x01	; 1
     ec2:	70 40       	sbci	r23, 0x00	; 0
     ec4:	01 90       	ld	r0, Z+
     ec6:	01 10       	cpse	r0, r1
     ec8:	d8 f7       	brcc	.-10     	; 0xec0 <strnlen+0x2>
     eca:	80 95       	com	r24
     ecc:	90 95       	com	r25
     ece:	8e 0f       	add	r24, r30
     ed0:	9f 1f       	adc	r25, r31
     ed2:	08 95       	ret

00000ed4 <fputc>:
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	fb 01       	movw	r30, r22
     ede:	23 81       	ldd	r18, Z+3	; 0x03
     ee0:	21 fd       	sbrc	r18, 1
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <fputc+0x16>
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	9f ef       	ldi	r25, 0xFF	; 255
     ee8:	2c c0       	rjmp	.+88     	; 0xf42 <fputc+0x6e>
     eea:	22 ff       	sbrs	r18, 2
     eec:	16 c0       	rjmp	.+44     	; 0xf1a <fputc+0x46>
     eee:	46 81       	ldd	r20, Z+6	; 0x06
     ef0:	57 81       	ldd	r21, Z+7	; 0x07
     ef2:	24 81       	ldd	r18, Z+4	; 0x04
     ef4:	35 81       	ldd	r19, Z+5	; 0x05
     ef6:	42 17       	cp	r20, r18
     ef8:	53 07       	cpc	r21, r19
     efa:	44 f4       	brge	.+16     	; 0xf0c <fputc+0x38>
     efc:	a0 81       	ld	r26, Z
     efe:	b1 81       	ldd	r27, Z+1	; 0x01
     f00:	9d 01       	movw	r18, r26
     f02:	2f 5f       	subi	r18, 0xFF	; 255
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	31 83       	std	Z+1, r19	; 0x01
     f08:	20 83       	st	Z, r18
     f0a:	8c 93       	st	X, r24
     f0c:	26 81       	ldd	r18, Z+6	; 0x06
     f0e:	37 81       	ldd	r19, Z+7	; 0x07
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	37 83       	std	Z+7, r19	; 0x07
     f16:	26 83       	std	Z+6, r18	; 0x06
     f18:	14 c0       	rjmp	.+40     	; 0xf42 <fputc+0x6e>
     f1a:	8b 01       	movw	r16, r22
     f1c:	ec 01       	movw	r28, r24
     f1e:	fb 01       	movw	r30, r22
     f20:	00 84       	ldd	r0, Z+8	; 0x08
     f22:	f1 85       	ldd	r31, Z+9	; 0x09
     f24:	e0 2d       	mov	r30, r0
     f26:	09 95       	icall
     f28:	89 2b       	or	r24, r25
     f2a:	e1 f6       	brne	.-72     	; 0xee4 <fputc+0x10>
     f2c:	d8 01       	movw	r26, r16
     f2e:	16 96       	adiw	r26, 0x06	; 6
     f30:	8d 91       	ld	r24, X+
     f32:	9c 91       	ld	r25, X
     f34:	17 97       	sbiw	r26, 0x07	; 7
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	17 96       	adiw	r26, 0x07	; 7
     f3a:	9c 93       	st	X, r25
     f3c:	8e 93       	st	-X, r24
     f3e:	16 97       	sbiw	r26, 0x06	; 6
     f40:	ce 01       	movw	r24, r28
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	08 95       	ret

00000f4c <__ultoa_invert>:
     f4c:	fa 01       	movw	r30, r20
     f4e:	aa 27       	eor	r26, r26
     f50:	28 30       	cpi	r18, 0x08	; 8
     f52:	51 f1       	breq	.+84     	; 0xfa8 <__ultoa_invert+0x5c>
     f54:	20 31       	cpi	r18, 0x10	; 16
     f56:	81 f1       	breq	.+96     	; 0xfb8 <__ultoa_invert+0x6c>
     f58:	e8 94       	clt
     f5a:	6f 93       	push	r22
     f5c:	6e 7f       	andi	r22, 0xFE	; 254
     f5e:	6e 5f       	subi	r22, 0xFE	; 254
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	8f 4f       	sbci	r24, 0xFF	; 255
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	af 4f       	sbci	r26, 0xFF	; 255
     f68:	b1 e0       	ldi	r27, 0x01	; 1
     f6a:	3e d0       	rcall	.+124    	; 0xfe8 <__ultoa_invert+0x9c>
     f6c:	b4 e0       	ldi	r27, 0x04	; 4
     f6e:	3c d0       	rcall	.+120    	; 0xfe8 <__ultoa_invert+0x9c>
     f70:	67 0f       	add	r22, r23
     f72:	78 1f       	adc	r23, r24
     f74:	89 1f       	adc	r24, r25
     f76:	9a 1f       	adc	r25, r26
     f78:	a1 1d       	adc	r26, r1
     f7a:	68 0f       	add	r22, r24
     f7c:	79 1f       	adc	r23, r25
     f7e:	8a 1f       	adc	r24, r26
     f80:	91 1d       	adc	r25, r1
     f82:	a1 1d       	adc	r26, r1
     f84:	6a 0f       	add	r22, r26
     f86:	71 1d       	adc	r23, r1
     f88:	81 1d       	adc	r24, r1
     f8a:	91 1d       	adc	r25, r1
     f8c:	a1 1d       	adc	r26, r1
     f8e:	20 d0       	rcall	.+64     	; 0xfd0 <__ultoa_invert+0x84>
     f90:	09 f4       	brne	.+2      	; 0xf94 <__ultoa_invert+0x48>
     f92:	68 94       	set
     f94:	3f 91       	pop	r19
     f96:	2a e0       	ldi	r18, 0x0A	; 10
     f98:	26 9f       	mul	r18, r22
     f9a:	11 24       	eor	r1, r1
     f9c:	30 19       	sub	r19, r0
     f9e:	30 5d       	subi	r19, 0xD0	; 208
     fa0:	31 93       	st	Z+, r19
     fa2:	de f6       	brtc	.-74     	; 0xf5a <__ultoa_invert+0xe>
     fa4:	cf 01       	movw	r24, r30
     fa6:	08 95       	ret
     fa8:	46 2f       	mov	r20, r22
     faa:	47 70       	andi	r20, 0x07	; 7
     fac:	40 5d       	subi	r20, 0xD0	; 208
     fae:	41 93       	st	Z+, r20
     fb0:	b3 e0       	ldi	r27, 0x03	; 3
     fb2:	0f d0       	rcall	.+30     	; 0xfd2 <__ultoa_invert+0x86>
     fb4:	c9 f7       	brne	.-14     	; 0xfa8 <__ultoa_invert+0x5c>
     fb6:	f6 cf       	rjmp	.-20     	; 0xfa4 <__ultoa_invert+0x58>
     fb8:	46 2f       	mov	r20, r22
     fba:	4f 70       	andi	r20, 0x0F	; 15
     fbc:	40 5d       	subi	r20, 0xD0	; 208
     fbe:	4a 33       	cpi	r20, 0x3A	; 58
     fc0:	18 f0       	brcs	.+6      	; 0xfc8 <__ultoa_invert+0x7c>
     fc2:	49 5d       	subi	r20, 0xD9	; 217
     fc4:	31 fd       	sbrc	r19, 1
     fc6:	40 52       	subi	r20, 0x20	; 32
     fc8:	41 93       	st	Z+, r20
     fca:	02 d0       	rcall	.+4      	; 0xfd0 <__ultoa_invert+0x84>
     fcc:	a9 f7       	brne	.-22     	; 0xfb8 <__ultoa_invert+0x6c>
     fce:	ea cf       	rjmp	.-44     	; 0xfa4 <__ultoa_invert+0x58>
     fd0:	b4 e0       	ldi	r27, 0x04	; 4
     fd2:	a6 95       	lsr	r26
     fd4:	97 95       	ror	r25
     fd6:	87 95       	ror	r24
     fd8:	77 95       	ror	r23
     fda:	67 95       	ror	r22
     fdc:	ba 95       	dec	r27
     fde:	c9 f7       	brne	.-14     	; 0xfd2 <__ultoa_invert+0x86>
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	61 05       	cpc	r22, r1
     fe4:	71 05       	cpc	r23, r1
     fe6:	08 95       	ret
     fe8:	9b 01       	movw	r18, r22
     fea:	ac 01       	movw	r20, r24
     fec:	0a 2e       	mov	r0, r26
     fee:	06 94       	lsr	r0
     ff0:	57 95       	ror	r21
     ff2:	47 95       	ror	r20
     ff4:	37 95       	ror	r19
     ff6:	27 95       	ror	r18
     ff8:	ba 95       	dec	r27
     ffa:	c9 f7       	brne	.-14     	; 0xfee <__ultoa_invert+0xa2>
     ffc:	62 0f       	add	r22, r18
     ffe:	73 1f       	adc	r23, r19
    1000:	84 1f       	adc	r24, r20
    1002:	95 1f       	adc	r25, r21
    1004:	a0 1d       	adc	r26, r0
    1006:	08 95       	ret

00001008 <__prologue_saves__>:
    1008:	2f 92       	push	r2
    100a:	3f 92       	push	r3
    100c:	4f 92       	push	r4
    100e:	5f 92       	push	r5
    1010:	6f 92       	push	r6
    1012:	7f 92       	push	r7
    1014:	8f 92       	push	r8
    1016:	9f 92       	push	r9
    1018:	af 92       	push	r10
    101a:	bf 92       	push	r11
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	ca 1b       	sub	r28, r26
    1032:	db 0b       	sbc	r29, r27
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	09 94       	ijmp

00001040 <__epilogue_restores__>:
    1040:	2a 88       	ldd	r2, Y+18	; 0x12
    1042:	39 88       	ldd	r3, Y+17	; 0x11
    1044:	48 88       	ldd	r4, Y+16	; 0x10
    1046:	5f 84       	ldd	r5, Y+15	; 0x0f
    1048:	6e 84       	ldd	r6, Y+14	; 0x0e
    104a:	7d 84       	ldd	r7, Y+13	; 0x0d
    104c:	8c 84       	ldd	r8, Y+12	; 0x0c
    104e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1050:	aa 84       	ldd	r10, Y+10	; 0x0a
    1052:	b9 84       	ldd	r11, Y+9	; 0x09
    1054:	c8 84       	ldd	r12, Y+8	; 0x08
    1056:	df 80       	ldd	r13, Y+7	; 0x07
    1058:	ee 80       	ldd	r14, Y+6	; 0x06
    105a:	fd 80       	ldd	r15, Y+5	; 0x05
    105c:	0c 81       	ldd	r16, Y+4	; 0x04
    105e:	1b 81       	ldd	r17, Y+3	; 0x03
    1060:	aa 81       	ldd	r26, Y+2	; 0x02
    1062:	b9 81       	ldd	r27, Y+1	; 0x01
    1064:	ce 0f       	add	r28, r30
    1066:	d1 1d       	adc	r29, r1
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	ed 01       	movw	r28, r26
    1074:	08 95       	ret

00001076 <_exit>:
    1076:	f8 94       	cli

00001078 <__stop_program>:
    1078:	ff cf       	rjmp	.-2      	; 0x1078 <__stop_program>
