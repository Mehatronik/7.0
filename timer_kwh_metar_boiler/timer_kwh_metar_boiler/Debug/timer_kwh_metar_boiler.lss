
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  0000272e  000027c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000272e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  008001c8  008001c8  0000288a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000288a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b86  00000000  00000000  00002be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101c  00000000  00000000  00005766  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ead  00000000  00000000  00006782  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000798  00000000  00000000  00008630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b4f  00000000  00000000  00008dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024aa  00000000  00000000  00009917  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000bdc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_4>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_14>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__vector_18>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_20>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_21>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <lcd1602_init+0xe>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <sati_ispis+0x36>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <__vector_21+0x14>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	ee e2       	ldi	r30, 0x2E	; 46
     176:	f7 e2       	ldi	r31, 0x27	; 39
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a8 3c       	cpi	r26, 0xC8	; 200
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	22 e0       	ldi	r18, 0x02	; 2
     186:	a8 ec       	ldi	r26, 0xC8	; 200
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	ac 34       	cpi	r26, 0x4C	; 76
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 a8 09 	call	0x1350	; 0x1350 <main>
     198:	0c 94 95 13 	jmp	0x272a	; 0x272a <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <ADC_init>:


void ADC_init()
{
	
	PRR = 0;						//power reduction off
     1a0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
     1a4:	80 ec       	ldi	r24, 0xC0	; 192
     1a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
     1aa:	8e ee       	ldi	r24, 0xEE	; 238
     1ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
     1b0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
     1b4:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <ad_kanal>
     1b8:	08 95       	ret

000001ba <__vector_21>:


/* TODO: u ISR-u neka bude samo flag, a obrada podataka izdvojeno, jer je ovo glup nacin, da racun radim u prekidnoj rutini */

ISR(ADC_vect)
{
     1ba:	1f 92       	push	r1
     1bc:	0f 92       	push	r0
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	0f 92       	push	r0
     1c2:	11 24       	eor	r1, r1
     1c4:	8f 93       	push	r24
	/*
	 * AD konverzija
	 * ISR okine kada je gotova konverzija
	 */
	isr_adc = 1;	//set flag
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__data_end>

}
     1cc:	8f 91       	pop	r24
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <adc_read>:

void adc_read()
{
	
	if (isr_adc)
     1d8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
     1dc:	88 23       	and	r24, r24
     1de:	09 f4       	brne	.+2      	; 0x1e2 <adc_read+0xa>
     1e0:	72 c0       	rjmp	.+228    	; 0x2c6 <adc_read+0xee>
	{
		isr_adc = 0;	//reset flag
     1e2:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <__data_end>
	
	
		//upis ad konverzije oba kanala u odgovarajuce promenljive
		if(ad_kanal == 0)
     1e6:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <ad_kanal>
     1ea:	81 11       	cpse	r24, r1
     1ec:	09 c0       	rjmp	.+18     	; 0x200 <adc_read+0x28>
			napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
     1ee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1f2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1f6:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <napon+0x1>
     1fa:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <napon>
     1fe:	12 c0       	rjmp	.+36     	; 0x224 <adc_read+0x4c>
		else if(ad_kanal == 1)
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	81 f4       	brne	.+32     	; 0x224 <adc_read+0x4c>
			struja = (float)ADC;
     204:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     208:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__floatunsisf>
     214:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <struja>
     218:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <struja+0x1>
     21c:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <struja+0x2>
     220:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <struja+0x3>
	
		//npr: napon 1023 = 280V
		//     struja 1023 = 25A
		napon = napon/3.65;
     224:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <napon>
     228:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <napon+0x1>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__floatunsisf>
     234:	2a e9       	ldi	r18, 0x9A	; 154
     236:	39 e9       	ldi	r19, 0x99	; 153
     238:	49 e6       	ldi	r20, 0x69	; 105
     23a:	50 e4       	ldi	r21, 0x40	; 64
     23c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__divsf3>
     240:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__fixunssfsi>
     244:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <napon+0x1>
     248:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <napon>
		struja = struja/40.92;
     24c:	24 e1       	ldi	r18, 0x14	; 20
     24e:	3e ea       	ldi	r19, 0xAE	; 174
     250:	43 e2       	ldi	r20, 0x23	; 35
     252:	52 e4       	ldi	r21, 0x42	; 66
     254:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <struja>
     258:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <struja+0x1>
     25c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <struja+0x2>
     260:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <struja+0x3>
     264:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__divsf3>
     268:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <struja>
     26c:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <struja+0x1>
     270:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <struja+0x2>
     274:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <struja+0x3>
		//snaga = (napon * struja)/1000.0;	//kW
	
		/**************************************************************************************************************/
		ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     278:	ea e7       	ldi	r30, 0x7A	; 122
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	8f 77       	andi	r24, 0x7F	; 127
     280:	80 83       	st	Z, r24
	
	
		ad_kanal++;			//inkrementiraj kanal
     282:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <ad_kanal>
     286:	8f 5f       	subi	r24, 0xFF	; 255
     288:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <ad_kanal>
		if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     28c:	82 30       	cpi	r24, 0x02	; 2
     28e:	18 f0       	brcs	.+6      	; 0x296 <adc_read+0xbe>
			ad_kanal = 0;
     290:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <ad_kanal>
     294:	05 c0       	rjmp	.+10     	; 0x2a0 <adc_read+0xc8>
	


	
		//multipleksiranje ad ulaza; tj. promena ad kanala
		switch(ad_kanal)
     296:	88 23       	and	r24, r24
     298:	19 f0       	breq	.+6      	; 0x2a0 <adc_read+0xc8>
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	39 f0       	breq	.+14     	; 0x2ac <adc_read+0xd4>
     29e:	0e c0       	rjmp	.+28     	; 0x2bc <adc_read+0xe4>
		{
			case 0:
			ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     2a0:	ec e7       	ldi	r30, 0x7C	; 124
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	8c 7f       	andi	r24, 0xFC	; 252
     2a8:	80 83       	st	Z, r24
			break;
     2aa:	08 c0       	rjmp	.+16     	; 0x2bc <adc_read+0xe4>
		
			case 1:
			ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     2ac:	ec e7       	ldi	r30, 0x7C	; 124
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	8d 7f       	andi	r24, 0xFD	; 253
     2b4:	80 83       	st	Z, r24
			ADMUX |= (0b1);
     2b6:	80 81       	ld	r24, Z
     2b8:	81 60       	ori	r24, 0x01	; 1
     2ba:	80 83       	st	Z, r24
		}
	
	
		//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala.
	
		ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     2bc:	ea e7       	ldi	r30, 0x7A	; 122
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	80 6c       	ori	r24, 0xC0	; 192
     2c4:	80 83       	st	Z, r24
     2c6:	08 95       	ret

000002c8 <EEPROM_read>:


uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     2c8:	f9 99       	sbic	0x1f, 1	; 31
     2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
     2cc:	92 bd       	out	0x22, r25	; 34
     2ce:	81 bd       	out	0x21, r24	; 33
	
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     2d0:	f8 9a       	sbi	0x1f, 0	; 31
	
	/* Return data from Data Register */
	return EEDR;
     2d2:	80 b5       	in	r24, 0x20	; 32
}
     2d4:	08 95       	ret

000002d6 <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     2d6:	f9 99       	sbic	0x1f, 1	; 31
     2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <EEPROM_write>
	
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     2da:	92 bd       	out	0x22, r25	; 34
     2dc:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     2de:	60 bd       	out	0x20, r22	; 32
	
	/**********************!!!!!!!!!!!!!!!!!!!!!!***************************/
	cli();									//zabrana interapta, po preporuci iz datasheet-a, doci ce do write-faila ako se desi interapt izmedju ova dva koraka
     2e0:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     2e2:	fa 9a       	sbi	0x1f, 2	; 31
	
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     2e4:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();									//dozvola interapta
     2e6:	78 94       	sei
     2e8:	08 95       	ret

000002ea <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     2ea:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     2ee:	88 e4       	ldi	r24, 0x48	; 72
     2f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     2f4:	08 95       	ret

000002f6 <i2c_start_wait>:
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	ec eb       	ldi	r30, 0xBC	; 188
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	24 ea       	ldi	r18, 0xA4	; 164
     300:	a9 eb       	ldi	r26, 0xB9	; 185
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	cb eb       	ldi	r28, 0xBB	; 187
     306:	d0 e0       	ldi	r29, 0x00	; 0
     308:	34 e8       	ldi	r19, 0x84	; 132
     30a:	44 e9       	ldi	r20, 0x94	; 148
     30c:	20 83       	st	Z, r18
     30e:	90 81       	ld	r25, Z
     310:	99 23       	and	r25, r25
     312:	ec f7       	brge	.-6      	; 0x30e <i2c_start_wait+0x18>
     314:	9c 91       	ld	r25, X
     316:	98 7f       	andi	r25, 0xF8	; 248
     318:	98 30       	cpi	r25, 0x08	; 8
     31a:	11 f0       	breq	.+4      	; 0x320 <i2c_start_wait+0x2a>
     31c:	90 31       	cpi	r25, 0x10	; 16
     31e:	b1 f7       	brne	.-20     	; 0x30c <i2c_start_wait+0x16>
     320:	88 83       	st	Y, r24
     322:	30 83       	st	Z, r19
     324:	90 81       	ld	r25, Z
     326:	99 23       	and	r25, r25
     328:	ec f7       	brge	.-6      	; 0x324 <i2c_start_wait+0x2e>
     32a:	9c 91       	ld	r25, X
     32c:	98 7f       	andi	r25, 0xF8	; 248
     32e:	90 32       	cpi	r25, 0x20	; 32
     330:	11 f0       	breq	.+4      	; 0x336 <i2c_start_wait+0x40>
     332:	98 35       	cpi	r25, 0x58	; 88
     334:	29 f4       	brne	.+10     	; 0x340 <i2c_start_wait+0x4a>
     336:	40 83       	st	Z, r20
     338:	90 81       	ld	r25, Z
     33a:	94 fd       	sbrc	r25, 4
     33c:	fd cf       	rjmp	.-6      	; 0x338 <i2c_start_wait+0x42>
     33e:	e6 cf       	rjmp	.-52     	; 0x30c <i2c_start_wait+0x16>
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <i2c_stop>:
     346:	84 e9       	ldi	r24, 0x94	; 148
     348:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     34c:	ec eb       	ldi	r30, 0xBC	; 188
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	84 fd       	sbrc	r24, 4
     354:	fd cf       	rjmp	.-6      	; 0x350 <i2c_stop+0xa>
     356:	08 95       	ret

00000358 <i2c_write>:
     358:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     35c:	84 e8       	ldi	r24, 0x84	; 132
     35e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     362:	ec eb       	ldi	r30, 0xBC	; 188
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	88 23       	and	r24, r24
     36a:	ec f7       	brge	.-6      	; 0x366 <i2c_write+0xe>
     36c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     370:	98 7f       	andi	r25, 0xF8	; 248
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	98 32       	cpi	r25, 0x28	; 40
     376:	09 f4       	brne	.+2      	; 0x37a <i2c_write+0x22>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	08 95       	ret

0000037c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     37c:	84 e8       	ldi	r24, 0x84	; 132
     37e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     382:	ec eb       	ldi	r30, 0xBC	; 188
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	88 23       	and	r24, r24
     38a:	ec f7       	brge	.-6      	; 0x386 <i2c_readNak+0xa>
	
    return TWDR;
     38c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     390:	08 95       	ret

00000392 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     392:	cf 93       	push	r28
     394:	c8 2f       	mov	r28, r24
     396:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     398:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_start_wait>
	i2c_write(value);                      // write 
     39c:	8c 2f       	mov	r24, r28
     39e:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     3a2:	0e 94 a3 01 	call	0x346	; 0x346 <i2c_stop>
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <sati_ispis>:




void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	fc 01       	movw	r30, r24
     3b4:	06 2f       	mov	r16, r22
     3b6:	17 2f       	mov	r17, r23
     3b8:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     3ba:	21 11       	cpse	r18, r1
     3bc:	28 c0       	rjmp	.+80     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		(*sat)++;
     3be:	80 81       	ld	r24, Z
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
     3c0:	99 ee       	ldi	r25, 0xE9	; 233
     3c2:	98 0f       	add	r25, r24
     3c4:	96 30       	cpi	r25, 0x06	; 6
     3c6:	18 f0       	brcs	.+6      	; 0x3ce <sati_ispis+0x24>
void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sat)++;
     3c8:	8f 5f       	subi	r24, 0xFF	; 255
     3ca:	80 83       	st	Z, r24
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <sati_ispis+0x26>
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
			*sat = 0;
     3ce:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sat);
     3d0:	80 81       	ld	r24, Z
     3d2:	1f 92       	push	r1
     3d4:	8f 93       	push	r24
     3d6:	8a e2       	ldi	r24, 0x2A	; 42
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	9f 93       	push	r25
     3dc:	8f 93       	push	r24
     3de:	1f 93       	push	r17
     3e0:	0f 93       	push	r16
     3e2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     3e6:	88 81       	ld	r24, Y
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	81 50       	subi	r24, 0x01	; 1
     3ec:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     3f0:	80 2f       	mov	r24, r16
     3f2:	91 2f       	mov	r25, r17
     3f4:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	88 81       	ld	r24, Y
     3fc:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	28 c0       	rjmp	.+80     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if (inc_dec == UMANJI)
     40e:	21 30       	cpi	r18, 0x01	; 1
     410:	31 f5       	brne	.+76     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	{
		(*sat)--;
     412:	80 81       	ld	r24, Z
     414:	81 50       	subi	r24, 0x01	; 1
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     416:	8a 3f       	cpi	r24, 0xFA	; 250
     418:	10 f4       	brcc	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sat)--;
     41a:	80 83       	st	Z, r24
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sat = 23;
     41e:	87 e1       	ldi	r24, 0x17	; 23
     420:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sat);
     422:	80 81       	ld	r24, Z
     424:	1f 92       	push	r1
     426:	8f 93       	push	r24
     428:	8a e2       	ldi	r24, 0x2A	; 42
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	9f 93       	push	r25
     42e:	8f 93       	push	r24
     430:	1f 93       	push	r17
     432:	0f 93       	push	r16
     434:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     438:	88 81       	ld	r24, Y
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	81 50       	subi	r24, 0x01	; 1
     43e:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     442:	80 2f       	mov	r24, r16
     444:	91 2f       	mov	r25, r17
     446:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	88 81       	ld	r24, Y
     44e:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
	}
	
	
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <minuti_ispis>:

void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	fc 01       	movw	r30, r24
     472:	06 2f       	mov	r16, r22
     474:	17 2f       	mov	r17, r23
     476:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     478:	21 11       	cpse	r18, r1
     47a:	28 c0       	rjmp	.+80     	; 0x4cc <minuti_ispis+0x64>
	{
		(*minut)++;
     47c:	80 81       	ld	r24, Z
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
     47e:	95 ec       	ldi	r25, 0xC5	; 197
     480:	98 0f       	add	r25, r24
     482:	95 30       	cpi	r25, 0x05	; 5
     484:	18 f0       	brcs	.+6      	; 0x48c <minuti_ispis+0x24>
void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*minut)++;
     486:	8f 5f       	subi	r24, 0xFF	; 255
     488:	80 83       	st	Z, r24
     48a:	01 c0       	rjmp	.+2      	; 0x48e <minuti_ispis+0x26>
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
			*minut = 0;
     48c:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *minut);
     48e:	80 81       	ld	r24, Z
     490:	1f 92       	push	r1
     492:	8f 93       	push	r24
     494:	8a e2       	ldi	r24, 0x2A	; 42
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	1f 93       	push	r17
     49e:	0f 93       	push	r16
     4a0:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     4a4:	88 81       	ld	r24, Y
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	81 50       	subi	r24, 0x01	; 1
     4aa:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     4ae:	80 2f       	mov	r24, r16
     4b0:	91 2f       	mov	r25, r17
     4b2:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	88 81       	ld	r24, Y
     4ba:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	28 c0       	rjmp	.+80     	; 0x51c <minuti_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     4cc:	21 30       	cpi	r18, 0x01	; 1
     4ce:	31 f5       	brne	.+76     	; 0x51c <minuti_ispis+0xb4>
	{
		(*minut)--;
     4d0:	80 81       	ld	r24, Z
     4d2:	81 50       	subi	r24, 0x01	; 1
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     4d4:	8a 3f       	cpi	r24, 0xFA	; 250
     4d6:	10 f4       	brcc	.+4      	; 0x4dc <minuti_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*minut)--;
     4d8:	80 83       	st	Z, r24
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <minuti_ispis+0x78>
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*minut = 59;
     4dc:	8b e3       	ldi	r24, 0x3B	; 59
     4de:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *minut);
     4e0:	80 81       	ld	r24, Z
     4e2:	1f 92       	push	r1
     4e4:	8f 93       	push	r24
     4e6:	8a e2       	ldi	r24, 0x2A	; 42
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	1f 93       	push	r17
     4f0:	0f 93       	push	r16
     4f2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     4f6:	88 81       	ld	r24, Y
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	81 50       	subi	r24, 0x01	; 1
     4fc:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     500:	80 2f       	mov	r24, r16
     502:	91 2f       	mov	r25, r17
     504:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	88 81       	ld	r24, Y
     50c:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
	}
	
	
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	08 95       	ret

00000526 <sekundi_ispis>:

void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	fc 01       	movw	r30, r24
     530:	06 2f       	mov	r16, r22
     532:	17 2f       	mov	r17, r23
     534:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     536:	21 11       	cpse	r18, r1
     538:	28 c0       	rjmp	.+80     	; 0x58a <sekundi_ispis+0x64>
	{
		(*sekund)++;
     53a:	80 81       	ld	r24, Z
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
     53c:	95 ec       	ldi	r25, 0xC5	; 197
     53e:	98 0f       	add	r25, r24
     540:	95 30       	cpi	r25, 0x05	; 5
     542:	18 f0       	brcs	.+6      	; 0x54a <sekundi_ispis+0x24>
void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sekund)++;
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 83       	st	Z, r24
     548:	01 c0       	rjmp	.+2      	; 0x54c <sekundi_ispis+0x26>
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
			*sekund = 0;
     54a:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sekund);
     54c:	80 81       	ld	r24, Z
     54e:	1f 92       	push	r1
     550:	8f 93       	push	r24
     552:	8a e2       	ldi	r24, 0x2A	; 42
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	1f 93       	push	r17
     55c:	0f 93       	push	r16
     55e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     562:	88 81       	ld	r24, Y
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	81 50       	subi	r24, 0x01	; 1
     568:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     56c:	80 2f       	mov	r24, r16
     56e:	91 2f       	mov	r25, r17
     570:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     574:	61 e0       	ldi	r22, 0x01	; 1
     576:	88 81       	ld	r24, Y
     578:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	28 c0       	rjmp	.+80     	; 0x5da <sekundi_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     58a:	21 30       	cpi	r18, 0x01	; 1
     58c:	31 f5       	brne	.+76     	; 0x5da <sekundi_ispis+0xb4>
	{
		(*sekund)--;
     58e:	80 81       	ld	r24, Z
     590:	81 50       	subi	r24, 0x01	; 1
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     592:	8a 3f       	cpi	r24, 0xFA	; 250
     594:	10 f4       	brcc	.+4      	; 0x59a <sekundi_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sekund)--;
     596:	80 83       	st	Z, r24
     598:	02 c0       	rjmp	.+4      	; 0x59e <sekundi_ispis+0x78>
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sekund = 59;
     59a:	8b e3       	ldi	r24, 0x3B	; 59
     59c:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sekund);
     59e:	80 81       	ld	r24, Z
     5a0:	1f 92       	push	r1
     5a2:	8f 93       	push	r24
     5a4:	8a e2       	ldi	r24, 0x2A	; 42
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	1f 93       	push	r17
     5ae:	0f 93       	push	r16
     5b0:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     5b4:	88 81       	ld	r24, Y
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	81 50       	subi	r24, 0x01	; 1
     5ba:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     5be:	80 2f       	mov	r24, r16
     5c0:	91 2f       	mov	r25, r17
     5c2:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	88 81       	ld	r24, Y
     5ca:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
	}
	
	
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	08 95       	ret

000005e4 <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e4:	cf 93       	push	r28
     5e6:	c8 2f       	mov	r28, r24
     5e8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <led_pin>
     5ec:	84 60       	ori	r24, 0x04	; 4
     5ee:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <led_pin>
     5f2:	6e e4       	ldi	r22, 0x4E	; 78
     5f4:	0e 94 c9 01 	call	0x392	; 0x392 <i2c_send_packet>
     5f8:	87 ec       	ldi	r24, 0xC7	; 199
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <putnibble+0x18>
     600:	00 c0       	rjmp	.+0      	; 0x602 <putnibble+0x1e>
     602:	00 00       	nop
     604:	c2 95       	swap	r28
     606:	c0 7f       	andi	r28, 0xF0	; 240
     608:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <led_pin>
     60c:	6e e4       	ldi	r22, 0x4E	; 78
     60e:	8c 2b       	or	r24, r28
     610:	0e 94 c9 01 	call	0x392	; 0x392 <i2c_send_packet>
     614:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <led_pin>
     618:	8b 7f       	andi	r24, 0xFB	; 251
     61a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <led_pin>
     61e:	6e e4       	ldi	r22, 0x4E	; 78
     620:	0e 94 c9 01 	call	0x392	; 0x392 <i2c_send_packet>
     624:	87 ec       	ldi	r24, 0xC7	; 199
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <putnibble+0x44>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <putnibble+0x4a>
     62e:	00 00       	nop
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <lcd1602_send_byte>:
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	c8 2f       	mov	r28, r24
     63a:	d8 2f       	mov	r29, r24
     63c:	d2 95       	swap	r29
     63e:	df 70       	andi	r29, 0x0F	; 15
     640:	61 11       	cpse	r22, r1
     642:	09 c0       	rjmp	.+18     	; 0x656 <lcd1602_send_byte+0x22>
     644:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <led_pin>
     648:	8e 7f       	andi	r24, 0xFE	; 254
     64a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <led_pin>
     64e:	6e e4       	ldi	r22, 0x4E	; 78
     650:	0e 94 c9 01 	call	0x392	; 0x392 <i2c_send_packet>
     654:	08 c0       	rjmp	.+16     	; 0x666 <lcd1602_send_byte+0x32>
     656:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <led_pin>
     65a:	81 60       	ori	r24, 0x01	; 1
     65c:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <led_pin>
     660:	6e e4       	ldi	r22, 0x4E	; 78
     662:	0e 94 c9 01 	call	0x392	; 0x392 <i2c_send_packet>
     666:	8d 2f       	mov	r24, r29
     668:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <putnibble>
     66c:	8c 2f       	mov	r24, r28
     66e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <putnibble>
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <lcd1602_send_char>:
     678:	cf 93       	push	r28
     67a:	c8 2f       	mov	r28, r24
     67c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <led_pin>
     680:	81 60       	ori	r24, 0x01	; 1
     682:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <led_pin>
     686:	6e e4       	ldi	r22, 0x4E	; 78
     688:	0e 94 c9 01 	call	0x392	; 0x392 <i2c_send_packet>
     68c:	8c 2f       	mov	r24, r28
     68e:	82 95       	swap	r24
     690:	8f 70       	andi	r24, 0x0F	; 15
     692:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <putnibble>
     696:	8c 2f       	mov	r24, r28
     698:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <putnibble>
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <lcd1602_init>:
     6a0:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <led_pin>
     6a4:	0e 94 75 01 	call	0x2ea	; 0x2ea <i2c_init>
     6a8:	8f e5       	ldi	r24, 0x5F	; 95
     6aa:	9a ee       	ldi	r25, 0xEA	; 234
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <lcd1602_init+0xc>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <lcd1602_init+0x12>
     6b2:	00 00       	nop
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <putnibble>
     6ba:	8f e7       	ldi	r24, 0x7F	; 127
     6bc:	9e e3       	ldi	r25, 0x3E	; 62
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <lcd1602_init+0x1e>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <lcd1602_init+0x24>
     6c4:	00 00       	nop
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <putnibble>
     6cc:	8f e8       	ldi	r24, 0x8F	; 143
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <lcd1602_init+0x30>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <lcd1602_init+0x36>
     6d6:	00 00       	nop
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <putnibble>
     6de:	8f e9       	ldi	r24, 0x9F	; 159
     6e0:	9f e0       	ldi	r25, 0x0F	; 15
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <lcd1602_init+0x42>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <lcd1602_init+0x48>
     6e8:	00 00       	nop
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <putnibble>
     6f0:	8f e9       	ldi	r24, 0x9F	; 159
     6f2:	9f e0       	ldi	r25, 0x0F	; 15
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <lcd1602_init+0x54>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <lcd1602_init+0x5a>
     6fa:	00 00       	nop
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	88 e2       	ldi	r24, 0x28	; 40
     700:	0e 94 1a 03 	call	0x634	; 0x634 <lcd1602_send_byte>
     704:	8f e9       	ldi	r24, 0x9F	; 159
     706:	9f e0       	ldi	r25, 0x0F	; 15
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <lcd1602_init+0x68>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <lcd1602_init+0x6e>
     70e:	00 00       	nop
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	8c e0       	ldi	r24, 0x0C	; 12
     714:	0e 94 1a 03 	call	0x634	; 0x634 <lcd1602_send_byte>
     718:	8f e9       	ldi	r24, 0x9F	; 159
     71a:	9f e0       	ldi	r25, 0x0F	; 15
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <lcd1602_init+0x7c>
     720:	00 c0       	rjmp	.+0      	; 0x722 <lcd1602_init+0x82>
     722:	00 00       	nop
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	86 e0       	ldi	r24, 0x06	; 6
     728:	0e 94 1a 03 	call	0x634	; 0x634 <lcd1602_send_byte>
     72c:	8f e9       	ldi	r24, 0x9F	; 159
     72e:	9f e0       	ldi	r25, 0x0F	; 15
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <lcd1602_init+0x90>
     734:	00 c0       	rjmp	.+0      	; 0x736 <lcd1602_init+0x96>
     736:	00 00       	nop
     738:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <led_pin>
     73c:	88 60       	ori	r24, 0x08	; 8
     73e:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <led_pin>
     742:	6e e4       	ldi	r22, 0x4E	; 78
     744:	0e 94 c9 01 	call	0x392	; 0x392 <i2c_send_packet>
     748:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <led_pin>
     74c:	8d 7f       	andi	r24, 0xFD	; 253
     74e:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <led_pin>
     752:	6e e4       	ldi	r22, 0x4E	; 78
     754:	0e 94 c9 01 	call	0x392	; 0x392 <i2c_send_packet>
     758:	08 95       	ret

0000075a <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     75a:	90 e4       	ldi	r25, 0x40	; 64
     75c:	69 9f       	mul	r22, r25
     75e:	80 0d       	add	r24, r0
     760:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	80 68       	ori	r24, 0x80	; 128
     766:	0e 94 1a 03 	call	0x634	; 0x634 <lcd1602_send_byte>
     76a:	08 95       	ret

0000076c <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     774:	80 81       	ld	r24, Z
     776:	88 23       	and	r24, r24
     778:	59 f0       	breq	.+22     	; 0x790 <lcd1602_send_string+0x24>
     77a:	8f 01       	movw	r16, r30
     77c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     77e:	0e 94 3c 03 	call	0x678	; 0x678 <lcd1602_send_char>
		i++;
     782:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     784:	f8 01       	movw	r30, r16
     786:	ec 0f       	add	r30, r28
     788:	f1 1d       	adc	r31, r1
     78a:	80 81       	ld	r24, Z
     78c:	81 11       	cpse	r24, r1
     78e:	f7 cf       	rjmp	.-18     	; 0x77e <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	08 95       	ret

00000798 <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     798:	88 23       	and	r24, r24
     79a:	29 f0       	breq	.+10     	; 0x7a6 <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);	//blink on
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	8f e0       	ldi	r24, 0x0F	; 15
     7a0:	0e 94 1a 03 	call	0x634	; 0x634 <lcd1602_send_byte>
     7a4:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);	//blink off
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	8c e0       	ldi	r24, 0x0C	; 12
     7aa:	0e 94 1a 03 	call	0x634	; 0x634 <lcd1602_send_byte>
     7ae:	08 95       	ret

000007b0 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     7b0:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     7b2:	dc 01       	movw	r26, r24
     7b4:	12 96       	adiw	r26, 0x02	; 2
     7b6:	2c 91       	ld	r18, X
     7b8:	12 97       	sbiw	r26, 0x02	; 2
     7ba:	54 e6       	ldi	r21, 0x64	; 100
     7bc:	11 96       	adiw	r26, 0x01	; 1
     7be:	8c 91       	ld	r24, X
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	52 9f       	mul	r21, r18
     7c4:	80 0d       	add	r24, r0
     7c6:	91 1d       	adc	r25, r1
     7c8:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     7ca:	db 01       	movw	r26, r22
     7cc:	12 96       	adiw	r26, 0x02	; 2
     7ce:	2c 91       	ld	r18, X
     7d0:	12 97       	sbiw	r26, 0x02	; 2
     7d2:	11 96       	adiw	r26, 0x01	; 1
     7d4:	6c 91       	ld	r22, X
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	52 9f       	mul	r21, r18
     7da:	60 0d       	add	r22, r0
     7dc:	71 1d       	adc	r23, r1
     7de:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     7e0:	42 81       	ldd	r20, Z+2	; 0x02
     7e2:	21 81       	ldd	r18, Z+1	; 0x01
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	54 9f       	mul	r21, r20
     7e8:	20 0d       	add	r18, r0
     7ea:	31 1d       	adc	r19, r1
     7ec:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     7ee:	86 17       	cp	r24, r22
     7f0:	97 07       	cpc	r25, r23
     7f2:	68 f0       	brcs	.+26     	; 0x80e <period_paljenja+0x5e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     7f4:	28 17       	cp	r18, r24
     7f6:	39 07       	cpc	r19, r25
     7f8:	20 f0       	brcs	.+8      	; 0x802 <period_paljenja+0x52>
     7fa:	28 33       	cpi	r18, 0x38	; 56
     7fc:	b9 e0       	ldi	r27, 0x09	; 9
     7fe:	3b 07       	cpc	r19, r27
     800:	78 f0       	brcs	.+30     	; 0x820 <period_paljenja+0x70>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	26 17       	cp	r18, r22
     806:	37 07       	cpc	r19, r23
     808:	70 f0       	brcs	.+28     	; 0x826 <period_paljenja+0x76>
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     80e:	28 17       	cp	r18, r24
     810:	39 07       	cpc	r19, r25
     812:	40 f0       	brcs	.+16     	; 0x824 <period_paljenja+0x74>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	26 17       	cp	r18, r22
     818:	37 07       	cpc	r19, r23
     81a:	28 f0       	brcs	.+10     	; 0x826 <period_paljenja+0x76>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     824:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     826:	08 95       	ret

00000828 <fsm_lcd_menu>:

void fsm_lcd_menu()
{
     828:	0f 93       	push	r16
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
	int pom;
	
	switch(STATE)
     82e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <STATE>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	09 f4       	brne	.+2      	; 0x838 <fsm_lcd_menu+0x10>
     836:	cc c0       	rjmp	.+408    	; 0x9d0 <__stack+0xd1>
     838:	30 f4       	brcc	.+12     	; 0x846 <fsm_lcd_menu+0x1e>
     83a:	88 23       	and	r24, r24
     83c:	69 f0       	breq	.+26     	; 0x858 <fsm_lcd_menu+0x30>
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	09 f4       	brne	.+2      	; 0x844 <fsm_lcd_menu+0x1c>
     842:	94 c0       	rjmp	.+296    	; 0x96c <__stack+0x6d>
     844:	81 c5       	rjmp	.+2818   	; 0x1348 <__stack+0xa49>
     846:	84 30       	cpi	r24, 0x04	; 4
     848:	09 f4       	brne	.+2      	; 0x84c <fsm_lcd_menu+0x24>
     84a:	b4 c2       	rjmp	.+1384   	; 0xdb4 <__stack+0x4b5>
     84c:	08 f4       	brcc	.+2      	; 0x850 <fsm_lcd_menu+0x28>
     84e:	a6 c1       	rjmp	.+844    	; 0xb9c <__stack+0x29d>
     850:	85 30       	cpi	r24, 0x05	; 5
     852:	09 f4       	brne	.+2      	; 0x856 <fsm_lcd_menu+0x2e>
     854:	12 c4       	rjmp	.+2084   	; 0x107a <__stack+0x77b>
     856:	78 c5       	rjmp	.+2800   	; 0x1348 <__stack+0xa49>
		
		case DISPL1:
				/* prvi, tj. glavni meni sa ispisom tren. vremena i vremena on/off */
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				
				if ( displ_flag_shot )	//samo prvi put kad se uleti
     858:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     85c:	88 23       	and	r24, r24
     85e:	31 f0       	breq	.+12     	; 0x86c <fsm_lcd_menu+0x44>
				{
					displ_flag_shot = 0; //resetujem flag, i zabranim ponovni ulazak
     860:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     864:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <timer_disp_cycle+0x1>
     868:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <timer_disp_cycle>
				}
				if (timer_disp_cycle > 7000)	//7 sekundi
     86c:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <timer_disp_cycle>
     870:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <timer_disp_cycle+0x1>
     874:	89 35       	cpi	r24, 0x59	; 89
     876:	9b 41       	sbci	r25, 0x1B	; 27
     878:	28 f0       	brcs	.+10     	; 0x884 <fsm_lcd_menu+0x5c>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = DISPL2;
     880:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
				}
						
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     884:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_pc_int>
     888:	88 23       	and	r24, r24
     88a:	09 f4       	brne	.+2      	; 0x88e <fsm_lcd_menu+0x66>
     88c:	60 c0       	rjmp	.+192    	; 0x94e <__stack+0x4f>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     88e:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_pc_int>
			
					getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     892:	00 e0       	ldi	r16, 0x00	; 0
     894:	21 e4       	ldi	r18, 0x41	; 65
     896:	32 e0       	ldi	r19, 0x02	; 2
     898:	49 e3       	ldi	r20, 0x39	; 57
     89a:	52 e0       	ldi	r21, 0x02	; 2
     89c:	6a e3       	ldi	r22, 0x3A	; 58
     89e:	72 e0       	ldi	r23, 0x02	; 2
     8a0:	8b e3       	ldi	r24, 0x3B	; 59
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	0e 94 8f 0b 	call	0x171e	; 0x171e <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     8a8:	e9 e3       	ldi	r30, 0x39	; 57
     8aa:	f2 e0       	ldi	r31, 0x02	; 2
     8ac:	80 81       	ld	r24, Z
     8ae:	1f 92       	push	r1
     8b0:	8f 93       	push	r24
     8b2:	81 81       	ldd	r24, Z+1	; 0x01
     8b4:	1f 92       	push	r1
     8b6:	8f 93       	push	r24
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	1f 92       	push	r1
     8bc:	8f 93       	push	r24
     8be:	86 e0       	ldi	r24, 0x06	; 6
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	9f 93       	push	r25
     8c4:	8f 93       	push	r24
     8c6:	c1 e0       	ldi	r28, 0x01	; 1
     8c8:	d2 e0       	ldi	r29, 0x02	; 2
     8ca:	df 93       	push	r29
     8cc:	cf 93       	push	r28
     8ce:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
					
					//lcd1602_clear();
			
					/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
					lcd1602_goto_xy(0,0);
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
					lcd1602_send_string("    ");
     8da:	85 e1       	ldi	r24, 0x15	; 21
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
					lcd1602_send_string(bafer);
     8e2:	ce 01       	movw	r24, r28
     8e4:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
					lcd1602_send_string("    ");
     8e8:	85 e1       	ldi	r24, 0x15	; 21
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
			
					lcd1602_goto_xy(0,1);
     8f0:	61 e0       	ldi	r22, 0x01	; 1
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
					lcd1602_send_string("  ");
     8f8:	87 e1       	ldi	r24, 0x17	; 23
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
					sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     900:	e0 e3       	ldi	r30, 0x30	; 48
     902:	f2 e0       	ldi	r31, 0x02	; 2
     904:	81 81       	ldd	r24, Z+1	; 0x01
     906:	1f 92       	push	r1
     908:	8f 93       	push	r24
     90a:	82 81       	ldd	r24, Z+2	; 0x02
     90c:	1f 92       	push	r1
     90e:	8f 93       	push	r24
     910:	ee e1       	ldi	r30, 0x1E	; 30
     912:	f2 e0       	ldi	r31, 0x02	; 2
     914:	81 81       	ldd	r24, Z+1	; 0x01
     916:	1f 92       	push	r1
     918:	8f 93       	push	r24
     91a:	82 81       	ldd	r24, Z+2	; 0x02
     91c:	1f 92       	push	r1
     91e:	8f 93       	push	r24
     920:	8a e1       	ldi	r24, 0x1A	; 26
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	9f 93       	push	r25
     926:	8f 93       	push	r24
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
					lcd1602_send_string(bafer);
     930:	ce 01       	movw	r24, r28
     932:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
					lcd1602_send_string("  ");
     936:	87 e1       	ldi	r24, 0x17	; 23
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
     93e:	8d b7       	in	r24, 0x3d	; 61
     940:	9e b7       	in	r25, 0x3e	; 62
     942:	46 96       	adiw	r24, 0x16	; 22
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	9e bf       	out	0x3e, r25	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	8d bf       	out	0x3d, r24	; 61
			
				}
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     94e:	65 e0       	ldi	r22, 0x05	; 5
     950:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     954:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     958:	88 23       	and	r24, r24
     95a:	09 f4       	brne	.+2      	; 0x95e <__stack+0x5f>
     95c:	f5 c4       	rjmp	.+2538   	; 0x1348 <__stack+0xa49>
				{
					displ_flag_shot = 1;	//opet dozvolim, pri izlazku iz ovog stejta
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
     96a:	ee c4       	rjmp	.+2524   	; 0x1348 <__stack+0xa49>
		break;
		
		case DISPL2:
				//ispisuje napon, struju, snagu... Smenjuje se periodicno sa DISPL1, uz pomoc tajmera
				
				if ( displ_flag_shot )	//samo prvi put kad se uleti
     96c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     970:	88 23       	and	r24, r24
     972:	31 f0       	breq	.+12     	; 0x980 <__stack+0x81>
				{
					displ_flag_shot = 0; //resetujem flag, i zabranim ponovni ulazak
     974:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     978:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <timer_disp_cycle+0x1>
     97c:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <timer_disp_cycle>
				}
				if (timer_disp_cycle > 4000)	//4 sekunde
     980:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <timer_disp_cycle>
     984:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <timer_disp_cycle+0x1>
     988:	81 3a       	cpi	r24, 0xA1	; 161
     98a:	9f 40       	sbci	r25, 0x0F	; 15
     98c:	28 f0       	brcs	.+10     	; 0x998 <__stack+0x99>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = DISPL1;
     994:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <STATE>
				}
				
				/* dummy ispis */
				lcd1602_goto_xy(0,0);
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
				lcd1602_send_string("224V      2.2kW");
     9a0:	8f e2       	ldi	r24, 0x2F	; 47
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
				lcd1602_goto_xy(0,1);
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
				lcd1602_send_string("9.88A    396kWh");
     9b0:	8f e3       	ldi	r24, 0x3F	; 63
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     9b8:	65 e0       	ldi	r22, 0x05	; 5
     9ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     9be:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     9c2:	88 23       	and	r24, r24
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	c0 c4       	rjmp	.+2432   	; 0x1348 <__stack+0xa49>
				{
					STATE = MENU1;
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
     9ce:	bc c4       	rjmp	.+2424   	; 0x1348 <__stack+0xa49>
					
		break;
		
		case MENU1:
					//lcd1602_clear();
					pom = kursor;
     9d0:	c0 91 d2 01 	lds	r28, 0x01D2	; 0x8001d2 <kursor>
     9d4:	0c 2e       	mov	r0, r28
     9d6:	00 0c       	add	r0, r0
     9d8:	dd 0b       	sbc	r29, r29
					
					lcd1602_goto_xy(0, 0);
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
					lcd1602_send_string(">");	//fiksno, a djiram text za menije vertikalno
     9e2:	87 e5       	ldi	r24, 0x57	; 87
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
					lcd1602_goto_xy(0,1);
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
					lcd1602_send_string(" ");	//prazno polje ispod ">"
     9f2:	88 e1       	ldi	r24, 0x18	; 24
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>

					lcd1602_goto_xy(1,0);
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
					lcd1602_send_string(menu1_txt[kursor]);
     a02:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     a06:	21 e1       	ldi	r18, 0x11	; 17
     a08:	82 02       	muls	r24, r18
     a0a:	c0 01       	movw	r24, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	8c 56       	subi	r24, 0x6C	; 108
     a10:	9e 4f       	sbci	r25, 0xFE	; 254
     a12:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
					if (kursor == KURSOR_JEDNOKRAT)			//jednokrat na prvoj liniji
     a16:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     a1a:	81 11       	cpse	r24, r1
     a1c:	15 c0       	rjmp	.+42     	; 0xa48 <__stack+0x149>
					{
						if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     a1e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <jednok_on_off>
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	49 f4       	brne	.+18     	; 0xa38 <__stack+0x139>
						{
							lcd1602_goto_xy(12,0);
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	8c e0       	ldi	r24, 0x0C	; 12
     a2a:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
							lcd1602_send_string("<ON>");
     a2e:	8f e4       	ldi	r24, 0x4F	; 79
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
     a36:	08 c0       	rjmp	.+16     	; 0xa48 <__stack+0x149>
						}
						else					//ako je off ispisi <OF> pored JEDNOKRATNO
						{
							lcd1602_goto_xy(12,0);
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	8c e0       	ldi	r24, 0x0C	; 12
     a3c:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
							lcd1602_send_string("<OF>");
     a40:	84 e5       	ldi	r24, 0x54	; 84
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						}
					}
					
					lcd1602_goto_xy(1,1);
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
					pom = (pom==KURSOR_MENU1_MAX) ? -1 : pom;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
     a50:	c2 30       	cpi	r28, 0x02	; 2
     a52:	d1 05       	cpc	r29, r1
     a54:	09 f4       	brne	.+2      	; 0xa58 <__stack+0x159>
     a56:	73 c4       	rjmp	.+2278   	; 0x133e <__stack+0xa3f>
					lcd1602_send_string(menu1_txt[pom + 1]);
     a58:	9e 01       	movw	r18, r28
     a5a:	2f 5f       	subi	r18, 0xFF	; 255
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	41 e1       	ldi	r20, 0x11	; 17
     a60:	42 9f       	mul	r20, r18
     a62:	c0 01       	movw	r24, r0
     a64:	43 9f       	mul	r20, r19
     a66:	90 0d       	add	r25, r0
     a68:	11 24       	eor	r1, r1
     a6a:	8c 56       	subi	r24, 0x6C	; 108
     a6c:	9e 4f       	sbci	r25, 0xFE	; 254
     a6e:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
					if ( (pom+1) == KURSOR_JEDNOKRAT)			//jednokrat na drugoj liniji, sa wrap-around-om
     a72:	21 96       	adiw	r28, 0x01	; 1
     a74:	a9 f4       	brne	.+42     	; 0xaa0 <__stack+0x1a1>
					{
						if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     a76:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <jednok_on_off>
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	49 f4       	brne	.+18     	; 0xa90 <__stack+0x191>
						{
							lcd1602_goto_xy(12,1);
     a7e:	61 e0       	ldi	r22, 0x01	; 1
     a80:	8c e0       	ldi	r24, 0x0C	; 12
     a82:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
							lcd1602_send_string("<ON>");
     a86:	8f e4       	ldi	r24, 0x4F	; 79
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
     a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <__stack+0x1a1>
						}
						else					//ako je off ispisi <OF> pored JEDNOKRATNO
						{
							lcd1602_goto_xy(12,1);
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	8c e0       	ldi	r24, 0x0C	; 12
     a94:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
							lcd1602_send_string("<OF>");
     a98:	84 e5       	ldi	r24, 0x54	; 84
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						}
					}

		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     aa0:	63 e0       	ldi	r22, 0x03	; 3
     aa2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     aa6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     aaa:	88 23       	and	r24, r24
     aac:	59 f0       	breq	.+22     	; 0xac4 <__stack+0x1c5>
					{
						kursor++;
     aae:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     ab2:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor > KURSOR_MENU1_MAX)
     ab4:	83 30       	cpi	r24, 0x03	; 3
     ab6:	1c f4       	brge	.+6      	; 0xabe <__stack+0x1bf>
					}

		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor++;
     ab8:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
     abc:	45 c4       	rjmp	.+2186   	; 0x1348 <__stack+0xa49>
						if(kursor > KURSOR_MENU1_MAX)
						kursor = 0;
     abe:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
     ac2:	42 c4       	rjmp	.+2180   	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     ac4:	62 e0       	ldi	r22, 0x02	; 2
     ac6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     aca:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     ace:	88 23       	and	r24, r24
     ad0:	59 f0       	breq	.+22     	; 0xae8 <__stack+0x1e9>
					{
						kursor--;
     ad2:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     ad6:	81 50       	subi	r24, 0x01	; 1
						if(kursor < 0)		//min je 0, logicno
     ad8:	1a f0       	brmi	.+6      	; 0xae0 <__stack+0x1e1>
						if(kursor > KURSOR_MENU1_MAX)
						kursor = 0;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor--;
     ada:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
     ade:	34 c4       	rjmp	.+2152   	; 0x1348 <__stack+0xa49>
						if(kursor < 0)		//min je 0, logicno
						kursor = KURSOR_MENU1_MAX;
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
     ae6:	30 c4       	rjmp	.+2144   	; 0x1348 <__stack+0xa49>
					}
					else if(kursor == KURSOR_PODSAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     ae8:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	69 f4       	brne	.+26     	; 0xb0a <__stack+0x20b>
     af0:	65 e0       	ldi	r22, 0x05	; 5
     af2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     af6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     afa:	88 23       	and	r24, r24
     afc:	31 f0       	breq	.+12     	; 0xb0a <__stack+0x20b>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     afe:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
						STATE = POD_SAT;	//meni za podesavanje sata
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
     b08:	1f c4       	rjmp	.+2110   	; 0x1348 <__stack+0xa49>
					}
					else if(kursor == KURSOR_PODONOF && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     b0a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	69 f4       	brne	.+26     	; 0xb2c <__stack+0x22d>
     b12:	65 e0       	ldi	r22, 0x05	; 5
     b14:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     b18:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     b1c:	88 23       	and	r24, r24
     b1e:	31 f0       	breq	.+12     	; 0xb2c <__stack+0x22d>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     b20:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     b24:	84 e0       	ldi	r24, 0x04	; 4
     b26:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
     b2a:	0e c4       	rjmp	.+2076   	; 0x1348 <__stack+0xa49>
					}
					else if(kursor == KURSOR_JEDNOKRAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     b2c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     b30:	81 11       	cpse	r24, r1
     b32:	27 c0       	rjmp	.+78     	; 0xb82 <__stack+0x283>
     b34:	65 e0       	ldi	r22, 0x05	; 5
     b36:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     b3a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     b3e:	88 23       	and	r24, r24
     b40:	31 f0       	breq	.+12     	; 0xb4e <__stack+0x24f>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     b42:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
						STATE = JEDNOKRATNO;	//sub_meni za podesavanje on ili off vremena jednokratno
     b46:	85 e0       	ldi	r24, 0x05	; 5
     b48:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
     b4c:	fd c3       	rjmp	.+2042   	; 0x1348 <__stack+0xa49>
					}
					else if( kursor == KURSOR_JEDNOKRAT && ( ocitaj_jedan_taster(tasteri, TASTER_LEVO) ||  ocitaj_jedan_taster(tasteri, TASTER_DESNO) ) ) //levo ili desno kad je na JEDNOKRATNO da togluje on/of
     b4e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     b52:	81 11       	cpse	r24, r1
     b54:	16 c0       	rjmp	.+44     	; 0xb82 <__stack+0x283>
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     b5c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     b60:	81 11       	cpse	r24, r1
     b62:	07 c0       	rjmp	.+14     	; 0xb72 <__stack+0x273>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     b6a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     b6e:	88 23       	and	r24, r24
     b70:	41 f0       	breq	.+16     	; 0xb82 <__stack+0x283>
					{
						jednok_on_off = !jednok_on_off;	//toggle
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <jednok_on_off>
     b78:	91 11       	cpse	r25, r1
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <jednok_on_off>
     b80:	e3 c3       	rjmp	.+1990   	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     b82:	64 e0       	ldi	r22, 0x04	; 4
     b84:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     b88:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <__stack+0x293>
     b90:	db c3       	rjmp	.+1974   	; 0x1348 <__stack+0xa49>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     b92:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     b96:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <STATE>
     b9a:	d6 c3       	rjmp	.+1964   	; 0x1348 <__stack+0xa49>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (flag_pod_vremena)
     b9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag_pod_vremena>
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <__stack+0x2a7>
     ba4:	4b c0       	rjmp	.+150    	; 0xc3c <__stack+0x33d>
					{
						flag_pod_vremena = 0;
     ba6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag_pod_vremena>
						snap_shot_vremena = vreme_datum;
     baa:	89 e0       	ldi	r24, 0x09	; 9
     bac:	e9 e3       	ldi	r30, 0x39	; 57
     bae:	f2 e0       	ldi	r31, 0x02	; 2
     bb0:	a8 ef       	ldi	r26, 0xF8	; 248
     bb2:	b1 e0       	ldi	r27, 0x01	; 1
     bb4:	01 90       	ld	r0, Z+
     bb6:	0d 92       	st	X+, r0
     bb8:	8a 95       	dec	r24
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <__stack+0x2b5>
						sprintf(bafer, "%02d:%02d:%02d", snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s);
     bbc:	e8 ef       	ldi	r30, 0xF8	; 248
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	80 81       	ld	r24, Z
     bc2:	1f 92       	push	r1
     bc4:	8f 93       	push	r24
     bc6:	81 81       	ldd	r24, Z+1	; 0x01
     bc8:	1f 92       	push	r1
     bca:	8f 93       	push	r24
     bcc:	82 81       	ldd	r24, Z+2	; 0x02
     bce:	1f 92       	push	r1
     bd0:	8f 93       	push	r24
     bd2:	86 e0       	ldi	r24, 0x06	; 6
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	9f 93       	push	r25
     bd8:	8f 93       	push	r24
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
			
						kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     be6:	85 e0       	ldi	r24, 0x05	; 5
     be8:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
			
						lcd1602_goto_xy(0,0);
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
						lcd1602_send_string("PODESAVANJE SATA");
     bf4:	89 e5       	ldi	r24, 0x59	; 89
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
			
						lcd1602_goto_xy(0,1);
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
						lcd1602_send_string("    ");
     c04:	85 e1       	ldi	r24, 0x15	; 21
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						lcd1602_send_string(bafer);
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						lcd1602_send_string("    ");
     c14:	85 e1       	ldi	r24, 0x15	; 21
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
			
						lcd1602_goto_xy(kursor,1);
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     c22:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 cc 03 	call	0x798	; 0x798 <lcd1602_cursor_blink>
     c2c:	8d b7       	in	r24, 0x3d	; 61
     c2e:	9e b7       	in	r25, 0x3e	; 62
     c30:	0a 96       	adiw	r24, 0x0a	; 10
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	9e bf       	out	0x3e, r25	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	8d bf       	out	0x3d, r24	; 61
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c42:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     c46:	88 23       	and	r24, r24
     c48:	89 f0       	breq	.+34     	; 0xc6c <__stack+0x36d>
					{
						kursor += 3;
     c4a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     c4e:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 11)
     c50:	8c 30       	cpi	r24, 0x0C	; 12
     c52:	1c f4       	brge	.+6      	; 0xc5a <__stack+0x35b>
						lcd1602_cursor_blink(1);
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     c54:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <__stack+0x361>
						if(kursor > 11)
							kursor = 11;
     c5a:	8b e0       	ldi	r24, 0x0B	; 11
     c5c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
						lcd1602_goto_xy(kursor,1);
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     c66:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
     c6a:	6e c3       	rjmp	.+1756   	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c72:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     c76:	88 23       	and	r24, r24
     c78:	89 f0       	breq	.+34     	; 0xc9c <__stack+0x39d>
					{
						kursor -= 3;
     c7a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     c7e:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 5)
     c80:	85 30       	cpi	r24, 0x05	; 5
     c82:	1c f0       	brlt	.+6      	; 0xc8a <__stack+0x38b>
							kursor = 11;
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     c84:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <__stack+0x391>
						if(kursor < 5)
							kursor = 5;
     c8a:	85 e0       	ldi	r24, 0x05	; 5
     c8c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
						lcd1602_goto_xy(kursor,1);
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     c96:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
     c9a:	56 c3       	rjmp	.+1708   	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     c9c:	62 e0       	ldi	r22, 0x02	; 2
     c9e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     ca2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     ca6:	88 23       	and	r24, r24
     ca8:	39 f1       	breq	.+78     	; 0xcf8 <__stack+0x3f9>
					{
						if (kursor == 5)												//podesava SATE ++
     caa:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     cae:	85 30       	cpi	r24, 0x05	; 5
     cb0:	51 f4       	brne	.+20     	; 0xcc6 <__stack+0x3c7>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UVECAJ);
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	42 ed       	ldi	r20, 0xD2	; 210
     cb6:	51 e0       	ldi	r21, 0x01	; 1
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	72 e0       	ldi	r23, 0x02	; 2
     cbc:	8a ef       	ldi	r24, 0xFA	; 250
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sati_ispis>
     cc4:	41 c3       	rjmp	.+1666   	; 0x1348 <__stack+0xa49>
						else if (kursor == 8)											//podesava MINUTE ++
     cc6:	88 30       	cpi	r24, 0x08	; 8
     cc8:	51 f4       	brne	.+20     	; 0xcde <__stack+0x3df>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UVECAJ);
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	42 ed       	ldi	r20, 0xD2	; 210
     cce:	51 e0       	ldi	r21, 0x01	; 1
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	72 e0       	ldi	r23, 0x02	; 2
     cd4:	89 ef       	ldi	r24, 0xF9	; 249
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 34 02 	call	0x468	; 0x468 <minuti_ispis>
     cdc:	35 c3       	rjmp	.+1642   	; 0x1348 <__stack+0xa49>
						else if (kursor == 11)											//podesava SEKUNDE ++
     cde:	8b 30       	cpi	r24, 0x0B	; 11
     ce0:	09 f0       	breq	.+2      	; 0xce4 <__stack+0x3e5>
     ce2:	32 c3       	rjmp	.+1636   	; 0x1348 <__stack+0xa49>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UVECAJ);
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	42 ed       	ldi	r20, 0xD2	; 210
     ce8:	51 e0       	ldi	r21, 0x01	; 1
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	72 e0       	ldi	r23, 0x02	; 2
     cee:	88 ef       	ldi	r24, 0xF8	; 248
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	0e 94 93 02 	call	0x526	; 0x526 <sekundi_ispis>
     cf6:	28 c3       	rjmp	.+1616   	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     cf8:	63 e0       	ldi	r22, 0x03	; 3
     cfa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     cfe:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     d02:	88 23       	and	r24, r24
     d04:	39 f1       	breq	.+78     	; 0xd54 <__stack+0x455>
					{
						if (kursor == 5)												//podesava SATE --
     d06:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     d0a:	85 30       	cpi	r24, 0x05	; 5
     d0c:	51 f4       	brne	.+20     	; 0xd22 <__stack+0x423>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UMANJI);
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	42 ed       	ldi	r20, 0xD2	; 210
     d12:	51 e0       	ldi	r21, 0x01	; 1
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	72 e0       	ldi	r23, 0x02	; 2
     d18:	8a ef       	ldi	r24, 0xFA	; 250
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sati_ispis>
     d20:	13 c3       	rjmp	.+1574   	; 0x1348 <__stack+0xa49>
						else if (kursor == 8)											//podesava MINUTE --
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	51 f4       	brne	.+20     	; 0xd3a <__stack+0x43b>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UMANJI);
     d26:	21 e0       	ldi	r18, 0x01	; 1
     d28:	42 ed       	ldi	r20, 0xD2	; 210
     d2a:	51 e0       	ldi	r21, 0x01	; 1
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	72 e0       	ldi	r23, 0x02	; 2
     d30:	89 ef       	ldi	r24, 0xF9	; 249
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	0e 94 34 02 	call	0x468	; 0x468 <minuti_ispis>
     d38:	07 c3       	rjmp	.+1550   	; 0x1348 <__stack+0xa49>
						else if (kursor == 11)											//podesava SEKUNDE --
     d3a:	8b 30       	cpi	r24, 0x0B	; 11
     d3c:	09 f0       	breq	.+2      	; 0xd40 <__stack+0x441>
     d3e:	04 c3       	rjmp	.+1544   	; 0x1348 <__stack+0xa49>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UMANJI);
     d40:	21 e0       	ldi	r18, 0x01	; 1
     d42:	42 ed       	ldi	r20, 0xD2	; 210
     d44:	51 e0       	ldi	r21, 0x01	; 1
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	72 e0       	ldi	r23, 0x02	; 2
     d4a:	88 ef       	ldi	r24, 0xF8	; 248
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 93 02 	call	0x526	; 0x526 <sekundi_ispis>
     d52:	fa c2       	rjmp	.+1524   	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//Potvrdi vreme koje vidis na ekranu i promeni vreme; izadji iz menija
     d54:	65 e0       	ldi	r22, 0x05	; 5
     d56:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     d5a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     d5e:	88 23       	and	r24, r24
     d60:	a9 f0       	breq	.+42     	; 0xd8c <__stack+0x48d>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s, am, _24_hour_format);
     d62:	e8 ef       	ldi	r30, 0xF8	; 248
     d64:	f1 e0       	ldi	r31, 0x01	; 1
     d66:	00 e0       	ldi	r16, 0x00	; 0
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	40 81       	ld	r20, Z
     d6c:	61 81       	ldd	r22, Z+1	; 0x01
     d6e:	82 81       	ldd	r24, Z+2	; 0x02
     d70:	0e 94 cd 0b 	call	0x179a	; 0x179a <setTime>
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     d7a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0e 94 cc 03 	call	0x798	; 0x798 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
     d8a:	de c2       	rjmp	.+1468   	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     d8c:	64 e0       	ldi	r22, 0x04	; 4
     d8e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     d92:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     d96:	88 23       	and	r24, r24
     d98:	09 f4       	brne	.+2      	; 0xd9c <__stack+0x49d>
     d9a:	d6 c2       	rjmp	.+1452   	; 0x1348 <__stack+0xa49>
					{
						/* Vreme setujem samo ako je stisnut ENTER, ako je stisnuto NAZAD, vreme se ne dira, tj. ovde se ne dira */
								//setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     da2:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	0e 94 cc 03 	call	0x798	; 0x798 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
     db2:	ca c2       	rjmp	.+1428   	; 0x1348 <__stack+0xa49>
		break;
		
		case POD_ON_OFF:																				
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
     db4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_pod_ONOFF>
     db8:	88 23       	and	r24, r24
     dba:	09 f4       	brne	.+2      	; 0xdbe <__stack+0x4bf>
     dbc:	59 c0       	rjmp	.+178    	; 0xe70 <__stack+0x571>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
     dbe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_pod_ONOFF>
						
						snap_vreme_paljenja = vreme_paljenja;	
     dc2:	89 e0       	ldi	r24, 0x09	; 9
     dc4:	ee e1       	ldi	r30, 0x1E	; 30
     dc6:	f2 e0       	ldi	r31, 0x02	; 2
     dc8:	a7 e2       	ldi	r26, 0x27	; 39
     dca:	b2 e0       	ldi	r27, 0x02	; 2
     dcc:	01 90       	ld	r0, Z+
     dce:	0d 92       	st	X+, r0
     dd0:	8a 95       	dec	r24
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <__stack+0x4cd>
						snap_vreme_gasenja = vreme_gasenja;
     dd4:	89 e0       	ldi	r24, 0x09	; 9
     dd6:	e0 e3       	ldi	r30, 0x30	; 48
     dd8:	f2 e0       	ldi	r31, 0x02	; 2
     dda:	a5 e1       	ldi	r26, 0x15	; 21
     ddc:	b2 e0       	ldi	r27, 0x02	; 2
     dde:	01 90       	ld	r0, Z+
     de0:	0d 92       	st	X+, r0
     de2:	8a 95       	dec	r24
     de4:	e1 f7       	brne	.-8      	; 0xdde <__stack+0x4df>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
						
						lcd1602_goto_xy(0,0);
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
						lcd1602_send_string("  UPALI--UGASI  ");
     df4:	8a e6       	ldi	r24, 0x6A	; 106
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     dfc:	e5 e1       	ldi	r30, 0x15	; 21
     dfe:	f2 e0       	ldi	r31, 0x02	; 2
     e00:	81 81       	ldd	r24, Z+1	; 0x01
     e02:	1f 92       	push	r1
     e04:	8f 93       	push	r24
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	1f 92       	push	r1
     e0a:	8f 93       	push	r24
     e0c:	e7 e2       	ldi	r30, 0x27	; 39
     e0e:	f2 e0       	ldi	r31, 0x02	; 2
     e10:	81 81       	ldd	r24, Z+1	; 0x01
     e12:	1f 92       	push	r1
     e14:	8f 93       	push	r24
     e16:	82 81       	ldd	r24, Z+2	; 0x02
     e18:	1f 92       	push	r1
     e1a:	8f 93       	push	r24
     e1c:	8a e1       	ldi	r24, 0x1A	; 26
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	9f 93       	push	r25
     e22:	8f 93       	push	r24
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	9f 93       	push	r25
     e2a:	8f 93       	push	r24
     e2c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
						
						lcd1602_goto_xy(0,1);
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
						lcd1602_send_string("  ");
     e38:	87 e1       	ldi	r24, 0x17	; 23
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						lcd1602_send_string(bafer);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						lcd1602_send_string("  ");
     e48:	87 e1       	ldi	r24, 0x17	; 23
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     e56:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	0e 94 cc 03 	call	0x798	; 0x798 <lcd1602_cursor_blink>
     e60:	8d b7       	in	r24, 0x3d	; 61
     e62:	9e b7       	in	r25, 0x3e	; 62
     e64:	0c 96       	adiw	r24, 0x0c	; 12
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	9e bf       	out	0x3e, r25	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     e76:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     e7a:	88 23       	and	r24, r24
     e7c:	c9 f0       	breq	.+50     	; 0xeb0 <__stack+0x5b1>
					{
						kursor += 3;
     e7e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
     e82:	9c ef       	ldi	r25, 0xFC	; 252
     e84:	98 0f       	add	r25, r24
     e86:	93 30       	cpi	r25, 0x03	; 3
     e88:	20 f4       	brcc	.+8      	; 0xe92 <__stack+0x593>
							kursor = 10;
     e8a:	8a e0       	ldi	r24, 0x0A	; 10
     e8c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
     e90:	09 c0       	rjmp	.+18     	; 0xea4 <__stack+0x5a5>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     e92:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
     e94:	8e 30       	cpi	r24, 0x0E	; 14
     e96:	1c f4       	brge	.+6      	; 0xe9e <__stack+0x59f>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     e98:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <__stack+0x5a5>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
							kursor = 13;
     e9e:	8d e0       	ldi	r24, 0x0D	; 13
     ea0:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     eaa:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
     eae:	4c c2       	rjmp	.+1176   	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     eb6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     eba:	88 23       	and	r24, r24
     ebc:	c9 f0       	breq	.+50     	; 0xef0 <__stack+0x5f1>
					{
						kursor -= 3;
     ebe:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
     ec2:	96 ef       	ldi	r25, 0xF6	; 246
     ec4:	98 0f       	add	r25, r24
     ec6:	93 30       	cpi	r25, 0x03	; 3
     ec8:	20 f4       	brcc	.+8      	; 0xed2 <__stack+0x5d3>
							kursor = 6;
     eca:	86 e0       	ldi	r24, 0x06	; 6
     ecc:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <__stack+0x5e5>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     ed2:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	1c f0       	brlt	.+6      	; 0xede <__stack+0x5df>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     ed8:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <__stack+0x5e5>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
							kursor = 3;
     ede:	83 e0       	ldi	r24, 0x03	; 3
     ee0:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     eea:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
     eee:	2c c2       	rjmp	.+1112   	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     ef0:	62 e0       	ldi	r22, 0x02	; 2
     ef2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     ef6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     efa:	88 23       	and	r24, r24
     efc:	99 f1       	breq	.+102    	; 0xf64 <__stack+0x665>
					{
						if (kursor == 3)												//podesava SATE_ON ++
     efe:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     f02:	83 30       	cpi	r24, 0x03	; 3
     f04:	51 f4       	brne	.+20     	; 0xf1a <__stack+0x61b>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	42 ed       	ldi	r20, 0xD2	; 210
     f0a:	51 e0       	ldi	r21, 0x01	; 1
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	72 e0       	ldi	r23, 0x02	; 2
     f10:	89 e2       	ldi	r24, 0x29	; 41
     f12:	92 e0       	ldi	r25, 0x02	; 2
     f14:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sati_ispis>
     f18:	17 c2       	rjmp	.+1070   	; 0x1348 <__stack+0xa49>
						else if (kursor == 6)											//podesava MINUTE_ON ++
     f1a:	86 30       	cpi	r24, 0x06	; 6
     f1c:	51 f4       	brne	.+20     	; 0xf32 <__stack+0x633>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	42 ed       	ldi	r20, 0xD2	; 210
     f22:	51 e0       	ldi	r21, 0x01	; 1
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	72 e0       	ldi	r23, 0x02	; 2
     f28:	88 e2       	ldi	r24, 0x28	; 40
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	0e 94 34 02 	call	0x468	; 0x468 <minuti_ispis>
     f30:	0b c2       	rjmp	.+1046   	; 0x1348 <__stack+0xa49>
						else if (kursor == 10)											//podesava SATE_OFF ++
     f32:	8a 30       	cpi	r24, 0x0A	; 10
     f34:	51 f4       	brne	.+20     	; 0xf4a <__stack+0x64b>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	42 ed       	ldi	r20, 0xD2	; 210
     f3a:	51 e0       	ldi	r21, 0x01	; 1
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	72 e0       	ldi	r23, 0x02	; 2
     f40:	87 e1       	ldi	r24, 0x17	; 23
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sati_ispis>
     f48:	ff c1       	rjmp	.+1022   	; 0x1348 <__stack+0xa49>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
     f4a:	8d 30       	cpi	r24, 0x0D	; 13
     f4c:	09 f0       	breq	.+2      	; 0xf50 <__stack+0x651>
     f4e:	fc c1       	rjmp	.+1016   	; 0x1348 <__stack+0xa49>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	42 ed       	ldi	r20, 0xD2	; 210
     f54:	51 e0       	ldi	r21, 0x01	; 1
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	72 e0       	ldi	r23, 0x02	; 2
     f5a:	86 e1       	ldi	r24, 0x16	; 22
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	0e 94 34 02 	call	0x468	; 0x468 <minuti_ispis>
     f62:	f2 c1       	rjmp	.+996    	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     f64:	63 e0       	ldi	r22, 0x03	; 3
     f66:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     f6a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     f6e:	88 23       	and	r24, r24
     f70:	99 f1       	breq	.+102    	; 0xfd8 <__stack+0x6d9>
					{
						if (kursor == 3)												//podesava SATE_ON --
     f72:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
     f76:	83 30       	cpi	r24, 0x03	; 3
     f78:	51 f4       	brne	.+20     	; 0xf8e <__stack+0x68f>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
     f7a:	21 e0       	ldi	r18, 0x01	; 1
     f7c:	42 ed       	ldi	r20, 0xD2	; 210
     f7e:	51 e0       	ldi	r21, 0x01	; 1
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	72 e0       	ldi	r23, 0x02	; 2
     f84:	89 e2       	ldi	r24, 0x29	; 41
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sati_ispis>
     f8c:	dd c1       	rjmp	.+954    	; 0x1348 <__stack+0xa49>
						else if (kursor == 6)											//podesava MINUTE_ON --
     f8e:	86 30       	cpi	r24, 0x06	; 6
     f90:	51 f4       	brne	.+20     	; 0xfa6 <__stack+0x6a7>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
     f92:	21 e0       	ldi	r18, 0x01	; 1
     f94:	42 ed       	ldi	r20, 0xD2	; 210
     f96:	51 e0       	ldi	r21, 0x01	; 1
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	72 e0       	ldi	r23, 0x02	; 2
     f9c:	88 e2       	ldi	r24, 0x28	; 40
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	0e 94 34 02 	call	0x468	; 0x468 <minuti_ispis>
     fa4:	d1 c1       	rjmp	.+930    	; 0x1348 <__stack+0xa49>
						else if (kursor == 10)											//podesava SATE_OFF --
     fa6:	8a 30       	cpi	r24, 0x0A	; 10
     fa8:	51 f4       	brne	.+20     	; 0xfbe <__stack+0x6bf>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
     faa:	21 e0       	ldi	r18, 0x01	; 1
     fac:	42 ed       	ldi	r20, 0xD2	; 210
     fae:	51 e0       	ldi	r21, 0x01	; 1
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	72 e0       	ldi	r23, 0x02	; 2
     fb4:	87 e1       	ldi	r24, 0x17	; 23
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sati_ispis>
     fbc:	c5 c1       	rjmp	.+906    	; 0x1348 <__stack+0xa49>
						else if (kursor == 13)											//podesava MINUTE_OFF --
     fbe:	8d 30       	cpi	r24, 0x0D	; 13
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <__stack+0x6c5>
     fc2:	c2 c1       	rjmp	.+900    	; 0x1348 <__stack+0xa49>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
     fc4:	21 e0       	ldi	r18, 0x01	; 1
     fc6:	42 ed       	ldi	r20, 0xD2	; 210
     fc8:	51 e0       	ldi	r21, 0x01	; 1
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	72 e0       	ldi	r23, 0x02	; 2
     fce:	86 e1       	ldi	r24, 0x16	; 22
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	0e 94 34 02 	call	0x468	; 0x468 <minuti_ispis>
     fd6:	b8 c1       	rjmp	.+880    	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
     fd8:	65 e0       	ldi	r22, 0x05	; 5
     fda:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     fde:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
     fe2:	88 23       	and	r24, r24
     fe4:	b1 f1       	breq	.+108    	; 0x1052 <__stack+0x753>
					{
						vreme_paljenja = snap_vreme_paljenja;	//konacno upisem
     fe6:	89 e0       	ldi	r24, 0x09	; 9
     fe8:	e7 e2       	ldi	r30, 0x27	; 39
     fea:	f2 e0       	ldi	r31, 0x02	; 2
     fec:	ae e1       	ldi	r26, 0x1E	; 30
     fee:	b2 e0       	ldi	r27, 0x02	; 2
     ff0:	01 90       	ld	r0, Z+
     ff2:	0d 92       	st	X+, r0
     ff4:	8a 95       	dec	r24
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <__stack+0x6f1>
						vreme_gasenja = snap_vreme_gasenja;
     ff8:	89 e0       	ldi	r24, 0x09	; 9
     ffa:	e5 e1       	ldi	r30, 0x15	; 21
     ffc:	f2 e0       	ldi	r31, 0x02	; 2
     ffe:	a0 e3       	ldi	r26, 0x30	; 48
    1000:	b2 e0       	ldi	r27, 0x02	; 2
    1002:	01 90       	ld	r0, Z+
    1004:	0d 92       	st	X+, r0
    1006:	8a 95       	dec	r24
    1008:	e1 f7       	brne	.-8      	; 0x1002 <__stack+0x703>
						
						/* upis u eeprom */
						EEPROM_write(UPALI_HR_ADR, vreme_paljenja.hr);
    100a:	ce e1       	ldi	r28, 0x1E	; 30
    100c:	d2 e0       	ldi	r29, 0x02	; 2
    100e:	6a 81       	ldd	r22, Y+2	; 0x02
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <EEPROM_write>
						EEPROM_write(UPALI_MIN_ADR, vreme_paljenja.min);
    1018:	69 81       	ldd	r22, Y+1	; 0x01
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <EEPROM_write>
						EEPROM_write(UGASI_HR_ADR, vreme_gasenja.hr);
    1022:	c0 e3       	ldi	r28, 0x30	; 48
    1024:	d2 e0       	ldi	r29, 0x02	; 2
    1026:	6a 81       	ldd	r22, Y+2	; 0x02
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <EEPROM_write>
						EEPROM_write(UGASI_MIN_ADR, vreme_gasenja.min);
    1030:	69 81       	ldd	r22, Y+1	; 0x01
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    1040:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	0e 94 cc 03 	call	0x798	; 0x798 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
    1050:	7b c1       	rjmp	.+758    	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1052:	64 e0       	ldi	r22, 0x04	; 4
    1054:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    1058:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
    105c:	88 23       	and	r24, r24
    105e:	09 f4       	brne	.+2      	; 0x1062 <__stack+0x763>
    1060:	73 c1       	rjmp	.+742    	; 0x1348 <__stack+0xa49>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    1068:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	0e 94 cc 03 	call	0x798	; 0x798 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
    1078:	67 c1       	rjmp	.+718    	; 0x1348 <__stack+0xa49>
		case JEDNOKRATNO:
					//da opali samo jednom, bez obzira na glavni period
					/* prakticno kopija POD-ON-OFF samo se u drugu promenljivu belezi, cak pozajmljujem i iste tmp promenljive */
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
    107a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_pod_ONOFF>
    107e:	88 23       	and	r24, r24
    1080:	09 f4       	brne	.+2      	; 0x1084 <__stack+0x785>
    1082:	59 c0       	rjmp	.+178    	; 0x1136 <__stack+0x837>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
    1084:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_pod_ONOFF>
						
						snap_vreme_paljenja = jednokratno_paljenje;
    1088:	89 e0       	ldi	r24, 0x09	; 9
    108a:	ef ee       	ldi	r30, 0xEF	; 239
    108c:	f1 e0       	ldi	r31, 0x01	; 1
    108e:	a7 e2       	ldi	r26, 0x27	; 39
    1090:	b2 e0       	ldi	r27, 0x02	; 2
    1092:	01 90       	ld	r0, Z+
    1094:	0d 92       	st	X+, r0
    1096:	8a 95       	dec	r24
    1098:	e1 f7       	brne	.-8      	; 0x1092 <__stack+0x793>
						snap_vreme_gasenja = jednokratno_gasenje;
    109a:	89 e0       	ldi	r24, 0x09	; 9
    109c:	e6 ee       	ldi	r30, 0xE6	; 230
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	a5 e1       	ldi	r26, 0x15	; 21
    10a2:	b2 e0       	ldi	r27, 0x02	; 2
    10a4:	01 90       	ld	r0, Z+
    10a6:	0d 92       	st	X+, r0
    10a8:	8a 95       	dec	r24
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <__stack+0x7a5>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
    10ac:	83 e0       	ldi	r24, 0x03	; 3
    10ae:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
						
						lcd1602_goto_xy(0,0);
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
						lcd1602_send_string("  JEDNOKRATNO:  ");
    10ba:	8b e7       	ldi	r24, 0x7B	; 123
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
    10c2:	e5 e1       	ldi	r30, 0x15	; 21
    10c4:	f2 e0       	ldi	r31, 0x02	; 2
    10c6:	81 81       	ldd	r24, Z+1	; 0x01
    10c8:	1f 92       	push	r1
    10ca:	8f 93       	push	r24
    10cc:	82 81       	ldd	r24, Z+2	; 0x02
    10ce:	1f 92       	push	r1
    10d0:	8f 93       	push	r24
    10d2:	e7 e2       	ldi	r30, 0x27	; 39
    10d4:	f2 e0       	ldi	r31, 0x02	; 2
    10d6:	81 81       	ldd	r24, Z+1	; 0x01
    10d8:	1f 92       	push	r1
    10da:	8f 93       	push	r24
    10dc:	82 81       	ldd	r24, Z+2	; 0x02
    10de:	1f 92       	push	r1
    10e0:	8f 93       	push	r24
    10e2:	8a e1       	ldi	r24, 0x1A	; 26
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	9f 93       	push	r25
    10f0:	8f 93       	push	r24
    10f2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
						
						lcd1602_goto_xy(0,1);
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
						lcd1602_send_string("  ");
    10fe:	87 e1       	ldi	r24, 0x17	; 23
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						lcd1602_send_string(bafer);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						lcd1602_send_string("  ");
    110e:	87 e1       	ldi	r24, 0x17	; 23
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
    111c:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	0e 94 cc 03 	call	0x798	; 0x798 <lcd1602_cursor_blink>
    1126:	8d b7       	in	r24, 0x3d	; 61
    1128:	9e b7       	in	r25, 0x3e	; 62
    112a:	0c 96       	adiw	r24, 0x0c	; 12
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	9e bf       	out	0x3e, r25	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    113c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
    1140:	88 23       	and	r24, r24
    1142:	c9 f0       	breq	.+50     	; 0x1176 <__stack+0x877>
					{
						kursor += 3;
    1144:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
    1148:	9c ef       	ldi	r25, 0xFC	; 252
    114a:	98 0f       	add	r25, r24
    114c:	93 30       	cpi	r25, 0x03	; 3
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__stack+0x859>
						kursor = 10;
    1150:	8a e0       	ldi	r24, 0x0A	; 10
    1152:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
    1156:	09 c0       	rjmp	.+18     	; 0x116a <__stack+0x86b>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
    1158:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 10;
						else if (kursor > 13)
    115a:	8e 30       	cpi	r24, 0x0E	; 14
    115c:	1c f4       	brge	.+6      	; 0x1164 <__stack+0x865>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
    115e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
    1162:	03 c0       	rjmp	.+6      	; 0x116a <__stack+0x86b>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 10;
						else if (kursor > 13)
						kursor = 13;
    1164:	8d e0       	ldi	r24, 0x0D	; 13
    1166:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
						
						lcd1602_goto_xy(kursor,1);
    116a:	61 e0       	ldi	r22, 0x01	; 1
    116c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
    1170:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
    1174:	e9 c0       	rjmp	.+466    	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    117c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
    1180:	88 23       	and	r24, r24
    1182:	c9 f0       	breq	.+50     	; 0x11b6 <__stack+0x8b7>
					{
						kursor -= 3;
    1184:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
    1188:	96 ef       	ldi	r25, 0xF6	; 246
    118a:	98 0f       	add	r25, r24
    118c:	93 30       	cpi	r25, 0x03	; 3
    118e:	20 f4       	brcc	.+8      	; 0x1198 <__stack+0x899>
						kursor = 6;
    1190:	86 e0       	ldi	r24, 0x06	; 6
    1192:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <__stack+0x8ab>
						
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
    1198:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 6;
						else if(kursor < 3)
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	1c f0       	brlt	.+6      	; 0x11a4 <__stack+0x8a5>
						
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
    119e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <__stack+0x8ab>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 6;
						else if(kursor < 3)
						kursor = 3;
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <kursor>
						
						lcd1602_goto_xy(kursor,1);
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
    11b0:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd1602_goto_xy>
    11b4:	c9 c0       	rjmp	.+402    	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
    11b6:	62 e0       	ldi	r22, 0x02	; 2
    11b8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    11bc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
    11c0:	88 23       	and	r24, r24
    11c2:	99 f1       	breq	.+102    	; 0x122a <__stack+0x92b>
					{
						if (kursor == 3)												//podesava SATE_ON ++
    11c4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	51 f4       	brne	.+20     	; 0x11e0 <__stack+0x8e1>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	42 ed       	ldi	r20, 0xD2	; 210
    11d0:	51 e0       	ldi	r21, 0x01	; 1
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	72 e0       	ldi	r23, 0x02	; 2
    11d6:	89 e2       	ldi	r24, 0x29	; 41
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sati_ispis>
    11de:	b4 c0       	rjmp	.+360    	; 0x1348 <__stack+0xa49>
						else if (kursor == 6)											//podesava MINUTE_ON ++
    11e0:	86 30       	cpi	r24, 0x06	; 6
    11e2:	51 f4       	brne	.+20     	; 0x11f8 <__stack+0x8f9>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	42 ed       	ldi	r20, 0xD2	; 210
    11e8:	51 e0       	ldi	r21, 0x01	; 1
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	72 e0       	ldi	r23, 0x02	; 2
    11ee:	88 e2       	ldi	r24, 0x28	; 40
    11f0:	92 e0       	ldi	r25, 0x02	; 2
    11f2:	0e 94 34 02 	call	0x468	; 0x468 <minuti_ispis>
    11f6:	a8 c0       	rjmp	.+336    	; 0x1348 <__stack+0xa49>
						else if (kursor == 10)											//podesava SATE_OFF ++
    11f8:	8a 30       	cpi	r24, 0x0A	; 10
    11fa:	51 f4       	brne	.+20     	; 0x1210 <__stack+0x911>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	42 ed       	ldi	r20, 0xD2	; 210
    1200:	51 e0       	ldi	r21, 0x01	; 1
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	72 e0       	ldi	r23, 0x02	; 2
    1206:	87 e1       	ldi	r24, 0x17	; 23
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sati_ispis>
    120e:	9c c0       	rjmp	.+312    	; 0x1348 <__stack+0xa49>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
    1210:	8d 30       	cpi	r24, 0x0D	; 13
    1212:	09 f0       	breq	.+2      	; 0x1216 <__stack+0x917>
    1214:	99 c0       	rjmp	.+306    	; 0x1348 <__stack+0xa49>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	42 ed       	ldi	r20, 0xD2	; 210
    121a:	51 e0       	ldi	r21, 0x01	; 1
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	72 e0       	ldi	r23, 0x02	; 2
    1220:	86 e1       	ldi	r24, 0x16	; 22
    1222:	92 e0       	ldi	r25, 0x02	; 2
    1224:	0e 94 34 02 	call	0x468	; 0x468 <minuti_ispis>
    1228:	8f c0       	rjmp	.+286    	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    122a:	63 e0       	ldi	r22, 0x03	; 3
    122c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    1230:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
    1234:	88 23       	and	r24, r24
    1236:	99 f1       	breq	.+102    	; 0x129e <__stack+0x99f>
					{
						if (kursor == 3)												//podesava SATE_ON --
    1238:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <kursor>
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	51 f4       	brne	.+20     	; 0x1254 <__stack+0x955>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
    1240:	21 e0       	ldi	r18, 0x01	; 1
    1242:	42 ed       	ldi	r20, 0xD2	; 210
    1244:	51 e0       	ldi	r21, 0x01	; 1
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	72 e0       	ldi	r23, 0x02	; 2
    124a:	89 e2       	ldi	r24, 0x29	; 41
    124c:	92 e0       	ldi	r25, 0x02	; 2
    124e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sati_ispis>
    1252:	7a c0       	rjmp	.+244    	; 0x1348 <__stack+0xa49>
						else if (kursor == 6)											//podesava MINUTE_ON --
    1254:	86 30       	cpi	r24, 0x06	; 6
    1256:	51 f4       	brne	.+20     	; 0x126c <__stack+0x96d>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
    1258:	21 e0       	ldi	r18, 0x01	; 1
    125a:	42 ed       	ldi	r20, 0xD2	; 210
    125c:	51 e0       	ldi	r21, 0x01	; 1
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	72 e0       	ldi	r23, 0x02	; 2
    1262:	88 e2       	ldi	r24, 0x28	; 40
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	0e 94 34 02 	call	0x468	; 0x468 <minuti_ispis>
    126a:	6e c0       	rjmp	.+220    	; 0x1348 <__stack+0xa49>
						else if (kursor == 10)											//podesava SATE_OFF --
    126c:	8a 30       	cpi	r24, 0x0A	; 10
    126e:	51 f4       	brne	.+20     	; 0x1284 <__stack+0x985>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
    1270:	21 e0       	ldi	r18, 0x01	; 1
    1272:	42 ed       	ldi	r20, 0xD2	; 210
    1274:	51 e0       	ldi	r21, 0x01	; 1
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	72 e0       	ldi	r23, 0x02	; 2
    127a:	87 e1       	ldi	r24, 0x17	; 23
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sati_ispis>
    1282:	62 c0       	rjmp	.+196    	; 0x1348 <__stack+0xa49>
						else if (kursor == 13)											//podesava MINUTE_OFF --
    1284:	8d 30       	cpi	r24, 0x0D	; 13
    1286:	09 f0       	breq	.+2      	; 0x128a <__stack+0x98b>
    1288:	5f c0       	rjmp	.+190    	; 0x1348 <__stack+0xa49>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
    128a:	21 e0       	ldi	r18, 0x01	; 1
    128c:	42 ed       	ldi	r20, 0xD2	; 210
    128e:	51 e0       	ldi	r21, 0x01	; 1
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	72 e0       	ldi	r23, 0x02	; 2
    1294:	86 e1       	ldi	r24, 0x16	; 22
    1296:	92 e0       	ldi	r25, 0x02	; 2
    1298:	0e 94 34 02 	call	0x468	; 0x468 <minuti_ispis>
    129c:	55 c0       	rjmp	.+170    	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    129e:	65 e0       	ldi	r22, 0x05	; 5
    12a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    12a4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
    12a8:	88 23       	and	r24, r24
    12aa:	b1 f1       	breq	.+108    	; 0x1318 <__stack+0xa19>
					{
						jednokratno_paljenje = snap_vreme_paljenja;	//konacno upisem
    12ac:	89 e0       	ldi	r24, 0x09	; 9
    12ae:	e7 e2       	ldi	r30, 0x27	; 39
    12b0:	f2 e0       	ldi	r31, 0x02	; 2
    12b2:	af ee       	ldi	r26, 0xEF	; 239
    12b4:	b1 e0       	ldi	r27, 0x01	; 1
    12b6:	01 90       	ld	r0, Z+
    12b8:	0d 92       	st	X+, r0
    12ba:	8a 95       	dec	r24
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <__stack+0x9b7>
						jednokratno_gasenje = snap_vreme_gasenja;
    12be:	89 e0       	ldi	r24, 0x09	; 9
    12c0:	e5 e1       	ldi	r30, 0x15	; 21
    12c2:	f2 e0       	ldi	r31, 0x02	; 2
    12c4:	a6 ee       	ldi	r26, 0xE6	; 230
    12c6:	b1 e0       	ldi	r27, 0x01	; 1
    12c8:	01 90       	ld	r0, Z+
    12ca:	0d 92       	st	X+, r0
    12cc:	8a 95       	dec	r24
    12ce:	e1 f7       	brne	.-8      	; 0x12c8 <__stack+0x9c9>
						
						/* upis u eeprom */
						EEPROM_write(JEDNOK_UPALI_HR_ADR, jednokratno_paljenje.hr);
    12d0:	cf ee       	ldi	r28, 0xEF	; 239
    12d2:	d1 e0       	ldi	r29, 0x01	; 1
    12d4:	6a 81       	ldd	r22, Y+2	; 0x02
    12d6:	84 e0       	ldi	r24, 0x04	; 4
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <EEPROM_write>
						EEPROM_write(JEDNOK_UPALI_MIN_ADR, jednokratno_paljenje.min);
    12de:	69 81       	ldd	r22, Y+1	; 0x01
    12e0:	85 e0       	ldi	r24, 0x05	; 5
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_HR_ADR, jednokratno_gasenje.hr);
    12e8:	c6 ee       	ldi	r28, 0xE6	; 230
    12ea:	d1 e0       	ldi	r29, 0x01	; 1
    12ec:	6a 81       	ldd	r22, Y+2	; 0x02
    12ee:	86 e0       	ldi	r24, 0x06	; 6
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_MIN_ADR, jednokratno_gasenje.min);
    12f6:	69 81       	ldd	r22, Y+1	; 0x01
    12f8:	87 e0       	ldi	r24, 0x07	; 7
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    1306:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 cc 03 	call	0x798	; 0x798 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
    1316:	18 c0       	rjmp	.+48     	; 0x1348 <__stack+0xa49>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1318:	64 e0       	ldi	r22, 0x04	; 4
    131a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    131e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <ocitaj_jedan_taster>
    1322:	88 23       	and	r24, r24
    1324:	89 f0       	breq	.+34     	; 0x1348 <__stack+0xa49>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    132c:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 cc 03 	call	0x798	; 0x798 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <STATE>
		break;
		
		default: {}
		
	}
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <__stack+0xa49>
						}
					}
					
					lcd1602_goto_xy(1,1);
					pom = (pom==KURSOR_MENU1_MAX) ? -1 : pom;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
					lcd1602_send_string(menu1_txt[pom + 1]);
    133e:	84 e9       	ldi	r24, 0x94	; 148
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 b6 03 	call	0x76c	; 0x76c <lcd1602_send_string>
    1346:	97 cb       	rjmp	.-2258   	; 0xa76 <__stack+0x177>
		break;
		
		default: {}
		
	}
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	0f 91       	pop	r16
    134e:	08 95       	ret

00001350 <main>:
{
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			
    1350:	0e 94 00 0c 	call	0x1800	; 0x1800 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup na SDA i SCL, PC4-PC5 
    1354:	0e 94 75 01 	call	0x2ea	; 0x2ea <i2c_init>
	lcd1602_init();
    1358:	0e 94 50 03 	call	0x6a0	; 0x6a0 <lcd1602_init>
	ADC_init();				
    135c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda; 500k
    1360:	60 e2       	ldi	r22, 0x20	; 32
    1362:	71 ea       	ldi	r23, 0xA1	; 161
    1364:	87 e0       	ldi	r24, 0x07	; 7
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart_init>
	DS3231_init();			//RTC init
    136c:	0e 94 86 0b 	call	0x170c	; 0x170c <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
    1370:	0e 94 83 0a 	call	0x1506	; 0x1506 <pc_init>
	tasteri_init();			//NAPOMENA: PD2-7 INPUT, INT_PULLUP=ON
    1374:	0e 94 a2 0a 	call	0x1544	; 0x1544 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
    1378:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;		//pinB 4 OUTPUT 
    137a:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
    137c:	78 94       	sei
	//EEPROM_write(UPALI_MIN_ADR, 25);
	//EEPROM_write(UGASI_HR_ADR, 5);
	//EEPROM_write(UGASI_MIN_ADR, 45);
	
	/* citanje on-off vremena iz eeproma pri inicijalizaciji */
	vreme_paljenja.hr = EEPROM_read(UPALI_HR_ADR);
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 64 01 	call	0x2c8	; 0x2c8 <EEPROM_read>
    1386:	ce e1       	ldi	r28, 0x1E	; 30
    1388:	d2 e0       	ldi	r29, 0x02	; 2
    138a:	8a 83       	std	Y+2, r24	; 0x02
	vreme_paljenja.min = EEPROM_read(UPALI_MIN_ADR);
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 64 01 	call	0x2c8	; 0x2c8 <EEPROM_read>
    1394:	89 83       	std	Y+1, r24	; 0x01
	vreme_gasenja.hr = EEPROM_read(UGASI_HR_ADR);
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <EEPROM_read>
    139e:	c0 e3       	ldi	r28, 0x30	; 48
    13a0:	d2 e0       	ldi	r29, 0x02	; 2
    13a2:	8a 83       	std	Y+2, r24	; 0x02
	vreme_gasenja.min = EEPROM_read(UGASI_MIN_ADR);
    13a4:	83 e0       	ldi	r24, 0x03	; 3
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <EEPROM_read>
    13ac:	89 83       	std	Y+1, r24	; 0x01
	
	jednokratno_paljenje.hr = EEPROM_read(JEDNOK_UPALI_HR_ADR);
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <EEPROM_read>
    13b6:	cf ee       	ldi	r28, 0xEF	; 239
    13b8:	d1 e0       	ldi	r29, 0x01	; 1
    13ba:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_paljenje.min = EEPROM_read(JEDNOK_UPALI_MIN_ADR);
    13bc:	85 e0       	ldi	r24, 0x05	; 5
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <EEPROM_read>
    13c4:	89 83       	std	Y+1, r24	; 0x01
	jednokratno_gasenje.hr = EEPROM_read(JEDNOK_UGASI_HR_ADR);
    13c6:	86 e0       	ldi	r24, 0x06	; 6
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 64 01 	call	0x2c8	; 0x2c8 <EEPROM_read>
    13ce:	c6 ee       	ldi	r28, 0xE6	; 230
    13d0:	d1 e0       	ldi	r29, 0x01	; 1
    13d2:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_gasenje.min = EEPROM_read(JEDNOK_UGASI_MIN_ADR);
    13d4:	87 e0       	ldi	r24, 0x07	; 7
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <EEPROM_read>
    13dc:	89 83       	std	Y+1, r24	; 0x01
	
	snap_vreme_paljenja = vreme_paljenja;
    13de:	89 e0       	ldi	r24, 0x09	; 9
    13e0:	ee e1       	ldi	r30, 0x1E	; 30
    13e2:	f2 e0       	ldi	r31, 0x02	; 2
    13e4:	a7 e2       	ldi	r26, 0x27	; 39
    13e6:	b2 e0       	ldi	r27, 0x02	; 2
    13e8:	01 90       	ld	r0, Z+
    13ea:	0d 92       	st	X+, r0
    13ec:	8a 95       	dec	r24
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <main+0x98>
	snap_vreme_gasenja = vreme_gasenja;
    13f0:	89 e0       	ldi	r24, 0x09	; 9
    13f2:	e0 e3       	ldi	r30, 0x30	; 48
    13f4:	f2 e0       	ldi	r31, 0x02	; 2
    13f6:	a5 e1       	ldi	r26, 0x15	; 21
    13f8:	b2 e0       	ldi	r27, 0x02	; 2
    13fa:	01 90       	ld	r0, Z+
    13fc:	0d 92       	st	X+, r0
    13fe:	8a 95       	dec	r24
    1400:	e1 f7       	brne	.-8      	; 0x13fa <main+0xaa>
			
			//sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
			//uart_send_str(bafer);
			//uart_send_str("\n"); //novi red
			
			sprintf(bafer, "%4d  ", napon);
    1402:	0f 2e       	mov	r0, r31
    1404:	fc e8       	ldi	r31, 0x8C	; 140
    1406:	ef 2e       	mov	r14, r31
    1408:	f1 e0       	ldi	r31, 0x01	; 1
    140a:	ff 2e       	mov	r15, r31
    140c:	f0 2d       	mov	r31, r0
    140e:	c1 e0       	ldi	r28, 0x01	; 1
    1410:	d2 e0       	ldi	r29, 0x02	; 2
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    1412:	dd 24       	eor	r13, r13
    1414:	d3 94       	inc	r13
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
    1416:	0e 94 af 0a 	call	0x155e	; 0x155e <ocitaj_tastere>
    141a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasteri>
		
		/* ocitava napon i struju */
		adc_read();			//vrv je traljavo ovde ga stavljati ali nmvz
    141e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <adc_read>
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
    1422:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <flag_pc_int_pomocni>
    1426:	88 23       	and	r24, r24
    1428:	09 f4       	brne	.+2      	; 0x142c <main+0xdc>
    142a:	6a c0       	rjmp	.+212    	; 0x1500 <main+0x1b0>
		{
			flag_pc_int_pomocni = 0;
    142c:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
    1430:	00 e0       	ldi	r16, 0x00	; 0
    1432:	21 e4       	ldi	r18, 0x41	; 65
    1434:	32 e0       	ldi	r19, 0x02	; 2
    1436:	49 e3       	ldi	r20, 0x39	; 57
    1438:	52 e0       	ldi	r21, 0x02	; 2
    143a:	6a e3       	ldi	r22, 0x3A	; 58
    143c:	72 e0       	ldi	r23, 0x02	; 2
    143e:	8b e3       	ldi	r24, 0x3B	; 59
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	0e 94 8f 0b 	call	0x171e	; 0x171e <getTime>
			
			//sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
			//uart_send_str(bafer);
			//uart_send_str("\n"); //novi red
			
			sprintf(bafer, "%4d  ", napon);
    1446:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <napon+0x1>
    144a:	8f 93       	push	r24
    144c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <napon>
    1450:	8f 93       	push	r24
    1452:	ff 92       	push	r15
    1454:	ef 92       	push	r14
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <sprintf>
			uart_send_str(bafer);
    145e:	ce 01       	movw	r24, r28
    1460:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <uart_send_str>
			dtostrf(struja, 3, 1, bafer);
    1464:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <struja>
    1468:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <struja+0x1>
    146c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <struja+0x2>
    1470:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <struja+0x3>
    1474:	8e 01       	movw	r16, r28
    1476:	21 e0       	ldi	r18, 0x01	; 1
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	43 e0       	ldi	r20, 0x03	; 3
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <dtostrf>
			uart_send_str(bafer);
    1482:	ce 01       	movw	r24, r28
    1484:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <uart_send_str>
			uart_send_str("\n");
    1488:	82 e9       	ldi	r24, 0x92	; 146
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <uart_send_str>
			
			/* JEDNOKRATNI PERIOD PALJENJA */						
			if (jednok_on_off==1)
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <jednok_on_off>
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	d1 f4       	brne	.+52     	; 0x14d8 <main+0x188>
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
    14a4:	49 e3       	ldi	r20, 0x39	; 57
    14a6:	52 e0       	ldi	r21, 0x02	; 2
    14a8:	66 ee       	ldi	r22, 0xE6	; 230
    14aa:	71 e0       	ldi	r23, 0x01	; 1
    14ac:	8f ee       	ldi	r24, 0xEF	; 239
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <period_paljenja>
    14b4:	88 23       	and	r24, r24
    14b6:	29 f0       	breq	.+10     	; 0x14c2 <main+0x172>
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    14b8:	d0 92 d4 01 	sts	0x01D4, r13	; 0x8001d4 <ukljuceno>
					jednok_se_desio = 1;
    14bc:	d0 92 d0 01 	sts	0x01D0, r13	; 0x8001d0 <jednok_se_desio>
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <main+0x18c>
				}
				else if(jednok_se_desio)												//jednok. setovan, ALI ISTEKAO
    14c2:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <jednok_se_desio>
    14c6:	88 23       	and	r24, r24
    14c8:	49 f0       	breq	.+18     	; 0x14dc <main+0x18c>
				{																		//proverava se tek kad period paljenja vraca 0, tj kada gornji IF nije ispunjen
					ukljuceno = 0;
    14ca:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <ukljuceno>
					jednok_on_off = 0;		//resetujem flag		
    14ce:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <jednok_on_off>
					jednok_se_desio = 0;	//resetujem i ovaj flag. Da nema ovoga Jednokratno paljenje nikada ne bi startovalo ako tek treba da se desi
    14d2:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <jednok_se_desio>
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <main+0x18c>
				}
			}
			else
				ukljuceno = 0;
    14d8:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <ukljuceno>
			
			/* GLAVNI PERIOD; paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno |= period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);	//ILI veza glavnog i jednok. perioda
    14dc:	49 e3       	ldi	r20, 0x39	; 57
    14de:	52 e0       	ldi	r21, 0x02	; 2
    14e0:	60 e3       	ldi	r22, 0x30	; 48
    14e2:	72 e0       	ldi	r23, 0x02	; 2
    14e4:	8e e1       	ldi	r24, 0x1E	; 30
    14e6:	92 e0       	ldi	r25, 0x02	; 2
    14e8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <period_paljenja>
    14ec:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <ukljuceno>
    14f0:	89 2b       	or	r24, r25
    14f2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ukljuceno>
			
			if (ukljuceno)
    14f6:	88 23       	and	r24, r24
    14f8:	11 f0       	breq	.+4      	; 0x14fe <main+0x1ae>
				PORTB |= 1<<PINB5;   //high
    14fa:	2d 9a       	sbi	0x05, 5	; 5
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <main+0x1b0>
			else
				PORTB &= ~(1<<PINB5);	//low
    14fe:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
    1500:	0e 94 14 04 	call	0x828	; 0x828 <fsm_lcd_menu>
		

		
    }
    1504:	88 cf       	rjmp	.-240    	; 0x1416 <main+0xc6>

00001506 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
    1506:	e8 e6       	ldi	r30, 0x68	; 104
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	82 60       	ori	r24, 0x02	; 2
    150e:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
    1510:	ec e6       	ldi	r30, 0x6C	; 108
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	88 60       	ori	r24, 0x08	; 8
    1518:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
    151a:	3b 98       	cbi	0x07, 3	; 7
    151c:	08 95       	ret

0000151e <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
    152a:	33 9b       	sbis	0x06, 3	; 6
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <__vector_4+0x1a>
	{
		flag_pc_int = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flag_pc_int>
		flag_pc_int_pomocni = 1;
    1534:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <flag_pc_int_pomocni>
	}
		
    1538:	8f 91       	pop	r24
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <tasteri_init>:
extern const char *byte_to_binary(int x);

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
    1544:	8a b1       	in	r24, 0x0a	; 10
    1546:	8f 70       	andi	r24, 0x0F	; 15
    1548:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
    154a:	84 b1       	in	r24, 0x04	; 4
    154c:	8c 7f       	andi	r24, 0xFC	; 252
    154e:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
    1550:	8b b1       	in	r24, 0x0b	; 11
    1552:	80 6f       	ori	r24, 0xF0	; 240
    1554:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
    1556:	85 b1       	in	r24, 0x05	; 5
    1558:	83 60       	ori	r24, 0x03	; 3
    155a:	85 b9       	out	0x05, r24	; 5
    155c:	08 95       	ret

0000155e <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
    155e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <flag_prekid_debounce_time_half>
    1562:	88 23       	and	r24, r24
    1564:	69 f0       	breq	.+26     	; 0x1580 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
    1566:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
    156a:	93 b1       	in	r25, 0x03	; 3
    156c:	29 b1       	in	r18, 0x09	; 9
    156e:	30 e1       	ldi	r19, 0x10	; 16
    1570:	93 9f       	mul	r25, r19
    1572:	c0 01       	movw	r24, r0
    1574:	11 24       	eor	r1, r1
    1576:	92 2f       	mov	r25, r18
    1578:	92 95       	swap	r25
    157a:	9f 70       	andi	r25, 0x0F	; 15
    157c:	89 2b       	or	r24, r25
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
    1580:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
    1582:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <flag_prekid_debounce_time>
    1586:	99 23       	and	r25, r25
    1588:	81 f0       	breq	.+32     	; 0x15aa <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
    158a:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
    158e:	93 b1       	in	r25, 0x03	; 3
    1590:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
    1592:	50 e1       	ldi	r21, 0x10	; 16
    1594:	95 9f       	mul	r25, r21
    1596:	90 01       	movw	r18, r0
    1598:	11 24       	eor	r1, r1
    159a:	94 2f       	mov	r25, r20
    159c:	92 95       	swap	r25
    159e:	9f 70       	andi	r25, 0x0F	; 15
    15a0:	29 2b       	or	r18, r25
    15a2:	82 13       	cpse	r24, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
    15a6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tasteri_reg.2112>
		
	}
	
	return tasteri_reg;
}
    15aa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tasteri_reg.2112>
    15ae:	08 95       	ret

000015b0 <ocitaj_jedan_taster>:
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	static uint8_t delay_enable = 1;
	uint8_t pom;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	20 95       	com	r18
    15b6:	30 95       	com	r19
    15b8:	e6 2f       	mov	r30, r22
    15ba:	a9 01       	movw	r20, r18
    15bc:	06 2e       	mov	r0, r22
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <ocitaj_jedan_taster+0x14>
    15c0:	55 95       	asr	r21
    15c2:	47 95       	ror	r20
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <ocitaj_jedan_taster+0x10>
    15c8:	40 ff       	sbrs	r20, 0
    15ca:	17 c0       	rjmp	.+46     	; 0x15fa <ocitaj_jedan_taster+0x4a>
    15cc:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <flag_stisnut.2121>
    15d0:	91 11       	cpse	r25, r1
    15d2:	13 c0       	rjmp	.+38     	; 0x15fa <ocitaj_jedan_taster+0x4a>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <flag_stisnut.2121>
		temp_tast = button;		//zapamtim koji je taster stisnut
    15da:	60 93 d7 01 	sts	0x01D7, r22	; 0x8001d7 <temp_tast.2120>
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    15de:	80 95       	com	r24
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	06 2e       	mov	r0, r22
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <ocitaj_jedan_taster+0x3c>
    15e8:	44 0f       	add	r20, r20
    15ea:	55 1f       	adc	r21, r21
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <ocitaj_jedan_taster+0x38>
    15f0:	84 23       	and	r24, r20
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <ocitaj_jedan_taster+0x46>
    15f4:	45 c0       	rjmp	.+138    	; 0x1680 <ocitaj_jedan_taster+0xd0>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	08 95       	ret
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
    15fa:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <temp_tast.2120>
    15fe:	e9 2f       	mov	r30, r25
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1600:	80 95       	com	r24
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	09 2e       	mov	r0, r25
    1608:	02 c0       	rjmp	.+4      	; 0x160e <ocitaj_jedan_taster+0x5e>
    160a:	44 0f       	add	r20, r20
    160c:	55 1f       	adc	r21, r21
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <ocitaj_jedan_taster+0x5a>
    1612:	84 23       	and	r24, r20
    1614:	19 f1       	breq	.+70     	; 0x165c <ocitaj_jedan_taster+0xac>
    1616:	8e ef       	ldi	r24, 0xFE	; 254
    1618:	89 0f       	add	r24, r25
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	08 f5       	brcc	.+66     	; 0x1660 <ocitaj_jedan_taster+0xb0>
    161e:	69 13       	cpse	r22, r25
    1620:	21 c0       	rjmp	.+66     	; 0x1664 <ocitaj_jedan_taster+0xb4>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <ocitaj_jedan_taster+0x78>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1626:	81 e0       	ldi	r24, 0x01	; 1
		   ovo radim da bi bilo moguce brze menjati sate ako je taster ostao stisnut, da ne bi morao 30 puta stiskati i pustati taster */
		//startuj "delay" tajmer, ali samo prvi put
		//ako je delay istekao periodicno togluj promenljivu "stisnut", jer ce to napraviti efekat brzog stiskanja
		//kada je taster otpusten opet dozvoli startovanje "delay" tajmera
		
		if (delay_enable == 1)
    1628:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <delay_enable.2122>
    162c:	91 30       	cpi	r25, 0x01	; 1
    162e:	31 f4       	brne	.+12     	; 0x163c <ocitaj_jedan_taster+0x8c>
		{
			delay_enable = 0;	//spreci ponovni ulazak
    1630:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <delay_enable.2122>
			delay_timer = 0;	//start, timer ISR ga uvecava
    1634:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <delay_timer+0x1>
    1638:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <delay_timer>
		}
		if (delay_timer >= 400)	//ako je delay veci od 400ms togluj "stisnut"
    163c:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <delay_timer>
    1640:	30 91 dc 01 	lds	r19, 0x01DC	; 0x8001dc <delay_timer+0x1>
    1644:	20 39       	cpi	r18, 0x90	; 144
    1646:	31 40       	sbci	r19, 0x01	; 1
    1648:	00 f1       	brcs	.+64     	; 0x168a <ocitaj_jedan_taster+0xda>
		{
			if(flag_prekid_50ms)
    164a:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <flag_prekid_50ms>
    164e:	99 23       	and	r25, r25
    1650:	e1 f0       	breq	.+56     	; 0x168a <ocitaj_jedan_taster+0xda>
			{
				flag_prekid_50ms = 0; //reset flag-a
    1652:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <flag_prekid_50ms>
				stisnut ^= 0b1;	//toggle
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	89 27       	eor	r24, r25
    165a:	08 95       	ret
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <ocitaj_jedan_taster+0xb6>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <ocitaj_jedan_taster+0xb6>
    1664:	80 e0       	ldi	r24, 0x00	; 0
			}
			
				
		}		
	}
	else if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
    1666:	02 c0       	rjmp	.+4      	; 0x166c <ocitaj_jedan_taster+0xbc>
    1668:	35 95       	asr	r19
    166a:	27 95       	ror	r18
    166c:	ea 95       	dec	r30
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <ocitaj_jedan_taster+0xb8>
    1670:	20 fd       	sbrc	r18, 0
    1672:	0b c0       	rjmp	.+22     	; 0x168a <ocitaj_jedan_taster+0xda>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
    1674:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <flag_stisnut.2121>
		delay_enable = 1;	//dozvoli ponovno startovanje "delay" tajmera ako je taster otpusten
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <delay_enable.2122>
	sprintf(buff, "flag_stis:%d  ", flag_stisnut);
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    167e:	08 95       	ret
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1680:	62 50       	subi	r22, 0x02	; 2
    1682:	62 30       	cpi	r22, 0x02	; 2
    1684:	80 f2       	brcs	.-96     	; 0x1626 <ocitaj_jedan_taster+0x76>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	ee cf       	rjmp	.-36     	; 0x1666 <ocitaj_jedan_taster+0xb6>
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    168a:	08 95       	ret

0000168c <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
    168c:	98 2f       	mov	r25, r24
    168e:	92 95       	swap	r25
    1690:	9f 70       	andi	r25, 0x0F	; 15
    1692:	99 0f       	add	r25, r25
    1694:	29 2f       	mov	r18, r25
    1696:	22 0f       	add	r18, r18
    1698:	22 0f       	add	r18, r18
    169a:	92 0f       	add	r25, r18
    169c:	8f 70       	andi	r24, 0x0F	; 15
    169e:	89 0f       	add	r24, r25
    16a0:	08 95       	ret

000016a2 <decimal_to_bcd>:
    16a2:	9d ec       	ldi	r25, 0xCD	; 205
    16a4:	89 9f       	mul	r24, r25
    16a6:	91 2d       	mov	r25, r1
    16a8:	11 24       	eor	r1, r1
    16aa:	96 95       	lsr	r25
    16ac:	96 95       	lsr	r25
    16ae:	96 95       	lsr	r25
    16b0:	20 e1       	ldi	r18, 0x10	; 16
    16b2:	92 9f       	mul	r25, r18
    16b4:	a0 01       	movw	r20, r0
    16b6:	11 24       	eor	r1, r1
    16b8:	99 0f       	add	r25, r25
    16ba:	29 2f       	mov	r18, r25
    16bc:	22 0f       	add	r18, r18
    16be:	22 0f       	add	r18, r18
    16c0:	92 0f       	add	r25, r18
    16c2:	89 1b       	sub	r24, r25
    16c4:	8f 70       	andi	r24, 0x0F	; 15
    16c6:	84 2b       	or	r24, r20
    16c8:	08 95       	ret

000016ca <DS3231_Read>:
    16ca:	cf 93       	push	r28
    16cc:	c8 2f       	mov	r28, r24
    16ce:	80 ed       	ldi	r24, 0xD0	; 208
    16d0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_start_wait>
    16d4:	8c 2f       	mov	r24, r28
    16d6:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_write>
    16da:	81 ed       	ldi	r24, 0xD1	; 209
    16dc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_start_wait>
    16e0:	0e 94 be 01 	call	0x37c	; 0x37c <i2c_readNak>
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <DS3231_Write>:
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	d8 2f       	mov	r29, r24
    16ee:	c6 2f       	mov	r28, r22
    16f0:	80 ed       	ldi	r24, 0xD0	; 208
    16f2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_start_wait>
    16f6:	8d 2f       	mov	r24, r29
    16f8:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_write>
    16fc:	8c 2f       	mov	r24, r28
    16fe:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_write>
    1702:	0e 94 a3 01 	call	0x346	; 0x346 <i2c_stop>
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <DS3231_init>:
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	8e e0       	ldi	r24, 0x0E	; 14
    1710:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DS3231_Write>
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	8f e0       	ldi	r24, 0x0F	; 15
    1718:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DS3231_Write>
    171c:	08 95       	ret

0000171e <getTime>:
    171e:	af 92       	push	r10
    1720:	bf 92       	push	r11
    1722:	cf 92       	push	r12
    1724:	df 92       	push	r13
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	ec 01       	movw	r28, r24
    1732:	7b 01       	movw	r14, r22
    1734:	6a 01       	movw	r12, r20
    1736:	59 01       	movw	r10, r18
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DS3231_Read>
    173e:	0e 94 46 0b 	call	0x168c	; 0x168c <bcd_to_decimal>
    1742:	f6 01       	movw	r30, r12
    1744:	80 83       	st	Z, r24
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DS3231_Read>
    174c:	0e 94 46 0b 	call	0x168c	; 0x168c <bcd_to_decimal>
    1750:	f7 01       	movw	r30, r14
    1752:	80 83       	st	Z, r24
    1754:	01 30       	cpi	r16, 0x01	; 1
    1756:	81 f4       	brne	.+32     	; 0x1778 <getTime+0x5a>
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DS3231_Read>
    175e:	85 fb       	bst	r24, 5
    1760:	88 27       	eor	r24, r24
    1762:	80 f9       	bld	r24, 0
    1764:	f5 01       	movw	r30, r10
    1766:	80 83       	st	Z, r24
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DS3231_Read>
    176e:	8f 71       	andi	r24, 0x1F	; 31
    1770:	0e 94 46 0b 	call	0x168c	; 0x168c <bcd_to_decimal>
    1774:	88 83       	st	Y, r24
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <getTime+0x68>
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DS3231_Read>
    177e:	8f 73       	andi	r24, 0x3F	; 63
    1780:	0e 94 46 0b 	call	0x168c	; 0x168c <bcd_to_decimal>
    1784:	88 83       	st	Y, r24
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	df 90       	pop	r13
    1792:	cf 90       	pop	r12
    1794:	bf 90       	pop	r11
    1796:	af 90       	pop	r10
    1798:	08 95       	ret

0000179a <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	d8 2f       	mov	r29, r24
    17a4:	c6 2f       	mov	r28, r22
    17a6:	84 2f       	mov	r24, r20
    17a8:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
    17aa:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <decimal_to_bcd>
    17ae:	68 2f       	mov	r22, r24
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
    17b6:	8c 2f       	mov	r24, r28
    17b8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <decimal_to_bcd>
    17bc:	68 2f       	mov	r22, r24
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DS3231_Write>
	
	switch(hour_format)
    17c4:	01 30       	cpi	r16, 0x01	; 1
    17c6:	79 f4       	brne	.+30     	; 0x17e6 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    17c8:	11 30       	cpi	r17, 0x01	; 1
    17ca:	11 f0       	breq	.+4      	; 0x17d0 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    17cc:	c0 e4       	ldi	r28, 0x40	; 64
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    17d0:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    17d2:	8d 2f       	mov	r24, r29
    17d4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <decimal_to_bcd>
    17d8:	8f 71       	andi	r24, 0x1F	; 31
    17da:	68 2f       	mov	r22, r24
    17dc:	6c 2b       	or	r22, r28
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DS3231_Write>
			break;
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    17e6:	8d 2f       	mov	r24, r29
    17e8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <decimal_to_bcd>
    17ec:	68 2f       	mov	r22, r24
    17ee:	6f 73       	andi	r22, 0x3F	; 63
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DS3231_Write>
			break;
		}
	}
}
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	08 95       	ret

00001800 <tajmer0_init>:
volatile uint16_t delay_timer = 0;			//koristim ga kod tastera za delay pri stisku, za brzo inkrementiranje
volatile uint16_t timer_disp_cycle = 0;		//za naizmenicno prikazivanje dva glavna ekrana na displeju

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    1804:	93 e0       	ldi	r25, 0x03	; 3
    1806:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    1808:	99 ef       	ldi	r25, 0xF9	; 249
    180a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    180c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1810:	08 95       	ret

00001812 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	11 24       	eor	r1, r1
    181c:	8f 93       	push	r24
    181e:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    1826:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <brojac_prekida_tajmera0>
    182a:	8f 5f       	subi	r24, 0xFF	; 255
    182c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    1830:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <brojac_prekida_tajmera0_debounce_half>
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    183a:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <brojac_prekida_tajmera0_debounce>
    183e:	8f 5f       	subi	r24, 0xFF	; 255
    1840:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <brojac_prekida_tajmera0_debounce>
	delay_timer++;		//overflow posle 65.5 sekundi, ali koga briga ne remeti normalan rad
    1844:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <delay_timer>
    1848:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <delay_timer+0x1>
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <delay_timer+0x1>
    1852:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <delay_timer>
	timer_disp_cycle++;	//u main-u resetujem
    1856:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <timer_disp_cycle>
    185a:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <timer_disp_cycle+0x1>
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <timer_disp_cycle+0x1>
    1864:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <timer_disp_cycle>
		
	if(brojac_prekida_tajmera0 == 100)	//1ms * 50 = 50ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    1868:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <brojac_prekida_tajmera0>
    186c:	84 36       	cpi	r24, 0x64	; 100
    186e:	29 f4       	brne	.+10     	; 0x187a <__vector_14+0x68>
	{
		brojac_prekida_tajmera0 = 0;
    1870:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <brojac_prekida_tajmera0>
		flag_prekid_50ms = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <flag_prekid_50ms>
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    187a:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <brojac_prekida_tajmera0_debounce_half>
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	29 f4       	brne	.+10     	; 0x188c <__vector_14+0x7a>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    1882:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <flag_prekid_debounce_time_half>
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    188c:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <brojac_prekida_tajmera0_debounce>
    1890:	86 30       	cpi	r24, 0x06	; 6
    1892:	29 f4       	brne	.+10     	; 0x189e <__vector_14+0x8c>
	{
		brojac_prekida_tajmera0_debounce = 0;
    1894:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <flag_prekid_debounce_time>
	}
	
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti

000018ac <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
	poslato=0;
    18b6:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <poslato>
}
    18ba:	0f 90       	pop	r0
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	0f 90       	pop	r0
    18c0:	1f 90       	pop	r1
    18c2:	18 95       	reti

000018c4 <__vector_18>:

ISR(USART_RX_vect)
{
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	11 24       	eor	r1, r1
    18ce:	8f 93       	push	r24
    18d0:	ef 93       	push	r30
    18d2:	ff 93       	push	r31
	input_char=UDR0;
    18d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    18d8:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    18dc:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <buff_size>
    18e0:	88 30       	cpi	r24, 0x08	; 8
    18e2:	98 f4       	brcc	.+38     	; 0x190a <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    18e4:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <buff_size>
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <input_char>
    18ee:	ec 5b       	subi	r30, 0xBC	; 188
    18f0:	fd 4f       	sbci	r31, 0xFD	; 253
    18f2:	80 83       	st	Z, r24
		buff_size++;
    18f4:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <buff_size>
    18f8:	8f 5f       	subi	r24, 0xFF	; 255
    18fa:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <buff_size>
		input_buffer[buff_size]='\0';
    18fe:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <buff_size>
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	ec 5b       	subi	r30, 0xBC	; 188
    1906:	fd 4f       	sbci	r31, 0xFD	; 253
    1908:	10 82       	st	Z, r1
	}
}
    190a:	ff 91       	pop	r31
    190c:	ef 91       	pop	r30
    190e:	8f 91       	pop	r24
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	0f 90       	pop	r0
    1916:	1f 90       	pop	r1
    1918:	18 95       	reti

0000191a <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    191a:	22 e0       	ldi	r18, 0x02	; 2
    191c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    1920:	28 ed       	ldi	r18, 0xD8	; 216
    1922:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    1926:	26 e0       	ldi	r18, 0x06	; 6
    1928:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    192c:	61 15       	cp	r22, r1
    192e:	2c e2       	ldi	r18, 0x2C	; 44
    1930:	72 07       	cpc	r23, r18
    1932:	21 e0       	ldi	r18, 0x01	; 1
    1934:	82 07       	cpc	r24, r18
    1936:	91 05       	cpc	r25, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <uart_init+0x22>
    193a:	51 c0       	rjmp	.+162    	; 0x19de <uart_init+0xc4>
    193c:	c8 f4       	brcc	.+50     	; 0x1970 <uart_init+0x56>
    193e:	60 34       	cpi	r22, 0x40	; 64
    1940:	28 e3       	ldi	r18, 0x38	; 56
    1942:	72 07       	cpc	r23, r18
    1944:	81 05       	cpc	r24, r1
    1946:	91 05       	cpc	r25, r1
    1948:	a9 f1       	breq	.+106    	; 0x19b4 <uart_init+0x9a>
    194a:	30 f4       	brcc	.+12     	; 0x1958 <uart_init+0x3e>
    194c:	60 38       	cpi	r22, 0x80	; 128
    194e:	75 42       	sbci	r23, 0x25	; 37
    1950:	81 05       	cpc	r24, r1
    1952:	91 05       	cpc	r25, r1
    1954:	41 f1       	breq	.+80     	; 0x19a6 <uart_init+0x8c>
    1956:	64 c0       	rjmp	.+200    	; 0x1a20 <uart_init+0x106>
    1958:	61 15       	cp	r22, r1
    195a:	2b e4       	ldi	r18, 0x4B	; 75
    195c:	72 07       	cpc	r23, r18
    195e:	81 05       	cpc	r24, r1
    1960:	91 05       	cpc	r25, r1
    1962:	79 f1       	breq	.+94     	; 0x19c2 <uart_init+0xa8>
    1964:	61 15       	cp	r22, r1
    1966:	76 49       	sbci	r23, 0x96	; 150
    1968:	81 05       	cpc	r24, r1
    196a:	91 05       	cpc	r25, r1
    196c:	89 f1       	breq	.+98     	; 0x19d0 <uart_init+0xb6>
    196e:	58 c0       	rjmp	.+176    	; 0x1a20 <uart_init+0x106>
    1970:	60 32       	cpi	r22, 0x20	; 32
    1972:	21 ea       	ldi	r18, 0xA1	; 161
    1974:	72 07       	cpc	r23, r18
    1976:	27 e0       	ldi	r18, 0x07	; 7
    1978:	82 07       	cpc	r24, r18
    197a:	91 05       	cpc	r25, r1
    197c:	f1 f1       	breq	.+124    	; 0x19fa <uart_init+0xe0>
    197e:	30 f4       	brcc	.+12     	; 0x198c <uart_init+0x72>
    1980:	60 39       	cpi	r22, 0x90	; 144
    1982:	70 4d       	sbci	r23, 0xD0	; 208
    1984:	83 40       	sbci	r24, 0x03	; 3
    1986:	91 05       	cpc	r25, r1
    1988:	89 f1       	breq	.+98     	; 0x19ec <uart_init+0xd2>
    198a:	4a c0       	rjmp	.+148    	; 0x1a20 <uart_init+0x106>
    198c:	60 34       	cpi	r22, 0x40	; 64
    198e:	22 e4       	ldi	r18, 0x42	; 66
    1990:	72 07       	cpc	r23, r18
    1992:	2f e0       	ldi	r18, 0x0F	; 15
    1994:	82 07       	cpc	r24, r18
    1996:	91 05       	cpc	r25, r1
    1998:	b9 f1       	breq	.+110    	; 0x1a08 <uart_init+0xee>
    199a:	60 38       	cpi	r22, 0x80	; 128
    199c:	74 48       	sbci	r23, 0x84	; 132
    199e:	8e 41       	sbci	r24, 0x1E	; 30
    19a0:	91 05       	cpc	r25, r1
    19a2:	c9 f1       	breq	.+114    	; 0x1a16 <uart_init+0xfc>
    19a4:	3d c0       	rjmp	.+122    	; 0x1a20 <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    19a6:	8f ec       	ldi	r24, 0xCF	; 207
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    19ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    19b2:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    19b4:	8a e8       	ldi	r24, 0x8A	; 138
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    19bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    19c0:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    19c2:	87 e6       	ldi	r24, 0x67	; 103
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    19ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    19ce:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    19d0:	83 e3       	ldi	r24, 0x33	; 51
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    19d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    19dc:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    19de:	89 e1       	ldi	r24, 0x19	; 25
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    19e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    19ea:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    19ec:	87 e0       	ldi	r24, 0x07	; 7
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    19f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    19f8:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1a02:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1a06:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1a10:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1a14:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    1a16:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1a1a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1a1e:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    1a20:	8f ec       	ldi	r24, 0xCF	; 207
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1a28:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1a2c:	08 95       	ret

00001a2e <uart_send_str>:
	}
	
}

void uart_send_str(char *str)
{
    1a2e:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1a30:	90 81       	ld	r25, Z
    1a32:	99 23       	and	r25, r25
    1a34:	71 f0       	breq	.+28     	; 0x1a52 <uart_send_str+0x24>
    1a36:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1a38:	a6 ec       	ldi	r26, 0xC6	; 198
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1a3e:	9c 93       	st	X, r25
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1a40:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <poslato>
		while (poslato);	//koci dok ISR ne kaze da je gotovo
    1a44:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <poslato>
    1a48:	91 11       	cpse	r25, r1
    1a4a:	fc cf       	rjmp	.-8      	; 0x1a44 <uart_send_str+0x16>

void uart_send_str(char *str)
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1a4c:	91 91       	ld	r25, Z+
    1a4e:	91 11       	cpse	r25, r1
    1a50:	f6 cf       	rjmp	.-20     	; 0x1a3e <uart_send_str+0x10>
    1a52:	08 95       	ret

00001a54 <__divsf3>:
    1a54:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__divsf3x>
    1a58:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__fp_round>
    1a5c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_pscB>
    1a60:	58 f0       	brcs	.+22     	; 0x1a78 <__divsf3+0x24>
    1a62:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__fp_pscA>
    1a66:	40 f0       	brcs	.+16     	; 0x1a78 <__divsf3+0x24>
    1a68:	29 f4       	brne	.+10     	; 0x1a74 <__divsf3+0x20>
    1a6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6c:	29 f0       	breq	.+10     	; 0x1a78 <__divsf3+0x24>
    1a6e:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__fp_inf>
    1a72:	51 11       	cpse	r21, r1
    1a74:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_szero>
    1a78:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_nan>

00001a7c <__divsf3x>:
    1a7c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__fp_split3>
    1a80:	68 f3       	brcs	.-38     	; 0x1a5c <__divsf3+0x8>

00001a82 <__divsf3_pse>:
    1a82:	99 23       	and	r25, r25
    1a84:	b1 f3       	breq	.-20     	; 0x1a72 <__divsf3+0x1e>
    1a86:	55 23       	and	r21, r21
    1a88:	91 f3       	breq	.-28     	; 0x1a6e <__divsf3+0x1a>
    1a8a:	95 1b       	sub	r25, r21
    1a8c:	55 0b       	sbc	r21, r21
    1a8e:	bb 27       	eor	r27, r27
    1a90:	aa 27       	eor	r26, r26
    1a92:	62 17       	cp	r22, r18
    1a94:	73 07       	cpc	r23, r19
    1a96:	84 07       	cpc	r24, r20
    1a98:	38 f0       	brcs	.+14     	; 0x1aa8 <__divsf3_pse+0x26>
    1a9a:	9f 5f       	subi	r25, 0xFF	; 255
    1a9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9e:	22 0f       	add	r18, r18
    1aa0:	33 1f       	adc	r19, r19
    1aa2:	44 1f       	adc	r20, r20
    1aa4:	aa 1f       	adc	r26, r26
    1aa6:	a9 f3       	breq	.-22     	; 0x1a92 <__divsf3_pse+0x10>
    1aa8:	35 d0       	rcall	.+106    	; 0x1b14 <__divsf3_pse+0x92>
    1aaa:	0e 2e       	mov	r0, r30
    1aac:	3a f0       	brmi	.+14     	; 0x1abc <__divsf3_pse+0x3a>
    1aae:	e0 e8       	ldi	r30, 0x80	; 128
    1ab0:	32 d0       	rcall	.+100    	; 0x1b16 <__divsf3_pse+0x94>
    1ab2:	91 50       	subi	r25, 0x01	; 1
    1ab4:	50 40       	sbci	r21, 0x00	; 0
    1ab6:	e6 95       	lsr	r30
    1ab8:	00 1c       	adc	r0, r0
    1aba:	ca f7       	brpl	.-14     	; 0x1aae <__divsf3_pse+0x2c>
    1abc:	2b d0       	rcall	.+86     	; 0x1b14 <__divsf3_pse+0x92>
    1abe:	fe 2f       	mov	r31, r30
    1ac0:	29 d0       	rcall	.+82     	; 0x1b14 <__divsf3_pse+0x92>
    1ac2:	66 0f       	add	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	bb 1f       	adc	r27, r27
    1aca:	26 17       	cp	r18, r22
    1acc:	37 07       	cpc	r19, r23
    1ace:	48 07       	cpc	r20, r24
    1ad0:	ab 07       	cpc	r26, r27
    1ad2:	b0 e8       	ldi	r27, 0x80	; 128
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <__divsf3_pse+0x56>
    1ad6:	bb 0b       	sbc	r27, r27
    1ad8:	80 2d       	mov	r24, r0
    1ada:	bf 01       	movw	r22, r30
    1adc:	ff 27       	eor	r31, r31
    1ade:	93 58       	subi	r25, 0x83	; 131
    1ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae2:	3a f0       	brmi	.+14     	; 0x1af2 <__divsf3_pse+0x70>
    1ae4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae6:	51 05       	cpc	r21, r1
    1ae8:	78 f0       	brcs	.+30     	; 0x1b08 <__divsf3_pse+0x86>
    1aea:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__fp_inf>
    1aee:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_szero>
    1af2:	5f 3f       	cpi	r21, 0xFF	; 255
    1af4:	e4 f3       	brlt	.-8      	; 0x1aee <__divsf3_pse+0x6c>
    1af6:	98 3e       	cpi	r25, 0xE8	; 232
    1af8:	d4 f3       	brlt	.-12     	; 0x1aee <__divsf3_pse+0x6c>
    1afa:	86 95       	lsr	r24
    1afc:	77 95       	ror	r23
    1afe:	67 95       	ror	r22
    1b00:	b7 95       	ror	r27
    1b02:	f7 95       	ror	r31
    1b04:	9f 5f       	subi	r25, 0xFF	; 255
    1b06:	c9 f7       	brne	.-14     	; 0x1afa <__divsf3_pse+0x78>
    1b08:	88 0f       	add	r24, r24
    1b0a:	91 1d       	adc	r25, r1
    1b0c:	96 95       	lsr	r25
    1b0e:	87 95       	ror	r24
    1b10:	97 f9       	bld	r25, 7
    1b12:	08 95       	ret
    1b14:	e1 e0       	ldi	r30, 0x01	; 1
    1b16:	66 0f       	add	r22, r22
    1b18:	77 1f       	adc	r23, r23
    1b1a:	88 1f       	adc	r24, r24
    1b1c:	bb 1f       	adc	r27, r27
    1b1e:	62 17       	cp	r22, r18
    1b20:	73 07       	cpc	r23, r19
    1b22:	84 07       	cpc	r24, r20
    1b24:	ba 07       	cpc	r27, r26
    1b26:	20 f0       	brcs	.+8      	; 0x1b30 <__divsf3_pse+0xae>
    1b28:	62 1b       	sub	r22, r18
    1b2a:	73 0b       	sbc	r23, r19
    1b2c:	84 0b       	sbc	r24, r20
    1b2e:	ba 0b       	sbc	r27, r26
    1b30:	ee 1f       	adc	r30, r30
    1b32:	88 f7       	brcc	.-30     	; 0x1b16 <__divsf3_pse+0x94>
    1b34:	e0 95       	com	r30
    1b36:	08 95       	ret

00001b38 <__fixunssfsi>:
    1b38:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__fp_splitA>
    1b3c:	88 f0       	brcs	.+34     	; 0x1b60 <__fixunssfsi+0x28>
    1b3e:	9f 57       	subi	r25, 0x7F	; 127
    1b40:	98 f0       	brcs	.+38     	; 0x1b68 <__fixunssfsi+0x30>
    1b42:	b9 2f       	mov	r27, r25
    1b44:	99 27       	eor	r25, r25
    1b46:	b7 51       	subi	r27, 0x17	; 23
    1b48:	b0 f0       	brcs	.+44     	; 0x1b76 <__fixunssfsi+0x3e>
    1b4a:	e1 f0       	breq	.+56     	; 0x1b84 <__fixunssfsi+0x4c>
    1b4c:	66 0f       	add	r22, r22
    1b4e:	77 1f       	adc	r23, r23
    1b50:	88 1f       	adc	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	1a f0       	brmi	.+6      	; 0x1b5c <__fixunssfsi+0x24>
    1b56:	ba 95       	dec	r27
    1b58:	c9 f7       	brne	.-14     	; 0x1b4c <__fixunssfsi+0x14>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <__fixunssfsi+0x4c>
    1b5c:	b1 30       	cpi	r27, 0x01	; 1
    1b5e:	91 f0       	breq	.+36     	; 0x1b84 <__fixunssfsi+0x4c>
    1b60:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__fp_zero>
    1b64:	b1 e0       	ldi	r27, 0x01	; 1
    1b66:	08 95       	ret
    1b68:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_zero>
    1b6c:	67 2f       	mov	r22, r23
    1b6e:	78 2f       	mov	r23, r24
    1b70:	88 27       	eor	r24, r24
    1b72:	b8 5f       	subi	r27, 0xF8	; 248
    1b74:	39 f0       	breq	.+14     	; 0x1b84 <__fixunssfsi+0x4c>
    1b76:	b9 3f       	cpi	r27, 0xF9	; 249
    1b78:	cc f3       	brlt	.-14     	; 0x1b6c <__fixunssfsi+0x34>
    1b7a:	86 95       	lsr	r24
    1b7c:	77 95       	ror	r23
    1b7e:	67 95       	ror	r22
    1b80:	b3 95       	inc	r27
    1b82:	d9 f7       	brne	.-10     	; 0x1b7a <__fixunssfsi+0x42>
    1b84:	3e f4       	brtc	.+14     	; 0x1b94 <__fixunssfsi+0x5c>
    1b86:	90 95       	com	r25
    1b88:	80 95       	com	r24
    1b8a:	70 95       	com	r23
    1b8c:	61 95       	neg	r22
    1b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b90:	8f 4f       	sbci	r24, 0xFF	; 255
    1b92:	9f 4f       	sbci	r25, 0xFF	; 255
    1b94:	08 95       	ret

00001b96 <__floatunsisf>:
    1b96:	e8 94       	clt
    1b98:	09 c0       	rjmp	.+18     	; 0x1bac <__floatsisf+0x12>

00001b9a <__floatsisf>:
    1b9a:	97 fb       	bst	r25, 7
    1b9c:	3e f4       	brtc	.+14     	; 0x1bac <__floatsisf+0x12>
    1b9e:	90 95       	com	r25
    1ba0:	80 95       	com	r24
    1ba2:	70 95       	com	r23
    1ba4:	61 95       	neg	r22
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	99 23       	and	r25, r25
    1bae:	a9 f0       	breq	.+42     	; 0x1bda <__floatsisf+0x40>
    1bb0:	f9 2f       	mov	r31, r25
    1bb2:	96 e9       	ldi	r25, 0x96	; 150
    1bb4:	bb 27       	eor	r27, r27
    1bb6:	93 95       	inc	r25
    1bb8:	f6 95       	lsr	r31
    1bba:	87 95       	ror	r24
    1bbc:	77 95       	ror	r23
    1bbe:	67 95       	ror	r22
    1bc0:	b7 95       	ror	r27
    1bc2:	f1 11       	cpse	r31, r1
    1bc4:	f8 cf       	rjmp	.-16     	; 0x1bb6 <__floatsisf+0x1c>
    1bc6:	fa f4       	brpl	.+62     	; 0x1c06 <__floatsisf+0x6c>
    1bc8:	bb 0f       	add	r27, r27
    1bca:	11 f4       	brne	.+4      	; 0x1bd0 <__floatsisf+0x36>
    1bcc:	60 ff       	sbrs	r22, 0
    1bce:	1b c0       	rjmp	.+54     	; 0x1c06 <__floatsisf+0x6c>
    1bd0:	6f 5f       	subi	r22, 0xFF	; 255
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd8:	16 c0       	rjmp	.+44     	; 0x1c06 <__floatsisf+0x6c>
    1bda:	88 23       	and	r24, r24
    1bdc:	11 f0       	breq	.+4      	; 0x1be2 <__floatsisf+0x48>
    1bde:	96 e9       	ldi	r25, 0x96	; 150
    1be0:	11 c0       	rjmp	.+34     	; 0x1c04 <__floatsisf+0x6a>
    1be2:	77 23       	and	r23, r23
    1be4:	21 f0       	breq	.+8      	; 0x1bee <__floatsisf+0x54>
    1be6:	9e e8       	ldi	r25, 0x8E	; 142
    1be8:	87 2f       	mov	r24, r23
    1bea:	76 2f       	mov	r23, r22
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <__floatsisf+0x5e>
    1bee:	66 23       	and	r22, r22
    1bf0:	71 f0       	breq	.+28     	; 0x1c0e <__floatsisf+0x74>
    1bf2:	96 e8       	ldi	r25, 0x86	; 134
    1bf4:	86 2f       	mov	r24, r22
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	2a f0       	brmi	.+10     	; 0x1c06 <__floatsisf+0x6c>
    1bfc:	9a 95       	dec	r25
    1bfe:	66 0f       	add	r22, r22
    1c00:	77 1f       	adc	r23, r23
    1c02:	88 1f       	adc	r24, r24
    1c04:	da f7       	brpl	.-10     	; 0x1bfc <__floatsisf+0x62>
    1c06:	88 0f       	add	r24, r24
    1c08:	96 95       	lsr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	97 f9       	bld	r25, 7
    1c0e:	08 95       	ret

00001c10 <__fp_inf>:
    1c10:	97 f9       	bld	r25, 7
    1c12:	9f 67       	ori	r25, 0x7F	; 127
    1c14:	80 e8       	ldi	r24, 0x80	; 128
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	08 95       	ret

00001c1c <__fp_nan>:
    1c1c:	9f ef       	ldi	r25, 0xFF	; 255
    1c1e:	80 ec       	ldi	r24, 0xC0	; 192
    1c20:	08 95       	ret

00001c22 <__fp_pscA>:
    1c22:	00 24       	eor	r0, r0
    1c24:	0a 94       	dec	r0
    1c26:	16 16       	cp	r1, r22
    1c28:	17 06       	cpc	r1, r23
    1c2a:	18 06       	cpc	r1, r24
    1c2c:	09 06       	cpc	r0, r25
    1c2e:	08 95       	ret

00001c30 <__fp_pscB>:
    1c30:	00 24       	eor	r0, r0
    1c32:	0a 94       	dec	r0
    1c34:	12 16       	cp	r1, r18
    1c36:	13 06       	cpc	r1, r19
    1c38:	14 06       	cpc	r1, r20
    1c3a:	05 06       	cpc	r0, r21
    1c3c:	08 95       	ret

00001c3e <__fp_round>:
    1c3e:	09 2e       	mov	r0, r25
    1c40:	03 94       	inc	r0
    1c42:	00 0c       	add	r0, r0
    1c44:	11 f4       	brne	.+4      	; 0x1c4a <__fp_round+0xc>
    1c46:	88 23       	and	r24, r24
    1c48:	52 f0       	brmi	.+20     	; 0x1c5e <__fp_round+0x20>
    1c4a:	bb 0f       	add	r27, r27
    1c4c:	40 f4       	brcc	.+16     	; 0x1c5e <__fp_round+0x20>
    1c4e:	bf 2b       	or	r27, r31
    1c50:	11 f4       	brne	.+4      	; 0x1c56 <__fp_round+0x18>
    1c52:	60 ff       	sbrs	r22, 0
    1c54:	04 c0       	rjmp	.+8      	; 0x1c5e <__fp_round+0x20>
    1c56:	6f 5f       	subi	r22, 0xFF	; 255
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5e:	08 95       	ret

00001c60 <__fp_split3>:
    1c60:	57 fd       	sbrc	r21, 7
    1c62:	90 58       	subi	r25, 0x80	; 128
    1c64:	44 0f       	add	r20, r20
    1c66:	55 1f       	adc	r21, r21
    1c68:	59 f0       	breq	.+22     	; 0x1c80 <__fp_splitA+0x10>
    1c6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c6c:	71 f0       	breq	.+28     	; 0x1c8a <__fp_splitA+0x1a>
    1c6e:	47 95       	ror	r20

00001c70 <__fp_splitA>:
    1c70:	88 0f       	add	r24, r24
    1c72:	97 fb       	bst	r25, 7
    1c74:	99 1f       	adc	r25, r25
    1c76:	61 f0       	breq	.+24     	; 0x1c90 <__fp_splitA+0x20>
    1c78:	9f 3f       	cpi	r25, 0xFF	; 255
    1c7a:	79 f0       	breq	.+30     	; 0x1c9a <__fp_splitA+0x2a>
    1c7c:	87 95       	ror	r24
    1c7e:	08 95       	ret
    1c80:	12 16       	cp	r1, r18
    1c82:	13 06       	cpc	r1, r19
    1c84:	14 06       	cpc	r1, r20
    1c86:	55 1f       	adc	r21, r21
    1c88:	f2 cf       	rjmp	.-28     	; 0x1c6e <__fp_split3+0xe>
    1c8a:	46 95       	lsr	r20
    1c8c:	f1 df       	rcall	.-30     	; 0x1c70 <__fp_splitA>
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <__fp_splitA+0x30>
    1c90:	16 16       	cp	r1, r22
    1c92:	17 06       	cpc	r1, r23
    1c94:	18 06       	cpc	r1, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	f1 cf       	rjmp	.-30     	; 0x1c7c <__fp_splitA+0xc>
    1c9a:	86 95       	lsr	r24
    1c9c:	71 05       	cpc	r23, r1
    1c9e:	61 05       	cpc	r22, r1
    1ca0:	08 94       	sec
    1ca2:	08 95       	ret

00001ca4 <__fp_zero>:
    1ca4:	e8 94       	clt

00001ca6 <__fp_szero>:
    1ca6:	bb 27       	eor	r27, r27
    1ca8:	66 27       	eor	r22, r22
    1caa:	77 27       	eor	r23, r23
    1cac:	cb 01       	movw	r24, r22
    1cae:	97 f9       	bld	r25, 7
    1cb0:	08 95       	ret

00001cb2 <dtostrf>:
    1cb2:	ef 92       	push	r14
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	e8 01       	movw	r28, r16
    1cbe:	47 fd       	sbrc	r20, 7
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <dtostrf+0x14>
    1cc2:	34 e0       	ldi	r19, 0x04	; 4
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <dtostrf+0x16>
    1cc6:	34 e1       	ldi	r19, 0x14	; 20
    1cc8:	04 2e       	mov	r0, r20
    1cca:	00 0c       	add	r0, r0
    1ccc:	55 0b       	sbc	r21, r21
    1cce:	57 ff       	sbrs	r21, 7
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <dtostrf+0x26>
    1cd2:	51 95       	neg	r21
    1cd4:	41 95       	neg	r20
    1cd6:	51 09       	sbc	r21, r1
    1cd8:	e3 2e       	mov	r14, r19
    1cda:	02 2f       	mov	r16, r18
    1cdc:	24 2f       	mov	r18, r20
    1cde:	ae 01       	movw	r20, r28
    1ce0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <dtoa_prf>
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	ef 90       	pop	r14
    1cf0:	08 95       	ret

00001cf2 <sprintf>:
    1cf2:	ae e0       	ldi	r26, 0x0E	; 14
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	ef e7       	ldi	r30, 0x7F	; 127
    1cf8:	fe e0       	ldi	r31, 0x0E	; 14
    1cfa:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x1c>
    1cfe:	0d 89       	ldd	r16, Y+21	; 0x15
    1d00:	1e 89       	ldd	r17, Y+22	; 0x16
    1d02:	86 e0       	ldi	r24, 0x06	; 6
    1d04:	8c 83       	std	Y+4, r24	; 0x04
    1d06:	1a 83       	std	Y+2, r17	; 0x02
    1d08:	09 83       	std	Y+1, r16	; 0x01
    1d0a:	8f ef       	ldi	r24, 0xFF	; 255
    1d0c:	9f e7       	ldi	r25, 0x7F	; 127
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	ae 01       	movw	r20, r28
    1d14:	47 5e       	subi	r20, 0xE7	; 231
    1d16:	5f 4f       	sbci	r21, 0xFF	; 255
    1d18:	6f 89       	ldd	r22, Y+23	; 0x17
    1d1a:	78 8d       	ldd	r23, Y+24	; 0x18
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vfprintf>
    1d24:	ef 81       	ldd	r30, Y+7	; 0x07
    1d26:	f8 85       	ldd	r31, Y+8	; 0x08
    1d28:	e0 0f       	add	r30, r16
    1d2a:	f1 1f       	adc	r31, r17
    1d2c:	10 82       	st	Z, r1
    1d2e:	2e 96       	adiw	r28, 0x0e	; 14
    1d30:	e4 e0       	ldi	r30, 0x04	; 4
    1d32:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x1c>

00001d36 <vfprintf>:
    1d36:	ab e0       	ldi	r26, 0x0B	; 11
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e1 ea       	ldi	r30, 0xA1	; 161
    1d3c:	fe e0       	ldi	r31, 0x0E	; 14
    1d3e:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__prologue_saves__>
    1d42:	6c 01       	movw	r12, r24
    1d44:	7b 01       	movw	r14, r22
    1d46:	8a 01       	movw	r16, r20
    1d48:	fc 01       	movw	r30, r24
    1d4a:	17 82       	std	Z+7, r1	; 0x07
    1d4c:	16 82       	std	Z+6, r1	; 0x06
    1d4e:	83 81       	ldd	r24, Z+3	; 0x03
    1d50:	81 ff       	sbrs	r24, 1
    1d52:	cc c1       	rjmp	.+920    	; 0x20ec <vfprintf+0x3b6>
    1d54:	ce 01       	movw	r24, r28
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	3c 01       	movw	r6, r24
    1d5a:	f6 01       	movw	r30, r12
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	f7 01       	movw	r30, r14
    1d60:	93 fd       	sbrc	r25, 3
    1d62:	85 91       	lpm	r24, Z+
    1d64:	93 ff       	sbrs	r25, 3
    1d66:	81 91       	ld	r24, Z+
    1d68:	7f 01       	movw	r14, r30
    1d6a:	88 23       	and	r24, r24
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <vfprintf+0x3a>
    1d6e:	ba c1       	rjmp	.+884    	; 0x20e4 <vfprintf+0x3ae>
    1d70:	85 32       	cpi	r24, 0x25	; 37
    1d72:	39 f4       	brne	.+14     	; 0x1d82 <vfprintf+0x4c>
    1d74:	93 fd       	sbrc	r25, 3
    1d76:	85 91       	lpm	r24, Z+
    1d78:	93 ff       	sbrs	r25, 3
    1d7a:	81 91       	ld	r24, Z+
    1d7c:	7f 01       	movw	r14, r30
    1d7e:	85 32       	cpi	r24, 0x25	; 37
    1d80:	29 f4       	brne	.+10     	; 0x1d8c <vfprintf+0x56>
    1d82:	b6 01       	movw	r22, r12
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 c4 12 	call	0x2588	; 0x2588 <fputc>
    1d8a:	e7 cf       	rjmp	.-50     	; 0x1d5a <vfprintf+0x24>
    1d8c:	91 2c       	mov	r9, r1
    1d8e:	21 2c       	mov	r2, r1
    1d90:	31 2c       	mov	r3, r1
    1d92:	ff e1       	ldi	r31, 0x1F	; 31
    1d94:	f3 15       	cp	r31, r3
    1d96:	d8 f0       	brcs	.+54     	; 0x1dce <vfprintf+0x98>
    1d98:	8b 32       	cpi	r24, 0x2B	; 43
    1d9a:	79 f0       	breq	.+30     	; 0x1dba <vfprintf+0x84>
    1d9c:	38 f4       	brcc	.+14     	; 0x1dac <vfprintf+0x76>
    1d9e:	80 32       	cpi	r24, 0x20	; 32
    1da0:	79 f0       	breq	.+30     	; 0x1dc0 <vfprintf+0x8a>
    1da2:	83 32       	cpi	r24, 0x23	; 35
    1da4:	a1 f4       	brne	.+40     	; 0x1dce <vfprintf+0x98>
    1da6:	23 2d       	mov	r18, r3
    1da8:	20 61       	ori	r18, 0x10	; 16
    1daa:	1d c0       	rjmp	.+58     	; 0x1de6 <vfprintf+0xb0>
    1dac:	8d 32       	cpi	r24, 0x2D	; 45
    1dae:	61 f0       	breq	.+24     	; 0x1dc8 <vfprintf+0x92>
    1db0:	80 33       	cpi	r24, 0x30	; 48
    1db2:	69 f4       	brne	.+26     	; 0x1dce <vfprintf+0x98>
    1db4:	23 2d       	mov	r18, r3
    1db6:	21 60       	ori	r18, 0x01	; 1
    1db8:	16 c0       	rjmp	.+44     	; 0x1de6 <vfprintf+0xb0>
    1dba:	83 2d       	mov	r24, r3
    1dbc:	82 60       	ori	r24, 0x02	; 2
    1dbe:	38 2e       	mov	r3, r24
    1dc0:	e3 2d       	mov	r30, r3
    1dc2:	e4 60       	ori	r30, 0x04	; 4
    1dc4:	3e 2e       	mov	r3, r30
    1dc6:	2a c0       	rjmp	.+84     	; 0x1e1c <vfprintf+0xe6>
    1dc8:	f3 2d       	mov	r31, r3
    1dca:	f8 60       	ori	r31, 0x08	; 8
    1dcc:	1d c0       	rjmp	.+58     	; 0x1e08 <vfprintf+0xd2>
    1dce:	37 fc       	sbrc	r3, 7
    1dd0:	2d c0       	rjmp	.+90     	; 0x1e2c <vfprintf+0xf6>
    1dd2:	20 ed       	ldi	r18, 0xD0	; 208
    1dd4:	28 0f       	add	r18, r24
    1dd6:	2a 30       	cpi	r18, 0x0A	; 10
    1dd8:	40 f0       	brcs	.+16     	; 0x1dea <vfprintf+0xb4>
    1dda:	8e 32       	cpi	r24, 0x2E	; 46
    1ddc:	b9 f4       	brne	.+46     	; 0x1e0c <vfprintf+0xd6>
    1dde:	36 fc       	sbrc	r3, 6
    1de0:	81 c1       	rjmp	.+770    	; 0x20e4 <vfprintf+0x3ae>
    1de2:	23 2d       	mov	r18, r3
    1de4:	20 64       	ori	r18, 0x40	; 64
    1de6:	32 2e       	mov	r3, r18
    1de8:	19 c0       	rjmp	.+50     	; 0x1e1c <vfprintf+0xe6>
    1dea:	36 fe       	sbrs	r3, 6
    1dec:	06 c0       	rjmp	.+12     	; 0x1dfa <vfprintf+0xc4>
    1dee:	8a e0       	ldi	r24, 0x0A	; 10
    1df0:	98 9e       	mul	r9, r24
    1df2:	20 0d       	add	r18, r0
    1df4:	11 24       	eor	r1, r1
    1df6:	92 2e       	mov	r9, r18
    1df8:	11 c0       	rjmp	.+34     	; 0x1e1c <vfprintf+0xe6>
    1dfa:	ea e0       	ldi	r30, 0x0A	; 10
    1dfc:	2e 9e       	mul	r2, r30
    1dfe:	20 0d       	add	r18, r0
    1e00:	11 24       	eor	r1, r1
    1e02:	22 2e       	mov	r2, r18
    1e04:	f3 2d       	mov	r31, r3
    1e06:	f0 62       	ori	r31, 0x20	; 32
    1e08:	3f 2e       	mov	r3, r31
    1e0a:	08 c0       	rjmp	.+16     	; 0x1e1c <vfprintf+0xe6>
    1e0c:	8c 36       	cpi	r24, 0x6C	; 108
    1e0e:	21 f4       	brne	.+8      	; 0x1e18 <vfprintf+0xe2>
    1e10:	83 2d       	mov	r24, r3
    1e12:	80 68       	ori	r24, 0x80	; 128
    1e14:	38 2e       	mov	r3, r24
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <vfprintf+0xe6>
    1e18:	88 36       	cpi	r24, 0x68	; 104
    1e1a:	41 f4       	brne	.+16     	; 0x1e2c <vfprintf+0xf6>
    1e1c:	f7 01       	movw	r30, r14
    1e1e:	93 fd       	sbrc	r25, 3
    1e20:	85 91       	lpm	r24, Z+
    1e22:	93 ff       	sbrs	r25, 3
    1e24:	81 91       	ld	r24, Z+
    1e26:	7f 01       	movw	r14, r30
    1e28:	81 11       	cpse	r24, r1
    1e2a:	b3 cf       	rjmp	.-154    	; 0x1d92 <vfprintf+0x5c>
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	9f 7d       	andi	r25, 0xDF	; 223
    1e30:	95 54       	subi	r25, 0x45	; 69
    1e32:	93 30       	cpi	r25, 0x03	; 3
    1e34:	28 f4       	brcc	.+10     	; 0x1e40 <vfprintf+0x10a>
    1e36:	0c 5f       	subi	r16, 0xFC	; 252
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	9f e3       	ldi	r25, 0x3F	; 63
    1e3c:	99 83       	std	Y+1, r25	; 0x01
    1e3e:	0d c0       	rjmp	.+26     	; 0x1e5a <vfprintf+0x124>
    1e40:	83 36       	cpi	r24, 0x63	; 99
    1e42:	31 f0       	breq	.+12     	; 0x1e50 <vfprintf+0x11a>
    1e44:	83 37       	cpi	r24, 0x73	; 115
    1e46:	71 f0       	breq	.+28     	; 0x1e64 <vfprintf+0x12e>
    1e48:	83 35       	cpi	r24, 0x53	; 83
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <vfprintf+0x118>
    1e4c:	59 c0       	rjmp	.+178    	; 0x1f00 <vfprintf+0x1ca>
    1e4e:	21 c0       	rjmp	.+66     	; 0x1e92 <vfprintf+0x15c>
    1e50:	f8 01       	movw	r30, r16
    1e52:	80 81       	ld	r24, Z
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	0e 5f       	subi	r16, 0xFE	; 254
    1e58:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5a:	88 24       	eor	r8, r8
    1e5c:	83 94       	inc	r8
    1e5e:	91 2c       	mov	r9, r1
    1e60:	53 01       	movw	r10, r6
    1e62:	13 c0       	rjmp	.+38     	; 0x1e8a <vfprintf+0x154>
    1e64:	28 01       	movw	r4, r16
    1e66:	f2 e0       	ldi	r31, 0x02	; 2
    1e68:	4f 0e       	add	r4, r31
    1e6a:	51 1c       	adc	r5, r1
    1e6c:	f8 01       	movw	r30, r16
    1e6e:	a0 80       	ld	r10, Z
    1e70:	b1 80       	ldd	r11, Z+1	; 0x01
    1e72:	36 fe       	sbrs	r3, 6
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <vfprintf+0x146>
    1e76:	69 2d       	mov	r22, r9
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <vfprintf+0x14a>
    1e7c:	6f ef       	ldi	r22, 0xFF	; 255
    1e7e:	7f ef       	ldi	r23, 0xFF	; 255
    1e80:	c5 01       	movw	r24, r10
    1e82:	0e 94 b9 12 	call	0x2572	; 0x2572 <strnlen>
    1e86:	4c 01       	movw	r8, r24
    1e88:	82 01       	movw	r16, r4
    1e8a:	f3 2d       	mov	r31, r3
    1e8c:	ff 77       	andi	r31, 0x7F	; 127
    1e8e:	3f 2e       	mov	r3, r31
    1e90:	16 c0       	rjmp	.+44     	; 0x1ebe <vfprintf+0x188>
    1e92:	28 01       	movw	r4, r16
    1e94:	22 e0       	ldi	r18, 0x02	; 2
    1e96:	42 0e       	add	r4, r18
    1e98:	51 1c       	adc	r5, r1
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	a0 80       	ld	r10, Z
    1e9e:	b1 80       	ldd	r11, Z+1	; 0x01
    1ea0:	36 fe       	sbrs	r3, 6
    1ea2:	03 c0       	rjmp	.+6      	; 0x1eaa <vfprintf+0x174>
    1ea4:	69 2d       	mov	r22, r9
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <vfprintf+0x178>
    1eaa:	6f ef       	ldi	r22, 0xFF	; 255
    1eac:	7f ef       	ldi	r23, 0xFF	; 255
    1eae:	c5 01       	movw	r24, r10
    1eb0:	0e 94 ae 12 	call	0x255c	; 0x255c <strnlen_P>
    1eb4:	4c 01       	movw	r8, r24
    1eb6:	f3 2d       	mov	r31, r3
    1eb8:	f0 68       	ori	r31, 0x80	; 128
    1eba:	3f 2e       	mov	r3, r31
    1ebc:	82 01       	movw	r16, r4
    1ebe:	33 fc       	sbrc	r3, 3
    1ec0:	1b c0       	rjmp	.+54     	; 0x1ef8 <vfprintf+0x1c2>
    1ec2:	82 2d       	mov	r24, r2
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	88 16       	cp	r8, r24
    1ec8:	99 06       	cpc	r9, r25
    1eca:	b0 f4       	brcc	.+44     	; 0x1ef8 <vfprintf+0x1c2>
    1ecc:	b6 01       	movw	r22, r12
    1ece:	80 e2       	ldi	r24, 0x20	; 32
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 c4 12 	call	0x2588	; 0x2588 <fputc>
    1ed6:	2a 94       	dec	r2
    1ed8:	f4 cf       	rjmp	.-24     	; 0x1ec2 <vfprintf+0x18c>
    1eda:	f5 01       	movw	r30, r10
    1edc:	37 fc       	sbrc	r3, 7
    1ede:	85 91       	lpm	r24, Z+
    1ee0:	37 fe       	sbrs	r3, 7
    1ee2:	81 91       	ld	r24, Z+
    1ee4:	5f 01       	movw	r10, r30
    1ee6:	b6 01       	movw	r22, r12
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 c4 12 	call	0x2588	; 0x2588 <fputc>
    1eee:	21 10       	cpse	r2, r1
    1ef0:	2a 94       	dec	r2
    1ef2:	21 e0       	ldi	r18, 0x01	; 1
    1ef4:	82 1a       	sub	r8, r18
    1ef6:	91 08       	sbc	r9, r1
    1ef8:	81 14       	cp	r8, r1
    1efa:	91 04       	cpc	r9, r1
    1efc:	71 f7       	brne	.-36     	; 0x1eda <vfprintf+0x1a4>
    1efe:	e8 c0       	rjmp	.+464    	; 0x20d0 <vfprintf+0x39a>
    1f00:	84 36       	cpi	r24, 0x64	; 100
    1f02:	11 f0       	breq	.+4      	; 0x1f08 <vfprintf+0x1d2>
    1f04:	89 36       	cpi	r24, 0x69	; 105
    1f06:	41 f5       	brne	.+80     	; 0x1f58 <vfprintf+0x222>
    1f08:	f8 01       	movw	r30, r16
    1f0a:	37 fe       	sbrs	r3, 7
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <vfprintf+0x1e6>
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	0c 5f       	subi	r16, 0xFC	; 252
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	08 c0       	rjmp	.+16     	; 0x1f2c <vfprintf+0x1f6>
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	07 2e       	mov	r0, r23
    1f22:	00 0c       	add	r0, r0
    1f24:	88 0b       	sbc	r24, r24
    1f26:	99 0b       	sbc	r25, r25
    1f28:	0e 5f       	subi	r16, 0xFE	; 254
    1f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2c:	f3 2d       	mov	r31, r3
    1f2e:	ff 76       	andi	r31, 0x6F	; 111
    1f30:	3f 2e       	mov	r3, r31
    1f32:	97 ff       	sbrs	r25, 7
    1f34:	09 c0       	rjmp	.+18     	; 0x1f48 <vfprintf+0x212>
    1f36:	90 95       	com	r25
    1f38:	80 95       	com	r24
    1f3a:	70 95       	com	r23
    1f3c:	61 95       	neg	r22
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	8f 4f       	sbci	r24, 0xFF	; 255
    1f42:	9f 4f       	sbci	r25, 0xFF	; 255
    1f44:	f0 68       	ori	r31, 0x80	; 128
    1f46:	3f 2e       	mov	r3, r31
    1f48:	2a e0       	ldi	r18, 0x0A	; 10
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	a3 01       	movw	r20, r6
    1f4e:	0e 94 00 13 	call	0x2600	; 0x2600 <__ultoa_invert>
    1f52:	88 2e       	mov	r8, r24
    1f54:	86 18       	sub	r8, r6
    1f56:	45 c0       	rjmp	.+138    	; 0x1fe2 <vfprintf+0x2ac>
    1f58:	85 37       	cpi	r24, 0x75	; 117
    1f5a:	31 f4       	brne	.+12     	; 0x1f68 <vfprintf+0x232>
    1f5c:	23 2d       	mov	r18, r3
    1f5e:	2f 7e       	andi	r18, 0xEF	; 239
    1f60:	b2 2e       	mov	r11, r18
    1f62:	2a e0       	ldi	r18, 0x0A	; 10
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	25 c0       	rjmp	.+74     	; 0x1fb2 <vfprintf+0x27c>
    1f68:	93 2d       	mov	r25, r3
    1f6a:	99 7f       	andi	r25, 0xF9	; 249
    1f6c:	b9 2e       	mov	r11, r25
    1f6e:	8f 36       	cpi	r24, 0x6F	; 111
    1f70:	c1 f0       	breq	.+48     	; 0x1fa2 <vfprintf+0x26c>
    1f72:	18 f4       	brcc	.+6      	; 0x1f7a <vfprintf+0x244>
    1f74:	88 35       	cpi	r24, 0x58	; 88
    1f76:	79 f0       	breq	.+30     	; 0x1f96 <vfprintf+0x260>
    1f78:	b5 c0       	rjmp	.+362    	; 0x20e4 <vfprintf+0x3ae>
    1f7a:	80 37       	cpi	r24, 0x70	; 112
    1f7c:	19 f0       	breq	.+6      	; 0x1f84 <vfprintf+0x24e>
    1f7e:	88 37       	cpi	r24, 0x78	; 120
    1f80:	21 f0       	breq	.+8      	; 0x1f8a <vfprintf+0x254>
    1f82:	b0 c0       	rjmp	.+352    	; 0x20e4 <vfprintf+0x3ae>
    1f84:	e9 2f       	mov	r30, r25
    1f86:	e0 61       	ori	r30, 0x10	; 16
    1f88:	be 2e       	mov	r11, r30
    1f8a:	b4 fe       	sbrs	r11, 4
    1f8c:	0d c0       	rjmp	.+26     	; 0x1fa8 <vfprintf+0x272>
    1f8e:	fb 2d       	mov	r31, r11
    1f90:	f4 60       	ori	r31, 0x04	; 4
    1f92:	bf 2e       	mov	r11, r31
    1f94:	09 c0       	rjmp	.+18     	; 0x1fa8 <vfprintf+0x272>
    1f96:	34 fe       	sbrs	r3, 4
    1f98:	0a c0       	rjmp	.+20     	; 0x1fae <vfprintf+0x278>
    1f9a:	29 2f       	mov	r18, r25
    1f9c:	26 60       	ori	r18, 0x06	; 6
    1f9e:	b2 2e       	mov	r11, r18
    1fa0:	06 c0       	rjmp	.+12     	; 0x1fae <vfprintf+0x278>
    1fa2:	28 e0       	ldi	r18, 0x08	; 8
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	05 c0       	rjmp	.+10     	; 0x1fb2 <vfprintf+0x27c>
    1fa8:	20 e1       	ldi	r18, 0x10	; 16
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <vfprintf+0x27c>
    1fae:	20 e1       	ldi	r18, 0x10	; 16
    1fb0:	32 e0       	ldi	r19, 0x02	; 2
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	b7 fe       	sbrs	r11, 7
    1fb6:	07 c0       	rjmp	.+14     	; 0x1fc6 <vfprintf+0x290>
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	0c 5f       	subi	r16, 0xFC	; 252
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	06 c0       	rjmp	.+12     	; 0x1fd2 <vfprintf+0x29c>
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 5f       	subi	r16, 0xFE	; 254
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	a3 01       	movw	r20, r6
    1fd4:	0e 94 00 13 	call	0x2600	; 0x2600 <__ultoa_invert>
    1fd8:	88 2e       	mov	r8, r24
    1fda:	86 18       	sub	r8, r6
    1fdc:	fb 2d       	mov	r31, r11
    1fde:	ff 77       	andi	r31, 0x7F	; 127
    1fe0:	3f 2e       	mov	r3, r31
    1fe2:	36 fe       	sbrs	r3, 6
    1fe4:	0d c0       	rjmp	.+26     	; 0x2000 <vfprintf+0x2ca>
    1fe6:	23 2d       	mov	r18, r3
    1fe8:	2e 7f       	andi	r18, 0xFE	; 254
    1fea:	a2 2e       	mov	r10, r18
    1fec:	89 14       	cp	r8, r9
    1fee:	58 f4       	brcc	.+22     	; 0x2006 <vfprintf+0x2d0>
    1ff0:	34 fe       	sbrs	r3, 4
    1ff2:	0b c0       	rjmp	.+22     	; 0x200a <vfprintf+0x2d4>
    1ff4:	32 fc       	sbrc	r3, 2
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <vfprintf+0x2d4>
    1ff8:	83 2d       	mov	r24, r3
    1ffa:	8e 7e       	andi	r24, 0xEE	; 238
    1ffc:	a8 2e       	mov	r10, r24
    1ffe:	05 c0       	rjmp	.+10     	; 0x200a <vfprintf+0x2d4>
    2000:	b8 2c       	mov	r11, r8
    2002:	a3 2c       	mov	r10, r3
    2004:	03 c0       	rjmp	.+6      	; 0x200c <vfprintf+0x2d6>
    2006:	b8 2c       	mov	r11, r8
    2008:	01 c0       	rjmp	.+2      	; 0x200c <vfprintf+0x2d6>
    200a:	b9 2c       	mov	r11, r9
    200c:	a4 fe       	sbrs	r10, 4
    200e:	0f c0       	rjmp	.+30     	; 0x202e <vfprintf+0x2f8>
    2010:	fe 01       	movw	r30, r28
    2012:	e8 0d       	add	r30, r8
    2014:	f1 1d       	adc	r31, r1
    2016:	80 81       	ld	r24, Z
    2018:	80 33       	cpi	r24, 0x30	; 48
    201a:	21 f4       	brne	.+8      	; 0x2024 <vfprintf+0x2ee>
    201c:	9a 2d       	mov	r25, r10
    201e:	99 7e       	andi	r25, 0xE9	; 233
    2020:	a9 2e       	mov	r10, r25
    2022:	09 c0       	rjmp	.+18     	; 0x2036 <vfprintf+0x300>
    2024:	a2 fe       	sbrs	r10, 2
    2026:	06 c0       	rjmp	.+12     	; 0x2034 <vfprintf+0x2fe>
    2028:	b3 94       	inc	r11
    202a:	b3 94       	inc	r11
    202c:	04 c0       	rjmp	.+8      	; 0x2036 <vfprintf+0x300>
    202e:	8a 2d       	mov	r24, r10
    2030:	86 78       	andi	r24, 0x86	; 134
    2032:	09 f0       	breq	.+2      	; 0x2036 <vfprintf+0x300>
    2034:	b3 94       	inc	r11
    2036:	a3 fc       	sbrc	r10, 3
    2038:	11 c0       	rjmp	.+34     	; 0x205c <vfprintf+0x326>
    203a:	a0 fe       	sbrs	r10, 0
    203c:	06 c0       	rjmp	.+12     	; 0x204a <vfprintf+0x314>
    203e:	b2 14       	cp	r11, r2
    2040:	88 f4       	brcc	.+34     	; 0x2064 <vfprintf+0x32e>
    2042:	28 0c       	add	r2, r8
    2044:	92 2c       	mov	r9, r2
    2046:	9b 18       	sub	r9, r11
    2048:	0e c0       	rjmp	.+28     	; 0x2066 <vfprintf+0x330>
    204a:	b2 14       	cp	r11, r2
    204c:	60 f4       	brcc	.+24     	; 0x2066 <vfprintf+0x330>
    204e:	b6 01       	movw	r22, r12
    2050:	80 e2       	ldi	r24, 0x20	; 32
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	0e 94 c4 12 	call	0x2588	; 0x2588 <fputc>
    2058:	b3 94       	inc	r11
    205a:	f7 cf       	rjmp	.-18     	; 0x204a <vfprintf+0x314>
    205c:	b2 14       	cp	r11, r2
    205e:	18 f4       	brcc	.+6      	; 0x2066 <vfprintf+0x330>
    2060:	2b 18       	sub	r2, r11
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <vfprintf+0x332>
    2064:	98 2c       	mov	r9, r8
    2066:	21 2c       	mov	r2, r1
    2068:	a4 fe       	sbrs	r10, 4
    206a:	10 c0       	rjmp	.+32     	; 0x208c <vfprintf+0x356>
    206c:	b6 01       	movw	r22, r12
    206e:	80 e3       	ldi	r24, 0x30	; 48
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0e 94 c4 12 	call	0x2588	; 0x2588 <fputc>
    2076:	a2 fe       	sbrs	r10, 2
    2078:	17 c0       	rjmp	.+46     	; 0x20a8 <vfprintf+0x372>
    207a:	a1 fc       	sbrc	r10, 1
    207c:	03 c0       	rjmp	.+6      	; 0x2084 <vfprintf+0x34e>
    207e:	88 e7       	ldi	r24, 0x78	; 120
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <vfprintf+0x352>
    2084:	88 e5       	ldi	r24, 0x58	; 88
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	b6 01       	movw	r22, r12
    208a:	0c c0       	rjmp	.+24     	; 0x20a4 <vfprintf+0x36e>
    208c:	8a 2d       	mov	r24, r10
    208e:	86 78       	andi	r24, 0x86	; 134
    2090:	59 f0       	breq	.+22     	; 0x20a8 <vfprintf+0x372>
    2092:	a1 fe       	sbrs	r10, 1
    2094:	02 c0       	rjmp	.+4      	; 0x209a <vfprintf+0x364>
    2096:	8b e2       	ldi	r24, 0x2B	; 43
    2098:	01 c0       	rjmp	.+2      	; 0x209c <vfprintf+0x366>
    209a:	80 e2       	ldi	r24, 0x20	; 32
    209c:	a7 fc       	sbrc	r10, 7
    209e:	8d e2       	ldi	r24, 0x2D	; 45
    20a0:	b6 01       	movw	r22, r12
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 c4 12 	call	0x2588	; 0x2588 <fputc>
    20a8:	89 14       	cp	r8, r9
    20aa:	38 f4       	brcc	.+14     	; 0x20ba <vfprintf+0x384>
    20ac:	b6 01       	movw	r22, r12
    20ae:	80 e3       	ldi	r24, 0x30	; 48
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 94 c4 12 	call	0x2588	; 0x2588 <fputc>
    20b6:	9a 94       	dec	r9
    20b8:	f7 cf       	rjmp	.-18     	; 0x20a8 <vfprintf+0x372>
    20ba:	8a 94       	dec	r8
    20bc:	f3 01       	movw	r30, r6
    20be:	e8 0d       	add	r30, r8
    20c0:	f1 1d       	adc	r31, r1
    20c2:	80 81       	ld	r24, Z
    20c4:	b6 01       	movw	r22, r12
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 c4 12 	call	0x2588	; 0x2588 <fputc>
    20cc:	81 10       	cpse	r8, r1
    20ce:	f5 cf       	rjmp	.-22     	; 0x20ba <vfprintf+0x384>
    20d0:	22 20       	and	r2, r2
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <vfprintf+0x3a0>
    20d4:	42 ce       	rjmp	.-892    	; 0x1d5a <vfprintf+0x24>
    20d6:	b6 01       	movw	r22, r12
    20d8:	80 e2       	ldi	r24, 0x20	; 32
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	0e 94 c4 12 	call	0x2588	; 0x2588 <fputc>
    20e0:	2a 94       	dec	r2
    20e2:	f6 cf       	rjmp	.-20     	; 0x20d0 <vfprintf+0x39a>
    20e4:	f6 01       	movw	r30, r12
    20e6:	86 81       	ldd	r24, Z+6	; 0x06
    20e8:	97 81       	ldd	r25, Z+7	; 0x07
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <vfprintf+0x3ba>
    20ec:	8f ef       	ldi	r24, 0xFF	; 255
    20ee:	9f ef       	ldi	r25, 0xFF	; 255
    20f0:	2b 96       	adiw	r28, 0x0b	; 11
    20f2:	e2 e1       	ldi	r30, 0x12	; 18
    20f4:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__epilogue_restores__>

000020f8 <dtoa_prf>:
    20f8:	a9 e0       	ldi	r26, 0x09	; 9
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e2 e8       	ldi	r30, 0x82	; 130
    20fe:	f0 e1       	ldi	r31, 0x10	; 16
    2100:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__+0xc>
    2104:	6a 01       	movw	r12, r20
    2106:	12 2f       	mov	r17, r18
    2108:	b0 2e       	mov	r11, r16
    210a:	2b e3       	ldi	r18, 0x3B	; 59
    210c:	20 17       	cp	r18, r16
    210e:	20 f0       	brcs	.+8      	; 0x2118 <dtoa_prf+0x20>
    2110:	ff 24       	eor	r15, r15
    2112:	f3 94       	inc	r15
    2114:	f0 0e       	add	r15, r16
    2116:	02 c0       	rjmp	.+4      	; 0x211c <dtoa_prf+0x24>
    2118:	2c e3       	ldi	r18, 0x3C	; 60
    211a:	f2 2e       	mov	r15, r18
    211c:	0f 2d       	mov	r16, r15
    211e:	27 e0       	ldi	r18, 0x07	; 7
    2120:	ae 01       	movw	r20, r28
    2122:	4f 5f       	subi	r20, 0xFF	; 255
    2124:	5f 4f       	sbci	r21, 0xFF	; 255
    2126:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__ftoa_engine>
    212a:	bc 01       	movw	r22, r24
    212c:	49 81       	ldd	r20, Y+1	; 0x01
    212e:	84 2f       	mov	r24, r20
    2130:	89 70       	andi	r24, 0x09	; 9
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	31 f0       	breq	.+12     	; 0x2142 <dtoa_prf+0x4a>
    2136:	e1 fc       	sbrc	r14, 1
    2138:	06 c0       	rjmp	.+12     	; 0x2146 <dtoa_prf+0x4e>
    213a:	e0 fe       	sbrs	r14, 0
    213c:	06 c0       	rjmp	.+12     	; 0x214a <dtoa_prf+0x52>
    213e:	90 e2       	ldi	r25, 0x20	; 32
    2140:	05 c0       	rjmp	.+10     	; 0x214c <dtoa_prf+0x54>
    2142:	9d e2       	ldi	r25, 0x2D	; 45
    2144:	03 c0       	rjmp	.+6      	; 0x214c <dtoa_prf+0x54>
    2146:	9b e2       	ldi	r25, 0x2B	; 43
    2148:	01 c0       	rjmp	.+2      	; 0x214c <dtoa_prf+0x54>
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	5e 2d       	mov	r21, r14
    214e:	50 71       	andi	r21, 0x10	; 16
    2150:	43 ff       	sbrs	r20, 3
    2152:	3c c0       	rjmp	.+120    	; 0x21cc <dtoa_prf+0xd4>
    2154:	91 11       	cpse	r25, r1
    2156:	02 c0       	rjmp	.+4      	; 0x215c <dtoa_prf+0x64>
    2158:	83 e0       	ldi	r24, 0x03	; 3
    215a:	01 c0       	rjmp	.+2      	; 0x215e <dtoa_prf+0x66>
    215c:	84 e0       	ldi	r24, 0x04	; 4
    215e:	81 17       	cp	r24, r17
    2160:	18 f4       	brcc	.+6      	; 0x2168 <dtoa_prf+0x70>
    2162:	21 2f       	mov	r18, r17
    2164:	28 1b       	sub	r18, r24
    2166:	01 c0       	rjmp	.+2      	; 0x216a <dtoa_prf+0x72>
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	51 11       	cpse	r21, r1
    216c:	0b c0       	rjmp	.+22     	; 0x2184 <dtoa_prf+0x8c>
    216e:	f6 01       	movw	r30, r12
    2170:	82 2f       	mov	r24, r18
    2172:	30 e2       	ldi	r19, 0x20	; 32
    2174:	88 23       	and	r24, r24
    2176:	19 f0       	breq	.+6      	; 0x217e <dtoa_prf+0x86>
    2178:	31 93       	st	Z+, r19
    217a:	81 50       	subi	r24, 0x01	; 1
    217c:	fb cf       	rjmp	.-10     	; 0x2174 <dtoa_prf+0x7c>
    217e:	c2 0e       	add	r12, r18
    2180:	d1 1c       	adc	r13, r1
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	99 23       	and	r25, r25
    2186:	29 f0       	breq	.+10     	; 0x2192 <dtoa_prf+0x9a>
    2188:	d6 01       	movw	r26, r12
    218a:	9c 93       	st	X, r25
    218c:	f6 01       	movw	r30, r12
    218e:	31 96       	adiw	r30, 0x01	; 1
    2190:	6f 01       	movw	r12, r30
    2192:	c6 01       	movw	r24, r12
    2194:	03 96       	adiw	r24, 0x03	; 3
    2196:	e2 fe       	sbrs	r14, 2
    2198:	0a c0       	rjmp	.+20     	; 0x21ae <dtoa_prf+0xb6>
    219a:	3e e4       	ldi	r19, 0x4E	; 78
    219c:	d6 01       	movw	r26, r12
    219e:	3c 93       	st	X, r19
    21a0:	41 e4       	ldi	r20, 0x41	; 65
    21a2:	11 96       	adiw	r26, 0x01	; 1
    21a4:	4c 93       	st	X, r20
    21a6:	11 97       	sbiw	r26, 0x01	; 1
    21a8:	12 96       	adiw	r26, 0x02	; 2
    21aa:	3c 93       	st	X, r19
    21ac:	06 c0       	rjmp	.+12     	; 0x21ba <dtoa_prf+0xc2>
    21ae:	3e e6       	ldi	r19, 0x6E	; 110
    21b0:	f6 01       	movw	r30, r12
    21b2:	30 83       	st	Z, r19
    21b4:	41 e6       	ldi	r20, 0x61	; 97
    21b6:	41 83       	std	Z+1, r20	; 0x01
    21b8:	32 83       	std	Z+2, r19	; 0x02
    21ba:	fc 01       	movw	r30, r24
    21bc:	32 2f       	mov	r19, r18
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	33 23       	and	r19, r19
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <dtoa_prf+0xce>
    21c4:	42 c0       	rjmp	.+132    	; 0x224a <dtoa_prf+0x152>
    21c6:	41 93       	st	Z+, r20
    21c8:	31 50       	subi	r19, 0x01	; 1
    21ca:	fa cf       	rjmp	.-12     	; 0x21c0 <dtoa_prf+0xc8>
    21cc:	42 ff       	sbrs	r20, 2
    21ce:	44 c0       	rjmp	.+136    	; 0x2258 <dtoa_prf+0x160>
    21d0:	91 11       	cpse	r25, r1
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <dtoa_prf+0xe0>
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <dtoa_prf+0xe2>
    21d8:	84 e0       	ldi	r24, 0x04	; 4
    21da:	81 17       	cp	r24, r17
    21dc:	18 f4       	brcc	.+6      	; 0x21e4 <dtoa_prf+0xec>
    21de:	21 2f       	mov	r18, r17
    21e0:	28 1b       	sub	r18, r24
    21e2:	01 c0       	rjmp	.+2      	; 0x21e6 <dtoa_prf+0xee>
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	51 11       	cpse	r21, r1
    21e8:	0b c0       	rjmp	.+22     	; 0x2200 <dtoa_prf+0x108>
    21ea:	f6 01       	movw	r30, r12
    21ec:	82 2f       	mov	r24, r18
    21ee:	30 e2       	ldi	r19, 0x20	; 32
    21f0:	88 23       	and	r24, r24
    21f2:	19 f0       	breq	.+6      	; 0x21fa <dtoa_prf+0x102>
    21f4:	31 93       	st	Z+, r19
    21f6:	81 50       	subi	r24, 0x01	; 1
    21f8:	fb cf       	rjmp	.-10     	; 0x21f0 <dtoa_prf+0xf8>
    21fa:	c2 0e       	add	r12, r18
    21fc:	d1 1c       	adc	r13, r1
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	99 23       	and	r25, r25
    2202:	29 f0       	breq	.+10     	; 0x220e <dtoa_prf+0x116>
    2204:	d6 01       	movw	r26, r12
    2206:	9c 93       	st	X, r25
    2208:	f6 01       	movw	r30, r12
    220a:	31 96       	adiw	r30, 0x01	; 1
    220c:	6f 01       	movw	r12, r30
    220e:	c6 01       	movw	r24, r12
    2210:	03 96       	adiw	r24, 0x03	; 3
    2212:	e2 fe       	sbrs	r14, 2
    2214:	0b c0       	rjmp	.+22     	; 0x222c <dtoa_prf+0x134>
    2216:	39 e4       	ldi	r19, 0x49	; 73
    2218:	d6 01       	movw	r26, r12
    221a:	3c 93       	st	X, r19
    221c:	3e e4       	ldi	r19, 0x4E	; 78
    221e:	11 96       	adiw	r26, 0x01	; 1
    2220:	3c 93       	st	X, r19
    2222:	11 97       	sbiw	r26, 0x01	; 1
    2224:	36 e4       	ldi	r19, 0x46	; 70
    2226:	12 96       	adiw	r26, 0x02	; 2
    2228:	3c 93       	st	X, r19
    222a:	07 c0       	rjmp	.+14     	; 0x223a <dtoa_prf+0x142>
    222c:	39 e6       	ldi	r19, 0x69	; 105
    222e:	f6 01       	movw	r30, r12
    2230:	30 83       	st	Z, r19
    2232:	3e e6       	ldi	r19, 0x6E	; 110
    2234:	31 83       	std	Z+1, r19	; 0x01
    2236:	36 e6       	ldi	r19, 0x66	; 102
    2238:	32 83       	std	Z+2, r19	; 0x02
    223a:	fc 01       	movw	r30, r24
    223c:	32 2f       	mov	r19, r18
    223e:	40 e2       	ldi	r20, 0x20	; 32
    2240:	33 23       	and	r19, r19
    2242:	19 f0       	breq	.+6      	; 0x224a <dtoa_prf+0x152>
    2244:	41 93       	st	Z+, r20
    2246:	31 50       	subi	r19, 0x01	; 1
    2248:	fb cf       	rjmp	.-10     	; 0x2240 <dtoa_prf+0x148>
    224a:	fc 01       	movw	r30, r24
    224c:	e2 0f       	add	r30, r18
    224e:	f1 1d       	adc	r31, r1
    2250:	10 82       	st	Z, r1
    2252:	8e ef       	ldi	r24, 0xFE	; 254
    2254:	9f ef       	ldi	r25, 0xFF	; 255
    2256:	a6 c0       	rjmp	.+332    	; 0x23a4 <dtoa_prf+0x2ac>
    2258:	21 e0       	ldi	r18, 0x01	; 1
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	91 11       	cpse	r25, r1
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <dtoa_prf+0x16c>
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	16 16       	cp	r1, r22
    2266:	17 06       	cpc	r1, r23
    2268:	1c f4       	brge	.+6      	; 0x2270 <dtoa_prf+0x178>
    226a:	fb 01       	movw	r30, r22
    226c:	31 96       	adiw	r30, 0x01	; 1
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <dtoa_prf+0x17c>
    2270:	e1 e0       	ldi	r30, 0x01	; 1
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	2e 0f       	add	r18, r30
    2276:	3f 1f       	adc	r19, r31
    2278:	bb 20       	and	r11, r11
    227a:	21 f0       	breq	.+8      	; 0x2284 <dtoa_prf+0x18c>
    227c:	eb 2d       	mov	r30, r11
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	31 96       	adiw	r30, 0x01	; 1
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <dtoa_prf+0x190>
    2284:	e0 e0       	ldi	r30, 0x00	; 0
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	2e 0f       	add	r18, r30
    228a:	3f 1f       	adc	r19, r31
    228c:	e1 2f       	mov	r30, r17
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	2e 17       	cp	r18, r30
    2292:	3f 07       	cpc	r19, r31
    2294:	1c f4       	brge	.+6      	; 0x229c <dtoa_prf+0x1a4>
    2296:	12 1b       	sub	r17, r18
    2298:	21 2f       	mov	r18, r17
    229a:	01 c0       	rjmp	.+2      	; 0x229e <dtoa_prf+0x1a6>
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	8e 2d       	mov	r24, r14
    22a0:	88 71       	andi	r24, 0x18	; 24
    22a2:	59 f4       	brne	.+22     	; 0x22ba <dtoa_prf+0x1c2>
    22a4:	f6 01       	movw	r30, r12
    22a6:	82 2f       	mov	r24, r18
    22a8:	30 e2       	ldi	r19, 0x20	; 32
    22aa:	88 23       	and	r24, r24
    22ac:	19 f0       	breq	.+6      	; 0x22b4 <dtoa_prf+0x1bc>
    22ae:	31 93       	st	Z+, r19
    22b0:	81 50       	subi	r24, 0x01	; 1
    22b2:	fb cf       	rjmp	.-10     	; 0x22aa <dtoa_prf+0x1b2>
    22b4:	c2 0e       	add	r12, r18
    22b6:	d1 1c       	adc	r13, r1
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	99 23       	and	r25, r25
    22bc:	29 f0       	breq	.+10     	; 0x22c8 <dtoa_prf+0x1d0>
    22be:	d6 01       	movw	r26, r12
    22c0:	9c 93       	st	X, r25
    22c2:	f6 01       	movw	r30, r12
    22c4:	31 96       	adiw	r30, 0x01	; 1
    22c6:	6f 01       	movw	r12, r30
    22c8:	51 11       	cpse	r21, r1
    22ca:	0b c0       	rjmp	.+22     	; 0x22e2 <dtoa_prf+0x1ea>
    22cc:	f6 01       	movw	r30, r12
    22ce:	82 2f       	mov	r24, r18
    22d0:	90 e3       	ldi	r25, 0x30	; 48
    22d2:	88 23       	and	r24, r24
    22d4:	19 f0       	breq	.+6      	; 0x22dc <dtoa_prf+0x1e4>
    22d6:	91 93       	st	Z+, r25
    22d8:	81 50       	subi	r24, 0x01	; 1
    22da:	fb cf       	rjmp	.-10     	; 0x22d2 <dtoa_prf+0x1da>
    22dc:	c2 0e       	add	r12, r18
    22de:	d1 1c       	adc	r13, r1
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	0f 2d       	mov	r16, r15
    22e4:	06 0f       	add	r16, r22
    22e6:	9a 81       	ldd	r25, Y+2	; 0x02
    22e8:	34 2f       	mov	r19, r20
    22ea:	30 71       	andi	r19, 0x10	; 16
    22ec:	44 ff       	sbrs	r20, 4
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <dtoa_prf+0x1fe>
    22f0:	91 33       	cpi	r25, 0x31	; 49
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <dtoa_prf+0x1fe>
    22f4:	01 50       	subi	r16, 0x01	; 1
    22f6:	10 16       	cp	r1, r16
    22f8:	24 f4       	brge	.+8      	; 0x2302 <dtoa_prf+0x20a>
    22fa:	09 30       	cpi	r16, 0x09	; 9
    22fc:	18 f0       	brcs	.+6      	; 0x2304 <dtoa_prf+0x20c>
    22fe:	08 e0       	ldi	r16, 0x08	; 8
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <dtoa_prf+0x20c>
    2302:	01 e0       	ldi	r16, 0x01	; 1
    2304:	ab 01       	movw	r20, r22
    2306:	77 ff       	sbrs	r23, 7
    2308:	02 c0       	rjmp	.+4      	; 0x230e <dtoa_prf+0x216>
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	fb 01       	movw	r30, r22
    2310:	e4 1b       	sub	r30, r20
    2312:	f5 0b       	sbc	r31, r21
    2314:	a1 e0       	ldi	r26, 0x01	; 1
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	ac 0f       	add	r26, r28
    231a:	bd 1f       	adc	r27, r29
    231c:	ea 0f       	add	r30, r26
    231e:	fb 1f       	adc	r31, r27
    2320:	8e e2       	ldi	r24, 0x2E	; 46
    2322:	a8 2e       	mov	r10, r24
    2324:	4b 01       	movw	r8, r22
    2326:	80 1a       	sub	r8, r16
    2328:	91 08       	sbc	r9, r1
    232a:	0b 2d       	mov	r16, r11
    232c:	10 e0       	ldi	r17, 0x00	; 0
    232e:	11 95       	neg	r17
    2330:	01 95       	neg	r16
    2332:	11 09       	sbc	r17, r1
    2334:	4f 3f       	cpi	r20, 0xFF	; 255
    2336:	bf ef       	ldi	r27, 0xFF	; 255
    2338:	5b 07       	cpc	r21, r27
    233a:	21 f4       	brne	.+8      	; 0x2344 <dtoa_prf+0x24c>
    233c:	d6 01       	movw	r26, r12
    233e:	ac 92       	st	X, r10
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	6d 01       	movw	r12, r26
    2344:	64 17       	cp	r22, r20
    2346:	75 07       	cpc	r23, r21
    2348:	2c f0       	brlt	.+10     	; 0x2354 <dtoa_prf+0x25c>
    234a:	84 16       	cp	r8, r20
    234c:	95 06       	cpc	r9, r21
    234e:	14 f4       	brge	.+4      	; 0x2354 <dtoa_prf+0x25c>
    2350:	81 81       	ldd	r24, Z+1	; 0x01
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <dtoa_prf+0x25e>
    2354:	80 e3       	ldi	r24, 0x30	; 48
    2356:	41 50       	subi	r20, 0x01	; 1
    2358:	51 09       	sbc	r21, r1
    235a:	31 96       	adiw	r30, 0x01	; 1
    235c:	d6 01       	movw	r26, r12
    235e:	11 96       	adiw	r26, 0x01	; 1
    2360:	7d 01       	movw	r14, r26
    2362:	40 17       	cp	r20, r16
    2364:	51 07       	cpc	r21, r17
    2366:	24 f0       	brlt	.+8      	; 0x2370 <dtoa_prf+0x278>
    2368:	d6 01       	movw	r26, r12
    236a:	8c 93       	st	X, r24
    236c:	67 01       	movw	r12, r14
    236e:	e2 cf       	rjmp	.-60     	; 0x2334 <dtoa_prf+0x23c>
    2370:	64 17       	cp	r22, r20
    2372:	75 07       	cpc	r23, r21
    2374:	39 f4       	brne	.+14     	; 0x2384 <dtoa_prf+0x28c>
    2376:	96 33       	cpi	r25, 0x36	; 54
    2378:	20 f4       	brcc	.+8      	; 0x2382 <dtoa_prf+0x28a>
    237a:	95 33       	cpi	r25, 0x35	; 53
    237c:	19 f4       	brne	.+6      	; 0x2384 <dtoa_prf+0x28c>
    237e:	31 11       	cpse	r19, r1
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <dtoa_prf+0x28c>
    2382:	81 e3       	ldi	r24, 0x31	; 49
    2384:	f6 01       	movw	r30, r12
    2386:	80 83       	st	Z, r24
    2388:	f7 01       	movw	r30, r14
    238a:	82 2f       	mov	r24, r18
    238c:	90 e2       	ldi	r25, 0x20	; 32
    238e:	88 23       	and	r24, r24
    2390:	19 f0       	breq	.+6      	; 0x2398 <dtoa_prf+0x2a0>
    2392:	91 93       	st	Z+, r25
    2394:	81 50       	subi	r24, 0x01	; 1
    2396:	fb cf       	rjmp	.-10     	; 0x238e <dtoa_prf+0x296>
    2398:	f7 01       	movw	r30, r14
    239a:	e2 0f       	add	r30, r18
    239c:	f1 1d       	adc	r31, r1
    239e:	10 82       	st	Z, r1
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	29 96       	adiw	r28, 0x09	; 9
    23a6:	ec e0       	ldi	r30, 0x0C	; 12
    23a8:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__+0xc>

000023ac <__ftoa_engine>:
    23ac:	28 30       	cpi	r18, 0x08	; 8
    23ae:	08 f0       	brcs	.+2      	; 0x23b2 <__ftoa_engine+0x6>
    23b0:	27 e0       	ldi	r18, 0x07	; 7
    23b2:	33 27       	eor	r19, r19
    23b4:	da 01       	movw	r26, r20
    23b6:	99 0f       	add	r25, r25
    23b8:	31 1d       	adc	r19, r1
    23ba:	87 fd       	sbrc	r24, 7
    23bc:	91 60       	ori	r25, 0x01	; 1
    23be:	00 96       	adiw	r24, 0x00	; 0
    23c0:	61 05       	cpc	r22, r1
    23c2:	71 05       	cpc	r23, r1
    23c4:	39 f4       	brne	.+14     	; 0x23d4 <__ftoa_engine+0x28>
    23c6:	32 60       	ori	r19, 0x02	; 2
    23c8:	2e 5f       	subi	r18, 0xFE	; 254
    23ca:	3d 93       	st	X+, r19
    23cc:	30 e3       	ldi	r19, 0x30	; 48
    23ce:	2a 95       	dec	r18
    23d0:	e1 f7       	brne	.-8      	; 0x23ca <__ftoa_engine+0x1e>
    23d2:	08 95       	ret
    23d4:	9f 3f       	cpi	r25, 0xFF	; 255
    23d6:	30 f0       	brcs	.+12     	; 0x23e4 <__ftoa_engine+0x38>
    23d8:	80 38       	cpi	r24, 0x80	; 128
    23da:	71 05       	cpc	r23, r1
    23dc:	61 05       	cpc	r22, r1
    23de:	09 f0       	breq	.+2      	; 0x23e2 <__ftoa_engine+0x36>
    23e0:	3c 5f       	subi	r19, 0xFC	; 252
    23e2:	3c 5f       	subi	r19, 0xFC	; 252
    23e4:	3d 93       	st	X+, r19
    23e6:	91 30       	cpi	r25, 0x01	; 1
    23e8:	08 f0       	brcs	.+2      	; 0x23ec <__ftoa_engine+0x40>
    23ea:	80 68       	ori	r24, 0x80	; 128
    23ec:	91 1d       	adc	r25, r1
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	1f 93       	push	r17
    23f4:	0f 93       	push	r16
    23f6:	ff 92       	push	r15
    23f8:	ef 92       	push	r14
    23fa:	19 2f       	mov	r17, r25
    23fc:	98 7f       	andi	r25, 0xF8	; 248
    23fe:	96 95       	lsr	r25
    2400:	e9 2f       	mov	r30, r25
    2402:	96 95       	lsr	r25
    2404:	96 95       	lsr	r25
    2406:	e9 0f       	add	r30, r25
    2408:	ff 27       	eor	r31, r31
    240a:	ee 53       	subi	r30, 0x3E	; 62
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	99 27       	eor	r25, r25
    2410:	33 27       	eor	r19, r19
    2412:	ee 24       	eor	r14, r14
    2414:	ff 24       	eor	r15, r15
    2416:	a7 01       	movw	r20, r14
    2418:	e7 01       	movw	r28, r14
    241a:	05 90       	lpm	r0, Z+
    241c:	08 94       	sec
    241e:	07 94       	ror	r0
    2420:	28 f4       	brcc	.+10     	; 0x242c <__ftoa_engine+0x80>
    2422:	36 0f       	add	r19, r22
    2424:	e7 1e       	adc	r14, r23
    2426:	f8 1e       	adc	r15, r24
    2428:	49 1f       	adc	r20, r25
    242a:	51 1d       	adc	r21, r1
    242c:	66 0f       	add	r22, r22
    242e:	77 1f       	adc	r23, r23
    2430:	88 1f       	adc	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	06 94       	lsr	r0
    2436:	a1 f7       	brne	.-24     	; 0x2420 <__ftoa_engine+0x74>
    2438:	05 90       	lpm	r0, Z+
    243a:	07 94       	ror	r0
    243c:	28 f4       	brcc	.+10     	; 0x2448 <__ftoa_engine+0x9c>
    243e:	e7 0e       	add	r14, r23
    2440:	f8 1e       	adc	r15, r24
    2442:	49 1f       	adc	r20, r25
    2444:	56 1f       	adc	r21, r22
    2446:	c1 1d       	adc	r28, r1
    2448:	77 0f       	add	r23, r23
    244a:	88 1f       	adc	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	66 1f       	adc	r22, r22
    2450:	06 94       	lsr	r0
    2452:	a1 f7       	brne	.-24     	; 0x243c <__ftoa_engine+0x90>
    2454:	05 90       	lpm	r0, Z+
    2456:	07 94       	ror	r0
    2458:	28 f4       	brcc	.+10     	; 0x2464 <__ftoa_engine+0xb8>
    245a:	f8 0e       	add	r15, r24
    245c:	49 1f       	adc	r20, r25
    245e:	56 1f       	adc	r21, r22
    2460:	c7 1f       	adc	r28, r23
    2462:	d1 1d       	adc	r29, r1
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	66 1f       	adc	r22, r22
    246a:	77 1f       	adc	r23, r23
    246c:	06 94       	lsr	r0
    246e:	a1 f7       	brne	.-24     	; 0x2458 <__ftoa_engine+0xac>
    2470:	05 90       	lpm	r0, Z+
    2472:	07 94       	ror	r0
    2474:	20 f4       	brcc	.+8      	; 0x247e <__ftoa_engine+0xd2>
    2476:	49 0f       	add	r20, r25
    2478:	56 1f       	adc	r21, r22
    247a:	c7 1f       	adc	r28, r23
    247c:	d8 1f       	adc	r29, r24
    247e:	99 0f       	add	r25, r25
    2480:	66 1f       	adc	r22, r22
    2482:	77 1f       	adc	r23, r23
    2484:	88 1f       	adc	r24, r24
    2486:	06 94       	lsr	r0
    2488:	a9 f7       	brne	.-22     	; 0x2474 <__ftoa_engine+0xc8>
    248a:	84 91       	lpm	r24, Z
    248c:	10 95       	com	r17
    248e:	17 70       	andi	r17, 0x07	; 7
    2490:	41 f0       	breq	.+16     	; 0x24a2 <__ftoa_engine+0xf6>
    2492:	d6 95       	lsr	r29
    2494:	c7 95       	ror	r28
    2496:	57 95       	ror	r21
    2498:	47 95       	ror	r20
    249a:	f7 94       	ror	r15
    249c:	e7 94       	ror	r14
    249e:	1a 95       	dec	r17
    24a0:	c1 f7       	brne	.-16     	; 0x2492 <__ftoa_engine+0xe6>
    24a2:	e8 e6       	ldi	r30, 0x68	; 104
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	68 94       	set
    24a8:	15 90       	lpm	r1, Z+
    24aa:	15 91       	lpm	r17, Z+
    24ac:	35 91       	lpm	r19, Z+
    24ae:	65 91       	lpm	r22, Z+
    24b0:	95 91       	lpm	r25, Z+
    24b2:	05 90       	lpm	r0, Z+
    24b4:	7f e2       	ldi	r23, 0x2F	; 47
    24b6:	73 95       	inc	r23
    24b8:	e1 18       	sub	r14, r1
    24ba:	f1 0a       	sbc	r15, r17
    24bc:	43 0b       	sbc	r20, r19
    24be:	56 0b       	sbc	r21, r22
    24c0:	c9 0b       	sbc	r28, r25
    24c2:	d0 09       	sbc	r29, r0
    24c4:	c0 f7       	brcc	.-16     	; 0x24b6 <__ftoa_engine+0x10a>
    24c6:	e1 0c       	add	r14, r1
    24c8:	f1 1e       	adc	r15, r17
    24ca:	43 1f       	adc	r20, r19
    24cc:	56 1f       	adc	r21, r22
    24ce:	c9 1f       	adc	r28, r25
    24d0:	d0 1d       	adc	r29, r0
    24d2:	7e f4       	brtc	.+30     	; 0x24f2 <__ftoa_engine+0x146>
    24d4:	70 33       	cpi	r23, 0x30	; 48
    24d6:	11 f4       	brne	.+4      	; 0x24dc <__ftoa_engine+0x130>
    24d8:	8a 95       	dec	r24
    24da:	e6 cf       	rjmp	.-52     	; 0x24a8 <__ftoa_engine+0xfc>
    24dc:	e8 94       	clt
    24de:	01 50       	subi	r16, 0x01	; 1
    24e0:	30 f0       	brcs	.+12     	; 0x24ee <__ftoa_engine+0x142>
    24e2:	08 0f       	add	r16, r24
    24e4:	0a f4       	brpl	.+2      	; 0x24e8 <__ftoa_engine+0x13c>
    24e6:	00 27       	eor	r16, r16
    24e8:	02 17       	cp	r16, r18
    24ea:	08 f4       	brcc	.+2      	; 0x24ee <__ftoa_engine+0x142>
    24ec:	20 2f       	mov	r18, r16
    24ee:	23 95       	inc	r18
    24f0:	02 2f       	mov	r16, r18
    24f2:	7a 33       	cpi	r23, 0x3A	; 58
    24f4:	28 f0       	brcs	.+10     	; 0x2500 <__ftoa_engine+0x154>
    24f6:	79 e3       	ldi	r23, 0x39	; 57
    24f8:	7d 93       	st	X+, r23
    24fa:	2a 95       	dec	r18
    24fc:	e9 f7       	brne	.-6      	; 0x24f8 <__ftoa_engine+0x14c>
    24fe:	10 c0       	rjmp	.+32     	; 0x2520 <__ftoa_engine+0x174>
    2500:	7d 93       	st	X+, r23
    2502:	2a 95       	dec	r18
    2504:	89 f6       	brne	.-94     	; 0x24a8 <__ftoa_engine+0xfc>
    2506:	06 94       	lsr	r0
    2508:	97 95       	ror	r25
    250a:	67 95       	ror	r22
    250c:	37 95       	ror	r19
    250e:	17 95       	ror	r17
    2510:	17 94       	ror	r1
    2512:	e1 18       	sub	r14, r1
    2514:	f1 0a       	sbc	r15, r17
    2516:	43 0b       	sbc	r20, r19
    2518:	56 0b       	sbc	r21, r22
    251a:	c9 0b       	sbc	r28, r25
    251c:	d0 09       	sbc	r29, r0
    251e:	98 f0       	brcs	.+38     	; 0x2546 <__ftoa_engine+0x19a>
    2520:	23 95       	inc	r18
    2522:	7e 91       	ld	r23, -X
    2524:	73 95       	inc	r23
    2526:	7a 33       	cpi	r23, 0x3A	; 58
    2528:	08 f0       	brcs	.+2      	; 0x252c <__ftoa_engine+0x180>
    252a:	70 e3       	ldi	r23, 0x30	; 48
    252c:	7c 93       	st	X, r23
    252e:	20 13       	cpse	r18, r16
    2530:	b8 f7       	brcc	.-18     	; 0x2520 <__ftoa_engine+0x174>
    2532:	7e 91       	ld	r23, -X
    2534:	70 61       	ori	r23, 0x10	; 16
    2536:	7d 93       	st	X+, r23
    2538:	30 f0       	brcs	.+12     	; 0x2546 <__ftoa_engine+0x19a>
    253a:	83 95       	inc	r24
    253c:	71 e3       	ldi	r23, 0x31	; 49
    253e:	7d 93       	st	X+, r23
    2540:	70 e3       	ldi	r23, 0x30	; 48
    2542:	2a 95       	dec	r18
    2544:	e1 f7       	brne	.-8      	; 0x253e <__ftoa_engine+0x192>
    2546:	11 24       	eor	r1, r1
    2548:	ef 90       	pop	r14
    254a:	ff 90       	pop	r15
    254c:	0f 91       	pop	r16
    254e:	1f 91       	pop	r17
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	99 27       	eor	r25, r25
    2556:	87 fd       	sbrc	r24, 7
    2558:	90 95       	com	r25
    255a:	08 95       	ret

0000255c <strnlen_P>:
    255c:	fc 01       	movw	r30, r24
    255e:	05 90       	lpm	r0, Z+
    2560:	61 50       	subi	r22, 0x01	; 1
    2562:	70 40       	sbci	r23, 0x00	; 0
    2564:	01 10       	cpse	r0, r1
    2566:	d8 f7       	brcc	.-10     	; 0x255e <strnlen_P+0x2>
    2568:	80 95       	com	r24
    256a:	90 95       	com	r25
    256c:	8e 0f       	add	r24, r30
    256e:	9f 1f       	adc	r25, r31
    2570:	08 95       	ret

00002572 <strnlen>:
    2572:	fc 01       	movw	r30, r24
    2574:	61 50       	subi	r22, 0x01	; 1
    2576:	70 40       	sbci	r23, 0x00	; 0
    2578:	01 90       	ld	r0, Z+
    257a:	01 10       	cpse	r0, r1
    257c:	d8 f7       	brcc	.-10     	; 0x2574 <strnlen+0x2>
    257e:	80 95       	com	r24
    2580:	90 95       	com	r25
    2582:	8e 0f       	add	r24, r30
    2584:	9f 1f       	adc	r25, r31
    2586:	08 95       	ret

00002588 <fputc>:
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	fb 01       	movw	r30, r22
    2592:	23 81       	ldd	r18, Z+3	; 0x03
    2594:	21 fd       	sbrc	r18, 1
    2596:	03 c0       	rjmp	.+6      	; 0x259e <fputc+0x16>
    2598:	8f ef       	ldi	r24, 0xFF	; 255
    259a:	9f ef       	ldi	r25, 0xFF	; 255
    259c:	2c c0       	rjmp	.+88     	; 0x25f6 <fputc+0x6e>
    259e:	22 ff       	sbrs	r18, 2
    25a0:	16 c0       	rjmp	.+44     	; 0x25ce <fputc+0x46>
    25a2:	46 81       	ldd	r20, Z+6	; 0x06
    25a4:	57 81       	ldd	r21, Z+7	; 0x07
    25a6:	24 81       	ldd	r18, Z+4	; 0x04
    25a8:	35 81       	ldd	r19, Z+5	; 0x05
    25aa:	42 17       	cp	r20, r18
    25ac:	53 07       	cpc	r21, r19
    25ae:	44 f4       	brge	.+16     	; 0x25c0 <fputc+0x38>
    25b0:	a0 81       	ld	r26, Z
    25b2:	b1 81       	ldd	r27, Z+1	; 0x01
    25b4:	9d 01       	movw	r18, r26
    25b6:	2f 5f       	subi	r18, 0xFF	; 255
    25b8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ba:	31 83       	std	Z+1, r19	; 0x01
    25bc:	20 83       	st	Z, r18
    25be:	8c 93       	st	X, r24
    25c0:	26 81       	ldd	r18, Z+6	; 0x06
    25c2:	37 81       	ldd	r19, Z+7	; 0x07
    25c4:	2f 5f       	subi	r18, 0xFF	; 255
    25c6:	3f 4f       	sbci	r19, 0xFF	; 255
    25c8:	37 83       	std	Z+7, r19	; 0x07
    25ca:	26 83       	std	Z+6, r18	; 0x06
    25cc:	14 c0       	rjmp	.+40     	; 0x25f6 <fputc+0x6e>
    25ce:	8b 01       	movw	r16, r22
    25d0:	ec 01       	movw	r28, r24
    25d2:	fb 01       	movw	r30, r22
    25d4:	00 84       	ldd	r0, Z+8	; 0x08
    25d6:	f1 85       	ldd	r31, Z+9	; 0x09
    25d8:	e0 2d       	mov	r30, r0
    25da:	09 95       	icall
    25dc:	89 2b       	or	r24, r25
    25de:	e1 f6       	brne	.-72     	; 0x2598 <fputc+0x10>
    25e0:	d8 01       	movw	r26, r16
    25e2:	16 96       	adiw	r26, 0x06	; 6
    25e4:	8d 91       	ld	r24, X+
    25e6:	9c 91       	ld	r25, X
    25e8:	17 97       	sbiw	r26, 0x07	; 7
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	17 96       	adiw	r26, 0x07	; 7
    25ee:	9c 93       	st	X, r25
    25f0:	8e 93       	st	-X, r24
    25f2:	16 97       	sbiw	r26, 0x06	; 6
    25f4:	ce 01       	movw	r24, r28
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	08 95       	ret

00002600 <__ultoa_invert>:
    2600:	fa 01       	movw	r30, r20
    2602:	aa 27       	eor	r26, r26
    2604:	28 30       	cpi	r18, 0x08	; 8
    2606:	51 f1       	breq	.+84     	; 0x265c <__ultoa_invert+0x5c>
    2608:	20 31       	cpi	r18, 0x10	; 16
    260a:	81 f1       	breq	.+96     	; 0x266c <__ultoa_invert+0x6c>
    260c:	e8 94       	clt
    260e:	6f 93       	push	r22
    2610:	6e 7f       	andi	r22, 0xFE	; 254
    2612:	6e 5f       	subi	r22, 0xFE	; 254
    2614:	7f 4f       	sbci	r23, 0xFF	; 255
    2616:	8f 4f       	sbci	r24, 0xFF	; 255
    2618:	9f 4f       	sbci	r25, 0xFF	; 255
    261a:	af 4f       	sbci	r26, 0xFF	; 255
    261c:	b1 e0       	ldi	r27, 0x01	; 1
    261e:	3e d0       	rcall	.+124    	; 0x269c <__ultoa_invert+0x9c>
    2620:	b4 e0       	ldi	r27, 0x04	; 4
    2622:	3c d0       	rcall	.+120    	; 0x269c <__ultoa_invert+0x9c>
    2624:	67 0f       	add	r22, r23
    2626:	78 1f       	adc	r23, r24
    2628:	89 1f       	adc	r24, r25
    262a:	9a 1f       	adc	r25, r26
    262c:	a1 1d       	adc	r26, r1
    262e:	68 0f       	add	r22, r24
    2630:	79 1f       	adc	r23, r25
    2632:	8a 1f       	adc	r24, r26
    2634:	91 1d       	adc	r25, r1
    2636:	a1 1d       	adc	r26, r1
    2638:	6a 0f       	add	r22, r26
    263a:	71 1d       	adc	r23, r1
    263c:	81 1d       	adc	r24, r1
    263e:	91 1d       	adc	r25, r1
    2640:	a1 1d       	adc	r26, r1
    2642:	20 d0       	rcall	.+64     	; 0x2684 <__ultoa_invert+0x84>
    2644:	09 f4       	brne	.+2      	; 0x2648 <__ultoa_invert+0x48>
    2646:	68 94       	set
    2648:	3f 91       	pop	r19
    264a:	2a e0       	ldi	r18, 0x0A	; 10
    264c:	26 9f       	mul	r18, r22
    264e:	11 24       	eor	r1, r1
    2650:	30 19       	sub	r19, r0
    2652:	30 5d       	subi	r19, 0xD0	; 208
    2654:	31 93       	st	Z+, r19
    2656:	de f6       	brtc	.-74     	; 0x260e <__ultoa_invert+0xe>
    2658:	cf 01       	movw	r24, r30
    265a:	08 95       	ret
    265c:	46 2f       	mov	r20, r22
    265e:	47 70       	andi	r20, 0x07	; 7
    2660:	40 5d       	subi	r20, 0xD0	; 208
    2662:	41 93       	st	Z+, r20
    2664:	b3 e0       	ldi	r27, 0x03	; 3
    2666:	0f d0       	rcall	.+30     	; 0x2686 <__ultoa_invert+0x86>
    2668:	c9 f7       	brne	.-14     	; 0x265c <__ultoa_invert+0x5c>
    266a:	f6 cf       	rjmp	.-20     	; 0x2658 <__ultoa_invert+0x58>
    266c:	46 2f       	mov	r20, r22
    266e:	4f 70       	andi	r20, 0x0F	; 15
    2670:	40 5d       	subi	r20, 0xD0	; 208
    2672:	4a 33       	cpi	r20, 0x3A	; 58
    2674:	18 f0       	brcs	.+6      	; 0x267c <__ultoa_invert+0x7c>
    2676:	49 5d       	subi	r20, 0xD9	; 217
    2678:	31 fd       	sbrc	r19, 1
    267a:	40 52       	subi	r20, 0x20	; 32
    267c:	41 93       	st	Z+, r20
    267e:	02 d0       	rcall	.+4      	; 0x2684 <__ultoa_invert+0x84>
    2680:	a9 f7       	brne	.-22     	; 0x266c <__ultoa_invert+0x6c>
    2682:	ea cf       	rjmp	.-44     	; 0x2658 <__ultoa_invert+0x58>
    2684:	b4 e0       	ldi	r27, 0x04	; 4
    2686:	a6 95       	lsr	r26
    2688:	97 95       	ror	r25
    268a:	87 95       	ror	r24
    268c:	77 95       	ror	r23
    268e:	67 95       	ror	r22
    2690:	ba 95       	dec	r27
    2692:	c9 f7       	brne	.-14     	; 0x2686 <__ultoa_invert+0x86>
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	61 05       	cpc	r22, r1
    2698:	71 05       	cpc	r23, r1
    269a:	08 95       	ret
    269c:	9b 01       	movw	r18, r22
    269e:	ac 01       	movw	r20, r24
    26a0:	0a 2e       	mov	r0, r26
    26a2:	06 94       	lsr	r0
    26a4:	57 95       	ror	r21
    26a6:	47 95       	ror	r20
    26a8:	37 95       	ror	r19
    26aa:	27 95       	ror	r18
    26ac:	ba 95       	dec	r27
    26ae:	c9 f7       	brne	.-14     	; 0x26a2 <__ultoa_invert+0xa2>
    26b0:	62 0f       	add	r22, r18
    26b2:	73 1f       	adc	r23, r19
    26b4:	84 1f       	adc	r24, r20
    26b6:	95 1f       	adc	r25, r21
    26b8:	a0 1d       	adc	r26, r0
    26ba:	08 95       	ret

000026bc <__prologue_saves__>:
    26bc:	2f 92       	push	r2
    26be:	3f 92       	push	r3
    26c0:	4f 92       	push	r4
    26c2:	5f 92       	push	r5
    26c4:	6f 92       	push	r6
    26c6:	7f 92       	push	r7
    26c8:	8f 92       	push	r8
    26ca:	9f 92       	push	r9
    26cc:	af 92       	push	r10
    26ce:	bf 92       	push	r11
    26d0:	cf 92       	push	r12
    26d2:	df 92       	push	r13
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	ca 1b       	sub	r28, r26
    26e6:	db 0b       	sbc	r29, r27
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	09 94       	ijmp

000026f4 <__epilogue_restores__>:
    26f4:	2a 88       	ldd	r2, Y+18	; 0x12
    26f6:	39 88       	ldd	r3, Y+17	; 0x11
    26f8:	48 88       	ldd	r4, Y+16	; 0x10
    26fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    26fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    26fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2700:	8c 84       	ldd	r8, Y+12	; 0x0c
    2702:	9b 84       	ldd	r9, Y+11	; 0x0b
    2704:	aa 84       	ldd	r10, Y+10	; 0x0a
    2706:	b9 84       	ldd	r11, Y+9	; 0x09
    2708:	c8 84       	ldd	r12, Y+8	; 0x08
    270a:	df 80       	ldd	r13, Y+7	; 0x07
    270c:	ee 80       	ldd	r14, Y+6	; 0x06
    270e:	fd 80       	ldd	r15, Y+5	; 0x05
    2710:	0c 81       	ldd	r16, Y+4	; 0x04
    2712:	1b 81       	ldd	r17, Y+3	; 0x03
    2714:	aa 81       	ldd	r26, Y+2	; 0x02
    2716:	b9 81       	ldd	r27, Y+1	; 0x01
    2718:	ce 0f       	add	r28, r30
    271a:	d1 1d       	adc	r29, r1
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	ed 01       	movw	r28, r26
    2728:	08 95       	ret

0000272a <_exit>:
    272a:	f8 94       	cli

0000272c <__stop_program>:
    272c:	ff cf       	rjmp	.-2      	; 0x272c <__stop_program>
