
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  0000123c  000012d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000123c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080015e  0080015e  0000132e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000132e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000290b  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e98  00000000  00000000  00003f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015a3  00000000  00000000  00004dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  00006364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ab  00000000  00000000  000068dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c72  00000000  00000000  00007287  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00008ef9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_20>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e3       	ldi	r30, 0x3C	; 60
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 35       	cpi	r26, 0x5E	; 94
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e5       	ldi	r26, 0x5E	; 94
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 37       	cpi	r26, 0x7A	; 122
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 38 02 	call	0x470	; 0x470 <main>
      9e:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
      a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
      a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
      ac:	80 ec       	ldi	r24, 0xC0	; 192
      ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
      b2:	8e ee       	ldi	r24, 0xEE	; 238
      b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
      b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
      bc:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
      c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
      c2:	1f 92       	push	r1
      c4:	0f 92       	push	r0
      c6:	0f b6       	in	r0, 0x3f	; 63
      c8:	0f 92       	push	r0
      ca:	11 24       	eor	r1, r1
      cc:	8f 93       	push	r24
      ce:	9f 93       	push	r25
      d0:	ef 93       	push	r30
      d2:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
      d4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
      d8:	81 11       	cpse	r24, r1
      da:	09 c0       	rjmp	.+18     	; 0xee <__vector_21+0x2c>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
      dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      e4:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <mereni_napon+0x1>
      e8:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <mereni_napon>
      ec:	0c c0       	rjmp	.+24     	; 0x106 <__vector_21+0x44>
	else if(ad_kanal == 1)
      ee:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	41 f4       	brne	.+16     	; 0x106 <__vector_21+0x44>
		merena_struja = (uint16_t)ADC;
      f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      fe:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <merena_struja+0x1>
     102:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     106:	ea e7       	ldi	r30, 0x7A	; 122
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
     110:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     114:	8f 5f       	subi	r24, 0xFF	; 255
     116:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     11a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	10 f0       	brcs	.+4      	; 0x126 <__vector_21+0x64>
		ad_kanal = 0;
     122:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
     126:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     12a:	88 23       	and	r24, r24
     12c:	19 f0       	breq	.+6      	; 0x134 <__vector_21+0x72>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	39 f0       	breq	.+14     	; 0x140 <__vector_21+0x7e>
     132:	0e c0       	rjmp	.+28     	; 0x150 <__vector_21+0x8e>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     134:	ec e7       	ldi	r30, 0x7C	; 124
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	8c 7f       	andi	r24, 0xFC	; 252
     13c:	80 83       	st	Z, r24
		break;
     13e:	08 c0       	rjmp	.+16     	; 0x150 <__vector_21+0x8e>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     140:	ec e7       	ldi	r30, 0x7C	; 124
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	8d 7f       	andi	r24, 0xFD	; 253
     148:	80 83       	st	Z, r24
				ADMUX |= (0b1);
     14a:	80 81       	ld	r24, Z
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     150:	ea e7       	ldi	r30, 0x7A	; 122
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 6c       	ori	r24, 0xC0	; 192
     158:	80 83       	st	Z, r24
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us


}
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	9f 91       	pop	r25
     160:	8f 91       	pop	r24
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     16c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     170:	88 e4       	ldi	r24, 0x48	; 72
     172:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     176:	08 95       	ret

00000178 <i2c_start_wait>:
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	ec eb       	ldi	r30, 0xBC	; 188
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	24 ea       	ldi	r18, 0xA4	; 164
     182:	a9 eb       	ldi	r26, 0xB9	; 185
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	cb eb       	ldi	r28, 0xBB	; 187
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	34 e8       	ldi	r19, 0x84	; 132
     18c:	44 e9       	ldi	r20, 0x94	; 148
     18e:	20 83       	st	Z, r18
     190:	90 81       	ld	r25, Z
     192:	99 23       	and	r25, r25
     194:	ec f7       	brge	.-6      	; 0x190 <i2c_start_wait+0x18>
     196:	9c 91       	ld	r25, X
     198:	98 7f       	andi	r25, 0xF8	; 248
     19a:	98 30       	cpi	r25, 0x08	; 8
     19c:	11 f0       	breq	.+4      	; 0x1a2 <i2c_start_wait+0x2a>
     19e:	90 31       	cpi	r25, 0x10	; 16
     1a0:	b1 f7       	brne	.-20     	; 0x18e <i2c_start_wait+0x16>
     1a2:	88 83       	st	Y, r24
     1a4:	30 83       	st	Z, r19
     1a6:	90 81       	ld	r25, Z
     1a8:	99 23       	and	r25, r25
     1aa:	ec f7       	brge	.-6      	; 0x1a6 <i2c_start_wait+0x2e>
     1ac:	9c 91       	ld	r25, X
     1ae:	98 7f       	andi	r25, 0xF8	; 248
     1b0:	90 32       	cpi	r25, 0x20	; 32
     1b2:	11 f0       	breq	.+4      	; 0x1b8 <i2c_start_wait+0x40>
     1b4:	98 35       	cpi	r25, 0x58	; 88
     1b6:	29 f4       	brne	.+10     	; 0x1c2 <i2c_start_wait+0x4a>
     1b8:	40 83       	st	Z, r20
     1ba:	90 81       	ld	r25, Z
     1bc:	94 fd       	sbrc	r25, 4
     1be:	fd cf       	rjmp	.-6      	; 0x1ba <i2c_start_wait+0x42>
     1c0:	e6 cf       	rjmp	.-52     	; 0x18e <i2c_start_wait+0x16>
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <i2c_stop>:
     1c8:	84 e9       	ldi	r24, 0x94	; 148
     1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1ce:	ec eb       	ldi	r30, 0xBC	; 188
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	84 fd       	sbrc	r24, 4
     1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <i2c_stop+0xa>
     1d8:	08 95       	ret

000001da <i2c_write>:
     1da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1de:	84 e8       	ldi	r24, 0x84	; 132
     1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1e4:	ec eb       	ldi	r30, 0xBC	; 188
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	88 23       	and	r24, r24
     1ec:	ec f7       	brge	.-6      	; 0x1e8 <i2c_write+0xe>
     1ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1f2:	98 7f       	andi	r25, 0xF8	; 248
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	98 32       	cpi	r25, 0x28	; 40
     1f8:	09 f4       	brne	.+2      	; 0x1fc <i2c_write+0x22>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	08 95       	ret

000001fe <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1fe:	84 e8       	ldi	r24, 0x84	; 132
     200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     204:	ec eb       	ldi	r30, 0xBC	; 188
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	88 23       	and	r24, r24
     20c:	ec f7       	brge	.-6      	; 0x208 <i2c_readNak+0xa>
	
    return TWDR;
     20e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     212:	08 95       	ret

00000214 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     214:	cf 93       	push	r28
     216:	c8 2f       	mov	r28, r24
     218:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     21a:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
	i2c_write(value);                      // write 
     21e:	8c 2f       	mov	r24, r28
     220:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     224:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_stop>
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	cf 93       	push	r28
     22e:	c8 2f       	mov	r28, r24
     230:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <led_pin>
     234:	84 60       	ori	r24, 0x04	; 4
     236:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <led_pin>
     23a:	6e e4       	ldi	r22, 0x4E	; 78
     23c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     240:	87 ec       	ldi	r24, 0xC7	; 199
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <putnibble+0x18>
     248:	00 c0       	rjmp	.+0      	; 0x24a <putnibble+0x1e>
     24a:	00 00       	nop
     24c:	c2 95       	swap	r28
     24e:	c0 7f       	andi	r28, 0xF0	; 240
     250:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <led_pin>
     254:	6e e4       	ldi	r22, 0x4E	; 78
     256:	8c 2b       	or	r24, r28
     258:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     25c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <led_pin>
     260:	8b 7f       	andi	r24, 0xFB	; 251
     262:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <led_pin>
     266:	6e e4       	ldi	r22, 0x4E	; 78
     268:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     26c:	87 ec       	ldi	r24, 0xC7	; 199
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <putnibble+0x44>
     274:	00 c0       	rjmp	.+0      	; 0x276 <putnibble+0x4a>
     276:	00 00       	nop
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <lcd1602_send_byte>:
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	c8 2f       	mov	r28, r24
     282:	d8 2f       	mov	r29, r24
     284:	d2 95       	swap	r29
     286:	df 70       	andi	r29, 0x0F	; 15
     288:	61 11       	cpse	r22, r1
     28a:	09 c0       	rjmp	.+18     	; 0x29e <lcd1602_send_byte+0x22>
     28c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <led_pin>
     290:	8e 7f       	andi	r24, 0xFE	; 254
     292:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <led_pin>
     296:	6e e4       	ldi	r22, 0x4E	; 78
     298:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <lcd1602_send_byte+0x32>
     29e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <led_pin>
     2a2:	81 60       	ori	r24, 0x01	; 1
     2a4:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <led_pin>
     2a8:	6e e4       	ldi	r22, 0x4E	; 78
     2aa:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     2ae:	8d 2f       	mov	r24, r29
     2b0:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2b4:	8c 2f       	mov	r24, r28
     2b6:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <lcd1602_send_char>:
     2c0:	cf 93       	push	r28
     2c2:	c8 2f       	mov	r28, r24
     2c4:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <led_pin>
     2c8:	81 60       	ori	r24, 0x01	; 1
     2ca:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <led_pin>
     2ce:	6e e4       	ldi	r22, 0x4E	; 78
     2d0:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     2d4:	8c 2f       	mov	r24, r28
     2d6:	82 95       	swap	r24
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2de:	8c 2f       	mov	r24, r28
     2e0:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <lcd1602_init>:
     2e8:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <led_pin>
     2ec:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_init>
     2f0:	8f e5       	ldi	r24, 0x5F	; 95
     2f2:	9a ee       	ldi	r25, 0xEA	; 234
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd1602_init+0xc>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd1602_init+0x12>
     2fa:	00 00       	nop
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     302:	8f e7       	ldi	r24, 0x7F	; 127
     304:	9e e3       	ldi	r25, 0x3E	; 62
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd1602_init+0x1e>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd1602_init+0x24>
     30c:	00 00       	nop
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     314:	8f e8       	ldi	r24, 0x8F	; 143
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <lcd1602_init+0x30>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd1602_init+0x36>
     31e:	00 00       	nop
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     326:	8f e9       	ldi	r24, 0x9F	; 159
     328:	9f e0       	ldi	r25, 0x0F	; 15
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <lcd1602_init+0x42>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <lcd1602_init+0x48>
     330:	00 00       	nop
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     338:	8f e9       	ldi	r24, 0x9F	; 159
     33a:	9f e0       	ldi	r25, 0x0F	; 15
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <lcd1602_init+0x54>
     340:	00 c0       	rjmp	.+0      	; 0x342 <lcd1602_init+0x5a>
     342:	00 00       	nop
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	88 e2       	ldi	r24, 0x28	; 40
     348:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     34c:	8f e9       	ldi	r24, 0x9F	; 159
     34e:	9f e0       	ldi	r25, 0x0F	; 15
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <lcd1602_init+0x68>
     354:	00 c0       	rjmp	.+0      	; 0x356 <lcd1602_init+0x6e>
     356:	00 00       	nop
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	8c e0       	ldi	r24, 0x0C	; 12
     35c:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     360:	8f e9       	ldi	r24, 0x9F	; 159
     362:	9f e0       	ldi	r25, 0x0F	; 15
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd1602_init+0x7c>
     368:	00 c0       	rjmp	.+0      	; 0x36a <lcd1602_init+0x82>
     36a:	00 00       	nop
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     374:	8f e9       	ldi	r24, 0x9F	; 159
     376:	9f e0       	ldi	r25, 0x0F	; 15
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <lcd1602_init+0x90>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <lcd1602_init+0x96>
     37e:	00 00       	nop
     380:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <led_pin>
     384:	88 60       	ori	r24, 0x08	; 8
     386:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <led_pin>
     38a:	6e e4       	ldi	r22, 0x4E	; 78
     38c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     390:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <led_pin>
     394:	8d 7f       	andi	r24, 0xFD	; 253
     396:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <led_pin>
     39a:	6e e4       	ldi	r22, 0x4E	; 78
     39c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     3a0:	08 95       	ret

000003a2 <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     3a2:	90 e4       	ldi	r25, 0x40	; 64
     3a4:	69 9f       	mul	r22, r25
     3a6:	80 0d       	add	r24, r0
     3a8:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     3b2:	08 95       	ret

000003b4 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     3bc:	80 81       	ld	r24, Z
     3be:	88 23       	and	r24, r24
     3c0:	59 f0       	breq	.+22     	; 0x3d8 <lcd1602_send_string+0x24>
     3c2:	8f 01       	movw	r16, r30
     3c4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     3c6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd1602_send_char>
		i++;
     3ca:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     3cc:	f8 01       	movw	r30, r16
     3ce:	ec 0f       	add	r30, r28
     3d0:	f1 1d       	adc	r31, r1
     3d2:	80 81       	ld	r24, Z
     3d4:	81 11       	cpse	r24, r1
     3d6:	f7 cf       	rjmp	.-18     	; 0x3c6 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     3e0:	88 23       	and	r24, r24
     3e2:	29 f0       	breq	.+10     	; 0x3ee <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	8f e0       	ldi	r24, 0x0F	; 15
     3e8:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     3ec:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	8c e0       	ldi	r24, 0x0C	; 12
     3f2:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     3f6:	08 95       	ret

000003f8 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     3f8:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     3fa:	dc 01       	movw	r26, r24
     3fc:	12 96       	adiw	r26, 0x02	; 2
     3fe:	2c 91       	ld	r18, X
     400:	12 97       	sbiw	r26, 0x02	; 2
     402:	54 e6       	ldi	r21, 0x64	; 100
     404:	11 96       	adiw	r26, 0x01	; 1
     406:	8c 91       	ld	r24, X
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	52 9f       	mul	r21, r18
     40c:	80 0d       	add	r24, r0
     40e:	91 1d       	adc	r25, r1
     410:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     412:	db 01       	movw	r26, r22
     414:	12 96       	adiw	r26, 0x02	; 2
     416:	2c 91       	ld	r18, X
     418:	12 97       	sbiw	r26, 0x02	; 2
     41a:	11 96       	adiw	r26, 0x01	; 1
     41c:	6c 91       	ld	r22, X
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	52 9f       	mul	r21, r18
     422:	60 0d       	add	r22, r0
     424:	71 1d       	adc	r23, r1
     426:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     428:	42 81       	ldd	r20, Z+2	; 0x02
     42a:	21 81       	ldd	r18, Z+1	; 0x01
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	54 9f       	mul	r21, r20
     430:	20 0d       	add	r18, r0
     432:	31 1d       	adc	r19, r1
     434:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fuli radi
     436:	86 17       	cp	r24, r22
     438:	97 07       	cpc	r25, r23
     43a:	68 f0       	brcs	.+26     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     43c:	28 17       	cp	r18, r24
     43e:	39 07       	cpc	r19, r25
     440:	20 f0       	brcs	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     442:	28 33       	cpi	r18, 0x38	; 56
     444:	b9 e0       	ldi	r27, 0x09	; 9
     446:	3b 07       	cpc	r19, r27
     448:	78 f0       	brcs	.+30     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	26 17       	cp	r18, r22
     44e:	37 07       	cpc	r19, r23
     450:	70 f0       	brcs	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     456:	28 17       	cp	r18, r24
     458:	39 07       	cpc	r19, r25
     45a:	40 f0       	brcs	.+16     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	26 17       	cp	r18, r22
     460:	37 07       	cpc	r19, r23
     462:	28 f0       	brcs	.+10     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     46c:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     46e:	08 95       	ret

00000470 <main>:

	return b;
}

int main(void)
{
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	af 97       	sbiw	r28, 0x2f	; 47
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
	Time_date vreme_datum;
	Time_date vreme_paljenja;
	Time_date vreme_gasenja;
	Time_date sanp_shot_vremena;	//za potrebe podesavanje vremena
	
	vreme_paljenja.hr = 23;
     484:	87 e1       	ldi	r24, 0x17	; 23
     486:	8c 87       	std	Y+12, r24	; 0x0c
	vreme_paljenja.min = 30;
     488:	8e e1       	ldi	r24, 0x1E	; 30
     48a:	8b 87       	std	Y+11, r24	; 0x0b
	vreme_gasenja.hr = 5;
     48c:	85 e0       	ldi	r24, 0x05	; 5
     48e:	8d 8b       	std	Y+21, r24	; 0x15
	vreme_gasenja.min = 40;
     490:	88 e2       	ldi	r24, 0x28	; 40
     492:	8c 8b       	std	Y+20, r24	; 0x14
	int8_t kursor = 0;
	uint8_t flag_pod_vremena = 1;
	uint8_t provera = 0;
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			////PD2-3 output
     494:	0e 94 91 05 	call	0xb22	; 0xb22 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
     498:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_init>
	lcd1602_init();
     49c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd1602_init>
	ADC_init();				
     4a0:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init();			//baud 9600
     4a4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <uart_init>
	DS3231_init();			//RTC init
     4a8:	0e 94 17 05 	call	0xa2e	; 0xa2e <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
     4ac:	0e 94 5d 04 	call	0x8ba	; 0x8ba <pc_init>
	tasteri_init();			//NAPOMENA: PD4-7 i PB0-1 INPUT, INT_PULLUP=ON
     4b0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
     4b4:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;
     4b6:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
     4b8:	78 94       	sei
	uint8_t tasteri = 0xFF;

	uint8_t STATE = DISPL1;
	int8_t kursor = 0;
	uint8_t flag_pod_vremena = 1;
	uint8_t provera = 0;
     4ba:	91 2c       	mov	r9, r1
	uint8_t ukljuceno = 0;  //0=OFF 1=ON
	uint8_t tasteri = 0xFF;

	uint8_t STATE = DISPL1;
	int8_t kursor = 0;
	uint8_t flag_pod_vremena = 1;
     4bc:	88 24       	eor	r8, r8
     4be:	83 94       	inc	r8
	char bafer[20];
	uint8_t ukljuceno = 0;  //0=OFF 1=ON
	uint8_t tasteri = 0xFF;

	uint8_t STATE = DISPL1;
	int8_t kursor = 0;
     4c0:	10 e0       	ldi	r17, 0x00	; 0
	
	char bafer[20];
	uint8_t ukljuceno = 0;  //0=OFF 1=ON
	uint8_t tasteri = 0xFF;

	uint8_t STATE = DISPL1;
     4c2:	b1 2c       	mov	r11, r1
			if (ukljuceno)
				PORTB |= 1<<PINB5;   //high
			else
				PORTB &= ~(1<<PINB5);	//low
				
			sprintf(bafer, "%d", provera);
     4c4:	7e 01       	movw	r14, r28
     4c6:	8c e1       	ldi	r24, 0x1C	; 28
     4c8:	e8 0e       	add	r14, r24
     4ca:	f1 1c       	adc	r15, r1
     4cc:	0f c0       	rjmp	.+30     	; 0x4ec <main+0x7c>
								kursor = 0;
						}
						else if(kursor == 0 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
						{
							kursor = 0;			//resetujem kursor jer ostane memorisan
							STATE = POD_SAT;	//meni za podesavanje sata
     4ce:	0f 2e       	mov	r0, r31
     4d0:	f3 e0       	ldi	r31, 0x03	; 3
     4d2:	bf 2e       	mov	r11, r31
     4d4:	f0 2d       	mov	r31, r0
     4d6:	0a c0       	rjmp	.+20     	; 0x4ec <main+0x7c>
						}
						else if(kursor == 1 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
						{
							kursor = 0;			//resetujem kursor jer ostane memorisan
     4d8:	10 e0       	ldi	r17, 0x00	; 0
							STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     4da:	68 94       	set
     4dc:	bb 24       	eor	r11, r11
     4de:	b2 f8       	bld	r11, 2
     4e0:	05 c0       	rjmp	.+10     	; 0x4ec <main+0x7c>
							lcd1602_goto_xy(kursor,1);
							setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
						}
						else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) && kursor==8 )	//podesava MINUTE ++
						{
							provera = 1;
     4e2:	99 24       	eor	r9, r9
     4e4:	93 94       	inc	r9
     4e6:	81 2c       	mov	r8, r1
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <main+0x7c>
     4ea:	81 2c       	mov	r8, r1
			if (ukljuceno)
				PORTB |= 1<<PINB5;   //high
			else
				PORTB &= ~(1<<PINB5);	//low
				
			sprintf(bafer, "%d", provera);
     4ec:	0f 2e       	mov	r0, r31
     4ee:	f1 e0       	ldi	r31, 0x01	; 1
     4f0:	cf 2e       	mov	r12, r31
     4f2:	f1 e0       	ldi	r31, 0x01	; 1
     4f4:	df 2e       	mov	r13, r31
     4f6:	f0 2d       	mov	r31, r0
	
	
    while (1) 
    {
		/* polling tastera */
		tasteri = ocitaj_tastere();
     4f8:	0e 94 89 04 	call	0x912	; 0x912 <ocitaj_tastere>
     4fc:	a8 2e       	mov	r10, r24
		
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
     4fe:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <flag_pc_int_pomocni>
     502:	88 23       	and	r24, r24
     504:	a1 f1       	breq	.+104    	; 0x56e <main+0xfe>
		{
			flag_pc_int_pomocni = 0;
     506:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     50a:	00 e0       	ldi	r16, 0x00	; 0
     50c:	9e 01       	movw	r18, r28
     50e:	27 5f       	subi	r18, 0xF7	; 247
     510:	3f 4f       	sbci	r19, 0xFF	; 255
     512:	ae 01       	movw	r20, r28
     514:	4f 5f       	subi	r20, 0xFF	; 255
     516:	5f 4f       	sbci	r21, 0xFF	; 255
     518:	be 01       	movw	r22, r28
     51a:	6e 5f       	subi	r22, 0xFE	; 254
     51c:	7f 4f       	sbci	r23, 0xFF	; 255
     51e:	ce 01       	movw	r24, r28
     520:	03 96       	adiw	r24, 0x03	; 3
     522:	0e 94 20 05 	call	0xa40	; 0xa40 <getTime>
			
			
			/* paljenje/gasenje releja > grjaca bojlera */
			ukljuceno = period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);
     526:	ae 01       	movw	r20, r28
     528:	4f 5f       	subi	r20, 0xFF	; 255
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	be 01       	movw	r22, r28
     52e:	6d 5e       	subi	r22, 0xED	; 237
     530:	7f 4f       	sbci	r23, 0xFF	; 255
     532:	ce 01       	movw	r24, r28
     534:	0a 96       	adiw	r24, 0x0a	; 10
     536:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <period_paljenja>
			
			if (ukljuceno)
     53a:	88 23       	and	r24, r24
     53c:	11 f0       	breq	.+4      	; 0x542 <main+0xd2>
				PORTB |= 1<<PINB5;   //high
     53e:	2d 9a       	sbi	0x05, 5	; 5
     540:	01 c0       	rjmp	.+2      	; 0x544 <main+0xd4>
			else
				PORTB &= ~(1<<PINB5);	//low
     542:	2d 98       	cbi	0x05, 5	; 5
				
			sprintf(bafer, "%d", provera);
     544:	1f 92       	push	r1
     546:	9f 92       	push	r9
     548:	df 92       	push	r13
     54a:	cf 92       	push	r12
     54c:	ff 92       	push	r15
     54e:	ef 92       	push	r14
     550:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
			send_str(bafer);
     554:	c7 01       	movw	r24, r14
     556:	0e 94 1f 06 	call	0xc3e	; 0xc3e <send_str>
			send_str("\n");
     55a:	84 e0       	ldi	r24, 0x04	; 4
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <send_str>
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
		}
		
		
		
		/* automat stanja za menije na displeju */
		switch(STATE)
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	b9 16       	cp	r11, r25
     572:	09 f4       	brne	.+2      	; 0x576 <main+0x106>
     574:	6e c0       	rjmp	.+220    	; 0x652 <main+0x1e2>
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	b8 16       	cp	r11, r24
     57a:	09 f4       	brne	.+2      	; 0x57e <main+0x10e>
     57c:	c0 c0       	rjmp	.+384    	; 0x6fe <main+0x28e>
     57e:	b1 10       	cpse	r11, r1
     580:	bb cf       	rjmp	.-138    	; 0x4f8 <main+0x88>
		{
			
			case DISPL1:
						/* ispis vremena svaki sekund dok je u ovom CASE-u */
						if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     582:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <flag_pc_int>
     586:	88 23       	and	r24, r24
     588:	09 f4       	brne	.+2      	; 0x58c <main+0x11c>
     58a:	58 c0       	rjmp	.+176    	; 0x63c <main+0x1cc>
						{
							flag_pc_int = 0; //resetujem flag koji je u ISR
     58c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <flag_pc_int>
							
							getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     590:	00 e0       	ldi	r16, 0x00	; 0
     592:	9e 01       	movw	r18, r28
     594:	27 5f       	subi	r18, 0xF7	; 247
     596:	3f 4f       	sbci	r19, 0xFF	; 255
     598:	ae 01       	movw	r20, r28
     59a:	4f 5f       	subi	r20, 0xFF	; 255
     59c:	5f 4f       	sbci	r21, 0xFF	; 255
     59e:	be 01       	movw	r22, r28
     5a0:	6e 5f       	subi	r22, 0xFE	; 254
     5a2:	7f 4f       	sbci	r23, 0xFF	; 255
     5a4:	ce 01       	movw	r24, r28
     5a6:	03 96       	adiw	r24, 0x03	; 3
     5a8:	0e 94 20 05 	call	0xa40	; 0xa40 <getTime>
							sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	1f 92       	push	r1
     5b0:	8f 93       	push	r24
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	1f 92       	push	r1
     5b6:	8f 93       	push	r24
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	1f 92       	push	r1
     5bc:	8f 93       	push	r24
     5be:	86 e0       	ldi	r24, 0x06	; 6
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	ff 92       	push	r15
     5c8:	ef 92       	push	r14
     5ca:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
							//send_str("\n"); //novi red
							
							//lcd1602_clear();
							
							/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
							lcd1602_goto_xy(0,0);
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string("    ");
     5d6:	87 e3       	ldi	r24, 0x37	; 55
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_send_string(bafer);
     5de:	c7 01       	movw	r24, r14
     5e0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_send_string("    ");
     5e4:	87 e3       	ldi	r24, 0x37	; 55
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							
							lcd1602_goto_xy(0,1);
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string("  ");
     5f4:	89 e3       	ldi	r24, 0x39	; 57
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							sprintf(bafer, "%02d:%02d->%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     5fc:	8c 89       	ldd	r24, Y+20	; 0x14
     5fe:	1f 92       	push	r1
     600:	8f 93       	push	r24
     602:	8d 89       	ldd	r24, Y+21	; 0x15
     604:	1f 92       	push	r1
     606:	8f 93       	push	r24
     608:	8b 85       	ldd	r24, Y+11	; 0x0b
     60a:	1f 92       	push	r1
     60c:	8f 93       	push	r24
     60e:	8c 85       	ldd	r24, Y+12	; 0x0c
     610:	1f 92       	push	r1
     612:	8f 93       	push	r24
     614:	85 e1       	ldi	r24, 0x15	; 21
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	9f 93       	push	r25
     61a:	8f 93       	push	r24
     61c:	ff 92       	push	r15
     61e:	ef 92       	push	r14
     620:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
							lcd1602_send_string(bafer);
     624:	c7 01       	movw	r24, r14
     626:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_send_string("  ");
     62a:	89 e3       	ldi	r24, 0x39	; 57
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
		
						}
						
						if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut   !(tasteri & (1<<TASTER_ENTER))
     63c:	65 e0       	ldi	r22, 0x05	; 5
     63e:	8a 2d       	mov	r24, r10
     640:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     644:	88 23       	and	r24, r24
     646:	09 f4       	brne	.+2      	; 0x64a <main+0x1da>
     648:	51 cf       	rjmp	.-350    	; 0x4ec <main+0x7c>
							STATE = MENU1;
     64a:	68 94       	set
     64c:	bb 24       	eor	r11, r11
     64e:	b1 f8       	bld	r11, 1
     650:	4d cf       	rjmp	.-358    	; 0x4ec <main+0x7c>
			break;
			
			case MENU1:
						//lcd1602_clear();
						
						lcd1602_goto_xy(0, kursor);
     652:	d1 2e       	mov	r13, r17
     654:	61 2f       	mov	r22, r17
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string(">");
     65c:	8a e2       	ldi	r24, 0x2A	; 42
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						lcd1602_goto_xy(0, !kursor);
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	11 11       	cpse	r17, r1
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string(" ");
     670:	8a e3       	ldi	r24, 0x3A	; 58
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						
						lcd1602_goto_xy(1,0);
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string("PODESI SAT     ");
     680:	8c e2       	ldi	r24, 0x2C	; 44
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						lcd1602_goto_xy(1,1);
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
						lcd1602_send_string("PODESI PERIOD  ");
     690:	8c e3       	ldi	r24, 0x3C	; 60
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
						
						if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) ) //ocitaj_jedan_taster(tasteri, TASTER_DOLE)
     698:	62 e0       	ldi	r22, 0x02	; 2
     69a:	8a 2d       	mov	r24, r10
     69c:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     6a0:	88 23       	and	r24, r24
     6a2:	39 f0       	breq	.+14     	; 0x6b2 <main+0x242>
						{
							kursor++;
     6a4:	11 e0       	ldi	r17, 0x01	; 1
     6a6:	1d 0d       	add	r17, r13
     6a8:	11 16       	cp	r1, r17
     6aa:	0c f0       	brlt	.+2      	; 0x6ae <main+0x23e>
     6ac:	1f cf       	rjmp	.-450    	; 0x4ec <main+0x7c>
     6ae:	11 e0       	ldi	r17, 0x01	; 1
     6b0:	1d cf       	rjmp	.-454    	; 0x4ec <main+0x7c>
							if(kursor > 1)
								kursor = 1;
						}
						else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     6b2:	63 e0       	ldi	r22, 0x03	; 3
     6b4:	8a 2d       	mov	r24, r10
     6b6:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     6ba:	88 23       	and	r24, r24
     6bc:	31 f0       	breq	.+12     	; 0x6ca <main+0x25a>
						{
							kursor--;
     6be:	1f ef       	ldi	r17, 0xFF	; 255
     6c0:	1d 0d       	add	r17, r13
     6c2:	0a f0       	brmi	.+2      	; 0x6c6 <main+0x256>
     6c4:	13 cf       	rjmp	.-474    	; 0x4ec <main+0x7c>
     6c6:	10 e0       	ldi	r17, 0x00	; 0
     6c8:	11 cf       	rjmp	.-478    	; 0x4ec <main+0x7c>
							if(kursor < 0)
								kursor = 0;
						}
						else if(kursor == 0 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     6ca:	11 11       	cpse	r17, r1
     6cc:	06 c0       	rjmp	.+12     	; 0x6da <main+0x26a>
     6ce:	65 e0       	ldi	r22, 0x05	; 5
     6d0:	8a 2d       	mov	r24, r10
     6d2:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     6d6:	81 11       	cpse	r24, r1
     6d8:	fa ce       	rjmp	.-524    	; 0x4ce <main+0x5e>
						{
							kursor = 0;			//resetujem kursor jer ostane memorisan
							STATE = POD_SAT;	//meni za podesavanje sata
						}
						else if(kursor == 1 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     6da:	11 30       	cpi	r17, 0x01	; 1
     6dc:	31 f4       	brne	.+12     	; 0x6ea <main+0x27a>
     6de:	65 e0       	ldi	r22, 0x05	; 5
     6e0:	8a 2d       	mov	r24, r10
     6e2:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     6e6:	81 11       	cpse	r24, r1
     6e8:	f7 ce       	rjmp	.-530    	; 0x4d8 <main+0x68>
						{
							kursor = 0;			//resetujem kursor jer ostane memorisan
							STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
						}
						else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     6ea:	64 e0       	ldi	r22, 0x04	; 4
     6ec:	8a 2d       	mov	r24, r10
     6ee:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     6f2:	88 23       	and	r24, r24
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <main+0x288>
     6f6:	fa ce       	rjmp	.-524    	; 0x4ec <main+0x7c>
						{
							kursor = 0;			//resetujem kursor jer ostane memorisan
     6f8:	10 e0       	ldi	r17, 0x00	; 0
							STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     6fa:	b1 2c       	mov	r11, r1
     6fc:	f7 ce       	rjmp	.-530    	; 0x4ec <main+0x7c>
			break;
			
			case POD_SAT:
						
						/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
						if (flag_pod_vremena)
     6fe:	88 20       	and	r8, r8
     700:	a9 f1       	breq	.+106    	; 0x76c <main+0x2fc>
						{
							flag_pod_vremena = 0;
							sanp_shot_vremena = vreme_datum;
     702:	7b 80       	ldd	r7, Y+3	; 0x03
							sprintf(bafer, "%02d:%02d:%02d", sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s);
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	1f 92       	push	r1
     708:	8f 93       	push	r24
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	1f 92       	push	r1
     70e:	8f 93       	push	r24
     710:	1f 92       	push	r1
     712:	7f 92       	push	r7
     714:	86 e0       	ldi	r24, 0x06	; 6
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	9f 93       	push	r25
     71a:	8f 93       	push	r24
     71c:	ff 92       	push	r15
     71e:	ef 92       	push	r14
     720:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
							
							kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
							
							lcd1602_goto_xy(0,0);
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string("PODESAVANJE SATA");
     72c:	8c e4       	ldi	r24, 0x4C	; 76
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							
							lcd1602_goto_xy(0,1);
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string("    ");
     73c:	87 e3       	ldi	r24, 0x37	; 55
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_send_string(bafer);
     744:	c7 01       	movw	r24, r14
     746:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_send_string("    ");
     74a:	87 e3       	ldi	r24, 0x37	; 55
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							
							lcd1602_goto_xy(kursor,1);
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	85 e0       	ldi	r24, 0x05	; 5
     756:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_cursor_blink(1);
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd1602_cursor_blink>
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
						{
							flag_pod_vremena = 0;
							sanp_shot_vremena = vreme_datum;
							sprintf(bafer, "%02d:%02d:%02d", sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s);
							
							kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     76a:	15 e0       	ldi	r17, 0x05	; 5
							
							lcd1602_goto_xy(kursor,1);
							lcd1602_cursor_blink(1);
						}
						
						if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	8a 2d       	mov	r24, r10
     770:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     774:	88 23       	and	r24, r24
     776:	51 f0       	breq	.+20     	; 0x78c <main+0x31c>
     778:	1d 5f       	subi	r17, 0xFD	; 253
     77a:	1c 30       	cpi	r17, 0x0C	; 12
     77c:	0c f0       	brlt	.+2      	; 0x780 <main+0x310>
     77e:	1b e0       	ldi	r17, 0x0B	; 11
						{
							kursor += 3;
							if(kursor > 11)
								kursor = 11;
							lcd1602_goto_xy(kursor,1);
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	81 2f       	mov	r24, r17
     784:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     788:	81 2c       	mov	r8, r1
     78a:	b0 ce       	rjmp	.-672    	; 0x4ec <main+0x7c>
						}
						else if (ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	8a 2d       	mov	r24, r10
     790:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     794:	88 23       	and	r24, r24
     796:	51 f0       	breq	.+20     	; 0x7ac <main+0x33c>
						{
							kursor -= 3;
     798:	13 50       	subi	r17, 0x03	; 3
							if(kursor < 5)
     79a:	15 30       	cpi	r17, 0x05	; 5
     79c:	0c f4       	brge	.+2      	; 0x7a0 <main+0x330>
								kursor = 5;
     79e:	15 e0       	ldi	r17, 0x05	; 5
							lcd1602_goto_xy(kursor,1);
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	81 2f       	mov	r24, r17
     7a4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     7a8:	81 2c       	mov	r8, r1
     7aa:	a0 ce       	rjmp	.-704    	; 0x4ec <main+0x7c>
						}
						else if (ocitaj_jedan_taster(tasteri, TASTER_GORE) && kursor==5)	//podesava SATE ++
     7ac:	62 e0       	ldi	r22, 0x02	; 2
     7ae:	8a 2d       	mov	r24, r10
     7b0:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     7b4:	88 23       	and	r24, r24
     7b6:	71 f1       	breq	.+92     	; 0x814 <main+0x3a4>
     7b8:	15 30       	cpi	r17, 0x05	; 5
     7ba:	09 f0       	breq	.+2      	; 0x7be <main+0x34e>
     7bc:	79 c0       	rjmp	.+242    	; 0x8b0 <main+0x440>
						{
							sanp_shot_vremena.hr++;
							if(sanp_shot_vremena.hr >= 24 && sanp_shot_vremena.hr < 30)		//<30 posto je hr = unsigned int
     7be:	89 ee       	ldi	r24, 0xE9	; 233
     7c0:	87 0d       	add	r24, r7
     7c2:	86 30       	cpi	r24, 0x06	; 6
     7c4:	10 f0       	brcs	.+4      	; 0x7ca <main+0x35a>
								kursor = 5;
							lcd1602_goto_xy(kursor,1);
						}
						else if (ocitaj_jedan_taster(tasteri, TASTER_GORE) && kursor==5)	//podesava SATE ++
						{
							sanp_shot_vremena.hr++;
     7c6:	73 94       	inc	r7
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <main+0x35c>
							if(sanp_shot_vremena.hr >= 24 && sanp_shot_vremena.hr < 30)		//<30 posto je hr = unsigned int
								sanp_shot_vremena.hr = 0;
     7ca:	71 2c       	mov	r7, r1
							
							sprintf(bafer, "%02d", sanp_shot_vremena.hr);
     7cc:	1f 92       	push	r1
     7ce:	7f 92       	push	r7
     7d0:	80 e1       	ldi	r24, 0x10	; 16
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	9f 93       	push	r25
     7d6:	8f 93       	push	r24
     7d8:	ff 92       	push	r15
     7da:	ef 92       	push	r14
     7dc:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	84 e0       	ldi	r24, 0x04	; 4
     7e4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     7e8:	c7 01       	movw	r24, r14
     7ea:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	85 e0       	ldi	r24, 0x05	; 5
     7f2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
     7f6:	00 e0       	ldi	r16, 0x00	; 0
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	49 81       	ldd	r20, Y+1	; 0x01
     7fc:	6a 81       	ldd	r22, Y+2	; 0x02
     7fe:	87 2d       	mov	r24, r7
     800:	0e 94 5e 05 	call	0xabc	; 0xabc <setTime>
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	81 2c       	mov	r8, r1
     812:	6c ce       	rjmp	.-808    	; 0x4ec <main+0x7c>
						}
						else if (ocitaj_jedan_taster(tasteri, TASTER_DOLE) && kursor==5)	//podesava SATE --
     814:	63 e0       	ldi	r22, 0x03	; 3
     816:	8a 2d       	mov	r24, r10
     818:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     81c:	88 23       	and	r24, r24
     81e:	71 f1       	breq	.+92     	; 0x87c <main+0x40c>
     820:	15 30       	cpi	r17, 0x05	; 5
     822:	61 f5       	brne	.+88     	; 0x87c <main+0x40c>
						{
							sanp_shot_vremena.hr--;
     824:	7a 94       	dec	r7
							if(sanp_shot_vremena.hr >= 250 && sanp_shot_vremena.hr <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     826:	99 ef       	ldi	r25, 0xF9	; 249
     828:	97 15       	cp	r25, r7
     82a:	20 f4       	brcc	.+8      	; 0x834 <main+0x3c4>
								sanp_shot_vremena.hr = 23;
     82c:	0f 2e       	mov	r0, r31
     82e:	f7 e1       	ldi	r31, 0x17	; 23
     830:	7f 2e       	mov	r7, r31
     832:	f0 2d       	mov	r31, r0
							
							sprintf(bafer, "%02d", sanp_shot_vremena.hr);
     834:	1f 92       	push	r1
     836:	7f 92       	push	r7
     838:	80 e1       	ldi	r24, 0x10	; 16
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	ff 92       	push	r15
     842:	ef 92       	push	r14
     844:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
							lcd1602_goto_xy(kursor-1,1);
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	84 e0       	ldi	r24, 0x04	; 4
     84c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							lcd1602_send_string(bafer);
     850:	c7 01       	movw	r24, r14
     852:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
							lcd1602_goto_xy(kursor,1);
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	85 e0       	ldi	r24, 0x05	; 5
     85a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
							setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
     85e:	00 e0       	ldi	r16, 0x00	; 0
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	49 81       	ldd	r20, Y+1	; 0x01
     864:	6a 81       	ldd	r22, Y+2	; 0x02
     866:	87 2d       	mov	r24, r7
     868:	0e 94 5e 05 	call	0xabc	; 0xabc <setTime>
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	81 2c       	mov	r8, r1
     87a:	38 ce       	rjmp	.-912    	; 0x4ec <main+0x7c>
						}
						else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) && kursor==8 )	//podesava MINUTE ++
     87c:	62 e0       	ldi	r22, 0x02	; 2
     87e:	8a 2d       	mov	r24, r10
     880:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     884:	88 23       	and	r24, r24
     886:	19 f0       	breq	.+6      	; 0x88e <main+0x41e>
     888:	18 30       	cpi	r17, 0x08	; 8
     88a:	09 f4       	brne	.+2      	; 0x88e <main+0x41e>
     88c:	2a ce       	rjmp	.-940    	; 0x4e2 <main+0x72>
						{
							provera = 1;
						}
						else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     88e:	64 e0       	ldi	r22, 0x04	; 4
     890:	8a 2d       	mov	r24, r10
     892:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     896:	88 23       	and	r24, r24
     898:	09 f4       	brne	.+2      	; 0x89c <main+0x42c>
     89a:	27 ce       	rjmp	.-946    	; 0x4ea <main+0x7a>
						{
							flag_pod_vremena = 1; //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
							kursor = 0;			  //reset kursora
							lcd1602_cursor_blink(0);	  //isklucim blinking cursor
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd1602_cursor_blink>
						{
							provera = 1;
						}
						else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
						{
							flag_pod_vremena = 1; //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     8a2:	88 24       	eor	r8, r8
     8a4:	83 94       	inc	r8
							kursor = 0;			  //reset kursora
     8a6:	10 e0       	ldi	r17, 0x00	; 0
							lcd1602_cursor_blink(0);	  //isklucim blinking cursor
							STATE = MENU1;	//vraca se u prethodni meni
     8a8:	68 94       	set
     8aa:	bb 24       	eor	r11, r11
     8ac:	b1 f8       	bld	r11, 1
     8ae:	1e ce       	rjmp	.-964    	; 0x4ec <main+0x7c>
							lcd1602_goto_xy(kursor-1,1);
							lcd1602_send_string(bafer);
							lcd1602_goto_xy(kursor,1);
							setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
						}
						else if (ocitaj_jedan_taster(tasteri, TASTER_DOLE) && kursor==5)	//podesava SATE --
     8b0:	63 e0       	ldi	r22, 0x03	; 3
     8b2:	8a 2d       	mov	r24, r10
     8b4:	0e 94 b2 04 	call	0x964	; 0x964 <ocitaj_jedan_taster>
     8b8:	e1 cf       	rjmp	.-62     	; 0x87c <main+0x40c>

000008ba <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
     8ba:	e8 e6       	ldi	r30, 0x68	; 104
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	82 60       	ori	r24, 0x02	; 2
     8c2:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
     8c4:	ec e6       	ldi	r30, 0x6C	; 108
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	88 60       	ori	r24, 0x08	; 8
     8cc:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
     8ce:	3b 98       	cbi	0x07, 3	; 7
     8d0:	08 95       	ret

000008d2 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
     8d2:	1f 92       	push	r1
     8d4:	0f 92       	push	r0
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	0f 92       	push	r0
     8da:	11 24       	eor	r1, r1
     8dc:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
     8de:	33 9b       	sbis	0x06, 3	; 6
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <__vector_4+0x1a>
	{
		flag_pc_int = 1;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <flag_pc_int>
		flag_pc_int_pomocni = 1;
     8e8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <flag_pc_int_pomocni>
	}
		
     8ec:	8f 91       	pop	r24
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <tasteri_init>:
char buff[50];

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
     8f8:	8a b1       	in	r24, 0x0a	; 10
     8fa:	8f 70       	andi	r24, 0x0F	; 15
     8fc:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
     8fe:	84 b1       	in	r24, 0x04	; 4
     900:	8c 7f       	andi	r24, 0xFC	; 252
     902:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
     904:	8b b1       	in	r24, 0x0b	; 11
     906:	80 6f       	ori	r24, 0xF0	; 240
     908:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
     90a:	85 b1       	in	r24, 0x05	; 5
     90c:	83 60       	ori	r24, 0x03	; 3
     90e:	85 b9       	out	0x05, r24	; 5
     910:	08 95       	ret

00000912 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
     912:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <flag_prekid_debounce_time_half>
     916:	88 23       	and	r24, r24
     918:	69 f0       	breq	.+26     	; 0x934 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
     91a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
     91e:	93 b1       	in	r25, 0x03	; 3
     920:	29 b1       	in	r18, 0x09	; 9
     922:	30 e1       	ldi	r19, 0x10	; 16
     924:	93 9f       	mul	r25, r19
     926:	c0 01       	movw	r24, r0
     928:	11 24       	eor	r1, r1
     92a:	92 2f       	mov	r25, r18
     92c:	92 95       	swap	r25
     92e:	9f 70       	andi	r25, 0x0F	; 15
     930:	89 2b       	or	r24, r25
     932:	01 c0       	rjmp	.+2      	; 0x936 <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
     934:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
     936:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <flag_prekid_debounce_time>
     93a:	99 23       	and	r25, r25
     93c:	81 f0       	breq	.+32     	; 0x95e <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
     93e:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
     942:	93 b1       	in	r25, 0x03	; 3
     944:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
     946:	50 e1       	ldi	r21, 0x10	; 16
     948:	95 9f       	mul	r25, r21
     94a:	90 01       	movw	r18, r0
     94c:	11 24       	eor	r1, r1
     94e:	94 2f       	mov	r25, r20
     950:	92 95       	swap	r25
     952:	9f 70       	andi	r25, 0x0F	; 15
     954:	29 2b       	or	r18, r25
     956:	82 13       	cpse	r24, r18
     958:	02 c0       	rjmp	.+4      	; 0x95e <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
     95a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
	}
	
	return tasteri_reg;
}
     95e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     962:	08 95       	ret

00000964 <ocitaj_jedan_taster>:
	
	uint8_t stisnut = 0;
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	80 95       	com	r24
     968:	90 95       	com	r25
     96a:	9c 01       	movw	r18, r24
     96c:	06 2e       	mov	r0, r22
     96e:	02 c0       	rjmp	.+4      	; 0x974 <ocitaj_jedan_taster+0x10>
     970:	35 95       	asr	r19
     972:	27 95       	ror	r18
     974:	0a 94       	dec	r0
     976:	e2 f7       	brpl	.-8      	; 0x970 <ocitaj_jedan_taster+0xc>
     978:	20 ff       	sbrs	r18, 0
     97a:	0a c0       	rjmp	.+20     	; 0x990 <ocitaj_jedan_taster+0x2c>
     97c:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <flag_stisnut.1958>
     980:	21 11       	cpse	r18, r1
     982:	06 c0       	rjmp	.+12     	; 0x990 <ocitaj_jedan_taster+0x2c>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <flag_stisnut.1958>
		temp_tast = button;		//zapamtim koji je taster stisnut
     98a:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <temp_tast.1957>
     98e:	08 95       	ret
		stisnut = 1;
	}
	if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
     990:	00 90 65 01 	lds	r0, 0x0165	; 0x800165 <temp_tast.1957>
     994:	02 c0       	rjmp	.+4      	; 0x99a <ocitaj_jedan_taster+0x36>
     996:	95 95       	asr	r25
     998:	87 95       	ror	r24
     99a:	0a 94       	dec	r0
     99c:	e2 f7       	brpl	.-8      	; 0x996 <ocitaj_jedan_taster+0x32>
     99e:	80 fd       	sbrc	r24, 0
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <ocitaj_jedan_taster+0x46>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
     9a2:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <flag_stisnut.1958>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	08 95       	ret
     9aa:	80 e0       	ldi	r24, 0x00	; 0
	}
			
	
	return stisnut;
     9ac:	08 95       	ret

000009ae <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
     9ae:	98 2f       	mov	r25, r24
     9b0:	92 95       	swap	r25
     9b2:	9f 70       	andi	r25, 0x0F	; 15
     9b4:	99 0f       	add	r25, r25
     9b6:	29 2f       	mov	r18, r25
     9b8:	22 0f       	add	r18, r18
     9ba:	22 0f       	add	r18, r18
     9bc:	92 0f       	add	r25, r18
     9be:	8f 70       	andi	r24, 0x0F	; 15
     9c0:	89 0f       	add	r24, r25
     9c2:	08 95       	ret

000009c4 <decimal_to_bcd>:
     9c4:	9d ec       	ldi	r25, 0xCD	; 205
     9c6:	89 9f       	mul	r24, r25
     9c8:	91 2d       	mov	r25, r1
     9ca:	11 24       	eor	r1, r1
     9cc:	96 95       	lsr	r25
     9ce:	96 95       	lsr	r25
     9d0:	96 95       	lsr	r25
     9d2:	20 e1       	ldi	r18, 0x10	; 16
     9d4:	92 9f       	mul	r25, r18
     9d6:	a0 01       	movw	r20, r0
     9d8:	11 24       	eor	r1, r1
     9da:	99 0f       	add	r25, r25
     9dc:	29 2f       	mov	r18, r25
     9de:	22 0f       	add	r18, r18
     9e0:	22 0f       	add	r18, r18
     9e2:	92 0f       	add	r25, r18
     9e4:	89 1b       	sub	r24, r25
     9e6:	8f 70       	andi	r24, 0x0F	; 15
     9e8:	84 2b       	or	r24, r20
     9ea:	08 95       	ret

000009ec <DS3231_Read>:
     9ec:	cf 93       	push	r28
     9ee:	c8 2f       	mov	r28, r24
     9f0:	80 ed       	ldi	r24, 0xD0	; 208
     9f2:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     9f6:	8c 2f       	mov	r24, r28
     9f8:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     9fc:	81 ed       	ldi	r24, 0xD1	; 209
     9fe:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     a02:	0e 94 ff 00 	call	0x1fe	; 0x1fe <i2c_readNak>
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <DS3231_Write>:
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	d8 2f       	mov	r29, r24
     a10:	c6 2f       	mov	r28, r22
     a12:	80 ed       	ldi	r24, 0xD0	; 208
     a14:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     a18:	8d 2f       	mov	r24, r29
     a1a:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     a1e:	8c 2f       	mov	r24, r28
     a20:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     a24:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_stop>
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	08 95       	ret

00000a2e <DS3231_init>:
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	8e e0       	ldi	r24, 0x0E	; 14
     a32:	0e 94 05 05 	call	0xa0a	; 0xa0a <DS3231_Write>
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	8f e0       	ldi	r24, 0x0F	; 15
     a3a:	0e 94 05 05 	call	0xa0a	; 0xa0a <DS3231_Write>
     a3e:	08 95       	ret

00000a40 <getTime>:
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	ec 01       	movw	r28, r24
     a54:	7b 01       	movw	r14, r22
     a56:	6a 01       	movw	r12, r20
     a58:	59 01       	movw	r10, r18
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <DS3231_Read>
     a60:	0e 94 d7 04 	call	0x9ae	; 0x9ae <bcd_to_decimal>
     a64:	f6 01       	movw	r30, r12
     a66:	80 83       	st	Z, r24
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <DS3231_Read>
     a6e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <bcd_to_decimal>
     a72:	f7 01       	movw	r30, r14
     a74:	80 83       	st	Z, r24
     a76:	01 30       	cpi	r16, 0x01	; 1
     a78:	81 f4       	brne	.+32     	; 0xa9a <getTime+0x5a>
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <DS3231_Read>
     a80:	85 fb       	bst	r24, 5
     a82:	88 27       	eor	r24, r24
     a84:	80 f9       	bld	r24, 0
     a86:	f5 01       	movw	r30, r10
     a88:	80 83       	st	Z, r24
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <DS3231_Read>
     a90:	8f 71       	andi	r24, 0x1F	; 31
     a92:	0e 94 d7 04 	call	0x9ae	; 0x9ae <bcd_to_decimal>
     a96:	88 83       	st	Y, r24
     a98:	07 c0       	rjmp	.+14     	; 0xaa8 <getTime+0x68>
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <DS3231_Read>
     aa0:	8f 73       	andi	r24, 0x3F	; 63
     aa2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <bcd_to_decimal>
     aa6:	88 83       	st	Y, r24
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	bf 90       	pop	r11
     ab8:	af 90       	pop	r10
     aba:	08 95       	ret

00000abc <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	d8 2f       	mov	r29, r24
     ac6:	c6 2f       	mov	r28, r22
     ac8:	84 2f       	mov	r24, r20
     aca:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
     acc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <decimal_to_bcd>
     ad0:	68 2f       	mov	r22, r24
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 05 05 	call	0xa0a	; 0xa0a <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
     ad8:	8c 2f       	mov	r24, r28
     ada:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <decimal_to_bcd>
     ade:	68 2f       	mov	r22, r24
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	0e 94 05 05 	call	0xa0a	; 0xa0a <DS3231_Write>
	
	switch(hour_format)
     ae6:	01 30       	cpi	r16, 0x01	; 1
     ae8:	79 f4       	brne	.+30     	; 0xb08 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
     aea:	11 30       	cpi	r17, 0x01	; 1
     aec:	11 f0       	breq	.+4      	; 0xaf2 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
     aee:	c0 e4       	ldi	r28, 0x40	; 64
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
     af2:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
     af4:	8d 2f       	mov	r24, r29
     af6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <decimal_to_bcd>
     afa:	8f 71       	andi	r24, 0x1F	; 31
     afc:	68 2f       	mov	r22, r24
     afe:	6c 2b       	or	r22, r28
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	0e 94 05 05 	call	0xa0a	; 0xa0a <DS3231_Write>
			break;
     b06:	08 c0       	rjmp	.+16     	; 0xb18 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
     b08:	8d 2f       	mov	r24, r29
     b0a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <decimal_to_bcd>
     b0e:	68 2f       	mov	r22, r24
     b10:	6f 73       	andi	r22, 0x3F	; 63
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	0e 94 05 05 	call	0xa0a	; 0xa0a <DS3231_Write>
			break;
		}
	}
}
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	08 95       	ret

00000b22 <tajmer0_init>:
volatile uint8_t brojac_prekida_tajmera0_debounce = 0;
volatile uint8_t brojac_prekida_tajmera0_debounce_half = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
     b2a:	99 ef       	ldi	r25, 0xF9	; 249
     b2c:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
     b2e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRD |= (1<<PIND2)|(1<<PIND3);  //PD2-3 output
     b32:	8a b1       	in	r24, 0x0a	; 10
     b34:	8c 60       	ori	r24, 0x0C	; 12
     b36:	8a b9       	out	0x0a, r24	; 10
     b38:	08 95       	ret

00000b3a <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	8f 93       	push	r24
	flag_tajmer0_prekid = 1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
     b4c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <brojac_prekida_tajmera0>
     b50:	8f 5f       	subi	r24, 0xFF	; 255
     b52:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
     b56:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <brojac_prekida_tajmera0_debounce_half>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
     b60:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <brojac_prekida_tajmera0_debounce>
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <brojac_prekida_tajmera0_debounce>
		
	if(brojac_prekida_tajmera0 == 255)	//1ms * 10 = 10ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
     b6a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <brojac_prekida_tajmera0>
     b6e:	8f 3f       	cpi	r24, 0xFF	; 255
     b70:	29 f4       	brne	.+10     	; 0xb7c <__vector_14+0x42>
	{
		brojac_prekida_tajmera0 = 0;
     b72:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;				
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <flag_prekid_10ms>
		
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
     b7c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <brojac_prekida_tajmera0_debounce_half>
     b80:	83 30       	cpi	r24, 0x03	; 3
     b82:	31 f4       	brne	.+12     	; 0xb90 <__vector_14+0x56>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
     b84:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <flag_prekid_debounce_time_half>
		PIND |= 1<<PIND2;	//toggle PD2
     b8e:	4a 9a       	sbi	0x09, 2	; 9
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
     b90:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <brojac_prekida_tajmera0_debounce>
     b94:	86 30       	cpi	r24, 0x06	; 6
     b96:	31 f4       	brne	.+12     	; 0xba4 <__vector_14+0x6a>
	{
		brojac_prekida_tajmera0_debounce = 0;
     b98:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <flag_prekid_debounce_time>
		PIND |= 1<<PIND3;	//toggle PD3
     ba2:	4b 9a       	sbi	0x09, 3	; 9
	}
	
     ba4:	8f 91       	pop	r24
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
	poslato=0;
     bba:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <poslato>
}
     bbe:	0f 90       	pop	r0
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	0f 90       	pop	r0
     bc4:	1f 90       	pop	r1
     bc6:	18 95       	reti

00000bc8 <__vector_18>:

ISR(USART_RX_vect)
{
     bc8:	1f 92       	push	r1
     bca:	0f 92       	push	r0
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	8f 93       	push	r24
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
	input_char=UDR0;
     bd8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     bdc:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
     be0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <buff_size>
     be4:	88 30       	cpi	r24, 0x08	; 8
     be6:	98 f4       	brcc	.+38     	; 0xc0e <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
     be8:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <buff_size>
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <input_char>
     bf2:	ee 58       	subi	r30, 0x8E	; 142
     bf4:	fe 4f       	sbci	r31, 0xFE	; 254
     bf6:	80 83       	st	Z, r24
		buff_size++;
     bf8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <buff_size>
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <buff_size>
		input_buffer[buff_size]='\0';
     c02:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <buff_size>
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	ee 58       	subi	r30, 0x8E	; 142
     c0a:	fe 4f       	sbci	r31, 0xFE	; 254
     c0c:	10 82       	st	Z, r1
	}
}
     c0e:	ff 91       	pop	r31
     c10:	ef 91       	pop	r30
     c12:	8f 91       	pop	r24
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
     c24:	88 ed       	ldi	r24, 0xD8	; 216
     c26:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
     c2a:	86 e0       	ldi	r24, 0x06	; 6
     c2c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
     c30:	8f ec       	ldi	r24, 0xCF	; 207
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     c38:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     c3c:	08 95       	ret

00000c3e <send_str>:
}

void send_str(char *str)
{
     c3e:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
     c40:	90 81       	ld	r25, Z
     c42:	99 23       	and	r25, r25
     c44:	71 f0       	breq	.+28     	; 0xc62 <send_str+0x24>
     c46:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
     c48:	a6 ec       	ldi	r26, 0xC6	; 198
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
     c4e:	9c 93       	st	X, r25
		poslato=1;
     c50:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <poslato>
		while (poslato);
     c54:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <poslato>
     c58:	91 11       	cpse	r25, r1
     c5a:	fc cf       	rjmp	.-8      	; 0xc54 <send_str+0x16>
void send_str(char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
     c5c:	91 91       	ld	r25, Z+
     c5e:	91 11       	cpse	r25, r1
     c60:	f6 cf       	rjmp	.-20     	; 0xc4e <send_str+0x10>
     c62:	08 95       	ret

00000c64 <sprintf>:
     c64:	ae e0       	ldi	r26, 0x0E	; 14
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e8 e3       	ldi	r30, 0x38	; 56
     c6a:	f6 e0       	ldi	r31, 0x06	; 6
     c6c:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__prologue_saves__+0x1c>
     c70:	0d 89       	ldd	r16, Y+21	; 0x15
     c72:	1e 89       	ldd	r17, Y+22	; 0x16
     c74:	86 e0       	ldi	r24, 0x06	; 6
     c76:	8c 83       	std	Y+4, r24	; 0x04
     c78:	1a 83       	std	Y+2, r17	; 0x02
     c7a:	09 83       	std	Y+1, r16	; 0x01
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	9f e7       	ldi	r25, 0x7F	; 127
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	8d 83       	std	Y+5, r24	; 0x05
     c84:	ae 01       	movw	r20, r28
     c86:	47 5e       	subi	r20, 0xE7	; 231
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	6f 89       	ldd	r22, Y+23	; 0x17
     c8c:	78 8d       	ldd	r23, Y+24	; 0x18
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	0e 94 54 06 	call	0xca8	; 0xca8 <vfprintf>
     c96:	ef 81       	ldd	r30, Y+7	; 0x07
     c98:	f8 85       	ldd	r31, Y+8	; 0x08
     c9a:	e0 0f       	add	r30, r16
     c9c:	f1 1f       	adc	r31, r17
     c9e:	10 82       	st	Z, r1
     ca0:	2e 96       	adiw	r28, 0x0e	; 14
     ca2:	e4 e0       	ldi	r30, 0x04	; 4
     ca4:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__epilogue_restores__+0x1c>

00000ca8 <vfprintf>:
     ca8:	ab e0       	ldi	r26, 0x0B	; 11
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	ea e5       	ldi	r30, 0x5A	; 90
     cae:	f6 e0       	ldi	r31, 0x06	; 6
     cb0:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__prologue_saves__>
     cb4:	6c 01       	movw	r12, r24
     cb6:	7b 01       	movw	r14, r22
     cb8:	8a 01       	movw	r16, r20
     cba:	fc 01       	movw	r30, r24
     cbc:	17 82       	std	Z+7, r1	; 0x07
     cbe:	16 82       	std	Z+6, r1	; 0x06
     cc0:	83 81       	ldd	r24, Z+3	; 0x03
     cc2:	81 ff       	sbrs	r24, 1
     cc4:	cc c1       	rjmp	.+920    	; 0x105e <vfprintf+0x3b6>
     cc6:	ce 01       	movw	r24, r28
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	3c 01       	movw	r6, r24
     ccc:	f6 01       	movw	r30, r12
     cce:	93 81       	ldd	r25, Z+3	; 0x03
     cd0:	f7 01       	movw	r30, r14
     cd2:	93 fd       	sbrc	r25, 3
     cd4:	85 91       	lpm	r24, Z+
     cd6:	93 ff       	sbrs	r25, 3
     cd8:	81 91       	ld	r24, Z+
     cda:	7f 01       	movw	r14, r30
     cdc:	88 23       	and	r24, r24
     cde:	09 f4       	brne	.+2      	; 0xce2 <vfprintf+0x3a>
     ce0:	ba c1       	rjmp	.+884    	; 0x1056 <vfprintf+0x3ae>
     ce2:	85 32       	cpi	r24, 0x25	; 37
     ce4:	39 f4       	brne	.+14     	; 0xcf4 <vfprintf+0x4c>
     ce6:	93 fd       	sbrc	r25, 3
     ce8:	85 91       	lpm	r24, Z+
     cea:	93 ff       	sbrs	r25, 3
     cec:	81 91       	ld	r24, Z+
     cee:	7f 01       	movw	r14, r30
     cf0:	85 32       	cpi	r24, 0x25	; 37
     cf2:	29 f4       	brne	.+10     	; 0xcfe <vfprintf+0x56>
     cf4:	b6 01       	movw	r22, r12
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 4b 08 	call	0x1096	; 0x1096 <fputc>
     cfc:	e7 cf       	rjmp	.-50     	; 0xccc <vfprintf+0x24>
     cfe:	91 2c       	mov	r9, r1
     d00:	21 2c       	mov	r2, r1
     d02:	31 2c       	mov	r3, r1
     d04:	ff e1       	ldi	r31, 0x1F	; 31
     d06:	f3 15       	cp	r31, r3
     d08:	d8 f0       	brcs	.+54     	; 0xd40 <vfprintf+0x98>
     d0a:	8b 32       	cpi	r24, 0x2B	; 43
     d0c:	79 f0       	breq	.+30     	; 0xd2c <vfprintf+0x84>
     d0e:	38 f4       	brcc	.+14     	; 0xd1e <vfprintf+0x76>
     d10:	80 32       	cpi	r24, 0x20	; 32
     d12:	79 f0       	breq	.+30     	; 0xd32 <vfprintf+0x8a>
     d14:	83 32       	cpi	r24, 0x23	; 35
     d16:	a1 f4       	brne	.+40     	; 0xd40 <vfprintf+0x98>
     d18:	23 2d       	mov	r18, r3
     d1a:	20 61       	ori	r18, 0x10	; 16
     d1c:	1d c0       	rjmp	.+58     	; 0xd58 <vfprintf+0xb0>
     d1e:	8d 32       	cpi	r24, 0x2D	; 45
     d20:	61 f0       	breq	.+24     	; 0xd3a <vfprintf+0x92>
     d22:	80 33       	cpi	r24, 0x30	; 48
     d24:	69 f4       	brne	.+26     	; 0xd40 <vfprintf+0x98>
     d26:	23 2d       	mov	r18, r3
     d28:	21 60       	ori	r18, 0x01	; 1
     d2a:	16 c0       	rjmp	.+44     	; 0xd58 <vfprintf+0xb0>
     d2c:	83 2d       	mov	r24, r3
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	38 2e       	mov	r3, r24
     d32:	e3 2d       	mov	r30, r3
     d34:	e4 60       	ori	r30, 0x04	; 4
     d36:	3e 2e       	mov	r3, r30
     d38:	2a c0       	rjmp	.+84     	; 0xd8e <vfprintf+0xe6>
     d3a:	f3 2d       	mov	r31, r3
     d3c:	f8 60       	ori	r31, 0x08	; 8
     d3e:	1d c0       	rjmp	.+58     	; 0xd7a <vfprintf+0xd2>
     d40:	37 fc       	sbrc	r3, 7
     d42:	2d c0       	rjmp	.+90     	; 0xd9e <vfprintf+0xf6>
     d44:	20 ed       	ldi	r18, 0xD0	; 208
     d46:	28 0f       	add	r18, r24
     d48:	2a 30       	cpi	r18, 0x0A	; 10
     d4a:	40 f0       	brcs	.+16     	; 0xd5c <vfprintf+0xb4>
     d4c:	8e 32       	cpi	r24, 0x2E	; 46
     d4e:	b9 f4       	brne	.+46     	; 0xd7e <vfprintf+0xd6>
     d50:	36 fc       	sbrc	r3, 6
     d52:	81 c1       	rjmp	.+770    	; 0x1056 <vfprintf+0x3ae>
     d54:	23 2d       	mov	r18, r3
     d56:	20 64       	ori	r18, 0x40	; 64
     d58:	32 2e       	mov	r3, r18
     d5a:	19 c0       	rjmp	.+50     	; 0xd8e <vfprintf+0xe6>
     d5c:	36 fe       	sbrs	r3, 6
     d5e:	06 c0       	rjmp	.+12     	; 0xd6c <vfprintf+0xc4>
     d60:	8a e0       	ldi	r24, 0x0A	; 10
     d62:	98 9e       	mul	r9, r24
     d64:	20 0d       	add	r18, r0
     d66:	11 24       	eor	r1, r1
     d68:	92 2e       	mov	r9, r18
     d6a:	11 c0       	rjmp	.+34     	; 0xd8e <vfprintf+0xe6>
     d6c:	ea e0       	ldi	r30, 0x0A	; 10
     d6e:	2e 9e       	mul	r2, r30
     d70:	20 0d       	add	r18, r0
     d72:	11 24       	eor	r1, r1
     d74:	22 2e       	mov	r2, r18
     d76:	f3 2d       	mov	r31, r3
     d78:	f0 62       	ori	r31, 0x20	; 32
     d7a:	3f 2e       	mov	r3, r31
     d7c:	08 c0       	rjmp	.+16     	; 0xd8e <vfprintf+0xe6>
     d7e:	8c 36       	cpi	r24, 0x6C	; 108
     d80:	21 f4       	brne	.+8      	; 0xd8a <vfprintf+0xe2>
     d82:	83 2d       	mov	r24, r3
     d84:	80 68       	ori	r24, 0x80	; 128
     d86:	38 2e       	mov	r3, r24
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <vfprintf+0xe6>
     d8a:	88 36       	cpi	r24, 0x68	; 104
     d8c:	41 f4       	brne	.+16     	; 0xd9e <vfprintf+0xf6>
     d8e:	f7 01       	movw	r30, r14
     d90:	93 fd       	sbrc	r25, 3
     d92:	85 91       	lpm	r24, Z+
     d94:	93 ff       	sbrs	r25, 3
     d96:	81 91       	ld	r24, Z+
     d98:	7f 01       	movw	r14, r30
     d9a:	81 11       	cpse	r24, r1
     d9c:	b3 cf       	rjmp	.-154    	; 0xd04 <vfprintf+0x5c>
     d9e:	98 2f       	mov	r25, r24
     da0:	9f 7d       	andi	r25, 0xDF	; 223
     da2:	95 54       	subi	r25, 0x45	; 69
     da4:	93 30       	cpi	r25, 0x03	; 3
     da6:	28 f4       	brcc	.+10     	; 0xdb2 <vfprintf+0x10a>
     da8:	0c 5f       	subi	r16, 0xFC	; 252
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	9f e3       	ldi	r25, 0x3F	; 63
     dae:	99 83       	std	Y+1, r25	; 0x01
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <vfprintf+0x124>
     db2:	83 36       	cpi	r24, 0x63	; 99
     db4:	31 f0       	breq	.+12     	; 0xdc2 <vfprintf+0x11a>
     db6:	83 37       	cpi	r24, 0x73	; 115
     db8:	71 f0       	breq	.+28     	; 0xdd6 <vfprintf+0x12e>
     dba:	83 35       	cpi	r24, 0x53	; 83
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <vfprintf+0x118>
     dbe:	59 c0       	rjmp	.+178    	; 0xe72 <vfprintf+0x1ca>
     dc0:	21 c0       	rjmp	.+66     	; 0xe04 <vfprintf+0x15c>
     dc2:	f8 01       	movw	r30, r16
     dc4:	80 81       	ld	r24, Z
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	0e 5f       	subi	r16, 0xFE	; 254
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	88 24       	eor	r8, r8
     dce:	83 94       	inc	r8
     dd0:	91 2c       	mov	r9, r1
     dd2:	53 01       	movw	r10, r6
     dd4:	13 c0       	rjmp	.+38     	; 0xdfc <vfprintf+0x154>
     dd6:	28 01       	movw	r4, r16
     dd8:	f2 e0       	ldi	r31, 0x02	; 2
     dda:	4f 0e       	add	r4, r31
     ddc:	51 1c       	adc	r5, r1
     dde:	f8 01       	movw	r30, r16
     de0:	a0 80       	ld	r10, Z
     de2:	b1 80       	ldd	r11, Z+1	; 0x01
     de4:	36 fe       	sbrs	r3, 6
     de6:	03 c0       	rjmp	.+6      	; 0xdee <vfprintf+0x146>
     de8:	69 2d       	mov	r22, r9
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0x14a>
     dee:	6f ef       	ldi	r22, 0xFF	; 255
     df0:	7f ef       	ldi	r23, 0xFF	; 255
     df2:	c5 01       	movw	r24, r10
     df4:	0e 94 40 08 	call	0x1080	; 0x1080 <strnlen>
     df8:	4c 01       	movw	r8, r24
     dfa:	82 01       	movw	r16, r4
     dfc:	f3 2d       	mov	r31, r3
     dfe:	ff 77       	andi	r31, 0x7F	; 127
     e00:	3f 2e       	mov	r3, r31
     e02:	16 c0       	rjmp	.+44     	; 0xe30 <vfprintf+0x188>
     e04:	28 01       	movw	r4, r16
     e06:	22 e0       	ldi	r18, 0x02	; 2
     e08:	42 0e       	add	r4, r18
     e0a:	51 1c       	adc	r5, r1
     e0c:	f8 01       	movw	r30, r16
     e0e:	a0 80       	ld	r10, Z
     e10:	b1 80       	ldd	r11, Z+1	; 0x01
     e12:	36 fe       	sbrs	r3, 6
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <vfprintf+0x174>
     e16:	69 2d       	mov	r22, r9
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <vfprintf+0x178>
     e1c:	6f ef       	ldi	r22, 0xFF	; 255
     e1e:	7f ef       	ldi	r23, 0xFF	; 255
     e20:	c5 01       	movw	r24, r10
     e22:	0e 94 35 08 	call	0x106a	; 0x106a <strnlen_P>
     e26:	4c 01       	movw	r8, r24
     e28:	f3 2d       	mov	r31, r3
     e2a:	f0 68       	ori	r31, 0x80	; 128
     e2c:	3f 2e       	mov	r3, r31
     e2e:	82 01       	movw	r16, r4
     e30:	33 fc       	sbrc	r3, 3
     e32:	1b c0       	rjmp	.+54     	; 0xe6a <vfprintf+0x1c2>
     e34:	82 2d       	mov	r24, r2
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	88 16       	cp	r8, r24
     e3a:	99 06       	cpc	r9, r25
     e3c:	b0 f4       	brcc	.+44     	; 0xe6a <vfprintf+0x1c2>
     e3e:	b6 01       	movw	r22, r12
     e40:	80 e2       	ldi	r24, 0x20	; 32
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 4b 08 	call	0x1096	; 0x1096 <fputc>
     e48:	2a 94       	dec	r2
     e4a:	f4 cf       	rjmp	.-24     	; 0xe34 <vfprintf+0x18c>
     e4c:	f5 01       	movw	r30, r10
     e4e:	37 fc       	sbrc	r3, 7
     e50:	85 91       	lpm	r24, Z+
     e52:	37 fe       	sbrs	r3, 7
     e54:	81 91       	ld	r24, Z+
     e56:	5f 01       	movw	r10, r30
     e58:	b6 01       	movw	r22, r12
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 4b 08 	call	0x1096	; 0x1096 <fputc>
     e60:	21 10       	cpse	r2, r1
     e62:	2a 94       	dec	r2
     e64:	21 e0       	ldi	r18, 0x01	; 1
     e66:	82 1a       	sub	r8, r18
     e68:	91 08       	sbc	r9, r1
     e6a:	81 14       	cp	r8, r1
     e6c:	91 04       	cpc	r9, r1
     e6e:	71 f7       	brne	.-36     	; 0xe4c <vfprintf+0x1a4>
     e70:	e8 c0       	rjmp	.+464    	; 0x1042 <vfprintf+0x39a>
     e72:	84 36       	cpi	r24, 0x64	; 100
     e74:	11 f0       	breq	.+4      	; 0xe7a <vfprintf+0x1d2>
     e76:	89 36       	cpi	r24, 0x69	; 105
     e78:	41 f5       	brne	.+80     	; 0xeca <vfprintf+0x222>
     e7a:	f8 01       	movw	r30, r16
     e7c:	37 fe       	sbrs	r3, 7
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <vfprintf+0x1e6>
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	0c 5f       	subi	r16, 0xFC	; 252
     e8a:	1f 4f       	sbci	r17, 0xFF	; 255
     e8c:	08 c0       	rjmp	.+16     	; 0xe9e <vfprintf+0x1f6>
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	07 2e       	mov	r0, r23
     e94:	00 0c       	add	r0, r0
     e96:	88 0b       	sbc	r24, r24
     e98:	99 0b       	sbc	r25, r25
     e9a:	0e 5f       	subi	r16, 0xFE	; 254
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
     e9e:	f3 2d       	mov	r31, r3
     ea0:	ff 76       	andi	r31, 0x6F	; 111
     ea2:	3f 2e       	mov	r3, r31
     ea4:	97 ff       	sbrs	r25, 7
     ea6:	09 c0       	rjmp	.+18     	; 0xeba <vfprintf+0x212>
     ea8:	90 95       	com	r25
     eaa:	80 95       	com	r24
     eac:	70 95       	com	r23
     eae:	61 95       	neg	r22
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	8f 4f       	sbci	r24, 0xFF	; 255
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	f0 68       	ori	r31, 0x80	; 128
     eb8:	3f 2e       	mov	r3, r31
     eba:	2a e0       	ldi	r18, 0x0A	; 10
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	a3 01       	movw	r20, r6
     ec0:	0e 94 87 08 	call	0x110e	; 0x110e <__ultoa_invert>
     ec4:	88 2e       	mov	r8, r24
     ec6:	86 18       	sub	r8, r6
     ec8:	45 c0       	rjmp	.+138    	; 0xf54 <vfprintf+0x2ac>
     eca:	85 37       	cpi	r24, 0x75	; 117
     ecc:	31 f4       	brne	.+12     	; 0xeda <vfprintf+0x232>
     ece:	23 2d       	mov	r18, r3
     ed0:	2f 7e       	andi	r18, 0xEF	; 239
     ed2:	b2 2e       	mov	r11, r18
     ed4:	2a e0       	ldi	r18, 0x0A	; 10
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	25 c0       	rjmp	.+74     	; 0xf24 <vfprintf+0x27c>
     eda:	93 2d       	mov	r25, r3
     edc:	99 7f       	andi	r25, 0xF9	; 249
     ede:	b9 2e       	mov	r11, r25
     ee0:	8f 36       	cpi	r24, 0x6F	; 111
     ee2:	c1 f0       	breq	.+48     	; 0xf14 <vfprintf+0x26c>
     ee4:	18 f4       	brcc	.+6      	; 0xeec <vfprintf+0x244>
     ee6:	88 35       	cpi	r24, 0x58	; 88
     ee8:	79 f0       	breq	.+30     	; 0xf08 <vfprintf+0x260>
     eea:	b5 c0       	rjmp	.+362    	; 0x1056 <vfprintf+0x3ae>
     eec:	80 37       	cpi	r24, 0x70	; 112
     eee:	19 f0       	breq	.+6      	; 0xef6 <vfprintf+0x24e>
     ef0:	88 37       	cpi	r24, 0x78	; 120
     ef2:	21 f0       	breq	.+8      	; 0xefc <vfprintf+0x254>
     ef4:	b0 c0       	rjmp	.+352    	; 0x1056 <vfprintf+0x3ae>
     ef6:	e9 2f       	mov	r30, r25
     ef8:	e0 61       	ori	r30, 0x10	; 16
     efa:	be 2e       	mov	r11, r30
     efc:	b4 fe       	sbrs	r11, 4
     efe:	0d c0       	rjmp	.+26     	; 0xf1a <vfprintf+0x272>
     f00:	fb 2d       	mov	r31, r11
     f02:	f4 60       	ori	r31, 0x04	; 4
     f04:	bf 2e       	mov	r11, r31
     f06:	09 c0       	rjmp	.+18     	; 0xf1a <vfprintf+0x272>
     f08:	34 fe       	sbrs	r3, 4
     f0a:	0a c0       	rjmp	.+20     	; 0xf20 <vfprintf+0x278>
     f0c:	29 2f       	mov	r18, r25
     f0e:	26 60       	ori	r18, 0x06	; 6
     f10:	b2 2e       	mov	r11, r18
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <vfprintf+0x278>
     f14:	28 e0       	ldi	r18, 0x08	; 8
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <vfprintf+0x27c>
     f1a:	20 e1       	ldi	r18, 0x10	; 16
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <vfprintf+0x27c>
     f20:	20 e1       	ldi	r18, 0x10	; 16
     f22:	32 e0       	ldi	r19, 0x02	; 2
     f24:	f8 01       	movw	r30, r16
     f26:	b7 fe       	sbrs	r11, 7
     f28:	07 c0       	rjmp	.+14     	; 0xf38 <vfprintf+0x290>
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	0c 5f       	subi	r16, 0xFC	; 252
     f34:	1f 4f       	sbci	r17, 0xFF	; 255
     f36:	06 c0       	rjmp	.+12     	; 0xf44 <vfprintf+0x29c>
     f38:	60 81       	ld	r22, Z
     f3a:	71 81       	ldd	r23, Z+1	; 0x01
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 5f       	subi	r16, 0xFE	; 254
     f42:	1f 4f       	sbci	r17, 0xFF	; 255
     f44:	a3 01       	movw	r20, r6
     f46:	0e 94 87 08 	call	0x110e	; 0x110e <__ultoa_invert>
     f4a:	88 2e       	mov	r8, r24
     f4c:	86 18       	sub	r8, r6
     f4e:	fb 2d       	mov	r31, r11
     f50:	ff 77       	andi	r31, 0x7F	; 127
     f52:	3f 2e       	mov	r3, r31
     f54:	36 fe       	sbrs	r3, 6
     f56:	0d c0       	rjmp	.+26     	; 0xf72 <vfprintf+0x2ca>
     f58:	23 2d       	mov	r18, r3
     f5a:	2e 7f       	andi	r18, 0xFE	; 254
     f5c:	a2 2e       	mov	r10, r18
     f5e:	89 14       	cp	r8, r9
     f60:	58 f4       	brcc	.+22     	; 0xf78 <vfprintf+0x2d0>
     f62:	34 fe       	sbrs	r3, 4
     f64:	0b c0       	rjmp	.+22     	; 0xf7c <vfprintf+0x2d4>
     f66:	32 fc       	sbrc	r3, 2
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <vfprintf+0x2d4>
     f6a:	83 2d       	mov	r24, r3
     f6c:	8e 7e       	andi	r24, 0xEE	; 238
     f6e:	a8 2e       	mov	r10, r24
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <vfprintf+0x2d4>
     f72:	b8 2c       	mov	r11, r8
     f74:	a3 2c       	mov	r10, r3
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <vfprintf+0x2d6>
     f78:	b8 2c       	mov	r11, r8
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <vfprintf+0x2d6>
     f7c:	b9 2c       	mov	r11, r9
     f7e:	a4 fe       	sbrs	r10, 4
     f80:	0f c0       	rjmp	.+30     	; 0xfa0 <vfprintf+0x2f8>
     f82:	fe 01       	movw	r30, r28
     f84:	e8 0d       	add	r30, r8
     f86:	f1 1d       	adc	r31, r1
     f88:	80 81       	ld	r24, Z
     f8a:	80 33       	cpi	r24, 0x30	; 48
     f8c:	21 f4       	brne	.+8      	; 0xf96 <vfprintf+0x2ee>
     f8e:	9a 2d       	mov	r25, r10
     f90:	99 7e       	andi	r25, 0xE9	; 233
     f92:	a9 2e       	mov	r10, r25
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <vfprintf+0x300>
     f96:	a2 fe       	sbrs	r10, 2
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <vfprintf+0x2fe>
     f9a:	b3 94       	inc	r11
     f9c:	b3 94       	inc	r11
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <vfprintf+0x300>
     fa0:	8a 2d       	mov	r24, r10
     fa2:	86 78       	andi	r24, 0x86	; 134
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <vfprintf+0x300>
     fa6:	b3 94       	inc	r11
     fa8:	a3 fc       	sbrc	r10, 3
     faa:	11 c0       	rjmp	.+34     	; 0xfce <vfprintf+0x326>
     fac:	a0 fe       	sbrs	r10, 0
     fae:	06 c0       	rjmp	.+12     	; 0xfbc <vfprintf+0x314>
     fb0:	b2 14       	cp	r11, r2
     fb2:	88 f4       	brcc	.+34     	; 0xfd6 <vfprintf+0x32e>
     fb4:	28 0c       	add	r2, r8
     fb6:	92 2c       	mov	r9, r2
     fb8:	9b 18       	sub	r9, r11
     fba:	0e c0       	rjmp	.+28     	; 0xfd8 <vfprintf+0x330>
     fbc:	b2 14       	cp	r11, r2
     fbe:	60 f4       	brcc	.+24     	; 0xfd8 <vfprintf+0x330>
     fc0:	b6 01       	movw	r22, r12
     fc2:	80 e2       	ldi	r24, 0x20	; 32
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 4b 08 	call	0x1096	; 0x1096 <fputc>
     fca:	b3 94       	inc	r11
     fcc:	f7 cf       	rjmp	.-18     	; 0xfbc <vfprintf+0x314>
     fce:	b2 14       	cp	r11, r2
     fd0:	18 f4       	brcc	.+6      	; 0xfd8 <vfprintf+0x330>
     fd2:	2b 18       	sub	r2, r11
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <vfprintf+0x332>
     fd6:	98 2c       	mov	r9, r8
     fd8:	21 2c       	mov	r2, r1
     fda:	a4 fe       	sbrs	r10, 4
     fdc:	10 c0       	rjmp	.+32     	; 0xffe <vfprintf+0x356>
     fde:	b6 01       	movw	r22, r12
     fe0:	80 e3       	ldi	r24, 0x30	; 48
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 4b 08 	call	0x1096	; 0x1096 <fputc>
     fe8:	a2 fe       	sbrs	r10, 2
     fea:	17 c0       	rjmp	.+46     	; 0x101a <vfprintf+0x372>
     fec:	a1 fc       	sbrc	r10, 1
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <vfprintf+0x34e>
     ff0:	88 e7       	ldi	r24, 0x78	; 120
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <vfprintf+0x352>
     ff6:	88 e5       	ldi	r24, 0x58	; 88
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	b6 01       	movw	r22, r12
     ffc:	0c c0       	rjmp	.+24     	; 0x1016 <vfprintf+0x36e>
     ffe:	8a 2d       	mov	r24, r10
    1000:	86 78       	andi	r24, 0x86	; 134
    1002:	59 f0       	breq	.+22     	; 0x101a <vfprintf+0x372>
    1004:	a1 fe       	sbrs	r10, 1
    1006:	02 c0       	rjmp	.+4      	; 0x100c <vfprintf+0x364>
    1008:	8b e2       	ldi	r24, 0x2B	; 43
    100a:	01 c0       	rjmp	.+2      	; 0x100e <vfprintf+0x366>
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	a7 fc       	sbrc	r10, 7
    1010:	8d e2       	ldi	r24, 0x2D	; 45
    1012:	b6 01       	movw	r22, r12
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 4b 08 	call	0x1096	; 0x1096 <fputc>
    101a:	89 14       	cp	r8, r9
    101c:	38 f4       	brcc	.+14     	; 0x102c <vfprintf+0x384>
    101e:	b6 01       	movw	r22, r12
    1020:	80 e3       	ldi	r24, 0x30	; 48
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 4b 08 	call	0x1096	; 0x1096 <fputc>
    1028:	9a 94       	dec	r9
    102a:	f7 cf       	rjmp	.-18     	; 0x101a <vfprintf+0x372>
    102c:	8a 94       	dec	r8
    102e:	f3 01       	movw	r30, r6
    1030:	e8 0d       	add	r30, r8
    1032:	f1 1d       	adc	r31, r1
    1034:	80 81       	ld	r24, Z
    1036:	b6 01       	movw	r22, r12
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 4b 08 	call	0x1096	; 0x1096 <fputc>
    103e:	81 10       	cpse	r8, r1
    1040:	f5 cf       	rjmp	.-22     	; 0x102c <vfprintf+0x384>
    1042:	22 20       	and	r2, r2
    1044:	09 f4       	brne	.+2      	; 0x1048 <vfprintf+0x3a0>
    1046:	42 ce       	rjmp	.-892    	; 0xccc <vfprintf+0x24>
    1048:	b6 01       	movw	r22, r12
    104a:	80 e2       	ldi	r24, 0x20	; 32
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 4b 08 	call	0x1096	; 0x1096 <fputc>
    1052:	2a 94       	dec	r2
    1054:	f6 cf       	rjmp	.-20     	; 0x1042 <vfprintf+0x39a>
    1056:	f6 01       	movw	r30, r12
    1058:	86 81       	ldd	r24, Z+6	; 0x06
    105a:	97 81       	ldd	r25, Z+7	; 0x07
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <vfprintf+0x3ba>
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	9f ef       	ldi	r25, 0xFF	; 255
    1062:	2b 96       	adiw	r28, 0x0b	; 11
    1064:	e2 e1       	ldi	r30, 0x12	; 18
    1066:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__epilogue_restores__>

0000106a <strnlen_P>:
    106a:	fc 01       	movw	r30, r24
    106c:	05 90       	lpm	r0, Z+
    106e:	61 50       	subi	r22, 0x01	; 1
    1070:	70 40       	sbci	r23, 0x00	; 0
    1072:	01 10       	cpse	r0, r1
    1074:	d8 f7       	brcc	.-10     	; 0x106c <strnlen_P+0x2>
    1076:	80 95       	com	r24
    1078:	90 95       	com	r25
    107a:	8e 0f       	add	r24, r30
    107c:	9f 1f       	adc	r25, r31
    107e:	08 95       	ret

00001080 <strnlen>:
    1080:	fc 01       	movw	r30, r24
    1082:	61 50       	subi	r22, 0x01	; 1
    1084:	70 40       	sbci	r23, 0x00	; 0
    1086:	01 90       	ld	r0, Z+
    1088:	01 10       	cpse	r0, r1
    108a:	d8 f7       	brcc	.-10     	; 0x1082 <strnlen+0x2>
    108c:	80 95       	com	r24
    108e:	90 95       	com	r25
    1090:	8e 0f       	add	r24, r30
    1092:	9f 1f       	adc	r25, r31
    1094:	08 95       	ret

00001096 <fputc>:
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	fb 01       	movw	r30, r22
    10a0:	23 81       	ldd	r18, Z+3	; 0x03
    10a2:	21 fd       	sbrc	r18, 1
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <fputc+0x16>
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	9f ef       	ldi	r25, 0xFF	; 255
    10aa:	2c c0       	rjmp	.+88     	; 0x1104 <fputc+0x6e>
    10ac:	22 ff       	sbrs	r18, 2
    10ae:	16 c0       	rjmp	.+44     	; 0x10dc <fputc+0x46>
    10b0:	46 81       	ldd	r20, Z+6	; 0x06
    10b2:	57 81       	ldd	r21, Z+7	; 0x07
    10b4:	24 81       	ldd	r18, Z+4	; 0x04
    10b6:	35 81       	ldd	r19, Z+5	; 0x05
    10b8:	42 17       	cp	r20, r18
    10ba:	53 07       	cpc	r21, r19
    10bc:	44 f4       	brge	.+16     	; 0x10ce <fputc+0x38>
    10be:	a0 81       	ld	r26, Z
    10c0:	b1 81       	ldd	r27, Z+1	; 0x01
    10c2:	9d 01       	movw	r18, r26
    10c4:	2f 5f       	subi	r18, 0xFF	; 255
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	31 83       	std	Z+1, r19	; 0x01
    10ca:	20 83       	st	Z, r18
    10cc:	8c 93       	st	X, r24
    10ce:	26 81       	ldd	r18, Z+6	; 0x06
    10d0:	37 81       	ldd	r19, Z+7	; 0x07
    10d2:	2f 5f       	subi	r18, 0xFF	; 255
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	37 83       	std	Z+7, r19	; 0x07
    10d8:	26 83       	std	Z+6, r18	; 0x06
    10da:	14 c0       	rjmp	.+40     	; 0x1104 <fputc+0x6e>
    10dc:	8b 01       	movw	r16, r22
    10de:	ec 01       	movw	r28, r24
    10e0:	fb 01       	movw	r30, r22
    10e2:	00 84       	ldd	r0, Z+8	; 0x08
    10e4:	f1 85       	ldd	r31, Z+9	; 0x09
    10e6:	e0 2d       	mov	r30, r0
    10e8:	09 95       	icall
    10ea:	89 2b       	or	r24, r25
    10ec:	e1 f6       	brne	.-72     	; 0x10a6 <fputc+0x10>
    10ee:	d8 01       	movw	r26, r16
    10f0:	16 96       	adiw	r26, 0x06	; 6
    10f2:	8d 91       	ld	r24, X+
    10f4:	9c 91       	ld	r25, X
    10f6:	17 97       	sbiw	r26, 0x07	; 7
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	17 96       	adiw	r26, 0x07	; 7
    10fc:	9c 93       	st	X, r25
    10fe:	8e 93       	st	-X, r24
    1100:	16 97       	sbiw	r26, 0x06	; 6
    1102:	ce 01       	movw	r24, r28
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <__ultoa_invert>:
    110e:	fa 01       	movw	r30, r20
    1110:	aa 27       	eor	r26, r26
    1112:	28 30       	cpi	r18, 0x08	; 8
    1114:	51 f1       	breq	.+84     	; 0x116a <__ultoa_invert+0x5c>
    1116:	20 31       	cpi	r18, 0x10	; 16
    1118:	81 f1       	breq	.+96     	; 0x117a <__ultoa_invert+0x6c>
    111a:	e8 94       	clt
    111c:	6f 93       	push	r22
    111e:	6e 7f       	andi	r22, 0xFE	; 254
    1120:	6e 5f       	subi	r22, 0xFE	; 254
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	af 4f       	sbci	r26, 0xFF	; 255
    112a:	b1 e0       	ldi	r27, 0x01	; 1
    112c:	3e d0       	rcall	.+124    	; 0x11aa <__ultoa_invert+0x9c>
    112e:	b4 e0       	ldi	r27, 0x04	; 4
    1130:	3c d0       	rcall	.+120    	; 0x11aa <__ultoa_invert+0x9c>
    1132:	67 0f       	add	r22, r23
    1134:	78 1f       	adc	r23, r24
    1136:	89 1f       	adc	r24, r25
    1138:	9a 1f       	adc	r25, r26
    113a:	a1 1d       	adc	r26, r1
    113c:	68 0f       	add	r22, r24
    113e:	79 1f       	adc	r23, r25
    1140:	8a 1f       	adc	r24, r26
    1142:	91 1d       	adc	r25, r1
    1144:	a1 1d       	adc	r26, r1
    1146:	6a 0f       	add	r22, r26
    1148:	71 1d       	adc	r23, r1
    114a:	81 1d       	adc	r24, r1
    114c:	91 1d       	adc	r25, r1
    114e:	a1 1d       	adc	r26, r1
    1150:	20 d0       	rcall	.+64     	; 0x1192 <__ultoa_invert+0x84>
    1152:	09 f4       	brne	.+2      	; 0x1156 <__ultoa_invert+0x48>
    1154:	68 94       	set
    1156:	3f 91       	pop	r19
    1158:	2a e0       	ldi	r18, 0x0A	; 10
    115a:	26 9f       	mul	r18, r22
    115c:	11 24       	eor	r1, r1
    115e:	30 19       	sub	r19, r0
    1160:	30 5d       	subi	r19, 0xD0	; 208
    1162:	31 93       	st	Z+, r19
    1164:	de f6       	brtc	.-74     	; 0x111c <__ultoa_invert+0xe>
    1166:	cf 01       	movw	r24, r30
    1168:	08 95       	ret
    116a:	46 2f       	mov	r20, r22
    116c:	47 70       	andi	r20, 0x07	; 7
    116e:	40 5d       	subi	r20, 0xD0	; 208
    1170:	41 93       	st	Z+, r20
    1172:	b3 e0       	ldi	r27, 0x03	; 3
    1174:	0f d0       	rcall	.+30     	; 0x1194 <__ultoa_invert+0x86>
    1176:	c9 f7       	brne	.-14     	; 0x116a <__ultoa_invert+0x5c>
    1178:	f6 cf       	rjmp	.-20     	; 0x1166 <__ultoa_invert+0x58>
    117a:	46 2f       	mov	r20, r22
    117c:	4f 70       	andi	r20, 0x0F	; 15
    117e:	40 5d       	subi	r20, 0xD0	; 208
    1180:	4a 33       	cpi	r20, 0x3A	; 58
    1182:	18 f0       	brcs	.+6      	; 0x118a <__ultoa_invert+0x7c>
    1184:	49 5d       	subi	r20, 0xD9	; 217
    1186:	31 fd       	sbrc	r19, 1
    1188:	40 52       	subi	r20, 0x20	; 32
    118a:	41 93       	st	Z+, r20
    118c:	02 d0       	rcall	.+4      	; 0x1192 <__ultoa_invert+0x84>
    118e:	a9 f7       	brne	.-22     	; 0x117a <__ultoa_invert+0x6c>
    1190:	ea cf       	rjmp	.-44     	; 0x1166 <__ultoa_invert+0x58>
    1192:	b4 e0       	ldi	r27, 0x04	; 4
    1194:	a6 95       	lsr	r26
    1196:	97 95       	ror	r25
    1198:	87 95       	ror	r24
    119a:	77 95       	ror	r23
    119c:	67 95       	ror	r22
    119e:	ba 95       	dec	r27
    11a0:	c9 f7       	brne	.-14     	; 0x1194 <__ultoa_invert+0x86>
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	61 05       	cpc	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	08 95       	ret
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    11ae:	0a 2e       	mov	r0, r26
    11b0:	06 94       	lsr	r0
    11b2:	57 95       	ror	r21
    11b4:	47 95       	ror	r20
    11b6:	37 95       	ror	r19
    11b8:	27 95       	ror	r18
    11ba:	ba 95       	dec	r27
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__ultoa_invert+0xa2>
    11be:	62 0f       	add	r22, r18
    11c0:	73 1f       	adc	r23, r19
    11c2:	84 1f       	adc	r24, r20
    11c4:	95 1f       	adc	r25, r21
    11c6:	a0 1d       	adc	r26, r0
    11c8:	08 95       	ret

000011ca <__prologue_saves__>:
    11ca:	2f 92       	push	r2
    11cc:	3f 92       	push	r3
    11ce:	4f 92       	push	r4
    11d0:	5f 92       	push	r5
    11d2:	6f 92       	push	r6
    11d4:	7f 92       	push	r7
    11d6:	8f 92       	push	r8
    11d8:	9f 92       	push	r9
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	ca 1b       	sub	r28, r26
    11f4:	db 0b       	sbc	r29, r27
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	09 94       	ijmp

00001202 <__epilogue_restores__>:
    1202:	2a 88       	ldd	r2, Y+18	; 0x12
    1204:	39 88       	ldd	r3, Y+17	; 0x11
    1206:	48 88       	ldd	r4, Y+16	; 0x10
    1208:	5f 84       	ldd	r5, Y+15	; 0x0f
    120a:	6e 84       	ldd	r6, Y+14	; 0x0e
    120c:	7d 84       	ldd	r7, Y+13	; 0x0d
    120e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1210:	9b 84       	ldd	r9, Y+11	; 0x0b
    1212:	aa 84       	ldd	r10, Y+10	; 0x0a
    1214:	b9 84       	ldd	r11, Y+9	; 0x09
    1216:	c8 84       	ldd	r12, Y+8	; 0x08
    1218:	df 80       	ldd	r13, Y+7	; 0x07
    121a:	ee 80       	ldd	r14, Y+6	; 0x06
    121c:	fd 80       	ldd	r15, Y+5	; 0x05
    121e:	0c 81       	ldd	r16, Y+4	; 0x04
    1220:	1b 81       	ldd	r17, Y+3	; 0x03
    1222:	aa 81       	ldd	r26, Y+2	; 0x02
    1224:	b9 81       	ldd	r27, Y+1	; 0x01
    1226:	ce 0f       	add	r28, r30
    1228:	d1 1d       	adc	r29, r1
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	ed 01       	movw	r28, r26
    1236:	08 95       	ret

00001238 <_exit>:
    1238:	f8 94       	cli

0000123a <__stop_program>:
    123a:	ff cf       	rjmp	.-2      	; 0x123a <__stop_program>
