
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000ca8  00000d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800112  00800112  00000d4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f82  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d16  00000000  00000000  00002f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000103d  00000000  00000000  00003c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000500  00000000  00000000  00004ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000797  00000000  00000000  000051cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001790  00000000  00000000  00005963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000070f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_20>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
  9e:	0c 94 52 06 	jmp	0xca4	; 0xca4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
  a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
  a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
  b2:	8e ee       	ldi	r24, 0xEE	; 238
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
  b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
  bc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
  c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	/*
	AD konverzija
	ISR okine kada je gotova konverzija
	*/
	
	PORTD |= 1<<PINB7;       //togle za osciloskop
  d4:	5f 9a       	sbi	0x0b, 7	; 11
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
  d6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  da:	81 11       	cpse	r24, r1
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <__vector_21+0x2e>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <mereni_napon+0x1>
  ea:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mereni_napon>
  ee:	0c c0       	rjmp	.+24     	; 0x108 <__vector_21+0x46>
	else if(ad_kanal == 1)
  f0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	41 f4       	brne	.+16     	; 0x108 <__vector_21+0x46>
		merena_struja = (uint16_t)ADC;
  f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  fc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 100:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <merena_struja+0x1>
 104:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 77       	andi	r24, 0x7F	; 127
 110:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 112:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
 11c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	10 f0       	brcs	.+4      	; 0x128 <__vector_21+0x66>
		ad_kanal = 0;
 124:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
 128:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 12c:	88 23       	and	r24, r24
 12e:	19 f0       	breq	.+6      	; 0x136 <__vector_21+0x74>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	39 f0       	breq	.+14     	; 0x142 <__vector_21+0x80>
 134:	0e c0       	rjmp	.+28     	; 0x152 <__vector_21+0x90>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
		break;
 140:	08 c0       	rjmp	.+16     	; 0x152 <__vector_21+0x90>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	80 83       	st	Z, r24
				ADMUX |= (0b1);
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 6c       	ori	r24, 0xC0	; 192
 15a:	80 83       	st	Z, r24
	
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us

	PORTD &= ~(1<<7);       //togle za osciloskop
 15c:	5f 98       	cbi	0x0b, 7	; 11
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
 170:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 174:	88 e4       	ldi	r24, 0x48	; 72
 176:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 17a:	08 95       	ret

0000017c <i2c_start_wait>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec eb       	ldi	r30, 0xBC	; 188
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	24 ea       	ldi	r18, 0xA4	; 164
 186:	a9 eb       	ldi	r26, 0xB9	; 185
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	cb eb       	ldi	r28, 0xBB	; 187
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	34 e8       	ldi	r19, 0x84	; 132
 190:	44 e9       	ldi	r20, 0x94	; 148
 192:	20 83       	st	Z, r18
 194:	90 81       	ld	r25, Z
 196:	99 23       	and	r25, r25
 198:	ec f7       	brge	.-6      	; 0x194 <i2c_start_wait+0x18>
 19a:	9c 91       	ld	r25, X
 19c:	98 7f       	andi	r25, 0xF8	; 248
 19e:	98 30       	cpi	r25, 0x08	; 8
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <i2c_start_wait+0x2a>
 1a2:	90 31       	cpi	r25, 0x10	; 16
 1a4:	b1 f7       	brne	.-20     	; 0x192 <i2c_start_wait+0x16>
 1a6:	88 83       	st	Y, r24
 1a8:	30 83       	st	Z, r19
 1aa:	90 81       	ld	r25, Z
 1ac:	99 23       	and	r25, r25
 1ae:	ec f7       	brge	.-6      	; 0x1aa <i2c_start_wait+0x2e>
 1b0:	9c 91       	ld	r25, X
 1b2:	98 7f       	andi	r25, 0xF8	; 248
 1b4:	90 32       	cpi	r25, 0x20	; 32
 1b6:	11 f0       	breq	.+4      	; 0x1bc <i2c_start_wait+0x40>
 1b8:	98 35       	cpi	r25, 0x58	; 88
 1ba:	29 f4       	brne	.+10     	; 0x1c6 <i2c_start_wait+0x4a>
 1bc:	40 83       	st	Z, r20
 1be:	90 81       	ld	r25, Z
 1c0:	94 fd       	sbrc	r25, 4
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <i2c_start_wait+0x42>
 1c4:	e6 cf       	rjmp	.-52     	; 0x192 <i2c_start_wait+0x16>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <i2c_stop>:
 1cc:	84 e9       	ldi	r24, 0x94	; 148
 1ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	84 fd       	sbrc	r24, 4
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <i2c_stop+0xa>
 1dc:	08 95       	ret

000001de <i2c_write>:
 1de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1e2:	84 e8       	ldi	r24, 0x84	; 132
 1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1e8:	ec eb       	ldi	r30, 0xBC	; 188
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 23       	and	r24, r24
 1f0:	ec f7       	brge	.-6      	; 0x1ec <i2c_write+0xe>
 1f2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1f6:	98 7f       	andi	r25, 0xF8	; 248
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	98 32       	cpi	r25, 0x28	; 40
 1fc:	09 f4       	brne	.+2      	; 0x200 <i2c_write+0x22>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret

00000202 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 202:	84 e8       	ldi	r24, 0x84	; 132
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 208:	ec eb       	ldi	r30, 0xBC	; 188
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	88 23       	and	r24, r24
 210:	ec f7       	brge	.-6      	; 0x20c <i2c_readNak+0xa>
	
    return TWDR;
 212:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
 216:	08 95       	ret

00000218 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
 218:	cf 93       	push	r28
 21a:	c8 2f       	mov	r28, r24
 21c:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
 21e:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
	i2c_write(value);                      // write 
 222:	8c 2f       	mov	r24, r28
 224:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
 228:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <putnibble>:
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
 234:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <led_pin>
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <led_pin>
 23e:	6e e4       	ldi	r22, 0x4E	; 78
 240:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 244:	87 ec       	ldi	r24, 0xC7	; 199
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <putnibble+0x18>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <putnibble+0x1e>
 24e:	00 00       	nop
 250:	c2 95       	swap	r28
 252:	c0 7f       	andi	r28, 0xF0	; 240
 254:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <led_pin>
 258:	6e e4       	ldi	r22, 0x4E	; 78
 25a:	8c 2b       	or	r24, r28
 25c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 260:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <led_pin>
 264:	8b 7f       	andi	r24, 0xFB	; 251
 266:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <led_pin>
 26a:	6e e4       	ldi	r22, 0x4E	; 78
 26c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 270:	87 ec       	ldi	r24, 0xC7	; 199
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <putnibble+0x44>
 278:	00 c0       	rjmp	.+0      	; 0x27a <putnibble+0x4a>
 27a:	00 00       	nop
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <lcd1602_send_byte>:
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	c8 2f       	mov	r28, r24
 286:	d8 2f       	mov	r29, r24
 288:	d2 95       	swap	r29
 28a:	df 70       	andi	r29, 0x0F	; 15
 28c:	61 11       	cpse	r22, r1
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <lcd1602_send_byte+0x22>
 290:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <led_pin>
 294:	8e 7f       	andi	r24, 0xFE	; 254
 296:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <led_pin>
 29a:	6e e4       	ldi	r22, 0x4E	; 78
 29c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <lcd1602_send_byte+0x32>
 2a2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <led_pin>
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <led_pin>
 2ac:	6e e4       	ldi	r22, 0x4E	; 78
 2ae:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 2b2:	8d 2f       	mov	r24, r29
 2b4:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2b8:	8c 2f       	mov	r24, r28
 2ba:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <lcd1602_send_char>:
 2c4:	cf 93       	push	r28
 2c6:	c8 2f       	mov	r28, r24
 2c8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <led_pin>
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <led_pin>
 2d2:	6e e4       	ldi	r22, 0x4E	; 78
 2d4:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 2d8:	8c 2f       	mov	r24, r28
 2da:	82 95       	swap	r24
 2dc:	8f 70       	andi	r24, 0x0F	; 15
 2de:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2e2:	8c 2f       	mov	r24, r28
 2e4:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <lcd1602_init>:
 2ec:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <led_pin>
 2f0:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_init>
 2f4:	8f e5       	ldi	r24, 0x5F	; 95
 2f6:	9a ee       	ldi	r25, 0xEA	; 234
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd1602_init+0xc>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <lcd1602_init+0x12>
 2fe:	00 00       	nop
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 306:	8f e7       	ldi	r24, 0x7F	; 127
 308:	9e e3       	ldi	r25, 0x3E	; 62
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <lcd1602_init+0x1e>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <lcd1602_init+0x24>
 310:	00 00       	nop
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 318:	8f e8       	ldi	r24, 0x8F	; 143
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <lcd1602_init+0x30>
 320:	00 c0       	rjmp	.+0      	; 0x322 <lcd1602_init+0x36>
 322:	00 00       	nop
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 32a:	8f e9       	ldi	r24, 0x9F	; 159
 32c:	9f e0       	ldi	r25, 0x0F	; 15
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <lcd1602_init+0x42>
 332:	00 c0       	rjmp	.+0      	; 0x334 <lcd1602_init+0x48>
 334:	00 00       	nop
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 33c:	8f e9       	ldi	r24, 0x9F	; 159
 33e:	9f e0       	ldi	r25, 0x0F	; 15
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <lcd1602_init+0x54>
 344:	00 c0       	rjmp	.+0      	; 0x346 <lcd1602_init+0x5a>
 346:	00 00       	nop
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	88 e2       	ldi	r24, 0x28	; 40
 34c:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 350:	8f e9       	ldi	r24, 0x9F	; 159
 352:	9f e0       	ldi	r25, 0x0F	; 15
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd1602_init+0x68>
 358:	00 c0       	rjmp	.+0      	; 0x35a <lcd1602_init+0x6e>
 35a:	00 00       	nop
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 364:	8f e9       	ldi	r24, 0x9F	; 159
 366:	9f e0       	ldi	r25, 0x0F	; 15
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd1602_init+0x7c>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd1602_init+0x82>
 36e:	00 00       	nop
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	86 e0       	ldi	r24, 0x06	; 6
 374:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 378:	8f e9       	ldi	r24, 0x9F	; 159
 37a:	9f e0       	ldi	r25, 0x0F	; 15
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd1602_init+0x90>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd1602_init+0x96>
 382:	00 00       	nop
 384:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <led_pin>
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <led_pin>
 38e:	6e e4       	ldi	r22, 0x4E	; 78
 390:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 394:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <led_pin>
 398:	8d 7f       	andi	r24, 0xFD	; 253
 39a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <led_pin>
 39e:	6e e4       	ldi	r22, 0x4E	; 78
 3a0:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 3a4:	08 95       	ret

000003a6 <lcd1602_clear>:
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 3ae:	8f e6       	ldi	r24, 0x6F	; 111
 3b0:	97 e1       	ldi	r25, 0x17	; 23
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd1602_clear+0xc>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <lcd1602_clear+0x12>
 3b8:	00 00       	nop
 3ba:	08 95       	ret

000003bc <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3c4:	80 81       	ld	r24, Z
 3c6:	88 23       	and	r24, r24
 3c8:	59 f0       	breq	.+22     	; 0x3e0 <lcd1602_send_string+0x24>
 3ca:	8f 01       	movw	r16, r30
 3cc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
 3ce:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd1602_send_char>
		i++;
 3d2:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3d4:	f8 01       	movw	r30, r16
 3d6:	ec 0f       	add	r30, r28
 3d8:	f1 1d       	adc	r31, r1
 3da:	80 81       	ld	r24, Z
 3dc:	81 11       	cpse	r24, r1
 3de:	f7 cf       	rjmp	.-18     	; 0x3ce <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	08 95       	ret

000003e8 <main>:
extern volatile uint16_t mereni_napon;
extern volatile uint16_t merena_struja;
/**********************************************************************************************************************************/

int main(void)
{
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	6d 97       	sbiw	r28, 0x1d	; 29
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	de bf       	out	0x3e, r29	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	cd bf       	out	0x3d, r28	; 61
	Time_date vreme_datum;
	char bafer[20];
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();
 3fc:	0e 94 de 02 	call	0x5bc	; 0x5bc <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
 400:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_init>
	lcd1602_init();
 404:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd1602_init>
	ADC_init();				//NAPOMENA:	PINB7 output
 408:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init();			//baud 9600
 40c:	0e 94 45 03 	call	0x68a	; 0x68a <uart_init>
	DS3231_init();			//RTC init
 410:	0e 94 97 02 	call	0x52e	; 0x52e <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input, PINB5 output
 414:	0e 94 4c 02 	call	0x498	; 0x498 <pc_init>
	
	
	sei();	//global interrupt enable
 418:	78 94       	sei
		{
			flag_pc_int = 0; //resetujem flag koji je u ISR
			
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
 41a:	0f 2e       	mov	r0, r31
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	cf 2e       	mov	r12, r31
 420:	f1 e0       	ldi	r31, 0x01	; 1
 422:	df 2e       	mov	r13, r31
 424:	f0 2d       	mov	r31, r0
 426:	7e 01       	movw	r14, r28
 428:	8a e0       	ldi	r24, 0x0A	; 10
 42a:	e8 0e       	add	r14, r24
 42c:	f1 1c       	adc	r15, r1
	
    while (1) 
    {
		
		
		if(flag_pc_int)
 42e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag_pc_int>
 432:	88 23       	and	r24, r24
 434:	e1 f3       	breq	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			flag_pc_int = 0; //resetujem flag koji je u ISR
 436:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <flag_pc_int>
			
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
 43a:	00 e0       	ldi	r16, 0x00	; 0
 43c:	9e 01       	movw	r18, r28
 43e:	27 5f       	subi	r18, 0xF7	; 247
 440:	3f 4f       	sbci	r19, 0xFF	; 255
 442:	ae 01       	movw	r20, r28
 444:	4f 5f       	subi	r20, 0xFF	; 255
 446:	5f 4f       	sbci	r21, 0xFF	; 255
 448:	be 01       	movw	r22, r28
 44a:	6e 5f       	subi	r22, 0xFE	; 254
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	ce 01       	movw	r24, r28
 450:	03 96       	adiw	r24, 0x03	; 3
 452:	0e 94 a0 02 	call	0x540	; 0x540 <getTime>
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	1f 92       	push	r1
 45a:	8f 93       	push	r24
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	1f 92       	push	r1
 460:	8f 93       	push	r24
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	1f 92       	push	r1
 466:	8f 93       	push	r24
 468:	df 92       	push	r13
 46a:	cf 92       	push	r12
 46c:	ff 92       	push	r15
 46e:	ef 92       	push	r14
 470:	0e 94 68 03 	call	0x6d0	; 0x6d0 <sprintf>
			send_str(bafer);
 474:	c7 01       	movw	r24, r14
 476:	0e 94 55 03 	call	0x6aa	; 0x6aa <send_str>
			send_str("\n"); //novi red
 47a:	8f e0       	ldi	r24, 0x0F	; 15
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 55 03 	call	0x6aa	; 0x6aa <send_str>
			
			lcd1602_clear();
 482:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd1602_clear>
			lcd1602_send_string(bafer);
 486:	c7 01       	movw	r24, r14
 488:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcd1602_send_string>
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	cb cf       	rjmp	.-106    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

00000498 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
 498:	e8 e6       	ldi	r30, 0x68	; 104
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
 4a2:	ec e6       	ldi	r30, 0x6C	; 108
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	88 60       	ori	r24, 0x08	; 8
 4aa:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
 4ac:	3b 98       	cbi	0x07, 3	; 7
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
 4ae:	25 9a       	sbi	0x04, 5	; 4
 4b0:	08 95       	ret

000004b2 <__vector_4>:
}

ISR(PCINT1_vect) 
{
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 1, ali je redundantno
	if(PINC & (1<<PINC3) )		
 4be:	33 9b       	sbis	0x06, 3	; 6
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__vector_4+0x16>
		flag_pc_int = 1;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag_pc_int>

	
	PINB |= 1<<PINB5;   //toogle pinB 5 - DIG13, LED DIODA test da vidim da li je korektna frekvencija
 4c8:	1d 9a       	sbi	0x03, 5	; 3
 4ca:	8f 91       	pop	r24
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <bcd_to_decimal>:


unsigned char decimal_to_bcd(unsigned char d)
{
	return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
}
 4d6:	98 2f       	mov	r25, r24
 4d8:	92 95       	swap	r25
 4da:	9f 70       	andi	r25, 0x0F	; 15
 4dc:	99 0f       	add	r25, r25
 4de:	29 2f       	mov	r18, r25
 4e0:	22 0f       	add	r18, r18
 4e2:	22 0f       	add	r18, r18
 4e4:	92 0f       	add	r25, r18
 4e6:	8f 70       	andi	r24, 0x0F	; 15
 4e8:	89 0f       	add	r24, r25
 4ea:	08 95       	ret

000004ec <DS3231_Read>:


unsigned char DS3231_Read(unsigned char address)
{
 4ec:	cf 93       	push	r28
 4ee:	c8 2f       	mov	r28, r24
	unsigned char value = 0;
	
	i2c_start_wait(DS3231_Write_addr + I2C_WRITE);	// set device address and write mode
 4f0:	80 ed       	ldi	r24, 0xD0	; 208
 4f2:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
			//twi_write(DS3231_Write_addr);
	i2c_write(address);
 4f6:	8c 2f       	mov	r24, r28
 4f8:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
	i2c_start_wait(DS3231_Write_addr + I2C_READ);       // set device address and read mode
 4fc:	81 ed       	ldi	r24, 0xD1	; 209
 4fe:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
			//twi_write(DS3231_Read_addr);
	value = i2c_readNak(); //read one byte, read is followed by a stop condition
 502:	0e 94 01 01 	call	0x202	; 0x202 <i2c_readNak>
			//twi_stop();
	
	return value;
}
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <DS3231_Write>:


void DS3231_Write(unsigned char address, unsigned char value)
{
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	d8 2f       	mov	r29, r24
 510:	c6 2f       	mov	r28, r22
	//twi_write(DS3231_Write_addr);
	//twi_write(address);
	//twi_write(value);
	//twi_stop();
	
	i2c_start_wait(DS3231_Write_addr + I2C_WRITE);	// set device address and write mode
 512:	80 ed       	ldi	r24, 0xD0	; 208
 514:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
	i2c_write(address);
 518:	8d 2f       	mov	r24, r29
 51a:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
	i2c_write(value);
 51e:	8c 2f       	mov	r24, r28
 520:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
	i2c_stop();
 524:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
	
}
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <DS3231_init>:

void DS3231_init()
{
	//twi_Init(100000);
	
	DS3231_Write(controlREG, 0x00);
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	8e e0       	ldi	r24, 0x0E	; 14
 532:	0e 94 85 02 	call	0x50a	; 0x50a <DS3231_Write>
	DS3231_Write(statusREG, 0x08);
 536:	68 e0       	ldi	r22, 0x08	; 8
 538:	8f e0       	ldi	r24, 0x0F	; 15
 53a:	0e 94 85 02 	call	0x50a	; 0x50a <DS3231_Write>
 53e:	08 95       	ret

00000540 <getTime>:
}


void getTime(unsigned char *p3, unsigned char *p2, unsigned char *p1, unsigned char *p0, unsigned char hour_format)
{
 540:	af 92       	push	r10
 542:	bf 92       	push	r11
 544:	cf 92       	push	r12
 546:	df 92       	push	r13
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	0f 93       	push	r16
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	ec 01       	movw	r28, r24
 554:	7b 01       	movw	r14, r22
 556:	6a 01       	movw	r12, r20
 558:	59 01       	movw	r10, r18
	unsigned char tmp = 0;
	
	tmp = DS3231_Read(secondREG);
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	0e 94 76 02 	call	0x4ec	; 0x4ec <DS3231_Read>
	*p1 = bcd_to_decimal(tmp);
 560:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <bcd_to_decimal>
 564:	f6 01       	movw	r30, r12
 566:	80 83       	st	Z, r24
	tmp = DS3231_Read(minuteREG);
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 76 02 	call	0x4ec	; 0x4ec <DS3231_Read>
	*p2 = bcd_to_decimal(tmp);
 56e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <bcd_to_decimal>
 572:	f7 01       	movw	r30, r14
 574:	80 83       	st	Z, r24
	
	switch(hour_format)
 576:	01 30       	cpi	r16, 0x01	; 1
 578:	81 f4       	brne	.+32     	; 0x59a <getTime+0x5a>
	{
		case 1:
		{
			tmp = DS3231_Read(hourREG);
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	0e 94 76 02 	call	0x4ec	; 0x4ec <DS3231_Read>
			tmp &= 0x20;
			*p0 = (unsigned char)(tmp >> 5);
 580:	85 fb       	bst	r24, 5
 582:	88 27       	eor	r24, r24
 584:	80 f9       	bld	r24, 0
 586:	f5 01       	movw	r30, r10
 588:	80 83       	st	Z, r24
			tmp = (0x1F & DS3231_Read(hourREG));
 58a:	82 e0       	ldi	r24, 0x02	; 2
 58c:	0e 94 76 02 	call	0x4ec	; 0x4ec <DS3231_Read>
			*p3 = bcd_to_decimal(tmp);
 590:	8f 71       	andi	r24, 0x1F	; 31
 592:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <bcd_to_decimal>
 596:	88 83       	st	Y, r24
			break;
 598:	07 c0       	rjmp	.+14     	; 0x5a8 <getTime+0x68>
		}
		default:
		{
			tmp = (0x3F & DS3231_Read(hourREG));
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	0e 94 76 02 	call	0x4ec	; 0x4ec <DS3231_Read>
			*p3 = bcd_to_decimal(tmp);
 5a0:	8f 73       	andi	r24, 0x3F	; 63
 5a2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <bcd_to_decimal>
 5a6:	88 83       	st	Y, r24
			break;
		}
	}
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	0f 91       	pop	r16
 5ae:	ff 90       	pop	r15
 5b0:	ef 90       	pop	r14
 5b2:	df 90       	pop	r13
 5b4:	cf 90       	pop	r12
 5b6:	bf 90       	pop	r11
 5b8:	af 90       	pop	r10
 5ba:	08 95       	ret

000005bc <tajmer0_init>:
volatile unsigned int brojac_prekida_tajmera0;


void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 5c0:	93 e0       	ldi	r25, 0x03	; 3
 5c2:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 5c4:	99 ef       	ldi	r25, 0xF9	; 249
 5c6:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 5c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 5cc:	08 95       	ret

000005ce <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
 5e2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <brojac_prekida_tajmera0>
 5e6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <brojac_prekida_tajmera0+0x1>
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <brojac_prekida_tajmera0+0x1>
 5f0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)	//1ms * 10 = 10ms
 5f4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <brojac_prekida_tajmera0>
 5f8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <brojac_prekida_tajmera0+0x1>
 5fc:	0a 97       	sbiw	r24, 0x0a	; 10
 5fe:	39 f4       	brne	.+14     	; 0x60e <__vector_14+0x40>
	{
		brojac_prekida_tajmera0 = 0;
 600:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <brojac_prekida_tajmera0+0x1>
 604:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;				
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <flag_prekid_10ms>
		
	}
	
	
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
	poslato=0;
 626:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <poslato>
}
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <__vector_18>:

ISR(USART_RX_vect)
{
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	8f 93       	push	r24
 640:	ef 93       	push	r30
 642:	ff 93       	push	r31
	input_char=UDR0;
 644:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 648:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 64c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <buff_size>
 650:	88 30       	cpi	r24, 0x08	; 8
 652:	98 f4       	brcc	.+38     	; 0x67a <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 654:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <buff_size>
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <input_char>
 65e:	e0 5e       	subi	r30, 0xE0	; 224
 660:	fe 4f       	sbci	r31, 0xFE	; 254
 662:	80 83       	st	Z, r24
		buff_size++;
 664:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <buff_size>
 668:	8f 5f       	subi	r24, 0xFF	; 255
 66a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <buff_size>
		input_buffer[buff_size]='\0';
 66e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <buff_size>
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	e0 5e       	subi	r30, 0xE0	; 224
 676:	fe 4f       	sbci	r31, 0xFE	; 254
 678:	10 82       	st	Z, r1
	}
}
 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	8f 91       	pop	r24
 680:	0f 90       	pop	r0
 682:	0f be       	out	0x3f, r0	; 63
 684:	0f 90       	pop	r0
 686:	1f 90       	pop	r1
 688:	18 95       	reti

0000068a <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 690:	88 ed       	ldi	r24, 0xD8	; 216
 692:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 696:	86 e0       	ldi	r24, 0x06	; 6
 698:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 69c:	8f ec       	ldi	r24, 0xCF	; 207
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 6a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 6a8:	08 95       	ret

000006aa <send_str>:
}

void send_str(char *str)
{
 6aa:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 6ac:	90 81       	ld	r25, Z
 6ae:	99 23       	and	r25, r25
 6b0:	71 f0       	breq	.+28     	; 0x6ce <send_str+0x24>
 6b2:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 6b4:	a6 ec       	ldi	r26, 0xC6	; 198
 6b6:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 6ba:	9c 93       	st	X, r25
		poslato=1;
 6bc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <poslato>
		while (poslato);
 6c0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <poslato>
 6c4:	91 11       	cpse	r25, r1
 6c6:	fc cf       	rjmp	.-8      	; 0x6c0 <send_str+0x16>
void send_str(char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 6c8:	91 91       	ld	r25, Z+
 6ca:	91 11       	cpse	r25, r1
 6cc:	f6 cf       	rjmp	.-20     	; 0x6ba <send_str+0x10>
 6ce:	08 95       	ret

000006d0 <sprintf>:
 6d0:	ae e0       	ldi	r26, 0x0E	; 14
 6d2:	b0 e0       	ldi	r27, 0x00	; 0
 6d4:	ee e6       	ldi	r30, 0x6E	; 110
 6d6:	f3 e0       	ldi	r31, 0x03	; 3
 6d8:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__prologue_saves__+0x1c>
 6dc:	0d 89       	ldd	r16, Y+21	; 0x15
 6de:	1e 89       	ldd	r17, Y+22	; 0x16
 6e0:	86 e0       	ldi	r24, 0x06	; 6
 6e2:	8c 83       	std	Y+4, r24	; 0x04
 6e4:	1a 83       	std	Y+2, r17	; 0x02
 6e6:	09 83       	std	Y+1, r16	; 0x01
 6e8:	8f ef       	ldi	r24, 0xFF	; 255
 6ea:	9f e7       	ldi	r25, 0x7F	; 127
 6ec:	9e 83       	std	Y+6, r25	; 0x06
 6ee:	8d 83       	std	Y+5, r24	; 0x05
 6f0:	ae 01       	movw	r20, r28
 6f2:	47 5e       	subi	r20, 0xE7	; 231
 6f4:	5f 4f       	sbci	r21, 0xFF	; 255
 6f6:	6f 89       	ldd	r22, Y+23	; 0x17
 6f8:	78 8d       	ldd	r23, Y+24	; 0x18
 6fa:	ce 01       	movw	r24, r28
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	0e 94 8a 03 	call	0x714	; 0x714 <vfprintf>
 702:	ef 81       	ldd	r30, Y+7	; 0x07
 704:	f8 85       	ldd	r31, Y+8	; 0x08
 706:	e0 0f       	add	r30, r16
 708:	f1 1f       	adc	r31, r17
 70a:	10 82       	st	Z, r1
 70c:	2e 96       	adiw	r28, 0x0e	; 14
 70e:	e4 e0       	ldi	r30, 0x04	; 4
 710:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__epilogue_restores__+0x1c>

00000714 <vfprintf>:
 714:	ab e0       	ldi	r26, 0x0B	; 11
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	e0 e9       	ldi	r30, 0x90	; 144
 71a:	f3 e0       	ldi	r31, 0x03	; 3
 71c:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__prologue_saves__>
 720:	6c 01       	movw	r12, r24
 722:	7b 01       	movw	r14, r22
 724:	8a 01       	movw	r16, r20
 726:	fc 01       	movw	r30, r24
 728:	17 82       	std	Z+7, r1	; 0x07
 72a:	16 82       	std	Z+6, r1	; 0x06
 72c:	83 81       	ldd	r24, Z+3	; 0x03
 72e:	81 ff       	sbrs	r24, 1
 730:	cc c1       	rjmp	.+920    	; 0xaca <__stack+0x1cb>
 732:	ce 01       	movw	r24, r28
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	3c 01       	movw	r6, r24
 738:	f6 01       	movw	r30, r12
 73a:	93 81       	ldd	r25, Z+3	; 0x03
 73c:	f7 01       	movw	r30, r14
 73e:	93 fd       	sbrc	r25, 3
 740:	85 91       	lpm	r24, Z+
 742:	93 ff       	sbrs	r25, 3
 744:	81 91       	ld	r24, Z+
 746:	7f 01       	movw	r14, r30
 748:	88 23       	and	r24, r24
 74a:	09 f4       	brne	.+2      	; 0x74e <vfprintf+0x3a>
 74c:	ba c1       	rjmp	.+884    	; 0xac2 <__stack+0x1c3>
 74e:	85 32       	cpi	r24, 0x25	; 37
 750:	39 f4       	brne	.+14     	; 0x760 <vfprintf+0x4c>
 752:	93 fd       	sbrc	r25, 3
 754:	85 91       	lpm	r24, Z+
 756:	93 ff       	sbrs	r25, 3
 758:	81 91       	ld	r24, Z+
 75a:	7f 01       	movw	r14, r30
 75c:	85 32       	cpi	r24, 0x25	; 37
 75e:	29 f4       	brne	.+10     	; 0x76a <vfprintf+0x56>
 760:	b6 01       	movw	r22, r12
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 768:	e7 cf       	rjmp	.-50     	; 0x738 <vfprintf+0x24>
 76a:	91 2c       	mov	r9, r1
 76c:	21 2c       	mov	r2, r1
 76e:	31 2c       	mov	r3, r1
 770:	ff e1       	ldi	r31, 0x1F	; 31
 772:	f3 15       	cp	r31, r3
 774:	d8 f0       	brcs	.+54     	; 0x7ac <vfprintf+0x98>
 776:	8b 32       	cpi	r24, 0x2B	; 43
 778:	79 f0       	breq	.+30     	; 0x798 <vfprintf+0x84>
 77a:	38 f4       	brcc	.+14     	; 0x78a <vfprintf+0x76>
 77c:	80 32       	cpi	r24, 0x20	; 32
 77e:	79 f0       	breq	.+30     	; 0x79e <vfprintf+0x8a>
 780:	83 32       	cpi	r24, 0x23	; 35
 782:	a1 f4       	brne	.+40     	; 0x7ac <vfprintf+0x98>
 784:	23 2d       	mov	r18, r3
 786:	20 61       	ori	r18, 0x10	; 16
 788:	1d c0       	rjmp	.+58     	; 0x7c4 <vfprintf+0xb0>
 78a:	8d 32       	cpi	r24, 0x2D	; 45
 78c:	61 f0       	breq	.+24     	; 0x7a6 <vfprintf+0x92>
 78e:	80 33       	cpi	r24, 0x30	; 48
 790:	69 f4       	brne	.+26     	; 0x7ac <vfprintf+0x98>
 792:	23 2d       	mov	r18, r3
 794:	21 60       	ori	r18, 0x01	; 1
 796:	16 c0       	rjmp	.+44     	; 0x7c4 <vfprintf+0xb0>
 798:	83 2d       	mov	r24, r3
 79a:	82 60       	ori	r24, 0x02	; 2
 79c:	38 2e       	mov	r3, r24
 79e:	e3 2d       	mov	r30, r3
 7a0:	e4 60       	ori	r30, 0x04	; 4
 7a2:	3e 2e       	mov	r3, r30
 7a4:	2a c0       	rjmp	.+84     	; 0x7fa <vfprintf+0xe6>
 7a6:	f3 2d       	mov	r31, r3
 7a8:	f8 60       	ori	r31, 0x08	; 8
 7aa:	1d c0       	rjmp	.+58     	; 0x7e6 <vfprintf+0xd2>
 7ac:	37 fc       	sbrc	r3, 7
 7ae:	2d c0       	rjmp	.+90     	; 0x80a <vfprintf+0xf6>
 7b0:	20 ed       	ldi	r18, 0xD0	; 208
 7b2:	28 0f       	add	r18, r24
 7b4:	2a 30       	cpi	r18, 0x0A	; 10
 7b6:	40 f0       	brcs	.+16     	; 0x7c8 <vfprintf+0xb4>
 7b8:	8e 32       	cpi	r24, 0x2E	; 46
 7ba:	b9 f4       	brne	.+46     	; 0x7ea <vfprintf+0xd6>
 7bc:	36 fc       	sbrc	r3, 6
 7be:	81 c1       	rjmp	.+770    	; 0xac2 <__stack+0x1c3>
 7c0:	23 2d       	mov	r18, r3
 7c2:	20 64       	ori	r18, 0x40	; 64
 7c4:	32 2e       	mov	r3, r18
 7c6:	19 c0       	rjmp	.+50     	; 0x7fa <vfprintf+0xe6>
 7c8:	36 fe       	sbrs	r3, 6
 7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <vfprintf+0xc4>
 7cc:	8a e0       	ldi	r24, 0x0A	; 10
 7ce:	98 9e       	mul	r9, r24
 7d0:	20 0d       	add	r18, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	92 2e       	mov	r9, r18
 7d6:	11 c0       	rjmp	.+34     	; 0x7fa <vfprintf+0xe6>
 7d8:	ea e0       	ldi	r30, 0x0A	; 10
 7da:	2e 9e       	mul	r2, r30
 7dc:	20 0d       	add	r18, r0
 7de:	11 24       	eor	r1, r1
 7e0:	22 2e       	mov	r2, r18
 7e2:	f3 2d       	mov	r31, r3
 7e4:	f0 62       	ori	r31, 0x20	; 32
 7e6:	3f 2e       	mov	r3, r31
 7e8:	08 c0       	rjmp	.+16     	; 0x7fa <vfprintf+0xe6>
 7ea:	8c 36       	cpi	r24, 0x6C	; 108
 7ec:	21 f4       	brne	.+8      	; 0x7f6 <vfprintf+0xe2>
 7ee:	83 2d       	mov	r24, r3
 7f0:	80 68       	ori	r24, 0x80	; 128
 7f2:	38 2e       	mov	r3, r24
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <vfprintf+0xe6>
 7f6:	88 36       	cpi	r24, 0x68	; 104
 7f8:	41 f4       	brne	.+16     	; 0x80a <vfprintf+0xf6>
 7fa:	f7 01       	movw	r30, r14
 7fc:	93 fd       	sbrc	r25, 3
 7fe:	85 91       	lpm	r24, Z+
 800:	93 ff       	sbrs	r25, 3
 802:	81 91       	ld	r24, Z+
 804:	7f 01       	movw	r14, r30
 806:	81 11       	cpse	r24, r1
 808:	b3 cf       	rjmp	.-154    	; 0x770 <vfprintf+0x5c>
 80a:	98 2f       	mov	r25, r24
 80c:	9f 7d       	andi	r25, 0xDF	; 223
 80e:	95 54       	subi	r25, 0x45	; 69
 810:	93 30       	cpi	r25, 0x03	; 3
 812:	28 f4       	brcc	.+10     	; 0x81e <vfprintf+0x10a>
 814:	0c 5f       	subi	r16, 0xFC	; 252
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	9f e3       	ldi	r25, 0x3F	; 63
 81a:	99 83       	std	Y+1, r25	; 0x01
 81c:	0d c0       	rjmp	.+26     	; 0x838 <vfprintf+0x124>
 81e:	83 36       	cpi	r24, 0x63	; 99
 820:	31 f0       	breq	.+12     	; 0x82e <vfprintf+0x11a>
 822:	83 37       	cpi	r24, 0x73	; 115
 824:	71 f0       	breq	.+28     	; 0x842 <vfprintf+0x12e>
 826:	83 35       	cpi	r24, 0x53	; 83
 828:	09 f0       	breq	.+2      	; 0x82c <vfprintf+0x118>
 82a:	59 c0       	rjmp	.+178    	; 0x8de <vfprintf+0x1ca>
 82c:	21 c0       	rjmp	.+66     	; 0x870 <vfprintf+0x15c>
 82e:	f8 01       	movw	r30, r16
 830:	80 81       	ld	r24, Z
 832:	89 83       	std	Y+1, r24	; 0x01
 834:	0e 5f       	subi	r16, 0xFE	; 254
 836:	1f 4f       	sbci	r17, 0xFF	; 255
 838:	88 24       	eor	r8, r8
 83a:	83 94       	inc	r8
 83c:	91 2c       	mov	r9, r1
 83e:	53 01       	movw	r10, r6
 840:	13 c0       	rjmp	.+38     	; 0x868 <vfprintf+0x154>
 842:	28 01       	movw	r4, r16
 844:	f2 e0       	ldi	r31, 0x02	; 2
 846:	4f 0e       	add	r4, r31
 848:	51 1c       	adc	r5, r1
 84a:	f8 01       	movw	r30, r16
 84c:	a0 80       	ld	r10, Z
 84e:	b1 80       	ldd	r11, Z+1	; 0x01
 850:	36 fe       	sbrs	r3, 6
 852:	03 c0       	rjmp	.+6      	; 0x85a <vfprintf+0x146>
 854:	69 2d       	mov	r22, r9
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	02 c0       	rjmp	.+4      	; 0x85e <vfprintf+0x14a>
 85a:	6f ef       	ldi	r22, 0xFF	; 255
 85c:	7f ef       	ldi	r23, 0xFF	; 255
 85e:	c5 01       	movw	r24, r10
 860:	0e 94 76 05 	call	0xaec	; 0xaec <strnlen>
 864:	4c 01       	movw	r8, r24
 866:	82 01       	movw	r16, r4
 868:	f3 2d       	mov	r31, r3
 86a:	ff 77       	andi	r31, 0x7F	; 127
 86c:	3f 2e       	mov	r3, r31
 86e:	16 c0       	rjmp	.+44     	; 0x89c <vfprintf+0x188>
 870:	28 01       	movw	r4, r16
 872:	22 e0       	ldi	r18, 0x02	; 2
 874:	42 0e       	add	r4, r18
 876:	51 1c       	adc	r5, r1
 878:	f8 01       	movw	r30, r16
 87a:	a0 80       	ld	r10, Z
 87c:	b1 80       	ldd	r11, Z+1	; 0x01
 87e:	36 fe       	sbrs	r3, 6
 880:	03 c0       	rjmp	.+6      	; 0x888 <vfprintf+0x174>
 882:	69 2d       	mov	r22, r9
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	02 c0       	rjmp	.+4      	; 0x88c <vfprintf+0x178>
 888:	6f ef       	ldi	r22, 0xFF	; 255
 88a:	7f ef       	ldi	r23, 0xFF	; 255
 88c:	c5 01       	movw	r24, r10
 88e:	0e 94 6b 05 	call	0xad6	; 0xad6 <strnlen_P>
 892:	4c 01       	movw	r8, r24
 894:	f3 2d       	mov	r31, r3
 896:	f0 68       	ori	r31, 0x80	; 128
 898:	3f 2e       	mov	r3, r31
 89a:	82 01       	movw	r16, r4
 89c:	33 fc       	sbrc	r3, 3
 89e:	1b c0       	rjmp	.+54     	; 0x8d6 <vfprintf+0x1c2>
 8a0:	82 2d       	mov	r24, r2
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	88 16       	cp	r8, r24
 8a6:	99 06       	cpc	r9, r25
 8a8:	b0 f4       	brcc	.+44     	; 0x8d6 <vfprintf+0x1c2>
 8aa:	b6 01       	movw	r22, r12
 8ac:	80 e2       	ldi	r24, 0x20	; 32
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 8b4:	2a 94       	dec	r2
 8b6:	f4 cf       	rjmp	.-24     	; 0x8a0 <vfprintf+0x18c>
 8b8:	f5 01       	movw	r30, r10
 8ba:	37 fc       	sbrc	r3, 7
 8bc:	85 91       	lpm	r24, Z+
 8be:	37 fe       	sbrs	r3, 7
 8c0:	81 91       	ld	r24, Z+
 8c2:	5f 01       	movw	r10, r30
 8c4:	b6 01       	movw	r22, r12
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 8cc:	21 10       	cpse	r2, r1
 8ce:	2a 94       	dec	r2
 8d0:	21 e0       	ldi	r18, 0x01	; 1
 8d2:	82 1a       	sub	r8, r18
 8d4:	91 08       	sbc	r9, r1
 8d6:	81 14       	cp	r8, r1
 8d8:	91 04       	cpc	r9, r1
 8da:	71 f7       	brne	.-36     	; 0x8b8 <vfprintf+0x1a4>
 8dc:	e8 c0       	rjmp	.+464    	; 0xaae <__stack+0x1af>
 8de:	84 36       	cpi	r24, 0x64	; 100
 8e0:	11 f0       	breq	.+4      	; 0x8e6 <vfprintf+0x1d2>
 8e2:	89 36       	cpi	r24, 0x69	; 105
 8e4:	41 f5       	brne	.+80     	; 0x936 <__stack+0x37>
 8e6:	f8 01       	movw	r30, r16
 8e8:	37 fe       	sbrs	r3, 7
 8ea:	07 c0       	rjmp	.+14     	; 0x8fa <vfprintf+0x1e6>
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	82 81       	ldd	r24, Z+2	; 0x02
 8f2:	93 81       	ldd	r25, Z+3	; 0x03
 8f4:	0c 5f       	subi	r16, 0xFC	; 252
 8f6:	1f 4f       	sbci	r17, 0xFF	; 255
 8f8:	08 c0       	rjmp	.+16     	; 0x90a <__stack+0xb>
 8fa:	60 81       	ld	r22, Z
 8fc:	71 81       	ldd	r23, Z+1	; 0x01
 8fe:	07 2e       	mov	r0, r23
 900:	00 0c       	add	r0, r0
 902:	88 0b       	sbc	r24, r24
 904:	99 0b       	sbc	r25, r25
 906:	0e 5f       	subi	r16, 0xFE	; 254
 908:	1f 4f       	sbci	r17, 0xFF	; 255
 90a:	f3 2d       	mov	r31, r3
 90c:	ff 76       	andi	r31, 0x6F	; 111
 90e:	3f 2e       	mov	r3, r31
 910:	97 ff       	sbrs	r25, 7
 912:	09 c0       	rjmp	.+18     	; 0x926 <__stack+0x27>
 914:	90 95       	com	r25
 916:	80 95       	com	r24
 918:	70 95       	com	r23
 91a:	61 95       	neg	r22
 91c:	7f 4f       	sbci	r23, 0xFF	; 255
 91e:	8f 4f       	sbci	r24, 0xFF	; 255
 920:	9f 4f       	sbci	r25, 0xFF	; 255
 922:	f0 68       	ori	r31, 0x80	; 128
 924:	3f 2e       	mov	r3, r31
 926:	2a e0       	ldi	r18, 0x0A	; 10
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	a3 01       	movw	r20, r6
 92c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__ultoa_invert>
 930:	88 2e       	mov	r8, r24
 932:	86 18       	sub	r8, r6
 934:	45 c0       	rjmp	.+138    	; 0x9c0 <__stack+0xc1>
 936:	85 37       	cpi	r24, 0x75	; 117
 938:	31 f4       	brne	.+12     	; 0x946 <__stack+0x47>
 93a:	23 2d       	mov	r18, r3
 93c:	2f 7e       	andi	r18, 0xEF	; 239
 93e:	b2 2e       	mov	r11, r18
 940:	2a e0       	ldi	r18, 0x0A	; 10
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	25 c0       	rjmp	.+74     	; 0x990 <__stack+0x91>
 946:	93 2d       	mov	r25, r3
 948:	99 7f       	andi	r25, 0xF9	; 249
 94a:	b9 2e       	mov	r11, r25
 94c:	8f 36       	cpi	r24, 0x6F	; 111
 94e:	c1 f0       	breq	.+48     	; 0x980 <__stack+0x81>
 950:	18 f4       	brcc	.+6      	; 0x958 <__stack+0x59>
 952:	88 35       	cpi	r24, 0x58	; 88
 954:	79 f0       	breq	.+30     	; 0x974 <__stack+0x75>
 956:	b5 c0       	rjmp	.+362    	; 0xac2 <__stack+0x1c3>
 958:	80 37       	cpi	r24, 0x70	; 112
 95a:	19 f0       	breq	.+6      	; 0x962 <__stack+0x63>
 95c:	88 37       	cpi	r24, 0x78	; 120
 95e:	21 f0       	breq	.+8      	; 0x968 <__stack+0x69>
 960:	b0 c0       	rjmp	.+352    	; 0xac2 <__stack+0x1c3>
 962:	e9 2f       	mov	r30, r25
 964:	e0 61       	ori	r30, 0x10	; 16
 966:	be 2e       	mov	r11, r30
 968:	b4 fe       	sbrs	r11, 4
 96a:	0d c0       	rjmp	.+26     	; 0x986 <__stack+0x87>
 96c:	fb 2d       	mov	r31, r11
 96e:	f4 60       	ori	r31, 0x04	; 4
 970:	bf 2e       	mov	r11, r31
 972:	09 c0       	rjmp	.+18     	; 0x986 <__stack+0x87>
 974:	34 fe       	sbrs	r3, 4
 976:	0a c0       	rjmp	.+20     	; 0x98c <__stack+0x8d>
 978:	29 2f       	mov	r18, r25
 97a:	26 60       	ori	r18, 0x06	; 6
 97c:	b2 2e       	mov	r11, r18
 97e:	06 c0       	rjmp	.+12     	; 0x98c <__stack+0x8d>
 980:	28 e0       	ldi	r18, 0x08	; 8
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	05 c0       	rjmp	.+10     	; 0x990 <__stack+0x91>
 986:	20 e1       	ldi	r18, 0x10	; 16
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x91>
 98c:	20 e1       	ldi	r18, 0x10	; 16
 98e:	32 e0       	ldi	r19, 0x02	; 2
 990:	f8 01       	movw	r30, r16
 992:	b7 fe       	sbrs	r11, 7
 994:	07 c0       	rjmp	.+14     	; 0x9a4 <__stack+0xa5>
 996:	60 81       	ld	r22, Z
 998:	71 81       	ldd	r23, Z+1	; 0x01
 99a:	82 81       	ldd	r24, Z+2	; 0x02
 99c:	93 81       	ldd	r25, Z+3	; 0x03
 99e:	0c 5f       	subi	r16, 0xFC	; 252
 9a0:	1f 4f       	sbci	r17, 0xFF	; 255
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <__stack+0xb1>
 9a4:	60 81       	ld	r22, Z
 9a6:	71 81       	ldd	r23, Z+1	; 0x01
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 5f       	subi	r16, 0xFE	; 254
 9ae:	1f 4f       	sbci	r17, 0xFF	; 255
 9b0:	a3 01       	movw	r20, r6
 9b2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__ultoa_invert>
 9b6:	88 2e       	mov	r8, r24
 9b8:	86 18       	sub	r8, r6
 9ba:	fb 2d       	mov	r31, r11
 9bc:	ff 77       	andi	r31, 0x7F	; 127
 9be:	3f 2e       	mov	r3, r31
 9c0:	36 fe       	sbrs	r3, 6
 9c2:	0d c0       	rjmp	.+26     	; 0x9de <__stack+0xdf>
 9c4:	23 2d       	mov	r18, r3
 9c6:	2e 7f       	andi	r18, 0xFE	; 254
 9c8:	a2 2e       	mov	r10, r18
 9ca:	89 14       	cp	r8, r9
 9cc:	58 f4       	brcc	.+22     	; 0x9e4 <__stack+0xe5>
 9ce:	34 fe       	sbrs	r3, 4
 9d0:	0b c0       	rjmp	.+22     	; 0x9e8 <__stack+0xe9>
 9d2:	32 fc       	sbrc	r3, 2
 9d4:	09 c0       	rjmp	.+18     	; 0x9e8 <__stack+0xe9>
 9d6:	83 2d       	mov	r24, r3
 9d8:	8e 7e       	andi	r24, 0xEE	; 238
 9da:	a8 2e       	mov	r10, r24
 9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <__stack+0xe9>
 9de:	b8 2c       	mov	r11, r8
 9e0:	a3 2c       	mov	r10, r3
 9e2:	03 c0       	rjmp	.+6      	; 0x9ea <__stack+0xeb>
 9e4:	b8 2c       	mov	r11, r8
 9e6:	01 c0       	rjmp	.+2      	; 0x9ea <__stack+0xeb>
 9e8:	b9 2c       	mov	r11, r9
 9ea:	a4 fe       	sbrs	r10, 4
 9ec:	0f c0       	rjmp	.+30     	; 0xa0c <__stack+0x10d>
 9ee:	fe 01       	movw	r30, r28
 9f0:	e8 0d       	add	r30, r8
 9f2:	f1 1d       	adc	r31, r1
 9f4:	80 81       	ld	r24, Z
 9f6:	80 33       	cpi	r24, 0x30	; 48
 9f8:	21 f4       	brne	.+8      	; 0xa02 <__stack+0x103>
 9fa:	9a 2d       	mov	r25, r10
 9fc:	99 7e       	andi	r25, 0xE9	; 233
 9fe:	a9 2e       	mov	r10, r25
 a00:	09 c0       	rjmp	.+18     	; 0xa14 <__stack+0x115>
 a02:	a2 fe       	sbrs	r10, 2
 a04:	06 c0       	rjmp	.+12     	; 0xa12 <__stack+0x113>
 a06:	b3 94       	inc	r11
 a08:	b3 94       	inc	r11
 a0a:	04 c0       	rjmp	.+8      	; 0xa14 <__stack+0x115>
 a0c:	8a 2d       	mov	r24, r10
 a0e:	86 78       	andi	r24, 0x86	; 134
 a10:	09 f0       	breq	.+2      	; 0xa14 <__stack+0x115>
 a12:	b3 94       	inc	r11
 a14:	a3 fc       	sbrc	r10, 3
 a16:	11 c0       	rjmp	.+34     	; 0xa3a <__stack+0x13b>
 a18:	a0 fe       	sbrs	r10, 0
 a1a:	06 c0       	rjmp	.+12     	; 0xa28 <__stack+0x129>
 a1c:	b2 14       	cp	r11, r2
 a1e:	88 f4       	brcc	.+34     	; 0xa42 <__stack+0x143>
 a20:	28 0c       	add	r2, r8
 a22:	92 2c       	mov	r9, r2
 a24:	9b 18       	sub	r9, r11
 a26:	0e c0       	rjmp	.+28     	; 0xa44 <__stack+0x145>
 a28:	b2 14       	cp	r11, r2
 a2a:	60 f4       	brcc	.+24     	; 0xa44 <__stack+0x145>
 a2c:	b6 01       	movw	r22, r12
 a2e:	80 e2       	ldi	r24, 0x20	; 32
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 a36:	b3 94       	inc	r11
 a38:	f7 cf       	rjmp	.-18     	; 0xa28 <__stack+0x129>
 a3a:	b2 14       	cp	r11, r2
 a3c:	18 f4       	brcc	.+6      	; 0xa44 <__stack+0x145>
 a3e:	2b 18       	sub	r2, r11
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <__stack+0x147>
 a42:	98 2c       	mov	r9, r8
 a44:	21 2c       	mov	r2, r1
 a46:	a4 fe       	sbrs	r10, 4
 a48:	10 c0       	rjmp	.+32     	; 0xa6a <__stack+0x16b>
 a4a:	b6 01       	movw	r22, r12
 a4c:	80 e3       	ldi	r24, 0x30	; 48
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 a54:	a2 fe       	sbrs	r10, 2
 a56:	17 c0       	rjmp	.+46     	; 0xa86 <__stack+0x187>
 a58:	a1 fc       	sbrc	r10, 1
 a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__stack+0x163>
 a5c:	88 e7       	ldi	r24, 0x78	; 120
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <__stack+0x167>
 a62:	88 e5       	ldi	r24, 0x58	; 88
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	b6 01       	movw	r22, r12
 a68:	0c c0       	rjmp	.+24     	; 0xa82 <__stack+0x183>
 a6a:	8a 2d       	mov	r24, r10
 a6c:	86 78       	andi	r24, 0x86	; 134
 a6e:	59 f0       	breq	.+22     	; 0xa86 <__stack+0x187>
 a70:	a1 fe       	sbrs	r10, 1
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <__stack+0x179>
 a74:	8b e2       	ldi	r24, 0x2B	; 43
 a76:	01 c0       	rjmp	.+2      	; 0xa7a <__stack+0x17b>
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	a7 fc       	sbrc	r10, 7
 a7c:	8d e2       	ldi	r24, 0x2D	; 45
 a7e:	b6 01       	movw	r22, r12
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 a86:	89 14       	cp	r8, r9
 a88:	38 f4       	brcc	.+14     	; 0xa98 <__stack+0x199>
 a8a:	b6 01       	movw	r22, r12
 a8c:	80 e3       	ldi	r24, 0x30	; 48
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 a94:	9a 94       	dec	r9
 a96:	f7 cf       	rjmp	.-18     	; 0xa86 <__stack+0x187>
 a98:	8a 94       	dec	r8
 a9a:	f3 01       	movw	r30, r6
 a9c:	e8 0d       	add	r30, r8
 a9e:	f1 1d       	adc	r31, r1
 aa0:	80 81       	ld	r24, Z
 aa2:	b6 01       	movw	r22, r12
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 aaa:	81 10       	cpse	r8, r1
 aac:	f5 cf       	rjmp	.-22     	; 0xa98 <__stack+0x199>
 aae:	22 20       	and	r2, r2
 ab0:	09 f4       	brne	.+2      	; 0xab4 <__stack+0x1b5>
 ab2:	42 ce       	rjmp	.-892    	; 0x738 <vfprintf+0x24>
 ab4:	b6 01       	movw	r22, r12
 ab6:	80 e2       	ldi	r24, 0x20	; 32
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 abe:	2a 94       	dec	r2
 ac0:	f6 cf       	rjmp	.-20     	; 0xaae <__stack+0x1af>
 ac2:	f6 01       	movw	r30, r12
 ac4:	86 81       	ldd	r24, Z+6	; 0x06
 ac6:	97 81       	ldd	r25, Z+7	; 0x07
 ac8:	02 c0       	rjmp	.+4      	; 0xace <__stack+0x1cf>
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	9f ef       	ldi	r25, 0xFF	; 255
 ace:	2b 96       	adiw	r28, 0x0b	; 11
 ad0:	e2 e1       	ldi	r30, 0x12	; 18
 ad2:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__epilogue_restores__>

00000ad6 <strnlen_P>:
 ad6:	fc 01       	movw	r30, r24
 ad8:	05 90       	lpm	r0, Z+
 ada:	61 50       	subi	r22, 0x01	; 1
 adc:	70 40       	sbci	r23, 0x00	; 0
 ade:	01 10       	cpse	r0, r1
 ae0:	d8 f7       	brcc	.-10     	; 0xad8 <strnlen_P+0x2>
 ae2:	80 95       	com	r24
 ae4:	90 95       	com	r25
 ae6:	8e 0f       	add	r24, r30
 ae8:	9f 1f       	adc	r25, r31
 aea:	08 95       	ret

00000aec <strnlen>:
 aec:	fc 01       	movw	r30, r24
 aee:	61 50       	subi	r22, 0x01	; 1
 af0:	70 40       	sbci	r23, 0x00	; 0
 af2:	01 90       	ld	r0, Z+
 af4:	01 10       	cpse	r0, r1
 af6:	d8 f7       	brcc	.-10     	; 0xaee <strnlen+0x2>
 af8:	80 95       	com	r24
 afa:	90 95       	com	r25
 afc:	8e 0f       	add	r24, r30
 afe:	9f 1f       	adc	r25, r31
 b00:	08 95       	ret

00000b02 <fputc>:
 b02:	0f 93       	push	r16
 b04:	1f 93       	push	r17
 b06:	cf 93       	push	r28
 b08:	df 93       	push	r29
 b0a:	fb 01       	movw	r30, r22
 b0c:	23 81       	ldd	r18, Z+3	; 0x03
 b0e:	21 fd       	sbrc	r18, 1
 b10:	03 c0       	rjmp	.+6      	; 0xb18 <fputc+0x16>
 b12:	8f ef       	ldi	r24, 0xFF	; 255
 b14:	9f ef       	ldi	r25, 0xFF	; 255
 b16:	2c c0       	rjmp	.+88     	; 0xb70 <fputc+0x6e>
 b18:	22 ff       	sbrs	r18, 2
 b1a:	16 c0       	rjmp	.+44     	; 0xb48 <fputc+0x46>
 b1c:	46 81       	ldd	r20, Z+6	; 0x06
 b1e:	57 81       	ldd	r21, Z+7	; 0x07
 b20:	24 81       	ldd	r18, Z+4	; 0x04
 b22:	35 81       	ldd	r19, Z+5	; 0x05
 b24:	42 17       	cp	r20, r18
 b26:	53 07       	cpc	r21, r19
 b28:	44 f4       	brge	.+16     	; 0xb3a <fputc+0x38>
 b2a:	a0 81       	ld	r26, Z
 b2c:	b1 81       	ldd	r27, Z+1	; 0x01
 b2e:	9d 01       	movw	r18, r26
 b30:	2f 5f       	subi	r18, 0xFF	; 255
 b32:	3f 4f       	sbci	r19, 0xFF	; 255
 b34:	31 83       	std	Z+1, r19	; 0x01
 b36:	20 83       	st	Z, r18
 b38:	8c 93       	st	X, r24
 b3a:	26 81       	ldd	r18, Z+6	; 0x06
 b3c:	37 81       	ldd	r19, Z+7	; 0x07
 b3e:	2f 5f       	subi	r18, 0xFF	; 255
 b40:	3f 4f       	sbci	r19, 0xFF	; 255
 b42:	37 83       	std	Z+7, r19	; 0x07
 b44:	26 83       	std	Z+6, r18	; 0x06
 b46:	14 c0       	rjmp	.+40     	; 0xb70 <fputc+0x6e>
 b48:	8b 01       	movw	r16, r22
 b4a:	ec 01       	movw	r28, r24
 b4c:	fb 01       	movw	r30, r22
 b4e:	00 84       	ldd	r0, Z+8	; 0x08
 b50:	f1 85       	ldd	r31, Z+9	; 0x09
 b52:	e0 2d       	mov	r30, r0
 b54:	09 95       	icall
 b56:	89 2b       	or	r24, r25
 b58:	e1 f6       	brne	.-72     	; 0xb12 <fputc+0x10>
 b5a:	d8 01       	movw	r26, r16
 b5c:	16 96       	adiw	r26, 0x06	; 6
 b5e:	8d 91       	ld	r24, X+
 b60:	9c 91       	ld	r25, X
 b62:	17 97       	sbiw	r26, 0x07	; 7
 b64:	01 96       	adiw	r24, 0x01	; 1
 b66:	17 96       	adiw	r26, 0x07	; 7
 b68:	9c 93       	st	X, r25
 b6a:	8e 93       	st	-X, r24
 b6c:	16 97       	sbiw	r26, 0x06	; 6
 b6e:	ce 01       	movw	r24, r28
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	1f 91       	pop	r17
 b76:	0f 91       	pop	r16
 b78:	08 95       	ret

00000b7a <__ultoa_invert>:
 b7a:	fa 01       	movw	r30, r20
 b7c:	aa 27       	eor	r26, r26
 b7e:	28 30       	cpi	r18, 0x08	; 8
 b80:	51 f1       	breq	.+84     	; 0xbd6 <__ultoa_invert+0x5c>
 b82:	20 31       	cpi	r18, 0x10	; 16
 b84:	81 f1       	breq	.+96     	; 0xbe6 <__ultoa_invert+0x6c>
 b86:	e8 94       	clt
 b88:	6f 93       	push	r22
 b8a:	6e 7f       	andi	r22, 0xFE	; 254
 b8c:	6e 5f       	subi	r22, 0xFE	; 254
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	af 4f       	sbci	r26, 0xFF	; 255
 b96:	b1 e0       	ldi	r27, 0x01	; 1
 b98:	3e d0       	rcall	.+124    	; 0xc16 <__ultoa_invert+0x9c>
 b9a:	b4 e0       	ldi	r27, 0x04	; 4
 b9c:	3c d0       	rcall	.+120    	; 0xc16 <__ultoa_invert+0x9c>
 b9e:	67 0f       	add	r22, r23
 ba0:	78 1f       	adc	r23, r24
 ba2:	89 1f       	adc	r24, r25
 ba4:	9a 1f       	adc	r25, r26
 ba6:	a1 1d       	adc	r26, r1
 ba8:	68 0f       	add	r22, r24
 baa:	79 1f       	adc	r23, r25
 bac:	8a 1f       	adc	r24, r26
 bae:	91 1d       	adc	r25, r1
 bb0:	a1 1d       	adc	r26, r1
 bb2:	6a 0f       	add	r22, r26
 bb4:	71 1d       	adc	r23, r1
 bb6:	81 1d       	adc	r24, r1
 bb8:	91 1d       	adc	r25, r1
 bba:	a1 1d       	adc	r26, r1
 bbc:	20 d0       	rcall	.+64     	; 0xbfe <__ultoa_invert+0x84>
 bbe:	09 f4       	brne	.+2      	; 0xbc2 <__ultoa_invert+0x48>
 bc0:	68 94       	set
 bc2:	3f 91       	pop	r19
 bc4:	2a e0       	ldi	r18, 0x0A	; 10
 bc6:	26 9f       	mul	r18, r22
 bc8:	11 24       	eor	r1, r1
 bca:	30 19       	sub	r19, r0
 bcc:	30 5d       	subi	r19, 0xD0	; 208
 bce:	31 93       	st	Z+, r19
 bd0:	de f6       	brtc	.-74     	; 0xb88 <__ultoa_invert+0xe>
 bd2:	cf 01       	movw	r24, r30
 bd4:	08 95       	ret
 bd6:	46 2f       	mov	r20, r22
 bd8:	47 70       	andi	r20, 0x07	; 7
 bda:	40 5d       	subi	r20, 0xD0	; 208
 bdc:	41 93       	st	Z+, r20
 bde:	b3 e0       	ldi	r27, 0x03	; 3
 be0:	0f d0       	rcall	.+30     	; 0xc00 <__ultoa_invert+0x86>
 be2:	c9 f7       	brne	.-14     	; 0xbd6 <__ultoa_invert+0x5c>
 be4:	f6 cf       	rjmp	.-20     	; 0xbd2 <__ultoa_invert+0x58>
 be6:	46 2f       	mov	r20, r22
 be8:	4f 70       	andi	r20, 0x0F	; 15
 bea:	40 5d       	subi	r20, 0xD0	; 208
 bec:	4a 33       	cpi	r20, 0x3A	; 58
 bee:	18 f0       	brcs	.+6      	; 0xbf6 <__ultoa_invert+0x7c>
 bf0:	49 5d       	subi	r20, 0xD9	; 217
 bf2:	31 fd       	sbrc	r19, 1
 bf4:	40 52       	subi	r20, 0x20	; 32
 bf6:	41 93       	st	Z+, r20
 bf8:	02 d0       	rcall	.+4      	; 0xbfe <__ultoa_invert+0x84>
 bfa:	a9 f7       	brne	.-22     	; 0xbe6 <__ultoa_invert+0x6c>
 bfc:	ea cf       	rjmp	.-44     	; 0xbd2 <__ultoa_invert+0x58>
 bfe:	b4 e0       	ldi	r27, 0x04	; 4
 c00:	a6 95       	lsr	r26
 c02:	97 95       	ror	r25
 c04:	87 95       	ror	r24
 c06:	77 95       	ror	r23
 c08:	67 95       	ror	r22
 c0a:	ba 95       	dec	r27
 c0c:	c9 f7       	brne	.-14     	; 0xc00 <__ultoa_invert+0x86>
 c0e:	00 97       	sbiw	r24, 0x00	; 0
 c10:	61 05       	cpc	r22, r1
 c12:	71 05       	cpc	r23, r1
 c14:	08 95       	ret
 c16:	9b 01       	movw	r18, r22
 c18:	ac 01       	movw	r20, r24
 c1a:	0a 2e       	mov	r0, r26
 c1c:	06 94       	lsr	r0
 c1e:	57 95       	ror	r21
 c20:	47 95       	ror	r20
 c22:	37 95       	ror	r19
 c24:	27 95       	ror	r18
 c26:	ba 95       	dec	r27
 c28:	c9 f7       	brne	.-14     	; 0xc1c <__ultoa_invert+0xa2>
 c2a:	62 0f       	add	r22, r18
 c2c:	73 1f       	adc	r23, r19
 c2e:	84 1f       	adc	r24, r20
 c30:	95 1f       	adc	r25, r21
 c32:	a0 1d       	adc	r26, r0
 c34:	08 95       	ret

00000c36 <__prologue_saves__>:
 c36:	2f 92       	push	r2
 c38:	3f 92       	push	r3
 c3a:	4f 92       	push	r4
 c3c:	5f 92       	push	r5
 c3e:	6f 92       	push	r6
 c40:	7f 92       	push	r7
 c42:	8f 92       	push	r8
 c44:	9f 92       	push	r9
 c46:	af 92       	push	r10
 c48:	bf 92       	push	r11
 c4a:	cf 92       	push	r12
 c4c:	df 92       	push	r13
 c4e:	ef 92       	push	r14
 c50:	ff 92       	push	r15
 c52:	0f 93       	push	r16
 c54:	1f 93       	push	r17
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	cd b7       	in	r28, 0x3d	; 61
 c5c:	de b7       	in	r29, 0x3e	; 62
 c5e:	ca 1b       	sub	r28, r26
 c60:	db 0b       	sbc	r29, r27
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
 c66:	de bf       	out	0x3e, r29	; 62
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	09 94       	ijmp

00000c6e <__epilogue_restores__>:
 c6e:	2a 88       	ldd	r2, Y+18	; 0x12
 c70:	39 88       	ldd	r3, Y+17	; 0x11
 c72:	48 88       	ldd	r4, Y+16	; 0x10
 c74:	5f 84       	ldd	r5, Y+15	; 0x0f
 c76:	6e 84       	ldd	r6, Y+14	; 0x0e
 c78:	7d 84       	ldd	r7, Y+13	; 0x0d
 c7a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c7c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c7e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c80:	b9 84       	ldd	r11, Y+9	; 0x09
 c82:	c8 84       	ldd	r12, Y+8	; 0x08
 c84:	df 80       	ldd	r13, Y+7	; 0x07
 c86:	ee 80       	ldd	r14, Y+6	; 0x06
 c88:	fd 80       	ldd	r15, Y+5	; 0x05
 c8a:	0c 81       	ldd	r16, Y+4	; 0x04
 c8c:	1b 81       	ldd	r17, Y+3	; 0x03
 c8e:	aa 81       	ldd	r26, Y+2	; 0x02
 c90:	b9 81       	ldd	r27, Y+1	; 0x01
 c92:	ce 0f       	add	r28, r30
 c94:	d1 1d       	adc	r29, r1
 c96:	0f b6       	in	r0, 0x3f	; 63
 c98:	f8 94       	cli
 c9a:	de bf       	out	0x3e, r29	; 62
 c9c:	0f be       	out	0x3f, r0	; 63
 c9e:	cd bf       	out	0x3d, r28	; 61
 ca0:	ed 01       	movw	r28, r26
 ca2:	08 95       	ret

00000ca4 <_exit>:
 ca4:	f8 94       	cli

00000ca6 <__stop_program>:
 ca6:	ff cf       	rjmp	.-2      	; 0xca6 <__stop_program>
