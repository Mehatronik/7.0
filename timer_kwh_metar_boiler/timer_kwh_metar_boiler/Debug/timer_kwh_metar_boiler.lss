
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  0000184e  000018e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000184e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  0080016e  0080016e  00001950  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000253d  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef6  00000000  00000000  000041b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018d3  00000000  00000000  000050a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  0000697c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2a  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002353  00000000  00000000  00007ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00009e39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_20>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e4       	ldi	r30, 0x4E	; 78
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 36       	cpi	r26, 0x6E	; 110
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e6       	ldi	r26, 0x6E	; 110
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3c       	cpi	r26, 0xC5	; 197
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
      9e:	0c 94 25 0c 	jmp	0x184a	; 0x184a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
      a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
      a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
      ac:	80 ec       	ldi	r24, 0xC0	; 192
      ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
      b2:	8e ee       	ldi	r24, 0xEE	; 238
      b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
      b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
      bc:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
      c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
      c2:	1f 92       	push	r1
      c4:	0f 92       	push	r0
      c6:	0f b6       	in	r0, 0x3f	; 63
      c8:	0f 92       	push	r0
      ca:	11 24       	eor	r1, r1
      cc:	8f 93       	push	r24
      ce:	9f 93       	push	r25
      d0:	ef 93       	push	r30
      d2:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
      d4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
      d8:	81 11       	cpse	r24, r1
      da:	09 c0       	rjmp	.+18     	; 0xee <__vector_21+0x2c>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
      dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      e4:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <mereni_napon+0x1>
      e8:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <mereni_napon>
      ec:	0c c0       	rjmp	.+24     	; 0x106 <__vector_21+0x44>
	else if(ad_kanal == 1)
      ee:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	41 f4       	brne	.+16     	; 0x106 <__vector_21+0x44>
		merena_struja = (uint16_t)ADC;
      f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      fe:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <merena_struja+0x1>
     102:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     106:	ea e7       	ldi	r30, 0x7A	; 122
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
     110:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     114:	8f 5f       	subi	r24, 0xFF	; 255
     116:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     11a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	10 f0       	brcs	.+4      	; 0x126 <__vector_21+0x64>
		ad_kanal = 0;
     122:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
     126:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     12a:	88 23       	and	r24, r24
     12c:	19 f0       	breq	.+6      	; 0x134 <__vector_21+0x72>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	39 f0       	breq	.+14     	; 0x140 <__vector_21+0x7e>
     132:	0e c0       	rjmp	.+28     	; 0x150 <__vector_21+0x8e>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     134:	ec e7       	ldi	r30, 0x7C	; 124
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	8c 7f       	andi	r24, 0xFC	; 252
     13c:	80 83       	st	Z, r24
		break;
     13e:	08 c0       	rjmp	.+16     	; 0x150 <__vector_21+0x8e>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     140:	ec e7       	ldi	r30, 0x7C	; 124
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	8d 7f       	andi	r24, 0xFD	; 253
     148:	80 83       	st	Z, r24
				ADMUX |= (0b1);
     14a:	80 81       	ld	r24, Z
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     150:	ea e7       	ldi	r30, 0x7A	; 122
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 6c       	ori	r24, 0xC0	; 192
     158:	80 83       	st	Z, r24
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us


}
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	9f 91       	pop	r25
     160:	8f 91       	pop	r24
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     16c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     170:	88 e4       	ldi	r24, 0x48	; 72
     172:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     176:	08 95       	ret

00000178 <i2c_start_wait>:
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	ec eb       	ldi	r30, 0xBC	; 188
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	24 ea       	ldi	r18, 0xA4	; 164
     182:	a9 eb       	ldi	r26, 0xB9	; 185
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	cb eb       	ldi	r28, 0xBB	; 187
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	34 e8       	ldi	r19, 0x84	; 132
     18c:	44 e9       	ldi	r20, 0x94	; 148
     18e:	20 83       	st	Z, r18
     190:	90 81       	ld	r25, Z
     192:	99 23       	and	r25, r25
     194:	ec f7       	brge	.-6      	; 0x190 <i2c_start_wait+0x18>
     196:	9c 91       	ld	r25, X
     198:	98 7f       	andi	r25, 0xF8	; 248
     19a:	98 30       	cpi	r25, 0x08	; 8
     19c:	11 f0       	breq	.+4      	; 0x1a2 <i2c_start_wait+0x2a>
     19e:	90 31       	cpi	r25, 0x10	; 16
     1a0:	b1 f7       	brne	.-20     	; 0x18e <i2c_start_wait+0x16>
     1a2:	88 83       	st	Y, r24
     1a4:	30 83       	st	Z, r19
     1a6:	90 81       	ld	r25, Z
     1a8:	99 23       	and	r25, r25
     1aa:	ec f7       	brge	.-6      	; 0x1a6 <i2c_start_wait+0x2e>
     1ac:	9c 91       	ld	r25, X
     1ae:	98 7f       	andi	r25, 0xF8	; 248
     1b0:	90 32       	cpi	r25, 0x20	; 32
     1b2:	11 f0       	breq	.+4      	; 0x1b8 <i2c_start_wait+0x40>
     1b4:	98 35       	cpi	r25, 0x58	; 88
     1b6:	29 f4       	brne	.+10     	; 0x1c2 <i2c_start_wait+0x4a>
     1b8:	40 83       	st	Z, r20
     1ba:	90 81       	ld	r25, Z
     1bc:	94 fd       	sbrc	r25, 4
     1be:	fd cf       	rjmp	.-6      	; 0x1ba <i2c_start_wait+0x42>
     1c0:	e6 cf       	rjmp	.-52     	; 0x18e <i2c_start_wait+0x16>
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <i2c_stop>:
     1c8:	84 e9       	ldi	r24, 0x94	; 148
     1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1ce:	ec eb       	ldi	r30, 0xBC	; 188
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	84 fd       	sbrc	r24, 4
     1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <i2c_stop+0xa>
     1d8:	08 95       	ret

000001da <i2c_write>:
     1da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1de:	84 e8       	ldi	r24, 0x84	; 132
     1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1e4:	ec eb       	ldi	r30, 0xBC	; 188
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	88 23       	and	r24, r24
     1ec:	ec f7       	brge	.-6      	; 0x1e8 <i2c_write+0xe>
     1ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1f2:	98 7f       	andi	r25, 0xF8	; 248
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	98 32       	cpi	r25, 0x28	; 40
     1f8:	09 f4       	brne	.+2      	; 0x1fc <i2c_write+0x22>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	08 95       	ret

000001fe <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1fe:	84 e8       	ldi	r24, 0x84	; 132
     200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     204:	ec eb       	ldi	r30, 0xBC	; 188
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	88 23       	and	r24, r24
     20c:	ec f7       	brge	.-6      	; 0x208 <i2c_readNak+0xa>
	
    return TWDR;
     20e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     212:	08 95       	ret

00000214 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     214:	cf 93       	push	r28
     216:	c8 2f       	mov	r28, r24
     218:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     21a:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
	i2c_write(value);                      // write 
     21e:	8c 2f       	mov	r24, r28
     220:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     224:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_stop>
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <sati_ispis>:




void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	fc 01       	movw	r30, r24
     236:	06 2f       	mov	r16, r22
     238:	17 2f       	mov	r17, r23
     23a:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     23c:	21 11       	cpse	r18, r1
     23e:	28 c0       	rjmp	.+80     	; 0x290 <sati_ispis+0x64>
	{
		(*sat)++;
     240:	80 81       	ld	r24, Z
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
     242:	99 ee       	ldi	r25, 0xE9	; 233
     244:	98 0f       	add	r25, r24
     246:	96 30       	cpi	r25, 0x06	; 6
     248:	18 f0       	brcs	.+6      	; 0x250 <sati_ispis+0x24>
void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sat)++;
     24a:	8f 5f       	subi	r24, 0xFF	; 255
     24c:	80 83       	st	Z, r24
     24e:	01 c0       	rjmp	.+2      	; 0x252 <sati_ispis+0x26>
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
			*sat = 0;
     250:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sat);
     252:	80 81       	ld	r24, Z
     254:	1f 92       	push	r1
     256:	8f 93       	push	r24
     258:	83 e2       	ldi	r24, 0x23	; 35
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	9f 93       	push	r25
     25e:	8f 93       	push	r24
     260:	1f 93       	push	r17
     262:	0f 93       	push	r16
     264:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     268:	88 81       	ld	r24, Y
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	81 50       	subi	r24, 0x01	; 1
     26e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     272:	80 2f       	mov	r24, r16
     274:	91 2f       	mov	r25, r17
     276:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	88 81       	ld	r24, Y
     27e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	28 c0       	rjmp	.+80     	; 0x2e0 <sati_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     290:	21 30       	cpi	r18, 0x01	; 1
     292:	31 f5       	brne	.+76     	; 0x2e0 <sati_ispis+0xb4>
	{
		(*sat)--;
     294:	80 81       	ld	r24, Z
     296:	81 50       	subi	r24, 0x01	; 1
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     298:	8a 3f       	cpi	r24, 0xFA	; 250
     29a:	10 f4       	brcc	.+4      	; 0x2a0 <sati_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sat)--;
     29c:	80 83       	st	Z, r24
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <sati_ispis+0x78>
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sat = 23;
     2a0:	87 e1       	ldi	r24, 0x17	; 23
     2a2:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sat);
     2a4:	80 81       	ld	r24, Z
     2a6:	1f 92       	push	r1
     2a8:	8f 93       	push	r24
     2aa:	83 e2       	ldi	r24, 0x23	; 35
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	1f 93       	push	r17
     2b4:	0f 93       	push	r16
     2b6:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     2ba:	88 81       	ld	r24, Y
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	81 50       	subi	r24, 0x01	; 1
     2c0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     2c4:	80 2f       	mov	r24, r16
     2c6:	91 2f       	mov	r25, r17
     2c8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	88 81       	ld	r24, Y
     2d0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
	}
	
	
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	08 95       	ret

000002ea <minuti_ispis>:

void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	fc 01       	movw	r30, r24
     2f4:	06 2f       	mov	r16, r22
     2f6:	17 2f       	mov	r17, r23
     2f8:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     2fa:	21 11       	cpse	r18, r1
     2fc:	28 c0       	rjmp	.+80     	; 0x34e <minuti_ispis+0x64>
	{
		(*minut)++;
     2fe:	80 81       	ld	r24, Z
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
     300:	95 ec       	ldi	r25, 0xC5	; 197
     302:	98 0f       	add	r25, r24
     304:	95 30       	cpi	r25, 0x05	; 5
     306:	18 f0       	brcs	.+6      	; 0x30e <minuti_ispis+0x24>
void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*minut)++;
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	80 83       	st	Z, r24
     30c:	01 c0       	rjmp	.+2      	; 0x310 <minuti_ispis+0x26>
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
			*minut = 0;
     30e:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *minut);
     310:	80 81       	ld	r24, Z
     312:	1f 92       	push	r1
     314:	8f 93       	push	r24
     316:	83 e2       	ldi	r24, 0x23	; 35
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	9f 93       	push	r25
     31c:	8f 93       	push	r24
     31e:	1f 93       	push	r17
     320:	0f 93       	push	r16
     322:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     326:	88 81       	ld	r24, Y
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	81 50       	subi	r24, 0x01	; 1
     32c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     330:	80 2f       	mov	r24, r16
     332:	91 2f       	mov	r25, r17
     334:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	88 81       	ld	r24, Y
     33c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	28 c0       	rjmp	.+80     	; 0x39e <minuti_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     34e:	21 30       	cpi	r18, 0x01	; 1
     350:	31 f5       	brne	.+76     	; 0x39e <minuti_ispis+0xb4>
	{
		(*minut)--;
     352:	80 81       	ld	r24, Z
     354:	81 50       	subi	r24, 0x01	; 1
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     356:	8a 3f       	cpi	r24, 0xFA	; 250
     358:	10 f4       	brcc	.+4      	; 0x35e <minuti_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*minut)--;
     35a:	80 83       	st	Z, r24
     35c:	02 c0       	rjmp	.+4      	; 0x362 <minuti_ispis+0x78>
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*minut = 59;
     35e:	8b e3       	ldi	r24, 0x3B	; 59
     360:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *minut);
     362:	80 81       	ld	r24, Z
     364:	1f 92       	push	r1
     366:	8f 93       	push	r24
     368:	83 e2       	ldi	r24, 0x23	; 35
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	1f 93       	push	r17
     372:	0f 93       	push	r16
     374:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     378:	88 81       	ld	r24, Y
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	81 50       	subi	r24, 0x01	; 1
     37e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     382:	80 2f       	mov	r24, r16
     384:	91 2f       	mov	r25, r17
     386:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	88 81       	ld	r24, Y
     38e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
	}
	
	
}
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <sekundi_ispis>:

void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	fc 01       	movw	r30, r24
     3b2:	06 2f       	mov	r16, r22
     3b4:	17 2f       	mov	r17, r23
     3b6:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     3b8:	21 11       	cpse	r18, r1
     3ba:	28 c0       	rjmp	.+80     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{
		(*sekund)++;
     3bc:	80 81       	ld	r24, Z
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
     3be:	95 ec       	ldi	r25, 0xC5	; 197
     3c0:	98 0f       	add	r25, r24
     3c2:	95 30       	cpi	r25, 0x05	; 5
     3c4:	18 f0       	brcs	.+6      	; 0x3cc <sekundi_ispis+0x24>
void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sekund)++;
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	80 83       	st	Z, r24
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <sekundi_ispis+0x26>
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
			*sekund = 0;
     3cc:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sekund);
     3ce:	80 81       	ld	r24, Z
     3d0:	1f 92       	push	r1
     3d2:	8f 93       	push	r24
     3d4:	83 e2       	ldi	r24, 0x23	; 35
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	9f 93       	push	r25
     3da:	8f 93       	push	r24
     3dc:	1f 93       	push	r17
     3de:	0f 93       	push	r16
     3e0:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     3e4:	88 81       	ld	r24, Y
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	81 50       	subi	r24, 0x01	; 1
     3ea:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     3ee:	80 2f       	mov	r24, r16
     3f0:	91 2f       	mov	r25, r17
     3f2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	88 81       	ld	r24, Y
     3fa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	28 c0       	rjmp	.+80     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	}
	else if (inc_dec == UMANJI)
     40c:	21 30       	cpi	r18, 0x01	; 1
     40e:	31 f5       	brne	.+76     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	{
		(*sekund)--;
     410:	80 81       	ld	r24, Z
     412:	81 50       	subi	r24, 0x01	; 1
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     414:	8a 3f       	cpi	r24, 0xFA	; 250
     416:	10 f4       	brcc	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sekund)--;
     418:	80 83       	st	Z, r24
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sekund = 59;
     41c:	8b e3       	ldi	r24, 0x3B	; 59
     41e:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sekund);
     420:	80 81       	ld	r24, Z
     422:	1f 92       	push	r1
     424:	8f 93       	push	r24
     426:	83 e2       	ldi	r24, 0x23	; 35
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	9f 93       	push	r25
     42c:	8f 93       	push	r24
     42e:	1f 93       	push	r17
     430:	0f 93       	push	r16
     432:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     436:	88 81       	ld	r24, Y
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	81 50       	subi	r24, 0x01	; 1
     43c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     440:	80 2f       	mov	r24, r16
     442:	91 2f       	mov	r25, r17
     444:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	88 81       	ld	r24, Y
     44c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
	}
	
	
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     466:	cf 93       	push	r28
     468:	c8 2f       	mov	r28, r24
     46a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     46e:	84 60       	ori	r24, 0x04	; 4
     470:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     474:	6e e4       	ldi	r22, 0x4E	; 78
     476:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     47a:	87 ec       	ldi	r24, 0xC7	; 199
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <putnibble+0x18>
     482:	00 c0       	rjmp	.+0      	; 0x484 <putnibble+0x1e>
     484:	00 00       	nop
     486:	c2 95       	swap	r28
     488:	c0 7f       	andi	r28, 0xF0	; 240
     48a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     48e:	6e e4       	ldi	r22, 0x4E	; 78
     490:	8c 2b       	or	r24, r28
     492:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     496:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     49a:	8b 7f       	andi	r24, 0xFB	; 251
     49c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     4a0:	6e e4       	ldi	r22, 0x4E	; 78
     4a2:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     4a6:	87 ec       	ldi	r24, 0xC7	; 199
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <putnibble+0x44>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <putnibble+0x4a>
     4b0:	00 00       	nop
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <lcd1602_send_byte>:
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	c8 2f       	mov	r28, r24
     4bc:	d8 2f       	mov	r29, r24
     4be:	d2 95       	swap	r29
     4c0:	df 70       	andi	r29, 0x0F	; 15
     4c2:	61 11       	cpse	r22, r1
     4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <lcd1602_send_byte+0x22>
     4c6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     4ca:	8e 7f       	andi	r24, 0xFE	; 254
     4cc:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     4d0:	6e e4       	ldi	r22, 0x4E	; 78
     4d2:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <lcd1602_send_byte+0x32>
     4d8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     4dc:	81 60       	ori	r24, 0x01	; 1
     4de:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     4e2:	6e e4       	ldi	r22, 0x4E	; 78
     4e4:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     4e8:	8d 2f       	mov	r24, r29
     4ea:	0e 94 33 02 	call	0x466	; 0x466 <putnibble>
     4ee:	8c 2f       	mov	r24, r28
     4f0:	0e 94 33 02 	call	0x466	; 0x466 <putnibble>
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <lcd1602_send_char>:
     4fa:	cf 93       	push	r28
     4fc:	c8 2f       	mov	r28, r24
     4fe:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     502:	81 60       	ori	r24, 0x01	; 1
     504:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     508:	6e e4       	ldi	r22, 0x4E	; 78
     50a:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     50e:	8c 2f       	mov	r24, r28
     510:	82 95       	swap	r24
     512:	8f 70       	andi	r24, 0x0F	; 15
     514:	0e 94 33 02 	call	0x466	; 0x466 <putnibble>
     518:	8c 2f       	mov	r24, r28
     51a:	0e 94 33 02 	call	0x466	; 0x466 <putnibble>
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <lcd1602_init>:
     522:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <led_pin>
     526:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_init>
     52a:	8f e5       	ldi	r24, 0x5F	; 95
     52c:	9a ee       	ldi	r25, 0xEA	; 234
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	f1 f7       	brne	.-4      	; 0x52e <lcd1602_init+0xc>
     532:	00 c0       	rjmp	.+0      	; 0x534 <lcd1602_init+0x12>
     534:	00 00       	nop
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	0e 94 33 02 	call	0x466	; 0x466 <putnibble>
     53c:	8f e7       	ldi	r24, 0x7F	; 127
     53e:	9e e3       	ldi	r25, 0x3E	; 62
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <lcd1602_init+0x1e>
     544:	00 c0       	rjmp	.+0      	; 0x546 <lcd1602_init+0x24>
     546:	00 00       	nop
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	0e 94 33 02 	call	0x466	; 0x466 <putnibble>
     54e:	8f e8       	ldi	r24, 0x8F	; 143
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <lcd1602_init+0x30>
     556:	00 c0       	rjmp	.+0      	; 0x558 <lcd1602_init+0x36>
     558:	00 00       	nop
     55a:	83 e0       	ldi	r24, 0x03	; 3
     55c:	0e 94 33 02 	call	0x466	; 0x466 <putnibble>
     560:	8f e9       	ldi	r24, 0x9F	; 159
     562:	9f e0       	ldi	r25, 0x0F	; 15
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <lcd1602_init+0x42>
     568:	00 c0       	rjmp	.+0      	; 0x56a <lcd1602_init+0x48>
     56a:	00 00       	nop
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	0e 94 33 02 	call	0x466	; 0x466 <putnibble>
     572:	8f e9       	ldi	r24, 0x9F	; 159
     574:	9f e0       	ldi	r25, 0x0F	; 15
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <lcd1602_init+0x54>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <lcd1602_init+0x5a>
     57c:	00 00       	nop
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	88 e2       	ldi	r24, 0x28	; 40
     582:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd1602_send_byte>
     586:	8f e9       	ldi	r24, 0x9F	; 159
     588:	9f e0       	ldi	r25, 0x0F	; 15
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <lcd1602_init+0x68>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <lcd1602_init+0x6e>
     590:	00 00       	nop
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	8c e0       	ldi	r24, 0x0C	; 12
     596:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd1602_send_byte>
     59a:	8f e9       	ldi	r24, 0x9F	; 159
     59c:	9f e0       	ldi	r25, 0x0F	; 15
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <lcd1602_init+0x7c>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <lcd1602_init+0x82>
     5a4:	00 00       	nop
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	86 e0       	ldi	r24, 0x06	; 6
     5aa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd1602_send_byte>
     5ae:	8f e9       	ldi	r24, 0x9F	; 159
     5b0:	9f e0       	ldi	r25, 0x0F	; 15
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <lcd1602_init+0x90>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <lcd1602_init+0x96>
     5b8:	00 00       	nop
     5ba:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     5be:	88 60       	ori	r24, 0x08	; 8
     5c0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     5c4:	6e e4       	ldi	r22, 0x4E	; 78
     5c6:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     5ca:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <led_pin>
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <led_pin>
     5d4:	6e e4       	ldi	r22, 0x4E	; 78
     5d6:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     5da:	08 95       	ret

000005dc <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     5dc:	90 e4       	ldi	r25, 0x40	; 64
     5de:	69 9f       	mul	r22, r25
     5e0:	80 0d       	add	r24, r0
     5e2:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	80 68       	ori	r24, 0x80	; 128
     5e8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd1602_send_byte>
     5ec:	08 95       	ret

000005ee <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     5f6:	80 81       	ld	r24, Z
     5f8:	88 23       	and	r24, r24
     5fa:	59 f0       	breq	.+22     	; 0x612 <lcd1602_send_string+0x24>
     5fc:	8f 01       	movw	r16, r30
     5fe:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     600:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd1602_send_char>
		i++;
     604:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     606:	f8 01       	movw	r30, r16
     608:	ec 0f       	add	r30, r28
     60a:	f1 1d       	adc	r31, r1
     60c:	80 81       	ld	r24, Z
     60e:	81 11       	cpse	r24, r1
     610:	f7 cf       	rjmp	.-18     	; 0x600 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	08 95       	ret

0000061a <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     61a:	88 23       	and	r24, r24
     61c:	29 f0       	breq	.+10     	; 0x628 <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	8f e0       	ldi	r24, 0x0F	; 15
     622:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd1602_send_byte>
     626:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	8c e0       	ldi	r24, 0x0C	; 12
     62c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd1602_send_byte>
     630:	08 95       	ret

00000632 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     632:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     634:	dc 01       	movw	r26, r24
     636:	12 96       	adiw	r26, 0x02	; 2
     638:	2c 91       	ld	r18, X
     63a:	12 97       	sbiw	r26, 0x02	; 2
     63c:	54 e6       	ldi	r21, 0x64	; 100
     63e:	11 96       	adiw	r26, 0x01	; 1
     640:	8c 91       	ld	r24, X
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	52 9f       	mul	r21, r18
     646:	80 0d       	add	r24, r0
     648:	91 1d       	adc	r25, r1
     64a:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     64c:	db 01       	movw	r26, r22
     64e:	12 96       	adiw	r26, 0x02	; 2
     650:	2c 91       	ld	r18, X
     652:	12 97       	sbiw	r26, 0x02	; 2
     654:	11 96       	adiw	r26, 0x01	; 1
     656:	6c 91       	ld	r22, X
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	52 9f       	mul	r21, r18
     65c:	60 0d       	add	r22, r0
     65e:	71 1d       	adc	r23, r1
     660:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     662:	42 81       	ldd	r20, Z+2	; 0x02
     664:	21 81       	ldd	r18, Z+1	; 0x01
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	54 9f       	mul	r21, r20
     66a:	20 0d       	add	r18, r0
     66c:	31 1d       	adc	r19, r1
     66e:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     670:	86 17       	cp	r24, r22
     672:	97 07       	cpc	r25, r23
     674:	68 f0       	brcs	.+26     	; 0x690 <period_paljenja+0x5e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     676:	28 17       	cp	r18, r24
     678:	39 07       	cpc	r19, r25
     67a:	20 f0       	brcs	.+8      	; 0x684 <period_paljenja+0x52>
     67c:	28 33       	cpi	r18, 0x38	; 56
     67e:	b9 e0       	ldi	r27, 0x09	; 9
     680:	3b 07       	cpc	r19, r27
     682:	78 f0       	brcs	.+30     	; 0x6a2 <period_paljenja+0x70>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	26 17       	cp	r18, r22
     688:	37 07       	cpc	r19, r23
     68a:	70 f0       	brcs	.+28     	; 0x6a8 <period_paljenja+0x76>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     690:	28 17       	cp	r18, r24
     692:	39 07       	cpc	r19, r25
     694:	40 f0       	brcs	.+16     	; 0x6a6 <period_paljenja+0x74>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	26 17       	cp	r18, r22
     69a:	37 07       	cpc	r19, r23
     69c:	28 f0       	brcs	.+10     	; 0x6a8 <period_paljenja+0x76>
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     6a8:	08 95       	ret

000006aa <fsm_lcd_menu>:

void fsm_lcd_menu()
{
     6aa:	0f 93       	push	r16
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
	switch(STATE)
     6b0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <STATE>
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	09 f4       	brne	.+2      	; 0x6ba <fsm_lcd_menu+0x10>
     6b8:	7c c0       	rjmp	.+248    	; 0x7b2 <fsm_lcd_menu+0x108>
     6ba:	18 f4       	brcc	.+6      	; 0x6c2 <fsm_lcd_menu+0x18>
     6bc:	88 23       	and	r24, r24
     6be:	41 f0       	breq	.+16     	; 0x6d0 <fsm_lcd_menu+0x26>
     6c0:	14 c3       	rjmp	.+1576   	; 0xcea <__stack+0x3eb>
     6c2:	83 30       	cpi	r24, 0x03	; 3
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <fsm_lcd_menu+0x1e>
     6c6:	ed c0       	rjmp	.+474    	; 0x8a2 <fsm_lcd_menu+0x1f8>
     6c8:	84 30       	cpi	r24, 0x04	; 4
     6ca:	09 f4       	brne	.+2      	; 0x6ce <fsm_lcd_menu+0x24>
     6cc:	f6 c1       	rjmp	.+1004   	; 0xaba <__stack+0x1bb>
     6ce:	0d c3       	rjmp	.+1562   	; 0xcea <__stack+0x3eb>
	{
		
		case DISPL1:
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     6d0:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <flag_pc_int>
     6d4:	88 23       	and	r24, r24
     6d6:	09 f4       	brne	.+2      	; 0x6da <fsm_lcd_menu+0x30>
     6d8:	60 c0       	rjmp	.+192    	; 0x79a <fsm_lcd_menu+0xf0>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     6da:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <flag_pc_int>
			
					getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     6de:	00 e0       	ldi	r16, 0x00	; 0
     6e0:	2a eb       	ldi	r18, 0xBA	; 186
     6e2:	31 e0       	ldi	r19, 0x01	; 1
     6e4:	42 eb       	ldi	r20, 0xB2	; 178
     6e6:	51 e0       	ldi	r21, 0x01	; 1
     6e8:	63 eb       	ldi	r22, 0xB3	; 179
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	84 eb       	ldi	r24, 0xB4	; 180
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 af 07 	call	0xf5e	; 0xf5e <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     6f4:	e2 eb       	ldi	r30, 0xB2	; 178
     6f6:	f1 e0       	ldi	r31, 0x01	; 1
     6f8:	80 81       	ld	r24, Z
     6fa:	1f 92       	push	r1
     6fc:	8f 93       	push	r24
     6fe:	81 81       	ldd	r24, Z+1	; 0x01
     700:	1f 92       	push	r1
     702:	8f 93       	push	r24
     704:	82 81       	ldd	r24, Z+2	; 0x02
     706:	1f 92       	push	r1
     708:	8f 93       	push	r24
     70a:	84 e0       	ldi	r24, 0x04	; 4
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	c3 e8       	ldi	r28, 0x83	; 131
     714:	d1 e0       	ldi	r29, 0x01	; 1
     716:	df 93       	push	r29
     718:	cf 93       	push	r28
     71a:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
					
					//lcd1602_clear();
			
					/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
					lcd1602_goto_xy(0,0);
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
					lcd1602_send_string("    ");
     726:	85 e3       	ldi	r24, 0x35	; 53
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
					lcd1602_send_string(bafer);
     72e:	ce 01       	movw	r24, r28
     730:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
					lcd1602_send_string("    ");
     734:	85 e3       	ldi	r24, 0x35	; 53
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
			
					lcd1602_goto_xy(0,1);
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
					lcd1602_send_string("  ");
     744:	87 e3       	ldi	r24, 0x37	; 55
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
					sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     74c:	e9 ea       	ldi	r30, 0xA9	; 169
     74e:	f1 e0       	ldi	r31, 0x01	; 1
     750:	81 81       	ldd	r24, Z+1	; 0x01
     752:	1f 92       	push	r1
     754:	8f 93       	push	r24
     756:	82 81       	ldd	r24, Z+2	; 0x02
     758:	1f 92       	push	r1
     75a:	8f 93       	push	r24
     75c:	e0 ea       	ldi	r30, 0xA0	; 160
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	81 81       	ldd	r24, Z+1	; 0x01
     762:	1f 92       	push	r1
     764:	8f 93       	push	r24
     766:	82 81       	ldd	r24, Z+2	; 0x02
     768:	1f 92       	push	r1
     76a:	8f 93       	push	r24
     76c:	83 e1       	ldi	r24, 0x13	; 19
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	df 93       	push	r29
     776:	cf 93       	push	r28
     778:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
					lcd1602_send_string(bafer);
     77c:	ce 01       	movw	r24, r28
     77e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
					lcd1602_send_string("  ");
     782:	87 e3       	ldi	r24, 0x37	; 55
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
     78a:	8d b7       	in	r24, 0x3d	; 61
     78c:	9e b7       	in	r25, 0x3e	; 62
     78e:	46 96       	adiw	r24, 0x16	; 22
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	9e bf       	out	0x3e, r25	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	8d bf       	out	0x3d, r24	; 61
			
				}
		
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut   !(tasteri & (1<<TASTER_ENTER))
     79a:	65 e0       	ldi	r22, 0x05	; 5
     79c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     7a0:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     7a4:	88 23       	and	r24, r24
     7a6:	09 f4       	brne	.+2      	; 0x7aa <fsm_lcd_menu+0x100>
     7a8:	a0 c2       	rjmp	.+1344   	; 0xcea <__stack+0x3eb>
					STATE = MENU1;
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     7b0:	9c c2       	rjmp	.+1336   	; 0xcea <__stack+0x3eb>
		break;
		
		case MENU1:
					//lcd1602_clear();
		
					lcd1602_goto_xy(0, kursor);
     7b2:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <kursor>
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
					lcd1602_send_string(">");
     7bc:	88 e2       	ldi	r24, 0x28	; 40
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
					lcd1602_goto_xy(0, !kursor);
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     7ca:	81 11       	cpse	r24, r1
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
					lcd1602_send_string(" ");
     7d4:	88 e3       	ldi	r24, 0x38	; 56
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
		
					lcd1602_goto_xy(1,0);
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
					lcd1602_send_string("PODESI SAT     ");
     7e4:	8a e2       	ldi	r24, 0x2A	; 42
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
					lcd1602_goto_xy(1,1);
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
					lcd1602_send_string("PODESI PERIOD  ");
     7f4:	8a e3       	ldi	r24, 0x3A	; 58
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     7fc:	63 e0       	ldi	r22, 0x03	; 3
     7fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     802:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     806:	88 23       	and	r24, r24
     808:	61 f0       	breq	.+24     	; 0x822 <fsm_lcd_menu+0x178>
					{
						kursor++;
     80a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     80e:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor > 1)
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	1c f4       	brge	.+6      	; 0x81a <fsm_lcd_menu+0x170>
					lcd1602_goto_xy(1,1);
					lcd1602_send_string("PODESI PERIOD  ");
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor++;
     814:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     818:	68 c2       	rjmp	.+1232   	; 0xcea <__stack+0x3eb>
						if(kursor > 1)
						kursor = 1;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     820:	64 c2       	rjmp	.+1224   	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     822:	62 e0       	ldi	r22, 0x02	; 2
     824:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     828:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     82c:	88 23       	and	r24, r24
     82e:	51 f0       	breq	.+20     	; 0x844 <fsm_lcd_menu+0x19a>
					{
						kursor--;
     830:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     834:	81 50       	subi	r24, 0x01	; 1
						if(kursor < 0)
     836:	1a f0       	brmi	.+6      	; 0x83e <fsm_lcd_menu+0x194>
						if(kursor > 1)
						kursor = 1;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor--;
     838:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     83c:	56 c2       	rjmp	.+1196   	; 0xcea <__stack+0x3eb>
						if(kursor < 0)
						kursor = 0;
     83e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
     842:	53 c2       	rjmp	.+1190   	; 0xcea <__stack+0x3eb>
					}
					else if(kursor == 0 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     844:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     848:	81 11       	cpse	r24, r1
     84a:	0d c0       	rjmp	.+26     	; 0x866 <fsm_lcd_menu+0x1bc>
     84c:	65 e0       	ldi	r22, 0x05	; 5
     84e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     852:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     856:	88 23       	and	r24, r24
     858:	31 f0       	breq	.+12     	; 0x866 <fsm_lcd_menu+0x1bc>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     85a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						STATE = POD_SAT;	//meni za podesavanje sata
     85e:	83 e0       	ldi	r24, 0x03	; 3
     860:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     864:	42 c2       	rjmp	.+1156   	; 0xcea <__stack+0x3eb>
					}
					else if(kursor == 1 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     866:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	69 f4       	brne	.+26     	; 0x888 <fsm_lcd_menu+0x1de>
     86e:	65 e0       	ldi	r22, 0x05	; 5
     870:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     874:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     878:	88 23       	and	r24, r24
     87a:	31 f0       	breq	.+12     	; 0x888 <fsm_lcd_menu+0x1de>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     87c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     880:	84 e0       	ldi	r24, 0x04	; 4
     882:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     886:	31 c2       	rjmp	.+1122   	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     888:	64 e0       	ldi	r22, 0x04	; 4
     88a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     88e:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     892:	88 23       	and	r24, r24
     894:	09 f4       	brne	.+2      	; 0x898 <fsm_lcd_menu+0x1ee>
     896:	29 c2       	rjmp	.+1106   	; 0xcea <__stack+0x3eb>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     898:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     89c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <STATE>
     8a0:	24 c2       	rjmp	.+1096   	; 0xcea <__stack+0x3eb>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (flag_pod_vremena)
     8a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_pod_vremena>
     8a6:	88 23       	and	r24, r24
     8a8:	09 f4       	brne	.+2      	; 0x8ac <fsm_lcd_menu+0x202>
     8aa:	4b c0       	rjmp	.+150    	; 0x942 <__stack+0x43>
					{
						flag_pod_vremena = 0;
     8ac:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_pod_vremena>
						sanp_shot_vremena = vreme_datum;
     8b0:	89 e0       	ldi	r24, 0x09	; 9
     8b2:	e2 eb       	ldi	r30, 0xB2	; 178
     8b4:	f1 e0       	ldi	r31, 0x01	; 1
     8b6:	a7 e9       	ldi	r26, 0x97	; 151
     8b8:	b1 e0       	ldi	r27, 0x01	; 1
     8ba:	01 90       	ld	r0, Z+
     8bc:	0d 92       	st	X+, r0
     8be:	8a 95       	dec	r24
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <fsm_lcd_menu+0x210>
						sprintf(bafer, "%02d:%02d:%02d", sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s);
     8c2:	e7 e9       	ldi	r30, 0x97	; 151
     8c4:	f1 e0       	ldi	r31, 0x01	; 1
     8c6:	80 81       	ld	r24, Z
     8c8:	1f 92       	push	r1
     8ca:	8f 93       	push	r24
     8cc:	81 81       	ldd	r24, Z+1	; 0x01
     8ce:	1f 92       	push	r1
     8d0:	8f 93       	push	r24
     8d2:	82 81       	ldd	r24, Z+2	; 0x02
     8d4:	1f 92       	push	r1
     8d6:	8f 93       	push	r24
     8d8:	84 e0       	ldi	r24, 0x04	; 4
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	9f 93       	push	r25
     8de:	8f 93       	push	r24
     8e0:	83 e8       	ldi	r24, 0x83	; 131
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
			
						kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     8ec:	85 e0       	ldi	r24, 0x05	; 5
     8ee:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
			
						lcd1602_goto_xy(0,0);
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
						lcd1602_send_string("PODESAVANJE SATA");
     8fa:	8a e4       	ldi	r24, 0x4A	; 74
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
			
						lcd1602_goto_xy(0,1);
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
						lcd1602_send_string("    ");
     90a:	85 e3       	ldi	r24, 0x35	; 53
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
						lcd1602_send_string(bafer);
     912:	83 e8       	ldi	r24, 0x83	; 131
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
						lcd1602_send_string("    ");
     91a:	85 e3       	ldi	r24, 0x35	; 53
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
			
						lcd1602_goto_xy(kursor,1);
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     928:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	0e 94 0d 03 	call	0x61a	; 0x61a <lcd1602_cursor_blink>
     932:	8d b7       	in	r24, 0x3d	; 61
     934:	9e b7       	in	r25, 0x3e	; 62
     936:	0a 96       	adiw	r24, 0x0a	; 10
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	9e bf       	out	0x3e, r25	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	8d bf       	out	0x3d, r24	; 61
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     948:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     94c:	88 23       	and	r24, r24
     94e:	89 f0       	breq	.+34     	; 0x972 <__stack+0x73>
					{
						kursor += 3;
     950:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     954:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 11)
     956:	8c 30       	cpi	r24, 0x0C	; 12
     958:	1c f4       	brge	.+6      	; 0x960 <__stack+0x61>
						lcd1602_cursor_blink(1);
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     95a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     95e:	03 c0       	rjmp	.+6      	; 0x966 <__stack+0x67>
						if(kursor > 11)
							kursor = 11;
     960:	8b e0       	ldi	r24, 0x0B	; 11
     962:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
						lcd1602_goto_xy(kursor,1);
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     96c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
     970:	bc c1       	rjmp	.+888    	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     978:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     97c:	88 23       	and	r24, r24
     97e:	89 f0       	breq	.+34     	; 0x9a2 <__stack+0xa3>
					{
						kursor -= 3;
     980:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     984:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 5)
     986:	85 30       	cpi	r24, 0x05	; 5
     988:	1c f0       	brlt	.+6      	; 0x990 <__stack+0x91>
							kursor = 11;
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     98a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     98e:	03 c0       	rjmp	.+6      	; 0x996 <__stack+0x97>
						if(kursor < 5)
							kursor = 5;
     990:	85 e0       	ldi	r24, 0x05	; 5
     992:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
						lcd1602_goto_xy(kursor,1);
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     99c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
     9a0:	a4 c1       	rjmp	.+840    	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     9a2:	62 e0       	ldi	r22, 0x02	; 2
     9a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     9a8:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     9ac:	88 23       	and	r24, r24
     9ae:	39 f1       	breq	.+78     	; 0x9fe <__stack+0xff>
					{
						if (kursor == 5)												//podesava SATE ++
     9b0:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     9b4:	85 30       	cpi	r24, 0x05	; 5
     9b6:	51 f4       	brne	.+20     	; 0x9cc <__stack+0xcd>
							sati_ispis(&sanp_shot_vremena.hr, bafer, &kursor, UVECAJ);
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	43 e7       	ldi	r20, 0x73	; 115
     9bc:	51 e0       	ldi	r21, 0x01	; 1
     9be:	63 e8       	ldi	r22, 0x83	; 131
     9c0:	71 e0       	ldi	r23, 0x01	; 1
     9c2:	89 e9       	ldi	r24, 0x99	; 153
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 16 01 	call	0x22c	; 0x22c <sati_ispis>
     9ca:	8f c1       	rjmp	.+798    	; 0xcea <__stack+0x3eb>
						else if (kursor == 8)											//podesava MINUTE ++
     9cc:	88 30       	cpi	r24, 0x08	; 8
     9ce:	51 f4       	brne	.+20     	; 0x9e4 <__stack+0xe5>
							minuti_ispis(&sanp_shot_vremena.min, bafer, &kursor, UVECAJ);
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	43 e7       	ldi	r20, 0x73	; 115
     9d4:	51 e0       	ldi	r21, 0x01	; 1
     9d6:	63 e8       	ldi	r22, 0x83	; 131
     9d8:	71 e0       	ldi	r23, 0x01	; 1
     9da:	88 e9       	ldi	r24, 0x98	; 152
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 75 01 	call	0x2ea	; 0x2ea <minuti_ispis>
     9e2:	83 c1       	rjmp	.+774    	; 0xcea <__stack+0x3eb>
						else if (kursor == 11)											//podesava SEKUNDE ++
     9e4:	8b 30       	cpi	r24, 0x0B	; 11
     9e6:	09 f0       	breq	.+2      	; 0x9ea <__stack+0xeb>
     9e8:	80 c1       	rjmp	.+768    	; 0xcea <__stack+0x3eb>
							sekundi_ispis(&sanp_shot_vremena.s, bafer, &kursor, UVECAJ);
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	43 e7       	ldi	r20, 0x73	; 115
     9ee:	51 e0       	ldi	r21, 0x01	; 1
     9f0:	63 e8       	ldi	r22, 0x83	; 131
     9f2:	71 e0       	ldi	r23, 0x01	; 1
     9f4:	87 e9       	ldi	r24, 0x97	; 151
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <sekundi_ispis>
     9fc:	76 c1       	rjmp	.+748    	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     a04:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     a08:	88 23       	and	r24, r24
     a0a:	39 f1       	breq	.+78     	; 0xa5a <__stack+0x15b>
					{
						if (kursor == 5)												//podesava SATE --
     a0c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     a10:	85 30       	cpi	r24, 0x05	; 5
     a12:	51 f4       	brne	.+20     	; 0xa28 <__stack+0x129>
							sati_ispis(&sanp_shot_vremena.hr, bafer, &kursor, UMANJI);
     a14:	21 e0       	ldi	r18, 0x01	; 1
     a16:	43 e7       	ldi	r20, 0x73	; 115
     a18:	51 e0       	ldi	r21, 0x01	; 1
     a1a:	63 e8       	ldi	r22, 0x83	; 131
     a1c:	71 e0       	ldi	r23, 0x01	; 1
     a1e:	89 e9       	ldi	r24, 0x99	; 153
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	0e 94 16 01 	call	0x22c	; 0x22c <sati_ispis>
     a26:	61 c1       	rjmp	.+706    	; 0xcea <__stack+0x3eb>
						else if (kursor == 8)											//podesava MINUTE --
     a28:	88 30       	cpi	r24, 0x08	; 8
     a2a:	51 f4       	brne	.+20     	; 0xa40 <__stack+0x141>
							minuti_ispis(&sanp_shot_vremena.min, bafer, &kursor, UMANJI);
     a2c:	21 e0       	ldi	r18, 0x01	; 1
     a2e:	43 e7       	ldi	r20, 0x73	; 115
     a30:	51 e0       	ldi	r21, 0x01	; 1
     a32:	63 e8       	ldi	r22, 0x83	; 131
     a34:	71 e0       	ldi	r23, 0x01	; 1
     a36:	88 e9       	ldi	r24, 0x98	; 152
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 75 01 	call	0x2ea	; 0x2ea <minuti_ispis>
     a3e:	55 c1       	rjmp	.+682    	; 0xcea <__stack+0x3eb>
						else if (kursor == 11)											//podesava SEKUNDE --
     a40:	8b 30       	cpi	r24, 0x0B	; 11
     a42:	09 f0       	breq	.+2      	; 0xa46 <__stack+0x147>
     a44:	52 c1       	rjmp	.+676    	; 0xcea <__stack+0x3eb>
							sekundi_ispis(&sanp_shot_vremena.s, bafer, &kursor, UMANJI);
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	43 e7       	ldi	r20, 0x73	; 115
     a4a:	51 e0       	ldi	r21, 0x01	; 1
     a4c:	63 e8       	ldi	r22, 0x83	; 131
     a4e:	71 e0       	ldi	r23, 0x01	; 1
     a50:	87 e9       	ldi	r24, 0x97	; 151
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <sekundi_ispis>
     a58:	48 c1       	rjmp	.+656    	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//Potvrdi vreme koje vidis na ekranu i promeni vreme; izadji iz menija
     a5a:	65 e0       	ldi	r22, 0x05	; 5
     a5c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     a60:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     a64:	88 23       	and	r24, r24
     a66:	a9 f0       	breq	.+42     	; 0xa92 <__stack+0x193>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
     a68:	e7 e9       	ldi	r30, 0x97	; 151
     a6a:	f1 e0       	ldi	r31, 0x01	; 1
     a6c:	00 e0       	ldi	r16, 0x00	; 0
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	40 81       	ld	r20, Z
     a72:	61 81       	ldd	r22, Z+1	; 0x01
     a74:	82 81       	ldd	r24, Z+2	; 0x02
     a76:	0e 94 ed 07 	call	0xfda	; 0xfda <setTime>
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     a80:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0e 94 0d 03 	call	0x61a	; 0x61a <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     a90:	2c c1       	rjmp	.+600    	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     a92:	64 e0       	ldi	r22, 0x04	; 4
     a94:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     a98:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     a9c:	88 23       	and	r24, r24
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <__stack+0x1a3>
     aa0:	24 c1       	rjmp	.+584    	; 0xcea <__stack+0x3eb>
					{
						/* Vreme setujem samo ako je stisnut ENTER, ako je stisnuto NAZAD, vreme se ne dira, tj. ovde se ne dira */
								//setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     aa8:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 0d 03 	call	0x61a	; 0x61a <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     ab8:	18 c1       	rjmp	.+560    	; 0xcea <__stack+0x3eb>
		break;
		
		case POD_ON_OFF:																								/************************* TODO: UPIS U EEPROM ************************/
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
     aba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     abe:	88 23       	and	r24, r24
     ac0:	09 f4       	brne	.+2      	; 0xac4 <__stack+0x1c5>
     ac2:	47 c0       	rjmp	.+142    	; 0xb52 <__stack+0x253>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
     ac4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
						
						lcd1602_goto_xy(0,0);
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
						lcd1602_send_string("  UPALI--UGASI  ");
     ad6:	8b e5       	ldi	r24, 0x5B	; 91
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     ade:	e9 ea       	ldi	r30, 0xA9	; 169
     ae0:	f1 e0       	ldi	r31, 0x01	; 1
     ae2:	81 81       	ldd	r24, Z+1	; 0x01
     ae4:	1f 92       	push	r1
     ae6:	8f 93       	push	r24
     ae8:	82 81       	ldd	r24, Z+2	; 0x02
     aea:	1f 92       	push	r1
     aec:	8f 93       	push	r24
     aee:	e0 ea       	ldi	r30, 0xA0	; 160
     af0:	f1 e0       	ldi	r31, 0x01	; 1
     af2:	81 81       	ldd	r24, Z+1	; 0x01
     af4:	1f 92       	push	r1
     af6:	8f 93       	push	r24
     af8:	82 81       	ldd	r24, Z+2	; 0x02
     afa:	1f 92       	push	r1
     afc:	8f 93       	push	r24
     afe:	83 e1       	ldi	r24, 0x13	; 19
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	9f 93       	push	r25
     b04:	8f 93       	push	r24
     b06:	83 e8       	ldi	r24, 0x83	; 131
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	9f 93       	push	r25
     b0c:	8f 93       	push	r24
     b0e:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
						
						lcd1602_goto_xy(0,1);
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
						lcd1602_send_string("  ");
     b1a:	87 e3       	ldi	r24, 0x37	; 55
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
						lcd1602_send_string(bafer);
     b22:	83 e8       	ldi	r24, 0x83	; 131
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
						lcd1602_send_string("  ");
     b2a:	87 e3       	ldi	r24, 0x37	; 55
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     b38:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	0e 94 0d 03 	call	0x61a	; 0x61a <lcd1602_cursor_blink>
     b42:	8d b7       	in	r24, 0x3d	; 61
     b44:	9e b7       	in	r25, 0x3e	; 62
     b46:	0c 96       	adiw	r24, 0x0c	; 12
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	9e bf       	out	0x3e, r25	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     b58:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     b5c:	88 23       	and	r24, r24
     b5e:	c9 f0       	breq	.+50     	; 0xb92 <__stack+0x293>
					{
						kursor += 3;
     b60:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
     b64:	9c ef       	ldi	r25, 0xFC	; 252
     b66:	98 0f       	add	r25, r24
     b68:	93 30       	cpi	r25, 0x03	; 3
     b6a:	20 f4       	brcc	.+8      	; 0xb74 <__stack+0x275>
							kursor = 10;
     b6c:	8a e0       	ldi	r24, 0x0A	; 10
     b6e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     b72:	09 c0       	rjmp	.+18     	; 0xb86 <__stack+0x287>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     b74:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
     b76:	8e 30       	cpi	r24, 0x0E	; 14
     b78:	1c f4       	brge	.+6      	; 0xb80 <__stack+0x281>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     b7a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     b7e:	03 c0       	rjmp	.+6      	; 0xb86 <__stack+0x287>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
							kursor = 13;
     b80:	8d e0       	ldi	r24, 0x0D	; 13
     b82:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     b8c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
     b90:	ac c0       	rjmp	.+344    	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     b98:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     b9c:	88 23       	and	r24, r24
     b9e:	c9 f0       	breq	.+50     	; 0xbd2 <__stack+0x2d3>
					{
						kursor -= 3;
     ba0:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
     ba4:	96 ef       	ldi	r25, 0xF6	; 246
     ba6:	98 0f       	add	r25, r24
     ba8:	93 30       	cpi	r25, 0x03	; 3
     baa:	20 f4       	brcc	.+8      	; 0xbb4 <__stack+0x2b5>
							kursor = 6;
     bac:	86 e0       	ldi	r24, 0x06	; 6
     bae:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <__stack+0x2c7>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     bb4:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	1c f0       	brlt	.+6      	; 0xbc0 <__stack+0x2c1>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     bba:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <__stack+0x2c7>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
							kursor = 3;
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     bcc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd1602_goto_xy>
     bd0:	8c c0       	rjmp	.+280    	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     bd2:	62 e0       	ldi	r22, 0x02	; 2
     bd4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     bd8:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     bdc:	88 23       	and	r24, r24
     bde:	99 f1       	breq	.+102    	; 0xc46 <__stack+0x347>
					{
						if (kursor == 3)												//podesava SATE_ON ++
     be0:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     be4:	83 30       	cpi	r24, 0x03	; 3
     be6:	51 f4       	brne	.+20     	; 0xbfc <__stack+0x2fd>
							sati_ispis(&vreme_paljenja.hr, bafer, &kursor, UVECAJ);
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	43 e7       	ldi	r20, 0x73	; 115
     bec:	51 e0       	ldi	r21, 0x01	; 1
     bee:	63 e8       	ldi	r22, 0x83	; 131
     bf0:	71 e0       	ldi	r23, 0x01	; 1
     bf2:	82 ea       	ldi	r24, 0xA2	; 162
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 16 01 	call	0x22c	; 0x22c <sati_ispis>
     bfa:	77 c0       	rjmp	.+238    	; 0xcea <__stack+0x3eb>
						else if (kursor == 6)											//podesava MINUTE_ON ++
     bfc:	86 30       	cpi	r24, 0x06	; 6
     bfe:	51 f4       	brne	.+20     	; 0xc14 <__stack+0x315>
							minuti_ispis(&vreme_paljenja.min, bafer, &kursor, UVECAJ);
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	43 e7       	ldi	r20, 0x73	; 115
     c04:	51 e0       	ldi	r21, 0x01	; 1
     c06:	63 e8       	ldi	r22, 0x83	; 131
     c08:	71 e0       	ldi	r23, 0x01	; 1
     c0a:	81 ea       	ldi	r24, 0xA1	; 161
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 75 01 	call	0x2ea	; 0x2ea <minuti_ispis>
     c12:	6b c0       	rjmp	.+214    	; 0xcea <__stack+0x3eb>
						else if (kursor == 10)											//podesava SATE_OFF ++
     c14:	8a 30       	cpi	r24, 0x0A	; 10
     c16:	51 f4       	brne	.+20     	; 0xc2c <__stack+0x32d>
							sati_ispis(&vreme_gasenja.hr, bafer, &kursor, UVECAJ);
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	43 e7       	ldi	r20, 0x73	; 115
     c1c:	51 e0       	ldi	r21, 0x01	; 1
     c1e:	63 e8       	ldi	r22, 0x83	; 131
     c20:	71 e0       	ldi	r23, 0x01	; 1
     c22:	8b ea       	ldi	r24, 0xAB	; 171
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	0e 94 16 01 	call	0x22c	; 0x22c <sati_ispis>
     c2a:	5f c0       	rjmp	.+190    	; 0xcea <__stack+0x3eb>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
     c2c:	8d 30       	cpi	r24, 0x0D	; 13
     c2e:	09 f0       	breq	.+2      	; 0xc32 <__stack+0x333>
     c30:	5c c0       	rjmp	.+184    	; 0xcea <__stack+0x3eb>
							minuti_ispis(&vreme_gasenja.min, bafer, &kursor, UVECAJ);
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	43 e7       	ldi	r20, 0x73	; 115
     c36:	51 e0       	ldi	r21, 0x01	; 1
     c38:	63 e8       	ldi	r22, 0x83	; 131
     c3a:	71 e0       	ldi	r23, 0x01	; 1
     c3c:	8a ea       	ldi	r24, 0xAA	; 170
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 75 01 	call	0x2ea	; 0x2ea <minuti_ispis>
     c44:	52 c0       	rjmp	.+164    	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     c46:	63 e0       	ldi	r22, 0x03	; 3
     c48:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     c4c:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     c50:	88 23       	and	r24, r24
     c52:	91 f1       	breq	.+100    	; 0xcb8 <__stack+0x3b9>
					{
						if (kursor == 3)												//podesava SATE_ON --
     c54:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     c58:	83 30       	cpi	r24, 0x03	; 3
     c5a:	51 f4       	brne	.+20     	; 0xc70 <__stack+0x371>
							sati_ispis(&vreme_paljenja.hr, bafer, &kursor, UMANJI);
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	43 e7       	ldi	r20, 0x73	; 115
     c60:	51 e0       	ldi	r21, 0x01	; 1
     c62:	63 e8       	ldi	r22, 0x83	; 131
     c64:	71 e0       	ldi	r23, 0x01	; 1
     c66:	82 ea       	ldi	r24, 0xA2	; 162
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 16 01 	call	0x22c	; 0x22c <sati_ispis>
     c6e:	3d c0       	rjmp	.+122    	; 0xcea <__stack+0x3eb>
						else if (kursor == 6)											//podesava MINUTE_ON --
     c70:	86 30       	cpi	r24, 0x06	; 6
     c72:	51 f4       	brne	.+20     	; 0xc88 <__stack+0x389>
							minuti_ispis(&vreme_paljenja.min, bafer, &kursor, UMANJI);
     c74:	21 e0       	ldi	r18, 0x01	; 1
     c76:	43 e7       	ldi	r20, 0x73	; 115
     c78:	51 e0       	ldi	r21, 0x01	; 1
     c7a:	63 e8       	ldi	r22, 0x83	; 131
     c7c:	71 e0       	ldi	r23, 0x01	; 1
     c7e:	81 ea       	ldi	r24, 0xA1	; 161
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	0e 94 75 01 	call	0x2ea	; 0x2ea <minuti_ispis>
     c86:	31 c0       	rjmp	.+98     	; 0xcea <__stack+0x3eb>
						else if (kursor == 10)											//podesava SATE_OFF --
     c88:	8a 30       	cpi	r24, 0x0A	; 10
     c8a:	51 f4       	brne	.+20     	; 0xca0 <__stack+0x3a1>
							sati_ispis(&vreme_gasenja.hr, bafer, &kursor, UMANJI);
     c8c:	21 e0       	ldi	r18, 0x01	; 1
     c8e:	43 e7       	ldi	r20, 0x73	; 115
     c90:	51 e0       	ldi	r21, 0x01	; 1
     c92:	63 e8       	ldi	r22, 0x83	; 131
     c94:	71 e0       	ldi	r23, 0x01	; 1
     c96:	8b ea       	ldi	r24, 0xAB	; 171
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	0e 94 16 01 	call	0x22c	; 0x22c <sati_ispis>
     c9e:	25 c0       	rjmp	.+74     	; 0xcea <__stack+0x3eb>
						else if (kursor == 13)											//podesava MINUTE_OFF --
     ca0:	8d 30       	cpi	r24, 0x0D	; 13
     ca2:	19 f5       	brne	.+70     	; 0xcea <__stack+0x3eb>
							minuti_ispis(&vreme_gasenja.min, bafer, &kursor, UMANJI);
     ca4:	21 e0       	ldi	r18, 0x01	; 1
     ca6:	43 e7       	ldi	r20, 0x73	; 115
     ca8:	51 e0       	ldi	r21, 0x01	; 1
     caa:	63 e8       	ldi	r22, 0x83	; 131
     cac:	71 e0       	ldi	r23, 0x01	; 1
     cae:	8a ea       	ldi	r24, 0xAA	; 170
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	0e 94 75 01 	call	0x2ea	; 0x2ea <minuti_ispis>
     cb6:	19 c0       	rjmp	.+50     	; 0xcea <__stack+0x3eb>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) || ocitaj_jedan_taster(tasteri, TASTER_ENTER))			//IZLAZ iz menija
     cb8:	64 e0       	ldi	r22, 0x04	; 4
     cba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     cbe:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     cc2:	81 11       	cpse	r24, r1
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <__stack+0x3d5>
     cc6:	65 e0       	ldi	r22, 0x05	; 5
     cc8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     ccc:	0e 94 41 07 	call	0xe82	; 0xe82 <ocitaj_jedan_taster>
     cd0:	88 23       	and	r24, r24
     cd2:	59 f0       	breq	.+22     	; 0xcea <__stack+0x3eb>
					{
						/* svejedno da li je stisnuto ENTER ili NAZAD vreme ON-OFF je promenjeno */
						/* trebala bi mi pomocna struktura da bih izbegao ovakav nacin rada, mada ovo nije kriticno kao kod sata */
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor = 0;					//reset kursora
     cda:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	0e 94 0d 03 	call	0x61a	; 0x61a <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
		
		
		default: {}
		
	}
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	0f 91       	pop	r16
     cf0:	08 95       	ret

00000cf2 <main>:
}

int main(void)
{

	vreme_paljenja.hr = 23;
     cf2:	e0 ea       	ldi	r30, 0xA0	; 160
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	87 e1       	ldi	r24, 0x17	; 23
     cf8:	82 83       	std	Z+2, r24	; 0x02
	vreme_paljenja.min = 30;
     cfa:	8e e1       	ldi	r24, 0x1E	; 30
     cfc:	81 83       	std	Z+1, r24	; 0x01
	vreme_gasenja.hr = 5;
     cfe:	e9 ea       	ldi	r30, 0xA9	; 169
     d00:	f1 e0       	ldi	r31, 0x01	; 1
     d02:	85 e0       	ldi	r24, 0x05	; 5
     d04:	82 83       	std	Z+2, r24	; 0x02
	vreme_gasenja.min = 40;
     d06:	88 e2       	ldi	r24, 0x28	; 40
     d08:	81 83       	std	Z+1, r24	; 0x01
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			////PD2-3 output
     d0a:	0e 94 20 08 	call	0x1040	; 0x1040 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
     d0e:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_init>
	lcd1602_init();
     d12:	0e 94 91 02 	call	0x522	; 0x522 <lcd1602_init>
	ADC_init();				
     d16:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda  500k
     d1a:	60 e2       	ldi	r22, 0x20	; 32
     d1c:	71 ea       	ldi	r23, 0xA1	; 161
     d1e:	87 e0       	ldi	r24, 0x07	; 7
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 9e 08 	call	0x113c	; 0x113c <uart_init>
	DS3231_init();			//RTC init
     d26:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
     d2a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <pc_init>
	tasteri_init();			//NAPOMENA: PD4-7 i PB0-1 INPUT, INT_PULLUP=ON
     d2e:	0e 94 0b 07 	call	0xe16	; 0xe16 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
     d32:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;
     d34:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
     d36:	78 94       	sei
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
			
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     d38:	0f 2e       	mov	r0, r31
     d3a:	f4 e0       	ldi	r31, 0x04	; 4
     d3c:	ef 2e       	mov	r14, r31
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	ff 2e       	mov	r15, r31
     d42:	f0 2d       	mov	r31, r0
     d44:	c3 e8       	ldi	r28, 0x83	; 131
     d46:	d1 e0       	ldi	r29, 0x01	; 1
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
     d48:	0e 94 18 07 	call	0xe30	; 0xe30 <ocitaj_tastere>
     d4c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tasteri>
		
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
     d50:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <flag_pc_int_pomocni>
     d54:	88 23       	and	r24, r24
     d56:	e9 f1       	breq	.+122    	; 0xdd2 <main+0xe0>
		{
			flag_pc_int_pomocni = 0;
     d58:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     d5c:	00 e0       	ldi	r16, 0x00	; 0
     d5e:	2a eb       	ldi	r18, 0xBA	; 186
     d60:	31 e0       	ldi	r19, 0x01	; 1
     d62:	42 eb       	ldi	r20, 0xB2	; 178
     d64:	51 e0       	ldi	r21, 0x01	; 1
     d66:	63 eb       	ldi	r22, 0xB3	; 179
     d68:	71 e0       	ldi	r23, 0x01	; 1
     d6a:	84 eb       	ldi	r24, 0xB4	; 180
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	0e 94 af 07 	call	0xf5e	; 0xf5e <getTime>
			
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     d72:	e2 eb       	ldi	r30, 0xB2	; 178
     d74:	f1 e0       	ldi	r31, 0x01	; 1
     d76:	80 81       	ld	r24, Z
     d78:	1f 92       	push	r1
     d7a:	8f 93       	push	r24
     d7c:	81 81       	ldd	r24, Z+1	; 0x01
     d7e:	1f 92       	push	r1
     d80:	8f 93       	push	r24
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	1f 92       	push	r1
     d86:	8f 93       	push	r24
     d88:	ff 92       	push	r15
     d8a:	ef 92       	push	r14
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	0e 94 3b 09 	call	0x1276	; 0x1276 <sprintf>
			send_str(bafer);
     d94:	ce 01       	movw	r24, r28
     d96:	0e 94 28 09 	call	0x1250	; 0x1250 <send_str>
			send_str("\n"); //novi red
     d9a:	8c e6       	ldi	r24, 0x6C	; 108
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	0e 94 28 09 	call	0x1250	; 0x1250 <send_str>
			
			/* paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno = period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);
     da2:	42 eb       	ldi	r20, 0xB2	; 178
     da4:	51 e0       	ldi	r21, 0x01	; 1
     da6:	69 ea       	ldi	r22, 0xA9	; 169
     da8:	71 e0       	ldi	r23, 0x01	; 1
     daa:	80 ea       	ldi	r24, 0xA0	; 160
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 19 03 	call	0x632	; 0x632 <period_paljenja>
     db2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <ukljuceno>
			
			if (ukljuceno)
     db6:	2d b7       	in	r18, 0x3d	; 61
     db8:	3e b7       	in	r19, 0x3e	; 62
     dba:	26 5f       	subi	r18, 0xF6	; 246
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	3e bf       	out	0x3e, r19	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	2d bf       	out	0x3d, r18	; 61
     dc8:	88 23       	and	r24, r24
     dca:	11 f0       	breq	.+4      	; 0xdd0 <main+0xde>
				PORTB |= 1<<PINB5;   //high
     dcc:	2d 9a       	sbi	0x05, 5	; 5
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <main+0xe0>
			else
				PORTB &= ~(1<<PINB5);	//low
     dd0:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
     dd2:	0e 94 55 03 	call	0x6aa	; 0x6aa <fsm_lcd_menu>
		

		
    }
     dd6:	b8 cf       	rjmp	.-144    	; 0xd48 <main+0x56>

00000dd8 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
     dd8:	e8 e6       	ldi	r30, 0x68	; 104
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	82 60       	ori	r24, 0x02	; 2
     de0:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
     de2:	ec e6       	ldi	r30, 0x6C	; 108
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	88 60       	ori	r24, 0x08	; 8
     dea:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
     dec:	3b 98       	cbi	0x07, 3	; 7
     dee:	08 95       	ret

00000df0 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
     df0:	1f 92       	push	r1
     df2:	0f 92       	push	r0
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	0f 92       	push	r0
     df8:	11 24       	eor	r1, r1
     dfa:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
     dfc:	33 9b       	sbis	0x06, 3	; 6
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <__vector_4+0x1a>
	{
		flag_pc_int = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <flag_pc_int>
		flag_pc_int_pomocni = 1;
     e06:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <flag_pc_int_pomocni>
	}
		
     e0a:	8f 91       	pop	r24
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <tasteri_init>:
char buff[50];

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
     e16:	8a b1       	in	r24, 0x0a	; 10
     e18:	8f 70       	andi	r24, 0x0F	; 15
     e1a:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
     e1c:	84 b1       	in	r24, 0x04	; 4
     e1e:	8c 7f       	andi	r24, 0xFC	; 252
     e20:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
     e22:	8b b1       	in	r24, 0x0b	; 11
     e24:	80 6f       	ori	r24, 0xF0	; 240
     e26:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
     e28:	85 b1       	in	r24, 0x05	; 5
     e2a:	83 60       	ori	r24, 0x03	; 3
     e2c:	85 b9       	out	0x05, r24	; 5
     e2e:	08 95       	ret

00000e30 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
     e30:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <flag_prekid_debounce_time_half>
     e34:	88 23       	and	r24, r24
     e36:	69 f0       	breq	.+26     	; 0xe52 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
     e38:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
     e3c:	93 b1       	in	r25, 0x03	; 3
     e3e:	29 b1       	in	r18, 0x09	; 9
     e40:	30 e1       	ldi	r19, 0x10	; 16
     e42:	93 9f       	mul	r25, r19
     e44:	c0 01       	movw	r24, r0
     e46:	11 24       	eor	r1, r1
     e48:	92 2f       	mov	r25, r18
     e4a:	92 95       	swap	r25
     e4c:	9f 70       	andi	r25, 0x0F	; 15
     e4e:	89 2b       	or	r24, r25
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
     e52:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
     e54:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <flag_prekid_debounce_time>
     e58:	99 23       	and	r25, r25
     e5a:	81 f0       	breq	.+32     	; 0xe7c <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
     e5c:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
     e60:	93 b1       	in	r25, 0x03	; 3
     e62:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
     e64:	50 e1       	ldi	r21, 0x10	; 16
     e66:	95 9f       	mul	r25, r21
     e68:	90 01       	movw	r18, r0
     e6a:	11 24       	eor	r1, r1
     e6c:	94 2f       	mov	r25, r20
     e6e:	92 95       	swap	r25
     e70:	9f 70       	andi	r25, 0x0F	; 15
     e72:	29 2b       	or	r18, r25
     e74:	82 13       	cpse	r24, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
     e78:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasteri_reg.1950>
		
	}
	
	return tasteri_reg;
}
     e7c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri_reg.1950>
     e80:	08 95       	ret

00000e82 <ocitaj_jedan_taster>:
	
	uint8_t stisnut = 0;
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	80 95       	com	r24
     e86:	90 95       	com	r25
     e88:	9c 01       	movw	r18, r24
     e8a:	06 2e       	mov	r0, r22
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <ocitaj_jedan_taster+0x10>
     e8e:	35 95       	asr	r19
     e90:	27 95       	ror	r18
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <ocitaj_jedan_taster+0xc>
     e96:	20 ff       	sbrs	r18, 0
     e98:	0a c0       	rjmp	.+20     	; 0xeae <ocitaj_jedan_taster+0x2c>
     e9a:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <flag_stisnut.1959>
     e9e:	21 11       	cpse	r18, r1
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <ocitaj_jedan_taster+0x2c>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <flag_stisnut.1959>
		temp_tast = button;		//zapamtim koji je taster stisnut
     ea8:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <temp_tast.1958>
     eac:	08 95       	ret
		stisnut = 1;
	}
	if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
     eae:	00 90 78 01 	lds	r0, 0x0178	; 0x800178 <temp_tast.1958>
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <ocitaj_jedan_taster+0x36>
     eb4:	95 95       	asr	r25
     eb6:	87 95       	ror	r24
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <ocitaj_jedan_taster+0x32>
     ebc:	80 fd       	sbrc	r24, 0
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <ocitaj_jedan_taster+0x46>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
     ec0:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <flag_stisnut.1959>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	08 95       	ret
     ec8:	80 e0       	ldi	r24, 0x00	; 0
	}
			
	
	return stisnut;
     eca:	08 95       	ret

00000ecc <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
     ecc:	98 2f       	mov	r25, r24
     ece:	92 95       	swap	r25
     ed0:	9f 70       	andi	r25, 0x0F	; 15
     ed2:	99 0f       	add	r25, r25
     ed4:	29 2f       	mov	r18, r25
     ed6:	22 0f       	add	r18, r18
     ed8:	22 0f       	add	r18, r18
     eda:	92 0f       	add	r25, r18
     edc:	8f 70       	andi	r24, 0x0F	; 15
     ede:	89 0f       	add	r24, r25
     ee0:	08 95       	ret

00000ee2 <decimal_to_bcd>:
     ee2:	9d ec       	ldi	r25, 0xCD	; 205
     ee4:	89 9f       	mul	r24, r25
     ee6:	91 2d       	mov	r25, r1
     ee8:	11 24       	eor	r1, r1
     eea:	96 95       	lsr	r25
     eec:	96 95       	lsr	r25
     eee:	96 95       	lsr	r25
     ef0:	20 e1       	ldi	r18, 0x10	; 16
     ef2:	92 9f       	mul	r25, r18
     ef4:	a0 01       	movw	r20, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	99 0f       	add	r25, r25
     efa:	29 2f       	mov	r18, r25
     efc:	22 0f       	add	r18, r18
     efe:	22 0f       	add	r18, r18
     f00:	92 0f       	add	r25, r18
     f02:	89 1b       	sub	r24, r25
     f04:	8f 70       	andi	r24, 0x0F	; 15
     f06:	84 2b       	or	r24, r20
     f08:	08 95       	ret

00000f0a <DS3231_Read>:
     f0a:	cf 93       	push	r28
     f0c:	c8 2f       	mov	r28, r24
     f0e:	80 ed       	ldi	r24, 0xD0	; 208
     f10:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     f14:	8c 2f       	mov	r24, r28
     f16:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     f1a:	81 ed       	ldi	r24, 0xD1	; 209
     f1c:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     f20:	0e 94 ff 00 	call	0x1fe	; 0x1fe <i2c_readNak>
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <DS3231_Write>:
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	d8 2f       	mov	r29, r24
     f2e:	c6 2f       	mov	r28, r22
     f30:	80 ed       	ldi	r24, 0xD0	; 208
     f32:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     f36:	8d 2f       	mov	r24, r29
     f38:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     f3c:	8c 2f       	mov	r24, r28
     f3e:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     f42:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_stop>
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <DS3231_init>:
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	8e e0       	ldi	r24, 0x0E	; 14
     f50:	0e 94 94 07 	call	0xf28	; 0xf28 <DS3231_Write>
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	8f e0       	ldi	r24, 0x0F	; 15
     f58:	0e 94 94 07 	call	0xf28	; 0xf28 <DS3231_Write>
     f5c:	08 95       	ret

00000f5e <getTime>:
     f5e:	af 92       	push	r10
     f60:	bf 92       	push	r11
     f62:	cf 92       	push	r12
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
     f72:	7b 01       	movw	r14, r22
     f74:	6a 01       	movw	r12, r20
     f76:	59 01       	movw	r10, r18
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	0e 94 85 07 	call	0xf0a	; 0xf0a <DS3231_Read>
     f7e:	0e 94 66 07 	call	0xecc	; 0xecc <bcd_to_decimal>
     f82:	f6 01       	movw	r30, r12
     f84:	80 83       	st	Z, r24
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	0e 94 85 07 	call	0xf0a	; 0xf0a <DS3231_Read>
     f8c:	0e 94 66 07 	call	0xecc	; 0xecc <bcd_to_decimal>
     f90:	f7 01       	movw	r30, r14
     f92:	80 83       	st	Z, r24
     f94:	01 30       	cpi	r16, 0x01	; 1
     f96:	81 f4       	brne	.+32     	; 0xfb8 <getTime+0x5a>
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	0e 94 85 07 	call	0xf0a	; 0xf0a <DS3231_Read>
     f9e:	85 fb       	bst	r24, 5
     fa0:	88 27       	eor	r24, r24
     fa2:	80 f9       	bld	r24, 0
     fa4:	f5 01       	movw	r30, r10
     fa6:	80 83       	st	Z, r24
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	0e 94 85 07 	call	0xf0a	; 0xf0a <DS3231_Read>
     fae:	8f 71       	andi	r24, 0x1F	; 31
     fb0:	0e 94 66 07 	call	0xecc	; 0xecc <bcd_to_decimal>
     fb4:	88 83       	st	Y, r24
     fb6:	07 c0       	rjmp	.+14     	; 0xfc6 <getTime+0x68>
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	0e 94 85 07 	call	0xf0a	; 0xf0a <DS3231_Read>
     fbe:	8f 73       	andi	r24, 0x3F	; 63
     fc0:	0e 94 66 07 	call	0xecc	; 0xecc <bcd_to_decimal>
     fc4:	88 83       	st	Y, r24
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	bf 90       	pop	r11
     fd6:	af 90       	pop	r10
     fd8:	08 95       	ret

00000fda <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	d8 2f       	mov	r29, r24
     fe4:	c6 2f       	mov	r28, r22
     fe6:	84 2f       	mov	r24, r20
     fe8:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
     fea:	0e 94 71 07 	call	0xee2	; 0xee2 <decimal_to_bcd>
     fee:	68 2f       	mov	r22, r24
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	0e 94 94 07 	call	0xf28	; 0xf28 <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
     ff6:	8c 2f       	mov	r24, r28
     ff8:	0e 94 71 07 	call	0xee2	; 0xee2 <decimal_to_bcd>
     ffc:	68 2f       	mov	r22, r24
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	0e 94 94 07 	call	0xf28	; 0xf28 <DS3231_Write>
	
	switch(hour_format)
    1004:	01 30       	cpi	r16, 0x01	; 1
    1006:	79 f4       	brne	.+30     	; 0x1026 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    1008:	11 30       	cpi	r17, 0x01	; 1
    100a:	11 f0       	breq	.+4      	; 0x1010 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    100c:	c0 e4       	ldi	r28, 0x40	; 64
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    1010:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    1012:	8d 2f       	mov	r24, r29
    1014:	0e 94 71 07 	call	0xee2	; 0xee2 <decimal_to_bcd>
    1018:	8f 71       	andi	r24, 0x1F	; 31
    101a:	68 2f       	mov	r22, r24
    101c:	6c 2b       	or	r22, r28
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	0e 94 94 07 	call	0xf28	; 0xf28 <DS3231_Write>
			break;
    1024:	08 c0       	rjmp	.+16     	; 0x1036 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    1026:	8d 2f       	mov	r24, r29
    1028:	0e 94 71 07 	call	0xee2	; 0xee2 <decimal_to_bcd>
    102c:	68 2f       	mov	r22, r24
    102e:	6f 73       	andi	r22, 0x3F	; 63
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	0e 94 94 07 	call	0xf28	; 0xf28 <DS3231_Write>
			break;
		}
	}
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <tajmer0_init>:
volatile uint8_t brojac_prekida_tajmera0_debounce = 0;
volatile uint8_t brojac_prekida_tajmera0_debounce_half = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    1048:	99 ef       	ldi	r25, 0xF9	; 249
    104a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    104c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRD |= (1<<PIND2)|(1<<PIND3);  //PD2-3 output
    1050:	8a b1       	in	r24, 0x0a	; 10
    1052:	8c 60       	ori	r24, 0x0C	; 12
    1054:	8a b9       	out	0x0a, r24	; 10
    1056:	08 95       	ret

00001058 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    1058:	1f 92       	push	r1
    105a:	0f 92       	push	r0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	0f 92       	push	r0
    1060:	11 24       	eor	r1, r1
    1062:	8f 93       	push	r24
	flag_tajmer0_prekid = 1;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    106a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <brojac_prekida_tajmera0>
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    1074:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <brojac_prekida_tajmera0_debounce_half>
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    107e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <brojac_prekida_tajmera0_debounce>
    1082:	8f 5f       	subi	r24, 0xFF	; 255
    1084:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <brojac_prekida_tajmera0_debounce>
		
	if(brojac_prekida_tajmera0 == 255)	//1ms * 10 = 10ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    1088:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <brojac_prekida_tajmera0>
    108c:	8f 3f       	cpi	r24, 0xFF	; 255
    108e:	29 f4       	brne	.+10     	; 0x109a <__vector_14+0x42>
	{
		brojac_prekida_tajmera0 = 0;
    1090:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;				
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <flag_prekid_10ms>
		
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    109a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <brojac_prekida_tajmera0_debounce_half>
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	31 f4       	brne	.+12     	; 0x10ae <__vector_14+0x56>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    10a2:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <flag_prekid_debounce_time_half>
		PIND |= 1<<PIND2;	//toggle PD2
    10ac:	4a 9a       	sbi	0x09, 2	; 9
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    10ae:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <brojac_prekida_tajmera0_debounce>
    10b2:	86 30       	cpi	r24, 0x06	; 6
    10b4:	31 f4       	brne	.+12     	; 0x10c2 <__vector_14+0x6a>
	{
		brojac_prekida_tajmera0_debounce = 0;
    10b6:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <flag_prekid_debounce_time>
		PIND |= 1<<PIND3;	//toggle PD3
    10c0:	4b 9a       	sbi	0x09, 3	; 9
	}
	
    10c2:	8f 91       	pop	r24
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
	poslato=0;
    10d8:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <poslato>
}
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_18>:

ISR(USART_RX_vect)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	8f 93       	push	r24
    10f2:	ef 93       	push	r30
    10f4:	ff 93       	push	r31
	input_char=UDR0;
    10f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    10fa:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    10fe:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <buff_size>
    1102:	88 30       	cpi	r24, 0x08	; 8
    1104:	98 f4       	brcc	.+38     	; 0x112c <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    1106:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <buff_size>
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <input_char>
    1110:	e3 54       	subi	r30, 0x43	; 67
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	80 83       	st	Z, r24
		buff_size++;
    1116:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <buff_size>
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <buff_size>
		input_buffer[buff_size]='\0';
    1120:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <buff_size>
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	e3 54       	subi	r30, 0x43	; 67
    1128:	fe 4f       	sbci	r31, 0xFE	; 254
    112a:	10 82       	st	Z, r1
	}
}
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	8f 91       	pop	r24
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    113c:	22 e0       	ldi	r18, 0x02	; 2
    113e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    1142:	28 ed       	ldi	r18, 0xD8	; 216
    1144:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    1148:	26 e0       	ldi	r18, 0x06	; 6
    114a:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    114e:	61 15       	cp	r22, r1
    1150:	2c e2       	ldi	r18, 0x2C	; 44
    1152:	72 07       	cpc	r23, r18
    1154:	21 e0       	ldi	r18, 0x01	; 1
    1156:	82 07       	cpc	r24, r18
    1158:	91 05       	cpc	r25, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <uart_init+0x22>
    115c:	51 c0       	rjmp	.+162    	; 0x1200 <uart_init+0xc4>
    115e:	c8 f4       	brcc	.+50     	; 0x1192 <uart_init+0x56>
    1160:	60 34       	cpi	r22, 0x40	; 64
    1162:	28 e3       	ldi	r18, 0x38	; 56
    1164:	72 07       	cpc	r23, r18
    1166:	81 05       	cpc	r24, r1
    1168:	91 05       	cpc	r25, r1
    116a:	a9 f1       	breq	.+106    	; 0x11d6 <uart_init+0x9a>
    116c:	30 f4       	brcc	.+12     	; 0x117a <uart_init+0x3e>
    116e:	60 38       	cpi	r22, 0x80	; 128
    1170:	75 42       	sbci	r23, 0x25	; 37
    1172:	81 05       	cpc	r24, r1
    1174:	91 05       	cpc	r25, r1
    1176:	41 f1       	breq	.+80     	; 0x11c8 <uart_init+0x8c>
    1178:	64 c0       	rjmp	.+200    	; 0x1242 <uart_init+0x106>
    117a:	61 15       	cp	r22, r1
    117c:	2b e4       	ldi	r18, 0x4B	; 75
    117e:	72 07       	cpc	r23, r18
    1180:	81 05       	cpc	r24, r1
    1182:	91 05       	cpc	r25, r1
    1184:	79 f1       	breq	.+94     	; 0x11e4 <uart_init+0xa8>
    1186:	61 15       	cp	r22, r1
    1188:	76 49       	sbci	r23, 0x96	; 150
    118a:	81 05       	cpc	r24, r1
    118c:	91 05       	cpc	r25, r1
    118e:	89 f1       	breq	.+98     	; 0x11f2 <uart_init+0xb6>
    1190:	58 c0       	rjmp	.+176    	; 0x1242 <uart_init+0x106>
    1192:	60 32       	cpi	r22, 0x20	; 32
    1194:	21 ea       	ldi	r18, 0xA1	; 161
    1196:	72 07       	cpc	r23, r18
    1198:	27 e0       	ldi	r18, 0x07	; 7
    119a:	82 07       	cpc	r24, r18
    119c:	91 05       	cpc	r25, r1
    119e:	f1 f1       	breq	.+124    	; 0x121c <uart_init+0xe0>
    11a0:	30 f4       	brcc	.+12     	; 0x11ae <uart_init+0x72>
    11a2:	60 39       	cpi	r22, 0x90	; 144
    11a4:	70 4d       	sbci	r23, 0xD0	; 208
    11a6:	83 40       	sbci	r24, 0x03	; 3
    11a8:	91 05       	cpc	r25, r1
    11aa:	89 f1       	breq	.+98     	; 0x120e <uart_init+0xd2>
    11ac:	4a c0       	rjmp	.+148    	; 0x1242 <uart_init+0x106>
    11ae:	60 34       	cpi	r22, 0x40	; 64
    11b0:	22 e4       	ldi	r18, 0x42	; 66
    11b2:	72 07       	cpc	r23, r18
    11b4:	2f e0       	ldi	r18, 0x0F	; 15
    11b6:	82 07       	cpc	r24, r18
    11b8:	91 05       	cpc	r25, r1
    11ba:	b9 f1       	breq	.+110    	; 0x122a <uart_init+0xee>
    11bc:	60 38       	cpi	r22, 0x80	; 128
    11be:	74 48       	sbci	r23, 0x84	; 132
    11c0:	8e 41       	sbci	r24, 0x1E	; 30
    11c2:	91 05       	cpc	r25, r1
    11c4:	c9 f1       	breq	.+114    	; 0x1238 <uart_init+0xfc>
    11c6:	3d c0       	rjmp	.+122    	; 0x1242 <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    11c8:	8f ec       	ldi	r24, 0xCF	; 207
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    11d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    11d4:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    11d6:	8a e8       	ldi	r24, 0x8A	; 138
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    11de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    11e2:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    11e4:	87 e6       	ldi	r24, 0x67	; 103
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    11ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    11f0:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    11f2:	83 e3       	ldi	r24, 0x33	; 51
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    11fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    11fe:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    1200:	89 e1       	ldi	r24, 0x19	; 25
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1208:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    120c:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    120e:	87 e0       	ldi	r24, 0x07	; 7
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1216:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    121a:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1224:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1228:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1232:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1236:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    1238:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    123c:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1240:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    1242:	8f ec       	ldi	r24, 0xCF	; 207
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    124a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    124e:	08 95       	ret

00001250 <send_str>:
	}
	
}

void send_str(char *str)
{
    1250:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1252:	90 81       	ld	r25, Z
    1254:	99 23       	and	r25, r25
    1256:	71 f0       	breq	.+28     	; 0x1274 <send_str+0x24>
    1258:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    125a:	a6 ec       	ldi	r26, 0xC6	; 198
    125c:	b0 e0       	ldi	r27, 0x00	; 0
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    125e:	81 e0       	ldi	r24, 0x01	; 1
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1260:	9c 93       	st	X, r25
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1262:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <poslato>
		while (poslato);	//koci dok ISR ne kaze da je gotovo
    1266:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <poslato>
    126a:	91 11       	cpse	r25, r1
    126c:	fc cf       	rjmp	.-8      	; 0x1266 <send_str+0x16>

void send_str(char *str)
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    126e:	91 91       	ld	r25, Z+
    1270:	91 11       	cpse	r25, r1
    1272:	f6 cf       	rjmp	.-20     	; 0x1260 <send_str+0x10>
    1274:	08 95       	ret

00001276 <sprintf>:
    1276:	ae e0       	ldi	r26, 0x0E	; 14
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e1 e4       	ldi	r30, 0x41	; 65
    127c:	f9 e0       	ldi	r31, 0x09	; 9
    127e:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__prologue_saves__+0x1c>
    1282:	0d 89       	ldd	r16, Y+21	; 0x15
    1284:	1e 89       	ldd	r17, Y+22	; 0x16
    1286:	86 e0       	ldi	r24, 0x06	; 6
    1288:	8c 83       	std	Y+4, r24	; 0x04
    128a:	1a 83       	std	Y+2, r17	; 0x02
    128c:	09 83       	std	Y+1, r16	; 0x01
    128e:	8f ef       	ldi	r24, 0xFF	; 255
    1290:	9f e7       	ldi	r25, 0x7F	; 127
    1292:	9e 83       	std	Y+6, r25	; 0x06
    1294:	8d 83       	std	Y+5, r24	; 0x05
    1296:	ae 01       	movw	r20, r28
    1298:	47 5e       	subi	r20, 0xE7	; 231
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	6f 89       	ldd	r22, Y+23	; 0x17
    129e:	78 8d       	ldd	r23, Y+24	; 0x18
    12a0:	ce 01       	movw	r24, r28
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	0e 94 5d 09 	call	0x12ba	; 0x12ba <vfprintf>
    12a8:	ef 81       	ldd	r30, Y+7	; 0x07
    12aa:	f8 85       	ldd	r31, Y+8	; 0x08
    12ac:	e0 0f       	add	r30, r16
    12ae:	f1 1f       	adc	r31, r17
    12b0:	10 82       	st	Z, r1
    12b2:	2e 96       	adiw	r28, 0x0e	; 14
    12b4:	e4 e0       	ldi	r30, 0x04	; 4
    12b6:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__epilogue_restores__+0x1c>

000012ba <vfprintf>:
    12ba:	ab e0       	ldi	r26, 0x0B	; 11
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e3 e6       	ldi	r30, 0x63	; 99
    12c0:	f9 e0       	ldi	r31, 0x09	; 9
    12c2:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__prologue_saves__>
    12c6:	6c 01       	movw	r12, r24
    12c8:	7b 01       	movw	r14, r22
    12ca:	8a 01       	movw	r16, r20
    12cc:	fc 01       	movw	r30, r24
    12ce:	17 82       	std	Z+7, r1	; 0x07
    12d0:	16 82       	std	Z+6, r1	; 0x06
    12d2:	83 81       	ldd	r24, Z+3	; 0x03
    12d4:	81 ff       	sbrs	r24, 1
    12d6:	cc c1       	rjmp	.+920    	; 0x1670 <vfprintf+0x3b6>
    12d8:	ce 01       	movw	r24, r28
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	3c 01       	movw	r6, r24
    12de:	f6 01       	movw	r30, r12
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	f7 01       	movw	r30, r14
    12e4:	93 fd       	sbrc	r25, 3
    12e6:	85 91       	lpm	r24, Z+
    12e8:	93 ff       	sbrs	r25, 3
    12ea:	81 91       	ld	r24, Z+
    12ec:	7f 01       	movw	r14, r30
    12ee:	88 23       	and	r24, r24
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <vfprintf+0x3a>
    12f2:	ba c1       	rjmp	.+884    	; 0x1668 <vfprintf+0x3ae>
    12f4:	85 32       	cpi	r24, 0x25	; 37
    12f6:	39 f4       	brne	.+14     	; 0x1306 <vfprintf+0x4c>
    12f8:	93 fd       	sbrc	r25, 3
    12fa:	85 91       	lpm	r24, Z+
    12fc:	93 ff       	sbrs	r25, 3
    12fe:	81 91       	ld	r24, Z+
    1300:	7f 01       	movw	r14, r30
    1302:	85 32       	cpi	r24, 0x25	; 37
    1304:	29 f4       	brne	.+10     	; 0x1310 <vfprintf+0x56>
    1306:	b6 01       	movw	r22, r12
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <fputc>
    130e:	e7 cf       	rjmp	.-50     	; 0x12de <vfprintf+0x24>
    1310:	91 2c       	mov	r9, r1
    1312:	21 2c       	mov	r2, r1
    1314:	31 2c       	mov	r3, r1
    1316:	ff e1       	ldi	r31, 0x1F	; 31
    1318:	f3 15       	cp	r31, r3
    131a:	d8 f0       	brcs	.+54     	; 0x1352 <vfprintf+0x98>
    131c:	8b 32       	cpi	r24, 0x2B	; 43
    131e:	79 f0       	breq	.+30     	; 0x133e <vfprintf+0x84>
    1320:	38 f4       	brcc	.+14     	; 0x1330 <vfprintf+0x76>
    1322:	80 32       	cpi	r24, 0x20	; 32
    1324:	79 f0       	breq	.+30     	; 0x1344 <vfprintf+0x8a>
    1326:	83 32       	cpi	r24, 0x23	; 35
    1328:	a1 f4       	brne	.+40     	; 0x1352 <vfprintf+0x98>
    132a:	23 2d       	mov	r18, r3
    132c:	20 61       	ori	r18, 0x10	; 16
    132e:	1d c0       	rjmp	.+58     	; 0x136a <vfprintf+0xb0>
    1330:	8d 32       	cpi	r24, 0x2D	; 45
    1332:	61 f0       	breq	.+24     	; 0x134c <vfprintf+0x92>
    1334:	80 33       	cpi	r24, 0x30	; 48
    1336:	69 f4       	brne	.+26     	; 0x1352 <vfprintf+0x98>
    1338:	23 2d       	mov	r18, r3
    133a:	21 60       	ori	r18, 0x01	; 1
    133c:	16 c0       	rjmp	.+44     	; 0x136a <vfprintf+0xb0>
    133e:	83 2d       	mov	r24, r3
    1340:	82 60       	ori	r24, 0x02	; 2
    1342:	38 2e       	mov	r3, r24
    1344:	e3 2d       	mov	r30, r3
    1346:	e4 60       	ori	r30, 0x04	; 4
    1348:	3e 2e       	mov	r3, r30
    134a:	2a c0       	rjmp	.+84     	; 0x13a0 <vfprintf+0xe6>
    134c:	f3 2d       	mov	r31, r3
    134e:	f8 60       	ori	r31, 0x08	; 8
    1350:	1d c0       	rjmp	.+58     	; 0x138c <vfprintf+0xd2>
    1352:	37 fc       	sbrc	r3, 7
    1354:	2d c0       	rjmp	.+90     	; 0x13b0 <vfprintf+0xf6>
    1356:	20 ed       	ldi	r18, 0xD0	; 208
    1358:	28 0f       	add	r18, r24
    135a:	2a 30       	cpi	r18, 0x0A	; 10
    135c:	40 f0       	brcs	.+16     	; 0x136e <vfprintf+0xb4>
    135e:	8e 32       	cpi	r24, 0x2E	; 46
    1360:	b9 f4       	brne	.+46     	; 0x1390 <vfprintf+0xd6>
    1362:	36 fc       	sbrc	r3, 6
    1364:	81 c1       	rjmp	.+770    	; 0x1668 <vfprintf+0x3ae>
    1366:	23 2d       	mov	r18, r3
    1368:	20 64       	ori	r18, 0x40	; 64
    136a:	32 2e       	mov	r3, r18
    136c:	19 c0       	rjmp	.+50     	; 0x13a0 <vfprintf+0xe6>
    136e:	36 fe       	sbrs	r3, 6
    1370:	06 c0       	rjmp	.+12     	; 0x137e <vfprintf+0xc4>
    1372:	8a e0       	ldi	r24, 0x0A	; 10
    1374:	98 9e       	mul	r9, r24
    1376:	20 0d       	add	r18, r0
    1378:	11 24       	eor	r1, r1
    137a:	92 2e       	mov	r9, r18
    137c:	11 c0       	rjmp	.+34     	; 0x13a0 <vfprintf+0xe6>
    137e:	ea e0       	ldi	r30, 0x0A	; 10
    1380:	2e 9e       	mul	r2, r30
    1382:	20 0d       	add	r18, r0
    1384:	11 24       	eor	r1, r1
    1386:	22 2e       	mov	r2, r18
    1388:	f3 2d       	mov	r31, r3
    138a:	f0 62       	ori	r31, 0x20	; 32
    138c:	3f 2e       	mov	r3, r31
    138e:	08 c0       	rjmp	.+16     	; 0x13a0 <vfprintf+0xe6>
    1390:	8c 36       	cpi	r24, 0x6C	; 108
    1392:	21 f4       	brne	.+8      	; 0x139c <vfprintf+0xe2>
    1394:	83 2d       	mov	r24, r3
    1396:	80 68       	ori	r24, 0x80	; 128
    1398:	38 2e       	mov	r3, r24
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <vfprintf+0xe6>
    139c:	88 36       	cpi	r24, 0x68	; 104
    139e:	41 f4       	brne	.+16     	; 0x13b0 <vfprintf+0xf6>
    13a0:	f7 01       	movw	r30, r14
    13a2:	93 fd       	sbrc	r25, 3
    13a4:	85 91       	lpm	r24, Z+
    13a6:	93 ff       	sbrs	r25, 3
    13a8:	81 91       	ld	r24, Z+
    13aa:	7f 01       	movw	r14, r30
    13ac:	81 11       	cpse	r24, r1
    13ae:	b3 cf       	rjmp	.-154    	; 0x1316 <vfprintf+0x5c>
    13b0:	98 2f       	mov	r25, r24
    13b2:	9f 7d       	andi	r25, 0xDF	; 223
    13b4:	95 54       	subi	r25, 0x45	; 69
    13b6:	93 30       	cpi	r25, 0x03	; 3
    13b8:	28 f4       	brcc	.+10     	; 0x13c4 <vfprintf+0x10a>
    13ba:	0c 5f       	subi	r16, 0xFC	; 252
    13bc:	1f 4f       	sbci	r17, 0xFF	; 255
    13be:	9f e3       	ldi	r25, 0x3F	; 63
    13c0:	99 83       	std	Y+1, r25	; 0x01
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <vfprintf+0x124>
    13c4:	83 36       	cpi	r24, 0x63	; 99
    13c6:	31 f0       	breq	.+12     	; 0x13d4 <vfprintf+0x11a>
    13c8:	83 37       	cpi	r24, 0x73	; 115
    13ca:	71 f0       	breq	.+28     	; 0x13e8 <vfprintf+0x12e>
    13cc:	83 35       	cpi	r24, 0x53	; 83
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <vfprintf+0x118>
    13d0:	59 c0       	rjmp	.+178    	; 0x1484 <vfprintf+0x1ca>
    13d2:	21 c0       	rjmp	.+66     	; 0x1416 <vfprintf+0x15c>
    13d4:	f8 01       	movw	r30, r16
    13d6:	80 81       	ld	r24, Z
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	0e 5f       	subi	r16, 0xFE	; 254
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	88 24       	eor	r8, r8
    13e0:	83 94       	inc	r8
    13e2:	91 2c       	mov	r9, r1
    13e4:	53 01       	movw	r10, r6
    13e6:	13 c0       	rjmp	.+38     	; 0x140e <vfprintf+0x154>
    13e8:	28 01       	movw	r4, r16
    13ea:	f2 e0       	ldi	r31, 0x02	; 2
    13ec:	4f 0e       	add	r4, r31
    13ee:	51 1c       	adc	r5, r1
    13f0:	f8 01       	movw	r30, r16
    13f2:	a0 80       	ld	r10, Z
    13f4:	b1 80       	ldd	r11, Z+1	; 0x01
    13f6:	36 fe       	sbrs	r3, 6
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <vfprintf+0x146>
    13fa:	69 2d       	mov	r22, r9
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <vfprintf+0x14a>
    1400:	6f ef       	ldi	r22, 0xFF	; 255
    1402:	7f ef       	ldi	r23, 0xFF	; 255
    1404:	c5 01       	movw	r24, r10
    1406:	0e 94 49 0b 	call	0x1692	; 0x1692 <strnlen>
    140a:	4c 01       	movw	r8, r24
    140c:	82 01       	movw	r16, r4
    140e:	f3 2d       	mov	r31, r3
    1410:	ff 77       	andi	r31, 0x7F	; 127
    1412:	3f 2e       	mov	r3, r31
    1414:	16 c0       	rjmp	.+44     	; 0x1442 <vfprintf+0x188>
    1416:	28 01       	movw	r4, r16
    1418:	22 e0       	ldi	r18, 0x02	; 2
    141a:	42 0e       	add	r4, r18
    141c:	51 1c       	adc	r5, r1
    141e:	f8 01       	movw	r30, r16
    1420:	a0 80       	ld	r10, Z
    1422:	b1 80       	ldd	r11, Z+1	; 0x01
    1424:	36 fe       	sbrs	r3, 6
    1426:	03 c0       	rjmp	.+6      	; 0x142e <vfprintf+0x174>
    1428:	69 2d       	mov	r22, r9
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <vfprintf+0x178>
    142e:	6f ef       	ldi	r22, 0xFF	; 255
    1430:	7f ef       	ldi	r23, 0xFF	; 255
    1432:	c5 01       	movw	r24, r10
    1434:	0e 94 3e 0b 	call	0x167c	; 0x167c <strnlen_P>
    1438:	4c 01       	movw	r8, r24
    143a:	f3 2d       	mov	r31, r3
    143c:	f0 68       	ori	r31, 0x80	; 128
    143e:	3f 2e       	mov	r3, r31
    1440:	82 01       	movw	r16, r4
    1442:	33 fc       	sbrc	r3, 3
    1444:	1b c0       	rjmp	.+54     	; 0x147c <vfprintf+0x1c2>
    1446:	82 2d       	mov	r24, r2
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	88 16       	cp	r8, r24
    144c:	99 06       	cpc	r9, r25
    144e:	b0 f4       	brcc	.+44     	; 0x147c <vfprintf+0x1c2>
    1450:	b6 01       	movw	r22, r12
    1452:	80 e2       	ldi	r24, 0x20	; 32
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <fputc>
    145a:	2a 94       	dec	r2
    145c:	f4 cf       	rjmp	.-24     	; 0x1446 <vfprintf+0x18c>
    145e:	f5 01       	movw	r30, r10
    1460:	37 fc       	sbrc	r3, 7
    1462:	85 91       	lpm	r24, Z+
    1464:	37 fe       	sbrs	r3, 7
    1466:	81 91       	ld	r24, Z+
    1468:	5f 01       	movw	r10, r30
    146a:	b6 01       	movw	r22, r12
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <fputc>
    1472:	21 10       	cpse	r2, r1
    1474:	2a 94       	dec	r2
    1476:	21 e0       	ldi	r18, 0x01	; 1
    1478:	82 1a       	sub	r8, r18
    147a:	91 08       	sbc	r9, r1
    147c:	81 14       	cp	r8, r1
    147e:	91 04       	cpc	r9, r1
    1480:	71 f7       	brne	.-36     	; 0x145e <vfprintf+0x1a4>
    1482:	e8 c0       	rjmp	.+464    	; 0x1654 <vfprintf+0x39a>
    1484:	84 36       	cpi	r24, 0x64	; 100
    1486:	11 f0       	breq	.+4      	; 0x148c <vfprintf+0x1d2>
    1488:	89 36       	cpi	r24, 0x69	; 105
    148a:	41 f5       	brne	.+80     	; 0x14dc <vfprintf+0x222>
    148c:	f8 01       	movw	r30, r16
    148e:	37 fe       	sbrs	r3, 7
    1490:	07 c0       	rjmp	.+14     	; 0x14a0 <vfprintf+0x1e6>
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	0c 5f       	subi	r16, 0xFC	; 252
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    149e:	08 c0       	rjmp	.+16     	; 0x14b0 <vfprintf+0x1f6>
    14a0:	60 81       	ld	r22, Z
    14a2:	71 81       	ldd	r23, Z+1	; 0x01
    14a4:	07 2e       	mov	r0, r23
    14a6:	00 0c       	add	r0, r0
    14a8:	88 0b       	sbc	r24, r24
    14aa:	99 0b       	sbc	r25, r25
    14ac:	0e 5f       	subi	r16, 0xFE	; 254
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	f3 2d       	mov	r31, r3
    14b2:	ff 76       	andi	r31, 0x6F	; 111
    14b4:	3f 2e       	mov	r3, r31
    14b6:	97 ff       	sbrs	r25, 7
    14b8:	09 c0       	rjmp	.+18     	; 0x14cc <vfprintf+0x212>
    14ba:	90 95       	com	r25
    14bc:	80 95       	com	r24
    14be:	70 95       	com	r23
    14c0:	61 95       	neg	r22
    14c2:	7f 4f       	sbci	r23, 0xFF	; 255
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	f0 68       	ori	r31, 0x80	; 128
    14ca:	3f 2e       	mov	r3, r31
    14cc:	2a e0       	ldi	r18, 0x0A	; 10
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	a3 01       	movw	r20, r6
    14d2:	0e 94 90 0b 	call	0x1720	; 0x1720 <__ultoa_invert>
    14d6:	88 2e       	mov	r8, r24
    14d8:	86 18       	sub	r8, r6
    14da:	45 c0       	rjmp	.+138    	; 0x1566 <vfprintf+0x2ac>
    14dc:	85 37       	cpi	r24, 0x75	; 117
    14de:	31 f4       	brne	.+12     	; 0x14ec <vfprintf+0x232>
    14e0:	23 2d       	mov	r18, r3
    14e2:	2f 7e       	andi	r18, 0xEF	; 239
    14e4:	b2 2e       	mov	r11, r18
    14e6:	2a e0       	ldi	r18, 0x0A	; 10
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	25 c0       	rjmp	.+74     	; 0x1536 <vfprintf+0x27c>
    14ec:	93 2d       	mov	r25, r3
    14ee:	99 7f       	andi	r25, 0xF9	; 249
    14f0:	b9 2e       	mov	r11, r25
    14f2:	8f 36       	cpi	r24, 0x6F	; 111
    14f4:	c1 f0       	breq	.+48     	; 0x1526 <vfprintf+0x26c>
    14f6:	18 f4       	brcc	.+6      	; 0x14fe <vfprintf+0x244>
    14f8:	88 35       	cpi	r24, 0x58	; 88
    14fa:	79 f0       	breq	.+30     	; 0x151a <vfprintf+0x260>
    14fc:	b5 c0       	rjmp	.+362    	; 0x1668 <vfprintf+0x3ae>
    14fe:	80 37       	cpi	r24, 0x70	; 112
    1500:	19 f0       	breq	.+6      	; 0x1508 <vfprintf+0x24e>
    1502:	88 37       	cpi	r24, 0x78	; 120
    1504:	21 f0       	breq	.+8      	; 0x150e <vfprintf+0x254>
    1506:	b0 c0       	rjmp	.+352    	; 0x1668 <vfprintf+0x3ae>
    1508:	e9 2f       	mov	r30, r25
    150a:	e0 61       	ori	r30, 0x10	; 16
    150c:	be 2e       	mov	r11, r30
    150e:	b4 fe       	sbrs	r11, 4
    1510:	0d c0       	rjmp	.+26     	; 0x152c <vfprintf+0x272>
    1512:	fb 2d       	mov	r31, r11
    1514:	f4 60       	ori	r31, 0x04	; 4
    1516:	bf 2e       	mov	r11, r31
    1518:	09 c0       	rjmp	.+18     	; 0x152c <vfprintf+0x272>
    151a:	34 fe       	sbrs	r3, 4
    151c:	0a c0       	rjmp	.+20     	; 0x1532 <vfprintf+0x278>
    151e:	29 2f       	mov	r18, r25
    1520:	26 60       	ori	r18, 0x06	; 6
    1522:	b2 2e       	mov	r11, r18
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <vfprintf+0x278>
    1526:	28 e0       	ldi	r18, 0x08	; 8
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <vfprintf+0x27c>
    152c:	20 e1       	ldi	r18, 0x10	; 16
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <vfprintf+0x27c>
    1532:	20 e1       	ldi	r18, 0x10	; 16
    1534:	32 e0       	ldi	r19, 0x02	; 2
    1536:	f8 01       	movw	r30, r16
    1538:	b7 fe       	sbrs	r11, 7
    153a:	07 c0       	rjmp	.+14     	; 0x154a <vfprintf+0x290>
    153c:	60 81       	ld	r22, Z
    153e:	71 81       	ldd	r23, Z+1	; 0x01
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	0c 5f       	subi	r16, 0xFC	; 252
    1546:	1f 4f       	sbci	r17, 0xFF	; 255
    1548:	06 c0       	rjmp	.+12     	; 0x1556 <vfprintf+0x29c>
    154a:	60 81       	ld	r22, Z
    154c:	71 81       	ldd	r23, Z+1	; 0x01
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 5f       	subi	r16, 0xFE	; 254
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	a3 01       	movw	r20, r6
    1558:	0e 94 90 0b 	call	0x1720	; 0x1720 <__ultoa_invert>
    155c:	88 2e       	mov	r8, r24
    155e:	86 18       	sub	r8, r6
    1560:	fb 2d       	mov	r31, r11
    1562:	ff 77       	andi	r31, 0x7F	; 127
    1564:	3f 2e       	mov	r3, r31
    1566:	36 fe       	sbrs	r3, 6
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <vfprintf+0x2ca>
    156a:	23 2d       	mov	r18, r3
    156c:	2e 7f       	andi	r18, 0xFE	; 254
    156e:	a2 2e       	mov	r10, r18
    1570:	89 14       	cp	r8, r9
    1572:	58 f4       	brcc	.+22     	; 0x158a <vfprintf+0x2d0>
    1574:	34 fe       	sbrs	r3, 4
    1576:	0b c0       	rjmp	.+22     	; 0x158e <vfprintf+0x2d4>
    1578:	32 fc       	sbrc	r3, 2
    157a:	09 c0       	rjmp	.+18     	; 0x158e <vfprintf+0x2d4>
    157c:	83 2d       	mov	r24, r3
    157e:	8e 7e       	andi	r24, 0xEE	; 238
    1580:	a8 2e       	mov	r10, r24
    1582:	05 c0       	rjmp	.+10     	; 0x158e <vfprintf+0x2d4>
    1584:	b8 2c       	mov	r11, r8
    1586:	a3 2c       	mov	r10, r3
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <vfprintf+0x2d6>
    158a:	b8 2c       	mov	r11, r8
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <vfprintf+0x2d6>
    158e:	b9 2c       	mov	r11, r9
    1590:	a4 fe       	sbrs	r10, 4
    1592:	0f c0       	rjmp	.+30     	; 0x15b2 <vfprintf+0x2f8>
    1594:	fe 01       	movw	r30, r28
    1596:	e8 0d       	add	r30, r8
    1598:	f1 1d       	adc	r31, r1
    159a:	80 81       	ld	r24, Z
    159c:	80 33       	cpi	r24, 0x30	; 48
    159e:	21 f4       	brne	.+8      	; 0x15a8 <vfprintf+0x2ee>
    15a0:	9a 2d       	mov	r25, r10
    15a2:	99 7e       	andi	r25, 0xE9	; 233
    15a4:	a9 2e       	mov	r10, r25
    15a6:	09 c0       	rjmp	.+18     	; 0x15ba <vfprintf+0x300>
    15a8:	a2 fe       	sbrs	r10, 2
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <vfprintf+0x2fe>
    15ac:	b3 94       	inc	r11
    15ae:	b3 94       	inc	r11
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <vfprintf+0x300>
    15b2:	8a 2d       	mov	r24, r10
    15b4:	86 78       	andi	r24, 0x86	; 134
    15b6:	09 f0       	breq	.+2      	; 0x15ba <vfprintf+0x300>
    15b8:	b3 94       	inc	r11
    15ba:	a3 fc       	sbrc	r10, 3
    15bc:	11 c0       	rjmp	.+34     	; 0x15e0 <vfprintf+0x326>
    15be:	a0 fe       	sbrs	r10, 0
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0x314>
    15c2:	b2 14       	cp	r11, r2
    15c4:	88 f4       	brcc	.+34     	; 0x15e8 <vfprintf+0x32e>
    15c6:	28 0c       	add	r2, r8
    15c8:	92 2c       	mov	r9, r2
    15ca:	9b 18       	sub	r9, r11
    15cc:	0e c0       	rjmp	.+28     	; 0x15ea <vfprintf+0x330>
    15ce:	b2 14       	cp	r11, r2
    15d0:	60 f4       	brcc	.+24     	; 0x15ea <vfprintf+0x330>
    15d2:	b6 01       	movw	r22, r12
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <fputc>
    15dc:	b3 94       	inc	r11
    15de:	f7 cf       	rjmp	.-18     	; 0x15ce <vfprintf+0x314>
    15e0:	b2 14       	cp	r11, r2
    15e2:	18 f4       	brcc	.+6      	; 0x15ea <vfprintf+0x330>
    15e4:	2b 18       	sub	r2, r11
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <vfprintf+0x332>
    15e8:	98 2c       	mov	r9, r8
    15ea:	21 2c       	mov	r2, r1
    15ec:	a4 fe       	sbrs	r10, 4
    15ee:	10 c0       	rjmp	.+32     	; 0x1610 <vfprintf+0x356>
    15f0:	b6 01       	movw	r22, r12
    15f2:	80 e3       	ldi	r24, 0x30	; 48
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <fputc>
    15fa:	a2 fe       	sbrs	r10, 2
    15fc:	17 c0       	rjmp	.+46     	; 0x162c <vfprintf+0x372>
    15fe:	a1 fc       	sbrc	r10, 1
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <vfprintf+0x34e>
    1602:	88 e7       	ldi	r24, 0x78	; 120
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 c0       	rjmp	.+4      	; 0x160c <vfprintf+0x352>
    1608:	88 e5       	ldi	r24, 0x58	; 88
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	b6 01       	movw	r22, r12
    160e:	0c c0       	rjmp	.+24     	; 0x1628 <vfprintf+0x36e>
    1610:	8a 2d       	mov	r24, r10
    1612:	86 78       	andi	r24, 0x86	; 134
    1614:	59 f0       	breq	.+22     	; 0x162c <vfprintf+0x372>
    1616:	a1 fe       	sbrs	r10, 1
    1618:	02 c0       	rjmp	.+4      	; 0x161e <vfprintf+0x364>
    161a:	8b e2       	ldi	r24, 0x2B	; 43
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <vfprintf+0x366>
    161e:	80 e2       	ldi	r24, 0x20	; 32
    1620:	a7 fc       	sbrc	r10, 7
    1622:	8d e2       	ldi	r24, 0x2D	; 45
    1624:	b6 01       	movw	r22, r12
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <fputc>
    162c:	89 14       	cp	r8, r9
    162e:	38 f4       	brcc	.+14     	; 0x163e <vfprintf+0x384>
    1630:	b6 01       	movw	r22, r12
    1632:	80 e3       	ldi	r24, 0x30	; 48
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <fputc>
    163a:	9a 94       	dec	r9
    163c:	f7 cf       	rjmp	.-18     	; 0x162c <vfprintf+0x372>
    163e:	8a 94       	dec	r8
    1640:	f3 01       	movw	r30, r6
    1642:	e8 0d       	add	r30, r8
    1644:	f1 1d       	adc	r31, r1
    1646:	80 81       	ld	r24, Z
    1648:	b6 01       	movw	r22, r12
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <fputc>
    1650:	81 10       	cpse	r8, r1
    1652:	f5 cf       	rjmp	.-22     	; 0x163e <vfprintf+0x384>
    1654:	22 20       	and	r2, r2
    1656:	09 f4       	brne	.+2      	; 0x165a <vfprintf+0x3a0>
    1658:	42 ce       	rjmp	.-892    	; 0x12de <vfprintf+0x24>
    165a:	b6 01       	movw	r22, r12
    165c:	80 e2       	ldi	r24, 0x20	; 32
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <fputc>
    1664:	2a 94       	dec	r2
    1666:	f6 cf       	rjmp	.-20     	; 0x1654 <vfprintf+0x39a>
    1668:	f6 01       	movw	r30, r12
    166a:	86 81       	ldd	r24, Z+6	; 0x06
    166c:	97 81       	ldd	r25, Z+7	; 0x07
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <vfprintf+0x3ba>
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	9f ef       	ldi	r25, 0xFF	; 255
    1674:	2b 96       	adiw	r28, 0x0b	; 11
    1676:	e2 e1       	ldi	r30, 0x12	; 18
    1678:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__epilogue_restores__>

0000167c <strnlen_P>:
    167c:	fc 01       	movw	r30, r24
    167e:	05 90       	lpm	r0, Z+
    1680:	61 50       	subi	r22, 0x01	; 1
    1682:	70 40       	sbci	r23, 0x00	; 0
    1684:	01 10       	cpse	r0, r1
    1686:	d8 f7       	brcc	.-10     	; 0x167e <strnlen_P+0x2>
    1688:	80 95       	com	r24
    168a:	90 95       	com	r25
    168c:	8e 0f       	add	r24, r30
    168e:	9f 1f       	adc	r25, r31
    1690:	08 95       	ret

00001692 <strnlen>:
    1692:	fc 01       	movw	r30, r24
    1694:	61 50       	subi	r22, 0x01	; 1
    1696:	70 40       	sbci	r23, 0x00	; 0
    1698:	01 90       	ld	r0, Z+
    169a:	01 10       	cpse	r0, r1
    169c:	d8 f7       	brcc	.-10     	; 0x1694 <strnlen+0x2>
    169e:	80 95       	com	r24
    16a0:	90 95       	com	r25
    16a2:	8e 0f       	add	r24, r30
    16a4:	9f 1f       	adc	r25, r31
    16a6:	08 95       	ret

000016a8 <fputc>:
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	fb 01       	movw	r30, r22
    16b2:	23 81       	ldd	r18, Z+3	; 0x03
    16b4:	21 fd       	sbrc	r18, 1
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <fputc+0x16>
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	9f ef       	ldi	r25, 0xFF	; 255
    16bc:	2c c0       	rjmp	.+88     	; 0x1716 <fputc+0x6e>
    16be:	22 ff       	sbrs	r18, 2
    16c0:	16 c0       	rjmp	.+44     	; 0x16ee <fputc+0x46>
    16c2:	46 81       	ldd	r20, Z+6	; 0x06
    16c4:	57 81       	ldd	r21, Z+7	; 0x07
    16c6:	24 81       	ldd	r18, Z+4	; 0x04
    16c8:	35 81       	ldd	r19, Z+5	; 0x05
    16ca:	42 17       	cp	r20, r18
    16cc:	53 07       	cpc	r21, r19
    16ce:	44 f4       	brge	.+16     	; 0x16e0 <fputc+0x38>
    16d0:	a0 81       	ld	r26, Z
    16d2:	b1 81       	ldd	r27, Z+1	; 0x01
    16d4:	9d 01       	movw	r18, r26
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	31 83       	std	Z+1, r19	; 0x01
    16dc:	20 83       	st	Z, r18
    16de:	8c 93       	st	X, r24
    16e0:	26 81       	ldd	r18, Z+6	; 0x06
    16e2:	37 81       	ldd	r19, Z+7	; 0x07
    16e4:	2f 5f       	subi	r18, 0xFF	; 255
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	37 83       	std	Z+7, r19	; 0x07
    16ea:	26 83       	std	Z+6, r18	; 0x06
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <fputc+0x6e>
    16ee:	8b 01       	movw	r16, r22
    16f0:	ec 01       	movw	r28, r24
    16f2:	fb 01       	movw	r30, r22
    16f4:	00 84       	ldd	r0, Z+8	; 0x08
    16f6:	f1 85       	ldd	r31, Z+9	; 0x09
    16f8:	e0 2d       	mov	r30, r0
    16fa:	09 95       	icall
    16fc:	89 2b       	or	r24, r25
    16fe:	e1 f6       	brne	.-72     	; 0x16b8 <fputc+0x10>
    1700:	d8 01       	movw	r26, r16
    1702:	16 96       	adiw	r26, 0x06	; 6
    1704:	8d 91       	ld	r24, X+
    1706:	9c 91       	ld	r25, X
    1708:	17 97       	sbiw	r26, 0x07	; 7
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	17 96       	adiw	r26, 0x07	; 7
    170e:	9c 93       	st	X, r25
    1710:	8e 93       	st	-X, r24
    1712:	16 97       	sbiw	r26, 0x06	; 6
    1714:	ce 01       	movw	r24, r28
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret

00001720 <__ultoa_invert>:
    1720:	fa 01       	movw	r30, r20
    1722:	aa 27       	eor	r26, r26
    1724:	28 30       	cpi	r18, 0x08	; 8
    1726:	51 f1       	breq	.+84     	; 0x177c <__ultoa_invert+0x5c>
    1728:	20 31       	cpi	r18, 0x10	; 16
    172a:	81 f1       	breq	.+96     	; 0x178c <__ultoa_invert+0x6c>
    172c:	e8 94       	clt
    172e:	6f 93       	push	r22
    1730:	6e 7f       	andi	r22, 0xFE	; 254
    1732:	6e 5f       	subi	r22, 0xFE	; 254
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	8f 4f       	sbci	r24, 0xFF	; 255
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	af 4f       	sbci	r26, 0xFF	; 255
    173c:	b1 e0       	ldi	r27, 0x01	; 1
    173e:	3e d0       	rcall	.+124    	; 0x17bc <__ultoa_invert+0x9c>
    1740:	b4 e0       	ldi	r27, 0x04	; 4
    1742:	3c d0       	rcall	.+120    	; 0x17bc <__ultoa_invert+0x9c>
    1744:	67 0f       	add	r22, r23
    1746:	78 1f       	adc	r23, r24
    1748:	89 1f       	adc	r24, r25
    174a:	9a 1f       	adc	r25, r26
    174c:	a1 1d       	adc	r26, r1
    174e:	68 0f       	add	r22, r24
    1750:	79 1f       	adc	r23, r25
    1752:	8a 1f       	adc	r24, r26
    1754:	91 1d       	adc	r25, r1
    1756:	a1 1d       	adc	r26, r1
    1758:	6a 0f       	add	r22, r26
    175a:	71 1d       	adc	r23, r1
    175c:	81 1d       	adc	r24, r1
    175e:	91 1d       	adc	r25, r1
    1760:	a1 1d       	adc	r26, r1
    1762:	20 d0       	rcall	.+64     	; 0x17a4 <__ultoa_invert+0x84>
    1764:	09 f4       	brne	.+2      	; 0x1768 <__ultoa_invert+0x48>
    1766:	68 94       	set
    1768:	3f 91       	pop	r19
    176a:	2a e0       	ldi	r18, 0x0A	; 10
    176c:	26 9f       	mul	r18, r22
    176e:	11 24       	eor	r1, r1
    1770:	30 19       	sub	r19, r0
    1772:	30 5d       	subi	r19, 0xD0	; 208
    1774:	31 93       	st	Z+, r19
    1776:	de f6       	brtc	.-74     	; 0x172e <__ultoa_invert+0xe>
    1778:	cf 01       	movw	r24, r30
    177a:	08 95       	ret
    177c:	46 2f       	mov	r20, r22
    177e:	47 70       	andi	r20, 0x07	; 7
    1780:	40 5d       	subi	r20, 0xD0	; 208
    1782:	41 93       	st	Z+, r20
    1784:	b3 e0       	ldi	r27, 0x03	; 3
    1786:	0f d0       	rcall	.+30     	; 0x17a6 <__ultoa_invert+0x86>
    1788:	c9 f7       	brne	.-14     	; 0x177c <__ultoa_invert+0x5c>
    178a:	f6 cf       	rjmp	.-20     	; 0x1778 <__ultoa_invert+0x58>
    178c:	46 2f       	mov	r20, r22
    178e:	4f 70       	andi	r20, 0x0F	; 15
    1790:	40 5d       	subi	r20, 0xD0	; 208
    1792:	4a 33       	cpi	r20, 0x3A	; 58
    1794:	18 f0       	brcs	.+6      	; 0x179c <__ultoa_invert+0x7c>
    1796:	49 5d       	subi	r20, 0xD9	; 217
    1798:	31 fd       	sbrc	r19, 1
    179a:	40 52       	subi	r20, 0x20	; 32
    179c:	41 93       	st	Z+, r20
    179e:	02 d0       	rcall	.+4      	; 0x17a4 <__ultoa_invert+0x84>
    17a0:	a9 f7       	brne	.-22     	; 0x178c <__ultoa_invert+0x6c>
    17a2:	ea cf       	rjmp	.-44     	; 0x1778 <__ultoa_invert+0x58>
    17a4:	b4 e0       	ldi	r27, 0x04	; 4
    17a6:	a6 95       	lsr	r26
    17a8:	97 95       	ror	r25
    17aa:	87 95       	ror	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	ba 95       	dec	r27
    17b2:	c9 f7       	brne	.-14     	; 0x17a6 <__ultoa_invert+0x86>
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	61 05       	cpc	r22, r1
    17b8:	71 05       	cpc	r23, r1
    17ba:	08 95       	ret
    17bc:	9b 01       	movw	r18, r22
    17be:	ac 01       	movw	r20, r24
    17c0:	0a 2e       	mov	r0, r26
    17c2:	06 94       	lsr	r0
    17c4:	57 95       	ror	r21
    17c6:	47 95       	ror	r20
    17c8:	37 95       	ror	r19
    17ca:	27 95       	ror	r18
    17cc:	ba 95       	dec	r27
    17ce:	c9 f7       	brne	.-14     	; 0x17c2 <__ultoa_invert+0xa2>
    17d0:	62 0f       	add	r22, r18
    17d2:	73 1f       	adc	r23, r19
    17d4:	84 1f       	adc	r24, r20
    17d6:	95 1f       	adc	r25, r21
    17d8:	a0 1d       	adc	r26, r0
    17da:	08 95       	ret

000017dc <__prologue_saves__>:
    17dc:	2f 92       	push	r2
    17de:	3f 92       	push	r3
    17e0:	4f 92       	push	r4
    17e2:	5f 92       	push	r5
    17e4:	6f 92       	push	r6
    17e6:	7f 92       	push	r7
    17e8:	8f 92       	push	r8
    17ea:	9f 92       	push	r9
    17ec:	af 92       	push	r10
    17ee:	bf 92       	push	r11
    17f0:	cf 92       	push	r12
    17f2:	df 92       	push	r13
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	ca 1b       	sub	r28, r26
    1806:	db 0b       	sbc	r29, r27
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	09 94       	ijmp

00001814 <__epilogue_restores__>:
    1814:	2a 88       	ldd	r2, Y+18	; 0x12
    1816:	39 88       	ldd	r3, Y+17	; 0x11
    1818:	48 88       	ldd	r4, Y+16	; 0x10
    181a:	5f 84       	ldd	r5, Y+15	; 0x0f
    181c:	6e 84       	ldd	r6, Y+14	; 0x0e
    181e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1820:	8c 84       	ldd	r8, Y+12	; 0x0c
    1822:	9b 84       	ldd	r9, Y+11	; 0x0b
    1824:	aa 84       	ldd	r10, Y+10	; 0x0a
    1826:	b9 84       	ldd	r11, Y+9	; 0x09
    1828:	c8 84       	ldd	r12, Y+8	; 0x08
    182a:	df 80       	ldd	r13, Y+7	; 0x07
    182c:	ee 80       	ldd	r14, Y+6	; 0x06
    182e:	fd 80       	ldd	r15, Y+5	; 0x05
    1830:	0c 81       	ldd	r16, Y+4	; 0x04
    1832:	1b 81       	ldd	r17, Y+3	; 0x03
    1834:	aa 81       	ldd	r26, Y+2	; 0x02
    1836:	b9 81       	ldd	r27, Y+1	; 0x01
    1838:	ce 0f       	add	r28, r30
    183a:	d1 1d       	adc	r29, r1
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	ed 01       	movw	r28, r26
    1848:	08 95       	ret

0000184a <_exit>:
    184a:	f8 94       	cli

0000184c <__stop_program>:
    184c:	ff cf       	rjmp	.-2      	; 0x184c <__stop_program>
