
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000ee8  00000f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800124  00800124  00000fa0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ffc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000231e  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2e  00000000  00000000  0000359a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000132c  00000000  00000000  000043c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000574  00000000  00000000  000056f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000924  00000000  00000000  00005c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019e7  00000000  00000000  0000658c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007f73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_20>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
  9e:	0c 94 72 07 	jmp	0xee4	; 0xee4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
  a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
  a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
  b2:	8e ee       	ldi	r24, 0xEE	; 238
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
  b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
  bc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
  c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	/*
	AD konverzija
	ISR okine kada je gotova konverzija
	*/
	
	PORTD |= 1<<PINB7;       //togle za osciloskop
  d4:	5f 9a       	sbi	0x0b, 7	; 11
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
  d6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
  da:	81 11       	cpse	r24, r1
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <__vector_21+0x2e>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <mereni_napon+0x1>
  ea:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <mereni_napon>
  ee:	0c c0       	rjmp	.+24     	; 0x108 <__vector_21+0x46>
	else if(ad_kanal == 1)
  f0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	41 f4       	brne	.+16     	; 0x108 <__vector_21+0x46>
		merena_struja = (uint16_t)ADC;
  f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  fc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 100:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <merena_struja+0x1>
 104:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 77       	andi	r24, 0x7F	; 127
 110:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 112:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
 11c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	10 f0       	brcs	.+4      	; 0x128 <__vector_21+0x66>
		ad_kanal = 0;
 124:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
 128:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 12c:	88 23       	and	r24, r24
 12e:	19 f0       	breq	.+6      	; 0x136 <__vector_21+0x74>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	39 f0       	breq	.+14     	; 0x142 <__vector_21+0x80>
 134:	0e c0       	rjmp	.+28     	; 0x152 <__vector_21+0x90>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
		break;
 140:	08 c0       	rjmp	.+16     	; 0x152 <__vector_21+0x90>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	80 83       	st	Z, r24
				ADMUX |= (0b1);
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 6c       	ori	r24, 0xC0	; 192
 15a:	80 83       	st	Z, r24
	
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us

	PORTD &= ~(1<<7);       //togle za osciloskop
 15c:	5f 98       	cbi	0x0b, 7	; 11
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
 170:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 174:	88 e4       	ldi	r24, 0x48	; 72
 176:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 17a:	08 95       	ret

0000017c <i2c_start_wait>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec eb       	ldi	r30, 0xBC	; 188
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	24 ea       	ldi	r18, 0xA4	; 164
 186:	a9 eb       	ldi	r26, 0xB9	; 185
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	cb eb       	ldi	r28, 0xBB	; 187
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	34 e8       	ldi	r19, 0x84	; 132
 190:	44 e9       	ldi	r20, 0x94	; 148
 192:	20 83       	st	Z, r18
 194:	90 81       	ld	r25, Z
 196:	99 23       	and	r25, r25
 198:	ec f7       	brge	.-6      	; 0x194 <i2c_start_wait+0x18>
 19a:	9c 91       	ld	r25, X
 19c:	98 7f       	andi	r25, 0xF8	; 248
 19e:	98 30       	cpi	r25, 0x08	; 8
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <i2c_start_wait+0x2a>
 1a2:	90 31       	cpi	r25, 0x10	; 16
 1a4:	b1 f7       	brne	.-20     	; 0x192 <i2c_start_wait+0x16>
 1a6:	88 83       	st	Y, r24
 1a8:	30 83       	st	Z, r19
 1aa:	90 81       	ld	r25, Z
 1ac:	99 23       	and	r25, r25
 1ae:	ec f7       	brge	.-6      	; 0x1aa <i2c_start_wait+0x2e>
 1b0:	9c 91       	ld	r25, X
 1b2:	98 7f       	andi	r25, 0xF8	; 248
 1b4:	90 32       	cpi	r25, 0x20	; 32
 1b6:	11 f0       	breq	.+4      	; 0x1bc <i2c_start_wait+0x40>
 1b8:	98 35       	cpi	r25, 0x58	; 88
 1ba:	29 f4       	brne	.+10     	; 0x1c6 <i2c_start_wait+0x4a>
 1bc:	40 83       	st	Z, r20
 1be:	90 81       	ld	r25, Z
 1c0:	94 fd       	sbrc	r25, 4
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <i2c_start_wait+0x42>
 1c4:	e6 cf       	rjmp	.-52     	; 0x192 <i2c_start_wait+0x16>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <i2c_stop>:
 1cc:	84 e9       	ldi	r24, 0x94	; 148
 1ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	84 fd       	sbrc	r24, 4
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <i2c_stop+0xa>
 1dc:	08 95       	ret

000001de <i2c_write>:
 1de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1e2:	84 e8       	ldi	r24, 0x84	; 132
 1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1e8:	ec eb       	ldi	r30, 0xBC	; 188
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 23       	and	r24, r24
 1f0:	ec f7       	brge	.-6      	; 0x1ec <i2c_write+0xe>
 1f2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1f6:	98 7f       	andi	r25, 0xF8	; 248
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	98 32       	cpi	r25, 0x28	; 40
 1fc:	09 f4       	brne	.+2      	; 0x200 <i2c_write+0x22>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret

00000202 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 202:	84 e8       	ldi	r24, 0x84	; 132
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 208:	ec eb       	ldi	r30, 0xBC	; 188
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	88 23       	and	r24, r24
 210:	ec f7       	brge	.-6      	; 0x20c <i2c_readNak+0xa>
	
    return TWDR;
 212:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
 216:	08 95       	ret

00000218 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
 218:	cf 93       	push	r28
 21a:	c8 2f       	mov	r28, r24
 21c:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
 21e:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
	i2c_write(value);                      // write 
 222:	8c 2f       	mov	r24, r28
 224:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
 228:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <putnibble>:
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
 234:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <led_pin>
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <led_pin>
 23e:	6e e4       	ldi	r22, 0x4E	; 78
 240:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 244:	87 ec       	ldi	r24, 0xC7	; 199
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <putnibble+0x18>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <putnibble+0x1e>
 24e:	00 00       	nop
 250:	c2 95       	swap	r28
 252:	c0 7f       	andi	r28, 0xF0	; 240
 254:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <led_pin>
 258:	6e e4       	ldi	r22, 0x4E	; 78
 25a:	8c 2b       	or	r24, r28
 25c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 260:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <led_pin>
 264:	8b 7f       	andi	r24, 0xFB	; 251
 266:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <led_pin>
 26a:	6e e4       	ldi	r22, 0x4E	; 78
 26c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 270:	87 ec       	ldi	r24, 0xC7	; 199
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <putnibble+0x44>
 278:	00 c0       	rjmp	.+0      	; 0x27a <putnibble+0x4a>
 27a:	00 00       	nop
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <lcd1602_send_byte>:
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	c8 2f       	mov	r28, r24
 286:	d8 2f       	mov	r29, r24
 288:	d2 95       	swap	r29
 28a:	df 70       	andi	r29, 0x0F	; 15
 28c:	61 11       	cpse	r22, r1
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <lcd1602_send_byte+0x22>
 290:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <led_pin>
 294:	8e 7f       	andi	r24, 0xFE	; 254
 296:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <led_pin>
 29a:	6e e4       	ldi	r22, 0x4E	; 78
 29c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <lcd1602_send_byte+0x32>
 2a2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <led_pin>
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <led_pin>
 2ac:	6e e4       	ldi	r22, 0x4E	; 78
 2ae:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 2b2:	8d 2f       	mov	r24, r29
 2b4:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2b8:	8c 2f       	mov	r24, r28
 2ba:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <lcd1602_send_char>:
 2c4:	cf 93       	push	r28
 2c6:	c8 2f       	mov	r28, r24
 2c8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <led_pin>
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <led_pin>
 2d2:	6e e4       	ldi	r22, 0x4E	; 78
 2d4:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 2d8:	8c 2f       	mov	r24, r28
 2da:	82 95       	swap	r24
 2dc:	8f 70       	andi	r24, 0x0F	; 15
 2de:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2e2:	8c 2f       	mov	r24, r28
 2e4:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <lcd1602_init>:
 2ec:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <led_pin>
 2f0:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_init>
 2f4:	8f e5       	ldi	r24, 0x5F	; 95
 2f6:	9a ee       	ldi	r25, 0xEA	; 234
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd1602_init+0xc>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <lcd1602_init+0x12>
 2fe:	00 00       	nop
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 306:	8f e7       	ldi	r24, 0x7F	; 127
 308:	9e e3       	ldi	r25, 0x3E	; 62
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <lcd1602_init+0x1e>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <lcd1602_init+0x24>
 310:	00 00       	nop
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 318:	8f e8       	ldi	r24, 0x8F	; 143
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <lcd1602_init+0x30>
 320:	00 c0       	rjmp	.+0      	; 0x322 <lcd1602_init+0x36>
 322:	00 00       	nop
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 32a:	8f e9       	ldi	r24, 0x9F	; 159
 32c:	9f e0       	ldi	r25, 0x0F	; 15
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <lcd1602_init+0x42>
 332:	00 c0       	rjmp	.+0      	; 0x334 <lcd1602_init+0x48>
 334:	00 00       	nop
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 33c:	8f e9       	ldi	r24, 0x9F	; 159
 33e:	9f e0       	ldi	r25, 0x0F	; 15
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <lcd1602_init+0x54>
 344:	00 c0       	rjmp	.+0      	; 0x346 <lcd1602_init+0x5a>
 346:	00 00       	nop
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	88 e2       	ldi	r24, 0x28	; 40
 34c:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 350:	8f e9       	ldi	r24, 0x9F	; 159
 352:	9f e0       	ldi	r25, 0x0F	; 15
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd1602_init+0x68>
 358:	00 c0       	rjmp	.+0      	; 0x35a <lcd1602_init+0x6e>
 35a:	00 00       	nop
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 364:	8f e9       	ldi	r24, 0x9F	; 159
 366:	9f e0       	ldi	r25, 0x0F	; 15
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd1602_init+0x7c>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd1602_init+0x82>
 36e:	00 00       	nop
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	86 e0       	ldi	r24, 0x06	; 6
 374:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 378:	8f e9       	ldi	r24, 0x9F	; 159
 37a:	9f e0       	ldi	r25, 0x0F	; 15
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd1602_init+0x90>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd1602_init+0x96>
 382:	00 00       	nop
 384:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <led_pin>
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <led_pin>
 38e:	6e e4       	ldi	r22, 0x4E	; 78
 390:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 394:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <led_pin>
 398:	8d 7f       	andi	r24, 0xFD	; 253
 39a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <led_pin>
 39e:	6e e4       	ldi	r22, 0x4E	; 78
 3a0:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 3a4:	08 95       	ret

000003a6 <lcd1602_clear>:
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 3ae:	8f e6       	ldi	r24, 0x6F	; 111
 3b0:	97 e1       	ldi	r25, 0x17	; 23
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd1602_clear+0xc>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <lcd1602_clear+0x12>
 3b8:	00 00       	nop
 3ba:	08 95       	ret

000003bc <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3c4:	80 81       	ld	r24, Z
 3c6:	88 23       	and	r24, r24
 3c8:	59 f0       	breq	.+22     	; 0x3e0 <lcd1602_send_string+0x24>
 3ca:	8f 01       	movw	r16, r30
 3cc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
 3ce:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd1602_send_char>
		i++;
 3d2:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3d4:	f8 01       	movw	r30, r16
 3d6:	ec 0f       	add	r30, r28
 3d8:	f1 1d       	adc	r31, r1
 3da:	80 81       	ld	r24, Z
 3dc:	81 11       	cpse	r24, r1
 3de:	f7 cf       	rjmp	.-18     	; 0x3ce <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	08 95       	ret

000003e8 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	e2 97       	sbiw	r28, 0x32	; 50
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	fb 01       	movw	r30, r22
	static uint16_t vreme_trenutno;
	
	char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
 402:	dc 01       	movw	r26, r24
 404:	12 96       	adiw	r26, 0x02	; 2
 406:	2c 91       	ld	r18, X
 408:	12 97       	sbiw	r26, 0x02	; 2
 40a:	74 e6       	ldi	r23, 0x64	; 100
 40c:	11 96       	adiw	r26, 0x01	; 1
 40e:	8c 91       	ld	r24, X
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	72 9f       	mul	r23, r18
 414:	80 0d       	add	r24, r0
 416:	91 1d       	adc	r25, r1
 418:	11 24       	eor	r1, r1
 41a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <vreme_on.2079+0x1>
 41e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <vreme_on.2079>
	vreme_off = (Off_time->hr)*100 + Off_time->min;
 422:	62 81       	ldd	r22, Z+2	; 0x02
 424:	21 81       	ldd	r18, Z+1	; 0x01
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	76 9f       	mul	r23, r22
 42a:	20 0d       	add	r18, r0
 42c:	31 1d       	adc	r19, r1
 42e:	11 24       	eor	r1, r1
 430:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <vreme_off.2080+0x1>
 434:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <vreme_off.2080>
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
 438:	fa 01       	movw	r30, r20
 43a:	62 81       	ldd	r22, Z+2	; 0x02
 43c:	41 81       	ldd	r20, Z+1	; 0x01
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	76 9f       	mul	r23, r22
 442:	40 0d       	add	r20, r0
 444:	51 1d       	adc	r21, r1
 446:	11 24       	eor	r1, r1
 448:	50 93 2a 01 	sts	0x012A, r21	; 0x80012a <vreme_trenutno.2081+0x1>
 44c:	40 93 29 01 	sts	0x0129, r20	; 0x800129 <vreme_trenutno.2081>
	
	
	sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
 450:	5f 93       	push	r21
 452:	4f 93       	push	r20
 454:	3f 93       	push	r19
 456:	2f 93       	push	r18
 458:	9f 93       	push	r25
 45a:	8f 93       	push	r24
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	9f 93       	push	r25
 462:	8f 93       	push	r24
 464:	8e 01       	movw	r16, r28
 466:	0f 5f       	subi	r16, 0xFF	; 255
 468:	1f 4f       	sbci	r17, 0xFF	; 255
 46a:	1f 93       	push	r17
 46c:	0f 93       	push	r16
 46e:	0e 94 88 04 	call	0x910	; 0x910 <sprintf>
	send_str(buff);
 472:	c8 01       	movw	r24, r16
 474:	0e 94 75 04 	call	0x8ea	; 0x8ea <send_str>
	send_str("\n"); //novi red
 478:	83 e1       	ldi	r24, 0x13	; 19
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 75 04 	call	0x8ea	; 0x8ea <send_str>
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fuli radi
 480:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <vreme_on.2079>
 484:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <vreme_on.2079+0x1>
 488:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <vreme_off.2080>
 48c:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <vreme_off.2080+0x1>
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	82 17       	cp	r24, r18
 49c:	93 07       	cpc	r25, r19
 49e:	88 f0       	brcs	.+34     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
 4a0:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <vreme_trenutno.2081>
 4a4:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <vreme_trenutno.2081+0x1>
 4a8:	48 17       	cp	r20, r24
 4aa:	59 07       	cpc	r21, r25
 4ac:	20 f0       	brcs	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4ae:	48 33       	cpi	r20, 0x38	; 56
 4b0:	89 e0       	ldi	r24, 0x09	; 9
 4b2:	58 07       	cpc	r21, r24
 4b4:	98 f0       	brcs	.+38     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	42 17       	cp	r20, r18
 4ba:	53 07       	cpc	r21, r19
 4bc:	90 f0       	brcs	.+36     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	10 c0       	rjmp	.+32     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
 4c2:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <vreme_trenutno.2081>
 4c6:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <vreme_trenutno.2081+0x1>
 4ca:	48 17       	cp	r20, r24
 4cc:	59 07       	cpc	r21, r25
 4ce:	40 f0       	brcs	.+16     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	42 17       	cp	r20, r18
 4d4:	53 07       	cpc	r21, r19
 4d6:	28 f0       	brcs	.+10     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
 4e2:	e2 96       	adiw	r28, 0x32	; 50
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	cd bf       	out	0x3d, r28	; 61
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	08 95       	ret

000004f8 <main>:

	return b;
}

int main(void)
{
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	af 97       	sbiw	r28, 0x2f	; 47
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61

	Time_date vreme_datum;
	Time_date Vreme_paljenja;
	Time_date Vreme_gasenja;
	
	Vreme_paljenja.hr = 23;
 50c:	87 e1       	ldi	r24, 0x17	; 23
 50e:	8c 87       	std	Y+12, r24	; 0x0c
	Vreme_paljenja.min = 59;
 510:	8b e3       	ldi	r24, 0x3B	; 59
 512:	8b 87       	std	Y+11, r24	; 0x0b
	Vreme_gasenja.hr = 0;
 514:	1d 8a       	std	Y+21, r1	; 0x15
	Vreme_gasenja.min = 1;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	8c 8b       	std	Y+20, r24	; 0x14
	uint8_t ukljuceno = 0;  //0=OFF 1=ON
	uint8_t tasteri = 0xFF;
	uint8_t sati = 0;
	uint8_t STATE = DISPL1;
	
	getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
 51a:	00 e0       	ldi	r16, 0x00	; 0
 51c:	9e 01       	movw	r18, r28
 51e:	27 5f       	subi	r18, 0xF7	; 247
 520:	3f 4f       	sbci	r19, 0xFF	; 255
 522:	ae 01       	movw	r20, r28
 524:	4f 5f       	subi	r20, 0xFF	; 255
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	be 01       	movw	r22, r28
 52a:	6e 5f       	subi	r22, 0xFE	; 254
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	ce 01       	movw	r24, r28
 530:	03 96       	adiw	r24, 0x03	; 3
 532:	0e 94 76 03 	call	0x6ec	; 0x6ec <getTime>
	sati = vreme_datum.hr;
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			////PD2-3 output
 536:	0e 94 e7 03 	call	0x7ce	; 0x7ce <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
 53a:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_init>
	lcd1602_init();
 53e:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd1602_init>
	ADC_init();				//NAPOMENA:	PINB7 output
 542:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init();			//baud 9600
 546:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_init>
	DS3231_init();			//RTC init
 54a:	0e 94 6d 03 	call	0x6da	; 0x6da <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
 54e:	0e 94 01 03 	call	0x602	; 0x602 <pc_init>
	tasteri_init();			//NAPOMENA: PD4-7 i PB0-1 INPUT, INT_PULLUP=ON
 552:	0e 94 20 03 	call	0x640	; 0x640 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
 556:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;
 558:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
 55a:	78 94       	sei
/**************************************************************************************************************/
	
	//getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
	//getDate(&vreme_datum.dy, &vreme_datum.dt, &vreme_datum.mt, &vreme_datum.yr);
	
	setTime(23, 59, 55, am, _24_hour_format);
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	47 e3       	ldi	r20, 0x37	; 55
 560:	6b e3       	ldi	r22, 0x3B	; 59
 562:	87 e1       	ldi	r24, 0x17	; 23
 564:	0e 94 b4 03 	call	0x768	; 0x768 <setTime>
						{
							flag_pc_int = 0; //resetujem flag koji je u ISR
							
							
							getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
							sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
 568:	0f 2e       	mov	r0, r31
 56a:	f5 e1       	ldi	r31, 0x15	; 21
 56c:	cf 2e       	mov	r12, r31
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	df 2e       	mov	r13, r31
 572:	f0 2d       	mov	r31, r0
 574:	7e 01       	movw	r14, r28
 576:	8c e1       	ldi	r24, 0x1C	; 28
 578:	e8 0e       	add	r14, r24
 57a:	f1 1c       	adc	r15, r1
    {
		
		/* bez obzira na STATE dole provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda ne bi trebao da koci program */
		
		if (flag_pc_int_pomocni)
 57c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <flag_pc_int_pomocni>
 580:	88 23       	and	r24, r24
 582:	89 f0       	breq	.+34     	; 0x5a6 <main+0xae>
		{
			flag_pc_int_pomocni = 0;
 584:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za reset */
			
			/* paljenje/gasenje releja > grjaca bojlera */
			ukljuceno = period_paljenja(&Vreme_paljenja, &Vreme_gasenja, &vreme_datum);
 588:	ae 01       	movw	r20, r28
 58a:	4f 5f       	subi	r20, 0xFF	; 255
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	be 01       	movw	r22, r28
 590:	6d 5e       	subi	r22, 0xED	; 237
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	ce 01       	movw	r24, r28
 596:	0a 96       	adiw	r24, 0x0a	; 10
 598:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <period_paljenja>
			
			if (ukljuceno)
 59c:	88 23       	and	r24, r24
 59e:	11 f0       	breq	.+4      	; 0x5a4 <main+0xac>
			PORTB |= 1<<PINB5;   //high
 5a0:	2d 9a       	sbi	0x05, 5	; 5
 5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <main+0xae>
			else
			PORTB &= ~(1<<PINB5);	//low
 5a4:	2d 98       	cbi	0x05, 5	; 5
		/* automat stanja za menije na displeju */
		switch(STATE)
		{
			
			case DISPL1:
						if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
 5a6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <flag_pc_int>
 5aa:	88 23       	and	r24, r24
 5ac:	39 f3       	breq	.-50     	; 0x57c <main+0x84>
						{
							flag_pc_int = 0; //resetujem flag koji je u ISR
 5ae:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <flag_pc_int>
							
							
							getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
 5b2:	00 e0       	ldi	r16, 0x00	; 0
 5b4:	9e 01       	movw	r18, r28
 5b6:	27 5f       	subi	r18, 0xF7	; 247
 5b8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ba:	ae 01       	movw	r20, r28
 5bc:	4f 5f       	subi	r20, 0xFF	; 255
 5be:	5f 4f       	sbci	r21, 0xFF	; 255
 5c0:	be 01       	movw	r22, r28
 5c2:	6e 5f       	subi	r22, 0xFE	; 254
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	ce 01       	movw	r24, r28
 5c8:	03 96       	adiw	r24, 0x03	; 3
 5ca:	0e 94 76 03 	call	0x6ec	; 0x6ec <getTime>
							sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	1f 92       	push	r1
 5d2:	8f 93       	push	r24
 5d4:	8a 81       	ldd	r24, Y+2	; 0x02
 5d6:	1f 92       	push	r1
 5d8:	8f 93       	push	r24
 5da:	8b 81       	ldd	r24, Y+3	; 0x03
 5dc:	1f 92       	push	r1
 5de:	8f 93       	push	r24
 5e0:	df 92       	push	r13
 5e2:	cf 92       	push	r12
 5e4:	ff 92       	push	r15
 5e6:	ef 92       	push	r14
 5e8:	0e 94 88 04 	call	0x910	; 0x910 <sprintf>
							//send_str(bafer);
							//send_str("\n"); //novi red
							
							lcd1602_clear();
 5ec:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd1602_clear>
							lcd1602_send_string(bafer);
 5f0:	c7 01       	movw	r24, r14
 5f2:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcd1602_send_string>
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	f8 94       	cli
 5fa:	de bf       	out	0x3e, r29	; 62
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	cd bf       	out	0x3d, r28	; 61
 600:	bd cf       	rjmp	.-134    	; 0x57c <main+0x84>

00000602 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
 602:	e8 e6       	ldi	r30, 0x68	; 104
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
 60c:	ec e6       	ldi	r30, 0x6C	; 108
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	88 60       	ori	r24, 0x08	; 8
 614:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
 616:	3b 98       	cbi	0x07, 3	; 7
 618:	08 95       	ret

0000061a <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
 61a:	1f 92       	push	r1
 61c:	0f 92       	push	r0
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	0f 92       	push	r0
 622:	11 24       	eor	r1, r1
 624:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
 626:	33 9b       	sbis	0x06, 3	; 6
 628:	05 c0       	rjmp	.+10     	; 0x634 <__vector_4+0x1a>
	{
		flag_pc_int = 1;
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <flag_pc_int>
		flag_pc_int_pomocni = 1;
 630:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <flag_pc_int_pomocni>
	}
		
 634:	8f 91       	pop	r24
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <tasteri_init>:
#include "tajmer.h"

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
 640:	8a b1       	in	r24, 0x0a	; 10
 642:	8f 70       	andi	r24, 0x0F	; 15
 644:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
 646:	84 b1       	in	r24, 0x04	; 4
 648:	8c 7f       	andi	r24, 0xFC	; 252
 64a:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
 64c:	8b b1       	in	r24, 0x0b	; 11
 64e:	80 6f       	ori	r24, 0xF0	; 240
 650:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
 652:	85 b1       	in	r24, 0x05	; 5
 654:	83 60       	ori	r24, 0x03	; 3
 656:	85 b9       	out	0x05, r24	; 5
 658:	08 95       	ret

0000065a <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
 65a:	98 2f       	mov	r25, r24
 65c:	92 95       	swap	r25
 65e:	9f 70       	andi	r25, 0x0F	; 15
 660:	99 0f       	add	r25, r25
 662:	29 2f       	mov	r18, r25
 664:	22 0f       	add	r18, r18
 666:	22 0f       	add	r18, r18
 668:	92 0f       	add	r25, r18
 66a:	8f 70       	andi	r24, 0x0F	; 15
 66c:	89 0f       	add	r24, r25
 66e:	08 95       	ret

00000670 <decimal_to_bcd>:
 670:	9d ec       	ldi	r25, 0xCD	; 205
 672:	89 9f       	mul	r24, r25
 674:	91 2d       	mov	r25, r1
 676:	11 24       	eor	r1, r1
 678:	96 95       	lsr	r25
 67a:	96 95       	lsr	r25
 67c:	96 95       	lsr	r25
 67e:	20 e1       	ldi	r18, 0x10	; 16
 680:	92 9f       	mul	r25, r18
 682:	a0 01       	movw	r20, r0
 684:	11 24       	eor	r1, r1
 686:	99 0f       	add	r25, r25
 688:	29 2f       	mov	r18, r25
 68a:	22 0f       	add	r18, r18
 68c:	22 0f       	add	r18, r18
 68e:	92 0f       	add	r25, r18
 690:	89 1b       	sub	r24, r25
 692:	8f 70       	andi	r24, 0x0F	; 15
 694:	84 2b       	or	r24, r20
 696:	08 95       	ret

00000698 <DS3231_Read>:
 698:	cf 93       	push	r28
 69a:	c8 2f       	mov	r28, r24
 69c:	80 ed       	ldi	r24, 0xD0	; 208
 69e:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
 6a2:	8c 2f       	mov	r24, r28
 6a4:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
 6a8:	81 ed       	ldi	r24, 0xD1	; 209
 6aa:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
 6ae:	0e 94 01 01 	call	0x202	; 0x202 <i2c_readNak>
 6b2:	cf 91       	pop	r28
 6b4:	08 95       	ret

000006b6 <DS3231_Write>:
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	d8 2f       	mov	r29, r24
 6bc:	c6 2f       	mov	r28, r22
 6be:	80 ed       	ldi	r24, 0xD0	; 208
 6c0:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
 6c4:	8d 2f       	mov	r24, r29
 6c6:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
 6ca:	8c 2f       	mov	r24, r28
 6cc:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
 6d0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

000006da <DS3231_init>:
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	8e e0       	ldi	r24, 0x0E	; 14
 6de:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DS3231_Write>
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	8f e0       	ldi	r24, 0x0F	; 15
 6e6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DS3231_Write>
 6ea:	08 95       	ret

000006ec <getTime>:
 6ec:	af 92       	push	r10
 6ee:	bf 92       	push	r11
 6f0:	cf 92       	push	r12
 6f2:	df 92       	push	r13
 6f4:	ef 92       	push	r14
 6f6:	ff 92       	push	r15
 6f8:	0f 93       	push	r16
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	ec 01       	movw	r28, r24
 700:	7b 01       	movw	r14, r22
 702:	6a 01       	movw	r12, r20
 704:	59 01       	movw	r10, r18
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	0e 94 4c 03 	call	0x698	; 0x698 <DS3231_Read>
 70c:	0e 94 2d 03 	call	0x65a	; 0x65a <bcd_to_decimal>
 710:	f6 01       	movw	r30, r12
 712:	80 83       	st	Z, r24
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	0e 94 4c 03 	call	0x698	; 0x698 <DS3231_Read>
 71a:	0e 94 2d 03 	call	0x65a	; 0x65a <bcd_to_decimal>
 71e:	f7 01       	movw	r30, r14
 720:	80 83       	st	Z, r24
 722:	01 30       	cpi	r16, 0x01	; 1
 724:	81 f4       	brne	.+32     	; 0x746 <getTime+0x5a>
 726:	82 e0       	ldi	r24, 0x02	; 2
 728:	0e 94 4c 03 	call	0x698	; 0x698 <DS3231_Read>
 72c:	85 fb       	bst	r24, 5
 72e:	88 27       	eor	r24, r24
 730:	80 f9       	bld	r24, 0
 732:	f5 01       	movw	r30, r10
 734:	80 83       	st	Z, r24
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	0e 94 4c 03 	call	0x698	; 0x698 <DS3231_Read>
 73c:	8f 71       	andi	r24, 0x1F	; 31
 73e:	0e 94 2d 03 	call	0x65a	; 0x65a <bcd_to_decimal>
 742:	88 83       	st	Y, r24
 744:	07 c0       	rjmp	.+14     	; 0x754 <getTime+0x68>
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	0e 94 4c 03 	call	0x698	; 0x698 <DS3231_Read>
 74c:	8f 73       	andi	r24, 0x3F	; 63
 74e:	0e 94 2d 03 	call	0x65a	; 0x65a <bcd_to_decimal>
 752:	88 83       	st	Y, r24
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	0f 91       	pop	r16
 75a:	ff 90       	pop	r15
 75c:	ef 90       	pop	r14
 75e:	df 90       	pop	r13
 760:	cf 90       	pop	r12
 762:	bf 90       	pop	r11
 764:	af 90       	pop	r10
 766:	08 95       	ret

00000768 <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	d8 2f       	mov	r29, r24
 772:	c6 2f       	mov	r28, r22
 774:	84 2f       	mov	r24, r20
 776:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
 778:	0e 94 38 03 	call	0x670	; 0x670 <decimal_to_bcd>
 77c:	68 2f       	mov	r22, r24
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
 784:	8c 2f       	mov	r24, r28
 786:	0e 94 38 03 	call	0x670	; 0x670 <decimal_to_bcd>
 78a:	68 2f       	mov	r22, r24
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DS3231_Write>
	
	switch(hour_format)
 792:	01 30       	cpi	r16, 0x01	; 1
 794:	79 f4       	brne	.+30     	; 0x7b4 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
 796:	11 30       	cpi	r17, 0x01	; 1
 798:	11 f0       	breq	.+4      	; 0x79e <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
 79a:	c0 e4       	ldi	r28, 0x40	; 64
 79c:	01 c0       	rjmp	.+2      	; 0x7a0 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
 79e:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
 7a0:	8d 2f       	mov	r24, r29
 7a2:	0e 94 38 03 	call	0x670	; 0x670 <decimal_to_bcd>
 7a6:	8f 71       	andi	r24, 0x1F	; 31
 7a8:	68 2f       	mov	r22, r24
 7aa:	6c 2b       	or	r22, r28
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DS3231_Write>
			break;
 7b2:	08 c0       	rjmp	.+16     	; 0x7c4 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
 7b4:	8d 2f       	mov	r24, r29
 7b6:	0e 94 38 03 	call	0x670	; 0x670 <decimal_to_bcd>
 7ba:	68 2f       	mov	r22, r24
 7bc:	6f 73       	andi	r22, 0x3F	; 63
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DS3231_Write>
			break;
		}
	}
}
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	1f 91       	pop	r17
 7ca:	0f 91       	pop	r16
 7cc:	08 95       	ret

000007ce <tajmer0_init>:
volatile uint8_t brojac_prekida_tajmera0_debounce = 0;
volatile uint8_t brojac_prekida_tajmera0_debounce_half = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 7ce:	82 e0       	ldi	r24, 0x02	; 2
 7d0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 7d2:	93 e0       	ldi	r25, 0x03	; 3
 7d4:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 7d6:	99 ef       	ldi	r25, 0xF9	; 249
 7d8:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 7da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRD |= (1<<PIND2)|(1<<PIND3);  //PD2-3 output
 7de:	8a b1       	in	r24, 0x0a	; 10
 7e0:	8c 60       	ori	r24, 0x0C	; 12
 7e2:	8a b9       	out	0x0a, r24	; 10
 7e4:	08 95       	ret

000007e6 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
 7e6:	1f 92       	push	r1
 7e8:	0f 92       	push	r0
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
 7f0:	8f 93       	push	r24
	flag_tajmer0_prekid = 1;
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
 7f8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <brojac_prekida_tajmera0>
 7fc:	8f 5f       	subi	r24, 0xFF	; 255
 7fe:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
 802:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <brojac_prekida_tajmera0_debounce_half>
 806:	8f 5f       	subi	r24, 0xFF	; 255
 808:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
 80c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <brojac_prekida_tajmera0_debounce>
 810:	8f 5f       	subi	r24, 0xFF	; 255
 812:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <brojac_prekida_tajmera0_debounce>
		
	if(brojac_prekida_tajmera0 == 255)	//1ms * 10 = 10ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
 816:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <brojac_prekida_tajmera0>
 81a:	8f 3f       	cpi	r24, 0xFF	; 255
 81c:	29 f4       	brne	.+10     	; 0x828 <__vector_14+0x42>
	{
		brojac_prekida_tajmera0 = 0;
 81e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;				
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <flag_prekid_10ms>
		
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
 828:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <brojac_prekida_tajmera0_debounce_half>
 82c:	83 30       	cpi	r24, 0x03	; 3
 82e:	31 f4       	brne	.+12     	; 0x83c <__vector_14+0x56>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
 830:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <flag_prekid_debounce_time_half>
		PIND |= 1<<PIND2;	//toggle PD2
 83a:	4a 9a       	sbi	0x09, 2	; 9
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
 83c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <brojac_prekida_tajmera0_debounce>
 840:	86 30       	cpi	r24, 0x06	; 6
 842:	31 f4       	brne	.+12     	; 0x850 <__vector_14+0x6a>
	{
		brojac_prekida_tajmera0_debounce = 0;
 844:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <flag_prekid_debounce_time>
		PIND |= 1<<PIND3;	//toggle PD3
 84e:	4b 9a       	sbi	0x09, 3	; 9
	}
	
 850:	8f 91       	pop	r24
 852:	0f 90       	pop	r0
 854:	0f be       	out	0x3f, r0	; 63
 856:	0f 90       	pop	r0
 858:	1f 90       	pop	r1
 85a:	18 95       	reti

0000085c <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 85c:	1f 92       	push	r1
 85e:	0f 92       	push	r0
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	0f 92       	push	r0
 864:	11 24       	eor	r1, r1
	poslato=0;
 866:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <poslato>
}
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

00000874 <__vector_18>:

ISR(USART_RX_vect)
{
 874:	1f 92       	push	r1
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	0f 92       	push	r0
 87c:	11 24       	eor	r1, r1
 87e:	8f 93       	push	r24
 880:	ef 93       	push	r30
 882:	ff 93       	push	r31
	input_char=UDR0;
 884:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 888:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 88c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <buff_size>
 890:	88 30       	cpi	r24, 0x08	; 8
 892:	98 f4       	brcc	.+38     	; 0x8ba <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 894:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <buff_size>
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <input_char>
 89e:	e4 5c       	subi	r30, 0xC4	; 196
 8a0:	fe 4f       	sbci	r31, 0xFE	; 254
 8a2:	80 83       	st	Z, r24
		buff_size++;
 8a4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <buff_size>
 8a8:	8f 5f       	subi	r24, 0xFF	; 255
 8aa:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <buff_size>
		input_buffer[buff_size]='\0';
 8ae:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <buff_size>
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	e4 5c       	subi	r30, 0xC4	; 196
 8b6:	fe 4f       	sbci	r31, 0xFE	; 254
 8b8:	10 82       	st	Z, r1
	}
}
 8ba:	ff 91       	pop	r31
 8bc:	ef 91       	pop	r30
 8be:	8f 91       	pop	r24
 8c0:	0f 90       	pop	r0
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	0f 90       	pop	r0
 8c6:	1f 90       	pop	r1
 8c8:	18 95       	reti

000008ca <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 8d0:	88 ed       	ldi	r24, 0xD8	; 216
 8d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 8d6:	86 e0       	ldi	r24, 0x06	; 6
 8d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 8dc:	8f ec       	ldi	r24, 0xCF	; 207
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 8e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 8e8:	08 95       	ret

000008ea <send_str>:
}

void send_str(char *str)
{
 8ea:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 8ec:	90 81       	ld	r25, Z
 8ee:	99 23       	and	r25, r25
 8f0:	71 f0       	breq	.+28     	; 0x90e <__stack+0xf>
 8f2:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 8f4:	a6 ec       	ldi	r26, 0xC6	; 198
 8f6:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 8f8:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 8fa:	9c 93       	st	X, r25
		poslato=1;
 8fc:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <poslato>
		while (poslato);
 900:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <poslato>
 904:	91 11       	cpse	r25, r1
 906:	fc cf       	rjmp	.-8      	; 0x900 <__stack+0x1>
void send_str(char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 908:	91 91       	ld	r25, Z+
 90a:	91 11       	cpse	r25, r1
 90c:	f6 cf       	rjmp	.-20     	; 0x8fa <send_str+0x10>
 90e:	08 95       	ret

00000910 <sprintf>:
 910:	ae e0       	ldi	r26, 0x0E	; 14
 912:	b0 e0       	ldi	r27, 0x00	; 0
 914:	ee e8       	ldi	r30, 0x8E	; 142
 916:	f4 e0       	ldi	r31, 0x04	; 4
 918:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__prologue_saves__+0x1c>
 91c:	0d 89       	ldd	r16, Y+21	; 0x15
 91e:	1e 89       	ldd	r17, Y+22	; 0x16
 920:	86 e0       	ldi	r24, 0x06	; 6
 922:	8c 83       	std	Y+4, r24	; 0x04
 924:	1a 83       	std	Y+2, r17	; 0x02
 926:	09 83       	std	Y+1, r16	; 0x01
 928:	8f ef       	ldi	r24, 0xFF	; 255
 92a:	9f e7       	ldi	r25, 0x7F	; 127
 92c:	9e 83       	std	Y+6, r25	; 0x06
 92e:	8d 83       	std	Y+5, r24	; 0x05
 930:	ae 01       	movw	r20, r28
 932:	47 5e       	subi	r20, 0xE7	; 231
 934:	5f 4f       	sbci	r21, 0xFF	; 255
 936:	6f 89       	ldd	r22, Y+23	; 0x17
 938:	78 8d       	ldd	r23, Y+24	; 0x18
 93a:	ce 01       	movw	r24, r28
 93c:	01 96       	adiw	r24, 0x01	; 1
 93e:	0e 94 aa 04 	call	0x954	; 0x954 <vfprintf>
 942:	ef 81       	ldd	r30, Y+7	; 0x07
 944:	f8 85       	ldd	r31, Y+8	; 0x08
 946:	e0 0f       	add	r30, r16
 948:	f1 1f       	adc	r31, r17
 94a:	10 82       	st	Z, r1
 94c:	2e 96       	adiw	r28, 0x0e	; 14
 94e:	e4 e0       	ldi	r30, 0x04	; 4
 950:	0c 94 65 07 	jmp	0xeca	; 0xeca <__epilogue_restores__+0x1c>

00000954 <vfprintf>:
 954:	ab e0       	ldi	r26, 0x0B	; 11
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	e0 eb       	ldi	r30, 0xB0	; 176
 95a:	f4 e0       	ldi	r31, 0x04	; 4
 95c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__prologue_saves__>
 960:	6c 01       	movw	r12, r24
 962:	7b 01       	movw	r14, r22
 964:	8a 01       	movw	r16, r20
 966:	fc 01       	movw	r30, r24
 968:	17 82       	std	Z+7, r1	; 0x07
 96a:	16 82       	std	Z+6, r1	; 0x06
 96c:	83 81       	ldd	r24, Z+3	; 0x03
 96e:	81 ff       	sbrs	r24, 1
 970:	cc c1       	rjmp	.+920    	; 0xd0a <vfprintf+0x3b6>
 972:	ce 01       	movw	r24, r28
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	3c 01       	movw	r6, r24
 978:	f6 01       	movw	r30, r12
 97a:	93 81       	ldd	r25, Z+3	; 0x03
 97c:	f7 01       	movw	r30, r14
 97e:	93 fd       	sbrc	r25, 3
 980:	85 91       	lpm	r24, Z+
 982:	93 ff       	sbrs	r25, 3
 984:	81 91       	ld	r24, Z+
 986:	7f 01       	movw	r14, r30
 988:	88 23       	and	r24, r24
 98a:	09 f4       	brne	.+2      	; 0x98e <vfprintf+0x3a>
 98c:	ba c1       	rjmp	.+884    	; 0xd02 <vfprintf+0x3ae>
 98e:	85 32       	cpi	r24, 0x25	; 37
 990:	39 f4       	brne	.+14     	; 0x9a0 <vfprintf+0x4c>
 992:	93 fd       	sbrc	r25, 3
 994:	85 91       	lpm	r24, Z+
 996:	93 ff       	sbrs	r25, 3
 998:	81 91       	ld	r24, Z+
 99a:	7f 01       	movw	r14, r30
 99c:	85 32       	cpi	r24, 0x25	; 37
 99e:	29 f4       	brne	.+10     	; 0x9aa <vfprintf+0x56>
 9a0:	b6 01       	movw	r22, r12
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 9a8:	e7 cf       	rjmp	.-50     	; 0x978 <vfprintf+0x24>
 9aa:	91 2c       	mov	r9, r1
 9ac:	21 2c       	mov	r2, r1
 9ae:	31 2c       	mov	r3, r1
 9b0:	ff e1       	ldi	r31, 0x1F	; 31
 9b2:	f3 15       	cp	r31, r3
 9b4:	d8 f0       	brcs	.+54     	; 0x9ec <vfprintf+0x98>
 9b6:	8b 32       	cpi	r24, 0x2B	; 43
 9b8:	79 f0       	breq	.+30     	; 0x9d8 <vfprintf+0x84>
 9ba:	38 f4       	brcc	.+14     	; 0x9ca <vfprintf+0x76>
 9bc:	80 32       	cpi	r24, 0x20	; 32
 9be:	79 f0       	breq	.+30     	; 0x9de <vfprintf+0x8a>
 9c0:	83 32       	cpi	r24, 0x23	; 35
 9c2:	a1 f4       	brne	.+40     	; 0x9ec <vfprintf+0x98>
 9c4:	23 2d       	mov	r18, r3
 9c6:	20 61       	ori	r18, 0x10	; 16
 9c8:	1d c0       	rjmp	.+58     	; 0xa04 <vfprintf+0xb0>
 9ca:	8d 32       	cpi	r24, 0x2D	; 45
 9cc:	61 f0       	breq	.+24     	; 0x9e6 <vfprintf+0x92>
 9ce:	80 33       	cpi	r24, 0x30	; 48
 9d0:	69 f4       	brne	.+26     	; 0x9ec <vfprintf+0x98>
 9d2:	23 2d       	mov	r18, r3
 9d4:	21 60       	ori	r18, 0x01	; 1
 9d6:	16 c0       	rjmp	.+44     	; 0xa04 <vfprintf+0xb0>
 9d8:	83 2d       	mov	r24, r3
 9da:	82 60       	ori	r24, 0x02	; 2
 9dc:	38 2e       	mov	r3, r24
 9de:	e3 2d       	mov	r30, r3
 9e0:	e4 60       	ori	r30, 0x04	; 4
 9e2:	3e 2e       	mov	r3, r30
 9e4:	2a c0       	rjmp	.+84     	; 0xa3a <vfprintf+0xe6>
 9e6:	f3 2d       	mov	r31, r3
 9e8:	f8 60       	ori	r31, 0x08	; 8
 9ea:	1d c0       	rjmp	.+58     	; 0xa26 <vfprintf+0xd2>
 9ec:	37 fc       	sbrc	r3, 7
 9ee:	2d c0       	rjmp	.+90     	; 0xa4a <vfprintf+0xf6>
 9f0:	20 ed       	ldi	r18, 0xD0	; 208
 9f2:	28 0f       	add	r18, r24
 9f4:	2a 30       	cpi	r18, 0x0A	; 10
 9f6:	40 f0       	brcs	.+16     	; 0xa08 <vfprintf+0xb4>
 9f8:	8e 32       	cpi	r24, 0x2E	; 46
 9fa:	b9 f4       	brne	.+46     	; 0xa2a <vfprintf+0xd6>
 9fc:	36 fc       	sbrc	r3, 6
 9fe:	81 c1       	rjmp	.+770    	; 0xd02 <vfprintf+0x3ae>
 a00:	23 2d       	mov	r18, r3
 a02:	20 64       	ori	r18, 0x40	; 64
 a04:	32 2e       	mov	r3, r18
 a06:	19 c0       	rjmp	.+50     	; 0xa3a <vfprintf+0xe6>
 a08:	36 fe       	sbrs	r3, 6
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <vfprintf+0xc4>
 a0c:	8a e0       	ldi	r24, 0x0A	; 10
 a0e:	98 9e       	mul	r9, r24
 a10:	20 0d       	add	r18, r0
 a12:	11 24       	eor	r1, r1
 a14:	92 2e       	mov	r9, r18
 a16:	11 c0       	rjmp	.+34     	; 0xa3a <vfprintf+0xe6>
 a18:	ea e0       	ldi	r30, 0x0A	; 10
 a1a:	2e 9e       	mul	r2, r30
 a1c:	20 0d       	add	r18, r0
 a1e:	11 24       	eor	r1, r1
 a20:	22 2e       	mov	r2, r18
 a22:	f3 2d       	mov	r31, r3
 a24:	f0 62       	ori	r31, 0x20	; 32
 a26:	3f 2e       	mov	r3, r31
 a28:	08 c0       	rjmp	.+16     	; 0xa3a <vfprintf+0xe6>
 a2a:	8c 36       	cpi	r24, 0x6C	; 108
 a2c:	21 f4       	brne	.+8      	; 0xa36 <vfprintf+0xe2>
 a2e:	83 2d       	mov	r24, r3
 a30:	80 68       	ori	r24, 0x80	; 128
 a32:	38 2e       	mov	r3, r24
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <vfprintf+0xe6>
 a36:	88 36       	cpi	r24, 0x68	; 104
 a38:	41 f4       	brne	.+16     	; 0xa4a <vfprintf+0xf6>
 a3a:	f7 01       	movw	r30, r14
 a3c:	93 fd       	sbrc	r25, 3
 a3e:	85 91       	lpm	r24, Z+
 a40:	93 ff       	sbrs	r25, 3
 a42:	81 91       	ld	r24, Z+
 a44:	7f 01       	movw	r14, r30
 a46:	81 11       	cpse	r24, r1
 a48:	b3 cf       	rjmp	.-154    	; 0x9b0 <vfprintf+0x5c>
 a4a:	98 2f       	mov	r25, r24
 a4c:	9f 7d       	andi	r25, 0xDF	; 223
 a4e:	95 54       	subi	r25, 0x45	; 69
 a50:	93 30       	cpi	r25, 0x03	; 3
 a52:	28 f4       	brcc	.+10     	; 0xa5e <vfprintf+0x10a>
 a54:	0c 5f       	subi	r16, 0xFC	; 252
 a56:	1f 4f       	sbci	r17, 0xFF	; 255
 a58:	9f e3       	ldi	r25, 0x3F	; 63
 a5a:	99 83       	std	Y+1, r25	; 0x01
 a5c:	0d c0       	rjmp	.+26     	; 0xa78 <vfprintf+0x124>
 a5e:	83 36       	cpi	r24, 0x63	; 99
 a60:	31 f0       	breq	.+12     	; 0xa6e <vfprintf+0x11a>
 a62:	83 37       	cpi	r24, 0x73	; 115
 a64:	71 f0       	breq	.+28     	; 0xa82 <vfprintf+0x12e>
 a66:	83 35       	cpi	r24, 0x53	; 83
 a68:	09 f0       	breq	.+2      	; 0xa6c <vfprintf+0x118>
 a6a:	59 c0       	rjmp	.+178    	; 0xb1e <vfprintf+0x1ca>
 a6c:	21 c0       	rjmp	.+66     	; 0xab0 <vfprintf+0x15c>
 a6e:	f8 01       	movw	r30, r16
 a70:	80 81       	ld	r24, Z
 a72:	89 83       	std	Y+1, r24	; 0x01
 a74:	0e 5f       	subi	r16, 0xFE	; 254
 a76:	1f 4f       	sbci	r17, 0xFF	; 255
 a78:	88 24       	eor	r8, r8
 a7a:	83 94       	inc	r8
 a7c:	91 2c       	mov	r9, r1
 a7e:	53 01       	movw	r10, r6
 a80:	13 c0       	rjmp	.+38     	; 0xaa8 <vfprintf+0x154>
 a82:	28 01       	movw	r4, r16
 a84:	f2 e0       	ldi	r31, 0x02	; 2
 a86:	4f 0e       	add	r4, r31
 a88:	51 1c       	adc	r5, r1
 a8a:	f8 01       	movw	r30, r16
 a8c:	a0 80       	ld	r10, Z
 a8e:	b1 80       	ldd	r11, Z+1	; 0x01
 a90:	36 fe       	sbrs	r3, 6
 a92:	03 c0       	rjmp	.+6      	; 0xa9a <vfprintf+0x146>
 a94:	69 2d       	mov	r22, r9
 a96:	70 e0       	ldi	r23, 0x00	; 0
 a98:	02 c0       	rjmp	.+4      	; 0xa9e <vfprintf+0x14a>
 a9a:	6f ef       	ldi	r22, 0xFF	; 255
 a9c:	7f ef       	ldi	r23, 0xFF	; 255
 a9e:	c5 01       	movw	r24, r10
 aa0:	0e 94 96 06 	call	0xd2c	; 0xd2c <strnlen>
 aa4:	4c 01       	movw	r8, r24
 aa6:	82 01       	movw	r16, r4
 aa8:	f3 2d       	mov	r31, r3
 aaa:	ff 77       	andi	r31, 0x7F	; 127
 aac:	3f 2e       	mov	r3, r31
 aae:	16 c0       	rjmp	.+44     	; 0xadc <vfprintf+0x188>
 ab0:	28 01       	movw	r4, r16
 ab2:	22 e0       	ldi	r18, 0x02	; 2
 ab4:	42 0e       	add	r4, r18
 ab6:	51 1c       	adc	r5, r1
 ab8:	f8 01       	movw	r30, r16
 aba:	a0 80       	ld	r10, Z
 abc:	b1 80       	ldd	r11, Z+1	; 0x01
 abe:	36 fe       	sbrs	r3, 6
 ac0:	03 c0       	rjmp	.+6      	; 0xac8 <vfprintf+0x174>
 ac2:	69 2d       	mov	r22, r9
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <vfprintf+0x178>
 ac8:	6f ef       	ldi	r22, 0xFF	; 255
 aca:	7f ef       	ldi	r23, 0xFF	; 255
 acc:	c5 01       	movw	r24, r10
 ace:	0e 94 8b 06 	call	0xd16	; 0xd16 <strnlen_P>
 ad2:	4c 01       	movw	r8, r24
 ad4:	f3 2d       	mov	r31, r3
 ad6:	f0 68       	ori	r31, 0x80	; 128
 ad8:	3f 2e       	mov	r3, r31
 ada:	82 01       	movw	r16, r4
 adc:	33 fc       	sbrc	r3, 3
 ade:	1b c0       	rjmp	.+54     	; 0xb16 <vfprintf+0x1c2>
 ae0:	82 2d       	mov	r24, r2
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	88 16       	cp	r8, r24
 ae6:	99 06       	cpc	r9, r25
 ae8:	b0 f4       	brcc	.+44     	; 0xb16 <vfprintf+0x1c2>
 aea:	b6 01       	movw	r22, r12
 aec:	80 e2       	ldi	r24, 0x20	; 32
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 af4:	2a 94       	dec	r2
 af6:	f4 cf       	rjmp	.-24     	; 0xae0 <vfprintf+0x18c>
 af8:	f5 01       	movw	r30, r10
 afa:	37 fc       	sbrc	r3, 7
 afc:	85 91       	lpm	r24, Z+
 afe:	37 fe       	sbrs	r3, 7
 b00:	81 91       	ld	r24, Z+
 b02:	5f 01       	movw	r10, r30
 b04:	b6 01       	movw	r22, r12
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 b0c:	21 10       	cpse	r2, r1
 b0e:	2a 94       	dec	r2
 b10:	21 e0       	ldi	r18, 0x01	; 1
 b12:	82 1a       	sub	r8, r18
 b14:	91 08       	sbc	r9, r1
 b16:	81 14       	cp	r8, r1
 b18:	91 04       	cpc	r9, r1
 b1a:	71 f7       	brne	.-36     	; 0xaf8 <vfprintf+0x1a4>
 b1c:	e8 c0       	rjmp	.+464    	; 0xcee <vfprintf+0x39a>
 b1e:	84 36       	cpi	r24, 0x64	; 100
 b20:	11 f0       	breq	.+4      	; 0xb26 <vfprintf+0x1d2>
 b22:	89 36       	cpi	r24, 0x69	; 105
 b24:	41 f5       	brne	.+80     	; 0xb76 <vfprintf+0x222>
 b26:	f8 01       	movw	r30, r16
 b28:	37 fe       	sbrs	r3, 7
 b2a:	07 c0       	rjmp	.+14     	; 0xb3a <vfprintf+0x1e6>
 b2c:	60 81       	ld	r22, Z
 b2e:	71 81       	ldd	r23, Z+1	; 0x01
 b30:	82 81       	ldd	r24, Z+2	; 0x02
 b32:	93 81       	ldd	r25, Z+3	; 0x03
 b34:	0c 5f       	subi	r16, 0xFC	; 252
 b36:	1f 4f       	sbci	r17, 0xFF	; 255
 b38:	08 c0       	rjmp	.+16     	; 0xb4a <vfprintf+0x1f6>
 b3a:	60 81       	ld	r22, Z
 b3c:	71 81       	ldd	r23, Z+1	; 0x01
 b3e:	07 2e       	mov	r0, r23
 b40:	00 0c       	add	r0, r0
 b42:	88 0b       	sbc	r24, r24
 b44:	99 0b       	sbc	r25, r25
 b46:	0e 5f       	subi	r16, 0xFE	; 254
 b48:	1f 4f       	sbci	r17, 0xFF	; 255
 b4a:	f3 2d       	mov	r31, r3
 b4c:	ff 76       	andi	r31, 0x6F	; 111
 b4e:	3f 2e       	mov	r3, r31
 b50:	97 ff       	sbrs	r25, 7
 b52:	09 c0       	rjmp	.+18     	; 0xb66 <vfprintf+0x212>
 b54:	90 95       	com	r25
 b56:	80 95       	com	r24
 b58:	70 95       	com	r23
 b5a:	61 95       	neg	r22
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	8f 4f       	sbci	r24, 0xFF	; 255
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	f0 68       	ori	r31, 0x80	; 128
 b64:	3f 2e       	mov	r3, r31
 b66:	2a e0       	ldi	r18, 0x0A	; 10
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	a3 01       	movw	r20, r6
 b6c:	0e 94 dd 06 	call	0xdba	; 0xdba <__ultoa_invert>
 b70:	88 2e       	mov	r8, r24
 b72:	86 18       	sub	r8, r6
 b74:	45 c0       	rjmp	.+138    	; 0xc00 <vfprintf+0x2ac>
 b76:	85 37       	cpi	r24, 0x75	; 117
 b78:	31 f4       	brne	.+12     	; 0xb86 <vfprintf+0x232>
 b7a:	23 2d       	mov	r18, r3
 b7c:	2f 7e       	andi	r18, 0xEF	; 239
 b7e:	b2 2e       	mov	r11, r18
 b80:	2a e0       	ldi	r18, 0x0A	; 10
 b82:	30 e0       	ldi	r19, 0x00	; 0
 b84:	25 c0       	rjmp	.+74     	; 0xbd0 <vfprintf+0x27c>
 b86:	93 2d       	mov	r25, r3
 b88:	99 7f       	andi	r25, 0xF9	; 249
 b8a:	b9 2e       	mov	r11, r25
 b8c:	8f 36       	cpi	r24, 0x6F	; 111
 b8e:	c1 f0       	breq	.+48     	; 0xbc0 <vfprintf+0x26c>
 b90:	18 f4       	brcc	.+6      	; 0xb98 <vfprintf+0x244>
 b92:	88 35       	cpi	r24, 0x58	; 88
 b94:	79 f0       	breq	.+30     	; 0xbb4 <vfprintf+0x260>
 b96:	b5 c0       	rjmp	.+362    	; 0xd02 <vfprintf+0x3ae>
 b98:	80 37       	cpi	r24, 0x70	; 112
 b9a:	19 f0       	breq	.+6      	; 0xba2 <vfprintf+0x24e>
 b9c:	88 37       	cpi	r24, 0x78	; 120
 b9e:	21 f0       	breq	.+8      	; 0xba8 <vfprintf+0x254>
 ba0:	b0 c0       	rjmp	.+352    	; 0xd02 <vfprintf+0x3ae>
 ba2:	e9 2f       	mov	r30, r25
 ba4:	e0 61       	ori	r30, 0x10	; 16
 ba6:	be 2e       	mov	r11, r30
 ba8:	b4 fe       	sbrs	r11, 4
 baa:	0d c0       	rjmp	.+26     	; 0xbc6 <vfprintf+0x272>
 bac:	fb 2d       	mov	r31, r11
 bae:	f4 60       	ori	r31, 0x04	; 4
 bb0:	bf 2e       	mov	r11, r31
 bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <vfprintf+0x272>
 bb4:	34 fe       	sbrs	r3, 4
 bb6:	0a c0       	rjmp	.+20     	; 0xbcc <vfprintf+0x278>
 bb8:	29 2f       	mov	r18, r25
 bba:	26 60       	ori	r18, 0x06	; 6
 bbc:	b2 2e       	mov	r11, r18
 bbe:	06 c0       	rjmp	.+12     	; 0xbcc <vfprintf+0x278>
 bc0:	28 e0       	ldi	r18, 0x08	; 8
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <vfprintf+0x27c>
 bc6:	20 e1       	ldi	r18, 0x10	; 16
 bc8:	30 e0       	ldi	r19, 0x00	; 0
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <vfprintf+0x27c>
 bcc:	20 e1       	ldi	r18, 0x10	; 16
 bce:	32 e0       	ldi	r19, 0x02	; 2
 bd0:	f8 01       	movw	r30, r16
 bd2:	b7 fe       	sbrs	r11, 7
 bd4:	07 c0       	rjmp	.+14     	; 0xbe4 <vfprintf+0x290>
 bd6:	60 81       	ld	r22, Z
 bd8:	71 81       	ldd	r23, Z+1	; 0x01
 bda:	82 81       	ldd	r24, Z+2	; 0x02
 bdc:	93 81       	ldd	r25, Z+3	; 0x03
 bde:	0c 5f       	subi	r16, 0xFC	; 252
 be0:	1f 4f       	sbci	r17, 0xFF	; 255
 be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0x29c>
 be4:	60 81       	ld	r22, Z
 be6:	71 81       	ldd	r23, Z+1	; 0x01
 be8:	80 e0       	ldi	r24, 0x00	; 0
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 5f       	subi	r16, 0xFE	; 254
 bee:	1f 4f       	sbci	r17, 0xFF	; 255
 bf0:	a3 01       	movw	r20, r6
 bf2:	0e 94 dd 06 	call	0xdba	; 0xdba <__ultoa_invert>
 bf6:	88 2e       	mov	r8, r24
 bf8:	86 18       	sub	r8, r6
 bfa:	fb 2d       	mov	r31, r11
 bfc:	ff 77       	andi	r31, 0x7F	; 127
 bfe:	3f 2e       	mov	r3, r31
 c00:	36 fe       	sbrs	r3, 6
 c02:	0d c0       	rjmp	.+26     	; 0xc1e <vfprintf+0x2ca>
 c04:	23 2d       	mov	r18, r3
 c06:	2e 7f       	andi	r18, 0xFE	; 254
 c08:	a2 2e       	mov	r10, r18
 c0a:	89 14       	cp	r8, r9
 c0c:	58 f4       	brcc	.+22     	; 0xc24 <vfprintf+0x2d0>
 c0e:	34 fe       	sbrs	r3, 4
 c10:	0b c0       	rjmp	.+22     	; 0xc28 <vfprintf+0x2d4>
 c12:	32 fc       	sbrc	r3, 2
 c14:	09 c0       	rjmp	.+18     	; 0xc28 <vfprintf+0x2d4>
 c16:	83 2d       	mov	r24, r3
 c18:	8e 7e       	andi	r24, 0xEE	; 238
 c1a:	a8 2e       	mov	r10, r24
 c1c:	05 c0       	rjmp	.+10     	; 0xc28 <vfprintf+0x2d4>
 c1e:	b8 2c       	mov	r11, r8
 c20:	a3 2c       	mov	r10, r3
 c22:	03 c0       	rjmp	.+6      	; 0xc2a <vfprintf+0x2d6>
 c24:	b8 2c       	mov	r11, r8
 c26:	01 c0       	rjmp	.+2      	; 0xc2a <vfprintf+0x2d6>
 c28:	b9 2c       	mov	r11, r9
 c2a:	a4 fe       	sbrs	r10, 4
 c2c:	0f c0       	rjmp	.+30     	; 0xc4c <vfprintf+0x2f8>
 c2e:	fe 01       	movw	r30, r28
 c30:	e8 0d       	add	r30, r8
 c32:	f1 1d       	adc	r31, r1
 c34:	80 81       	ld	r24, Z
 c36:	80 33       	cpi	r24, 0x30	; 48
 c38:	21 f4       	brne	.+8      	; 0xc42 <vfprintf+0x2ee>
 c3a:	9a 2d       	mov	r25, r10
 c3c:	99 7e       	andi	r25, 0xE9	; 233
 c3e:	a9 2e       	mov	r10, r25
 c40:	09 c0       	rjmp	.+18     	; 0xc54 <vfprintf+0x300>
 c42:	a2 fe       	sbrs	r10, 2
 c44:	06 c0       	rjmp	.+12     	; 0xc52 <vfprintf+0x2fe>
 c46:	b3 94       	inc	r11
 c48:	b3 94       	inc	r11
 c4a:	04 c0       	rjmp	.+8      	; 0xc54 <vfprintf+0x300>
 c4c:	8a 2d       	mov	r24, r10
 c4e:	86 78       	andi	r24, 0x86	; 134
 c50:	09 f0       	breq	.+2      	; 0xc54 <vfprintf+0x300>
 c52:	b3 94       	inc	r11
 c54:	a3 fc       	sbrc	r10, 3
 c56:	11 c0       	rjmp	.+34     	; 0xc7a <vfprintf+0x326>
 c58:	a0 fe       	sbrs	r10, 0
 c5a:	06 c0       	rjmp	.+12     	; 0xc68 <vfprintf+0x314>
 c5c:	b2 14       	cp	r11, r2
 c5e:	88 f4       	brcc	.+34     	; 0xc82 <vfprintf+0x32e>
 c60:	28 0c       	add	r2, r8
 c62:	92 2c       	mov	r9, r2
 c64:	9b 18       	sub	r9, r11
 c66:	0e c0       	rjmp	.+28     	; 0xc84 <vfprintf+0x330>
 c68:	b2 14       	cp	r11, r2
 c6a:	60 f4       	brcc	.+24     	; 0xc84 <vfprintf+0x330>
 c6c:	b6 01       	movw	r22, r12
 c6e:	80 e2       	ldi	r24, 0x20	; 32
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 c76:	b3 94       	inc	r11
 c78:	f7 cf       	rjmp	.-18     	; 0xc68 <vfprintf+0x314>
 c7a:	b2 14       	cp	r11, r2
 c7c:	18 f4       	brcc	.+6      	; 0xc84 <vfprintf+0x330>
 c7e:	2b 18       	sub	r2, r11
 c80:	02 c0       	rjmp	.+4      	; 0xc86 <vfprintf+0x332>
 c82:	98 2c       	mov	r9, r8
 c84:	21 2c       	mov	r2, r1
 c86:	a4 fe       	sbrs	r10, 4
 c88:	10 c0       	rjmp	.+32     	; 0xcaa <vfprintf+0x356>
 c8a:	b6 01       	movw	r22, r12
 c8c:	80 e3       	ldi	r24, 0x30	; 48
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 c94:	a2 fe       	sbrs	r10, 2
 c96:	17 c0       	rjmp	.+46     	; 0xcc6 <vfprintf+0x372>
 c98:	a1 fc       	sbrc	r10, 1
 c9a:	03 c0       	rjmp	.+6      	; 0xca2 <vfprintf+0x34e>
 c9c:	88 e7       	ldi	r24, 0x78	; 120
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	02 c0       	rjmp	.+4      	; 0xca6 <vfprintf+0x352>
 ca2:	88 e5       	ldi	r24, 0x58	; 88
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	b6 01       	movw	r22, r12
 ca8:	0c c0       	rjmp	.+24     	; 0xcc2 <vfprintf+0x36e>
 caa:	8a 2d       	mov	r24, r10
 cac:	86 78       	andi	r24, 0x86	; 134
 cae:	59 f0       	breq	.+22     	; 0xcc6 <vfprintf+0x372>
 cb0:	a1 fe       	sbrs	r10, 1
 cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <vfprintf+0x364>
 cb4:	8b e2       	ldi	r24, 0x2B	; 43
 cb6:	01 c0       	rjmp	.+2      	; 0xcba <vfprintf+0x366>
 cb8:	80 e2       	ldi	r24, 0x20	; 32
 cba:	a7 fc       	sbrc	r10, 7
 cbc:	8d e2       	ldi	r24, 0x2D	; 45
 cbe:	b6 01       	movw	r22, r12
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 cc6:	89 14       	cp	r8, r9
 cc8:	38 f4       	brcc	.+14     	; 0xcd8 <vfprintf+0x384>
 cca:	b6 01       	movw	r22, r12
 ccc:	80 e3       	ldi	r24, 0x30	; 48
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 cd4:	9a 94       	dec	r9
 cd6:	f7 cf       	rjmp	.-18     	; 0xcc6 <vfprintf+0x372>
 cd8:	8a 94       	dec	r8
 cda:	f3 01       	movw	r30, r6
 cdc:	e8 0d       	add	r30, r8
 cde:	f1 1d       	adc	r31, r1
 ce0:	80 81       	ld	r24, Z
 ce2:	b6 01       	movw	r22, r12
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 cea:	81 10       	cpse	r8, r1
 cec:	f5 cf       	rjmp	.-22     	; 0xcd8 <vfprintf+0x384>
 cee:	22 20       	and	r2, r2
 cf0:	09 f4       	brne	.+2      	; 0xcf4 <vfprintf+0x3a0>
 cf2:	42 ce       	rjmp	.-892    	; 0x978 <vfprintf+0x24>
 cf4:	b6 01       	movw	r22, r12
 cf6:	80 e2       	ldi	r24, 0x20	; 32
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 cfe:	2a 94       	dec	r2
 d00:	f6 cf       	rjmp	.-20     	; 0xcee <vfprintf+0x39a>
 d02:	f6 01       	movw	r30, r12
 d04:	86 81       	ldd	r24, Z+6	; 0x06
 d06:	97 81       	ldd	r25, Z+7	; 0x07
 d08:	02 c0       	rjmp	.+4      	; 0xd0e <vfprintf+0x3ba>
 d0a:	8f ef       	ldi	r24, 0xFF	; 255
 d0c:	9f ef       	ldi	r25, 0xFF	; 255
 d0e:	2b 96       	adiw	r28, 0x0b	; 11
 d10:	e2 e1       	ldi	r30, 0x12	; 18
 d12:	0c 94 57 07 	jmp	0xeae	; 0xeae <__epilogue_restores__>

00000d16 <strnlen_P>:
 d16:	fc 01       	movw	r30, r24
 d18:	05 90       	lpm	r0, Z+
 d1a:	61 50       	subi	r22, 0x01	; 1
 d1c:	70 40       	sbci	r23, 0x00	; 0
 d1e:	01 10       	cpse	r0, r1
 d20:	d8 f7       	brcc	.-10     	; 0xd18 <strnlen_P+0x2>
 d22:	80 95       	com	r24
 d24:	90 95       	com	r25
 d26:	8e 0f       	add	r24, r30
 d28:	9f 1f       	adc	r25, r31
 d2a:	08 95       	ret

00000d2c <strnlen>:
 d2c:	fc 01       	movw	r30, r24
 d2e:	61 50       	subi	r22, 0x01	; 1
 d30:	70 40       	sbci	r23, 0x00	; 0
 d32:	01 90       	ld	r0, Z+
 d34:	01 10       	cpse	r0, r1
 d36:	d8 f7       	brcc	.-10     	; 0xd2e <strnlen+0x2>
 d38:	80 95       	com	r24
 d3a:	90 95       	com	r25
 d3c:	8e 0f       	add	r24, r30
 d3e:	9f 1f       	adc	r25, r31
 d40:	08 95       	ret

00000d42 <fputc>:
 d42:	0f 93       	push	r16
 d44:	1f 93       	push	r17
 d46:	cf 93       	push	r28
 d48:	df 93       	push	r29
 d4a:	fb 01       	movw	r30, r22
 d4c:	23 81       	ldd	r18, Z+3	; 0x03
 d4e:	21 fd       	sbrc	r18, 1
 d50:	03 c0       	rjmp	.+6      	; 0xd58 <fputc+0x16>
 d52:	8f ef       	ldi	r24, 0xFF	; 255
 d54:	9f ef       	ldi	r25, 0xFF	; 255
 d56:	2c c0       	rjmp	.+88     	; 0xdb0 <fputc+0x6e>
 d58:	22 ff       	sbrs	r18, 2
 d5a:	16 c0       	rjmp	.+44     	; 0xd88 <fputc+0x46>
 d5c:	46 81       	ldd	r20, Z+6	; 0x06
 d5e:	57 81       	ldd	r21, Z+7	; 0x07
 d60:	24 81       	ldd	r18, Z+4	; 0x04
 d62:	35 81       	ldd	r19, Z+5	; 0x05
 d64:	42 17       	cp	r20, r18
 d66:	53 07       	cpc	r21, r19
 d68:	44 f4       	brge	.+16     	; 0xd7a <fputc+0x38>
 d6a:	a0 81       	ld	r26, Z
 d6c:	b1 81       	ldd	r27, Z+1	; 0x01
 d6e:	9d 01       	movw	r18, r26
 d70:	2f 5f       	subi	r18, 0xFF	; 255
 d72:	3f 4f       	sbci	r19, 0xFF	; 255
 d74:	31 83       	std	Z+1, r19	; 0x01
 d76:	20 83       	st	Z, r18
 d78:	8c 93       	st	X, r24
 d7a:	26 81       	ldd	r18, Z+6	; 0x06
 d7c:	37 81       	ldd	r19, Z+7	; 0x07
 d7e:	2f 5f       	subi	r18, 0xFF	; 255
 d80:	3f 4f       	sbci	r19, 0xFF	; 255
 d82:	37 83       	std	Z+7, r19	; 0x07
 d84:	26 83       	std	Z+6, r18	; 0x06
 d86:	14 c0       	rjmp	.+40     	; 0xdb0 <fputc+0x6e>
 d88:	8b 01       	movw	r16, r22
 d8a:	ec 01       	movw	r28, r24
 d8c:	fb 01       	movw	r30, r22
 d8e:	00 84       	ldd	r0, Z+8	; 0x08
 d90:	f1 85       	ldd	r31, Z+9	; 0x09
 d92:	e0 2d       	mov	r30, r0
 d94:	09 95       	icall
 d96:	89 2b       	or	r24, r25
 d98:	e1 f6       	brne	.-72     	; 0xd52 <fputc+0x10>
 d9a:	d8 01       	movw	r26, r16
 d9c:	16 96       	adiw	r26, 0x06	; 6
 d9e:	8d 91       	ld	r24, X+
 da0:	9c 91       	ld	r25, X
 da2:	17 97       	sbiw	r26, 0x07	; 7
 da4:	01 96       	adiw	r24, 0x01	; 1
 da6:	17 96       	adiw	r26, 0x07	; 7
 da8:	9c 93       	st	X, r25
 daa:	8e 93       	st	-X, r24
 dac:	16 97       	sbiw	r26, 0x06	; 6
 dae:	ce 01       	movw	r24, r28
 db0:	df 91       	pop	r29
 db2:	cf 91       	pop	r28
 db4:	1f 91       	pop	r17
 db6:	0f 91       	pop	r16
 db8:	08 95       	ret

00000dba <__ultoa_invert>:
 dba:	fa 01       	movw	r30, r20
 dbc:	aa 27       	eor	r26, r26
 dbe:	28 30       	cpi	r18, 0x08	; 8
 dc0:	51 f1       	breq	.+84     	; 0xe16 <__ultoa_invert+0x5c>
 dc2:	20 31       	cpi	r18, 0x10	; 16
 dc4:	81 f1       	breq	.+96     	; 0xe26 <__ultoa_invert+0x6c>
 dc6:	e8 94       	clt
 dc8:	6f 93       	push	r22
 dca:	6e 7f       	andi	r22, 0xFE	; 254
 dcc:	6e 5f       	subi	r22, 0xFE	; 254
 dce:	7f 4f       	sbci	r23, 0xFF	; 255
 dd0:	8f 4f       	sbci	r24, 0xFF	; 255
 dd2:	9f 4f       	sbci	r25, 0xFF	; 255
 dd4:	af 4f       	sbci	r26, 0xFF	; 255
 dd6:	b1 e0       	ldi	r27, 0x01	; 1
 dd8:	3e d0       	rcall	.+124    	; 0xe56 <__ultoa_invert+0x9c>
 dda:	b4 e0       	ldi	r27, 0x04	; 4
 ddc:	3c d0       	rcall	.+120    	; 0xe56 <__ultoa_invert+0x9c>
 dde:	67 0f       	add	r22, r23
 de0:	78 1f       	adc	r23, r24
 de2:	89 1f       	adc	r24, r25
 de4:	9a 1f       	adc	r25, r26
 de6:	a1 1d       	adc	r26, r1
 de8:	68 0f       	add	r22, r24
 dea:	79 1f       	adc	r23, r25
 dec:	8a 1f       	adc	r24, r26
 dee:	91 1d       	adc	r25, r1
 df0:	a1 1d       	adc	r26, r1
 df2:	6a 0f       	add	r22, r26
 df4:	71 1d       	adc	r23, r1
 df6:	81 1d       	adc	r24, r1
 df8:	91 1d       	adc	r25, r1
 dfa:	a1 1d       	adc	r26, r1
 dfc:	20 d0       	rcall	.+64     	; 0xe3e <__ultoa_invert+0x84>
 dfe:	09 f4       	brne	.+2      	; 0xe02 <__ultoa_invert+0x48>
 e00:	68 94       	set
 e02:	3f 91       	pop	r19
 e04:	2a e0       	ldi	r18, 0x0A	; 10
 e06:	26 9f       	mul	r18, r22
 e08:	11 24       	eor	r1, r1
 e0a:	30 19       	sub	r19, r0
 e0c:	30 5d       	subi	r19, 0xD0	; 208
 e0e:	31 93       	st	Z+, r19
 e10:	de f6       	brtc	.-74     	; 0xdc8 <__ultoa_invert+0xe>
 e12:	cf 01       	movw	r24, r30
 e14:	08 95       	ret
 e16:	46 2f       	mov	r20, r22
 e18:	47 70       	andi	r20, 0x07	; 7
 e1a:	40 5d       	subi	r20, 0xD0	; 208
 e1c:	41 93       	st	Z+, r20
 e1e:	b3 e0       	ldi	r27, 0x03	; 3
 e20:	0f d0       	rcall	.+30     	; 0xe40 <__ultoa_invert+0x86>
 e22:	c9 f7       	brne	.-14     	; 0xe16 <__ultoa_invert+0x5c>
 e24:	f6 cf       	rjmp	.-20     	; 0xe12 <__ultoa_invert+0x58>
 e26:	46 2f       	mov	r20, r22
 e28:	4f 70       	andi	r20, 0x0F	; 15
 e2a:	40 5d       	subi	r20, 0xD0	; 208
 e2c:	4a 33       	cpi	r20, 0x3A	; 58
 e2e:	18 f0       	brcs	.+6      	; 0xe36 <__ultoa_invert+0x7c>
 e30:	49 5d       	subi	r20, 0xD9	; 217
 e32:	31 fd       	sbrc	r19, 1
 e34:	40 52       	subi	r20, 0x20	; 32
 e36:	41 93       	st	Z+, r20
 e38:	02 d0       	rcall	.+4      	; 0xe3e <__ultoa_invert+0x84>
 e3a:	a9 f7       	brne	.-22     	; 0xe26 <__ultoa_invert+0x6c>
 e3c:	ea cf       	rjmp	.-44     	; 0xe12 <__ultoa_invert+0x58>
 e3e:	b4 e0       	ldi	r27, 0x04	; 4
 e40:	a6 95       	lsr	r26
 e42:	97 95       	ror	r25
 e44:	87 95       	ror	r24
 e46:	77 95       	ror	r23
 e48:	67 95       	ror	r22
 e4a:	ba 95       	dec	r27
 e4c:	c9 f7       	brne	.-14     	; 0xe40 <__ultoa_invert+0x86>
 e4e:	00 97       	sbiw	r24, 0x00	; 0
 e50:	61 05       	cpc	r22, r1
 e52:	71 05       	cpc	r23, r1
 e54:	08 95       	ret
 e56:	9b 01       	movw	r18, r22
 e58:	ac 01       	movw	r20, r24
 e5a:	0a 2e       	mov	r0, r26
 e5c:	06 94       	lsr	r0
 e5e:	57 95       	ror	r21
 e60:	47 95       	ror	r20
 e62:	37 95       	ror	r19
 e64:	27 95       	ror	r18
 e66:	ba 95       	dec	r27
 e68:	c9 f7       	brne	.-14     	; 0xe5c <__ultoa_invert+0xa2>
 e6a:	62 0f       	add	r22, r18
 e6c:	73 1f       	adc	r23, r19
 e6e:	84 1f       	adc	r24, r20
 e70:	95 1f       	adc	r25, r21
 e72:	a0 1d       	adc	r26, r0
 e74:	08 95       	ret

00000e76 <__prologue_saves__>:
 e76:	2f 92       	push	r2
 e78:	3f 92       	push	r3
 e7a:	4f 92       	push	r4
 e7c:	5f 92       	push	r5
 e7e:	6f 92       	push	r6
 e80:	7f 92       	push	r7
 e82:	8f 92       	push	r8
 e84:	9f 92       	push	r9
 e86:	af 92       	push	r10
 e88:	bf 92       	push	r11
 e8a:	cf 92       	push	r12
 e8c:	df 92       	push	r13
 e8e:	ef 92       	push	r14
 e90:	ff 92       	push	r15
 e92:	0f 93       	push	r16
 e94:	1f 93       	push	r17
 e96:	cf 93       	push	r28
 e98:	df 93       	push	r29
 e9a:	cd b7       	in	r28, 0x3d	; 61
 e9c:	de b7       	in	r29, 0x3e	; 62
 e9e:	ca 1b       	sub	r28, r26
 ea0:	db 0b       	sbc	r29, r27
 ea2:	0f b6       	in	r0, 0x3f	; 63
 ea4:	f8 94       	cli
 ea6:	de bf       	out	0x3e, r29	; 62
 ea8:	0f be       	out	0x3f, r0	; 63
 eaa:	cd bf       	out	0x3d, r28	; 61
 eac:	09 94       	ijmp

00000eae <__epilogue_restores__>:
 eae:	2a 88       	ldd	r2, Y+18	; 0x12
 eb0:	39 88       	ldd	r3, Y+17	; 0x11
 eb2:	48 88       	ldd	r4, Y+16	; 0x10
 eb4:	5f 84       	ldd	r5, Y+15	; 0x0f
 eb6:	6e 84       	ldd	r6, Y+14	; 0x0e
 eb8:	7d 84       	ldd	r7, Y+13	; 0x0d
 eba:	8c 84       	ldd	r8, Y+12	; 0x0c
 ebc:	9b 84       	ldd	r9, Y+11	; 0x0b
 ebe:	aa 84       	ldd	r10, Y+10	; 0x0a
 ec0:	b9 84       	ldd	r11, Y+9	; 0x09
 ec2:	c8 84       	ldd	r12, Y+8	; 0x08
 ec4:	df 80       	ldd	r13, Y+7	; 0x07
 ec6:	ee 80       	ldd	r14, Y+6	; 0x06
 ec8:	fd 80       	ldd	r15, Y+5	; 0x05
 eca:	0c 81       	ldd	r16, Y+4	; 0x04
 ecc:	1b 81       	ldd	r17, Y+3	; 0x03
 ece:	aa 81       	ldd	r26, Y+2	; 0x02
 ed0:	b9 81       	ldd	r27, Y+1	; 0x01
 ed2:	ce 0f       	add	r28, r30
 ed4:	d1 1d       	adc	r29, r1
 ed6:	0f b6       	in	r0, 0x3f	; 63
 ed8:	f8 94       	cli
 eda:	de bf       	out	0x3e, r29	; 62
 edc:	0f be       	out	0x3f, r0	; 63
 ede:	cd bf       	out	0x3d, r28	; 61
 ee0:	ed 01       	movw	r28, r26
 ee2:	08 95       	ret

00000ee4 <_exit>:
 ee4:	f8 94       	cli

00000ee6 <__stop_program>:
 ee6:	ff cf       	rjmp	.-2      	; 0xee6 <__stop_program>
