
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00002acc  00002b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002acc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  008001b2  008001b2  00002c12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000288e  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fff  00000000  00000000  000057f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e92  00000000  00000000  000067f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000810  00000000  00000000  00008688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b3a  00000000  00000000  00008e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002679  00000000  00000000  000099d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000c04b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__vector_4>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__vector_14>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__vector_18>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_20>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_21>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <lcd1602_send_byte+0x34>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <i2c_send_packet+0x8>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <__vector_21+0x14>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	ec ec       	ldi	r30, 0xCC	; 204
     176:	fa e2       	ldi	r31, 0x2A	; 42
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a2 3b       	cpi	r26, 0xB2	; 178
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	22 e0       	ldi	r18, 0x02	; 2
     186:	a2 eb       	ldi	r26, 0xB2	; 178
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a2 34       	cpi	r26, 0x42	; 66
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 14 0a 	call	0x1428	; 0x1428 <main>
     198:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <ADC_init>:


void ADC_init()
{
	
	PRR = 0;						//power reduction off
     1a0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
     1a4:	80 ec       	ldi	r24, 0xC0	; 192
     1a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
     1aa:	8e ee       	ldi	r24, 0xEE	; 238
     1ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
     1b0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
     1b4:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ad_kanal>
     1b8:	08 95       	ret

000001ba <__vector_21>:


/* TODO: u ISR-u neka bude samo flag, a obrada podataka izdvojeno, jer je ovo glup nacin, da racun radim u prekidnoj rutini */

ISR(ADC_vect)
{
     1ba:	1f 92       	push	r1
     1bc:	0f 92       	push	r0
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	0f 92       	push	r0
     1c2:	11 24       	eor	r1, r1
     1c4:	8f 93       	push	r24
	/*
	 * AD konverzija
	 * ISR okine kada je gotova konverzija
	 */
	isr_adc = 1;	//set flag
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <__data_end>

}
     1cc:	8f 91       	pop	r24
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <adc_read>:

void adc_read()
{
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
	
	if (isr_adc)
     1e8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
     1ec:	88 23       	and	r24, r24
     1ee:	09 f4       	brne	.+2      	; 0x1f2 <adc_read+0x1a>
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <adc_read+0x124>
	{
		isr_adc = 0;	//reset flag
     1f2:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <__data_end>
	
	
		//upis ad konverzije oba kanala u odgovarajuce promenljive
		if(ad_kanal == 0)
     1f6:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ad_kanal>
     1fa:	81 11       	cpse	r24, r1
     1fc:	09 c0       	rjmp	.+18     	; 0x210 <adc_read+0x38>
			adc_napon_raw = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
     1fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     202:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     206:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <adc_napon_raw+0x1>
     20a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <adc_napon_raw>
     20e:	0a c0       	rjmp	.+20     	; 0x224 <adc_read+0x4c>
		else if(ad_kanal == 1)
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	41 f4       	brne	.+16     	; 0x224 <adc_read+0x4c>
			adc_struja_raw = (uint16_t)ADC;
     214:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     218:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     21c:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <adc_struja_raw+0x1>
     220:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <adc_struja_raw>
	
		//npr: napon 1023 = 280V
		//     struja 1023 = 25A
		napon = adc_napon_raw/3.65;
     224:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <adc_napon_raw>
     228:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <adc_napon_raw+0x1>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__floatunsisf>
     234:	2a e9       	ldi	r18, 0x9A	; 154
     236:	39 e9       	ldi	r19, 0x99	; 153
     238:	49 e6       	ldi	r20, 0x69	; 105
     23a:	50 e4       	ldi	r21, 0x40	; 64
     23c:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divsf3>
     240:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__fixunssfsi>
     244:	6b 01       	movw	r12, r22
     246:	7c 01       	movw	r14, r24
     248:	70 93 c1 01 	sts	0x01C1, r23	; 0x8001c1 <napon+0x1>
     24c:	60 93 c0 01 	sts	0x01C0, r22	; 0x8001c0 <napon>
		struja = adc_struja_raw/40.92;
     250:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <adc_struja_raw>
     254:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <adc_struja_raw+0x1>
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__floatunsisf>
     260:	24 e1       	ldi	r18, 0x14	; 20
     262:	3e ea       	ldi	r19, 0xAE	; 174
     264:	43 e2       	ldi	r20, 0x23	; 35
     266:	52 e4       	ldi	r21, 0x42	; 66
     268:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divsf3>
     26c:	4b 01       	movw	r8, r22
     26e:	5c 01       	movw	r10, r24
     270:	60 93 bc 01 	sts	0x01BC, r22	; 0x8001bc <struja>
     274:	70 93 bd 01 	sts	0x01BD, r23	; 0x8001bd <struja+0x1>
     278:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <struja+0x2>
     27c:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <struja+0x3>
		snaga = (napon * struja)/1000.0;	//kW
     280:	b6 01       	movw	r22, r12
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__floatunsisf>
     28a:	a5 01       	movw	r20, r10
     28c:	94 01       	movw	r18, r8
     28e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__mulsf3>
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	4a e7       	ldi	r20, 0x7A	; 122
     298:	54 e4       	ldi	r21, 0x44	; 68
     29a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divsf3>
     29e:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <snaga>
     2a2:	70 93 b9 01 	sts	0x01B9, r23	; 0x8001b9 <snaga+0x1>
     2a6:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <snaga+0x2>
     2aa:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <snaga+0x3>
		//snaga se integrali(sumira) svaki sekund u main-u cime se racuna elektricna energija
		
		/**************************************************************************************************************/
		ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     2ae:	ea e7       	ldi	r30, 0x7A	; 122
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8f 77       	andi	r24, 0x7F	; 127
     2b6:	80 83       	st	Z, r24
	
	
		ad_kanal++;			//inkrementiraj kanal
     2b8:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ad_kanal>
     2bc:	8f 5f       	subi	r24, 0xFF	; 255
     2be:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ad_kanal>
		if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     2c2:	82 30       	cpi	r24, 0x02	; 2
     2c4:	18 f0       	brcs	.+6      	; 0x2cc <adc_read+0xf4>
			ad_kanal = 0;
     2c6:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ad_kanal>
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <adc_read+0xfe>
	


	
		//multipleksiranje ad ulaza; tj. promena ad kanala
		switch(ad_kanal)
     2cc:	88 23       	and	r24, r24
     2ce:	19 f0       	breq	.+6      	; 0x2d6 <adc_read+0xfe>
     2d0:	81 30       	cpi	r24, 0x01	; 1
     2d2:	39 f0       	breq	.+14     	; 0x2e2 <adc_read+0x10a>
     2d4:	0e c0       	rjmp	.+28     	; 0x2f2 <adc_read+0x11a>
		{
			case 0:
			ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     2d6:	ec e7       	ldi	r30, 0x7C	; 124
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	8c 7f       	andi	r24, 0xFC	; 252
     2de:	80 83       	st	Z, r24
			break;
     2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <adc_read+0x11a>
		
			case 1:
			ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     2e2:	ec e7       	ldi	r30, 0x7C	; 124
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	8d 7f       	andi	r24, 0xFD	; 253
     2ea:	80 83       	st	Z, r24
			ADMUX |= (0b1);
     2ec:	80 81       	ld	r24, Z
     2ee:	81 60       	ori	r24, 0x01	; 1
     2f0:	80 83       	st	Z, r24
		}
	
	
		//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala.
	
		ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     2f2:	ea e7       	ldi	r30, 0x7A	; 122
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	80 6c       	ori	r24, 0xC0	; 192
     2fa:	80 83       	st	Z, r24
		
	}
}
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	bf 90       	pop	r11
     306:	af 90       	pop	r10
     308:	9f 90       	pop	r9
     30a:	8f 90       	pop	r8
     30c:	08 95       	ret

0000030e <EEPROM_read>:


uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     30e:	f9 99       	sbic	0x1f, 1	; 31
     310:	fe cf       	rjmp	.-4      	; 0x30e <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
     312:	92 bd       	out	0x22, r25	; 34
     314:	81 bd       	out	0x21, r24	; 33
	
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     316:	f8 9a       	sbi	0x1f, 0	; 31
	
	/* Return data from Data Register */
	return EEDR;
     318:	80 b5       	in	r24, 0x20	; 32
}
     31a:	08 95       	ret

0000031c <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     31c:	f9 99       	sbic	0x1f, 1	; 31
     31e:	fe cf       	rjmp	.-4      	; 0x31c <EEPROM_write>
	
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     320:	92 bd       	out	0x22, r25	; 34
     322:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     324:	60 bd       	out	0x20, r22	; 32
	
	/**********************!!!!!!!!!!!!!!!!!!!!!!***************************/
	cli();									//zabrana interapta, po preporuci iz datasheet-a, doci ce do write-faila ako se desi interapt izmedju ova dva koraka
     326:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     328:	fa 9a       	sbi	0x1f, 2	; 31
	
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     32a:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();									//dozvola interapta
     32c:	78 94       	sei
     32e:	08 95       	ret

00000330 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     330:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     334:	88 e4       	ldi	r24, 0x48	; 72
     336:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     33a:	08 95       	ret

0000033c <i2c_start_wait>:
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	ec eb       	ldi	r30, 0xBC	; 188
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	24 ea       	ldi	r18, 0xA4	; 164
     346:	a9 eb       	ldi	r26, 0xB9	; 185
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	cb eb       	ldi	r28, 0xBB	; 187
     34c:	d0 e0       	ldi	r29, 0x00	; 0
     34e:	34 e8       	ldi	r19, 0x84	; 132
     350:	44 e9       	ldi	r20, 0x94	; 148
     352:	20 83       	st	Z, r18
     354:	90 81       	ld	r25, Z
     356:	99 23       	and	r25, r25
     358:	ec f7       	brge	.-6      	; 0x354 <i2c_start_wait+0x18>
     35a:	9c 91       	ld	r25, X
     35c:	98 7f       	andi	r25, 0xF8	; 248
     35e:	98 30       	cpi	r25, 0x08	; 8
     360:	11 f0       	breq	.+4      	; 0x366 <i2c_start_wait+0x2a>
     362:	90 31       	cpi	r25, 0x10	; 16
     364:	b1 f7       	brne	.-20     	; 0x352 <i2c_start_wait+0x16>
     366:	88 83       	st	Y, r24
     368:	30 83       	st	Z, r19
     36a:	90 81       	ld	r25, Z
     36c:	99 23       	and	r25, r25
     36e:	ec f7       	brge	.-6      	; 0x36a <i2c_start_wait+0x2e>
     370:	9c 91       	ld	r25, X
     372:	98 7f       	andi	r25, 0xF8	; 248
     374:	90 32       	cpi	r25, 0x20	; 32
     376:	11 f0       	breq	.+4      	; 0x37c <i2c_start_wait+0x40>
     378:	98 35       	cpi	r25, 0x58	; 88
     37a:	29 f4       	brne	.+10     	; 0x386 <i2c_start_wait+0x4a>
     37c:	40 83       	st	Z, r20
     37e:	90 81       	ld	r25, Z
     380:	94 fd       	sbrc	r25, 4
     382:	fd cf       	rjmp	.-6      	; 0x37e <i2c_start_wait+0x42>
     384:	e6 cf       	rjmp	.-52     	; 0x352 <i2c_start_wait+0x16>
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <i2c_stop>:
     38c:	84 e9       	ldi	r24, 0x94	; 148
     38e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     392:	ec eb       	ldi	r30, 0xBC	; 188
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	84 fd       	sbrc	r24, 4
     39a:	fd cf       	rjmp	.-6      	; 0x396 <i2c_stop+0xa>
     39c:	08 95       	ret

0000039e <i2c_write>:
     39e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3a2:	84 e8       	ldi	r24, 0x84	; 132
     3a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3a8:	ec eb       	ldi	r30, 0xBC	; 188
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	88 23       	and	r24, r24
     3b0:	ec f7       	brge	.-6      	; 0x3ac <i2c_write+0xe>
     3b2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3b6:	98 7f       	andi	r25, 0xF8	; 248
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	98 32       	cpi	r25, 0x28	; 40
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <i2c_write+0x22>
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	08 95       	ret

000003c2 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     3c2:	84 e8       	ldi	r24, 0x84	; 132
     3c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     3c8:	ec eb       	ldi	r30, 0xBC	; 188
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	88 23       	and	r24, r24
     3d0:	ec f7       	brge	.-6      	; 0x3cc <i2c_readNak+0xa>
	
    return TWDR;
     3d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     3d6:	08 95       	ret

000003d8 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     3d8:	cf 93       	push	r28
     3da:	c8 2f       	mov	r28, r24
     3dc:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     3de:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_start_wait>
	i2c_write(value);                      // write 
     3e2:	8c 2f       	mov	r24, r28
     3e4:	0e 94 cf 01 	call	0x39e	; 0x39e <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     3e8:	0e 94 c6 01 	call	0x38c	; 0x38c <i2c_stop>
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <sati_ispis>:




void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	fc 01       	movw	r30, r24
     3fa:	06 2f       	mov	r16, r22
     3fc:	17 2f       	mov	r17, r23
     3fe:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     400:	21 11       	cpse	r18, r1
     402:	28 c0       	rjmp	.+80     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	{
		(*sat)++;
     404:	80 81       	ld	r24, Z
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
     406:	99 ee       	ldi	r25, 0xE9	; 233
     408:	98 0f       	add	r25, r24
     40a:	96 30       	cpi	r25, 0x06	; 6
     40c:	18 f0       	brcs	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sat)++;
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 83       	st	Z, r24
     412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
			*sat = 0;
     414:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sat);
     416:	80 81       	ld	r24, Z
     418:	1f 92       	push	r1
     41a:	8f 93       	push	r24
     41c:	8a e2       	ldi	r24, 0x2A	; 42
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	9f 93       	push	r25
     422:	8f 93       	push	r24
     424:	1f 93       	push	r17
     426:	0f 93       	push	r16
     428:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     42c:	88 81       	ld	r24, Y
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	81 50       	subi	r24, 0x01	; 1
     432:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     436:	80 2f       	mov	r24, r16
     438:	91 2f       	mov	r25, r17
     43a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	88 81       	ld	r24, Y
     442:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	28 c0       	rjmp	.+80     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	}
	else if (inc_dec == UMANJI)
     454:	21 30       	cpi	r18, 0x01	; 1
     456:	31 f5       	brne	.+76     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	{
		(*sat)--;
     458:	80 81       	ld	r24, Z
     45a:	81 50       	subi	r24, 0x01	; 1
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     45c:	8a 3f       	cpi	r24, 0xFA	; 250
     45e:	10 f4       	brcc	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sat)--;
     460:	80 83       	st	Z, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sat = 23;
     464:	87 e1       	ldi	r24, 0x17	; 23
     466:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sat);
     468:	80 81       	ld	r24, Z
     46a:	1f 92       	push	r1
     46c:	8f 93       	push	r24
     46e:	8a e2       	ldi	r24, 0x2A	; 42
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	1f 93       	push	r17
     478:	0f 93       	push	r16
     47a:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     47e:	88 81       	ld	r24, Y
     480:	61 e0       	ldi	r22, 0x01	; 1
     482:	81 50       	subi	r24, 0x01	; 1
     484:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     488:	80 2f       	mov	r24, r16
     48a:	91 2f       	mov	r25, r17
     48c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	88 81       	ld	r24, Y
     494:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
	}
	
	
}
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	08 95       	ret

000004ae <minuti_ispis>:

void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	fc 01       	movw	r30, r24
     4b8:	06 2f       	mov	r16, r22
     4ba:	17 2f       	mov	r17, r23
     4bc:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     4be:	21 11       	cpse	r18, r1
     4c0:	28 c0       	rjmp	.+80     	; 0x512 <minuti_ispis+0x64>
	{
		(*minut)++;
     4c2:	80 81       	ld	r24, Z
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
     4c4:	95 ec       	ldi	r25, 0xC5	; 197
     4c6:	98 0f       	add	r25, r24
     4c8:	95 30       	cpi	r25, 0x05	; 5
     4ca:	18 f0       	brcs	.+6      	; 0x4d2 <minuti_ispis+0x24>
void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*minut)++;
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	80 83       	st	Z, r24
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <minuti_ispis+0x26>
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
			*minut = 0;
     4d2:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *minut);
     4d4:	80 81       	ld	r24, Z
     4d6:	1f 92       	push	r1
     4d8:	8f 93       	push	r24
     4da:	8a e2       	ldi	r24, 0x2A	; 42
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	1f 93       	push	r17
     4e4:	0f 93       	push	r16
     4e6:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     4ea:	88 81       	ld	r24, Y
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	81 50       	subi	r24, 0x01	; 1
     4f0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     4f4:	80 2f       	mov	r24, r16
     4f6:	91 2f       	mov	r25, r17
     4f8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	88 81       	ld	r24, Y
     500:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	28 c0       	rjmp	.+80     	; 0x562 <minuti_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     512:	21 30       	cpi	r18, 0x01	; 1
     514:	31 f5       	brne	.+76     	; 0x562 <minuti_ispis+0xb4>
	{
		(*minut)--;
     516:	80 81       	ld	r24, Z
     518:	81 50       	subi	r24, 0x01	; 1
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     51a:	8a 3f       	cpi	r24, 0xFA	; 250
     51c:	10 f4       	brcc	.+4      	; 0x522 <minuti_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*minut)--;
     51e:	80 83       	st	Z, r24
     520:	02 c0       	rjmp	.+4      	; 0x526 <minuti_ispis+0x78>
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*minut = 59;
     522:	8b e3       	ldi	r24, 0x3B	; 59
     524:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *minut);
     526:	80 81       	ld	r24, Z
     528:	1f 92       	push	r1
     52a:	8f 93       	push	r24
     52c:	8a e2       	ldi	r24, 0x2A	; 42
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	1f 93       	push	r17
     536:	0f 93       	push	r16
     538:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     53c:	88 81       	ld	r24, Y
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	81 50       	subi	r24, 0x01	; 1
     542:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     546:	80 2f       	mov	r24, r16
     548:	91 2f       	mov	r25, r17
     54a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	88 81       	ld	r24, Y
     552:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
	}
	
	
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	08 95       	ret

0000056c <sekundi_ispis>:

void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	fc 01       	movw	r30, r24
     576:	06 2f       	mov	r16, r22
     578:	17 2f       	mov	r17, r23
     57a:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     57c:	21 11       	cpse	r18, r1
     57e:	28 c0       	rjmp	.+80     	; 0x5d0 <sekundi_ispis+0x64>
	{
		(*sekund)++;
     580:	80 81       	ld	r24, Z
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
     582:	95 ec       	ldi	r25, 0xC5	; 197
     584:	98 0f       	add	r25, r24
     586:	95 30       	cpi	r25, 0x05	; 5
     588:	18 f0       	brcs	.+6      	; 0x590 <sekundi_ispis+0x24>
void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sekund)++;
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	80 83       	st	Z, r24
     58e:	01 c0       	rjmp	.+2      	; 0x592 <sekundi_ispis+0x26>
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
			*sekund = 0;
     590:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sekund);
     592:	80 81       	ld	r24, Z
     594:	1f 92       	push	r1
     596:	8f 93       	push	r24
     598:	8a e2       	ldi	r24, 0x2A	; 42
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	1f 93       	push	r17
     5a2:	0f 93       	push	r16
     5a4:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     5a8:	88 81       	ld	r24, Y
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	81 50       	subi	r24, 0x01	; 1
     5ae:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     5b2:	80 2f       	mov	r24, r16
     5b4:	91 2f       	mov	r25, r17
     5b6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	88 81       	ld	r24, Y
     5be:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	28 c0       	rjmp	.+80     	; 0x620 <sekundi_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     5d0:	21 30       	cpi	r18, 0x01	; 1
     5d2:	31 f5       	brne	.+76     	; 0x620 <sekundi_ispis+0xb4>
	{
		(*sekund)--;
     5d4:	80 81       	ld	r24, Z
     5d6:	81 50       	subi	r24, 0x01	; 1
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     5d8:	8a 3f       	cpi	r24, 0xFA	; 250
     5da:	10 f4       	brcc	.+4      	; 0x5e0 <sekundi_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sekund)--;
     5dc:	80 83       	st	Z, r24
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <sekundi_ispis+0x78>
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sekund = 59;
     5e0:	8b e3       	ldi	r24, 0x3B	; 59
     5e2:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sekund);
     5e4:	80 81       	ld	r24, Z
     5e6:	1f 92       	push	r1
     5e8:	8f 93       	push	r24
     5ea:	8a e2       	ldi	r24, 0x2A	; 42
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	1f 93       	push	r17
     5f4:	0f 93       	push	r16
     5f6:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     5fa:	88 81       	ld	r24, Y
     5fc:	61 e0       	ldi	r22, 0x01	; 1
     5fe:	81 50       	subi	r24, 0x01	; 1
     600:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     604:	80 2f       	mov	r24, r16
     606:	91 2f       	mov	r25, r17
     608:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	88 81       	ld	r24, Y
     610:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
	}
	
	
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <putnibble>:
uint8_t led_pin;



void putnibble(char t)
{
     62a:	cf 93       	push	r28
     62c:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_W);		//SLA_W je i2c adresa shifotvana u levo za 1
     62e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <led_pin>
     632:	84 60       	ori	r24, 0x04	; 4
     634:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <led_pin>
     638:	6e e4       	ldi	r22, 0x4E	; 78
     63a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63e:	87 ec       	ldi	r24, 0xC7	; 199
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <putnibble+0x18>
     646:	00 c0       	rjmp	.+0      	; 0x648 <putnibble+0x1e>
     648:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_W);
     64a:	c2 95       	swap	r28
     64c:	c0 7f       	andi	r28, 0xF0	; 240
     64e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <led_pin>
     652:	6e e4       	ldi	r22, 0x4E	; 78
     654:	8c 2b       	or	r24, r28
     656:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_W);
     65a:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <led_pin>
     65e:	8b 7f       	andi	r24, 0xFB	; 251
     660:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <led_pin>
     664:	6e e4       	ldi	r22, 0x4E	; 78
     666:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
     66a:	87 ec       	ldi	r24, 0xC7	; 199
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <putnibble+0x44>
     672:	00 c0       	rjmp	.+0      	; 0x674 <putnibble+0x4a>
     674:	00 00       	nop
	_delay_us(50);
}
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <lcd1602_send_byte>:

void lcd1602_send_byte(char c, char rs)
{
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
     680:	d8 2f       	mov	r29, r24
     682:	d2 95       	swap	r29
     684:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
     686:	61 11       	cpse	r22, r1
     688:	09 c0       	rjmp	.+18     	; 0x69c <lcd1602_send_byte+0x22>
		i2c_send_packet(led_pin &=~ 0x01, SLA_W);
     68a:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <led_pin>
     68e:	8e 7f       	andi	r24, 0xFE	; 254
     690:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <led_pin>
     694:	6e e4       	ldi	r22, 0x4E	; 78
     696:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
     69a:	08 c0       	rjmp	.+16     	; 0x6ac <lcd1602_send_byte+0x32>
	else
		i2c_send_packet(led_pin |= 0x01, SLA_W);
     69c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <led_pin>
     6a0:	81 60       	ori	r24, 0x01	; 1
     6a2:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <led_pin>
     6a6:	6e e4       	ldi	r22, 0x4E	; 78
     6a8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
	putnibble(highc);
     6ac:	8d 2f       	mov	r24, r29
     6ae:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
	putnibble(c);
     6b2:	8c 2f       	mov	r24, r28
     6b4:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <lcd1602_send_char>:

void lcd1602_send_char(char c)
{
     6be:	cf 93       	push	r28
     6c0:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_W);
     6c2:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <led_pin>
     6c6:	81 60       	ori	r24, 0x01	; 1
     6c8:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <led_pin>
     6cc:	6e e4       	ldi	r22, 0x4E	; 78
     6ce:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
	putnibble(highc);
     6d2:	8c 2f       	mov	r24, r28
     6d4:	82 95       	swap	r24
     6d6:	8f 70       	andi	r24, 0x0F	; 15
     6d8:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
	putnibble(c);
     6dc:	8c 2f       	mov	r24, r28
     6de:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
}
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <lcd1602_init>:

void lcd1602_init()
{
	led_pin = 0;
     6e6:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <led_pin>
	i2c_init();
     6ea:	0e 94 98 01 	call	0x330	; 0x330 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ee:	8f e5       	ldi	r24, 0x5F	; 95
     6f0:	9a ee       	ldi	r25, 0xEA	; 234
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <lcd1602_init+0xc>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <lcd1602_init+0x12>
     6f8:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
     700:	8f e7       	ldi	r24, 0x7F	; 127
     702:	9e e3       	ldi	r25, 0x3E	; 62
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <lcd1602_init+0x1e>
     708:	00 c0       	rjmp	.+0      	; 0x70a <lcd1602_init+0x24>
     70a:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     712:	8f e8       	ldi	r24, 0x8F	; 143
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <lcd1602_init+0x30>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <lcd1602_init+0x36>
     71c:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     724:	8f e9       	ldi	r24, 0x9F	; 159
     726:	9f e0       	ldi	r25, 0x0F	; 15
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <lcd1602_init+0x42>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <lcd1602_init+0x48>
     72e:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
     736:	8f e9       	ldi	r24, 0x9F	; 159
     738:	9f e0       	ldi	r25, 0x0F	; 15
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <lcd1602_init+0x54>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <lcd1602_init+0x5a>
     740:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x28, LCD_COMMAND);
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	88 e2       	ldi	r24, 0x28	; 40
     746:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     74a:	8f e9       	ldi	r24, 0x9F	; 159
     74c:	9f e0       	ldi	r25, 0x0F	; 15
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <lcd1602_init+0x68>
     752:	00 c0       	rjmp	.+0      	; 0x754 <lcd1602_init+0x6e>
     754:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x0C, LCD_COMMAND);
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	8c e0       	ldi	r24, 0x0C	; 12
     75a:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     75e:	8f e9       	ldi	r24, 0x9F	; 159
     760:	9f e0       	ldi	r25, 0x0F	; 15
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <lcd1602_init+0x7c>
     766:	00 c0       	rjmp	.+0      	; 0x768 <lcd1602_init+0x82>
     768:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x06, LCD_COMMAND);
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	86 e0       	ldi	r24, 0x06	; 6
     76e:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     772:	8f e9       	ldi	r24, 0x9F	; 159
     774:	9f e0       	ldi	r25, 0x0F	; 15
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <lcd1602_init+0x90>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <lcd1602_init+0x96>
     77c:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_W);
     77e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <led_pin>
     782:	88 60       	ori	r24, 0x08	; 8
     784:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <led_pin>
     788:	6e e4       	ldi	r22, 0x4E	; 78
     78a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_W);
     78e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <led_pin>
     792:	8d 7f       	andi	r24, 0xFD	; 253
     794:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <led_pin>
     798:	6e e4       	ldi	r22, 0x4E	; 78
     79a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
     79e:	08 95       	ret

000007a0 <lcd1602_clear>:
}

void lcd1602_clear()
{
	lcd1602_send_byte(0x01, LCD_COMMAND);
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a8:	8f e8       	ldi	r24, 0x8F	; 143
     7aa:	9a e1       	ldi	r25, 0x1A	; 26
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <lcd1602_clear+0xc>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <lcd1602_clear+0x12>
     7b2:	00 00       	nop
     7b4:	08 95       	ret

000007b6 <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     7b6:	90 e4       	ldi	r25, 0x40	; 64
     7b8:	69 9f       	mul	r22, r25
     7ba:	80 0d       	add	r24, r0
     7bc:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	80 68       	ori	r24, 0x80	; 128
     7c2:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     7c6:	08 95       	ret

000007c8 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     7d0:	80 81       	ld	r24, Z
     7d2:	88 23       	and	r24, r24
     7d4:	59 f0       	breq	.+22     	; 0x7ec <lcd1602_send_string+0x24>
     7d6:	8f 01       	movw	r16, r30
     7d8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     7da:	0e 94 5f 03 	call	0x6be	; 0x6be <lcd1602_send_char>
		i++;
     7de:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     7e0:	f8 01       	movw	r30, r16
     7e2:	ec 0f       	add	r30, r28
     7e4:	f1 1d       	adc	r31, r1
     7e6:	80 81       	ld	r24, Z
     7e8:	81 11       	cpse	r24, r1
     7ea:	f7 cf       	rjmp	.-18     	; 0x7da <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     7f4:	88 23       	and	r24, r24
     7f6:	29 f0       	breq	.+10     	; 0x802 <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);	//blink on
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	8f e0       	ldi	r24, 0x0F	; 15
     7fc:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     800:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);	//blink off
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	8c e0       	ldi	r24, 0x0C	; 12
     806:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     80a:	08 95       	ret

0000080c <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     80c:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     80e:	dc 01       	movw	r26, r24
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	2c 91       	ld	r18, X
     814:	12 97       	sbiw	r26, 0x02	; 2
     816:	54 e6       	ldi	r21, 0x64	; 100
     818:	11 96       	adiw	r26, 0x01	; 1
     81a:	8c 91       	ld	r24, X
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	52 9f       	mul	r21, r18
     820:	80 0d       	add	r24, r0
     822:	91 1d       	adc	r25, r1
     824:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     826:	db 01       	movw	r26, r22
     828:	12 96       	adiw	r26, 0x02	; 2
     82a:	2c 91       	ld	r18, X
     82c:	12 97       	sbiw	r26, 0x02	; 2
     82e:	11 96       	adiw	r26, 0x01	; 1
     830:	6c 91       	ld	r22, X
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	52 9f       	mul	r21, r18
     836:	60 0d       	add	r22, r0
     838:	71 1d       	adc	r23, r1
     83a:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     83c:	42 81       	ldd	r20, Z+2	; 0x02
     83e:	21 81       	ldd	r18, Z+1	; 0x01
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	54 9f       	mul	r21, r20
     844:	20 0d       	add	r18, r0
     846:	31 1d       	adc	r19, r1
     848:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     84a:	86 17       	cp	r24, r22
     84c:	97 07       	cpc	r25, r23
     84e:	68 f0       	brcs	.+26     	; 0x86a <period_paljenja+0x5e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     850:	28 17       	cp	r18, r24
     852:	39 07       	cpc	r19, r25
     854:	20 f0       	brcs	.+8      	; 0x85e <period_paljenja+0x52>
     856:	28 33       	cpi	r18, 0x38	; 56
     858:	b9 e0       	ldi	r27, 0x09	; 9
     85a:	3b 07       	cpc	r19, r27
     85c:	78 f0       	brcs	.+30     	; 0x87c <period_paljenja+0x70>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	26 17       	cp	r18, r22
     862:	37 07       	cpc	r19, r23
     864:	70 f0       	brcs	.+28     	; 0x882 <period_paljenja+0x76>
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     86a:	28 17       	cp	r18, r24
     86c:	39 07       	cpc	r19, r25
     86e:	40 f0       	brcs	.+16     	; 0x880 <period_paljenja+0x74>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	26 17       	cp	r18, r22
     874:	37 07       	cpc	r19, r23
     876:	28 f0       	brcs	.+10     	; 0x882 <period_paljenja+0x76>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     880:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     882:	08 95       	ret

00000884 <fsm_lcd_menu>:

void fsm_lcd_menu()
{
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
	int pom;
	
	switch(STATE)
     88c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <STATE>
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	09 f4       	brne	.+2      	; 0x896 <fsm_lcd_menu+0x12>
     894:	08 c1       	rjmp	.+528    	; 0xaa6 <__stack+0x1a7>
     896:	30 f4       	brcc	.+12     	; 0x8a4 <fsm_lcd_menu+0x20>
     898:	88 23       	and	r24, r24
     89a:	69 f0       	breq	.+26     	; 0x8b6 <fsm_lcd_menu+0x32>
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	09 f4       	brne	.+2      	; 0x8a2 <fsm_lcd_menu+0x1e>
     8a0:	88 c0       	rjmp	.+272    	; 0x9b2 <__stack+0xb3>
     8a2:	bd c5       	rjmp	.+2938   	; 0x141e <__stack+0xb1f>
     8a4:	84 30       	cpi	r24, 0x04	; 4
     8a6:	09 f4       	brne	.+2      	; 0x8aa <fsm_lcd_menu+0x26>
     8a8:	f0 c2       	rjmp	.+1504   	; 0xe8a <__stack+0x58b>
     8aa:	08 f4       	brcc	.+2      	; 0x8ae <fsm_lcd_menu+0x2a>
     8ac:	e2 c1       	rjmp	.+964    	; 0xc72 <__stack+0x373>
     8ae:	85 30       	cpi	r24, 0x05	; 5
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <fsm_lcd_menu+0x30>
     8b2:	4e c4       	rjmp	.+2204   	; 0x1150 <__stack+0x851>
     8b4:	b4 c5       	rjmp	.+2920   	; 0x141e <__stack+0xb1f>
		
		case DISPL1:
				/* prvi, tj. glavni meni sa ispisom tren. vremena i vremena on/off */
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				
				if ( displ_flag_shot )	//samo prvi put kad se uleti
     8b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8ba:	88 23       	and	r24, r24
     8bc:	31 f0       	breq	.+12     	; 0x8ca <fsm_lcd_menu+0x46>
				{
					displ_flag_shot = 0; //resetujem flag, i zabranim ponovni ulazak
     8be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     8c2:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <timer_disp_cycle+0x1>
     8c6:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <timer_disp_cycle>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
					STATE = DISPL2;
				}
					*/	
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     8ca:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <flag_pc_int>
     8ce:	88 23       	and	r24, r24
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <fsm_lcd_menu+0x50>
     8d2:	60 c0       	rjmp	.+192    	; 0x994 <__stack+0x95>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     8d4:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <flag_pc_int>
			
					getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     8d8:	00 e0       	ldi	r16, 0x00	; 0
     8da:	27 e3       	ldi	r18, 0x37	; 55
     8dc:	32 e0       	ldi	r19, 0x02	; 2
     8de:	4f e2       	ldi	r20, 0x2F	; 47
     8e0:	52 e0       	ldi	r21, 0x02	; 2
     8e2:	60 e3       	ldi	r22, 0x30	; 48
     8e4:	72 e0       	ldi	r23, 0x02	; 2
     8e6:	81 e3       	ldi	r24, 0x31	; 49
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	0e 94 84 0c 	call	0x1908	; 0x1908 <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     8ee:	ef e2       	ldi	r30, 0x2F	; 47
     8f0:	f2 e0       	ldi	r31, 0x02	; 2
     8f2:	80 81       	ld	r24, Z
     8f4:	1f 92       	push	r1
     8f6:	8f 93       	push	r24
     8f8:	81 81       	ldd	r24, Z+1	; 0x01
     8fa:	1f 92       	push	r1
     8fc:	8f 93       	push	r24
     8fe:	82 81       	ldd	r24, Z+2	; 0x02
     900:	1f 92       	push	r1
     902:	8f 93       	push	r24
     904:	86 e0       	ldi	r24, 0x06	; 6
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	9f 93       	push	r25
     90a:	8f 93       	push	r24
     90c:	c7 ef       	ldi	r28, 0xF7	; 247
     90e:	d1 e0       	ldi	r29, 0x01	; 1
     910:	df 93       	push	r29
     912:	cf 93       	push	r28
     914:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
					
					//lcd1602_clear();
			
					/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
					lcd1602_goto_xy(0,0);
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string("    ");
     920:	85 e1       	ldi	r24, 0x15	; 21
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_send_string(bafer);
     928:	ce 01       	movw	r24, r28
     92a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_send_string("    ");
     92e:	85 e1       	ldi	r24, 0x15	; 21
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
			
					lcd1602_goto_xy(0,1);
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string("  ");
     93e:	87 e1       	ldi	r24, 0x17	; 23
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     946:	e6 e2       	ldi	r30, 0x26	; 38
     948:	f2 e0       	ldi	r31, 0x02	; 2
     94a:	81 81       	ldd	r24, Z+1	; 0x01
     94c:	1f 92       	push	r1
     94e:	8f 93       	push	r24
     950:	82 81       	ldd	r24, Z+2	; 0x02
     952:	1f 92       	push	r1
     954:	8f 93       	push	r24
     956:	e4 e1       	ldi	r30, 0x14	; 20
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	81 81       	ldd	r24, Z+1	; 0x01
     95c:	1f 92       	push	r1
     95e:	8f 93       	push	r24
     960:	82 81       	ldd	r24, Z+2	; 0x02
     962:	1f 92       	push	r1
     964:	8f 93       	push	r24
     966:	8a e1       	ldi	r24, 0x1A	; 26
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	9f 93       	push	r25
     96c:	8f 93       	push	r24
     96e:	df 93       	push	r29
     970:	cf 93       	push	r28
     972:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
					lcd1602_send_string(bafer);
     976:	ce 01       	movw	r24, r28
     978:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_send_string("  ");
     97c:	87 e1       	ldi	r24, 0x17	; 23
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
     984:	8d b7       	in	r24, 0x3d	; 61
     986:	9e b7       	in	r25, 0x3e	; 62
     988:	46 96       	adiw	r24, 0x16	; 22
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	9e bf       	out	0x3e, r25	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	8d bf       	out	0x3d, r24	; 61
			
				}
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     994:	65 e0       	ldi	r22, 0x05	; 5
     996:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     99a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     99e:	88 23       	and	r24, r24
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	3d c5       	rjmp	.+2682   	; 0x141e <__stack+0xb1f>
				{
					displ_flag_shot = 1;	//opet dozvolim, pri izlazku iz ovog stejta
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
     9b0:	36 c5       	rjmp	.+2668   	; 0x141e <__stack+0xb1f>
		break;
		
		case DISPL2:
				//ispisuje napon, struju, snagu... Smenjuje se periodicno sa DISPL1, uz pomoc tajmera
				
				if ( displ_flag_shot )	//samo prvi put kad se uleti
     9b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9b6:	88 23       	and	r24, r24
     9b8:	09 f4       	brne	.+2      	; 0x9bc <__stack+0xbd>
     9ba:	5a c0       	rjmp	.+180    	; 0xa70 <__stack+0x171>
				{
					displ_flag_shot = 0; //resetujem flag, i zabranim ponovni ulazak
     9bc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     9c0:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <timer_disp_cycle+0x1>
     9c4:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <timer_disp_cycle>
					
					lcd1602_clear();
     9c8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <lcd1602_clear>
					
					sprintf(bafer, "%4dV", napon);
     9cc:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <napon+0x1>
     9d0:	8f 93       	push	r24
     9d2:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <napon>
     9d6:	8f 93       	push	r24
     9d8:	8f e2       	ldi	r24, 0x2F	; 47
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	87 ef       	ldi	r24, 0xF7	; 247
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	9f 93       	push	r25
     9e6:	8f 93       	push	r24
     9e8:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
					lcd1602_goto_xy(1,0);
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(bafer);
     9f4:	87 ef       	ldi	r24, 0xF7	; 247
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					
					dtostrf(struja, 4, 1, bafer);
     9fc:	60 91 bc 01 	lds	r22, 0x01BC	; 0x8001bc <struja>
     a00:	70 91 bd 01 	lds	r23, 0x01BD	; 0x8001bd <struja+0x1>
     a04:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <struja+0x2>
     a08:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <struja+0x3>
     a0c:	07 ef       	ldi	r16, 0xF7	; 247
     a0e:	11 e0       	ldi	r17, 0x01	; 1
     a10:	21 e0       	ldi	r18, 0x01	; 1
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	44 e0       	ldi	r20, 0x04	; 4
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	0e 94 28 10 	call	0x2050	; 0x2050 <dtostrf>
					lcd1602_goto_xy(1,1);
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(bafer);
     a24:	c8 01       	movw	r24, r16
     a26:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_send_string("A");
     a2a:	80 e5       	ldi	r24, 0x50	; 80
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					
					dtostrf(snaga, 4, 1, bafer);
     a32:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <snaga>
     a36:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <snaga+0x1>
     a3a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <snaga+0x2>
     a3e:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <snaga+0x3>
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	44 e0       	ldi	r20, 0x04	; 4
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	0e 94 28 10 	call	0x2050	; 0x2050 <dtostrf>
					lcd1602_goto_xy(9,0);
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	89 e0       	ldi	r24, 0x09	; 9
     a52:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(bafer);
     a56:	c8 01       	movw	r24, r16
     a58:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_send_string("kW");
     a5c:	84 e3       	ldi	r24, 0x34	; 52
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
					//lcd1602_goto_xy(0,0);
					//lcd1602_send_string("224V      2.2kW");
					//lcd1602_goto_xy(0,1);
					//lcd1602_send_string("9.88A    396kWh");
				}
				if (timer_disp_cycle > 4000)	//4 sekunde
     a70:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <timer_disp_cycle>
     a74:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <timer_disp_cycle+0x1>
     a78:	81 3a       	cpi	r24, 0xA1	; 161
     a7a:	9f 40       	sbci	r25, 0x0F	; 15
     a7c:	28 f0       	brcs	.+10     	; 0xa88 <__stack+0x189>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = DISPL1;
     a84:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <STATE>
				}
				
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     a88:	65 e0       	ldi	r22, 0x05	; 5
     a8a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     a8e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     a92:	88 23       	and	r24, r24
     a94:	09 f4       	brne	.+2      	; 0xa98 <__stack+0x199>
     a96:	c3 c4       	rjmp	.+2438   	; 0x141e <__stack+0xb1f>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
     aa4:	bc c4       	rjmp	.+2424   	; 0x141e <__stack+0xb1f>
					
		break;
		
		case MENU1:
					//lcd1602_clear();
					pom = kursor;
     aa6:	c0 91 c8 01 	lds	r28, 0x01C8	; 0x8001c8 <kursor>
     aaa:	0c 2e       	mov	r0, r28
     aac:	00 0c       	add	r0, r0
     aae:	dd 0b       	sbc	r29, r29
					
					lcd1602_goto_xy(0, 0);
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(">");	//fiksno, a djiram text za menije vertikalno
     ab8:	8f e3       	ldi	r24, 0x3F	; 63
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_goto_xy(0,1);
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(" ");	//prazno polje ispod ">"
     ac8:	88 e1       	ldi	r24, 0x18	; 24
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>

					lcd1602_goto_xy(1,0);
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(menu1_txt[kursor]);
     ad8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     adc:	21 e1       	ldi	r18, 0x11	; 17
     ade:	82 02       	muls	r24, r18
     ae0:	c0 01       	movw	r24, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	81 58       	subi	r24, 0x81	; 129
     ae6:	9e 4f       	sbci	r25, 0xFE	; 254
     ae8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					if (kursor == KURSOR_JEDNOKRAT)			//jednokrat na prvoj liniji
     aec:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     af0:	81 11       	cpse	r24, r1
     af2:	15 c0       	rjmp	.+42     	; 0xb1e <__stack+0x21f>
					{
						if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     af4:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <jednok_on_off>
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	49 f4       	brne	.+18     	; 0xb0e <__stack+0x20f>
						{
							lcd1602_goto_xy(12,0);
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	8c e0       	ldi	r24, 0x0C	; 12
     b00:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
							lcd1602_send_string("<ON>");
     b04:	87 e3       	ldi	r24, 0x37	; 55
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
     b0c:	08 c0       	rjmp	.+16     	; 0xb1e <__stack+0x21f>
						}
						else					//ako je off ispisi <OF> pored JEDNOKRATNO
						{
							lcd1602_goto_xy(12,0);
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	8c e0       	ldi	r24, 0x0C	; 12
     b12:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
							lcd1602_send_string("<OF>");
     b16:	8c e3       	ldi	r24, 0x3C	; 60
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						}
					}
					
					lcd1602_goto_xy(1,1);
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					pom = (pom==KURSOR_MENU1_MAX) ? -1 : pom;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
     b26:	c2 30       	cpi	r28, 0x02	; 2
     b28:	d1 05       	cpc	r29, r1
     b2a:	09 f4       	brne	.+2      	; 0xb2e <__stack+0x22f>
     b2c:	73 c4       	rjmp	.+2278   	; 0x1414 <__stack+0xb15>
					lcd1602_send_string(menu1_txt[pom + 1]);
     b2e:	9e 01       	movw	r18, r28
     b30:	2f 5f       	subi	r18, 0xFF	; 255
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	41 e1       	ldi	r20, 0x11	; 17
     b36:	42 9f       	mul	r20, r18
     b38:	c0 01       	movw	r24, r0
     b3a:	43 9f       	mul	r20, r19
     b3c:	90 0d       	add	r25, r0
     b3e:	11 24       	eor	r1, r1
     b40:	81 58       	subi	r24, 0x81	; 129
     b42:	9e 4f       	sbci	r25, 0xFE	; 254
     b44:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					if ( (pom+1) == KURSOR_JEDNOKRAT)			//jednokrat na drugoj liniji, sa wrap-around-om
     b48:	21 96       	adiw	r28, 0x01	; 1
     b4a:	a9 f4       	brne	.+42     	; 0xb76 <__stack+0x277>
					{
						if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     b4c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <jednok_on_off>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	49 f4       	brne	.+18     	; 0xb66 <__stack+0x267>
						{
							lcd1602_goto_xy(12,1);
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	8c e0       	ldi	r24, 0x0C	; 12
     b58:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
							lcd1602_send_string("<ON>");
     b5c:	87 e3       	ldi	r24, 0x37	; 55
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <__stack+0x277>
						}
						else					//ako je off ispisi <OF> pored JEDNOKRATNO
						{
							lcd1602_goto_xy(12,1);
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	8c e0       	ldi	r24, 0x0C	; 12
     b6a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
							lcd1602_send_string("<OF>");
     b6e:	8c e3       	ldi	r24, 0x3C	; 60
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						}
					}

		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     b76:	63 e0       	ldi	r22, 0x03	; 3
     b78:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     b7c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     b80:	88 23       	and	r24, r24
     b82:	59 f0       	breq	.+22     	; 0xb9a <__stack+0x29b>
					{
						kursor++;
     b84:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     b88:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor > KURSOR_MENU1_MAX)
     b8a:	83 30       	cpi	r24, 0x03	; 3
     b8c:	1c f4       	brge	.+6      	; 0xb94 <__stack+0x295>
					}

		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor++;
     b8e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
     b92:	45 c4       	rjmp	.+2186   	; 0x141e <__stack+0xb1f>
						if(kursor > KURSOR_MENU1_MAX)
						kursor = 0;
     b94:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
     b98:	42 c4       	rjmp	.+2180   	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     b9a:	62 e0       	ldi	r22, 0x02	; 2
     b9c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     ba0:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     ba4:	88 23       	and	r24, r24
     ba6:	59 f0       	breq	.+22     	; 0xbbe <__stack+0x2bf>
					{
						kursor--;
     ba8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     bac:	81 50       	subi	r24, 0x01	; 1
						if(kursor < 0)		//min je 0, logicno
     bae:	1a f0       	brmi	.+6      	; 0xbb6 <__stack+0x2b7>
						if(kursor > KURSOR_MENU1_MAX)
						kursor = 0;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor--;
     bb0:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
     bb4:	34 c4       	rjmp	.+2152   	; 0x141e <__stack+0xb1f>
						if(kursor < 0)		//min je 0, logicno
						kursor = KURSOR_MENU1_MAX;
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
     bbc:	30 c4       	rjmp	.+2144   	; 0x141e <__stack+0xb1f>
					}
					else if(kursor == KURSOR_PODSAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     bbe:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	69 f4       	brne	.+26     	; 0xbe0 <__stack+0x2e1>
     bc6:	65 e0       	ldi	r22, 0x05	; 5
     bc8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     bcc:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     bd0:	88 23       	and	r24, r24
     bd2:	31 f0       	breq	.+12     	; 0xbe0 <__stack+0x2e1>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     bd4:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
						STATE = POD_SAT;	//meni za podesavanje sata
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
     bde:	1f c4       	rjmp	.+2110   	; 0x141e <__stack+0xb1f>
					}
					else if(kursor == KURSOR_PODONOF && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     be0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	69 f4       	brne	.+26     	; 0xc02 <__stack+0x303>
     be8:	65 e0       	ldi	r22, 0x05	; 5
     bea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     bee:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     bf2:	88 23       	and	r24, r24
     bf4:	31 f0       	breq	.+12     	; 0xc02 <__stack+0x303>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     bf6:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
     c00:	0e c4       	rjmp	.+2076   	; 0x141e <__stack+0xb1f>
					}
					else if(kursor == KURSOR_JEDNOKRAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     c02:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     c06:	81 11       	cpse	r24, r1
     c08:	27 c0       	rjmp	.+78     	; 0xc58 <__stack+0x359>
     c0a:	65 e0       	ldi	r22, 0x05	; 5
     c0c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c10:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     c14:	88 23       	and	r24, r24
     c16:	31 f0       	breq	.+12     	; 0xc24 <__stack+0x325>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     c18:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
						STATE = JEDNOKRATNO;	//sub_meni za podesavanje on ili off vremena jednokratno
     c1c:	85 e0       	ldi	r24, 0x05	; 5
     c1e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
     c22:	fd c3       	rjmp	.+2042   	; 0x141e <__stack+0xb1f>
					}
					else if( kursor == KURSOR_JEDNOKRAT && ( ocitaj_jedan_taster(tasteri, TASTER_LEVO) ||  ocitaj_jedan_taster(tasteri, TASTER_DESNO) ) ) //levo ili desno kad je na JEDNOKRATNO da togluje on/of
     c24:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     c28:	81 11       	cpse	r24, r1
     c2a:	16 c0       	rjmp	.+44     	; 0xc58 <__stack+0x359>
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c32:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     c36:	81 11       	cpse	r24, r1
     c38:	07 c0       	rjmp	.+14     	; 0xc48 <__stack+0x349>
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c40:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     c44:	88 23       	and	r24, r24
     c46:	41 f0       	breq	.+16     	; 0xc58 <__stack+0x359>
					{
						jednok_on_off = !jednok_on_off;	//toggle
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <jednok_on_off>
     c4e:	91 11       	cpse	r25, r1
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <jednok_on_off>
     c56:	e3 c3       	rjmp	.+1990   	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     c58:	64 e0       	ldi	r22, 0x04	; 4
     c5a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c5e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     c62:	88 23       	and	r24, r24
     c64:	09 f4       	brne	.+2      	; 0xc68 <__stack+0x369>
     c66:	db c3       	rjmp	.+1974   	; 0x141e <__stack+0xb1f>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     c68:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     c6c:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <STATE>
     c70:	d6 c3       	rjmp	.+1964   	; 0x141e <__stack+0xb1f>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (flag_pod_vremena)
     c72:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag_pod_vremena>
     c76:	88 23       	and	r24, r24
     c78:	09 f4       	brne	.+2      	; 0xc7c <__stack+0x37d>
     c7a:	4b c0       	rjmp	.+150    	; 0xd12 <__stack+0x413>
					{
						flag_pod_vremena = 0;
     c7c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag_pod_vremena>
						snap_shot_vremena = vreme_datum;
     c80:	89 e0       	ldi	r24, 0x09	; 9
     c82:	ef e2       	ldi	r30, 0x2F	; 47
     c84:	f2 e0       	ldi	r31, 0x02	; 2
     c86:	ae ee       	ldi	r26, 0xEE	; 238
     c88:	b1 e0       	ldi	r27, 0x01	; 1
     c8a:	01 90       	ld	r0, Z+
     c8c:	0d 92       	st	X+, r0
     c8e:	8a 95       	dec	r24
     c90:	e1 f7       	brne	.-8      	; 0xc8a <__stack+0x38b>
						sprintf(bafer, "%02d:%02d:%02d", snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s);
     c92:	ee ee       	ldi	r30, 0xEE	; 238
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	80 81       	ld	r24, Z
     c98:	1f 92       	push	r1
     c9a:	8f 93       	push	r24
     c9c:	81 81       	ldd	r24, Z+1	; 0x01
     c9e:	1f 92       	push	r1
     ca0:	8f 93       	push	r24
     ca2:	82 81       	ldd	r24, Z+2	; 0x02
     ca4:	1f 92       	push	r1
     ca6:	8f 93       	push	r24
     ca8:	86 e0       	ldi	r24, 0x06	; 6
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	9f 93       	push	r25
     cae:	8f 93       	push	r24
     cb0:	87 ef       	ldi	r24, 0xF7	; 247
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	9f 93       	push	r25
     cb6:	8f 93       	push	r24
     cb8:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
			
						kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     cbc:	85 e0       	ldi	r24, 0x05	; 5
     cbe:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
			
						lcd1602_goto_xy(0,0);
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("PODESAVANJE SATA");
     cca:	81 e4       	ldi	r24, 0x41	; 65
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
			
						lcd1602_goto_xy(0,1);
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("    ");
     cda:	85 e1       	ldi	r24, 0x15	; 21
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     ce2:	87 ef       	ldi	r24, 0xF7	; 247
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string("    ");
     cea:	85 e1       	ldi	r24, 0x15	; 21
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
			
						lcd1602_goto_xy(kursor,1);
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     cf8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
     d02:	8d b7       	in	r24, 0x3d	; 61
     d04:	9e b7       	in	r25, 0x3e	; 62
     d06:	0a 96       	adiw	r24, 0x0a	; 10
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	9e bf       	out	0x3e, r25	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	8d bf       	out	0x3d, r24	; 61
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     d18:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     d1c:	88 23       	and	r24, r24
     d1e:	89 f0       	breq	.+34     	; 0xd42 <__stack+0x443>
					{
						kursor += 3;
     d20:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     d24:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 11)
     d26:	8c 30       	cpi	r24, 0x0C	; 12
     d28:	1c f4       	brge	.+6      	; 0xd30 <__stack+0x431>
						lcd1602_cursor_blink(1);
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     d2a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <__stack+0x437>
						if(kursor > 11)
							kursor = 11;
     d30:	8b e0       	ldi	r24, 0x0B	; 11
     d32:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
						lcd1602_goto_xy(kursor,1);
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     d3c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     d40:	6e c3       	rjmp	.+1756   	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     d48:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     d4c:	88 23       	and	r24, r24
     d4e:	89 f0       	breq	.+34     	; 0xd72 <__stack+0x473>
					{
						kursor -= 3;
     d50:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     d54:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 5)
     d56:	85 30       	cpi	r24, 0x05	; 5
     d58:	1c f0       	brlt	.+6      	; 0xd60 <__stack+0x461>
							kursor = 11;
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     d5a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
     d5e:	03 c0       	rjmp	.+6      	; 0xd66 <__stack+0x467>
						if(kursor < 5)
							kursor = 5;
     d60:	85 e0       	ldi	r24, 0x05	; 5
     d62:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
						lcd1602_goto_xy(kursor,1);
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     d6c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     d70:	56 c3       	rjmp	.+1708   	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     d72:	62 e0       	ldi	r22, 0x02	; 2
     d74:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     d78:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     d7c:	88 23       	and	r24, r24
     d7e:	39 f1       	breq	.+78     	; 0xdce <__stack+0x4cf>
					{
						if (kursor == 5)												//podesava SATE ++
     d80:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     d84:	85 30       	cpi	r24, 0x05	; 5
     d86:	51 f4       	brne	.+20     	; 0xd9c <__stack+0x49d>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UVECAJ);
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	48 ec       	ldi	r20, 0xC8	; 200
     d8c:	51 e0       	ldi	r21, 0x01	; 1
     d8e:	67 ef       	ldi	r22, 0xF7	; 247
     d90:	71 e0       	ldi	r23, 0x01	; 1
     d92:	80 ef       	ldi	r24, 0xF0	; 240
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
     d9a:	41 c3       	rjmp	.+1666   	; 0x141e <__stack+0xb1f>
						else if (kursor == 8)											//podesava MINUTE ++
     d9c:	88 30       	cpi	r24, 0x08	; 8
     d9e:	51 f4       	brne	.+20     	; 0xdb4 <__stack+0x4b5>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UVECAJ);
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	48 ec       	ldi	r20, 0xC8	; 200
     da4:	51 e0       	ldi	r21, 0x01	; 1
     da6:	67 ef       	ldi	r22, 0xF7	; 247
     da8:	71 e0       	ldi	r23, 0x01	; 1
     daa:	8f ee       	ldi	r24, 0xEF	; 239
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
     db2:	35 c3       	rjmp	.+1642   	; 0x141e <__stack+0xb1f>
						else if (kursor == 11)											//podesava SEKUNDE ++
     db4:	8b 30       	cpi	r24, 0x0B	; 11
     db6:	09 f0       	breq	.+2      	; 0xdba <__stack+0x4bb>
     db8:	32 c3       	rjmp	.+1636   	; 0x141e <__stack+0xb1f>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UVECAJ);
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	48 ec       	ldi	r20, 0xC8	; 200
     dbe:	51 e0       	ldi	r21, 0x01	; 1
     dc0:	67 ef       	ldi	r22, 0xF7	; 247
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	8e ee       	ldi	r24, 0xEE	; 238
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	0e 94 b6 02 	call	0x56c	; 0x56c <sekundi_ispis>
     dcc:	28 c3       	rjmp	.+1616   	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     dce:	63 e0       	ldi	r22, 0x03	; 3
     dd0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     dd4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     dd8:	88 23       	and	r24, r24
     dda:	39 f1       	breq	.+78     	; 0xe2a <__stack+0x52b>
					{
						if (kursor == 5)												//podesava SATE --
     ddc:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     de0:	85 30       	cpi	r24, 0x05	; 5
     de2:	51 f4       	brne	.+20     	; 0xdf8 <__stack+0x4f9>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UMANJI);
     de4:	21 e0       	ldi	r18, 0x01	; 1
     de6:	48 ec       	ldi	r20, 0xC8	; 200
     de8:	51 e0       	ldi	r21, 0x01	; 1
     dea:	67 ef       	ldi	r22, 0xF7	; 247
     dec:	71 e0       	ldi	r23, 0x01	; 1
     dee:	80 ef       	ldi	r24, 0xF0	; 240
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
     df6:	13 c3       	rjmp	.+1574   	; 0x141e <__stack+0xb1f>
						else if (kursor == 8)											//podesava MINUTE --
     df8:	88 30       	cpi	r24, 0x08	; 8
     dfa:	51 f4       	brne	.+20     	; 0xe10 <__stack+0x511>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UMANJI);
     dfc:	21 e0       	ldi	r18, 0x01	; 1
     dfe:	48 ec       	ldi	r20, 0xC8	; 200
     e00:	51 e0       	ldi	r21, 0x01	; 1
     e02:	67 ef       	ldi	r22, 0xF7	; 247
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	8f ee       	ldi	r24, 0xEF	; 239
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
     e0e:	07 c3       	rjmp	.+1550   	; 0x141e <__stack+0xb1f>
						else if (kursor == 11)											//podesava SEKUNDE --
     e10:	8b 30       	cpi	r24, 0x0B	; 11
     e12:	09 f0       	breq	.+2      	; 0xe16 <__stack+0x517>
     e14:	04 c3       	rjmp	.+1544   	; 0x141e <__stack+0xb1f>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UMANJI);
     e16:	21 e0       	ldi	r18, 0x01	; 1
     e18:	48 ec       	ldi	r20, 0xC8	; 200
     e1a:	51 e0       	ldi	r21, 0x01	; 1
     e1c:	67 ef       	ldi	r22, 0xF7	; 247
     e1e:	71 e0       	ldi	r23, 0x01	; 1
     e20:	8e ee       	ldi	r24, 0xEE	; 238
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 b6 02 	call	0x56c	; 0x56c <sekundi_ispis>
     e28:	fa c2       	rjmp	.+1524   	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//Potvrdi vreme koje vidis na ekranu i promeni vreme; izadji iz menija
     e2a:	65 e0       	ldi	r22, 0x05	; 5
     e2c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     e30:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     e34:	88 23       	and	r24, r24
     e36:	a9 f0       	breq	.+42     	; 0xe62 <__stack+0x563>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s, am, _24_hour_format);
     e38:	ee ee       	ldi	r30, 0xEE	; 238
     e3a:	f1 e0       	ldi	r31, 0x01	; 1
     e3c:	00 e0       	ldi	r16, 0x00	; 0
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	40 81       	ld	r20, Z
     e42:	61 81       	ldd	r22, Z+1	; 0x01
     e44:	82 81       	ldd	r24, Z+2	; 0x02
     e46:	0e 94 c2 0c 	call	0x1984	; 0x1984 <setTime>
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     e50:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
     e60:	de c2       	rjmp	.+1468   	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     e62:	64 e0       	ldi	r22, 0x04	; 4
     e64:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     e68:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     e6c:	88 23       	and	r24, r24
     e6e:	09 f4       	brne	.+2      	; 0xe72 <__stack+0x573>
     e70:	d6 c2       	rjmp	.+1452   	; 0x141e <__stack+0xb1f>
					{
						/* Vreme setujem samo ako je stisnut ENTER, ako je stisnuto NAZAD, vreme se ne dira, tj. ovde se ne dira */
								//setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     e78:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
     e88:	ca c2       	rjmp	.+1428   	; 0x141e <__stack+0xb1f>
		break;
		
		case POD_ON_OFF:																				
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
     e8a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_pod_ONOFF>
     e8e:	88 23       	and	r24, r24
     e90:	09 f4       	brne	.+2      	; 0xe94 <__stack+0x595>
     e92:	59 c0       	rjmp	.+178    	; 0xf46 <__stack+0x647>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
     e94:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_pod_ONOFF>
						
						snap_vreme_paljenja = vreme_paljenja;	
     e98:	89 e0       	ldi	r24, 0x09	; 9
     e9a:	e4 e1       	ldi	r30, 0x14	; 20
     e9c:	f2 e0       	ldi	r31, 0x02	; 2
     e9e:	ad e1       	ldi	r26, 0x1D	; 29
     ea0:	b2 e0       	ldi	r27, 0x02	; 2
     ea2:	01 90       	ld	r0, Z+
     ea4:	0d 92       	st	X+, r0
     ea6:	8a 95       	dec	r24
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <__stack+0x5a3>
						snap_vreme_gasenja = vreme_gasenja;
     eaa:	89 e0       	ldi	r24, 0x09	; 9
     eac:	e6 e2       	ldi	r30, 0x26	; 38
     eae:	f2 e0       	ldi	r31, 0x02	; 2
     eb0:	ab e0       	ldi	r26, 0x0B	; 11
     eb2:	b2 e0       	ldi	r27, 0x02	; 2
     eb4:	01 90       	ld	r0, Z+
     eb6:	0d 92       	st	X+, r0
     eb8:	8a 95       	dec	r24
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <__stack+0x5b5>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
						
						lcd1602_goto_xy(0,0);
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("  UPALI--UGASI  ");
     eca:	82 e5       	ldi	r24, 0x52	; 82
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     ed2:	eb e0       	ldi	r30, 0x0B	; 11
     ed4:	f2 e0       	ldi	r31, 0x02	; 2
     ed6:	81 81       	ldd	r24, Z+1	; 0x01
     ed8:	1f 92       	push	r1
     eda:	8f 93       	push	r24
     edc:	82 81       	ldd	r24, Z+2	; 0x02
     ede:	1f 92       	push	r1
     ee0:	8f 93       	push	r24
     ee2:	ed e1       	ldi	r30, 0x1D	; 29
     ee4:	f2 e0       	ldi	r31, 0x02	; 2
     ee6:	81 81       	ldd	r24, Z+1	; 0x01
     ee8:	1f 92       	push	r1
     eea:	8f 93       	push	r24
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	1f 92       	push	r1
     ef0:	8f 93       	push	r24
     ef2:	8a e1       	ldi	r24, 0x1A	; 26
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	87 ef       	ldi	r24, 0xF7	; 247
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	9f 93       	push	r25
     f00:	8f 93       	push	r24
     f02:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
						
						lcd1602_goto_xy(0,1);
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("  ");
     f0e:	87 e1       	ldi	r24, 0x17	; 23
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     f16:	87 ef       	ldi	r24, 0xF7	; 247
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string("  ");
     f1e:	87 e1       	ldi	r24, 0x17	; 23
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     f2c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
     f36:	8d b7       	in	r24, 0x3d	; 61
     f38:	9e b7       	in	r25, 0x3e	; 62
     f3a:	0c 96       	adiw	r24, 0x0c	; 12
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	9e bf       	out	0x3e, r25	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     f4c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     f50:	88 23       	and	r24, r24
     f52:	c9 f0       	breq	.+50     	; 0xf86 <__stack+0x687>
					{
						kursor += 3;
     f54:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
     f58:	9c ef       	ldi	r25, 0xFC	; 252
     f5a:	98 0f       	add	r25, r24
     f5c:	93 30       	cpi	r25, 0x03	; 3
     f5e:	20 f4       	brcc	.+8      	; 0xf68 <__stack+0x669>
							kursor = 10;
     f60:	8a e0       	ldi	r24, 0x0A	; 10
     f62:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <__stack+0x67b>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     f68:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
     f6a:	8e 30       	cpi	r24, 0x0E	; 14
     f6c:	1c f4       	brge	.+6      	; 0xf74 <__stack+0x675>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     f6e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <__stack+0x67b>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
							kursor = 13;
     f74:	8d e0       	ldi	r24, 0x0D	; 13
     f76:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     f80:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     f84:	4c c2       	rjmp	.+1176   	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     f8c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     f90:	88 23       	and	r24, r24
     f92:	c9 f0       	breq	.+50     	; 0xfc6 <__stack+0x6c7>
					{
						kursor -= 3;
     f94:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
     f98:	96 ef       	ldi	r25, 0xF6	; 246
     f9a:	98 0f       	add	r25, r24
     f9c:	93 30       	cpi	r25, 0x03	; 3
     f9e:	20 f4       	brcc	.+8      	; 0xfa8 <__stack+0x6a9>
							kursor = 6;
     fa0:	86 e0       	ldi	r24, 0x06	; 6
     fa2:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <__stack+0x6bb>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     fa8:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	1c f0       	brlt	.+6      	; 0xfb4 <__stack+0x6b5>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     fae:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <__stack+0x6bb>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
							kursor = 3;
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     fc0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     fc4:	2c c2       	rjmp	.+1112   	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     fc6:	62 e0       	ldi	r22, 0x02	; 2
     fc8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     fcc:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
     fd0:	88 23       	and	r24, r24
     fd2:	99 f1       	breq	.+102    	; 0x103a <__stack+0x73b>
					{
						if (kursor == 3)												//podesava SATE_ON ++
     fd4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	51 f4       	brne	.+20     	; 0xff0 <__stack+0x6f1>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	48 ec       	ldi	r20, 0xC8	; 200
     fe0:	51 e0       	ldi	r21, 0x01	; 1
     fe2:	67 ef       	ldi	r22, 0xF7	; 247
     fe4:	71 e0       	ldi	r23, 0x01	; 1
     fe6:	8f e1       	ldi	r24, 0x1F	; 31
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
     fee:	17 c2       	rjmp	.+1070   	; 0x141e <__stack+0xb1f>
						else if (kursor == 6)											//podesava MINUTE_ON ++
     ff0:	86 30       	cpi	r24, 0x06	; 6
     ff2:	51 f4       	brne	.+20     	; 0x1008 <__stack+0x709>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	48 ec       	ldi	r20, 0xC8	; 200
     ff8:	51 e0       	ldi	r21, 0x01	; 1
     ffa:	67 ef       	ldi	r22, 0xF7	; 247
     ffc:	71 e0       	ldi	r23, 0x01	; 1
     ffe:	8e e1       	ldi	r24, 0x1E	; 30
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    1006:	0b c2       	rjmp	.+1046   	; 0x141e <__stack+0xb1f>
						else if (kursor == 10)											//podesava SATE_OFF ++
    1008:	8a 30       	cpi	r24, 0x0A	; 10
    100a:	51 f4       	brne	.+20     	; 0x1020 <__stack+0x721>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	48 ec       	ldi	r20, 0xC8	; 200
    1010:	51 e0       	ldi	r21, 0x01	; 1
    1012:	67 ef       	ldi	r22, 0xF7	; 247
    1014:	71 e0       	ldi	r23, 0x01	; 1
    1016:	8d e0       	ldi	r24, 0x0D	; 13
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    101e:	ff c1       	rjmp	.+1022   	; 0x141e <__stack+0xb1f>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
    1020:	8d 30       	cpi	r24, 0x0D	; 13
    1022:	09 f0       	breq	.+2      	; 0x1026 <__stack+0x727>
    1024:	fc c1       	rjmp	.+1016   	; 0x141e <__stack+0xb1f>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	48 ec       	ldi	r20, 0xC8	; 200
    102a:	51 e0       	ldi	r21, 0x01	; 1
    102c:	67 ef       	ldi	r22, 0xF7	; 247
    102e:	71 e0       	ldi	r23, 0x01	; 1
    1030:	8c e0       	ldi	r24, 0x0C	; 12
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    1038:	f2 c1       	rjmp	.+996    	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    103a:	63 e0       	ldi	r22, 0x03	; 3
    103c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    1040:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
    1044:	88 23       	and	r24, r24
    1046:	99 f1       	breq	.+102    	; 0x10ae <__stack+0x7af>
					{
						if (kursor == 3)												//podesava SATE_ON --
    1048:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	51 f4       	brne	.+20     	; 0x1064 <__stack+0x765>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	48 ec       	ldi	r20, 0xC8	; 200
    1054:	51 e0       	ldi	r21, 0x01	; 1
    1056:	67 ef       	ldi	r22, 0xF7	; 247
    1058:	71 e0       	ldi	r23, 0x01	; 1
    105a:	8f e1       	ldi	r24, 0x1F	; 31
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    1062:	dd c1       	rjmp	.+954    	; 0x141e <__stack+0xb1f>
						else if (kursor == 6)											//podesava MINUTE_ON --
    1064:	86 30       	cpi	r24, 0x06	; 6
    1066:	51 f4       	brne	.+20     	; 0x107c <__stack+0x77d>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
    1068:	21 e0       	ldi	r18, 0x01	; 1
    106a:	48 ec       	ldi	r20, 0xC8	; 200
    106c:	51 e0       	ldi	r21, 0x01	; 1
    106e:	67 ef       	ldi	r22, 0xF7	; 247
    1070:	71 e0       	ldi	r23, 0x01	; 1
    1072:	8e e1       	ldi	r24, 0x1E	; 30
    1074:	92 e0       	ldi	r25, 0x02	; 2
    1076:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    107a:	d1 c1       	rjmp	.+930    	; 0x141e <__stack+0xb1f>
						else if (kursor == 10)											//podesava SATE_OFF --
    107c:	8a 30       	cpi	r24, 0x0A	; 10
    107e:	51 f4       	brne	.+20     	; 0x1094 <__stack+0x795>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	48 ec       	ldi	r20, 0xC8	; 200
    1084:	51 e0       	ldi	r21, 0x01	; 1
    1086:	67 ef       	ldi	r22, 0xF7	; 247
    1088:	71 e0       	ldi	r23, 0x01	; 1
    108a:	8d e0       	ldi	r24, 0x0D	; 13
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    1092:	c5 c1       	rjmp	.+906    	; 0x141e <__stack+0xb1f>
						else if (kursor == 13)											//podesava MINUTE_OFF --
    1094:	8d 30       	cpi	r24, 0x0D	; 13
    1096:	09 f0       	breq	.+2      	; 0x109a <__stack+0x79b>
    1098:	c2 c1       	rjmp	.+900    	; 0x141e <__stack+0xb1f>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
    109a:	21 e0       	ldi	r18, 0x01	; 1
    109c:	48 ec       	ldi	r20, 0xC8	; 200
    109e:	51 e0       	ldi	r21, 0x01	; 1
    10a0:	67 ef       	ldi	r22, 0xF7	; 247
    10a2:	71 e0       	ldi	r23, 0x01	; 1
    10a4:	8c e0       	ldi	r24, 0x0C	; 12
    10a6:	92 e0       	ldi	r25, 0x02	; 2
    10a8:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    10ac:	b8 c1       	rjmp	.+880    	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    10ae:	65 e0       	ldi	r22, 0x05	; 5
    10b0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    10b4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
    10b8:	88 23       	and	r24, r24
    10ba:	b1 f1       	breq	.+108    	; 0x1128 <__stack+0x829>
					{
						vreme_paljenja = snap_vreme_paljenja;	//konacno upisem
    10bc:	89 e0       	ldi	r24, 0x09	; 9
    10be:	ed e1       	ldi	r30, 0x1D	; 29
    10c0:	f2 e0       	ldi	r31, 0x02	; 2
    10c2:	a4 e1       	ldi	r26, 0x14	; 20
    10c4:	b2 e0       	ldi	r27, 0x02	; 2
    10c6:	01 90       	ld	r0, Z+
    10c8:	0d 92       	st	X+, r0
    10ca:	8a 95       	dec	r24
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <__stack+0x7c7>
						vreme_gasenja = snap_vreme_gasenja;
    10ce:	89 e0       	ldi	r24, 0x09	; 9
    10d0:	eb e0       	ldi	r30, 0x0B	; 11
    10d2:	f2 e0       	ldi	r31, 0x02	; 2
    10d4:	a6 e2       	ldi	r26, 0x26	; 38
    10d6:	b2 e0       	ldi	r27, 0x02	; 2
    10d8:	01 90       	ld	r0, Z+
    10da:	0d 92       	st	X+, r0
    10dc:	8a 95       	dec	r24
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <__stack+0x7d9>
						
						/* upis u eeprom */
						EEPROM_write(UPALI_HR_ADR, vreme_paljenja.hr);
    10e0:	c4 e1       	ldi	r28, 0x14	; 20
    10e2:	d2 e0       	ldi	r29, 0x02	; 2
    10e4:	6a 81       	ldd	r22, Y+2	; 0x02
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(UPALI_MIN_ADR, vreme_paljenja.min);
    10ee:	69 81       	ldd	r22, Y+1	; 0x01
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(UGASI_HR_ADR, vreme_gasenja.hr);
    10f8:	c6 e2       	ldi	r28, 0x26	; 38
    10fa:	d2 e0       	ldi	r29, 0x02	; 2
    10fc:	6a 81       	ldd	r22, Y+2	; 0x02
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(UGASI_MIN_ADR, vreme_gasenja.min);
    1106:	69 81       	ldd	r22, Y+1	; 0x01
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    1116:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
    1126:	7b c1       	rjmp	.+758    	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1128:	64 e0       	ldi	r22, 0x04	; 4
    112a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    112e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
    1132:	88 23       	and	r24, r24
    1134:	09 f4       	brne	.+2      	; 0x1138 <__stack+0x839>
    1136:	73 c1       	rjmp	.+742    	; 0x141e <__stack+0xb1f>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    113e:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
    114e:	67 c1       	rjmp	.+718    	; 0x141e <__stack+0xb1f>
		case JEDNOKRATNO:
					//da opali samo jednom, bez obzira na glavni period
					/* prakticno kopija POD-ON-OFF samo se u drugu promenljivu belezi, cak pozajmljujem i iste tmp promenljive */
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
    1150:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_pod_ONOFF>
    1154:	88 23       	and	r24, r24
    1156:	09 f4       	brne	.+2      	; 0x115a <__stack+0x85b>
    1158:	59 c0       	rjmp	.+178    	; 0x120c <__stack+0x90d>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
    115a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_pod_ONOFF>
						
						snap_vreme_paljenja = jednokratno_paljenje;
    115e:	89 e0       	ldi	r24, 0x09	; 9
    1160:	e5 ee       	ldi	r30, 0xE5	; 229
    1162:	f1 e0       	ldi	r31, 0x01	; 1
    1164:	ad e1       	ldi	r26, 0x1D	; 29
    1166:	b2 e0       	ldi	r27, 0x02	; 2
    1168:	01 90       	ld	r0, Z+
    116a:	0d 92       	st	X+, r0
    116c:	8a 95       	dec	r24
    116e:	e1 f7       	brne	.-8      	; 0x1168 <__stack+0x869>
						snap_vreme_gasenja = jednokratno_gasenje;
    1170:	89 e0       	ldi	r24, 0x09	; 9
    1172:	ec ed       	ldi	r30, 0xDC	; 220
    1174:	f1 e0       	ldi	r31, 0x01	; 1
    1176:	ab e0       	ldi	r26, 0x0B	; 11
    1178:	b2 e0       	ldi	r27, 0x02	; 2
    117a:	01 90       	ld	r0, Z+
    117c:	0d 92       	st	X+, r0
    117e:	8a 95       	dec	r24
    1180:	e1 f7       	brne	.-8      	; 0x117a <__stack+0x87b>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
						
						lcd1602_goto_xy(0,0);
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("  JEDNOKRATNO:  ");
    1190:	83 e6       	ldi	r24, 0x63	; 99
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
    1198:	eb e0       	ldi	r30, 0x0B	; 11
    119a:	f2 e0       	ldi	r31, 0x02	; 2
    119c:	81 81       	ldd	r24, Z+1	; 0x01
    119e:	1f 92       	push	r1
    11a0:	8f 93       	push	r24
    11a2:	82 81       	ldd	r24, Z+2	; 0x02
    11a4:	1f 92       	push	r1
    11a6:	8f 93       	push	r24
    11a8:	ed e1       	ldi	r30, 0x1D	; 29
    11aa:	f2 e0       	ldi	r31, 0x02	; 2
    11ac:	81 81       	ldd	r24, Z+1	; 0x01
    11ae:	1f 92       	push	r1
    11b0:	8f 93       	push	r24
    11b2:	82 81       	ldd	r24, Z+2	; 0x02
    11b4:	1f 92       	push	r1
    11b6:	8f 93       	push	r24
    11b8:	8a e1       	ldi	r24, 0x1A	; 26
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	87 ef       	ldi	r24, 0xF7	; 247
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	9f 93       	push	r25
    11c6:	8f 93       	push	r24
    11c8:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
						
						lcd1602_goto_xy(0,1);
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("  ");
    11d4:	87 e1       	ldi	r24, 0x17	; 23
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string(bafer);
    11dc:	87 ef       	ldi	r24, 0xF7	; 247
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string("  ");
    11e4:	87 e1       	ldi	r24, 0x17	; 23
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
    11f2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
    11fc:	8d b7       	in	r24, 0x3d	; 61
    11fe:	9e b7       	in	r25, 0x3e	; 62
    1200:	0c 96       	adiw	r24, 0x0c	; 12
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	9e bf       	out	0x3e, r25	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    1212:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
    1216:	88 23       	and	r24, r24
    1218:	c9 f0       	breq	.+50     	; 0x124c <__stack+0x94d>
					{
						kursor += 3;
    121a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
    121e:	9c ef       	ldi	r25, 0xFC	; 252
    1220:	98 0f       	add	r25, r24
    1222:	93 30       	cpi	r25, 0x03	; 3
    1224:	20 f4       	brcc	.+8      	; 0x122e <__stack+0x92f>
						kursor = 10;
    1226:	8a e0       	ldi	r24, 0x0A	; 10
    1228:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <__stack+0x941>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
    122e:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 10;
						else if (kursor > 13)
    1230:	8e 30       	cpi	r24, 0x0E	; 14
    1232:	1c f4       	brge	.+6      	; 0x123a <__stack+0x93b>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
    1234:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <__stack+0x941>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 10;
						else if (kursor > 13)
						kursor = 13;
    123a:	8d e0       	ldi	r24, 0x0D	; 13
    123c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
						
						lcd1602_goto_xy(kursor,1);
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
    1246:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
    124a:	e9 c0       	rjmp	.+466    	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    1252:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
    1256:	88 23       	and	r24, r24
    1258:	c9 f0       	breq	.+50     	; 0x128c <__stack+0x98d>
					{
						kursor -= 3;
    125a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
    125e:	96 ef       	ldi	r25, 0xF6	; 246
    1260:	98 0f       	add	r25, r24
    1262:	93 30       	cpi	r25, 0x03	; 3
    1264:	20 f4       	brcc	.+8      	; 0x126e <__stack+0x96f>
						kursor = 6;
    1266:	86 e0       	ldi	r24, 0x06	; 6
    1268:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <__stack+0x981>
						
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
    126e:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 6;
						else if(kursor < 3)
    1270:	83 30       	cpi	r24, 0x03	; 3
    1272:	1c f0       	brlt	.+6      	; 0x127a <__stack+0x97b>
						
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
    1274:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <__stack+0x981>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 6;
						else if(kursor < 3)
						kursor = 3;
    127a:	83 e0       	ldi	r24, 0x03	; 3
    127c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <kursor>
						
						lcd1602_goto_xy(kursor,1);
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
    1286:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
    128a:	c9 c0       	rjmp	.+402    	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
    128c:	62 e0       	ldi	r22, 0x02	; 2
    128e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    1292:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
    1296:	88 23       	and	r24, r24
    1298:	99 f1       	breq	.+102    	; 0x1300 <__stack+0xa01>
					{
						if (kursor == 3)												//podesava SATE_ON ++
    129a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	51 f4       	brne	.+20     	; 0x12b6 <__stack+0x9b7>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	48 ec       	ldi	r20, 0xC8	; 200
    12a6:	51 e0       	ldi	r21, 0x01	; 1
    12a8:	67 ef       	ldi	r22, 0xF7	; 247
    12aa:	71 e0       	ldi	r23, 0x01	; 1
    12ac:	8f e1       	ldi	r24, 0x1F	; 31
    12ae:	92 e0       	ldi	r25, 0x02	; 2
    12b0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    12b4:	b4 c0       	rjmp	.+360    	; 0x141e <__stack+0xb1f>
						else if (kursor == 6)											//podesava MINUTE_ON ++
    12b6:	86 30       	cpi	r24, 0x06	; 6
    12b8:	51 f4       	brne	.+20     	; 0x12ce <__stack+0x9cf>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	48 ec       	ldi	r20, 0xC8	; 200
    12be:	51 e0       	ldi	r21, 0x01	; 1
    12c0:	67 ef       	ldi	r22, 0xF7	; 247
    12c2:	71 e0       	ldi	r23, 0x01	; 1
    12c4:	8e e1       	ldi	r24, 0x1E	; 30
    12c6:	92 e0       	ldi	r25, 0x02	; 2
    12c8:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    12cc:	a8 c0       	rjmp	.+336    	; 0x141e <__stack+0xb1f>
						else if (kursor == 10)											//podesava SATE_OFF ++
    12ce:	8a 30       	cpi	r24, 0x0A	; 10
    12d0:	51 f4       	brne	.+20     	; 0x12e6 <__stack+0x9e7>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	48 ec       	ldi	r20, 0xC8	; 200
    12d6:	51 e0       	ldi	r21, 0x01	; 1
    12d8:	67 ef       	ldi	r22, 0xF7	; 247
    12da:	71 e0       	ldi	r23, 0x01	; 1
    12dc:	8d e0       	ldi	r24, 0x0D	; 13
    12de:	92 e0       	ldi	r25, 0x02	; 2
    12e0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    12e4:	9c c0       	rjmp	.+312    	; 0x141e <__stack+0xb1f>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
    12e6:	8d 30       	cpi	r24, 0x0D	; 13
    12e8:	09 f0       	breq	.+2      	; 0x12ec <__stack+0x9ed>
    12ea:	99 c0       	rjmp	.+306    	; 0x141e <__stack+0xb1f>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	48 ec       	ldi	r20, 0xC8	; 200
    12f0:	51 e0       	ldi	r21, 0x01	; 1
    12f2:	67 ef       	ldi	r22, 0xF7	; 247
    12f4:	71 e0       	ldi	r23, 0x01	; 1
    12f6:	8c e0       	ldi	r24, 0x0C	; 12
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    12fe:	8f c0       	rjmp	.+286    	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    1300:	63 e0       	ldi	r22, 0x03	; 3
    1302:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    1306:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
    130a:	88 23       	and	r24, r24
    130c:	99 f1       	breq	.+102    	; 0x1374 <__stack+0xa75>
					{
						if (kursor == 3)												//podesava SATE_ON --
    130e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <kursor>
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	51 f4       	brne	.+20     	; 0x132a <__stack+0xa2b>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	48 ec       	ldi	r20, 0xC8	; 200
    131a:	51 e0       	ldi	r21, 0x01	; 1
    131c:	67 ef       	ldi	r22, 0xF7	; 247
    131e:	71 e0       	ldi	r23, 0x01	; 1
    1320:	8f e1       	ldi	r24, 0x1F	; 31
    1322:	92 e0       	ldi	r25, 0x02	; 2
    1324:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    1328:	7a c0       	rjmp	.+244    	; 0x141e <__stack+0xb1f>
						else if (kursor == 6)											//podesava MINUTE_ON --
    132a:	86 30       	cpi	r24, 0x06	; 6
    132c:	51 f4       	brne	.+20     	; 0x1342 <__stack+0xa43>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
    132e:	21 e0       	ldi	r18, 0x01	; 1
    1330:	48 ec       	ldi	r20, 0xC8	; 200
    1332:	51 e0       	ldi	r21, 0x01	; 1
    1334:	67 ef       	ldi	r22, 0xF7	; 247
    1336:	71 e0       	ldi	r23, 0x01	; 1
    1338:	8e e1       	ldi	r24, 0x1E	; 30
    133a:	92 e0       	ldi	r25, 0x02	; 2
    133c:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    1340:	6e c0       	rjmp	.+220    	; 0x141e <__stack+0xb1f>
						else if (kursor == 10)											//podesava SATE_OFF --
    1342:	8a 30       	cpi	r24, 0x0A	; 10
    1344:	51 f4       	brne	.+20     	; 0x135a <__stack+0xa5b>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	48 ec       	ldi	r20, 0xC8	; 200
    134a:	51 e0       	ldi	r21, 0x01	; 1
    134c:	67 ef       	ldi	r22, 0xF7	; 247
    134e:	71 e0       	ldi	r23, 0x01	; 1
    1350:	8d e0       	ldi	r24, 0x0D	; 13
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    1358:	62 c0       	rjmp	.+196    	; 0x141e <__stack+0xb1f>
						else if (kursor == 13)											//podesava MINUTE_OFF --
    135a:	8d 30       	cpi	r24, 0x0D	; 13
    135c:	09 f0       	breq	.+2      	; 0x1360 <__stack+0xa61>
    135e:	5f c0       	rjmp	.+190    	; 0x141e <__stack+0xb1f>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
    1360:	21 e0       	ldi	r18, 0x01	; 1
    1362:	48 ec       	ldi	r20, 0xC8	; 200
    1364:	51 e0       	ldi	r21, 0x01	; 1
    1366:	67 ef       	ldi	r22, 0xF7	; 247
    1368:	71 e0       	ldi	r23, 0x01	; 1
    136a:	8c e0       	ldi	r24, 0x0C	; 12
    136c:	92 e0       	ldi	r25, 0x02	; 2
    136e:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    1372:	55 c0       	rjmp	.+170    	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    1374:	65 e0       	ldi	r22, 0x05	; 5
    1376:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    137a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
    137e:	88 23       	and	r24, r24
    1380:	b1 f1       	breq	.+108    	; 0x13ee <__stack+0xaef>
					{
						jednokratno_paljenje = snap_vreme_paljenja;	//konacno upisem
    1382:	89 e0       	ldi	r24, 0x09	; 9
    1384:	ed e1       	ldi	r30, 0x1D	; 29
    1386:	f2 e0       	ldi	r31, 0x02	; 2
    1388:	a5 ee       	ldi	r26, 0xE5	; 229
    138a:	b1 e0       	ldi	r27, 0x01	; 1
    138c:	01 90       	ld	r0, Z+
    138e:	0d 92       	st	X+, r0
    1390:	8a 95       	dec	r24
    1392:	e1 f7       	brne	.-8      	; 0x138c <__stack+0xa8d>
						jednokratno_gasenje = snap_vreme_gasenja;
    1394:	89 e0       	ldi	r24, 0x09	; 9
    1396:	eb e0       	ldi	r30, 0x0B	; 11
    1398:	f2 e0       	ldi	r31, 0x02	; 2
    139a:	ac ed       	ldi	r26, 0xDC	; 220
    139c:	b1 e0       	ldi	r27, 0x01	; 1
    139e:	01 90       	ld	r0, Z+
    13a0:	0d 92       	st	X+, r0
    13a2:	8a 95       	dec	r24
    13a4:	e1 f7       	brne	.-8      	; 0x139e <__stack+0xa9f>
						
						/* upis u eeprom */
						EEPROM_write(JEDNOK_UPALI_HR_ADR, jednokratno_paljenje.hr);
    13a6:	c5 ee       	ldi	r28, 0xE5	; 229
    13a8:	d1 e0       	ldi	r29, 0x01	; 1
    13aa:	6a 81       	ldd	r22, Y+2	; 0x02
    13ac:	84 e0       	ldi	r24, 0x04	; 4
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(JEDNOK_UPALI_MIN_ADR, jednokratno_paljenje.min);
    13b4:	69 81       	ldd	r22, Y+1	; 0x01
    13b6:	85 e0       	ldi	r24, 0x05	; 5
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_HR_ADR, jednokratno_gasenje.hr);
    13be:	cc ed       	ldi	r28, 0xDC	; 220
    13c0:	d1 e0       	ldi	r29, 0x01	; 1
    13c2:	6a 81       	ldd	r22, Y+2	; 0x02
    13c4:	86 e0       	ldi	r24, 0x06	; 6
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_MIN_ADR, jednokratno_gasenje.min);
    13cc:	69 81       	ldd	r22, Y+1	; 0x01
    13ce:	87 e0       	ldi	r24, 0x07	; 7
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    13dc:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
    13ec:	18 c0       	rjmp	.+48     	; 0x141e <__stack+0xb1f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    13ee:	64 e0       	ldi	r22, 0x04	; 4
    13f0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    13f4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <ocitaj_jedan_taster>
    13f8:	88 23       	and	r24, r24
    13fa:	89 f0       	breq	.+34     	; 0x141e <__stack+0xb1f>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    1402:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <STATE>
		break;
		
		default: {}
		
	}
    1412:	05 c0       	rjmp	.+10     	; 0x141e <__stack+0xb1f>
						}
					}
					
					lcd1602_goto_xy(1,1);
					pom = (pom==KURSOR_MENU1_MAX) ? -1 : pom;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
					lcd1602_send_string(menu1_txt[pom + 1]);
    1414:	8f e7       	ldi	r24, 0x7F	; 127
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
    141c:	97 cb       	rjmp	.-2258   	; 0xb4c <__stack+0x24d>
		break;
		
		default: {}
		
	}
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	08 95       	ret

00001428 <main>:
{
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			
    1428:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup na SDA i SCL, PC4-PC5 
    142c:	0e 94 98 01 	call	0x330	; 0x330 <i2c_init>
	lcd1602_init();
    1430:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd1602_init>
	ADC_init();				
    1434:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda; 500k
    1438:	60 e2       	ldi	r22, 0x20	; 32
    143a:	71 ea       	ldi	r23, 0xA1	; 161
    143c:	87 e0       	ldi	r24, 0x07	; 7
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <uart_init>
	DS3231_init();			//RTC init
    1444:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
    1448:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <pc_init>
	tasteri_init();			//NAPOMENA: PD2-7 INPUT, INT_PULLUP=ON
    144c:	0e 94 93 0b 	call	0x1726	; 0x1726 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
    1450:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;		//pinB 4 OUTPUT 
    1452:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
    1454:	78 94       	sei
	//EEPROM_write(UPALI_MIN_ADR, 25);
	//EEPROM_write(UGASI_HR_ADR, 5);
	//EEPROM_write(UGASI_MIN_ADR, 45);
	
	/* citanje on-off vremena iz eeproma pri inicijalizaciji */
	vreme_paljenja.hr = EEPROM_read(UPALI_HR_ADR);
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    145e:	c4 e1       	ldi	r28, 0x14	; 20
    1460:	d2 e0       	ldi	r29, 0x02	; 2
    1462:	8a 83       	std	Y+2, r24	; 0x02
	vreme_paljenja.min = EEPROM_read(UPALI_MIN_ADR);
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    146c:	89 83       	std	Y+1, r24	; 0x01
	vreme_gasenja.hr = EEPROM_read(UGASI_HR_ADR);
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    1476:	c6 e2       	ldi	r28, 0x26	; 38
    1478:	d2 e0       	ldi	r29, 0x02	; 2
    147a:	8a 83       	std	Y+2, r24	; 0x02
	vreme_gasenja.min = EEPROM_read(UGASI_MIN_ADR);
    147c:	83 e0       	ldi	r24, 0x03	; 3
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    1484:	89 83       	std	Y+1, r24	; 0x01
	
	jednokratno_paljenje.hr = EEPROM_read(JEDNOK_UPALI_HR_ADR);
    1486:	84 e0       	ldi	r24, 0x04	; 4
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    148e:	c5 ee       	ldi	r28, 0xE5	; 229
    1490:	d1 e0       	ldi	r29, 0x01	; 1
    1492:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_paljenje.min = EEPROM_read(JEDNOK_UPALI_MIN_ADR);
    1494:	85 e0       	ldi	r24, 0x05	; 5
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    149c:	89 83       	std	Y+1, r24	; 0x01
	jednokratno_gasenje.hr = EEPROM_read(JEDNOK_UGASI_HR_ADR);
    149e:	86 e0       	ldi	r24, 0x06	; 6
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    14a6:	cc ed       	ldi	r28, 0xDC	; 220
    14a8:	d1 e0       	ldi	r29, 0x01	; 1
    14aa:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_gasenje.min = EEPROM_read(JEDNOK_UGASI_MIN_ADR);
    14ac:	87 e0       	ldi	r24, 0x07	; 7
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    14b4:	89 83       	std	Y+1, r24	; 0x01
	
	snap_vreme_paljenja = vreme_paljenja;
    14b6:	89 e0       	ldi	r24, 0x09	; 9
    14b8:	e4 e1       	ldi	r30, 0x14	; 20
    14ba:	f2 e0       	ldi	r31, 0x02	; 2
    14bc:	ad e1       	ldi	r26, 0x1D	; 29
    14be:	b2 e0       	ldi	r27, 0x02	; 2
    14c0:	01 90       	ld	r0, Z+
    14c2:	0d 92       	st	X+, r0
    14c4:	8a 95       	dec	r24
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <main+0x98>
	snap_vreme_gasenja = vreme_gasenja;
    14c8:	89 e0       	ldi	r24, 0x09	; 9
    14ca:	e6 e2       	ldi	r30, 0x26	; 38
    14cc:	f2 e0       	ldi	r31, 0x02	; 2
    14ce:	ab e0       	ldi	r26, 0x0B	; 11
    14d0:	b2 e0       	ldi	r27, 0x02	; 2
    14d2:	01 90       	ld	r0, Z+
    14d4:	0d 92       	st	X+, r0
    14d6:	8a 95       	dec	r24
    14d8:	e1 f7       	brne	.-8      	; 0x14d2 <main+0xaa>
		
		/* ocitava napon i struju */
		adc_read();			
		
		
		sprintf(bafer, "%4d  ", adc_napon_raw);
    14da:	0f 2e       	mov	r0, r31
    14dc:	f4 e7       	ldi	r31, 0x74	; 116
    14de:	ef 2e       	mov	r14, r31
    14e0:	f1 e0       	ldi	r31, 0x01	; 1
    14e2:	ff 2e       	mov	r15, r31
    14e4:	f0 2d       	mov	r31, r0
    14e6:	c7 ef       	ldi	r28, 0xF7	; 247
    14e8:	d1 e0       	ldi	r29, 0x01	; 1
		uart_send_str("  ");
		dtostrf(energija, 5, 1, bafer);
		uart_send_str(bafer);
		uart_send_str("\n");
		
		sprintf(bafer, "%d", DS3231_Read(ageoffsetREG));	//citam registar za kalibraciju u RTC 
    14ea:	0f 2e       	mov	r0, r31
    14ec:	fc e7       	ldi	r31, 0x7C	; 124
    14ee:	cf 2e       	mov	r12, r31
    14f0:	f1 e0       	ldi	r31, 0x01	; 1
    14f2:	df 2e       	mov	r13, r31
    14f4:	f0 2d       	mov	r31, r0
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    14f6:	bb 24       	eor	r11, r11
    14f8:	b3 94       	inc	r11
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
    14fa:	0e 94 a0 0b 	call	0x1740	; 0x1740 <ocitaj_tastere>
    14fe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasteri>
		
		/* ocitava napon i struju */
		adc_read();			
    1502:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <adc_read>
		
		
		sprintf(bafer, "%4d  ", adc_napon_raw);
    1506:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <adc_napon_raw+0x1>
    150a:	8f 93       	push	r24
    150c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <adc_napon_raw>
    1510:	8f 93       	push	r24
    1512:	ff 92       	push	r15
    1514:	ef 92       	push	r14
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
		uart_send_str(bafer);
    151e:	ce 01       	movw	r24, r28
    1520:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		sprintf(bafer, "%4d  ", adc_struja_raw);
    1524:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <adc_struja_raw+0x1>
    1528:	8f 93       	push	r24
    152a:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <adc_struja_raw>
    152e:	8f 93       	push	r24
    1530:	ff 92       	push	r15
    1532:	ef 92       	push	r14
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
		uart_send_str(bafer);
    153c:	ce 01       	movw	r24, r28
    153e:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		
		sprintf(bafer, "%4d  ", napon);
    1542:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <napon+0x1>
    1546:	8f 93       	push	r24
    1548:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <napon>
    154c:	8f 93       	push	r24
    154e:	ff 92       	push	r15
    1550:	ef 92       	push	r14
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
		uart_send_str(bafer);
    155a:	ce 01       	movw	r24, r28
    155c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		dtostrf(struja, 4, 1, bafer);
    1560:	60 91 bc 01 	lds	r22, 0x01BC	; 0x8001bc <struja>
    1564:	70 91 bd 01 	lds	r23, 0x01BD	; 0x8001bd <struja+0x1>
    1568:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <struja+0x2>
    156c:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <struja+0x3>
    1570:	8e 01       	movw	r16, r28
    1572:	21 e0       	ldi	r18, 0x01	; 1
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	44 e0       	ldi	r20, 0x04	; 4
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	0e 94 28 10 	call	0x2050	; 0x2050 <dtostrf>
		uart_send_str(bafer);
    157e:	ce 01       	movw	r24, r28
    1580:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		uart_send_str("  ");
    1584:	87 e1       	ldi	r24, 0x17	; 23
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		dtostrf(snaga, 4, 1, bafer);
    158c:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <snaga>
    1590:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <snaga+0x1>
    1594:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <snaga+0x2>
    1598:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <snaga+0x3>
    159c:	21 e0       	ldi	r18, 0x01	; 1
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	44 e0       	ldi	r20, 0x04	; 4
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	0e 94 28 10 	call	0x2050	; 0x2050 <dtostrf>
		uart_send_str(bafer);
    15a8:	ce 01       	movw	r24, r28
    15aa:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		uart_send_str("  ");
    15ae:	87 e1       	ldi	r24, 0x17	; 23
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		dtostrf(energija, 5, 1, bafer);
    15b6:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <energija>
    15ba:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <energija+0x1>
    15be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <energija+0x2>
    15c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <energija+0x3>
    15c6:	21 e0       	ldi	r18, 0x01	; 1
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	45 e0       	ldi	r20, 0x05	; 5
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	0e 94 28 10 	call	0x2050	; 0x2050 <dtostrf>
		uart_send_str(bafer);
    15d2:	ce 01       	movw	r24, r28
    15d4:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		uart_send_str("\n");
    15d8:	8a e7       	ldi	r24, 0x7A	; 122
    15da:	91 e0       	ldi	r25, 0x01	; 1
    15dc:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		
		sprintf(bafer, "%d", DS3231_Read(ageoffsetREG));	//citam registar za kalibraciju u RTC 
    15e0:	80 e1       	ldi	r24, 0x10	; 16
    15e2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <DS3231_Read>
    15e6:	1f 92       	push	r1
    15e8:	8f 93       	push	r24
    15ea:	df 92       	push	r13
    15ec:	cf 92       	push	r12
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	0e 94 48 10 	call	0x2090	; 0x2090 <sprintf>
		uart_send_str(bafer);
    15f6:	ce 01       	movw	r24, r28
    15f8:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		uart_send_str("\n");
    15fc:	8a e7       	ldi	r24, 0x7A	; 122
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <uart_send_str>
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
    1604:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <flag_pc_int_pomocni>
    1608:	2d b7       	in	r18, 0x3d	; 61
    160a:	3e b7       	in	r19, 0x3e	; 62
    160c:	28 5e       	subi	r18, 0xE8	; 232
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	3e bf       	out	0x3e, r19	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	2d bf       	out	0x3d, r18	; 61
    161a:	88 23       	and	r24, r24
    161c:	09 f4       	brne	.+2      	; 0x1620 <main+0x1f8>
    161e:	61 c0       	rjmp	.+194    	; 0x16e2 <main+0x2ba>
		{
			flag_pc_int_pomocni = 0;
    1620:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
    1624:	00 e0       	ldi	r16, 0x00	; 0
    1626:	27 e3       	ldi	r18, 0x37	; 55
    1628:	32 e0       	ldi	r19, 0x02	; 2
    162a:	4f e2       	ldi	r20, 0x2F	; 47
    162c:	52 e0       	ldi	r21, 0x02	; 2
    162e:	60 e3       	ldi	r22, 0x30	; 48
    1630:	72 e0       	ldi	r23, 0x02	; 2
    1632:	81 e3       	ldi	r24, 0x31	; 49
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	0e 94 84 0c 	call	0x1908	; 0x1908 <getTime>
			
			/* integraljenje(sumiranje) snage je enerija. E = P * t     */
			energija += (snaga/3600.0);		//posto merim u kWh, a ovo ide na 1 sekund, a sat ima 3600s
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	41 e6       	ldi	r20, 0x61	; 97
    1640:	55 e4       	ldi	r21, 0x45	; 69
    1642:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <snaga>
    1646:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <snaga+0x1>
    164a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <snaga+0x2>
    164e:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <snaga+0x3>
    1652:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divsf3>
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <energija>
    165e:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <energija+0x1>
    1662:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <energija+0x2>
    1666:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <energija+0x3>
    166a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__addsf3>
    166e:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <energija>
    1672:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <energija+0x1>
    1676:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <energija+0x2>
    167a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <energija+0x3>
			//uart_send_str(bafer);
			//uart_send_str("\n"); //novi red
		
			
			/* JEDNOKRATNI PERIOD PALJENJA */						
			if (jednok_on_off==1)
    167e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <jednok_on_off>
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	d1 f4       	brne	.+52     	; 0x16ba <main+0x292>
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
    1686:	4f e2       	ldi	r20, 0x2F	; 47
    1688:	52 e0       	ldi	r21, 0x02	; 2
    168a:	6c ed       	ldi	r22, 0xDC	; 220
    168c:	71 e0       	ldi	r23, 0x01	; 1
    168e:	85 ee       	ldi	r24, 0xE5	; 229
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	0e 94 06 04 	call	0x80c	; 0x80c <period_paljenja>
    1696:	88 23       	and	r24, r24
    1698:	29 f0       	breq	.+10     	; 0x16a4 <main+0x27c>
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    169a:	b0 92 ca 01 	sts	0x01CA, r11	; 0x8001ca <ukljuceno>
					jednok_se_desio = 1;
    169e:	b0 92 c6 01 	sts	0x01C6, r11	; 0x8001c6 <jednok_se_desio>
    16a2:	0d c0       	rjmp	.+26     	; 0x16be <main+0x296>
				}
				else if(jednok_se_desio)												//jednok. setovan, ALI ISTEKAO
    16a4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <jednok_se_desio>
    16a8:	88 23       	and	r24, r24
    16aa:	49 f0       	breq	.+18     	; 0x16be <main+0x296>
				{																		//proverava se tek kad period paljenja vraca 0, tj kada gornji IF nije ispunjen
					ukljuceno = 0;
    16ac:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <ukljuceno>
					jednok_on_off = 0;		//resetujem flag		
    16b0:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <jednok_on_off>
					jednok_se_desio = 0;	//resetujem i ovaj flag. Da nema ovoga Jednokratno paljenje nikada ne bi startovalo ako tek treba da se desi
    16b4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <jednok_se_desio>
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <main+0x296>
				}
			}
			else
				ukljuceno = 0;
    16ba:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <ukljuceno>
			
			/* GLAVNI PERIOD; paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno |= period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);	//ILI veza glavnog i jednok. perioda
    16be:	4f e2       	ldi	r20, 0x2F	; 47
    16c0:	52 e0       	ldi	r21, 0x02	; 2
    16c2:	66 e2       	ldi	r22, 0x26	; 38
    16c4:	72 e0       	ldi	r23, 0x02	; 2
    16c6:	84 e1       	ldi	r24, 0x14	; 20
    16c8:	92 e0       	ldi	r25, 0x02	; 2
    16ca:	0e 94 06 04 	call	0x80c	; 0x80c <period_paljenja>
    16ce:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <ukljuceno>
    16d2:	89 2b       	or	r24, r25
    16d4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <ukljuceno>
			
			if (ukljuceno)
    16d8:	88 23       	and	r24, r24
    16da:	11 f0       	breq	.+4      	; 0x16e0 <main+0x2b8>
				PORTB |= 1<<PINB5;   //high
    16dc:	2d 9a       	sbi	0x05, 5	; 5
    16de:	01 c0       	rjmp	.+2      	; 0x16e2 <main+0x2ba>
			else
				PORTB &= ~(1<<PINB5);	//low
    16e0:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
    16e2:	0e 94 42 04 	call	0x884	; 0x884 <fsm_lcd_menu>
		

    }
    16e6:	09 cf       	rjmp	.-494    	; 0x14fa <main+0xd2>

000016e8 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
    16e8:	e8 e6       	ldi	r30, 0x68	; 104
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	82 60       	ori	r24, 0x02	; 2
    16f0:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
    16f2:	ec e6       	ldi	r30, 0x6C	; 108
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 60       	ori	r24, 0x08	; 8
    16fa:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
    16fc:	3b 98       	cbi	0x07, 3	; 7
    16fe:	08 95       	ret

00001700 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
    1700:	1f 92       	push	r1
    1702:	0f 92       	push	r0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
    170c:	33 9b       	sbis	0x06, 3	; 6
    170e:	05 c0       	rjmp	.+10     	; 0x171a <__vector_4+0x1a>
	{
		flag_pc_int = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <flag_pc_int>
		flag_pc_int_pomocni = 1;
    1716:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <flag_pc_int_pomocni>
	}
		
    171a:	8f 91       	pop	r24
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	0f 90       	pop	r0
    1722:	1f 90       	pop	r1
    1724:	18 95       	reti

00001726 <tasteri_init>:
extern const char *byte_to_binary(int x);

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
    1726:	8a b1       	in	r24, 0x0a	; 10
    1728:	8f 70       	andi	r24, 0x0F	; 15
    172a:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
    172c:	84 b1       	in	r24, 0x04	; 4
    172e:	8c 7f       	andi	r24, 0xFC	; 252
    1730:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
    1732:	8b b1       	in	r24, 0x0b	; 11
    1734:	80 6f       	ori	r24, 0xF0	; 240
    1736:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
    1738:	85 b1       	in	r24, 0x05	; 5
    173a:	83 60       	ori	r24, 0x03	; 3
    173c:	85 b9       	out	0x05, r24	; 5
    173e:	08 95       	ret

00001740 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
    1740:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_prekid_debounce_time_half>
    1744:	88 23       	and	r24, r24
    1746:	69 f0       	breq	.+26     	; 0x1762 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
    1748:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
    174c:	93 b1       	in	r25, 0x03	; 3
    174e:	29 b1       	in	r18, 0x09	; 9
    1750:	30 e1       	ldi	r19, 0x10	; 16
    1752:	93 9f       	mul	r25, r19
    1754:	c0 01       	movw	r24, r0
    1756:	11 24       	eor	r1, r1
    1758:	92 2f       	mov	r25, r18
    175a:	92 95       	swap	r25
    175c:	9f 70       	andi	r25, 0x0F	; 15
    175e:	89 2b       	or	r24, r25
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
    1762:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
    1764:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <flag_prekid_debounce_time>
    1768:	99 23       	and	r25, r25
    176a:	81 f0       	breq	.+32     	; 0x178c <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
    176c:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
    1770:	93 b1       	in	r25, 0x03	; 3
    1772:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
    1774:	50 e1       	ldi	r21, 0x10	; 16
    1776:	95 9f       	mul	r25, r21
    1778:	90 01       	movw	r18, r0
    177a:	11 24       	eor	r1, r1
    177c:	94 2f       	mov	r25, r20
    177e:	92 95       	swap	r25
    1780:	9f 70       	andi	r25, 0x0F	; 15
    1782:	29 2b       	or	r18, r25
    1784:	82 13       	cpse	r24, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
    1788:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tasteri_reg.2112>
		
	}
	
	return tasteri_reg;
}
    178c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tasteri_reg.2112>
    1790:	08 95       	ret

00001792 <ocitaj_jedan_taster>:
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	static uint8_t delay_enable = 1;
	uint8_t pom;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	20 95       	com	r18
    1798:	30 95       	com	r19
    179a:	e6 2f       	mov	r30, r22
    179c:	a9 01       	movw	r20, r18
    179e:	06 2e       	mov	r0, r22
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <ocitaj_jedan_taster+0x14>
    17a2:	55 95       	asr	r21
    17a4:	47 95       	ror	r20
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <ocitaj_jedan_taster+0x10>
    17aa:	40 ff       	sbrs	r20, 0
    17ac:	17 c0       	rjmp	.+46     	; 0x17dc <ocitaj_jedan_taster+0x4a>
    17ae:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <flag_stisnut.2121>
    17b2:	91 11       	cpse	r25, r1
    17b4:	13 c0       	rjmp	.+38     	; 0x17dc <ocitaj_jedan_taster+0x4a>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <flag_stisnut.2121>
		temp_tast = button;		//zapamtim koji je taster stisnut
    17bc:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <temp_tast.2120>
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    17c0:	80 95       	com	r24
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	06 2e       	mov	r0, r22
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <ocitaj_jedan_taster+0x3c>
    17ca:	44 0f       	add	r20, r20
    17cc:	55 1f       	adc	r21, r21
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <ocitaj_jedan_taster+0x38>
    17d2:	84 23       	and	r24, r20
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <ocitaj_jedan_taster+0x46>
    17d6:	45 c0       	rjmp	.+138    	; 0x1862 <ocitaj_jedan_taster+0xd0>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	08 95       	ret
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
    17dc:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <temp_tast.2120>
    17e0:	e9 2f       	mov	r30, r25
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    17e2:	80 95       	com	r24
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	09 2e       	mov	r0, r25
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <ocitaj_jedan_taster+0x5e>
    17ec:	44 0f       	add	r20, r20
    17ee:	55 1f       	adc	r21, r21
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <ocitaj_jedan_taster+0x5a>
    17f4:	84 23       	and	r24, r20
    17f6:	19 f1       	breq	.+70     	; 0x183e <ocitaj_jedan_taster+0xac>
    17f8:	8e ef       	ldi	r24, 0xFE	; 254
    17fa:	89 0f       	add	r24, r25
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	08 f5       	brcc	.+66     	; 0x1842 <ocitaj_jedan_taster+0xb0>
    1800:	69 13       	cpse	r22, r25
    1802:	21 c0       	rjmp	.+66     	; 0x1846 <ocitaj_jedan_taster+0xb4>
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	01 c0       	rjmp	.+2      	; 0x180a <ocitaj_jedan_taster+0x78>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
		   ovo radim da bi bilo moguce brze menjati sate ako je taster ostao stisnut, da ne bi morao 30 puta stiskati i pustati taster */
		//startuj "delay" tajmer, ali samo prvi put
		//ako je delay istekao periodicno togluj promenljivu "stisnut", jer ce to napraviti efekat brzog stiskanja
		//kada je taster otpusten opet dozvoli startovanje "delay" tajmera
		
		if (delay_enable == 1)
    180a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <delay_enable.2122>
    180e:	91 30       	cpi	r25, 0x01	; 1
    1810:	31 f4       	brne	.+12     	; 0x181e <ocitaj_jedan_taster+0x8c>
		{
			delay_enable = 0;	//spreci ponovni ulazak
    1812:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <delay_enable.2122>
			delay_timer = 0;	//start, timer ISR ga uvecava
    1816:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <delay_timer+0x1>
    181a:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <delay_timer>
		}
		if (delay_timer >= 400)	//ako je delay veci od 400ms togluj "stisnut"
    181e:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <delay_timer>
    1822:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <delay_timer+0x1>
    1826:	20 39       	cpi	r18, 0x90	; 144
    1828:	31 40       	sbci	r19, 0x01	; 1
    182a:	00 f1       	brcs	.+64     	; 0x186c <ocitaj_jedan_taster+0xda>
		{
			if(flag_prekid_50ms)
    182c:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <flag_prekid_50ms>
    1830:	99 23       	and	r25, r25
    1832:	e1 f0       	breq	.+56     	; 0x186c <ocitaj_jedan_taster+0xda>
			{
				flag_prekid_50ms = 0; //reset flag-a
    1834:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <flag_prekid_50ms>
				stisnut ^= 0b1;	//toggle
    1838:	91 e0       	ldi	r25, 0x01	; 1
    183a:	89 27       	eor	r24, r25
    183c:	08 95       	ret
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <ocitaj_jedan_taster+0xb6>
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <ocitaj_jedan_taster+0xb6>
    1846:	80 e0       	ldi	r24, 0x00	; 0
			}
			
				
		}		
	}
	else if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
    1848:	02 c0       	rjmp	.+4      	; 0x184e <ocitaj_jedan_taster+0xbc>
    184a:	35 95       	asr	r19
    184c:	27 95       	ror	r18
    184e:	ea 95       	dec	r30
    1850:	e2 f7       	brpl	.-8      	; 0x184a <ocitaj_jedan_taster+0xb8>
    1852:	20 fd       	sbrc	r18, 0
    1854:	0b c0       	rjmp	.+22     	; 0x186c <ocitaj_jedan_taster+0xda>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
    1856:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <flag_stisnut.2121>
		delay_enable = 1;	//dozvoli ponovno startovanje "delay" tajmera ako je taster otpusten
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <delay_enable.2122>
	sprintf(buff, "flag_stis:%d  ", flag_stisnut);
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    1860:	08 95       	ret
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1862:	62 50       	subi	r22, 0x02	; 2
    1864:	62 30       	cpi	r22, 0x02	; 2
    1866:	80 f2       	brcs	.-96     	; 0x1808 <ocitaj_jedan_taster+0x76>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	ee cf       	rjmp	.-36     	; 0x1848 <ocitaj_jedan_taster+0xb6>
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    186c:	08 95       	ret

0000186e <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
    186e:	98 2f       	mov	r25, r24
    1870:	92 95       	swap	r25
    1872:	9f 70       	andi	r25, 0x0F	; 15
    1874:	99 0f       	add	r25, r25
    1876:	29 2f       	mov	r18, r25
    1878:	22 0f       	add	r18, r18
    187a:	22 0f       	add	r18, r18
    187c:	92 0f       	add	r25, r18
    187e:	8f 70       	andi	r24, 0x0F	; 15
    1880:	89 0f       	add	r24, r25
    1882:	08 95       	ret

00001884 <decimal_to_bcd>:
    1884:	9d ec       	ldi	r25, 0xCD	; 205
    1886:	89 9f       	mul	r24, r25
    1888:	91 2d       	mov	r25, r1
    188a:	11 24       	eor	r1, r1
    188c:	96 95       	lsr	r25
    188e:	96 95       	lsr	r25
    1890:	96 95       	lsr	r25
    1892:	20 e1       	ldi	r18, 0x10	; 16
    1894:	92 9f       	mul	r25, r18
    1896:	a0 01       	movw	r20, r0
    1898:	11 24       	eor	r1, r1
    189a:	99 0f       	add	r25, r25
    189c:	29 2f       	mov	r18, r25
    189e:	22 0f       	add	r18, r18
    18a0:	22 0f       	add	r18, r18
    18a2:	92 0f       	add	r25, r18
    18a4:	89 1b       	sub	r24, r25
    18a6:	8f 70       	andi	r24, 0x0F	; 15
    18a8:	84 2b       	or	r24, r20
    18aa:	08 95       	ret

000018ac <DS3231_Read>:
    18ac:	cf 93       	push	r28
    18ae:	c8 2f       	mov	r28, r24
    18b0:	80 ed       	ldi	r24, 0xD0	; 208
    18b2:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_start_wait>
    18b6:	8c 2f       	mov	r24, r28
    18b8:	0e 94 cf 01 	call	0x39e	; 0x39e <i2c_write>
    18bc:	81 ed       	ldi	r24, 0xD1	; 209
    18be:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_start_wait>
    18c2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <i2c_readNak>
    18c6:	cf 91       	pop	r28
    18c8:	08 95       	ret

000018ca <DS3231_Write>:
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	d8 2f       	mov	r29, r24
    18d0:	c6 2f       	mov	r28, r22
    18d2:	80 ed       	ldi	r24, 0xD0	; 208
    18d4:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_start_wait>
    18d8:	8d 2f       	mov	r24, r29
    18da:	0e 94 cf 01 	call	0x39e	; 0x39e <i2c_write>
    18de:	8c 2f       	mov	r24, r28
    18e0:	0e 94 cf 01 	call	0x39e	; 0x39e <i2c_write>
    18e4:	0e 94 c6 01 	call	0x38c	; 0x38c <i2c_stop>
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	08 95       	ret

000018ee <DS3231_init>:
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	8e e0       	ldi	r24, 0x0E	; 14
    18f2:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DS3231_Write>
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	8f e0       	ldi	r24, 0x0F	; 15
    18fa:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DS3231_Write>
    18fe:	68 ee       	ldi	r22, 0xE8	; 232
    1900:	80 e1       	ldi	r24, 0x10	; 16
    1902:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DS3231_Write>
    1906:	08 95       	ret

00001908 <getTime>:
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	7b 01       	movw	r14, r22
    191e:	6a 01       	movw	r12, r20
    1920:	59 01       	movw	r10, r18
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	0e 94 56 0c 	call	0x18ac	; 0x18ac <DS3231_Read>
    1928:	0e 94 37 0c 	call	0x186e	; 0x186e <bcd_to_decimal>
    192c:	f6 01       	movw	r30, r12
    192e:	80 83       	st	Z, r24
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	0e 94 56 0c 	call	0x18ac	; 0x18ac <DS3231_Read>
    1936:	0e 94 37 0c 	call	0x186e	; 0x186e <bcd_to_decimal>
    193a:	f7 01       	movw	r30, r14
    193c:	80 83       	st	Z, r24
    193e:	01 30       	cpi	r16, 0x01	; 1
    1940:	81 f4       	brne	.+32     	; 0x1962 <getTime+0x5a>
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	0e 94 56 0c 	call	0x18ac	; 0x18ac <DS3231_Read>
    1948:	85 fb       	bst	r24, 5
    194a:	88 27       	eor	r24, r24
    194c:	80 f9       	bld	r24, 0
    194e:	f5 01       	movw	r30, r10
    1950:	80 83       	st	Z, r24
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	0e 94 56 0c 	call	0x18ac	; 0x18ac <DS3231_Read>
    1958:	8f 71       	andi	r24, 0x1F	; 31
    195a:	0e 94 37 0c 	call	0x186e	; 0x186e <bcd_to_decimal>
    195e:	88 83       	st	Y, r24
    1960:	07 c0       	rjmp	.+14     	; 0x1970 <getTime+0x68>
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	0e 94 56 0c 	call	0x18ac	; 0x18ac <DS3231_Read>
    1968:	8f 73       	andi	r24, 0x3F	; 63
    196a:	0e 94 37 0c 	call	0x186e	; 0x186e <bcd_to_decimal>
    196e:	88 83       	st	Y, r24
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	0f 91       	pop	r16
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	df 90       	pop	r13
    197c:	cf 90       	pop	r12
    197e:	bf 90       	pop	r11
    1980:	af 90       	pop	r10
    1982:	08 95       	ret

00001984 <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	d8 2f       	mov	r29, r24
    198e:	c6 2f       	mov	r28, r22
    1990:	84 2f       	mov	r24, r20
    1992:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
    1994:	0e 94 42 0c 	call	0x1884	; 0x1884 <decimal_to_bcd>
    1998:	68 2f       	mov	r22, r24
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
    19a0:	8c 2f       	mov	r24, r28
    19a2:	0e 94 42 0c 	call	0x1884	; 0x1884 <decimal_to_bcd>
    19a6:	68 2f       	mov	r22, r24
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DS3231_Write>
	
	switch(hour_format)
    19ae:	01 30       	cpi	r16, 0x01	; 1
    19b0:	79 f4       	brne	.+30     	; 0x19d0 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    19b2:	11 30       	cpi	r17, 0x01	; 1
    19b4:	11 f0       	breq	.+4      	; 0x19ba <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    19b6:	c0 e4       	ldi	r28, 0x40	; 64
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    19ba:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    19bc:	8d 2f       	mov	r24, r29
    19be:	0e 94 42 0c 	call	0x1884	; 0x1884 <decimal_to_bcd>
    19c2:	8f 71       	andi	r24, 0x1F	; 31
    19c4:	68 2f       	mov	r22, r24
    19c6:	6c 2b       	or	r22, r28
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DS3231_Write>
			break;
    19ce:	08 c0       	rjmp	.+16     	; 0x19e0 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    19d0:	8d 2f       	mov	r24, r29
    19d2:	0e 94 42 0c 	call	0x1884	; 0x1884 <decimal_to_bcd>
    19d6:	68 2f       	mov	r22, r24
    19d8:	6f 73       	andi	r22, 0x3F	; 63
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DS3231_Write>
			break;
		}
	}
}
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <tajmer0_init>:
volatile uint16_t delay_timer = 0;			//koristim ga kod tastera za delay pri stisku, za brzo inkrementiranje
volatile uint16_t timer_disp_cycle = 0;		//za naizmenicno prikazivanje dva glavna ekrana na displeju

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    19ee:	93 e0       	ldi	r25, 0x03	; 3
    19f0:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    19f2:	99 ef       	ldi	r25, 0xF9	; 249
    19f4:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    19f6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    19fa:	08 95       	ret

000019fc <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    19fc:	1f 92       	push	r1
    19fe:	0f 92       	push	r0
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	0f 92       	push	r0
    1a04:	11 24       	eor	r1, r1
    1a06:	8f 93       	push	r24
    1a08:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    1a10:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <brojac_prekida_tajmera0>
    1a14:	8f 5f       	subi	r24, 0xFF	; 255
    1a16:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    1a1a:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <brojac_prekida_tajmera0_debounce_half>
    1a1e:	8f 5f       	subi	r24, 0xFF	; 255
    1a20:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    1a24:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <brojac_prekida_tajmera0_debounce>
    1a28:	8f 5f       	subi	r24, 0xFF	; 255
    1a2a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <brojac_prekida_tajmera0_debounce>
	delay_timer++;		//overflow posle 65.5 sekundi, ali koga briga ne remeti normalan rad
    1a2e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <delay_timer>
    1a32:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <delay_timer+0x1>
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <delay_timer+0x1>
    1a3c:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <delay_timer>
	timer_disp_cycle++;	//u main-u resetujem
    1a40:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <timer_disp_cycle>
    1a44:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <timer_disp_cycle+0x1>
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <timer_disp_cycle+0x1>
    1a4e:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <timer_disp_cycle>
		
	if(brojac_prekida_tajmera0 == 100)	//1ms * 50 = 50ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    1a52:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <brojac_prekida_tajmera0>
    1a56:	84 36       	cpi	r24, 0x64	; 100
    1a58:	29 f4       	brne	.+10     	; 0x1a64 <__vector_14+0x68>
	{
		brojac_prekida_tajmera0 = 0;
    1a5a:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <brojac_prekida_tajmera0>
		flag_prekid_50ms = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <flag_prekid_50ms>
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    1a64:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <brojac_prekida_tajmera0_debounce_half>
    1a68:	83 30       	cpi	r24, 0x03	; 3
    1a6a:	29 f4       	brne	.+10     	; 0x1a76 <__vector_14+0x7a>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    1a6c:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flag_prekid_debounce_time_half>
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    1a76:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <brojac_prekida_tajmera0_debounce>
    1a7a:	86 30       	cpi	r24, 0x06	; 6
    1a7c:	29 f4       	brne	.+10     	; 0x1a88 <__vector_14+0x8c>
	{
		brojac_prekida_tajmera0_debounce = 0;
    1a7e:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <flag_prekid_debounce_time>
	}
	
    1a88:	9f 91       	pop	r25
    1a8a:	8f 91       	pop	r24
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
	poslato=0;
    1aa0:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <poslato>
}
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <__vector_18>:

ISR(USART_RX_vect)
{
    1aae:	1f 92       	push	r1
    1ab0:	0f 92       	push	r0
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	0f 92       	push	r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	8f 93       	push	r24
    1aba:	ef 93       	push	r30
    1abc:	ff 93       	push	r31
	input_char=UDR0;
    1abe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1ac2:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    1ac6:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <buff_size>
    1aca:	88 30       	cpi	r24, 0x08	; 8
    1acc:	98 f4       	brcc	.+38     	; 0x1af4 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    1ace:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <buff_size>
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <input_char>
    1ad8:	e6 5c       	subi	r30, 0xC6	; 198
    1ada:	fd 4f       	sbci	r31, 0xFD	; 253
    1adc:	80 83       	st	Z, r24
		buff_size++;
    1ade:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <buff_size>
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <buff_size>
		input_buffer[buff_size]='\0';
    1ae8:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <buff_size>
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	e6 5c       	subi	r30, 0xC6	; 198
    1af0:	fd 4f       	sbci	r31, 0xFD	; 253
    1af2:	10 82       	st	Z, r1
	}
}
    1af4:	ff 91       	pop	r31
    1af6:	ef 91       	pop	r30
    1af8:	8f 91       	pop	r24
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	0f 90       	pop	r0
    1b00:	1f 90       	pop	r1
    1b02:	18 95       	reti

00001b04 <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    1b04:	22 e0       	ldi	r18, 0x02	; 2
    1b06:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    1b0a:	28 ed       	ldi	r18, 0xD8	; 216
    1b0c:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    1b10:	26 e0       	ldi	r18, 0x06	; 6
    1b12:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    1b16:	61 15       	cp	r22, r1
    1b18:	2c e2       	ldi	r18, 0x2C	; 44
    1b1a:	72 07       	cpc	r23, r18
    1b1c:	21 e0       	ldi	r18, 0x01	; 1
    1b1e:	82 07       	cpc	r24, r18
    1b20:	91 05       	cpc	r25, r1
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <uart_init+0x22>
    1b24:	51 c0       	rjmp	.+162    	; 0x1bc8 <uart_init+0xc4>
    1b26:	c8 f4       	brcc	.+50     	; 0x1b5a <uart_init+0x56>
    1b28:	60 34       	cpi	r22, 0x40	; 64
    1b2a:	28 e3       	ldi	r18, 0x38	; 56
    1b2c:	72 07       	cpc	r23, r18
    1b2e:	81 05       	cpc	r24, r1
    1b30:	91 05       	cpc	r25, r1
    1b32:	a9 f1       	breq	.+106    	; 0x1b9e <uart_init+0x9a>
    1b34:	30 f4       	brcc	.+12     	; 0x1b42 <uart_init+0x3e>
    1b36:	60 38       	cpi	r22, 0x80	; 128
    1b38:	75 42       	sbci	r23, 0x25	; 37
    1b3a:	81 05       	cpc	r24, r1
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	41 f1       	breq	.+80     	; 0x1b90 <uart_init+0x8c>
    1b40:	64 c0       	rjmp	.+200    	; 0x1c0a <uart_init+0x106>
    1b42:	61 15       	cp	r22, r1
    1b44:	2b e4       	ldi	r18, 0x4B	; 75
    1b46:	72 07       	cpc	r23, r18
    1b48:	81 05       	cpc	r24, r1
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	79 f1       	breq	.+94     	; 0x1bac <uart_init+0xa8>
    1b4e:	61 15       	cp	r22, r1
    1b50:	76 49       	sbci	r23, 0x96	; 150
    1b52:	81 05       	cpc	r24, r1
    1b54:	91 05       	cpc	r25, r1
    1b56:	89 f1       	breq	.+98     	; 0x1bba <uart_init+0xb6>
    1b58:	58 c0       	rjmp	.+176    	; 0x1c0a <uart_init+0x106>
    1b5a:	60 32       	cpi	r22, 0x20	; 32
    1b5c:	21 ea       	ldi	r18, 0xA1	; 161
    1b5e:	72 07       	cpc	r23, r18
    1b60:	27 e0       	ldi	r18, 0x07	; 7
    1b62:	82 07       	cpc	r24, r18
    1b64:	91 05       	cpc	r25, r1
    1b66:	f1 f1       	breq	.+124    	; 0x1be4 <uart_init+0xe0>
    1b68:	30 f4       	brcc	.+12     	; 0x1b76 <uart_init+0x72>
    1b6a:	60 39       	cpi	r22, 0x90	; 144
    1b6c:	70 4d       	sbci	r23, 0xD0	; 208
    1b6e:	83 40       	sbci	r24, 0x03	; 3
    1b70:	91 05       	cpc	r25, r1
    1b72:	89 f1       	breq	.+98     	; 0x1bd6 <uart_init+0xd2>
    1b74:	4a c0       	rjmp	.+148    	; 0x1c0a <uart_init+0x106>
    1b76:	60 34       	cpi	r22, 0x40	; 64
    1b78:	22 e4       	ldi	r18, 0x42	; 66
    1b7a:	72 07       	cpc	r23, r18
    1b7c:	2f e0       	ldi	r18, 0x0F	; 15
    1b7e:	82 07       	cpc	r24, r18
    1b80:	91 05       	cpc	r25, r1
    1b82:	b9 f1       	breq	.+110    	; 0x1bf2 <uart_init+0xee>
    1b84:	60 38       	cpi	r22, 0x80	; 128
    1b86:	74 48       	sbci	r23, 0x84	; 132
    1b88:	8e 41       	sbci	r24, 0x1E	; 30
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	c9 f1       	breq	.+114    	; 0x1c00 <uart_init+0xfc>
    1b8e:	3d c0       	rjmp	.+122    	; 0x1c0a <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    1b90:	8f ec       	ldi	r24, 0xCF	; 207
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1b98:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1b9c:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    1b9e:	8a e8       	ldi	r24, 0x8A	; 138
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1ba6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1baa:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    1bac:	87 e6       	ldi	r24, 0x67	; 103
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bb4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bb8:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    1bba:	83 e3       	ldi	r24, 0x33	; 51
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bc2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bc6:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    1bc8:	89 e1       	ldi	r24, 0x19	; 25
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bd0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bd4:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    1bd6:	87 e0       	ldi	r24, 0x07	; 7
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bde:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1be2:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bf0:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bfa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bfe:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    1c00:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c04:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c08:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    1c0a:	8f ec       	ldi	r24, 0xCF	; 207
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c12:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c16:	08 95       	ret

00001c18 <uart_send_str>:
	}
	
}

void uart_send_str(char *str)
{
    1c18:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1c1a:	90 81       	ld	r25, Z
    1c1c:	99 23       	and	r25, r25
    1c1e:	71 f0       	breq	.+28     	; 0x1c3c <uart_send_str+0x24>
    1c20:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1c22:	a6 ec       	ldi	r26, 0xC6	; 198
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1c26:	81 e0       	ldi	r24, 0x01	; 1
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1c28:	9c 93       	st	X, r25
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1c2a:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <poslato>
		while (poslato);	//koci dok ISR ne kaze da je gotovo
    1c2e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <poslato>
    1c32:	91 11       	cpse	r25, r1
    1c34:	fc cf       	rjmp	.-8      	; 0x1c2e <uart_send_str+0x16>

void uart_send_str(char *str)
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1c36:	91 91       	ld	r25, Z+
    1c38:	91 11       	cpse	r25, r1
    1c3a:	f6 cf       	rjmp	.-20     	; 0x1c28 <uart_send_str+0x10>
    1c3c:	08 95       	ret

00001c3e <__subsf3>:
    1c3e:	50 58       	subi	r21, 0x80	; 128

00001c40 <__addsf3>:
    1c40:	bb 27       	eor	r27, r27
    1c42:	aa 27       	eor	r26, r26
    1c44:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__addsf3x>
    1c48:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__fp_round>
    1c4c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__fp_pscA>
    1c50:	38 f0       	brcs	.+14     	; 0x1c60 <__addsf3+0x20>
    1c52:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__fp_pscB>
    1c56:	20 f0       	brcs	.+8      	; 0x1c60 <__addsf3+0x20>
    1c58:	39 f4       	brne	.+14     	; 0x1c68 <__addsf3+0x28>
    1c5a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c5c:	19 f4       	brne	.+6      	; 0x1c64 <__addsf3+0x24>
    1c5e:	26 f4       	brtc	.+8      	; 0x1c68 <__addsf3+0x28>
    1c60:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__fp_nan>
    1c64:	0e f4       	brtc	.+2      	; 0x1c68 <__addsf3+0x28>
    1c66:	e0 95       	com	r30
    1c68:	e7 fb       	bst	r30, 7
    1c6a:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__fp_inf>

00001c6e <__addsf3x>:
    1c6e:	e9 2f       	mov	r30, r25
    1c70:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__fp_split3>
    1c74:	58 f3       	brcs	.-42     	; 0x1c4c <__addsf3+0xc>
    1c76:	ba 17       	cp	r27, r26
    1c78:	62 07       	cpc	r22, r18
    1c7a:	73 07       	cpc	r23, r19
    1c7c:	84 07       	cpc	r24, r20
    1c7e:	95 07       	cpc	r25, r21
    1c80:	20 f0       	brcs	.+8      	; 0x1c8a <__addsf3x+0x1c>
    1c82:	79 f4       	brne	.+30     	; 0x1ca2 <__addsf3x+0x34>
    1c84:	a6 f5       	brtc	.+104    	; 0x1cee <__addsf3x+0x80>
    1c86:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__fp_zero>
    1c8a:	0e f4       	brtc	.+2      	; 0x1c8e <__addsf3x+0x20>
    1c8c:	e0 95       	com	r30
    1c8e:	0b 2e       	mov	r0, r27
    1c90:	ba 2f       	mov	r27, r26
    1c92:	a0 2d       	mov	r26, r0
    1c94:	0b 01       	movw	r0, r22
    1c96:	b9 01       	movw	r22, r18
    1c98:	90 01       	movw	r18, r0
    1c9a:	0c 01       	movw	r0, r24
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	a0 01       	movw	r20, r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	ff 27       	eor	r31, r31
    1ca4:	59 1b       	sub	r21, r25
    1ca6:	99 f0       	breq	.+38     	; 0x1cce <__addsf3x+0x60>
    1ca8:	59 3f       	cpi	r21, 0xF9	; 249
    1caa:	50 f4       	brcc	.+20     	; 0x1cc0 <__addsf3x+0x52>
    1cac:	50 3e       	cpi	r21, 0xE0	; 224
    1cae:	68 f1       	brcs	.+90     	; 0x1d0a <__addsf3x+0x9c>
    1cb0:	1a 16       	cp	r1, r26
    1cb2:	f0 40       	sbci	r31, 0x00	; 0
    1cb4:	a2 2f       	mov	r26, r18
    1cb6:	23 2f       	mov	r18, r19
    1cb8:	34 2f       	mov	r19, r20
    1cba:	44 27       	eor	r20, r20
    1cbc:	58 5f       	subi	r21, 0xF8	; 248
    1cbe:	f3 cf       	rjmp	.-26     	; 0x1ca6 <__addsf3x+0x38>
    1cc0:	46 95       	lsr	r20
    1cc2:	37 95       	ror	r19
    1cc4:	27 95       	ror	r18
    1cc6:	a7 95       	ror	r26
    1cc8:	f0 40       	sbci	r31, 0x00	; 0
    1cca:	53 95       	inc	r21
    1ccc:	c9 f7       	brne	.-14     	; 0x1cc0 <__addsf3x+0x52>
    1cce:	7e f4       	brtc	.+30     	; 0x1cee <__addsf3x+0x80>
    1cd0:	1f 16       	cp	r1, r31
    1cd2:	ba 0b       	sbc	r27, r26
    1cd4:	62 0b       	sbc	r22, r18
    1cd6:	73 0b       	sbc	r23, r19
    1cd8:	84 0b       	sbc	r24, r20
    1cda:	ba f0       	brmi	.+46     	; 0x1d0a <__addsf3x+0x9c>
    1cdc:	91 50       	subi	r25, 0x01	; 1
    1cde:	a1 f0       	breq	.+40     	; 0x1d08 <__addsf3x+0x9a>
    1ce0:	ff 0f       	add	r31, r31
    1ce2:	bb 1f       	adc	r27, r27
    1ce4:	66 1f       	adc	r22, r22
    1ce6:	77 1f       	adc	r23, r23
    1ce8:	88 1f       	adc	r24, r24
    1cea:	c2 f7       	brpl	.-16     	; 0x1cdc <__addsf3x+0x6e>
    1cec:	0e c0       	rjmp	.+28     	; 0x1d0a <__addsf3x+0x9c>
    1cee:	ba 0f       	add	r27, r26
    1cf0:	62 1f       	adc	r22, r18
    1cf2:	73 1f       	adc	r23, r19
    1cf4:	84 1f       	adc	r24, r20
    1cf6:	48 f4       	brcc	.+18     	; 0x1d0a <__addsf3x+0x9c>
    1cf8:	87 95       	ror	r24
    1cfa:	77 95       	ror	r23
    1cfc:	67 95       	ror	r22
    1cfe:	b7 95       	ror	r27
    1d00:	f7 95       	ror	r31
    1d02:	9e 3f       	cpi	r25, 0xFE	; 254
    1d04:	08 f0       	brcs	.+2      	; 0x1d08 <__addsf3x+0x9a>
    1d06:	b0 cf       	rjmp	.-160    	; 0x1c68 <__addsf3+0x28>
    1d08:	93 95       	inc	r25
    1d0a:	88 0f       	add	r24, r24
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <__addsf3x+0xa2>
    1d0e:	99 27       	eor	r25, r25
    1d10:	ee 0f       	add	r30, r30
    1d12:	97 95       	ror	r25
    1d14:	87 95       	ror	r24
    1d16:	08 95       	ret

00001d18 <__divsf3>:
    1d18:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__divsf3x>
    1d1c:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__fp_round>
    1d20:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__fp_pscB>
    1d24:	58 f0       	brcs	.+22     	; 0x1d3c <__divsf3+0x24>
    1d26:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__fp_pscA>
    1d2a:	40 f0       	brcs	.+16     	; 0x1d3c <__divsf3+0x24>
    1d2c:	29 f4       	brne	.+10     	; 0x1d38 <__divsf3+0x20>
    1d2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d30:	29 f0       	breq	.+10     	; 0x1d3c <__divsf3+0x24>
    1d32:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__fp_inf>
    1d36:	51 11       	cpse	r21, r1
    1d38:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__fp_szero>
    1d3c:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__fp_nan>

00001d40 <__divsf3x>:
    1d40:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__fp_split3>
    1d44:	68 f3       	brcs	.-38     	; 0x1d20 <__divsf3+0x8>

00001d46 <__divsf3_pse>:
    1d46:	99 23       	and	r25, r25
    1d48:	b1 f3       	breq	.-20     	; 0x1d36 <__divsf3+0x1e>
    1d4a:	55 23       	and	r21, r21
    1d4c:	91 f3       	breq	.-28     	; 0x1d32 <__divsf3+0x1a>
    1d4e:	95 1b       	sub	r25, r21
    1d50:	55 0b       	sbc	r21, r21
    1d52:	bb 27       	eor	r27, r27
    1d54:	aa 27       	eor	r26, r26
    1d56:	62 17       	cp	r22, r18
    1d58:	73 07       	cpc	r23, r19
    1d5a:	84 07       	cpc	r24, r20
    1d5c:	38 f0       	brcs	.+14     	; 0x1d6c <__divsf3_pse+0x26>
    1d5e:	9f 5f       	subi	r25, 0xFF	; 255
    1d60:	5f 4f       	sbci	r21, 0xFF	; 255
    1d62:	22 0f       	add	r18, r18
    1d64:	33 1f       	adc	r19, r19
    1d66:	44 1f       	adc	r20, r20
    1d68:	aa 1f       	adc	r26, r26
    1d6a:	a9 f3       	breq	.-22     	; 0x1d56 <__divsf3_pse+0x10>
    1d6c:	35 d0       	rcall	.+106    	; 0x1dd8 <__divsf3_pse+0x92>
    1d6e:	0e 2e       	mov	r0, r30
    1d70:	3a f0       	brmi	.+14     	; 0x1d80 <__divsf3_pse+0x3a>
    1d72:	e0 e8       	ldi	r30, 0x80	; 128
    1d74:	32 d0       	rcall	.+100    	; 0x1dda <__divsf3_pse+0x94>
    1d76:	91 50       	subi	r25, 0x01	; 1
    1d78:	50 40       	sbci	r21, 0x00	; 0
    1d7a:	e6 95       	lsr	r30
    1d7c:	00 1c       	adc	r0, r0
    1d7e:	ca f7       	brpl	.-14     	; 0x1d72 <__divsf3_pse+0x2c>
    1d80:	2b d0       	rcall	.+86     	; 0x1dd8 <__divsf3_pse+0x92>
    1d82:	fe 2f       	mov	r31, r30
    1d84:	29 d0       	rcall	.+82     	; 0x1dd8 <__divsf3_pse+0x92>
    1d86:	66 0f       	add	r22, r22
    1d88:	77 1f       	adc	r23, r23
    1d8a:	88 1f       	adc	r24, r24
    1d8c:	bb 1f       	adc	r27, r27
    1d8e:	26 17       	cp	r18, r22
    1d90:	37 07       	cpc	r19, r23
    1d92:	48 07       	cpc	r20, r24
    1d94:	ab 07       	cpc	r26, r27
    1d96:	b0 e8       	ldi	r27, 0x80	; 128
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <__divsf3_pse+0x56>
    1d9a:	bb 0b       	sbc	r27, r27
    1d9c:	80 2d       	mov	r24, r0
    1d9e:	bf 01       	movw	r22, r30
    1da0:	ff 27       	eor	r31, r31
    1da2:	93 58       	subi	r25, 0x83	; 131
    1da4:	5f 4f       	sbci	r21, 0xFF	; 255
    1da6:	3a f0       	brmi	.+14     	; 0x1db6 <__divsf3_pse+0x70>
    1da8:	9e 3f       	cpi	r25, 0xFE	; 254
    1daa:	51 05       	cpc	r21, r1
    1dac:	78 f0       	brcs	.+30     	; 0x1dcc <__divsf3_pse+0x86>
    1dae:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__fp_inf>
    1db2:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__fp_szero>
    1db6:	5f 3f       	cpi	r21, 0xFF	; 255
    1db8:	e4 f3       	brlt	.-8      	; 0x1db2 <__divsf3_pse+0x6c>
    1dba:	98 3e       	cpi	r25, 0xE8	; 232
    1dbc:	d4 f3       	brlt	.-12     	; 0x1db2 <__divsf3_pse+0x6c>
    1dbe:	86 95       	lsr	r24
    1dc0:	77 95       	ror	r23
    1dc2:	67 95       	ror	r22
    1dc4:	b7 95       	ror	r27
    1dc6:	f7 95       	ror	r31
    1dc8:	9f 5f       	subi	r25, 0xFF	; 255
    1dca:	c9 f7       	brne	.-14     	; 0x1dbe <__divsf3_pse+0x78>
    1dcc:	88 0f       	add	r24, r24
    1dce:	91 1d       	adc	r25, r1
    1dd0:	96 95       	lsr	r25
    1dd2:	87 95       	ror	r24
    1dd4:	97 f9       	bld	r25, 7
    1dd6:	08 95       	ret
    1dd8:	e1 e0       	ldi	r30, 0x01	; 1
    1dda:	66 0f       	add	r22, r22
    1ddc:	77 1f       	adc	r23, r23
    1dde:	88 1f       	adc	r24, r24
    1de0:	bb 1f       	adc	r27, r27
    1de2:	62 17       	cp	r22, r18
    1de4:	73 07       	cpc	r23, r19
    1de6:	84 07       	cpc	r24, r20
    1de8:	ba 07       	cpc	r27, r26
    1dea:	20 f0       	brcs	.+8      	; 0x1df4 <__divsf3_pse+0xae>
    1dec:	62 1b       	sub	r22, r18
    1dee:	73 0b       	sbc	r23, r19
    1df0:	84 0b       	sbc	r24, r20
    1df2:	ba 0b       	sbc	r27, r26
    1df4:	ee 1f       	adc	r30, r30
    1df6:	88 f7       	brcc	.-30     	; 0x1dda <__divsf3_pse+0x94>
    1df8:	e0 95       	com	r30
    1dfa:	08 95       	ret

00001dfc <__fixunssfsi>:
    1dfc:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__fp_splitA>
    1e00:	88 f0       	brcs	.+34     	; 0x1e24 <__fixunssfsi+0x28>
    1e02:	9f 57       	subi	r25, 0x7F	; 127
    1e04:	98 f0       	brcs	.+38     	; 0x1e2c <__fixunssfsi+0x30>
    1e06:	b9 2f       	mov	r27, r25
    1e08:	99 27       	eor	r25, r25
    1e0a:	b7 51       	subi	r27, 0x17	; 23
    1e0c:	b0 f0       	brcs	.+44     	; 0x1e3a <__fixunssfsi+0x3e>
    1e0e:	e1 f0       	breq	.+56     	; 0x1e48 <__fixunssfsi+0x4c>
    1e10:	66 0f       	add	r22, r22
    1e12:	77 1f       	adc	r23, r23
    1e14:	88 1f       	adc	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	1a f0       	brmi	.+6      	; 0x1e20 <__fixunssfsi+0x24>
    1e1a:	ba 95       	dec	r27
    1e1c:	c9 f7       	brne	.-14     	; 0x1e10 <__fixunssfsi+0x14>
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <__fixunssfsi+0x4c>
    1e20:	b1 30       	cpi	r27, 0x01	; 1
    1e22:	91 f0       	breq	.+36     	; 0x1e48 <__fixunssfsi+0x4c>
    1e24:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__fp_zero>
    1e28:	b1 e0       	ldi	r27, 0x01	; 1
    1e2a:	08 95       	ret
    1e2c:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__fp_zero>
    1e30:	67 2f       	mov	r22, r23
    1e32:	78 2f       	mov	r23, r24
    1e34:	88 27       	eor	r24, r24
    1e36:	b8 5f       	subi	r27, 0xF8	; 248
    1e38:	39 f0       	breq	.+14     	; 0x1e48 <__fixunssfsi+0x4c>
    1e3a:	b9 3f       	cpi	r27, 0xF9	; 249
    1e3c:	cc f3       	brlt	.-14     	; 0x1e30 <__fixunssfsi+0x34>
    1e3e:	86 95       	lsr	r24
    1e40:	77 95       	ror	r23
    1e42:	67 95       	ror	r22
    1e44:	b3 95       	inc	r27
    1e46:	d9 f7       	brne	.-10     	; 0x1e3e <__fixunssfsi+0x42>
    1e48:	3e f4       	brtc	.+14     	; 0x1e58 <__fixunssfsi+0x5c>
    1e4a:	90 95       	com	r25
    1e4c:	80 95       	com	r24
    1e4e:	70 95       	com	r23
    1e50:	61 95       	neg	r22
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	8f 4f       	sbci	r24, 0xFF	; 255
    1e56:	9f 4f       	sbci	r25, 0xFF	; 255
    1e58:	08 95       	ret

00001e5a <__floatunsisf>:
    1e5a:	e8 94       	clt
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <__floatsisf+0x12>

00001e5e <__floatsisf>:
    1e5e:	97 fb       	bst	r25, 7
    1e60:	3e f4       	brtc	.+14     	; 0x1e70 <__floatsisf+0x12>
    1e62:	90 95       	com	r25
    1e64:	80 95       	com	r24
    1e66:	70 95       	com	r23
    1e68:	61 95       	neg	r22
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	99 23       	and	r25, r25
    1e72:	a9 f0       	breq	.+42     	; 0x1e9e <__floatsisf+0x40>
    1e74:	f9 2f       	mov	r31, r25
    1e76:	96 e9       	ldi	r25, 0x96	; 150
    1e78:	bb 27       	eor	r27, r27
    1e7a:	93 95       	inc	r25
    1e7c:	f6 95       	lsr	r31
    1e7e:	87 95       	ror	r24
    1e80:	77 95       	ror	r23
    1e82:	67 95       	ror	r22
    1e84:	b7 95       	ror	r27
    1e86:	f1 11       	cpse	r31, r1
    1e88:	f8 cf       	rjmp	.-16     	; 0x1e7a <__floatsisf+0x1c>
    1e8a:	fa f4       	brpl	.+62     	; 0x1eca <__floatsisf+0x6c>
    1e8c:	bb 0f       	add	r27, r27
    1e8e:	11 f4       	brne	.+4      	; 0x1e94 <__floatsisf+0x36>
    1e90:	60 ff       	sbrs	r22, 0
    1e92:	1b c0       	rjmp	.+54     	; 0x1eca <__floatsisf+0x6c>
    1e94:	6f 5f       	subi	r22, 0xFF	; 255
    1e96:	7f 4f       	sbci	r23, 0xFF	; 255
    1e98:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9c:	16 c0       	rjmp	.+44     	; 0x1eca <__floatsisf+0x6c>
    1e9e:	88 23       	and	r24, r24
    1ea0:	11 f0       	breq	.+4      	; 0x1ea6 <__floatsisf+0x48>
    1ea2:	96 e9       	ldi	r25, 0x96	; 150
    1ea4:	11 c0       	rjmp	.+34     	; 0x1ec8 <__floatsisf+0x6a>
    1ea6:	77 23       	and	r23, r23
    1ea8:	21 f0       	breq	.+8      	; 0x1eb2 <__floatsisf+0x54>
    1eaa:	9e e8       	ldi	r25, 0x8E	; 142
    1eac:	87 2f       	mov	r24, r23
    1eae:	76 2f       	mov	r23, r22
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <__floatsisf+0x5e>
    1eb2:	66 23       	and	r22, r22
    1eb4:	71 f0       	breq	.+28     	; 0x1ed2 <__floatsisf+0x74>
    1eb6:	96 e8       	ldi	r25, 0x86	; 134
    1eb8:	86 2f       	mov	r24, r22
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	2a f0       	brmi	.+10     	; 0x1eca <__floatsisf+0x6c>
    1ec0:	9a 95       	dec	r25
    1ec2:	66 0f       	add	r22, r22
    1ec4:	77 1f       	adc	r23, r23
    1ec6:	88 1f       	adc	r24, r24
    1ec8:	da f7       	brpl	.-10     	; 0x1ec0 <__floatsisf+0x62>
    1eca:	88 0f       	add	r24, r24
    1ecc:	96 95       	lsr	r25
    1ece:	87 95       	ror	r24
    1ed0:	97 f9       	bld	r25, 7
    1ed2:	08 95       	ret

00001ed4 <__fp_inf>:
    1ed4:	97 f9       	bld	r25, 7
    1ed6:	9f 67       	ori	r25, 0x7F	; 127
    1ed8:	80 e8       	ldi	r24, 0x80	; 128
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	08 95       	ret

00001ee0 <__fp_nan>:
    1ee0:	9f ef       	ldi	r25, 0xFF	; 255
    1ee2:	80 ec       	ldi	r24, 0xC0	; 192
    1ee4:	08 95       	ret

00001ee6 <__fp_pscA>:
    1ee6:	00 24       	eor	r0, r0
    1ee8:	0a 94       	dec	r0
    1eea:	16 16       	cp	r1, r22
    1eec:	17 06       	cpc	r1, r23
    1eee:	18 06       	cpc	r1, r24
    1ef0:	09 06       	cpc	r0, r25
    1ef2:	08 95       	ret

00001ef4 <__fp_pscB>:
    1ef4:	00 24       	eor	r0, r0
    1ef6:	0a 94       	dec	r0
    1ef8:	12 16       	cp	r1, r18
    1efa:	13 06       	cpc	r1, r19
    1efc:	14 06       	cpc	r1, r20
    1efe:	05 06       	cpc	r0, r21
    1f00:	08 95       	ret

00001f02 <__fp_round>:
    1f02:	09 2e       	mov	r0, r25
    1f04:	03 94       	inc	r0
    1f06:	00 0c       	add	r0, r0
    1f08:	11 f4       	brne	.+4      	; 0x1f0e <__fp_round+0xc>
    1f0a:	88 23       	and	r24, r24
    1f0c:	52 f0       	brmi	.+20     	; 0x1f22 <__fp_round+0x20>
    1f0e:	bb 0f       	add	r27, r27
    1f10:	40 f4       	brcc	.+16     	; 0x1f22 <__fp_round+0x20>
    1f12:	bf 2b       	or	r27, r31
    1f14:	11 f4       	brne	.+4      	; 0x1f1a <__fp_round+0x18>
    1f16:	60 ff       	sbrs	r22, 0
    1f18:	04 c0       	rjmp	.+8      	; 0x1f22 <__fp_round+0x20>
    1f1a:	6f 5f       	subi	r22, 0xFF	; 255
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f20:	9f 4f       	sbci	r25, 0xFF	; 255
    1f22:	08 95       	ret

00001f24 <__fp_split3>:
    1f24:	57 fd       	sbrc	r21, 7
    1f26:	90 58       	subi	r25, 0x80	; 128
    1f28:	44 0f       	add	r20, r20
    1f2a:	55 1f       	adc	r21, r21
    1f2c:	59 f0       	breq	.+22     	; 0x1f44 <__fp_splitA+0x10>
    1f2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f30:	71 f0       	breq	.+28     	; 0x1f4e <__fp_splitA+0x1a>
    1f32:	47 95       	ror	r20

00001f34 <__fp_splitA>:
    1f34:	88 0f       	add	r24, r24
    1f36:	97 fb       	bst	r25, 7
    1f38:	99 1f       	adc	r25, r25
    1f3a:	61 f0       	breq	.+24     	; 0x1f54 <__fp_splitA+0x20>
    1f3c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f3e:	79 f0       	breq	.+30     	; 0x1f5e <__fp_splitA+0x2a>
    1f40:	87 95       	ror	r24
    1f42:	08 95       	ret
    1f44:	12 16       	cp	r1, r18
    1f46:	13 06       	cpc	r1, r19
    1f48:	14 06       	cpc	r1, r20
    1f4a:	55 1f       	adc	r21, r21
    1f4c:	f2 cf       	rjmp	.-28     	; 0x1f32 <__fp_split3+0xe>
    1f4e:	46 95       	lsr	r20
    1f50:	f1 df       	rcall	.-30     	; 0x1f34 <__fp_splitA>
    1f52:	08 c0       	rjmp	.+16     	; 0x1f64 <__fp_splitA+0x30>
    1f54:	16 16       	cp	r1, r22
    1f56:	17 06       	cpc	r1, r23
    1f58:	18 06       	cpc	r1, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	f1 cf       	rjmp	.-30     	; 0x1f40 <__fp_splitA+0xc>
    1f5e:	86 95       	lsr	r24
    1f60:	71 05       	cpc	r23, r1
    1f62:	61 05       	cpc	r22, r1
    1f64:	08 94       	sec
    1f66:	08 95       	ret

00001f68 <__fp_zero>:
    1f68:	e8 94       	clt

00001f6a <__fp_szero>:
    1f6a:	bb 27       	eor	r27, r27
    1f6c:	66 27       	eor	r22, r22
    1f6e:	77 27       	eor	r23, r23
    1f70:	cb 01       	movw	r24, r22
    1f72:	97 f9       	bld	r25, 7
    1f74:	08 95       	ret

00001f76 <__mulsf3>:
    1f76:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__mulsf3x>
    1f7a:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__fp_round>
    1f7e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__fp_pscA>
    1f82:	38 f0       	brcs	.+14     	; 0x1f92 <__mulsf3+0x1c>
    1f84:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__fp_pscB>
    1f88:	20 f0       	brcs	.+8      	; 0x1f92 <__mulsf3+0x1c>
    1f8a:	95 23       	and	r25, r21
    1f8c:	11 f0       	breq	.+4      	; 0x1f92 <__mulsf3+0x1c>
    1f8e:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__fp_inf>
    1f92:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__fp_nan>
    1f96:	11 24       	eor	r1, r1
    1f98:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__fp_szero>

00001f9c <__mulsf3x>:
    1f9c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__fp_split3>
    1fa0:	70 f3       	brcs	.-36     	; 0x1f7e <__mulsf3+0x8>

00001fa2 <__mulsf3_pse>:
    1fa2:	95 9f       	mul	r25, r21
    1fa4:	c1 f3       	breq	.-16     	; 0x1f96 <__mulsf3+0x20>
    1fa6:	95 0f       	add	r25, r21
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	55 1f       	adc	r21, r21
    1fac:	62 9f       	mul	r22, r18
    1fae:	f0 01       	movw	r30, r0
    1fb0:	72 9f       	mul	r23, r18
    1fb2:	bb 27       	eor	r27, r27
    1fb4:	f0 0d       	add	r31, r0
    1fb6:	b1 1d       	adc	r27, r1
    1fb8:	63 9f       	mul	r22, r19
    1fba:	aa 27       	eor	r26, r26
    1fbc:	f0 0d       	add	r31, r0
    1fbe:	b1 1d       	adc	r27, r1
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	64 9f       	mul	r22, r20
    1fc4:	66 27       	eor	r22, r22
    1fc6:	b0 0d       	add	r27, r0
    1fc8:	a1 1d       	adc	r26, r1
    1fca:	66 1f       	adc	r22, r22
    1fcc:	82 9f       	mul	r24, r18
    1fce:	22 27       	eor	r18, r18
    1fd0:	b0 0d       	add	r27, r0
    1fd2:	a1 1d       	adc	r26, r1
    1fd4:	62 1f       	adc	r22, r18
    1fd6:	73 9f       	mul	r23, r19
    1fd8:	b0 0d       	add	r27, r0
    1fda:	a1 1d       	adc	r26, r1
    1fdc:	62 1f       	adc	r22, r18
    1fde:	83 9f       	mul	r24, r19
    1fe0:	a0 0d       	add	r26, r0
    1fe2:	61 1d       	adc	r22, r1
    1fe4:	22 1f       	adc	r18, r18
    1fe6:	74 9f       	mul	r23, r20
    1fe8:	33 27       	eor	r19, r19
    1fea:	a0 0d       	add	r26, r0
    1fec:	61 1d       	adc	r22, r1
    1fee:	23 1f       	adc	r18, r19
    1ff0:	84 9f       	mul	r24, r20
    1ff2:	60 0d       	add	r22, r0
    1ff4:	21 1d       	adc	r18, r1
    1ff6:	82 2f       	mov	r24, r18
    1ff8:	76 2f       	mov	r23, r22
    1ffa:	6a 2f       	mov	r22, r26
    1ffc:	11 24       	eor	r1, r1
    1ffe:	9f 57       	subi	r25, 0x7F	; 127
    2000:	50 40       	sbci	r21, 0x00	; 0
    2002:	9a f0       	brmi	.+38     	; 0x202a <__mulsf3_pse+0x88>
    2004:	f1 f0       	breq	.+60     	; 0x2042 <__mulsf3_pse+0xa0>
    2006:	88 23       	and	r24, r24
    2008:	4a f0       	brmi	.+18     	; 0x201c <__mulsf3_pse+0x7a>
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	bb 1f       	adc	r27, r27
    2010:	66 1f       	adc	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	88 1f       	adc	r24, r24
    2016:	91 50       	subi	r25, 0x01	; 1
    2018:	50 40       	sbci	r21, 0x00	; 0
    201a:	a9 f7       	brne	.-22     	; 0x2006 <__mulsf3_pse+0x64>
    201c:	9e 3f       	cpi	r25, 0xFE	; 254
    201e:	51 05       	cpc	r21, r1
    2020:	80 f0       	brcs	.+32     	; 0x2042 <__mulsf3_pse+0xa0>
    2022:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__fp_inf>
    2026:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__fp_szero>
    202a:	5f 3f       	cpi	r21, 0xFF	; 255
    202c:	e4 f3       	brlt	.-8      	; 0x2026 <__mulsf3_pse+0x84>
    202e:	98 3e       	cpi	r25, 0xE8	; 232
    2030:	d4 f3       	brlt	.-12     	; 0x2026 <__mulsf3_pse+0x84>
    2032:	86 95       	lsr	r24
    2034:	77 95       	ror	r23
    2036:	67 95       	ror	r22
    2038:	b7 95       	ror	r27
    203a:	f7 95       	ror	r31
    203c:	e7 95       	ror	r30
    203e:	9f 5f       	subi	r25, 0xFF	; 255
    2040:	c1 f7       	brne	.-16     	; 0x2032 <__mulsf3_pse+0x90>
    2042:	fe 2b       	or	r31, r30
    2044:	88 0f       	add	r24, r24
    2046:	91 1d       	adc	r25, r1
    2048:	96 95       	lsr	r25
    204a:	87 95       	ror	r24
    204c:	97 f9       	bld	r25, 7
    204e:	08 95       	ret

00002050 <dtostrf>:
    2050:	ef 92       	push	r14
    2052:	0f 93       	push	r16
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	e8 01       	movw	r28, r16
    205c:	47 fd       	sbrc	r20, 7
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <dtostrf+0x14>
    2060:	34 e0       	ldi	r19, 0x04	; 4
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <dtostrf+0x16>
    2064:	34 e1       	ldi	r19, 0x14	; 20
    2066:	04 2e       	mov	r0, r20
    2068:	00 0c       	add	r0, r0
    206a:	55 0b       	sbc	r21, r21
    206c:	57 ff       	sbrs	r21, 7
    206e:	03 c0       	rjmp	.+6      	; 0x2076 <dtostrf+0x26>
    2070:	51 95       	neg	r21
    2072:	41 95       	neg	r20
    2074:	51 09       	sbc	r21, r1
    2076:	e3 2e       	mov	r14, r19
    2078:	02 2f       	mov	r16, r18
    207a:	24 2f       	mov	r18, r20
    207c:	ae 01       	movw	r20, r28
    207e:	0e 94 4b 12 	call	0x2496	; 0x2496 <dtoa_prf>
    2082:	ce 01       	movw	r24, r28
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	ef 90       	pop	r14
    208e:	08 95       	ret

00002090 <sprintf>:
    2090:	ae e0       	ldi	r26, 0x0E	; 14
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	ee e4       	ldi	r30, 0x4E	; 78
    2096:	f0 e1       	ldi	r31, 0x10	; 16
    2098:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__prologue_saves__+0x1c>
    209c:	0d 89       	ldd	r16, Y+21	; 0x15
    209e:	1e 89       	ldd	r17, Y+22	; 0x16
    20a0:	86 e0       	ldi	r24, 0x06	; 6
    20a2:	8c 83       	std	Y+4, r24	; 0x04
    20a4:	1a 83       	std	Y+2, r17	; 0x02
    20a6:	09 83       	std	Y+1, r16	; 0x01
    20a8:	8f ef       	ldi	r24, 0xFF	; 255
    20aa:	9f e7       	ldi	r25, 0x7F	; 127
    20ac:	9e 83       	std	Y+6, r25	; 0x06
    20ae:	8d 83       	std	Y+5, r24	; 0x05
    20b0:	ae 01       	movw	r20, r28
    20b2:	47 5e       	subi	r20, 0xE7	; 231
    20b4:	5f 4f       	sbci	r21, 0xFF	; 255
    20b6:	6f 89       	ldd	r22, Y+23	; 0x17
    20b8:	78 8d       	ldd	r23, Y+24	; 0x18
    20ba:	ce 01       	movw	r24, r28
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <vfprintf>
    20c2:	ef 81       	ldd	r30, Y+7	; 0x07
    20c4:	f8 85       	ldd	r31, Y+8	; 0x08
    20c6:	e0 0f       	add	r30, r16
    20c8:	f1 1f       	adc	r31, r17
    20ca:	10 82       	st	Z, r1
    20cc:	2e 96       	adiw	r28, 0x0e	; 14
    20ce:	e4 e0       	ldi	r30, 0x04	; 4
    20d0:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__+0x1c>

000020d4 <vfprintf>:
    20d4:	ab e0       	ldi	r26, 0x0B	; 11
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e0 e7       	ldi	r30, 0x70	; 112
    20da:	f0 e1       	ldi	r31, 0x10	; 16
    20dc:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__prologue_saves__>
    20e0:	6c 01       	movw	r12, r24
    20e2:	7b 01       	movw	r14, r22
    20e4:	8a 01       	movw	r16, r20
    20e6:	fc 01       	movw	r30, r24
    20e8:	17 82       	std	Z+7, r1	; 0x07
    20ea:	16 82       	std	Z+6, r1	; 0x06
    20ec:	83 81       	ldd	r24, Z+3	; 0x03
    20ee:	81 ff       	sbrs	r24, 1
    20f0:	cc c1       	rjmp	.+920    	; 0x248a <vfprintf+0x3b6>
    20f2:	ce 01       	movw	r24, r28
    20f4:	01 96       	adiw	r24, 0x01	; 1
    20f6:	3c 01       	movw	r6, r24
    20f8:	f6 01       	movw	r30, r12
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	f7 01       	movw	r30, r14
    20fe:	93 fd       	sbrc	r25, 3
    2100:	85 91       	lpm	r24, Z+
    2102:	93 ff       	sbrs	r25, 3
    2104:	81 91       	ld	r24, Z+
    2106:	7f 01       	movw	r14, r30
    2108:	88 23       	and	r24, r24
    210a:	09 f4       	brne	.+2      	; 0x210e <vfprintf+0x3a>
    210c:	ba c1       	rjmp	.+884    	; 0x2482 <vfprintf+0x3ae>
    210e:	85 32       	cpi	r24, 0x25	; 37
    2110:	39 f4       	brne	.+14     	; 0x2120 <vfprintf+0x4c>
    2112:	93 fd       	sbrc	r25, 3
    2114:	85 91       	lpm	r24, Z+
    2116:	93 ff       	sbrs	r25, 3
    2118:	81 91       	ld	r24, Z+
    211a:	7f 01       	movw	r14, r30
    211c:	85 32       	cpi	r24, 0x25	; 37
    211e:	29 f4       	brne	.+10     	; 0x212a <vfprintf+0x56>
    2120:	b6 01       	movw	r22, r12
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 93 14 	call	0x2926	; 0x2926 <fputc>
    2128:	e7 cf       	rjmp	.-50     	; 0x20f8 <vfprintf+0x24>
    212a:	91 2c       	mov	r9, r1
    212c:	21 2c       	mov	r2, r1
    212e:	31 2c       	mov	r3, r1
    2130:	ff e1       	ldi	r31, 0x1F	; 31
    2132:	f3 15       	cp	r31, r3
    2134:	d8 f0       	brcs	.+54     	; 0x216c <vfprintf+0x98>
    2136:	8b 32       	cpi	r24, 0x2B	; 43
    2138:	79 f0       	breq	.+30     	; 0x2158 <vfprintf+0x84>
    213a:	38 f4       	brcc	.+14     	; 0x214a <vfprintf+0x76>
    213c:	80 32       	cpi	r24, 0x20	; 32
    213e:	79 f0       	breq	.+30     	; 0x215e <vfprintf+0x8a>
    2140:	83 32       	cpi	r24, 0x23	; 35
    2142:	a1 f4       	brne	.+40     	; 0x216c <vfprintf+0x98>
    2144:	23 2d       	mov	r18, r3
    2146:	20 61       	ori	r18, 0x10	; 16
    2148:	1d c0       	rjmp	.+58     	; 0x2184 <vfprintf+0xb0>
    214a:	8d 32       	cpi	r24, 0x2D	; 45
    214c:	61 f0       	breq	.+24     	; 0x2166 <vfprintf+0x92>
    214e:	80 33       	cpi	r24, 0x30	; 48
    2150:	69 f4       	brne	.+26     	; 0x216c <vfprintf+0x98>
    2152:	23 2d       	mov	r18, r3
    2154:	21 60       	ori	r18, 0x01	; 1
    2156:	16 c0       	rjmp	.+44     	; 0x2184 <vfprintf+0xb0>
    2158:	83 2d       	mov	r24, r3
    215a:	82 60       	ori	r24, 0x02	; 2
    215c:	38 2e       	mov	r3, r24
    215e:	e3 2d       	mov	r30, r3
    2160:	e4 60       	ori	r30, 0x04	; 4
    2162:	3e 2e       	mov	r3, r30
    2164:	2a c0       	rjmp	.+84     	; 0x21ba <vfprintf+0xe6>
    2166:	f3 2d       	mov	r31, r3
    2168:	f8 60       	ori	r31, 0x08	; 8
    216a:	1d c0       	rjmp	.+58     	; 0x21a6 <vfprintf+0xd2>
    216c:	37 fc       	sbrc	r3, 7
    216e:	2d c0       	rjmp	.+90     	; 0x21ca <vfprintf+0xf6>
    2170:	20 ed       	ldi	r18, 0xD0	; 208
    2172:	28 0f       	add	r18, r24
    2174:	2a 30       	cpi	r18, 0x0A	; 10
    2176:	40 f0       	brcs	.+16     	; 0x2188 <vfprintf+0xb4>
    2178:	8e 32       	cpi	r24, 0x2E	; 46
    217a:	b9 f4       	brne	.+46     	; 0x21aa <vfprintf+0xd6>
    217c:	36 fc       	sbrc	r3, 6
    217e:	81 c1       	rjmp	.+770    	; 0x2482 <vfprintf+0x3ae>
    2180:	23 2d       	mov	r18, r3
    2182:	20 64       	ori	r18, 0x40	; 64
    2184:	32 2e       	mov	r3, r18
    2186:	19 c0       	rjmp	.+50     	; 0x21ba <vfprintf+0xe6>
    2188:	36 fe       	sbrs	r3, 6
    218a:	06 c0       	rjmp	.+12     	; 0x2198 <vfprintf+0xc4>
    218c:	8a e0       	ldi	r24, 0x0A	; 10
    218e:	98 9e       	mul	r9, r24
    2190:	20 0d       	add	r18, r0
    2192:	11 24       	eor	r1, r1
    2194:	92 2e       	mov	r9, r18
    2196:	11 c0       	rjmp	.+34     	; 0x21ba <vfprintf+0xe6>
    2198:	ea e0       	ldi	r30, 0x0A	; 10
    219a:	2e 9e       	mul	r2, r30
    219c:	20 0d       	add	r18, r0
    219e:	11 24       	eor	r1, r1
    21a0:	22 2e       	mov	r2, r18
    21a2:	f3 2d       	mov	r31, r3
    21a4:	f0 62       	ori	r31, 0x20	; 32
    21a6:	3f 2e       	mov	r3, r31
    21a8:	08 c0       	rjmp	.+16     	; 0x21ba <vfprintf+0xe6>
    21aa:	8c 36       	cpi	r24, 0x6C	; 108
    21ac:	21 f4       	brne	.+8      	; 0x21b6 <vfprintf+0xe2>
    21ae:	83 2d       	mov	r24, r3
    21b0:	80 68       	ori	r24, 0x80	; 128
    21b2:	38 2e       	mov	r3, r24
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <vfprintf+0xe6>
    21b6:	88 36       	cpi	r24, 0x68	; 104
    21b8:	41 f4       	brne	.+16     	; 0x21ca <vfprintf+0xf6>
    21ba:	f7 01       	movw	r30, r14
    21bc:	93 fd       	sbrc	r25, 3
    21be:	85 91       	lpm	r24, Z+
    21c0:	93 ff       	sbrs	r25, 3
    21c2:	81 91       	ld	r24, Z+
    21c4:	7f 01       	movw	r14, r30
    21c6:	81 11       	cpse	r24, r1
    21c8:	b3 cf       	rjmp	.-154    	; 0x2130 <vfprintf+0x5c>
    21ca:	98 2f       	mov	r25, r24
    21cc:	9f 7d       	andi	r25, 0xDF	; 223
    21ce:	95 54       	subi	r25, 0x45	; 69
    21d0:	93 30       	cpi	r25, 0x03	; 3
    21d2:	28 f4       	brcc	.+10     	; 0x21de <vfprintf+0x10a>
    21d4:	0c 5f       	subi	r16, 0xFC	; 252
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	9f e3       	ldi	r25, 0x3F	; 63
    21da:	99 83       	std	Y+1, r25	; 0x01
    21dc:	0d c0       	rjmp	.+26     	; 0x21f8 <vfprintf+0x124>
    21de:	83 36       	cpi	r24, 0x63	; 99
    21e0:	31 f0       	breq	.+12     	; 0x21ee <vfprintf+0x11a>
    21e2:	83 37       	cpi	r24, 0x73	; 115
    21e4:	71 f0       	breq	.+28     	; 0x2202 <vfprintf+0x12e>
    21e6:	83 35       	cpi	r24, 0x53	; 83
    21e8:	09 f0       	breq	.+2      	; 0x21ec <vfprintf+0x118>
    21ea:	59 c0       	rjmp	.+178    	; 0x229e <vfprintf+0x1ca>
    21ec:	21 c0       	rjmp	.+66     	; 0x2230 <vfprintf+0x15c>
    21ee:	f8 01       	movw	r30, r16
    21f0:	80 81       	ld	r24, Z
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	0e 5f       	subi	r16, 0xFE	; 254
    21f6:	1f 4f       	sbci	r17, 0xFF	; 255
    21f8:	88 24       	eor	r8, r8
    21fa:	83 94       	inc	r8
    21fc:	91 2c       	mov	r9, r1
    21fe:	53 01       	movw	r10, r6
    2200:	13 c0       	rjmp	.+38     	; 0x2228 <vfprintf+0x154>
    2202:	28 01       	movw	r4, r16
    2204:	f2 e0       	ldi	r31, 0x02	; 2
    2206:	4f 0e       	add	r4, r31
    2208:	51 1c       	adc	r5, r1
    220a:	f8 01       	movw	r30, r16
    220c:	a0 80       	ld	r10, Z
    220e:	b1 80       	ldd	r11, Z+1	; 0x01
    2210:	36 fe       	sbrs	r3, 6
    2212:	03 c0       	rjmp	.+6      	; 0x221a <vfprintf+0x146>
    2214:	69 2d       	mov	r22, r9
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	02 c0       	rjmp	.+4      	; 0x221e <vfprintf+0x14a>
    221a:	6f ef       	ldi	r22, 0xFF	; 255
    221c:	7f ef       	ldi	r23, 0xFF	; 255
    221e:	c5 01       	movw	r24, r10
    2220:	0e 94 88 14 	call	0x2910	; 0x2910 <strnlen>
    2224:	4c 01       	movw	r8, r24
    2226:	82 01       	movw	r16, r4
    2228:	f3 2d       	mov	r31, r3
    222a:	ff 77       	andi	r31, 0x7F	; 127
    222c:	3f 2e       	mov	r3, r31
    222e:	16 c0       	rjmp	.+44     	; 0x225c <vfprintf+0x188>
    2230:	28 01       	movw	r4, r16
    2232:	22 e0       	ldi	r18, 0x02	; 2
    2234:	42 0e       	add	r4, r18
    2236:	51 1c       	adc	r5, r1
    2238:	f8 01       	movw	r30, r16
    223a:	a0 80       	ld	r10, Z
    223c:	b1 80       	ldd	r11, Z+1	; 0x01
    223e:	36 fe       	sbrs	r3, 6
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <vfprintf+0x174>
    2242:	69 2d       	mov	r22, r9
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	02 c0       	rjmp	.+4      	; 0x224c <vfprintf+0x178>
    2248:	6f ef       	ldi	r22, 0xFF	; 255
    224a:	7f ef       	ldi	r23, 0xFF	; 255
    224c:	c5 01       	movw	r24, r10
    224e:	0e 94 7d 14 	call	0x28fa	; 0x28fa <strnlen_P>
    2252:	4c 01       	movw	r8, r24
    2254:	f3 2d       	mov	r31, r3
    2256:	f0 68       	ori	r31, 0x80	; 128
    2258:	3f 2e       	mov	r3, r31
    225a:	82 01       	movw	r16, r4
    225c:	33 fc       	sbrc	r3, 3
    225e:	1b c0       	rjmp	.+54     	; 0x2296 <vfprintf+0x1c2>
    2260:	82 2d       	mov	r24, r2
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	88 16       	cp	r8, r24
    2266:	99 06       	cpc	r9, r25
    2268:	b0 f4       	brcc	.+44     	; 0x2296 <vfprintf+0x1c2>
    226a:	b6 01       	movw	r22, r12
    226c:	80 e2       	ldi	r24, 0x20	; 32
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	0e 94 93 14 	call	0x2926	; 0x2926 <fputc>
    2274:	2a 94       	dec	r2
    2276:	f4 cf       	rjmp	.-24     	; 0x2260 <vfprintf+0x18c>
    2278:	f5 01       	movw	r30, r10
    227a:	37 fc       	sbrc	r3, 7
    227c:	85 91       	lpm	r24, Z+
    227e:	37 fe       	sbrs	r3, 7
    2280:	81 91       	ld	r24, Z+
    2282:	5f 01       	movw	r10, r30
    2284:	b6 01       	movw	r22, r12
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 93 14 	call	0x2926	; 0x2926 <fputc>
    228c:	21 10       	cpse	r2, r1
    228e:	2a 94       	dec	r2
    2290:	21 e0       	ldi	r18, 0x01	; 1
    2292:	82 1a       	sub	r8, r18
    2294:	91 08       	sbc	r9, r1
    2296:	81 14       	cp	r8, r1
    2298:	91 04       	cpc	r9, r1
    229a:	71 f7       	brne	.-36     	; 0x2278 <vfprintf+0x1a4>
    229c:	e8 c0       	rjmp	.+464    	; 0x246e <vfprintf+0x39a>
    229e:	84 36       	cpi	r24, 0x64	; 100
    22a0:	11 f0       	breq	.+4      	; 0x22a6 <vfprintf+0x1d2>
    22a2:	89 36       	cpi	r24, 0x69	; 105
    22a4:	41 f5       	brne	.+80     	; 0x22f6 <vfprintf+0x222>
    22a6:	f8 01       	movw	r30, r16
    22a8:	37 fe       	sbrs	r3, 7
    22aa:	07 c0       	rjmp	.+14     	; 0x22ba <vfprintf+0x1e6>
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	0c 5f       	subi	r16, 0xFC	; 252
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	08 c0       	rjmp	.+16     	; 0x22ca <vfprintf+0x1f6>
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	07 2e       	mov	r0, r23
    22c0:	00 0c       	add	r0, r0
    22c2:	88 0b       	sbc	r24, r24
    22c4:	99 0b       	sbc	r25, r25
    22c6:	0e 5f       	subi	r16, 0xFE	; 254
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	f3 2d       	mov	r31, r3
    22cc:	ff 76       	andi	r31, 0x6F	; 111
    22ce:	3f 2e       	mov	r3, r31
    22d0:	97 ff       	sbrs	r25, 7
    22d2:	09 c0       	rjmp	.+18     	; 0x22e6 <vfprintf+0x212>
    22d4:	90 95       	com	r25
    22d6:	80 95       	com	r24
    22d8:	70 95       	com	r23
    22da:	61 95       	neg	r22
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	8f 4f       	sbci	r24, 0xFF	; 255
    22e0:	9f 4f       	sbci	r25, 0xFF	; 255
    22e2:	f0 68       	ori	r31, 0x80	; 128
    22e4:	3f 2e       	mov	r3, r31
    22e6:	2a e0       	ldi	r18, 0x0A	; 10
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	a3 01       	movw	r20, r6
    22ec:	0e 94 cf 14 	call	0x299e	; 0x299e <__ultoa_invert>
    22f0:	88 2e       	mov	r8, r24
    22f2:	86 18       	sub	r8, r6
    22f4:	45 c0       	rjmp	.+138    	; 0x2380 <vfprintf+0x2ac>
    22f6:	85 37       	cpi	r24, 0x75	; 117
    22f8:	31 f4       	brne	.+12     	; 0x2306 <vfprintf+0x232>
    22fa:	23 2d       	mov	r18, r3
    22fc:	2f 7e       	andi	r18, 0xEF	; 239
    22fe:	b2 2e       	mov	r11, r18
    2300:	2a e0       	ldi	r18, 0x0A	; 10
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	25 c0       	rjmp	.+74     	; 0x2350 <vfprintf+0x27c>
    2306:	93 2d       	mov	r25, r3
    2308:	99 7f       	andi	r25, 0xF9	; 249
    230a:	b9 2e       	mov	r11, r25
    230c:	8f 36       	cpi	r24, 0x6F	; 111
    230e:	c1 f0       	breq	.+48     	; 0x2340 <vfprintf+0x26c>
    2310:	18 f4       	brcc	.+6      	; 0x2318 <vfprintf+0x244>
    2312:	88 35       	cpi	r24, 0x58	; 88
    2314:	79 f0       	breq	.+30     	; 0x2334 <vfprintf+0x260>
    2316:	b5 c0       	rjmp	.+362    	; 0x2482 <vfprintf+0x3ae>
    2318:	80 37       	cpi	r24, 0x70	; 112
    231a:	19 f0       	breq	.+6      	; 0x2322 <vfprintf+0x24e>
    231c:	88 37       	cpi	r24, 0x78	; 120
    231e:	21 f0       	breq	.+8      	; 0x2328 <vfprintf+0x254>
    2320:	b0 c0       	rjmp	.+352    	; 0x2482 <vfprintf+0x3ae>
    2322:	e9 2f       	mov	r30, r25
    2324:	e0 61       	ori	r30, 0x10	; 16
    2326:	be 2e       	mov	r11, r30
    2328:	b4 fe       	sbrs	r11, 4
    232a:	0d c0       	rjmp	.+26     	; 0x2346 <vfprintf+0x272>
    232c:	fb 2d       	mov	r31, r11
    232e:	f4 60       	ori	r31, 0x04	; 4
    2330:	bf 2e       	mov	r11, r31
    2332:	09 c0       	rjmp	.+18     	; 0x2346 <vfprintf+0x272>
    2334:	34 fe       	sbrs	r3, 4
    2336:	0a c0       	rjmp	.+20     	; 0x234c <vfprintf+0x278>
    2338:	29 2f       	mov	r18, r25
    233a:	26 60       	ori	r18, 0x06	; 6
    233c:	b2 2e       	mov	r11, r18
    233e:	06 c0       	rjmp	.+12     	; 0x234c <vfprintf+0x278>
    2340:	28 e0       	ldi	r18, 0x08	; 8
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	05 c0       	rjmp	.+10     	; 0x2350 <vfprintf+0x27c>
    2346:	20 e1       	ldi	r18, 0x10	; 16
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <vfprintf+0x27c>
    234c:	20 e1       	ldi	r18, 0x10	; 16
    234e:	32 e0       	ldi	r19, 0x02	; 2
    2350:	f8 01       	movw	r30, r16
    2352:	b7 fe       	sbrs	r11, 7
    2354:	07 c0       	rjmp	.+14     	; 0x2364 <vfprintf+0x290>
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	0c 5f       	subi	r16, 0xFC	; 252
    2360:	1f 4f       	sbci	r17, 0xFF	; 255
    2362:	06 c0       	rjmp	.+12     	; 0x2370 <vfprintf+0x29c>
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	0e 5f       	subi	r16, 0xFE	; 254
    236e:	1f 4f       	sbci	r17, 0xFF	; 255
    2370:	a3 01       	movw	r20, r6
    2372:	0e 94 cf 14 	call	0x299e	; 0x299e <__ultoa_invert>
    2376:	88 2e       	mov	r8, r24
    2378:	86 18       	sub	r8, r6
    237a:	fb 2d       	mov	r31, r11
    237c:	ff 77       	andi	r31, 0x7F	; 127
    237e:	3f 2e       	mov	r3, r31
    2380:	36 fe       	sbrs	r3, 6
    2382:	0d c0       	rjmp	.+26     	; 0x239e <vfprintf+0x2ca>
    2384:	23 2d       	mov	r18, r3
    2386:	2e 7f       	andi	r18, 0xFE	; 254
    2388:	a2 2e       	mov	r10, r18
    238a:	89 14       	cp	r8, r9
    238c:	58 f4       	brcc	.+22     	; 0x23a4 <vfprintf+0x2d0>
    238e:	34 fe       	sbrs	r3, 4
    2390:	0b c0       	rjmp	.+22     	; 0x23a8 <vfprintf+0x2d4>
    2392:	32 fc       	sbrc	r3, 2
    2394:	09 c0       	rjmp	.+18     	; 0x23a8 <vfprintf+0x2d4>
    2396:	83 2d       	mov	r24, r3
    2398:	8e 7e       	andi	r24, 0xEE	; 238
    239a:	a8 2e       	mov	r10, r24
    239c:	05 c0       	rjmp	.+10     	; 0x23a8 <vfprintf+0x2d4>
    239e:	b8 2c       	mov	r11, r8
    23a0:	a3 2c       	mov	r10, r3
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <vfprintf+0x2d6>
    23a4:	b8 2c       	mov	r11, r8
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <vfprintf+0x2d6>
    23a8:	b9 2c       	mov	r11, r9
    23aa:	a4 fe       	sbrs	r10, 4
    23ac:	0f c0       	rjmp	.+30     	; 0x23cc <vfprintf+0x2f8>
    23ae:	fe 01       	movw	r30, r28
    23b0:	e8 0d       	add	r30, r8
    23b2:	f1 1d       	adc	r31, r1
    23b4:	80 81       	ld	r24, Z
    23b6:	80 33       	cpi	r24, 0x30	; 48
    23b8:	21 f4       	brne	.+8      	; 0x23c2 <vfprintf+0x2ee>
    23ba:	9a 2d       	mov	r25, r10
    23bc:	99 7e       	andi	r25, 0xE9	; 233
    23be:	a9 2e       	mov	r10, r25
    23c0:	09 c0       	rjmp	.+18     	; 0x23d4 <vfprintf+0x300>
    23c2:	a2 fe       	sbrs	r10, 2
    23c4:	06 c0       	rjmp	.+12     	; 0x23d2 <vfprintf+0x2fe>
    23c6:	b3 94       	inc	r11
    23c8:	b3 94       	inc	r11
    23ca:	04 c0       	rjmp	.+8      	; 0x23d4 <vfprintf+0x300>
    23cc:	8a 2d       	mov	r24, r10
    23ce:	86 78       	andi	r24, 0x86	; 134
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <vfprintf+0x300>
    23d2:	b3 94       	inc	r11
    23d4:	a3 fc       	sbrc	r10, 3
    23d6:	11 c0       	rjmp	.+34     	; 0x23fa <vfprintf+0x326>
    23d8:	a0 fe       	sbrs	r10, 0
    23da:	06 c0       	rjmp	.+12     	; 0x23e8 <vfprintf+0x314>
    23dc:	b2 14       	cp	r11, r2
    23de:	88 f4       	brcc	.+34     	; 0x2402 <vfprintf+0x32e>
    23e0:	28 0c       	add	r2, r8
    23e2:	92 2c       	mov	r9, r2
    23e4:	9b 18       	sub	r9, r11
    23e6:	0e c0       	rjmp	.+28     	; 0x2404 <vfprintf+0x330>
    23e8:	b2 14       	cp	r11, r2
    23ea:	60 f4       	brcc	.+24     	; 0x2404 <vfprintf+0x330>
    23ec:	b6 01       	movw	r22, r12
    23ee:	80 e2       	ldi	r24, 0x20	; 32
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 93 14 	call	0x2926	; 0x2926 <fputc>
    23f6:	b3 94       	inc	r11
    23f8:	f7 cf       	rjmp	.-18     	; 0x23e8 <vfprintf+0x314>
    23fa:	b2 14       	cp	r11, r2
    23fc:	18 f4       	brcc	.+6      	; 0x2404 <vfprintf+0x330>
    23fe:	2b 18       	sub	r2, r11
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <vfprintf+0x332>
    2402:	98 2c       	mov	r9, r8
    2404:	21 2c       	mov	r2, r1
    2406:	a4 fe       	sbrs	r10, 4
    2408:	10 c0       	rjmp	.+32     	; 0x242a <vfprintf+0x356>
    240a:	b6 01       	movw	r22, r12
    240c:	80 e3       	ldi	r24, 0x30	; 48
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	0e 94 93 14 	call	0x2926	; 0x2926 <fputc>
    2414:	a2 fe       	sbrs	r10, 2
    2416:	17 c0       	rjmp	.+46     	; 0x2446 <vfprintf+0x372>
    2418:	a1 fc       	sbrc	r10, 1
    241a:	03 c0       	rjmp	.+6      	; 0x2422 <vfprintf+0x34e>
    241c:	88 e7       	ldi	r24, 0x78	; 120
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <vfprintf+0x352>
    2422:	88 e5       	ldi	r24, 0x58	; 88
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	b6 01       	movw	r22, r12
    2428:	0c c0       	rjmp	.+24     	; 0x2442 <vfprintf+0x36e>
    242a:	8a 2d       	mov	r24, r10
    242c:	86 78       	andi	r24, 0x86	; 134
    242e:	59 f0       	breq	.+22     	; 0x2446 <vfprintf+0x372>
    2430:	a1 fe       	sbrs	r10, 1
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <vfprintf+0x364>
    2434:	8b e2       	ldi	r24, 0x2B	; 43
    2436:	01 c0       	rjmp	.+2      	; 0x243a <vfprintf+0x366>
    2438:	80 e2       	ldi	r24, 0x20	; 32
    243a:	a7 fc       	sbrc	r10, 7
    243c:	8d e2       	ldi	r24, 0x2D	; 45
    243e:	b6 01       	movw	r22, r12
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 93 14 	call	0x2926	; 0x2926 <fputc>
    2446:	89 14       	cp	r8, r9
    2448:	38 f4       	brcc	.+14     	; 0x2458 <vfprintf+0x384>
    244a:	b6 01       	movw	r22, r12
    244c:	80 e3       	ldi	r24, 0x30	; 48
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 93 14 	call	0x2926	; 0x2926 <fputc>
    2454:	9a 94       	dec	r9
    2456:	f7 cf       	rjmp	.-18     	; 0x2446 <vfprintf+0x372>
    2458:	8a 94       	dec	r8
    245a:	f3 01       	movw	r30, r6
    245c:	e8 0d       	add	r30, r8
    245e:	f1 1d       	adc	r31, r1
    2460:	80 81       	ld	r24, Z
    2462:	b6 01       	movw	r22, r12
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 93 14 	call	0x2926	; 0x2926 <fputc>
    246a:	81 10       	cpse	r8, r1
    246c:	f5 cf       	rjmp	.-22     	; 0x2458 <vfprintf+0x384>
    246e:	22 20       	and	r2, r2
    2470:	09 f4       	brne	.+2      	; 0x2474 <vfprintf+0x3a0>
    2472:	42 ce       	rjmp	.-892    	; 0x20f8 <vfprintf+0x24>
    2474:	b6 01       	movw	r22, r12
    2476:	80 e2       	ldi	r24, 0x20	; 32
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	0e 94 93 14 	call	0x2926	; 0x2926 <fputc>
    247e:	2a 94       	dec	r2
    2480:	f6 cf       	rjmp	.-20     	; 0x246e <vfprintf+0x39a>
    2482:	f6 01       	movw	r30, r12
    2484:	86 81       	ldd	r24, Z+6	; 0x06
    2486:	97 81       	ldd	r25, Z+7	; 0x07
    2488:	02 c0       	rjmp	.+4      	; 0x248e <vfprintf+0x3ba>
    248a:	8f ef       	ldi	r24, 0xFF	; 255
    248c:	9f ef       	ldi	r25, 0xFF	; 255
    248e:	2b 96       	adiw	r28, 0x0b	; 11
    2490:	e2 e1       	ldi	r30, 0x12	; 18
    2492:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__epilogue_restores__>

00002496 <dtoa_prf>:
    2496:	a9 e0       	ldi	r26, 0x09	; 9
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e1 e5       	ldi	r30, 0x51	; 81
    249c:	f2 e1       	ldi	r31, 0x12	; 18
    249e:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__prologue_saves__+0xc>
    24a2:	6a 01       	movw	r12, r20
    24a4:	12 2f       	mov	r17, r18
    24a6:	b0 2e       	mov	r11, r16
    24a8:	2b e3       	ldi	r18, 0x3B	; 59
    24aa:	20 17       	cp	r18, r16
    24ac:	20 f0       	brcs	.+8      	; 0x24b6 <dtoa_prf+0x20>
    24ae:	ff 24       	eor	r15, r15
    24b0:	f3 94       	inc	r15
    24b2:	f0 0e       	add	r15, r16
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <dtoa_prf+0x24>
    24b6:	2c e3       	ldi	r18, 0x3C	; 60
    24b8:	f2 2e       	mov	r15, r18
    24ba:	0f 2d       	mov	r16, r15
    24bc:	27 e0       	ldi	r18, 0x07	; 7
    24be:	ae 01       	movw	r20, r28
    24c0:	4f 5f       	subi	r20, 0xFF	; 255
    24c2:	5f 4f       	sbci	r21, 0xFF	; 255
    24c4:	0e 94 a5 13 	call	0x274a	; 0x274a <__ftoa_engine>
    24c8:	bc 01       	movw	r22, r24
    24ca:	49 81       	ldd	r20, Y+1	; 0x01
    24cc:	84 2f       	mov	r24, r20
    24ce:	89 70       	andi	r24, 0x09	; 9
    24d0:	81 30       	cpi	r24, 0x01	; 1
    24d2:	31 f0       	breq	.+12     	; 0x24e0 <dtoa_prf+0x4a>
    24d4:	e1 fc       	sbrc	r14, 1
    24d6:	06 c0       	rjmp	.+12     	; 0x24e4 <dtoa_prf+0x4e>
    24d8:	e0 fe       	sbrs	r14, 0
    24da:	06 c0       	rjmp	.+12     	; 0x24e8 <dtoa_prf+0x52>
    24dc:	90 e2       	ldi	r25, 0x20	; 32
    24de:	05 c0       	rjmp	.+10     	; 0x24ea <dtoa_prf+0x54>
    24e0:	9d e2       	ldi	r25, 0x2D	; 45
    24e2:	03 c0       	rjmp	.+6      	; 0x24ea <dtoa_prf+0x54>
    24e4:	9b e2       	ldi	r25, 0x2B	; 43
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <dtoa_prf+0x54>
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	5e 2d       	mov	r21, r14
    24ec:	50 71       	andi	r21, 0x10	; 16
    24ee:	43 ff       	sbrs	r20, 3
    24f0:	3c c0       	rjmp	.+120    	; 0x256a <dtoa_prf+0xd4>
    24f2:	91 11       	cpse	r25, r1
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <dtoa_prf+0x64>
    24f6:	83 e0       	ldi	r24, 0x03	; 3
    24f8:	01 c0       	rjmp	.+2      	; 0x24fc <dtoa_prf+0x66>
    24fa:	84 e0       	ldi	r24, 0x04	; 4
    24fc:	81 17       	cp	r24, r17
    24fe:	18 f4       	brcc	.+6      	; 0x2506 <dtoa_prf+0x70>
    2500:	21 2f       	mov	r18, r17
    2502:	28 1b       	sub	r18, r24
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <dtoa_prf+0x72>
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	51 11       	cpse	r21, r1
    250a:	0b c0       	rjmp	.+22     	; 0x2522 <dtoa_prf+0x8c>
    250c:	f6 01       	movw	r30, r12
    250e:	82 2f       	mov	r24, r18
    2510:	30 e2       	ldi	r19, 0x20	; 32
    2512:	88 23       	and	r24, r24
    2514:	19 f0       	breq	.+6      	; 0x251c <dtoa_prf+0x86>
    2516:	31 93       	st	Z+, r19
    2518:	81 50       	subi	r24, 0x01	; 1
    251a:	fb cf       	rjmp	.-10     	; 0x2512 <dtoa_prf+0x7c>
    251c:	c2 0e       	add	r12, r18
    251e:	d1 1c       	adc	r13, r1
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	99 23       	and	r25, r25
    2524:	29 f0       	breq	.+10     	; 0x2530 <dtoa_prf+0x9a>
    2526:	d6 01       	movw	r26, r12
    2528:	9c 93       	st	X, r25
    252a:	f6 01       	movw	r30, r12
    252c:	31 96       	adiw	r30, 0x01	; 1
    252e:	6f 01       	movw	r12, r30
    2530:	c6 01       	movw	r24, r12
    2532:	03 96       	adiw	r24, 0x03	; 3
    2534:	e2 fe       	sbrs	r14, 2
    2536:	0a c0       	rjmp	.+20     	; 0x254c <dtoa_prf+0xb6>
    2538:	3e e4       	ldi	r19, 0x4E	; 78
    253a:	d6 01       	movw	r26, r12
    253c:	3c 93       	st	X, r19
    253e:	41 e4       	ldi	r20, 0x41	; 65
    2540:	11 96       	adiw	r26, 0x01	; 1
    2542:	4c 93       	st	X, r20
    2544:	11 97       	sbiw	r26, 0x01	; 1
    2546:	12 96       	adiw	r26, 0x02	; 2
    2548:	3c 93       	st	X, r19
    254a:	06 c0       	rjmp	.+12     	; 0x2558 <dtoa_prf+0xc2>
    254c:	3e e6       	ldi	r19, 0x6E	; 110
    254e:	f6 01       	movw	r30, r12
    2550:	30 83       	st	Z, r19
    2552:	41 e6       	ldi	r20, 0x61	; 97
    2554:	41 83       	std	Z+1, r20	; 0x01
    2556:	32 83       	std	Z+2, r19	; 0x02
    2558:	fc 01       	movw	r30, r24
    255a:	32 2f       	mov	r19, r18
    255c:	40 e2       	ldi	r20, 0x20	; 32
    255e:	33 23       	and	r19, r19
    2560:	09 f4       	brne	.+2      	; 0x2564 <dtoa_prf+0xce>
    2562:	42 c0       	rjmp	.+132    	; 0x25e8 <dtoa_prf+0x152>
    2564:	41 93       	st	Z+, r20
    2566:	31 50       	subi	r19, 0x01	; 1
    2568:	fa cf       	rjmp	.-12     	; 0x255e <dtoa_prf+0xc8>
    256a:	42 ff       	sbrs	r20, 2
    256c:	44 c0       	rjmp	.+136    	; 0x25f6 <dtoa_prf+0x160>
    256e:	91 11       	cpse	r25, r1
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <dtoa_prf+0xe0>
    2572:	83 e0       	ldi	r24, 0x03	; 3
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <dtoa_prf+0xe2>
    2576:	84 e0       	ldi	r24, 0x04	; 4
    2578:	81 17       	cp	r24, r17
    257a:	18 f4       	brcc	.+6      	; 0x2582 <dtoa_prf+0xec>
    257c:	21 2f       	mov	r18, r17
    257e:	28 1b       	sub	r18, r24
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <dtoa_prf+0xee>
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	51 11       	cpse	r21, r1
    2586:	0b c0       	rjmp	.+22     	; 0x259e <dtoa_prf+0x108>
    2588:	f6 01       	movw	r30, r12
    258a:	82 2f       	mov	r24, r18
    258c:	30 e2       	ldi	r19, 0x20	; 32
    258e:	88 23       	and	r24, r24
    2590:	19 f0       	breq	.+6      	; 0x2598 <dtoa_prf+0x102>
    2592:	31 93       	st	Z+, r19
    2594:	81 50       	subi	r24, 0x01	; 1
    2596:	fb cf       	rjmp	.-10     	; 0x258e <dtoa_prf+0xf8>
    2598:	c2 0e       	add	r12, r18
    259a:	d1 1c       	adc	r13, r1
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	99 23       	and	r25, r25
    25a0:	29 f0       	breq	.+10     	; 0x25ac <dtoa_prf+0x116>
    25a2:	d6 01       	movw	r26, r12
    25a4:	9c 93       	st	X, r25
    25a6:	f6 01       	movw	r30, r12
    25a8:	31 96       	adiw	r30, 0x01	; 1
    25aa:	6f 01       	movw	r12, r30
    25ac:	c6 01       	movw	r24, r12
    25ae:	03 96       	adiw	r24, 0x03	; 3
    25b0:	e2 fe       	sbrs	r14, 2
    25b2:	0b c0       	rjmp	.+22     	; 0x25ca <dtoa_prf+0x134>
    25b4:	39 e4       	ldi	r19, 0x49	; 73
    25b6:	d6 01       	movw	r26, r12
    25b8:	3c 93       	st	X, r19
    25ba:	3e e4       	ldi	r19, 0x4E	; 78
    25bc:	11 96       	adiw	r26, 0x01	; 1
    25be:	3c 93       	st	X, r19
    25c0:	11 97       	sbiw	r26, 0x01	; 1
    25c2:	36 e4       	ldi	r19, 0x46	; 70
    25c4:	12 96       	adiw	r26, 0x02	; 2
    25c6:	3c 93       	st	X, r19
    25c8:	07 c0       	rjmp	.+14     	; 0x25d8 <dtoa_prf+0x142>
    25ca:	39 e6       	ldi	r19, 0x69	; 105
    25cc:	f6 01       	movw	r30, r12
    25ce:	30 83       	st	Z, r19
    25d0:	3e e6       	ldi	r19, 0x6E	; 110
    25d2:	31 83       	std	Z+1, r19	; 0x01
    25d4:	36 e6       	ldi	r19, 0x66	; 102
    25d6:	32 83       	std	Z+2, r19	; 0x02
    25d8:	fc 01       	movw	r30, r24
    25da:	32 2f       	mov	r19, r18
    25dc:	40 e2       	ldi	r20, 0x20	; 32
    25de:	33 23       	and	r19, r19
    25e0:	19 f0       	breq	.+6      	; 0x25e8 <dtoa_prf+0x152>
    25e2:	41 93       	st	Z+, r20
    25e4:	31 50       	subi	r19, 0x01	; 1
    25e6:	fb cf       	rjmp	.-10     	; 0x25de <dtoa_prf+0x148>
    25e8:	fc 01       	movw	r30, r24
    25ea:	e2 0f       	add	r30, r18
    25ec:	f1 1d       	adc	r31, r1
    25ee:	10 82       	st	Z, r1
    25f0:	8e ef       	ldi	r24, 0xFE	; 254
    25f2:	9f ef       	ldi	r25, 0xFF	; 255
    25f4:	a6 c0       	rjmp	.+332    	; 0x2742 <dtoa_prf+0x2ac>
    25f6:	21 e0       	ldi	r18, 0x01	; 1
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	91 11       	cpse	r25, r1
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <dtoa_prf+0x16c>
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	16 16       	cp	r1, r22
    2604:	17 06       	cpc	r1, r23
    2606:	1c f4       	brge	.+6      	; 0x260e <dtoa_prf+0x178>
    2608:	fb 01       	movw	r30, r22
    260a:	31 96       	adiw	r30, 0x01	; 1
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <dtoa_prf+0x17c>
    260e:	e1 e0       	ldi	r30, 0x01	; 1
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	2e 0f       	add	r18, r30
    2614:	3f 1f       	adc	r19, r31
    2616:	bb 20       	and	r11, r11
    2618:	21 f0       	breq	.+8      	; 0x2622 <dtoa_prf+0x18c>
    261a:	eb 2d       	mov	r30, r11
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	31 96       	adiw	r30, 0x01	; 1
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <dtoa_prf+0x190>
    2622:	e0 e0       	ldi	r30, 0x00	; 0
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	2e 0f       	add	r18, r30
    2628:	3f 1f       	adc	r19, r31
    262a:	e1 2f       	mov	r30, r17
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	2e 17       	cp	r18, r30
    2630:	3f 07       	cpc	r19, r31
    2632:	1c f4       	brge	.+6      	; 0x263a <dtoa_prf+0x1a4>
    2634:	12 1b       	sub	r17, r18
    2636:	21 2f       	mov	r18, r17
    2638:	01 c0       	rjmp	.+2      	; 0x263c <dtoa_prf+0x1a6>
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	8e 2d       	mov	r24, r14
    263e:	88 71       	andi	r24, 0x18	; 24
    2640:	59 f4       	brne	.+22     	; 0x2658 <dtoa_prf+0x1c2>
    2642:	f6 01       	movw	r30, r12
    2644:	82 2f       	mov	r24, r18
    2646:	30 e2       	ldi	r19, 0x20	; 32
    2648:	88 23       	and	r24, r24
    264a:	19 f0       	breq	.+6      	; 0x2652 <dtoa_prf+0x1bc>
    264c:	31 93       	st	Z+, r19
    264e:	81 50       	subi	r24, 0x01	; 1
    2650:	fb cf       	rjmp	.-10     	; 0x2648 <dtoa_prf+0x1b2>
    2652:	c2 0e       	add	r12, r18
    2654:	d1 1c       	adc	r13, r1
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	99 23       	and	r25, r25
    265a:	29 f0       	breq	.+10     	; 0x2666 <dtoa_prf+0x1d0>
    265c:	d6 01       	movw	r26, r12
    265e:	9c 93       	st	X, r25
    2660:	f6 01       	movw	r30, r12
    2662:	31 96       	adiw	r30, 0x01	; 1
    2664:	6f 01       	movw	r12, r30
    2666:	51 11       	cpse	r21, r1
    2668:	0b c0       	rjmp	.+22     	; 0x2680 <dtoa_prf+0x1ea>
    266a:	f6 01       	movw	r30, r12
    266c:	82 2f       	mov	r24, r18
    266e:	90 e3       	ldi	r25, 0x30	; 48
    2670:	88 23       	and	r24, r24
    2672:	19 f0       	breq	.+6      	; 0x267a <dtoa_prf+0x1e4>
    2674:	91 93       	st	Z+, r25
    2676:	81 50       	subi	r24, 0x01	; 1
    2678:	fb cf       	rjmp	.-10     	; 0x2670 <dtoa_prf+0x1da>
    267a:	c2 0e       	add	r12, r18
    267c:	d1 1c       	adc	r13, r1
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	0f 2d       	mov	r16, r15
    2682:	06 0f       	add	r16, r22
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	34 2f       	mov	r19, r20
    2688:	30 71       	andi	r19, 0x10	; 16
    268a:	44 ff       	sbrs	r20, 4
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <dtoa_prf+0x1fe>
    268e:	91 33       	cpi	r25, 0x31	; 49
    2690:	09 f4       	brne	.+2      	; 0x2694 <dtoa_prf+0x1fe>
    2692:	01 50       	subi	r16, 0x01	; 1
    2694:	10 16       	cp	r1, r16
    2696:	24 f4       	brge	.+8      	; 0x26a0 <dtoa_prf+0x20a>
    2698:	09 30       	cpi	r16, 0x09	; 9
    269a:	18 f0       	brcs	.+6      	; 0x26a2 <dtoa_prf+0x20c>
    269c:	08 e0       	ldi	r16, 0x08	; 8
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <dtoa_prf+0x20c>
    26a0:	01 e0       	ldi	r16, 0x01	; 1
    26a2:	ab 01       	movw	r20, r22
    26a4:	77 ff       	sbrs	r23, 7
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <dtoa_prf+0x216>
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	fb 01       	movw	r30, r22
    26ae:	e4 1b       	sub	r30, r20
    26b0:	f5 0b       	sbc	r31, r21
    26b2:	a1 e0       	ldi	r26, 0x01	; 1
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	ac 0f       	add	r26, r28
    26b8:	bd 1f       	adc	r27, r29
    26ba:	ea 0f       	add	r30, r26
    26bc:	fb 1f       	adc	r31, r27
    26be:	8e e2       	ldi	r24, 0x2E	; 46
    26c0:	a8 2e       	mov	r10, r24
    26c2:	4b 01       	movw	r8, r22
    26c4:	80 1a       	sub	r8, r16
    26c6:	91 08       	sbc	r9, r1
    26c8:	0b 2d       	mov	r16, r11
    26ca:	10 e0       	ldi	r17, 0x00	; 0
    26cc:	11 95       	neg	r17
    26ce:	01 95       	neg	r16
    26d0:	11 09       	sbc	r17, r1
    26d2:	4f 3f       	cpi	r20, 0xFF	; 255
    26d4:	bf ef       	ldi	r27, 0xFF	; 255
    26d6:	5b 07       	cpc	r21, r27
    26d8:	21 f4       	brne	.+8      	; 0x26e2 <dtoa_prf+0x24c>
    26da:	d6 01       	movw	r26, r12
    26dc:	ac 92       	st	X, r10
    26de:	11 96       	adiw	r26, 0x01	; 1
    26e0:	6d 01       	movw	r12, r26
    26e2:	64 17       	cp	r22, r20
    26e4:	75 07       	cpc	r23, r21
    26e6:	2c f0       	brlt	.+10     	; 0x26f2 <dtoa_prf+0x25c>
    26e8:	84 16       	cp	r8, r20
    26ea:	95 06       	cpc	r9, r21
    26ec:	14 f4       	brge	.+4      	; 0x26f2 <dtoa_prf+0x25c>
    26ee:	81 81       	ldd	r24, Z+1	; 0x01
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <dtoa_prf+0x25e>
    26f2:	80 e3       	ldi	r24, 0x30	; 48
    26f4:	41 50       	subi	r20, 0x01	; 1
    26f6:	51 09       	sbc	r21, r1
    26f8:	31 96       	adiw	r30, 0x01	; 1
    26fa:	d6 01       	movw	r26, r12
    26fc:	11 96       	adiw	r26, 0x01	; 1
    26fe:	7d 01       	movw	r14, r26
    2700:	40 17       	cp	r20, r16
    2702:	51 07       	cpc	r21, r17
    2704:	24 f0       	brlt	.+8      	; 0x270e <dtoa_prf+0x278>
    2706:	d6 01       	movw	r26, r12
    2708:	8c 93       	st	X, r24
    270a:	67 01       	movw	r12, r14
    270c:	e2 cf       	rjmp	.-60     	; 0x26d2 <dtoa_prf+0x23c>
    270e:	64 17       	cp	r22, r20
    2710:	75 07       	cpc	r23, r21
    2712:	39 f4       	brne	.+14     	; 0x2722 <dtoa_prf+0x28c>
    2714:	96 33       	cpi	r25, 0x36	; 54
    2716:	20 f4       	brcc	.+8      	; 0x2720 <dtoa_prf+0x28a>
    2718:	95 33       	cpi	r25, 0x35	; 53
    271a:	19 f4       	brne	.+6      	; 0x2722 <dtoa_prf+0x28c>
    271c:	31 11       	cpse	r19, r1
    271e:	01 c0       	rjmp	.+2      	; 0x2722 <dtoa_prf+0x28c>
    2720:	81 e3       	ldi	r24, 0x31	; 49
    2722:	f6 01       	movw	r30, r12
    2724:	80 83       	st	Z, r24
    2726:	f7 01       	movw	r30, r14
    2728:	82 2f       	mov	r24, r18
    272a:	90 e2       	ldi	r25, 0x20	; 32
    272c:	88 23       	and	r24, r24
    272e:	19 f0       	breq	.+6      	; 0x2736 <dtoa_prf+0x2a0>
    2730:	91 93       	st	Z+, r25
    2732:	81 50       	subi	r24, 0x01	; 1
    2734:	fb cf       	rjmp	.-10     	; 0x272c <dtoa_prf+0x296>
    2736:	f7 01       	movw	r30, r14
    2738:	e2 0f       	add	r30, r18
    273a:	f1 1d       	adc	r31, r1
    273c:	10 82       	st	Z, r1
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	29 96       	adiw	r28, 0x09	; 9
    2744:	ec e0       	ldi	r30, 0x0C	; 12
    2746:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__epilogue_restores__+0xc>

0000274a <__ftoa_engine>:
    274a:	28 30       	cpi	r18, 0x08	; 8
    274c:	08 f0       	brcs	.+2      	; 0x2750 <__ftoa_engine+0x6>
    274e:	27 e0       	ldi	r18, 0x07	; 7
    2750:	33 27       	eor	r19, r19
    2752:	da 01       	movw	r26, r20
    2754:	99 0f       	add	r25, r25
    2756:	31 1d       	adc	r19, r1
    2758:	87 fd       	sbrc	r24, 7
    275a:	91 60       	ori	r25, 0x01	; 1
    275c:	00 96       	adiw	r24, 0x00	; 0
    275e:	61 05       	cpc	r22, r1
    2760:	71 05       	cpc	r23, r1
    2762:	39 f4       	brne	.+14     	; 0x2772 <__ftoa_engine+0x28>
    2764:	32 60       	ori	r19, 0x02	; 2
    2766:	2e 5f       	subi	r18, 0xFE	; 254
    2768:	3d 93       	st	X+, r19
    276a:	30 e3       	ldi	r19, 0x30	; 48
    276c:	2a 95       	dec	r18
    276e:	e1 f7       	brne	.-8      	; 0x2768 <__ftoa_engine+0x1e>
    2770:	08 95       	ret
    2772:	9f 3f       	cpi	r25, 0xFF	; 255
    2774:	30 f0       	brcs	.+12     	; 0x2782 <__ftoa_engine+0x38>
    2776:	80 38       	cpi	r24, 0x80	; 128
    2778:	71 05       	cpc	r23, r1
    277a:	61 05       	cpc	r22, r1
    277c:	09 f0       	breq	.+2      	; 0x2780 <__ftoa_engine+0x36>
    277e:	3c 5f       	subi	r19, 0xFC	; 252
    2780:	3c 5f       	subi	r19, 0xFC	; 252
    2782:	3d 93       	st	X+, r19
    2784:	91 30       	cpi	r25, 0x01	; 1
    2786:	08 f0       	brcs	.+2      	; 0x278a <__ftoa_engine+0x40>
    2788:	80 68       	ori	r24, 0x80	; 128
    278a:	91 1d       	adc	r25, r1
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	1f 93       	push	r17
    2792:	0f 93       	push	r16
    2794:	ff 92       	push	r15
    2796:	ef 92       	push	r14
    2798:	19 2f       	mov	r17, r25
    279a:	98 7f       	andi	r25, 0xF8	; 248
    279c:	96 95       	lsr	r25
    279e:	e9 2f       	mov	r30, r25
    27a0:	96 95       	lsr	r25
    27a2:	96 95       	lsr	r25
    27a4:	e9 0f       	add	r30, r25
    27a6:	ff 27       	eor	r31, r31
    27a8:	ee 53       	subi	r30, 0x3E	; 62
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	99 27       	eor	r25, r25
    27ae:	33 27       	eor	r19, r19
    27b0:	ee 24       	eor	r14, r14
    27b2:	ff 24       	eor	r15, r15
    27b4:	a7 01       	movw	r20, r14
    27b6:	e7 01       	movw	r28, r14
    27b8:	05 90       	lpm	r0, Z+
    27ba:	08 94       	sec
    27bc:	07 94       	ror	r0
    27be:	28 f4       	brcc	.+10     	; 0x27ca <__ftoa_engine+0x80>
    27c0:	36 0f       	add	r19, r22
    27c2:	e7 1e       	adc	r14, r23
    27c4:	f8 1e       	adc	r15, r24
    27c6:	49 1f       	adc	r20, r25
    27c8:	51 1d       	adc	r21, r1
    27ca:	66 0f       	add	r22, r22
    27cc:	77 1f       	adc	r23, r23
    27ce:	88 1f       	adc	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	06 94       	lsr	r0
    27d4:	a1 f7       	brne	.-24     	; 0x27be <__ftoa_engine+0x74>
    27d6:	05 90       	lpm	r0, Z+
    27d8:	07 94       	ror	r0
    27da:	28 f4       	brcc	.+10     	; 0x27e6 <__ftoa_engine+0x9c>
    27dc:	e7 0e       	add	r14, r23
    27de:	f8 1e       	adc	r15, r24
    27e0:	49 1f       	adc	r20, r25
    27e2:	56 1f       	adc	r21, r22
    27e4:	c1 1d       	adc	r28, r1
    27e6:	77 0f       	add	r23, r23
    27e8:	88 1f       	adc	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	66 1f       	adc	r22, r22
    27ee:	06 94       	lsr	r0
    27f0:	a1 f7       	brne	.-24     	; 0x27da <__ftoa_engine+0x90>
    27f2:	05 90       	lpm	r0, Z+
    27f4:	07 94       	ror	r0
    27f6:	28 f4       	brcc	.+10     	; 0x2802 <__ftoa_engine+0xb8>
    27f8:	f8 0e       	add	r15, r24
    27fa:	49 1f       	adc	r20, r25
    27fc:	56 1f       	adc	r21, r22
    27fe:	c7 1f       	adc	r28, r23
    2800:	d1 1d       	adc	r29, r1
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	66 1f       	adc	r22, r22
    2808:	77 1f       	adc	r23, r23
    280a:	06 94       	lsr	r0
    280c:	a1 f7       	brne	.-24     	; 0x27f6 <__ftoa_engine+0xac>
    280e:	05 90       	lpm	r0, Z+
    2810:	07 94       	ror	r0
    2812:	20 f4       	brcc	.+8      	; 0x281c <__ftoa_engine+0xd2>
    2814:	49 0f       	add	r20, r25
    2816:	56 1f       	adc	r21, r22
    2818:	c7 1f       	adc	r28, r23
    281a:	d8 1f       	adc	r29, r24
    281c:	99 0f       	add	r25, r25
    281e:	66 1f       	adc	r22, r22
    2820:	77 1f       	adc	r23, r23
    2822:	88 1f       	adc	r24, r24
    2824:	06 94       	lsr	r0
    2826:	a9 f7       	brne	.-22     	; 0x2812 <__ftoa_engine+0xc8>
    2828:	84 91       	lpm	r24, Z
    282a:	10 95       	com	r17
    282c:	17 70       	andi	r17, 0x07	; 7
    282e:	41 f0       	breq	.+16     	; 0x2840 <__ftoa_engine+0xf6>
    2830:	d6 95       	lsr	r29
    2832:	c7 95       	ror	r28
    2834:	57 95       	ror	r21
    2836:	47 95       	ror	r20
    2838:	f7 94       	ror	r15
    283a:	e7 94       	ror	r14
    283c:	1a 95       	dec	r17
    283e:	c1 f7       	brne	.-16     	; 0x2830 <__ftoa_engine+0xe6>
    2840:	e8 e6       	ldi	r30, 0x68	; 104
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	68 94       	set
    2846:	15 90       	lpm	r1, Z+
    2848:	15 91       	lpm	r17, Z+
    284a:	35 91       	lpm	r19, Z+
    284c:	65 91       	lpm	r22, Z+
    284e:	95 91       	lpm	r25, Z+
    2850:	05 90       	lpm	r0, Z+
    2852:	7f e2       	ldi	r23, 0x2F	; 47
    2854:	73 95       	inc	r23
    2856:	e1 18       	sub	r14, r1
    2858:	f1 0a       	sbc	r15, r17
    285a:	43 0b       	sbc	r20, r19
    285c:	56 0b       	sbc	r21, r22
    285e:	c9 0b       	sbc	r28, r25
    2860:	d0 09       	sbc	r29, r0
    2862:	c0 f7       	brcc	.-16     	; 0x2854 <__ftoa_engine+0x10a>
    2864:	e1 0c       	add	r14, r1
    2866:	f1 1e       	adc	r15, r17
    2868:	43 1f       	adc	r20, r19
    286a:	56 1f       	adc	r21, r22
    286c:	c9 1f       	adc	r28, r25
    286e:	d0 1d       	adc	r29, r0
    2870:	7e f4       	brtc	.+30     	; 0x2890 <__ftoa_engine+0x146>
    2872:	70 33       	cpi	r23, 0x30	; 48
    2874:	11 f4       	brne	.+4      	; 0x287a <__ftoa_engine+0x130>
    2876:	8a 95       	dec	r24
    2878:	e6 cf       	rjmp	.-52     	; 0x2846 <__ftoa_engine+0xfc>
    287a:	e8 94       	clt
    287c:	01 50       	subi	r16, 0x01	; 1
    287e:	30 f0       	brcs	.+12     	; 0x288c <__ftoa_engine+0x142>
    2880:	08 0f       	add	r16, r24
    2882:	0a f4       	brpl	.+2      	; 0x2886 <__ftoa_engine+0x13c>
    2884:	00 27       	eor	r16, r16
    2886:	02 17       	cp	r16, r18
    2888:	08 f4       	brcc	.+2      	; 0x288c <__ftoa_engine+0x142>
    288a:	20 2f       	mov	r18, r16
    288c:	23 95       	inc	r18
    288e:	02 2f       	mov	r16, r18
    2890:	7a 33       	cpi	r23, 0x3A	; 58
    2892:	28 f0       	brcs	.+10     	; 0x289e <__ftoa_engine+0x154>
    2894:	79 e3       	ldi	r23, 0x39	; 57
    2896:	7d 93       	st	X+, r23
    2898:	2a 95       	dec	r18
    289a:	e9 f7       	brne	.-6      	; 0x2896 <__ftoa_engine+0x14c>
    289c:	10 c0       	rjmp	.+32     	; 0x28be <__ftoa_engine+0x174>
    289e:	7d 93       	st	X+, r23
    28a0:	2a 95       	dec	r18
    28a2:	89 f6       	brne	.-94     	; 0x2846 <__ftoa_engine+0xfc>
    28a4:	06 94       	lsr	r0
    28a6:	97 95       	ror	r25
    28a8:	67 95       	ror	r22
    28aa:	37 95       	ror	r19
    28ac:	17 95       	ror	r17
    28ae:	17 94       	ror	r1
    28b0:	e1 18       	sub	r14, r1
    28b2:	f1 0a       	sbc	r15, r17
    28b4:	43 0b       	sbc	r20, r19
    28b6:	56 0b       	sbc	r21, r22
    28b8:	c9 0b       	sbc	r28, r25
    28ba:	d0 09       	sbc	r29, r0
    28bc:	98 f0       	brcs	.+38     	; 0x28e4 <__ftoa_engine+0x19a>
    28be:	23 95       	inc	r18
    28c0:	7e 91       	ld	r23, -X
    28c2:	73 95       	inc	r23
    28c4:	7a 33       	cpi	r23, 0x3A	; 58
    28c6:	08 f0       	brcs	.+2      	; 0x28ca <__ftoa_engine+0x180>
    28c8:	70 e3       	ldi	r23, 0x30	; 48
    28ca:	7c 93       	st	X, r23
    28cc:	20 13       	cpse	r18, r16
    28ce:	b8 f7       	brcc	.-18     	; 0x28be <__ftoa_engine+0x174>
    28d0:	7e 91       	ld	r23, -X
    28d2:	70 61       	ori	r23, 0x10	; 16
    28d4:	7d 93       	st	X+, r23
    28d6:	30 f0       	brcs	.+12     	; 0x28e4 <__ftoa_engine+0x19a>
    28d8:	83 95       	inc	r24
    28da:	71 e3       	ldi	r23, 0x31	; 49
    28dc:	7d 93       	st	X+, r23
    28de:	70 e3       	ldi	r23, 0x30	; 48
    28e0:	2a 95       	dec	r18
    28e2:	e1 f7       	brne	.-8      	; 0x28dc <__ftoa_engine+0x192>
    28e4:	11 24       	eor	r1, r1
    28e6:	ef 90       	pop	r14
    28e8:	ff 90       	pop	r15
    28ea:	0f 91       	pop	r16
    28ec:	1f 91       	pop	r17
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	99 27       	eor	r25, r25
    28f4:	87 fd       	sbrc	r24, 7
    28f6:	90 95       	com	r25
    28f8:	08 95       	ret

000028fa <strnlen_P>:
    28fa:	fc 01       	movw	r30, r24
    28fc:	05 90       	lpm	r0, Z+
    28fe:	61 50       	subi	r22, 0x01	; 1
    2900:	70 40       	sbci	r23, 0x00	; 0
    2902:	01 10       	cpse	r0, r1
    2904:	d8 f7       	brcc	.-10     	; 0x28fc <strnlen_P+0x2>
    2906:	80 95       	com	r24
    2908:	90 95       	com	r25
    290a:	8e 0f       	add	r24, r30
    290c:	9f 1f       	adc	r25, r31
    290e:	08 95       	ret

00002910 <strnlen>:
    2910:	fc 01       	movw	r30, r24
    2912:	61 50       	subi	r22, 0x01	; 1
    2914:	70 40       	sbci	r23, 0x00	; 0
    2916:	01 90       	ld	r0, Z+
    2918:	01 10       	cpse	r0, r1
    291a:	d8 f7       	brcc	.-10     	; 0x2912 <strnlen+0x2>
    291c:	80 95       	com	r24
    291e:	90 95       	com	r25
    2920:	8e 0f       	add	r24, r30
    2922:	9f 1f       	adc	r25, r31
    2924:	08 95       	ret

00002926 <fputc>:
    2926:	0f 93       	push	r16
    2928:	1f 93       	push	r17
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	fb 01       	movw	r30, r22
    2930:	23 81       	ldd	r18, Z+3	; 0x03
    2932:	21 fd       	sbrc	r18, 1
    2934:	03 c0       	rjmp	.+6      	; 0x293c <fputc+0x16>
    2936:	8f ef       	ldi	r24, 0xFF	; 255
    2938:	9f ef       	ldi	r25, 0xFF	; 255
    293a:	2c c0       	rjmp	.+88     	; 0x2994 <fputc+0x6e>
    293c:	22 ff       	sbrs	r18, 2
    293e:	16 c0       	rjmp	.+44     	; 0x296c <fputc+0x46>
    2940:	46 81       	ldd	r20, Z+6	; 0x06
    2942:	57 81       	ldd	r21, Z+7	; 0x07
    2944:	24 81       	ldd	r18, Z+4	; 0x04
    2946:	35 81       	ldd	r19, Z+5	; 0x05
    2948:	42 17       	cp	r20, r18
    294a:	53 07       	cpc	r21, r19
    294c:	44 f4       	brge	.+16     	; 0x295e <fputc+0x38>
    294e:	a0 81       	ld	r26, Z
    2950:	b1 81       	ldd	r27, Z+1	; 0x01
    2952:	9d 01       	movw	r18, r26
    2954:	2f 5f       	subi	r18, 0xFF	; 255
    2956:	3f 4f       	sbci	r19, 0xFF	; 255
    2958:	31 83       	std	Z+1, r19	; 0x01
    295a:	20 83       	st	Z, r18
    295c:	8c 93       	st	X, r24
    295e:	26 81       	ldd	r18, Z+6	; 0x06
    2960:	37 81       	ldd	r19, Z+7	; 0x07
    2962:	2f 5f       	subi	r18, 0xFF	; 255
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	37 83       	std	Z+7, r19	; 0x07
    2968:	26 83       	std	Z+6, r18	; 0x06
    296a:	14 c0       	rjmp	.+40     	; 0x2994 <fputc+0x6e>
    296c:	8b 01       	movw	r16, r22
    296e:	ec 01       	movw	r28, r24
    2970:	fb 01       	movw	r30, r22
    2972:	00 84       	ldd	r0, Z+8	; 0x08
    2974:	f1 85       	ldd	r31, Z+9	; 0x09
    2976:	e0 2d       	mov	r30, r0
    2978:	09 95       	icall
    297a:	89 2b       	or	r24, r25
    297c:	e1 f6       	brne	.-72     	; 0x2936 <fputc+0x10>
    297e:	d8 01       	movw	r26, r16
    2980:	16 96       	adiw	r26, 0x06	; 6
    2982:	8d 91       	ld	r24, X+
    2984:	9c 91       	ld	r25, X
    2986:	17 97       	sbiw	r26, 0x07	; 7
    2988:	01 96       	adiw	r24, 0x01	; 1
    298a:	17 96       	adiw	r26, 0x07	; 7
    298c:	9c 93       	st	X, r25
    298e:	8e 93       	st	-X, r24
    2990:	16 97       	sbiw	r26, 0x06	; 6
    2992:	ce 01       	movw	r24, r28
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	08 95       	ret

0000299e <__ultoa_invert>:
    299e:	fa 01       	movw	r30, r20
    29a0:	aa 27       	eor	r26, r26
    29a2:	28 30       	cpi	r18, 0x08	; 8
    29a4:	51 f1       	breq	.+84     	; 0x29fa <__ultoa_invert+0x5c>
    29a6:	20 31       	cpi	r18, 0x10	; 16
    29a8:	81 f1       	breq	.+96     	; 0x2a0a <__ultoa_invert+0x6c>
    29aa:	e8 94       	clt
    29ac:	6f 93       	push	r22
    29ae:	6e 7f       	andi	r22, 0xFE	; 254
    29b0:	6e 5f       	subi	r22, 0xFE	; 254
    29b2:	7f 4f       	sbci	r23, 0xFF	; 255
    29b4:	8f 4f       	sbci	r24, 0xFF	; 255
    29b6:	9f 4f       	sbci	r25, 0xFF	; 255
    29b8:	af 4f       	sbci	r26, 0xFF	; 255
    29ba:	b1 e0       	ldi	r27, 0x01	; 1
    29bc:	3e d0       	rcall	.+124    	; 0x2a3a <__ultoa_invert+0x9c>
    29be:	b4 e0       	ldi	r27, 0x04	; 4
    29c0:	3c d0       	rcall	.+120    	; 0x2a3a <__ultoa_invert+0x9c>
    29c2:	67 0f       	add	r22, r23
    29c4:	78 1f       	adc	r23, r24
    29c6:	89 1f       	adc	r24, r25
    29c8:	9a 1f       	adc	r25, r26
    29ca:	a1 1d       	adc	r26, r1
    29cc:	68 0f       	add	r22, r24
    29ce:	79 1f       	adc	r23, r25
    29d0:	8a 1f       	adc	r24, r26
    29d2:	91 1d       	adc	r25, r1
    29d4:	a1 1d       	adc	r26, r1
    29d6:	6a 0f       	add	r22, r26
    29d8:	71 1d       	adc	r23, r1
    29da:	81 1d       	adc	r24, r1
    29dc:	91 1d       	adc	r25, r1
    29de:	a1 1d       	adc	r26, r1
    29e0:	20 d0       	rcall	.+64     	; 0x2a22 <__ultoa_invert+0x84>
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <__ultoa_invert+0x48>
    29e4:	68 94       	set
    29e6:	3f 91       	pop	r19
    29e8:	2a e0       	ldi	r18, 0x0A	; 10
    29ea:	26 9f       	mul	r18, r22
    29ec:	11 24       	eor	r1, r1
    29ee:	30 19       	sub	r19, r0
    29f0:	30 5d       	subi	r19, 0xD0	; 208
    29f2:	31 93       	st	Z+, r19
    29f4:	de f6       	brtc	.-74     	; 0x29ac <__ultoa_invert+0xe>
    29f6:	cf 01       	movw	r24, r30
    29f8:	08 95       	ret
    29fa:	46 2f       	mov	r20, r22
    29fc:	47 70       	andi	r20, 0x07	; 7
    29fe:	40 5d       	subi	r20, 0xD0	; 208
    2a00:	41 93       	st	Z+, r20
    2a02:	b3 e0       	ldi	r27, 0x03	; 3
    2a04:	0f d0       	rcall	.+30     	; 0x2a24 <__ultoa_invert+0x86>
    2a06:	c9 f7       	brne	.-14     	; 0x29fa <__ultoa_invert+0x5c>
    2a08:	f6 cf       	rjmp	.-20     	; 0x29f6 <__ultoa_invert+0x58>
    2a0a:	46 2f       	mov	r20, r22
    2a0c:	4f 70       	andi	r20, 0x0F	; 15
    2a0e:	40 5d       	subi	r20, 0xD0	; 208
    2a10:	4a 33       	cpi	r20, 0x3A	; 58
    2a12:	18 f0       	brcs	.+6      	; 0x2a1a <__ultoa_invert+0x7c>
    2a14:	49 5d       	subi	r20, 0xD9	; 217
    2a16:	31 fd       	sbrc	r19, 1
    2a18:	40 52       	subi	r20, 0x20	; 32
    2a1a:	41 93       	st	Z+, r20
    2a1c:	02 d0       	rcall	.+4      	; 0x2a22 <__ultoa_invert+0x84>
    2a1e:	a9 f7       	brne	.-22     	; 0x2a0a <__ultoa_invert+0x6c>
    2a20:	ea cf       	rjmp	.-44     	; 0x29f6 <__ultoa_invert+0x58>
    2a22:	b4 e0       	ldi	r27, 0x04	; 4
    2a24:	a6 95       	lsr	r26
    2a26:	97 95       	ror	r25
    2a28:	87 95       	ror	r24
    2a2a:	77 95       	ror	r23
    2a2c:	67 95       	ror	r22
    2a2e:	ba 95       	dec	r27
    2a30:	c9 f7       	brne	.-14     	; 0x2a24 <__ultoa_invert+0x86>
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	61 05       	cpc	r22, r1
    2a36:	71 05       	cpc	r23, r1
    2a38:	08 95       	ret
    2a3a:	9b 01       	movw	r18, r22
    2a3c:	ac 01       	movw	r20, r24
    2a3e:	0a 2e       	mov	r0, r26
    2a40:	06 94       	lsr	r0
    2a42:	57 95       	ror	r21
    2a44:	47 95       	ror	r20
    2a46:	37 95       	ror	r19
    2a48:	27 95       	ror	r18
    2a4a:	ba 95       	dec	r27
    2a4c:	c9 f7       	brne	.-14     	; 0x2a40 <__ultoa_invert+0xa2>
    2a4e:	62 0f       	add	r22, r18
    2a50:	73 1f       	adc	r23, r19
    2a52:	84 1f       	adc	r24, r20
    2a54:	95 1f       	adc	r25, r21
    2a56:	a0 1d       	adc	r26, r0
    2a58:	08 95       	ret

00002a5a <__prologue_saves__>:
    2a5a:	2f 92       	push	r2
    2a5c:	3f 92       	push	r3
    2a5e:	4f 92       	push	r4
    2a60:	5f 92       	push	r5
    2a62:	6f 92       	push	r6
    2a64:	7f 92       	push	r7
    2a66:	8f 92       	push	r8
    2a68:	9f 92       	push	r9
    2a6a:	af 92       	push	r10
    2a6c:	bf 92       	push	r11
    2a6e:	cf 92       	push	r12
    2a70:	df 92       	push	r13
    2a72:	ef 92       	push	r14
    2a74:	ff 92       	push	r15
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	ca 1b       	sub	r28, r26
    2a84:	db 0b       	sbc	r29, r27
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	09 94       	ijmp

00002a92 <__epilogue_restores__>:
    2a92:	2a 88       	ldd	r2, Y+18	; 0x12
    2a94:	39 88       	ldd	r3, Y+17	; 0x11
    2a96:	48 88       	ldd	r4, Y+16	; 0x10
    2a98:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aa0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aa2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aa4:	b9 84       	ldd	r11, Y+9	; 0x09
    2aa6:	c8 84       	ldd	r12, Y+8	; 0x08
    2aa8:	df 80       	ldd	r13, Y+7	; 0x07
    2aaa:	ee 80       	ldd	r14, Y+6	; 0x06
    2aac:	fd 80       	ldd	r15, Y+5	; 0x05
    2aae:	0c 81       	ldd	r16, Y+4	; 0x04
    2ab0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ab2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ab4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ab6:	ce 0f       	add	r28, r30
    2ab8:	d1 1d       	adc	r29, r1
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	ed 01       	movw	r28, r26
    2ac6:	08 95       	ret

00002ac8 <_exit>:
    2ac8:	f8 94       	cli

00002aca <__stop_program>:
    2aca:	ff cf       	rjmp	.-2      	; 0x2aca <__stop_program>
