
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  000019a6  00001a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  0080016e  0080016e  00001aa8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026bc  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8e  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a8b  00000000  00000000  0000543e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000778  00000000  00000000  00006ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a93  00000000  00000000  00007644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000245c  00000000  00000000  000080d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000a533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_20>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ea       	ldi	r30, 0xA6	; 166
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 36       	cpi	r26, 0x6E	; 110
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e6       	ldi	r26, 0x6E	; 110
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3d       	cpi	r26, 0xD9	; 217
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d3 06 	call	0xda6	; 0xda6 <main>
      9e:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
      a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
      a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
      ac:	80 ec       	ldi	r24, 0xC0	; 192
      ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
      b2:	8e ee       	ldi	r24, 0xEE	; 238
      b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
      b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
      bc:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
      c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
      c2:	1f 92       	push	r1
      c4:	0f 92       	push	r0
      c6:	0f b6       	in	r0, 0x3f	; 63
      c8:	0f 92       	push	r0
      ca:	11 24       	eor	r1, r1
      cc:	8f 93       	push	r24
      ce:	9f 93       	push	r25
      d0:	ef 93       	push	r30
      d2:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
      d4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
      d8:	81 11       	cpse	r24, r1
      da:	09 c0       	rjmp	.+18     	; 0xee <__vector_21+0x2c>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
      dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      e4:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <mereni_napon+0x1>
      e8:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <mereni_napon>
      ec:	0c c0       	rjmp	.+24     	; 0x106 <__vector_21+0x44>
	else if(ad_kanal == 1)
      ee:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	41 f4       	brne	.+16     	; 0x106 <__vector_21+0x44>
		merena_struja = (uint16_t)ADC;
      f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      fe:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <merena_struja+0x1>
     102:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     106:	ea e7       	ldi	r30, 0x7A	; 122
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
     110:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     114:	8f 5f       	subi	r24, 0xFF	; 255
     116:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     11a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	10 f0       	brcs	.+4      	; 0x126 <__vector_21+0x64>
		ad_kanal = 0;
     122:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
     126:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     12a:	88 23       	and	r24, r24
     12c:	19 f0       	breq	.+6      	; 0x134 <__vector_21+0x72>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	39 f0       	breq	.+14     	; 0x140 <__vector_21+0x7e>
     132:	0e c0       	rjmp	.+28     	; 0x150 <__vector_21+0x8e>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     134:	ec e7       	ldi	r30, 0x7C	; 124
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	8c 7f       	andi	r24, 0xFC	; 252
     13c:	80 83       	st	Z, r24
		break;
     13e:	08 c0       	rjmp	.+16     	; 0x150 <__vector_21+0x8e>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     140:	ec e7       	ldi	r30, 0x7C	; 124
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	8d 7f       	andi	r24, 0xFD	; 253
     148:	80 83       	st	Z, r24
				ADMUX |= (0b1);
     14a:	80 81       	ld	r24, Z
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     150:	ea e7       	ldi	r30, 0x7A	; 122
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 6c       	ori	r24, 0xC0	; 192
     158:	80 83       	st	Z, r24
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us


}
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	9f 91       	pop	r25
     160:	8f 91       	pop	r24
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <EEPROM_read>:


uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     16c:	f9 99       	sbic	0x1f, 1	; 31
     16e:	fe cf       	rjmp	.-4      	; 0x16c <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
     170:	92 bd       	out	0x22, r25	; 34
     172:	81 bd       	out	0x21, r24	; 33
	
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     174:	f8 9a       	sbi	0x1f, 0	; 31
	
	/* Return data from Data Register */
	return EEDR;
     176:	80 b5       	in	r24, 0x20	; 32
}
     178:	08 95       	ret

0000017a <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     17a:	f9 99       	sbic	0x1f, 1	; 31
     17c:	fe cf       	rjmp	.-4      	; 0x17a <EEPROM_write>
	
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     17e:	92 bd       	out	0x22, r25	; 34
     180:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     182:	60 bd       	out	0x20, r22	; 32
	
	/**********************!!!!!!!!!!!!!!!!!!!!!!***************************/
	cli();		//zabrana interapta, po preporuci iz datasheet-a, doci ce do write-faila ako se desi interapt izmedju ova dva koraka
     184:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     186:	fa 9a       	sbi	0x1f, 2	; 31
	
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     188:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();		//dozvola interapta
     18a:	78 94       	sei
     18c:	08 95       	ret

0000018e <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     18e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     192:	88 e4       	ldi	r24, 0x48	; 72
     194:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     198:	08 95       	ret

0000019a <i2c_start_wait>:
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	ec eb       	ldi	r30, 0xBC	; 188
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	24 ea       	ldi	r18, 0xA4	; 164
     1a4:	a9 eb       	ldi	r26, 0xB9	; 185
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	cb eb       	ldi	r28, 0xBB	; 187
     1aa:	d0 e0       	ldi	r29, 0x00	; 0
     1ac:	34 e8       	ldi	r19, 0x84	; 132
     1ae:	44 e9       	ldi	r20, 0x94	; 148
     1b0:	20 83       	st	Z, r18
     1b2:	90 81       	ld	r25, Z
     1b4:	99 23       	and	r25, r25
     1b6:	ec f7       	brge	.-6      	; 0x1b2 <i2c_start_wait+0x18>
     1b8:	9c 91       	ld	r25, X
     1ba:	98 7f       	andi	r25, 0xF8	; 248
     1bc:	98 30       	cpi	r25, 0x08	; 8
     1be:	11 f0       	breq	.+4      	; 0x1c4 <i2c_start_wait+0x2a>
     1c0:	90 31       	cpi	r25, 0x10	; 16
     1c2:	b1 f7       	brne	.-20     	; 0x1b0 <i2c_start_wait+0x16>
     1c4:	88 83       	st	Y, r24
     1c6:	30 83       	st	Z, r19
     1c8:	90 81       	ld	r25, Z
     1ca:	99 23       	and	r25, r25
     1cc:	ec f7       	brge	.-6      	; 0x1c8 <i2c_start_wait+0x2e>
     1ce:	9c 91       	ld	r25, X
     1d0:	98 7f       	andi	r25, 0xF8	; 248
     1d2:	90 32       	cpi	r25, 0x20	; 32
     1d4:	11 f0       	breq	.+4      	; 0x1da <i2c_start_wait+0x40>
     1d6:	98 35       	cpi	r25, 0x58	; 88
     1d8:	29 f4       	brne	.+10     	; 0x1e4 <i2c_start_wait+0x4a>
     1da:	40 83       	st	Z, r20
     1dc:	90 81       	ld	r25, Z
     1de:	94 fd       	sbrc	r25, 4
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <i2c_start_wait+0x42>
     1e2:	e6 cf       	rjmp	.-52     	; 0x1b0 <i2c_start_wait+0x16>
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <i2c_stop>:
     1ea:	84 e9       	ldi	r24, 0x94	; 148
     1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1f0:	ec eb       	ldi	r30, 0xBC	; 188
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	84 fd       	sbrc	r24, 4
     1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <i2c_stop+0xa>
     1fa:	08 95       	ret

000001fc <i2c_write>:
     1fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     200:	84 e8       	ldi	r24, 0x84	; 132
     202:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     206:	ec eb       	ldi	r30, 0xBC	; 188
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	88 23       	and	r24, r24
     20e:	ec f7       	brge	.-6      	; 0x20a <i2c_write+0xe>
     210:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     214:	98 7f       	andi	r25, 0xF8	; 248
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	98 32       	cpi	r25, 0x28	; 40
     21a:	09 f4       	brne	.+2      	; 0x21e <i2c_write+0x22>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	08 95       	ret

00000220 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     220:	84 e8       	ldi	r24, 0x84	; 132
     222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     226:	ec eb       	ldi	r30, 0xBC	; 188
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	88 23       	and	r24, r24
     22e:	ec f7       	brge	.-6      	; 0x22a <i2c_readNak+0xa>
	
    return TWDR;
     230:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     234:	08 95       	ret

00000236 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     236:	cf 93       	push	r28
     238:	c8 2f       	mov	r28, r24
     23a:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     23c:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
	i2c_write(value);                      // write 
     240:	8c 2f       	mov	r24, r28
     242:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     246:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2c_stop>
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <sati_ispis>:




void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	fc 01       	movw	r30, r24
     258:	06 2f       	mov	r16, r22
     25a:	17 2f       	mov	r17, r23
     25c:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     25e:	21 11       	cpse	r18, r1
     260:	28 c0       	rjmp	.+80     	; 0x2b2 <sati_ispis+0x64>
	{
		(*sat)++;
     262:	80 81       	ld	r24, Z
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
     264:	99 ee       	ldi	r25, 0xE9	; 233
     266:	98 0f       	add	r25, r24
     268:	96 30       	cpi	r25, 0x06	; 6
     26a:	18 f0       	brcs	.+6      	; 0x272 <sati_ispis+0x24>
void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sat)++;
     26c:	8f 5f       	subi	r24, 0xFF	; 255
     26e:	80 83       	st	Z, r24
     270:	01 c0       	rjmp	.+2      	; 0x274 <sati_ispis+0x26>
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
			*sat = 0;
     272:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sat);
     274:	80 81       	ld	r24, Z
     276:	1f 92       	push	r1
     278:	8f 93       	push	r24
     27a:	84 e2       	ldi	r24, 0x24	; 36
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	9f 93       	push	r25
     280:	8f 93       	push	r24
     282:	1f 93       	push	r17
     284:	0f 93       	push	r16
     286:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     28a:	88 81       	ld	r24, Y
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	81 50       	subi	r24, 0x01	; 1
     290:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     294:	80 2f       	mov	r24, r16
     296:	91 2f       	mov	r25, r17
     298:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	88 81       	ld	r24, Y
     2a0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	28 c0       	rjmp	.+80     	; 0x302 <sati_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     2b2:	21 30       	cpi	r18, 0x01	; 1
     2b4:	31 f5       	brne	.+76     	; 0x302 <sati_ispis+0xb4>
	{
		(*sat)--;
     2b6:	80 81       	ld	r24, Z
     2b8:	81 50       	subi	r24, 0x01	; 1
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     2ba:	8a 3f       	cpi	r24, 0xFA	; 250
     2bc:	10 f4       	brcc	.+4      	; 0x2c2 <sati_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sat)--;
     2be:	80 83       	st	Z, r24
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <sati_ispis+0x78>
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sat = 23;
     2c2:	87 e1       	ldi	r24, 0x17	; 23
     2c4:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sat);
     2c6:	80 81       	ld	r24, Z
     2c8:	1f 92       	push	r1
     2ca:	8f 93       	push	r24
     2cc:	84 e2       	ldi	r24, 0x24	; 36
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	9f 93       	push	r25
     2d2:	8f 93       	push	r24
     2d4:	1f 93       	push	r17
     2d6:	0f 93       	push	r16
     2d8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     2dc:	88 81       	ld	r24, Y
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	81 50       	subi	r24, 0x01	; 1
     2e2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     2e6:	80 2f       	mov	r24, r16
     2e8:	91 2f       	mov	r25, r17
     2ea:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	88 81       	ld	r24, Y
     2f2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
	}
	
	
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	08 95       	ret

0000030c <minuti_ispis>:

void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	fc 01       	movw	r30, r24
     316:	06 2f       	mov	r16, r22
     318:	17 2f       	mov	r17, r23
     31a:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     31c:	21 11       	cpse	r18, r1
     31e:	28 c0       	rjmp	.+80     	; 0x370 <minuti_ispis+0x64>
	{
		(*minut)++;
     320:	80 81       	ld	r24, Z
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
     322:	95 ec       	ldi	r25, 0xC5	; 197
     324:	98 0f       	add	r25, r24
     326:	95 30       	cpi	r25, 0x05	; 5
     328:	18 f0       	brcs	.+6      	; 0x330 <minuti_ispis+0x24>
void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*minut)++;
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	80 83       	st	Z, r24
     32e:	01 c0       	rjmp	.+2      	; 0x332 <minuti_ispis+0x26>
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
			*minut = 0;
     330:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *minut);
     332:	80 81       	ld	r24, Z
     334:	1f 92       	push	r1
     336:	8f 93       	push	r24
     338:	84 e2       	ldi	r24, 0x24	; 36
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	1f 93       	push	r17
     342:	0f 93       	push	r16
     344:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     348:	88 81       	ld	r24, Y
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     352:	80 2f       	mov	r24, r16
     354:	91 2f       	mov	r25, r17
     356:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     35a:	61 e0       	ldi	r22, 0x01	; 1
     35c:	88 81       	ld	r24, Y
     35e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	28 c0       	rjmp	.+80     	; 0x3c0 <minuti_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     370:	21 30       	cpi	r18, 0x01	; 1
     372:	31 f5       	brne	.+76     	; 0x3c0 <minuti_ispis+0xb4>
	{
		(*minut)--;
     374:	80 81       	ld	r24, Z
     376:	81 50       	subi	r24, 0x01	; 1
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     378:	8a 3f       	cpi	r24, 0xFA	; 250
     37a:	10 f4       	brcc	.+4      	; 0x380 <minuti_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*minut)--;
     37c:	80 83       	st	Z, r24
     37e:	02 c0       	rjmp	.+4      	; 0x384 <minuti_ispis+0x78>
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*minut = 59;
     380:	8b e3       	ldi	r24, 0x3B	; 59
     382:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *minut);
     384:	80 81       	ld	r24, Z
     386:	1f 92       	push	r1
     388:	8f 93       	push	r24
     38a:	84 e2       	ldi	r24, 0x24	; 36
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	9f 93       	push	r25
     390:	8f 93       	push	r24
     392:	1f 93       	push	r17
     394:	0f 93       	push	r16
     396:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     39a:	88 81       	ld	r24, Y
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	81 50       	subi	r24, 0x01	; 1
     3a0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     3a4:	80 2f       	mov	r24, r16
     3a6:	91 2f       	mov	r25, r17
     3a8:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	88 81       	ld	r24, Y
     3b0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
	}
	
	
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <sekundi_ispis>:

void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	fc 01       	movw	r30, r24
     3d4:	06 2f       	mov	r16, r22
     3d6:	17 2f       	mov	r17, r23
     3d8:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     3da:	21 11       	cpse	r18, r1
     3dc:	28 c0       	rjmp	.+80     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		(*sekund)++;
     3de:	80 81       	ld	r24, Z
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
     3e0:	95 ec       	ldi	r25, 0xC5	; 197
     3e2:	98 0f       	add	r25, r24
     3e4:	95 30       	cpi	r25, 0x05	; 5
     3e6:	18 f0       	brcs	.+6      	; 0x3ee <sekundi_ispis+0x24>
void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sekund)++;
     3e8:	8f 5f       	subi	r24, 0xFF	; 255
     3ea:	80 83       	st	Z, r24
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <sekundi_ispis+0x26>
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
			*sekund = 0;
     3ee:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sekund);
     3f0:	80 81       	ld	r24, Z
     3f2:	1f 92       	push	r1
     3f4:	8f 93       	push	r24
     3f6:	84 e2       	ldi	r24, 0x24	; 36
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	1f 93       	push	r17
     400:	0f 93       	push	r16
     402:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     406:	88 81       	ld	r24, Y
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	81 50       	subi	r24, 0x01	; 1
     40c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     410:	80 2f       	mov	r24, r16
     412:	91 2f       	mov	r25, r17
     414:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	88 81       	ld	r24, Y
     41c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	28 c0       	rjmp	.+80     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	}
	else if (inc_dec == UMANJI)
     42e:	21 30       	cpi	r18, 0x01	; 1
     430:	31 f5       	brne	.+76     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	{
		(*sekund)--;
     432:	80 81       	ld	r24, Z
     434:	81 50       	subi	r24, 0x01	; 1
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     436:	8a 3f       	cpi	r24, 0xFA	; 250
     438:	10 f4       	brcc	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sekund)--;
     43a:	80 83       	st	Z, r24
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sekund = 59;
     43e:	8b e3       	ldi	r24, 0x3B	; 59
     440:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sekund);
     442:	80 81       	ld	r24, Z
     444:	1f 92       	push	r1
     446:	8f 93       	push	r24
     448:	84 e2       	ldi	r24, 0x24	; 36
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	1f 93       	push	r17
     452:	0f 93       	push	r16
     454:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     458:	88 81       	ld	r24, Y
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	81 50       	subi	r24, 0x01	; 1
     45e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     462:	80 2f       	mov	r24, r16
     464:	91 2f       	mov	r25, r17
     466:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	88 81       	ld	r24, Y
     46e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
	}
	
	
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     488:	cf 93       	push	r28
     48a:	c8 2f       	mov	r28, r24
     48c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <led_pin>
     490:	84 60       	ori	r24, 0x04	; 4
     492:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <led_pin>
     496:	6e e4       	ldi	r22, 0x4E	; 78
     498:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     49c:	87 ec       	ldi	r24, 0xC7	; 199
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <putnibble+0x18>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <putnibble+0x1e>
     4a6:	00 00       	nop
     4a8:	c2 95       	swap	r28
     4aa:	c0 7f       	andi	r28, 0xF0	; 240
     4ac:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <led_pin>
     4b0:	6e e4       	ldi	r22, 0x4E	; 78
     4b2:	8c 2b       	or	r24, r28
     4b4:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     4b8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <led_pin>
     4bc:	8b 7f       	andi	r24, 0xFB	; 251
     4be:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <led_pin>
     4c2:	6e e4       	ldi	r22, 0x4E	; 78
     4c4:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     4c8:	87 ec       	ldi	r24, 0xC7	; 199
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <putnibble+0x44>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <putnibble+0x4a>
     4d2:	00 00       	nop
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <lcd1602_send_byte>:
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	c8 2f       	mov	r28, r24
     4de:	d8 2f       	mov	r29, r24
     4e0:	d2 95       	swap	r29
     4e2:	df 70       	andi	r29, 0x0F	; 15
     4e4:	61 11       	cpse	r22, r1
     4e6:	09 c0       	rjmp	.+18     	; 0x4fa <lcd1602_send_byte+0x22>
     4e8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <led_pin>
     4ec:	8e 7f       	andi	r24, 0xFE	; 254
     4ee:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <led_pin>
     4f2:	6e e4       	ldi	r22, 0x4E	; 78
     4f4:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     4f8:	08 c0       	rjmp	.+16     	; 0x50a <lcd1602_send_byte+0x32>
     4fa:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <led_pin>
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <led_pin>
     504:	6e e4       	ldi	r22, 0x4E	; 78
     506:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     50a:	8d 2f       	mov	r24, r29
     50c:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     510:	8c 2f       	mov	r24, r28
     512:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <lcd1602_send_char>:
     51c:	cf 93       	push	r28
     51e:	c8 2f       	mov	r28, r24
     520:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <led_pin>
     524:	81 60       	ori	r24, 0x01	; 1
     526:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <led_pin>
     52a:	6e e4       	ldi	r22, 0x4E	; 78
     52c:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     530:	8c 2f       	mov	r24, r28
     532:	82 95       	swap	r24
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     53a:	8c 2f       	mov	r24, r28
     53c:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <lcd1602_init>:
     544:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <led_pin>
     548:	0e 94 c7 00 	call	0x18e	; 0x18e <i2c_init>
     54c:	8f e5       	ldi	r24, 0x5F	; 95
     54e:	9a ee       	ldi	r25, 0xEA	; 234
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <lcd1602_init+0xc>
     554:	00 c0       	rjmp	.+0      	; 0x556 <lcd1602_init+0x12>
     556:	00 00       	nop
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     55e:	8f e7       	ldi	r24, 0x7F	; 127
     560:	9e e3       	ldi	r25, 0x3E	; 62
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <lcd1602_init+0x1e>
     566:	00 c0       	rjmp	.+0      	; 0x568 <lcd1602_init+0x24>
     568:	00 00       	nop
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     570:	8f e8       	ldi	r24, 0x8F	; 143
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <lcd1602_init+0x30>
     578:	00 c0       	rjmp	.+0      	; 0x57a <lcd1602_init+0x36>
     57a:	00 00       	nop
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     582:	8f e9       	ldi	r24, 0x9F	; 159
     584:	9f e0       	ldi	r25, 0x0F	; 15
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <lcd1602_init+0x42>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <lcd1602_init+0x48>
     58c:	00 00       	nop
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 44 02 	call	0x488	; 0x488 <putnibble>
     594:	8f e9       	ldi	r24, 0x9F	; 159
     596:	9f e0       	ldi	r25, 0x0F	; 15
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <lcd1602_init+0x54>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <lcd1602_init+0x5a>
     59e:	00 00       	nop
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	88 e2       	ldi	r24, 0x28	; 40
     5a4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     5a8:	8f e9       	ldi	r24, 0x9F	; 159
     5aa:	9f e0       	ldi	r25, 0x0F	; 15
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <lcd1602_init+0x68>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <lcd1602_init+0x6e>
     5b2:	00 00       	nop
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	8c e0       	ldi	r24, 0x0C	; 12
     5b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     5bc:	8f e9       	ldi	r24, 0x9F	; 159
     5be:	9f e0       	ldi	r25, 0x0F	; 15
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <lcd1602_init+0x7c>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <lcd1602_init+0x82>
     5c6:	00 00       	nop
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	86 e0       	ldi	r24, 0x06	; 6
     5cc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     5d0:	8f e9       	ldi	r24, 0x9F	; 159
     5d2:	9f e0       	ldi	r25, 0x0F	; 15
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <lcd1602_init+0x90>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <lcd1602_init+0x96>
     5da:	00 00       	nop
     5dc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <led_pin>
     5e0:	88 60       	ori	r24, 0x08	; 8
     5e2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <led_pin>
     5e6:	6e e4       	ldi	r22, 0x4E	; 78
     5e8:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     5ec:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <led_pin>
     5f0:	8d 7f       	andi	r24, 0xFD	; 253
     5f2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <led_pin>
     5f6:	6e e4       	ldi	r22, 0x4E	; 78
     5f8:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_send_packet>
     5fc:	08 95       	ret

000005fe <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     5fe:	90 e4       	ldi	r25, 0x40	; 64
     600:	69 9f       	mul	r22, r25
     602:	80 0d       	add	r24, r0
     604:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	80 68       	ori	r24, 0x80	; 128
     60a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     60e:	08 95       	ret

00000610 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     618:	80 81       	ld	r24, Z
     61a:	88 23       	and	r24, r24
     61c:	59 f0       	breq	.+22     	; 0x634 <lcd1602_send_string+0x24>
     61e:	8f 01       	movw	r16, r30
     620:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     622:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd1602_send_char>
		i++;
     626:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     628:	f8 01       	movw	r30, r16
     62a:	ec 0f       	add	r30, r28
     62c:	f1 1d       	adc	r31, r1
     62e:	80 81       	ld	r24, Z
     630:	81 11       	cpse	r24, r1
     632:	f7 cf       	rjmp	.-18     	; 0x622 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     63c:	88 23       	and	r24, r24
     63e:	29 f0       	breq	.+10     	; 0x64a <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	8f e0       	ldi	r24, 0x0F	; 15
     644:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     648:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	8c e0       	ldi	r24, 0x0C	; 12
     64e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd1602_send_byte>
     652:	08 95       	ret

00000654 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     654:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     656:	dc 01       	movw	r26, r24
     658:	12 96       	adiw	r26, 0x02	; 2
     65a:	2c 91       	ld	r18, X
     65c:	12 97       	sbiw	r26, 0x02	; 2
     65e:	54 e6       	ldi	r21, 0x64	; 100
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	8c 91       	ld	r24, X
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	52 9f       	mul	r21, r18
     668:	80 0d       	add	r24, r0
     66a:	91 1d       	adc	r25, r1
     66c:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     66e:	db 01       	movw	r26, r22
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	2c 91       	ld	r18, X
     674:	12 97       	sbiw	r26, 0x02	; 2
     676:	11 96       	adiw	r26, 0x01	; 1
     678:	6c 91       	ld	r22, X
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	52 9f       	mul	r21, r18
     67e:	60 0d       	add	r22, r0
     680:	71 1d       	adc	r23, r1
     682:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     684:	42 81       	ldd	r20, Z+2	; 0x02
     686:	21 81       	ldd	r18, Z+1	; 0x01
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	54 9f       	mul	r21, r20
     68c:	20 0d       	add	r18, r0
     68e:	31 1d       	adc	r19, r1
     690:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     692:	86 17       	cp	r24, r22
     694:	97 07       	cpc	r25, r23
     696:	68 f0       	brcs	.+26     	; 0x6b2 <period_paljenja+0x5e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	20 f0       	brcs	.+8      	; 0x6a6 <period_paljenja+0x52>
     69e:	28 33       	cpi	r18, 0x38	; 56
     6a0:	b9 e0       	ldi	r27, 0x09	; 9
     6a2:	3b 07       	cpc	r19, r27
     6a4:	78 f0       	brcs	.+30     	; 0x6c4 <period_paljenja+0x70>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	26 17       	cp	r18, r22
     6aa:	37 07       	cpc	r19, r23
     6ac:	70 f0       	brcs	.+28     	; 0x6ca <period_paljenja+0x76>
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     6b2:	28 17       	cp	r18, r24
     6b4:	39 07       	cpc	r19, r25
     6b6:	40 f0       	brcs	.+16     	; 0x6c8 <period_paljenja+0x74>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	26 17       	cp	r18, r22
     6bc:	37 07       	cpc	r19, r23
     6be:	28 f0       	brcs	.+10     	; 0x6ca <period_paljenja+0x76>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     6ca:	08 95       	ret

000006cc <fsm_lcd_menu>:

void fsm_lcd_menu()
{
     6cc:	0f 93       	push	r16
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
	switch(STATE)
     6d2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <STATE>
     6d6:	82 30       	cpi	r24, 0x02	; 2
     6d8:	09 f4       	brne	.+2      	; 0x6dc <fsm_lcd_menu+0x10>
     6da:	7c c0       	rjmp	.+248    	; 0x7d4 <fsm_lcd_menu+0x108>
     6dc:	18 f4       	brcc	.+6      	; 0x6e4 <fsm_lcd_menu+0x18>
     6de:	88 23       	and	r24, r24
     6e0:	41 f0       	breq	.+16     	; 0x6f2 <fsm_lcd_menu+0x26>
     6e2:	5d c3       	rjmp	.+1722   	; 0xd9e <__stack+0x49f>
     6e4:	83 30       	cpi	r24, 0x03	; 3
     6e6:	09 f4       	brne	.+2      	; 0x6ea <fsm_lcd_menu+0x1e>
     6e8:	ed c0       	rjmp	.+474    	; 0x8c4 <fsm_lcd_menu+0x1f8>
     6ea:	84 30       	cpi	r24, 0x04	; 4
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <fsm_lcd_menu+0x24>
     6ee:	f6 c1       	rjmp	.+1004   	; 0xadc <__stack+0x1dd>
     6f0:	56 c3       	rjmp	.+1708   	; 0xd9e <__stack+0x49f>
	{
		
		case DISPL1:
				/* prvi, tj. glavni meni sa ispisom tren. vremena i vremena on/off */
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     6f2:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <flag_pc_int>
     6f6:	88 23       	and	r24, r24
     6f8:	09 f4       	brne	.+2      	; 0x6fc <fsm_lcd_menu+0x30>
     6fa:	60 c0       	rjmp	.+192    	; 0x7bc <fsm_lcd_menu+0xf0>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     6fc:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <flag_pc_int>
			
					getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     700:	00 e0       	ldi	r16, 0x00	; 0
     702:	2e ec       	ldi	r18, 0xCE	; 206
     704:	31 e0       	ldi	r19, 0x01	; 1
     706:	46 ec       	ldi	r20, 0xC6	; 198
     708:	51 e0       	ldi	r21, 0x01	; 1
     70a:	67 ec       	ldi	r22, 0xC7	; 199
     70c:	71 e0       	ldi	r23, 0x01	; 1
     70e:	88 ec       	ldi	r24, 0xC8	; 200
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 68 08 	call	0x10d0	; 0x10d0 <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     716:	e6 ec       	ldi	r30, 0xC6	; 198
     718:	f1 e0       	ldi	r31, 0x01	; 1
     71a:	80 81       	ld	r24, Z
     71c:	1f 92       	push	r1
     71e:	8f 93       	push	r24
     720:	81 81       	ldd	r24, Z+1	; 0x01
     722:	1f 92       	push	r1
     724:	8f 93       	push	r24
     726:	82 81       	ldd	r24, Z+2	; 0x02
     728:	1f 92       	push	r1
     72a:	8f 93       	push	r24
     72c:	85 e0       	ldi	r24, 0x05	; 5
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	ce e8       	ldi	r28, 0x8E	; 142
     736:	d1 e0       	ldi	r29, 0x01	; 1
     738:	df 93       	push	r29
     73a:	cf 93       	push	r28
     73c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
					
					//lcd1602_clear();
			
					/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
					lcd1602_goto_xy(0,0);
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string("    ");
     748:	86 e3       	ldi	r24, 0x36	; 54
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_send_string(bafer);
     750:	ce 01       	movw	r24, r28
     752:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_send_string("    ");
     756:	86 e3       	ldi	r24, 0x36	; 54
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
			
					lcd1602_goto_xy(0,1);
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string("  ");
     766:	88 e3       	ldi	r24, 0x38	; 56
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     76e:	ed eb       	ldi	r30, 0xBD	; 189
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	81 81       	ldd	r24, Z+1	; 0x01
     774:	1f 92       	push	r1
     776:	8f 93       	push	r24
     778:	82 81       	ldd	r24, Z+2	; 0x02
     77a:	1f 92       	push	r1
     77c:	8f 93       	push	r24
     77e:	eb ea       	ldi	r30, 0xAB	; 171
     780:	f1 e0       	ldi	r31, 0x01	; 1
     782:	81 81       	ldd	r24, Z+1	; 0x01
     784:	1f 92       	push	r1
     786:	8f 93       	push	r24
     788:	82 81       	ldd	r24, Z+2	; 0x02
     78a:	1f 92       	push	r1
     78c:	8f 93       	push	r24
     78e:	84 e1       	ldi	r24, 0x14	; 20
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	9f 93       	push	r25
     794:	8f 93       	push	r24
     796:	df 93       	push	r29
     798:	cf 93       	push	r28
     79a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
					lcd1602_send_string(bafer);
     79e:	ce 01       	movw	r24, r28
     7a0:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_send_string("  ");
     7a4:	88 e3       	ldi	r24, 0x38	; 56
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
     7ac:	8d b7       	in	r24, 0x3d	; 61
     7ae:	9e b7       	in	r25, 0x3e	; 62
     7b0:	46 96       	adiw	r24, 0x16	; 22
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	9e bf       	out	0x3e, r25	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	8d bf       	out	0x3d, r24	; 61
			
				}
		
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut   !(tasteri & (1<<TASTER_ENTER))
     7bc:	65 e0       	ldi	r22, 0x05	; 5
     7be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     7c2:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     7c6:	88 23       	and	r24, r24
     7c8:	09 f4       	brne	.+2      	; 0x7cc <fsm_lcd_menu+0x100>
     7ca:	e9 c2       	rjmp	.+1490   	; 0xd9e <__stack+0x49f>
					STATE = MENU1;
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     7d2:	e5 c2       	rjmp	.+1482   	; 0xd9e <__stack+0x49f>
		break;
		
		case MENU1:
					//lcd1602_clear();
		
					lcd1602_goto_xy(0, kursor);
     7d4:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <kursor>
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string(">");
     7de:	89 e2       	ldi	r24, 0x29	; 41
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_goto_xy(0, !kursor);
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     7ec:	81 11       	cpse	r24, r1
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string(" ");
     7f6:	89 e3       	ldi	r24, 0x39	; 57
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		
					lcd1602_goto_xy(1,0);
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string("PODESI SAT     ");
     806:	8b e2       	ldi	r24, 0x2B	; 43
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
					lcd1602_goto_xy(1,1);
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
					lcd1602_send_string("PODESI PERIOD  ");
     816:	8b e3       	ldi	r24, 0x3B	; 59
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     81e:	63 e0       	ldi	r22, 0x03	; 3
     820:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     824:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     828:	88 23       	and	r24, r24
     82a:	61 f0       	breq	.+24     	; 0x844 <fsm_lcd_menu+0x178>
					{
						kursor++;
     82c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     830:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor > 1)
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	1c f4       	brge	.+6      	; 0x83c <fsm_lcd_menu+0x170>
					lcd1602_goto_xy(1,1);
					lcd1602_send_string("PODESI PERIOD  ");
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor++;
     836:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     83a:	b1 c2       	rjmp	.+1378   	; 0xd9e <__stack+0x49f>
						if(kursor > 1)
						kursor = 1;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     842:	ad c2       	rjmp	.+1370   	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     844:	62 e0       	ldi	r22, 0x02	; 2
     846:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     84a:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     84e:	88 23       	and	r24, r24
     850:	51 f0       	breq	.+20     	; 0x866 <fsm_lcd_menu+0x19a>
					{
						kursor--;
     852:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     856:	81 50       	subi	r24, 0x01	; 1
						if(kursor < 0)
     858:	1a f0       	brmi	.+6      	; 0x860 <fsm_lcd_menu+0x194>
						if(kursor > 1)
						kursor = 1;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor--;
     85a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     85e:	9f c2       	rjmp	.+1342   	; 0xd9e <__stack+0x49f>
						if(kursor < 0)
						kursor = 0;
     860:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
     864:	9c c2       	rjmp	.+1336   	; 0xd9e <__stack+0x49f>
					}
					else if(kursor == 0 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     866:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     86a:	81 11       	cpse	r24, r1
     86c:	0d c0       	rjmp	.+26     	; 0x888 <fsm_lcd_menu+0x1bc>
     86e:	65 e0       	ldi	r22, 0x05	; 5
     870:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     874:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     878:	88 23       	and	r24, r24
     87a:	31 f0       	breq	.+12     	; 0x888 <fsm_lcd_menu+0x1bc>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     87c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						STATE = POD_SAT;	//meni za podesavanje sata
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     886:	8b c2       	rjmp	.+1302   	; 0xd9e <__stack+0x49f>
					}
					else if(kursor == 1 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     888:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	69 f4       	brne	.+26     	; 0x8aa <fsm_lcd_menu+0x1de>
     890:	65 e0       	ldi	r22, 0x05	; 5
     892:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     896:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     89a:	88 23       	and	r24, r24
     89c:	31 f0       	breq	.+12     	; 0x8aa <fsm_lcd_menu+0x1de>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     89e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     8a2:	84 e0       	ldi	r24, 0x04	; 4
     8a4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     8a8:	7a c2       	rjmp	.+1268   	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     8aa:	64 e0       	ldi	r22, 0x04	; 4
     8ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     8b0:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     8b4:	88 23       	and	r24, r24
     8b6:	09 f4       	brne	.+2      	; 0x8ba <fsm_lcd_menu+0x1ee>
     8b8:	72 c2       	rjmp	.+1252   	; 0xd9e <__stack+0x49f>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     8ba:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     8be:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <STATE>
     8c2:	6d c2       	rjmp	.+1242   	; 0xd9e <__stack+0x49f>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (flag_pod_vremena)
     8c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_pod_vremena>
     8c8:	88 23       	and	r24, r24
     8ca:	09 f4       	brne	.+2      	; 0x8ce <fsm_lcd_menu+0x202>
     8cc:	4b c0       	rjmp	.+150    	; 0x964 <__stack+0x65>
					{
						flag_pod_vremena = 0;
     8ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_pod_vremena>
						snap_shot_vremena = vreme_datum;
     8d2:	89 e0       	ldi	r24, 0x09	; 9
     8d4:	e6 ec       	ldi	r30, 0xC6	; 198
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
     8d8:	a5 e8       	ldi	r26, 0x85	; 133
     8da:	b1 e0       	ldi	r27, 0x01	; 1
     8dc:	01 90       	ld	r0, Z+
     8de:	0d 92       	st	X+, r0
     8e0:	8a 95       	dec	r24
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <fsm_lcd_menu+0x210>
						sprintf(bafer, "%02d:%02d:%02d", snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s);
     8e4:	e5 e8       	ldi	r30, 0x85	; 133
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	80 81       	ld	r24, Z
     8ea:	1f 92       	push	r1
     8ec:	8f 93       	push	r24
     8ee:	81 81       	ldd	r24, Z+1	; 0x01
     8f0:	1f 92       	push	r1
     8f2:	8f 93       	push	r24
     8f4:	82 81       	ldd	r24, Z+2	; 0x02
     8f6:	1f 92       	push	r1
     8f8:	8f 93       	push	r24
     8fa:	85 e0       	ldi	r24, 0x05	; 5
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	9f 93       	push	r25
     900:	8f 93       	push	r24
     902:	8e e8       	ldi	r24, 0x8E	; 142
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	9f 93       	push	r25
     908:	8f 93       	push	r24
     90a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
			
						kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     90e:	85 e0       	ldi	r24, 0x05	; 5
     910:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
			
						lcd1602_goto_xy(0,0);
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("PODESAVANJE SATA");
     91c:	8b e4       	ldi	r24, 0x4B	; 75
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
			
						lcd1602_goto_xy(0,1);
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("    ");
     92c:	86 e3       	ldi	r24, 0x36	; 54
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     934:	8e e8       	ldi	r24, 0x8E	; 142
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string("    ");
     93c:	86 e3       	ldi	r24, 0x36	; 54
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
			
						lcd1602_goto_xy(kursor,1);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     94a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
     954:	8d b7       	in	r24, 0x3d	; 61
     956:	9e b7       	in	r25, 0x3e	; 62
     958:	0a 96       	adiw	r24, 0x0a	; 10
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	9e bf       	out	0x3e, r25	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	8d bf       	out	0x3d, r24	; 61
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     96a:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     96e:	88 23       	and	r24, r24
     970:	89 f0       	breq	.+34     	; 0x994 <__stack+0x95>
					{
						kursor += 3;
     972:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     976:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 11)
     978:	8c 30       	cpi	r24, 0x0C	; 12
     97a:	1c f4       	brge	.+6      	; 0x982 <__stack+0x83>
						lcd1602_cursor_blink(1);
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     97c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     980:	03 c0       	rjmp	.+6      	; 0x988 <__stack+0x89>
						if(kursor > 11)
							kursor = 11;
     982:	8b e0       	ldi	r24, 0x0B	; 11
     984:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
						lcd1602_goto_xy(kursor,1);
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     98e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     992:	05 c2       	rjmp	.+1034   	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     99a:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     99e:	88 23       	and	r24, r24
     9a0:	89 f0       	breq	.+34     	; 0x9c4 <__stack+0xc5>
					{
						kursor -= 3;
     9a2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     9a6:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 5)
     9a8:	85 30       	cpi	r24, 0x05	; 5
     9aa:	1c f0       	brlt	.+6      	; 0x9b2 <__stack+0xb3>
							kursor = 11;
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     9ac:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <__stack+0xb9>
						if(kursor < 5)
							kursor = 5;
     9b2:	85 e0       	ldi	r24, 0x05	; 5
     9b4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
						lcd1602_goto_xy(kursor,1);
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     9be:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     9c2:	ed c1       	rjmp	.+986    	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     9c4:	62 e0       	ldi	r22, 0x02	; 2
     9c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     9ca:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     9ce:	88 23       	and	r24, r24
     9d0:	39 f1       	breq	.+78     	; 0xa20 <__stack+0x121>
					{
						if (kursor == 5)												//podesava SATE ++
     9d2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     9d6:	85 30       	cpi	r24, 0x05	; 5
     9d8:	51 f4       	brne	.+20     	; 0x9ee <__stack+0xef>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UVECAJ);
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	43 e7       	ldi	r20, 0x73	; 115
     9de:	51 e0       	ldi	r21, 0x01	; 1
     9e0:	6e e8       	ldi	r22, 0x8E	; 142
     9e2:	71 e0       	ldi	r23, 0x01	; 1
     9e4:	87 e8       	ldi	r24, 0x87	; 135
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     9ec:	d8 c1       	rjmp	.+944    	; 0xd9e <__stack+0x49f>
						else if (kursor == 8)											//podesava MINUTE ++
     9ee:	88 30       	cpi	r24, 0x08	; 8
     9f0:	51 f4       	brne	.+20     	; 0xa06 <__stack+0x107>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UVECAJ);
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	43 e7       	ldi	r20, 0x73	; 115
     9f6:	51 e0       	ldi	r21, 0x01	; 1
     9f8:	6e e8       	ldi	r22, 0x8E	; 142
     9fa:	71 e0       	ldi	r23, 0x01	; 1
     9fc:	86 e8       	ldi	r24, 0x86	; 134
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     a04:	cc c1       	rjmp	.+920    	; 0xd9e <__stack+0x49f>
						else if (kursor == 11)											//podesava SEKUNDE ++
     a06:	8b 30       	cpi	r24, 0x0B	; 11
     a08:	09 f0       	breq	.+2      	; 0xa0c <__stack+0x10d>
     a0a:	c9 c1       	rjmp	.+914    	; 0xd9e <__stack+0x49f>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UVECAJ);
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	43 e7       	ldi	r20, 0x73	; 115
     a10:	51 e0       	ldi	r21, 0x01	; 1
     a12:	6e e8       	ldi	r22, 0x8E	; 142
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	85 e8       	ldi	r24, 0x85	; 133
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <sekundi_ispis>
     a1e:	bf c1       	rjmp	.+894    	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     a20:	63 e0       	ldi	r22, 0x03	; 3
     a22:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     a26:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     a2a:	88 23       	and	r24, r24
     a2c:	39 f1       	breq	.+78     	; 0xa7c <__stack+0x17d>
					{
						if (kursor == 5)												//podesava SATE --
     a2e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     a32:	85 30       	cpi	r24, 0x05	; 5
     a34:	51 f4       	brne	.+20     	; 0xa4a <__stack+0x14b>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UMANJI);
     a36:	21 e0       	ldi	r18, 0x01	; 1
     a38:	43 e7       	ldi	r20, 0x73	; 115
     a3a:	51 e0       	ldi	r21, 0x01	; 1
     a3c:	6e e8       	ldi	r22, 0x8E	; 142
     a3e:	71 e0       	ldi	r23, 0x01	; 1
     a40:	87 e8       	ldi	r24, 0x87	; 135
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     a48:	aa c1       	rjmp	.+852    	; 0xd9e <__stack+0x49f>
						else if (kursor == 8)											//podesava MINUTE --
     a4a:	88 30       	cpi	r24, 0x08	; 8
     a4c:	51 f4       	brne	.+20     	; 0xa62 <__stack+0x163>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UMANJI);
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	43 e7       	ldi	r20, 0x73	; 115
     a52:	51 e0       	ldi	r21, 0x01	; 1
     a54:	6e e8       	ldi	r22, 0x8E	; 142
     a56:	71 e0       	ldi	r23, 0x01	; 1
     a58:	86 e8       	ldi	r24, 0x86	; 134
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     a60:	9e c1       	rjmp	.+828    	; 0xd9e <__stack+0x49f>
						else if (kursor == 11)											//podesava SEKUNDE --
     a62:	8b 30       	cpi	r24, 0x0B	; 11
     a64:	09 f0       	breq	.+2      	; 0xa68 <__stack+0x169>
     a66:	9b c1       	rjmp	.+822    	; 0xd9e <__stack+0x49f>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UMANJI);
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	43 e7       	ldi	r20, 0x73	; 115
     a6c:	51 e0       	ldi	r21, 0x01	; 1
     a6e:	6e e8       	ldi	r22, 0x8E	; 142
     a70:	71 e0       	ldi	r23, 0x01	; 1
     a72:	85 e8       	ldi	r24, 0x85	; 133
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 e5 01 	call	0x3ca	; 0x3ca <sekundi_ispis>
     a7a:	91 c1       	rjmp	.+802    	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//Potvrdi vreme koje vidis na ekranu i promeni vreme; izadji iz menija
     a7c:	65 e0       	ldi	r22, 0x05	; 5
     a7e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     a82:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     a86:	88 23       	and	r24, r24
     a88:	a9 f0       	breq	.+42     	; 0xab4 <__stack+0x1b5>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s, am, _24_hour_format);
     a8a:	e5 e8       	ldi	r30, 0x85	; 133
     a8c:	f1 e0       	ldi	r31, 0x01	; 1
     a8e:	00 e0       	ldi	r16, 0x00	; 0
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	40 81       	ld	r20, Z
     a94:	61 81       	ldd	r22, Z+1	; 0x01
     a96:	82 81       	ldd	r24, Z+2	; 0x02
     a98:	0e 94 a6 08 	call	0x114c	; 0x114c <setTime>
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     aa2:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     ab2:	75 c1       	rjmp	.+746    	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     ab4:	64 e0       	ldi	r22, 0x04	; 4
     ab6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     aba:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     abe:	88 23       	and	r24, r24
     ac0:	09 f4       	brne	.+2      	; 0xac4 <__stack+0x1c5>
     ac2:	6d c1       	rjmp	.+730    	; 0xd9e <__stack+0x49f>
					{
						/* Vreme setujem samo ako je stisnut ENTER, ako je stisnuto NAZAD, vreme se ne dira, tj. ovde se ne dira */
								//setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     aca:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     ada:	61 c1       	rjmp	.+706    	; 0xd9e <__stack+0x49f>
		break;
		
		case POD_ON_OFF:																				/************************* TODO: UPIS U EEPROM ************************/
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
     adc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ae0:	88 23       	and	r24, r24
     ae2:	09 f4       	brne	.+2      	; 0xae6 <__stack+0x1e7>
     ae4:	59 c0       	rjmp	.+178    	; 0xb98 <__stack+0x299>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
     ae6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						
						snap_vreme_paljenja = vreme_paljenja;	
     aea:	89 e0       	ldi	r24, 0x09	; 9
     aec:	eb ea       	ldi	r30, 0xAB	; 171
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	a4 eb       	ldi	r26, 0xB4	; 180
     af2:	b1 e0       	ldi	r27, 0x01	; 1
     af4:	01 90       	ld	r0, Z+
     af6:	0d 92       	st	X+, r0
     af8:	8a 95       	dec	r24
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <__stack+0x1f5>
						snap_vreme_gasenja = vreme_gasenja;
     afc:	89 e0       	ldi	r24, 0x09	; 9
     afe:	ed eb       	ldi	r30, 0xBD	; 189
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	a2 ea       	ldi	r26, 0xA2	; 162
     b04:	b1 e0       	ldi	r27, 0x01	; 1
     b06:	01 90       	ld	r0, Z+
     b08:	0d 92       	st	X+, r0
     b0a:	8a 95       	dec	r24
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <__stack+0x207>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
						
						lcd1602_goto_xy(0,0);
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("  UPALI--UGASI  ");
     b1c:	8c e5       	ldi	r24, 0x5C	; 92
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     b24:	e2 ea       	ldi	r30, 0xA2	; 162
     b26:	f1 e0       	ldi	r31, 0x01	; 1
     b28:	81 81       	ldd	r24, Z+1	; 0x01
     b2a:	1f 92       	push	r1
     b2c:	8f 93       	push	r24
     b2e:	82 81       	ldd	r24, Z+2	; 0x02
     b30:	1f 92       	push	r1
     b32:	8f 93       	push	r24
     b34:	e4 eb       	ldi	r30, 0xB4	; 180
     b36:	f1 e0       	ldi	r31, 0x01	; 1
     b38:	81 81       	ldd	r24, Z+1	; 0x01
     b3a:	1f 92       	push	r1
     b3c:	8f 93       	push	r24
     b3e:	82 81       	ldd	r24, Z+2	; 0x02
     b40:	1f 92       	push	r1
     b42:	8f 93       	push	r24
     b44:	84 e1       	ldi	r24, 0x14	; 20
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	8e e8       	ldi	r24, 0x8E	; 142
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	9f 93       	push	r25
     b52:	8f 93       	push	r24
     b54:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
						
						lcd1602_goto_xy(0,1);
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_send_string("  ");
     b60:	88 e3       	ldi	r24, 0x38	; 56
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     b68:	8e e8       	ldi	r24, 0x8E	; 142
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						lcd1602_send_string("  ");
     b70:	88 e3       	ldi	r24, 0x38	; 56
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 08 03 	call	0x610	; 0x610 <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     b7e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
     b88:	8d b7       	in	r24, 0x3d	; 61
     b8a:	9e b7       	in	r25, 0x3e	; 62
     b8c:	0c 96       	adiw	r24, 0x0c	; 12
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	9e bf       	out	0x3e, r25	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     b9e:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     ba2:	88 23       	and	r24, r24
     ba4:	c9 f0       	breq	.+50     	; 0xbd8 <__stack+0x2d9>
					{
						kursor += 3;
     ba6:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
     baa:	9c ef       	ldi	r25, 0xFC	; 252
     bac:	98 0f       	add	r25, r24
     bae:	93 30       	cpi	r25, 0x03	; 3
     bb0:	20 f4       	brcc	.+8      	; 0xbba <__stack+0x2bb>
							kursor = 10;
     bb2:	8a e0       	ldi	r24, 0x0A	; 10
     bb4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     bb8:	09 c0       	rjmp	.+18     	; 0xbcc <__stack+0x2cd>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     bba:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
     bbc:	8e 30       	cpi	r24, 0x0E	; 14
     bbe:	1c f4       	brge	.+6      	; 0xbc6 <__stack+0x2c7>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     bc0:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     bc4:	03 c0       	rjmp	.+6      	; 0xbcc <__stack+0x2cd>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
							kursor = 13;
     bc6:	8d e0       	ldi	r24, 0x0D	; 13
     bc8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     bd2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     bd6:	e3 c0       	rjmp	.+454    	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     bde:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     be2:	88 23       	and	r24, r24
     be4:	c9 f0       	breq	.+50     	; 0xc18 <__stack+0x319>
					{
						kursor -= 3;
     be6:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
     bea:	96 ef       	ldi	r25, 0xF6	; 246
     bec:	98 0f       	add	r25, r24
     bee:	93 30       	cpi	r25, 0x03	; 3
     bf0:	20 f4       	brcc	.+8      	; 0xbfa <__stack+0x2fb>
							kursor = 6;
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     bf8:	09 c0       	rjmp	.+18     	; 0xc0c <__stack+0x30d>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     bfa:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	1c f0       	brlt	.+6      	; 0xc06 <__stack+0x307>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     c00:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <__stack+0x30d>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
							kursor = 3;
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     c12:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd1602_goto_xy>
     c16:	c3 c0       	rjmp	.+390    	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     c18:	62 e0       	ldi	r22, 0x02	; 2
     c1a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     c1e:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     c22:	88 23       	and	r24, r24
     c24:	99 f1       	breq	.+102    	; 0xc8c <__stack+0x38d>
					{
						if (kursor == 3)												//podesava SATE_ON ++
     c26:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     c2a:	83 30       	cpi	r24, 0x03	; 3
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__stack+0x343>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	43 e7       	ldi	r20, 0x73	; 115
     c32:	51 e0       	ldi	r21, 0x01	; 1
     c34:	6e e8       	ldi	r22, 0x8E	; 142
     c36:	71 e0       	ldi	r23, 0x01	; 1
     c38:	86 eb       	ldi	r24, 0xB6	; 182
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     c40:	ae c0       	rjmp	.+348    	; 0xd9e <__stack+0x49f>
						else if (kursor == 6)											//podesava MINUTE_ON ++
     c42:	86 30       	cpi	r24, 0x06	; 6
     c44:	51 f4       	brne	.+20     	; 0xc5a <__stack+0x35b>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	43 e7       	ldi	r20, 0x73	; 115
     c4a:	51 e0       	ldi	r21, 0x01	; 1
     c4c:	6e e8       	ldi	r22, 0x8E	; 142
     c4e:	71 e0       	ldi	r23, 0x01	; 1
     c50:	85 eb       	ldi	r24, 0xB5	; 181
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     c58:	a2 c0       	rjmp	.+324    	; 0xd9e <__stack+0x49f>
						else if (kursor == 10)											//podesava SATE_OFF ++
     c5a:	8a 30       	cpi	r24, 0x0A	; 10
     c5c:	51 f4       	brne	.+20     	; 0xc72 <__stack+0x373>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	43 e7       	ldi	r20, 0x73	; 115
     c62:	51 e0       	ldi	r21, 0x01	; 1
     c64:	6e e8       	ldi	r22, 0x8E	; 142
     c66:	71 e0       	ldi	r23, 0x01	; 1
     c68:	84 ea       	ldi	r24, 0xA4	; 164
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     c70:	96 c0       	rjmp	.+300    	; 0xd9e <__stack+0x49f>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
     c72:	8d 30       	cpi	r24, 0x0D	; 13
     c74:	09 f0       	breq	.+2      	; 0xc78 <__stack+0x379>
     c76:	93 c0       	rjmp	.+294    	; 0xd9e <__stack+0x49f>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	43 e7       	ldi	r20, 0x73	; 115
     c7c:	51 e0       	ldi	r21, 0x01	; 1
     c7e:	6e e8       	ldi	r22, 0x8E	; 142
     c80:	71 e0       	ldi	r23, 0x01	; 1
     c82:	83 ea       	ldi	r24, 0xA3	; 163
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     c8a:	89 c0       	rjmp	.+274    	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     c8c:	63 e0       	ldi	r22, 0x03	; 3
     c8e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     c92:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     c96:	88 23       	and	r24, r24
     c98:	99 f1       	breq	.+102    	; 0xd00 <__stack+0x401>
					{
						if (kursor == 3)												//podesava SATE_ON --
     c9a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kursor>
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	51 f4       	brne	.+20     	; 0xcb6 <__stack+0x3b7>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
     ca2:	21 e0       	ldi	r18, 0x01	; 1
     ca4:	43 e7       	ldi	r20, 0x73	; 115
     ca6:	51 e0       	ldi	r21, 0x01	; 1
     ca8:	6e e8       	ldi	r22, 0x8E	; 142
     caa:	71 e0       	ldi	r23, 0x01	; 1
     cac:	86 eb       	ldi	r24, 0xB6	; 182
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     cb4:	74 c0       	rjmp	.+232    	; 0xd9e <__stack+0x49f>
						else if (kursor == 6)											//podesava MINUTE_ON --
     cb6:	86 30       	cpi	r24, 0x06	; 6
     cb8:	51 f4       	brne	.+20     	; 0xcce <__stack+0x3cf>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
     cba:	21 e0       	ldi	r18, 0x01	; 1
     cbc:	43 e7       	ldi	r20, 0x73	; 115
     cbe:	51 e0       	ldi	r21, 0x01	; 1
     cc0:	6e e8       	ldi	r22, 0x8E	; 142
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	85 eb       	ldi	r24, 0xB5	; 181
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     ccc:	68 c0       	rjmp	.+208    	; 0xd9e <__stack+0x49f>
						else if (kursor == 10)											//podesava SATE_OFF --
     cce:	8a 30       	cpi	r24, 0x0A	; 10
     cd0:	51 f4       	brne	.+20     	; 0xce6 <__stack+0x3e7>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
     cd2:	21 e0       	ldi	r18, 0x01	; 1
     cd4:	43 e7       	ldi	r20, 0x73	; 115
     cd6:	51 e0       	ldi	r21, 0x01	; 1
     cd8:	6e e8       	ldi	r22, 0x8E	; 142
     cda:	71 e0       	ldi	r23, 0x01	; 1
     cdc:	84 ea       	ldi	r24, 0xA4	; 164
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	0e 94 27 01 	call	0x24e	; 0x24e <sati_ispis>
     ce4:	5c c0       	rjmp	.+184    	; 0xd9e <__stack+0x49f>
						else if (kursor == 13)											//podesava MINUTE_OFF --
     ce6:	8d 30       	cpi	r24, 0x0D	; 13
     ce8:	09 f0       	breq	.+2      	; 0xcec <__stack+0x3ed>
     cea:	59 c0       	rjmp	.+178    	; 0xd9e <__stack+0x49f>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
     cec:	21 e0       	ldi	r18, 0x01	; 1
     cee:	43 e7       	ldi	r20, 0x73	; 115
     cf0:	51 e0       	ldi	r21, 0x01	; 1
     cf2:	6e e8       	ldi	r22, 0x8E	; 142
     cf4:	71 e0       	ldi	r23, 0x01	; 1
     cf6:	83 ea       	ldi	r24, 0xA3	; 163
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	0e 94 86 01 	call	0x30c	; 0x30c <minuti_ispis>
     cfe:	4f c0       	rjmp	.+158    	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
     d00:	65 e0       	ldi	r22, 0x05	; 5
     d02:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     d06:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     d0a:	88 23       	and	r24, r24
     d0c:	b1 f1       	breq	.+108    	; 0xd7a <__stack+0x47b>
					{
						vreme_paljenja = snap_vreme_paljenja;	//konacno upisem
     d0e:	89 e0       	ldi	r24, 0x09	; 9
     d10:	e4 eb       	ldi	r30, 0xB4	; 180
     d12:	f1 e0       	ldi	r31, 0x01	; 1
     d14:	ab ea       	ldi	r26, 0xAB	; 171
     d16:	b1 e0       	ldi	r27, 0x01	; 1
     d18:	01 90       	ld	r0, Z+
     d1a:	0d 92       	st	X+, r0
     d1c:	8a 95       	dec	r24
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <__stack+0x419>
						vreme_gasenja = snap_vreme_gasenja;
     d20:	89 e0       	ldi	r24, 0x09	; 9
     d22:	e2 ea       	ldi	r30, 0xA2	; 162
     d24:	f1 e0       	ldi	r31, 0x01	; 1
     d26:	ad eb       	ldi	r26, 0xBD	; 189
     d28:	b1 e0       	ldi	r27, 0x01	; 1
     d2a:	01 90       	ld	r0, Z+
     d2c:	0d 92       	st	X+, r0
     d2e:	8a 95       	dec	r24
     d30:	e1 f7       	brne	.-8      	; 0xd2a <__stack+0x42b>
						
						/* upis u eeprom */
						EEPROM_write(UPALI_HR_ADR, vreme_paljenja.hr);
     d32:	cb ea       	ldi	r28, 0xAB	; 171
     d34:	d1 e0       	ldi	r29, 0x01	; 1
     d36:	6a 81       	ldd	r22, Y+2	; 0x02
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(UPALI_MIN_ADR, vreme_paljenja.min);
     d40:	69 81       	ldd	r22, Y+1	; 0x01
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(UGASI_HR_ADR, vreme_gasenja.hr);
     d4a:	cd eb       	ldi	r28, 0xBD	; 189
     d4c:	d1 e0       	ldi	r29, 0x01	; 1
     d4e:	6a 81       	ldd	r22, Y+2	; 0x02
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						EEPROM_write(UGASI_MIN_ADR, vreme_gasenja.min);
     d58:	69 81       	ldd	r22, Y+1	; 0x01
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor = 0;					//reset kursora
     d68:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
     d78:	12 c0       	rjmp	.+36     	; 0xd9e <__stack+0x49f>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     d7a:	64 e0       	ldi	r22, 0x04	; 4
     d7c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri>
     d80:	0e 94 b1 07 	call	0xf62	; 0xf62 <ocitaj_jedan_taster>
     d84:	88 23       	and	r24, r24
     d86:	59 f0       	breq	.+22     	; 0xd9e <__stack+0x49f>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor = 0;					//reset kursora
     d8e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <STATE>
		
		
		default: {}
		
	}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	0f 91       	pop	r16
     da4:	08 95       	ret

00000da6 <main>:
{
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			
     da6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
     daa:	0e 94 c7 00 	call	0x18e	; 0x18e <i2c_init>
	lcd1602_init();
     dae:	0e 94 a2 02 	call	0x544	; 0x544 <lcd1602_init>
	ADC_init();				
     db2:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda 500k
     db6:	60 e2       	ldi	r22, 0x20	; 32
     db8:	71 ea       	ldi	r23, 0xA1	; 161
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 5d 09 	call	0x12ba	; 0x12ba <uart_init>
	DS3231_init();			//RTC init
     dc2:	0e 94 5f 08 	call	0x10be	; 0x10be <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
     dc6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <pc_init>
	tasteri_init();			//NAPOMENA: PD2-7 INPUT, INT_PULLUP=ON
     dca:	0e 94 7b 07 	call	0xef6	; 0xef6 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
     dce:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;		//pinB 4 OUTPUT 
     dd0:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
     dd2:	78 94       	sei
	//EEPROM_write(UPALI_MIN_ADR, 25);
	//EEPROM_write(UGASI_HR_ADR, 5);
	//EEPROM_write(UGASI_MIN_ADR, 45);
	
	/* citanje on-off vremena iz eeproma */
	vreme_paljenja.hr = EEPROM_read(UPALI_HR_ADR);
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
     ddc:	cb ea       	ldi	r28, 0xAB	; 171
     dde:	d1 e0       	ldi	r29, 0x01	; 1
     de0:	8a 83       	std	Y+2, r24	; 0x02
	vreme_paljenja.min = EEPROM_read(UPALI_MIN_ADR);
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
     dea:	89 83       	std	Y+1, r24	; 0x01
	vreme_gasenja.hr = EEPROM_read(UGASI_HR_ADR);
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
     df4:	cd eb       	ldi	r28, 0xBD	; 189
     df6:	d1 e0       	ldi	r29, 0x01	; 1
     df8:	8a 83       	std	Y+2, r24	; 0x02
	vreme_gasenja.min = EEPROM_read(UGASI_MIN_ADR);
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 b6 00 	call	0x16c	; 0x16c <EEPROM_read>
     e02:	89 83       	std	Y+1, r24	; 0x01
	
	snap_vreme_paljenja = vreme_paljenja;
     e04:	89 e0       	ldi	r24, 0x09	; 9
     e06:	eb ea       	ldi	r30, 0xAB	; 171
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	a4 eb       	ldi	r26, 0xB4	; 180
     e0c:	b1 e0       	ldi	r27, 0x01	; 1
     e0e:	01 90       	ld	r0, Z+
     e10:	0d 92       	st	X+, r0
     e12:	8a 95       	dec	r24
     e14:	e1 f7       	brne	.-8      	; 0xe0e <main+0x68>
	snap_vreme_gasenja = vreme_gasenja;
     e16:	89 e0       	ldi	r24, 0x09	; 9
     e18:	fe 01       	movw	r30, r28
     e1a:	a2 ea       	ldi	r26, 0xA2	; 162
     e1c:	b1 e0       	ldi	r27, 0x01	; 1
     e1e:	01 90       	ld	r0, Z+
     e20:	0d 92       	st	X+, r0
     e22:	8a 95       	dec	r24
     e24:	e1 f7       	brne	.-8      	; 0xe1e <main+0x78>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
			
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     e26:	0f 2e       	mov	r0, r31
     e28:	f5 e0       	ldi	r31, 0x05	; 5
     e2a:	ef 2e       	mov	r14, r31
     e2c:	f1 e0       	ldi	r31, 0x01	; 1
     e2e:	ff 2e       	mov	r15, r31
     e30:	f0 2d       	mov	r31, r0
     e32:	ce e8       	ldi	r28, 0x8E	; 142
     e34:	d1 e0       	ldi	r29, 0x01	; 1
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
     e36:	0e 94 88 07 	call	0xf10	; 0xf10 <ocitaj_tastere>
     e3a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tasteri>
		
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
     e3e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <flag_pc_int_pomocni>
     e42:	88 23       	and	r24, r24
     e44:	b1 f1       	breq	.+108    	; 0xeb2 <main+0x10c>
		{
			flag_pc_int_pomocni = 0;
     e46:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     e4a:	00 e0       	ldi	r16, 0x00	; 0
     e4c:	2e ec       	ldi	r18, 0xCE	; 206
     e4e:	31 e0       	ldi	r19, 0x01	; 1
     e50:	46 ec       	ldi	r20, 0xC6	; 198
     e52:	51 e0       	ldi	r21, 0x01	; 1
     e54:	67 ec       	ldi	r22, 0xC7	; 199
     e56:	71 e0       	ldi	r23, 0x01	; 1
     e58:	88 ec       	ldi	r24, 0xC8	; 200
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <getTime>
			
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     e60:	e6 ec       	ldi	r30, 0xC6	; 198
     e62:	f1 e0       	ldi	r31, 0x01	; 1
     e64:	80 81       	ld	r24, Z
     e66:	1f 92       	push	r1
     e68:	8f 93       	push	r24
     e6a:	81 81       	ldd	r24, Z+1	; 0x01
     e6c:	1f 92       	push	r1
     e6e:	8f 93       	push	r24
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	1f 92       	push	r1
     e74:	8f 93       	push	r24
     e76:	ff 92       	push	r15
     e78:	ef 92       	push	r14
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sprintf>
			//send_str(bafer);
			//send_str("\n"); //novi red
			
			/* paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno = period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);
     e82:	46 ec       	ldi	r20, 0xC6	; 198
     e84:	51 e0       	ldi	r21, 0x01	; 1
     e86:	6d eb       	ldi	r22, 0xBD	; 189
     e88:	71 e0       	ldi	r23, 0x01	; 1
     e8a:	8b ea       	ldi	r24, 0xAB	; 171
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	0e 94 2a 03 	call	0x654	; 0x654 <period_paljenja>
     e92:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <ukljuceno>
			
			if (ukljuceno)
     e96:	2d b7       	in	r18, 0x3d	; 61
     e98:	3e b7       	in	r19, 0x3e	; 62
     e9a:	26 5f       	subi	r18, 0xF6	; 246
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	3e bf       	out	0x3e, r19	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	2d bf       	out	0x3d, r18	; 61
     ea8:	88 23       	and	r24, r24
     eaa:	11 f0       	breq	.+4      	; 0xeb0 <main+0x10a>
				PORTB |= 1<<PINB5;   //high
     eac:	2d 9a       	sbi	0x05, 5	; 5
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <main+0x10c>
			else
				PORTB &= ~(1<<PINB5);	//low
     eb0:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
     eb2:	0e 94 66 03 	call	0x6cc	; 0x6cc <fsm_lcd_menu>
		

		
    }
     eb6:	bf cf       	rjmp	.-130    	; 0xe36 <main+0x90>

00000eb8 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
     eb8:	e8 e6       	ldi	r30, 0x68	; 104
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	82 60       	ori	r24, 0x02	; 2
     ec0:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
     ec2:	ec e6       	ldi	r30, 0x6C	; 108
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	88 60       	ori	r24, 0x08	; 8
     eca:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
     ecc:	3b 98       	cbi	0x07, 3	; 7
     ece:	08 95       	ret

00000ed0 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
     ed0:	1f 92       	push	r1
     ed2:	0f 92       	push	r0
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	0f 92       	push	r0
     ed8:	11 24       	eor	r1, r1
     eda:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
     edc:	33 9b       	sbis	0x06, 3	; 6
     ede:	05 c0       	rjmp	.+10     	; 0xeea <__vector_4+0x1a>
	{
		flag_pc_int = 1;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <flag_pc_int>
		flag_pc_int_pomocni = 1;
     ee6:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <flag_pc_int_pomocni>
	}
		
     eea:	8f 91       	pop	r24
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <tasteri_init>:
extern const char *byte_to_binary(int x);

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
     ef6:	8a b1       	in	r24, 0x0a	; 10
     ef8:	8f 70       	andi	r24, 0x0F	; 15
     efa:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
     efc:	84 b1       	in	r24, 0x04	; 4
     efe:	8c 7f       	andi	r24, 0xFC	; 252
     f00:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
     f02:	8b b1       	in	r24, 0x0b	; 11
     f04:	80 6f       	ori	r24, 0xF0	; 240
     f06:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
     f08:	85 b1       	in	r24, 0x05	; 5
     f0a:	83 60       	ori	r24, 0x03	; 3
     f0c:	85 b9       	out	0x05, r24	; 5
     f0e:	08 95       	ret

00000f10 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
     f10:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <flag_prekid_debounce_time_half>
     f14:	88 23       	and	r24, r24
     f16:	69 f0       	breq	.+26     	; 0xf32 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
     f18:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
     f1c:	93 b1       	in	r25, 0x03	; 3
     f1e:	29 b1       	in	r18, 0x09	; 9
     f20:	30 e1       	ldi	r19, 0x10	; 16
     f22:	93 9f       	mul	r25, r19
     f24:	c0 01       	movw	r24, r0
     f26:	11 24       	eor	r1, r1
     f28:	92 2f       	mov	r25, r18
     f2a:	92 95       	swap	r25
     f2c:	9f 70       	andi	r25, 0x0F	; 15
     f2e:	89 2b       	or	r24, r25
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
     f32:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
     f34:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <flag_prekid_debounce_time>
     f38:	99 23       	and	r25, r25
     f3a:	81 f0       	breq	.+32     	; 0xf5c <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
     f3c:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
     f40:	93 b1       	in	r25, 0x03	; 3
     f42:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
     f44:	50 e1       	ldi	r21, 0x10	; 16
     f46:	95 9f       	mul	r25, r21
     f48:	90 01       	movw	r18, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	94 2f       	mov	r25, r20
     f4e:	92 95       	swap	r25
     f50:	9f 70       	andi	r25, 0x0F	; 15
     f52:	29 2b       	or	r18, r25
     f54:	82 13       	cpse	r24, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
     f58:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tasteri_reg.1953>
		
	}
	
	return tasteri_reg;
}
     f5c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tasteri_reg.1953>
     f60:	08 95       	ret

00000f62 <ocitaj_jedan_taster>:
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	static uint8_t delay_enable = 1;
	uint8_t pom;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	20 95       	com	r18
     f68:	30 95       	com	r19
     f6a:	e6 2f       	mov	r30, r22
     f6c:	a9 01       	movw	r20, r18
     f6e:	06 2e       	mov	r0, r22
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <ocitaj_jedan_taster+0x14>
     f72:	55 95       	asr	r21
     f74:	47 95       	ror	r20
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <ocitaj_jedan_taster+0x10>
     f7a:	40 ff       	sbrs	r20, 0
     f7c:	17 c0       	rjmp	.+46     	; 0xfac <ocitaj_jedan_taster+0x4a>
     f7e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <flag_stisnut.1962>
     f82:	91 11       	cpse	r25, r1
     f84:	13 c0       	rjmp	.+38     	; 0xfac <ocitaj_jedan_taster+0x4a>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <flag_stisnut.1962>
		temp_tast = button;		//zapamtim koji je taster stisnut
     f8c:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <temp_tast.1961>
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
     f90:	80 95       	com	r24
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	06 2e       	mov	r0, r22
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <ocitaj_jedan_taster+0x3c>
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <ocitaj_jedan_taster+0x38>
     fa2:	84 23       	and	r24, r20
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <ocitaj_jedan_taster+0x46>
     fa6:	45 c0       	rjmp	.+138    	; 0x1032 <ocitaj_jedan_taster+0xd0>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	08 95       	ret
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
     fac:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <temp_tast.1961>
     fb0:	e9 2f       	mov	r30, r25
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
     fb2:	80 95       	com	r24
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	09 2e       	mov	r0, r25
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <ocitaj_jedan_taster+0x5e>
     fbc:	44 0f       	add	r20, r20
     fbe:	55 1f       	adc	r21, r21
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <ocitaj_jedan_taster+0x5a>
     fc4:	84 23       	and	r24, r20
     fc6:	19 f1       	breq	.+70     	; 0x100e <ocitaj_jedan_taster+0xac>
     fc8:	8e ef       	ldi	r24, 0xFE	; 254
     fca:	89 0f       	add	r24, r25
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	08 f5       	brcc	.+66     	; 0x1012 <ocitaj_jedan_taster+0xb0>
     fd0:	69 13       	cpse	r22, r25
     fd2:	21 c0       	rjmp	.+66     	; 0x1016 <ocitaj_jedan_taster+0xb4>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <ocitaj_jedan_taster+0x78>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
		   ovo radim da bi bilo moguce brze menjati sate ako je taster ostao stisnut, da ne bi morao 30 puta stiskati i pustati taster */
		//startuj "delay" tajmer, ali samo prvi put
		//ako je delay istekao periodicno togluj promenljivu "stisnut", jer ce to napraviti efekat brzog stiskanja
		//kada je taster otpusten opet dozvoli startovanje "delay" tajmera
		
		if (delay_enable == 1)
     fda:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <delay_enable.1963>
     fde:	91 30       	cpi	r25, 0x01	; 1
     fe0:	31 f4       	brne	.+12     	; 0xfee <ocitaj_jedan_taster+0x8c>
		{
			delay_enable = 0;	//spreci ponovni ulazak
     fe2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <delay_enable.1963>
			delay_timer = 0;	//start, timer ISR ga uvecava
     fe6:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <delay_timer+0x1>
     fea:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <delay_timer>
		}
		if (delay_timer >= 400)	//ako je delay veci od 400ms togluj "stisnut"
     fee:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <delay_timer>
     ff2:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <delay_timer+0x1>
     ff6:	20 39       	cpi	r18, 0x90	; 144
     ff8:	31 40       	sbci	r19, 0x01	; 1
     ffa:	00 f1       	brcs	.+64     	; 0x103c <ocitaj_jedan_taster+0xda>
		{
			if(flag_prekid_50ms)
     ffc:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <flag_prekid_50ms>
    1000:	99 23       	and	r25, r25
    1002:	e1 f0       	breq	.+56     	; 0x103c <ocitaj_jedan_taster+0xda>
			{
				flag_prekid_50ms = 0; //reset flag-a
    1004:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <flag_prekid_50ms>
				stisnut ^= 0b1;	//toggle
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	89 27       	eor	r24, r25
    100c:	08 95       	ret
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <ocitaj_jedan_taster+0xb6>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <ocitaj_jedan_taster+0xb6>
    1016:	80 e0       	ldi	r24, 0x00	; 0
			}
			
				
		}		
	}
	else if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
    1018:	02 c0       	rjmp	.+4      	; 0x101e <ocitaj_jedan_taster+0xbc>
    101a:	35 95       	asr	r19
    101c:	27 95       	ror	r18
    101e:	ea 95       	dec	r30
    1020:	e2 f7       	brpl	.-8      	; 0x101a <ocitaj_jedan_taster+0xb8>
    1022:	20 fd       	sbrc	r18, 0
    1024:	0b c0       	rjmp	.+22     	; 0x103c <ocitaj_jedan_taster+0xda>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
    1026:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <flag_stisnut.1962>
		delay_enable = 1;	//dozvoli ponovno startovanje "delay" tajmera ako je taster otpusten
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <delay_enable.1963>
	sprintf(buff, "flag_stis:%d  ", flag_stisnut);
	send_str(buff);		
	send_str("\n");
	*/
	
	return stisnut;
    1030:	08 95       	ret
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1032:	62 50       	subi	r22, 0x02	; 2
    1034:	62 30       	cpi	r22, 0x02	; 2
    1036:	80 f2       	brcs	.-96     	; 0xfd8 <ocitaj_jedan_taster+0x76>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	ee cf       	rjmp	.-36     	; 0x1018 <ocitaj_jedan_taster+0xb6>
	send_str(buff);		
	send_str("\n");
	*/
	
	return stisnut;
    103c:	08 95       	ret

0000103e <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
    103e:	98 2f       	mov	r25, r24
    1040:	92 95       	swap	r25
    1042:	9f 70       	andi	r25, 0x0F	; 15
    1044:	99 0f       	add	r25, r25
    1046:	29 2f       	mov	r18, r25
    1048:	22 0f       	add	r18, r18
    104a:	22 0f       	add	r18, r18
    104c:	92 0f       	add	r25, r18
    104e:	8f 70       	andi	r24, 0x0F	; 15
    1050:	89 0f       	add	r24, r25
    1052:	08 95       	ret

00001054 <decimal_to_bcd>:
    1054:	9d ec       	ldi	r25, 0xCD	; 205
    1056:	89 9f       	mul	r24, r25
    1058:	91 2d       	mov	r25, r1
    105a:	11 24       	eor	r1, r1
    105c:	96 95       	lsr	r25
    105e:	96 95       	lsr	r25
    1060:	96 95       	lsr	r25
    1062:	20 e1       	ldi	r18, 0x10	; 16
    1064:	92 9f       	mul	r25, r18
    1066:	a0 01       	movw	r20, r0
    1068:	11 24       	eor	r1, r1
    106a:	99 0f       	add	r25, r25
    106c:	29 2f       	mov	r18, r25
    106e:	22 0f       	add	r18, r18
    1070:	22 0f       	add	r18, r18
    1072:	92 0f       	add	r25, r18
    1074:	89 1b       	sub	r24, r25
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	84 2b       	or	r24, r20
    107a:	08 95       	ret

0000107c <DS3231_Read>:
    107c:	cf 93       	push	r28
    107e:	c8 2f       	mov	r28, r24
    1080:	80 ed       	ldi	r24, 0xD0	; 208
    1082:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
    1086:	8c 2f       	mov	r24, r28
    1088:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
    108c:	81 ed       	ldi	r24, 0xD1	; 209
    108e:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
    1092:	0e 94 10 01 	call	0x220	; 0x220 <i2c_readNak>
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <DS3231_Write>:
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	d8 2f       	mov	r29, r24
    10a0:	c6 2f       	mov	r28, r22
    10a2:	80 ed       	ldi	r24, 0xD0	; 208
    10a4:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_start_wait>
    10a8:	8d 2f       	mov	r24, r29
    10aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
    10ae:	8c 2f       	mov	r24, r28
    10b0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_write>
    10b4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2c_stop>
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <DS3231_init>:
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	8e e0       	ldi	r24, 0x0E	; 14
    10c2:	0e 94 4d 08 	call	0x109a	; 0x109a <DS3231_Write>
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	8f e0       	ldi	r24, 0x0F	; 15
    10ca:	0e 94 4d 08 	call	0x109a	; 0x109a <DS3231_Write>
    10ce:	08 95       	ret

000010d0 <getTime>:
    10d0:	af 92       	push	r10
    10d2:	bf 92       	push	r11
    10d4:	cf 92       	push	r12
    10d6:	df 92       	push	r13
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ec 01       	movw	r28, r24
    10e4:	7b 01       	movw	r14, r22
    10e6:	6a 01       	movw	r12, r20
    10e8:	59 01       	movw	r10, r18
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	0e 94 3e 08 	call	0x107c	; 0x107c <DS3231_Read>
    10f0:	0e 94 1f 08 	call	0x103e	; 0x103e <bcd_to_decimal>
    10f4:	f6 01       	movw	r30, r12
    10f6:	80 83       	st	Z, r24
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	0e 94 3e 08 	call	0x107c	; 0x107c <DS3231_Read>
    10fe:	0e 94 1f 08 	call	0x103e	; 0x103e <bcd_to_decimal>
    1102:	f7 01       	movw	r30, r14
    1104:	80 83       	st	Z, r24
    1106:	01 30       	cpi	r16, 0x01	; 1
    1108:	81 f4       	brne	.+32     	; 0x112a <getTime+0x5a>
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	0e 94 3e 08 	call	0x107c	; 0x107c <DS3231_Read>
    1110:	85 fb       	bst	r24, 5
    1112:	88 27       	eor	r24, r24
    1114:	80 f9       	bld	r24, 0
    1116:	f5 01       	movw	r30, r10
    1118:	80 83       	st	Z, r24
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	0e 94 3e 08 	call	0x107c	; 0x107c <DS3231_Read>
    1120:	8f 71       	andi	r24, 0x1F	; 31
    1122:	0e 94 1f 08 	call	0x103e	; 0x103e <bcd_to_decimal>
    1126:	88 83       	st	Y, r24
    1128:	07 c0       	rjmp	.+14     	; 0x1138 <getTime+0x68>
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	0e 94 3e 08 	call	0x107c	; 0x107c <DS3231_Read>
    1130:	8f 73       	andi	r24, 0x3F	; 63
    1132:	0e 94 1f 08 	call	0x103e	; 0x103e <bcd_to_decimal>
    1136:	88 83       	st	Y, r24
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	df 90       	pop	r13
    1144:	cf 90       	pop	r12
    1146:	bf 90       	pop	r11
    1148:	af 90       	pop	r10
    114a:	08 95       	ret

0000114c <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	d8 2f       	mov	r29, r24
    1156:	c6 2f       	mov	r28, r22
    1158:	84 2f       	mov	r24, r20
    115a:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
    115c:	0e 94 2a 08 	call	0x1054	; 0x1054 <decimal_to_bcd>
    1160:	68 2f       	mov	r22, r24
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	0e 94 4d 08 	call	0x109a	; 0x109a <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
    1168:	8c 2f       	mov	r24, r28
    116a:	0e 94 2a 08 	call	0x1054	; 0x1054 <decimal_to_bcd>
    116e:	68 2f       	mov	r22, r24
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0e 94 4d 08 	call	0x109a	; 0x109a <DS3231_Write>
	
	switch(hour_format)
    1176:	01 30       	cpi	r16, 0x01	; 1
    1178:	79 f4       	brne	.+30     	; 0x1198 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    117a:	11 30       	cpi	r17, 0x01	; 1
    117c:	11 f0       	breq	.+4      	; 0x1182 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    117e:	c0 e4       	ldi	r28, 0x40	; 64
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    1182:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    1184:	8d 2f       	mov	r24, r29
    1186:	0e 94 2a 08 	call	0x1054	; 0x1054 <decimal_to_bcd>
    118a:	8f 71       	andi	r24, 0x1F	; 31
    118c:	68 2f       	mov	r22, r24
    118e:	6c 2b       	or	r22, r28
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	0e 94 4d 08 	call	0x109a	; 0x109a <DS3231_Write>
			break;
    1196:	08 c0       	rjmp	.+16     	; 0x11a8 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    1198:	8d 2f       	mov	r24, r29
    119a:	0e 94 2a 08 	call	0x1054	; 0x1054 <decimal_to_bcd>
    119e:	68 2f       	mov	r22, r24
    11a0:	6f 73       	andi	r22, 0x3F	; 63
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	0e 94 4d 08 	call	0x109a	; 0x109a <DS3231_Write>
			break;
		}
	}
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	08 95       	ret

000011b2 <tajmer0_init>:

volatile uint16_t delay_timer = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    11b6:	93 e0       	ldi	r25, 0x03	; 3
    11b8:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    11ba:	99 ef       	ldi	r25, 0xF9	; 249
    11bc:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    11be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    11c2:	08 95       	ret

000011c4 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	8f 93       	push	r24
    11d0:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    11d8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <brojac_prekida_tajmera0>
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    11e2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <brojac_prekida_tajmera0_debounce_half>
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    11ec:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <brojac_prekida_tajmera0_debounce>
    11f0:	8f 5f       	subi	r24, 0xFF	; 255
    11f2:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <brojac_prekida_tajmera0_debounce>
	delay_timer++;		//overflow posle 65.5 sekundi, ali koga briga ne remeti normalan rad
    11f6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <delay_timer>
    11fa:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <delay_timer+0x1>
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <delay_timer+0x1>
    1204:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <delay_timer>
		
	if(brojac_prekida_tajmera0 == 100)	//1ms * 50 = 50ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    1208:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <brojac_prekida_tajmera0>
    120c:	84 36       	cpi	r24, 0x64	; 100
    120e:	29 f4       	brne	.+10     	; 0x121a <__vector_14+0x56>
	{
		brojac_prekida_tajmera0 = 0;
    1210:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <brojac_prekida_tajmera0>
		flag_prekid_50ms = 1;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <flag_prekid_50ms>
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    121a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <brojac_prekida_tajmera0_debounce_half>
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	29 f4       	brne	.+10     	; 0x122c <__vector_14+0x68>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    1222:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <flag_prekid_debounce_time_half>
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    122c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <brojac_prekida_tajmera0_debounce>
    1230:	86 30       	cpi	r24, 0x06	; 6
    1232:	29 f4       	brne	.+10     	; 0x123e <__vector_14+0x7a>
	{
		brojac_prekida_tajmera0_debounce = 0;
    1234:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <flag_prekid_debounce_time>
	}
	
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
	poslato=0;
    1256:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <poslato>
}
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <__vector_18>:

ISR(USART_RX_vect)
{
    1264:	1f 92       	push	r1
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	8f 93       	push	r24
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
	input_char=UDR0;
    1274:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1278:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    127c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <buff_size>
    1280:	88 30       	cpi	r24, 0x08	; 8
    1282:	98 f4       	brcc	.+38     	; 0x12aa <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    1284:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <buff_size>
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <input_char>
    128e:	ef 52       	subi	r30, 0x2F	; 47
    1290:	fe 4f       	sbci	r31, 0xFE	; 254
    1292:	80 83       	st	Z, r24
		buff_size++;
    1294:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <buff_size>
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <buff_size>
		input_buffer[buff_size]='\0';
    129e:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <buff_size>
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	ef 52       	subi	r30, 0x2F	; 47
    12a6:	fe 4f       	sbci	r31, 0xFE	; 254
    12a8:	10 82       	st	Z, r1
	}
}
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	8f 91       	pop	r24
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    12ba:	22 e0       	ldi	r18, 0x02	; 2
    12bc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    12c0:	28 ed       	ldi	r18, 0xD8	; 216
    12c2:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    12c6:	26 e0       	ldi	r18, 0x06	; 6
    12c8:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    12cc:	61 15       	cp	r22, r1
    12ce:	2c e2       	ldi	r18, 0x2C	; 44
    12d0:	72 07       	cpc	r23, r18
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	82 07       	cpc	r24, r18
    12d6:	91 05       	cpc	r25, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <uart_init+0x22>
    12da:	51 c0       	rjmp	.+162    	; 0x137e <uart_init+0xc4>
    12dc:	c8 f4       	brcc	.+50     	; 0x1310 <uart_init+0x56>
    12de:	60 34       	cpi	r22, 0x40	; 64
    12e0:	28 e3       	ldi	r18, 0x38	; 56
    12e2:	72 07       	cpc	r23, r18
    12e4:	81 05       	cpc	r24, r1
    12e6:	91 05       	cpc	r25, r1
    12e8:	a9 f1       	breq	.+106    	; 0x1354 <uart_init+0x9a>
    12ea:	30 f4       	brcc	.+12     	; 0x12f8 <uart_init+0x3e>
    12ec:	60 38       	cpi	r22, 0x80	; 128
    12ee:	75 42       	sbci	r23, 0x25	; 37
    12f0:	81 05       	cpc	r24, r1
    12f2:	91 05       	cpc	r25, r1
    12f4:	41 f1       	breq	.+80     	; 0x1346 <uart_init+0x8c>
    12f6:	64 c0       	rjmp	.+200    	; 0x13c0 <uart_init+0x106>
    12f8:	61 15       	cp	r22, r1
    12fa:	2b e4       	ldi	r18, 0x4B	; 75
    12fc:	72 07       	cpc	r23, r18
    12fe:	81 05       	cpc	r24, r1
    1300:	91 05       	cpc	r25, r1
    1302:	79 f1       	breq	.+94     	; 0x1362 <uart_init+0xa8>
    1304:	61 15       	cp	r22, r1
    1306:	76 49       	sbci	r23, 0x96	; 150
    1308:	81 05       	cpc	r24, r1
    130a:	91 05       	cpc	r25, r1
    130c:	89 f1       	breq	.+98     	; 0x1370 <uart_init+0xb6>
    130e:	58 c0       	rjmp	.+176    	; 0x13c0 <uart_init+0x106>
    1310:	60 32       	cpi	r22, 0x20	; 32
    1312:	21 ea       	ldi	r18, 0xA1	; 161
    1314:	72 07       	cpc	r23, r18
    1316:	27 e0       	ldi	r18, 0x07	; 7
    1318:	82 07       	cpc	r24, r18
    131a:	91 05       	cpc	r25, r1
    131c:	f1 f1       	breq	.+124    	; 0x139a <uart_init+0xe0>
    131e:	30 f4       	brcc	.+12     	; 0x132c <uart_init+0x72>
    1320:	60 39       	cpi	r22, 0x90	; 144
    1322:	70 4d       	sbci	r23, 0xD0	; 208
    1324:	83 40       	sbci	r24, 0x03	; 3
    1326:	91 05       	cpc	r25, r1
    1328:	89 f1       	breq	.+98     	; 0x138c <uart_init+0xd2>
    132a:	4a c0       	rjmp	.+148    	; 0x13c0 <uart_init+0x106>
    132c:	60 34       	cpi	r22, 0x40	; 64
    132e:	22 e4       	ldi	r18, 0x42	; 66
    1330:	72 07       	cpc	r23, r18
    1332:	2f e0       	ldi	r18, 0x0F	; 15
    1334:	82 07       	cpc	r24, r18
    1336:	91 05       	cpc	r25, r1
    1338:	b9 f1       	breq	.+110    	; 0x13a8 <uart_init+0xee>
    133a:	60 38       	cpi	r22, 0x80	; 128
    133c:	74 48       	sbci	r23, 0x84	; 132
    133e:	8e 41       	sbci	r24, 0x1E	; 30
    1340:	91 05       	cpc	r25, r1
    1342:	c9 f1       	breq	.+114    	; 0x13b6 <uart_init+0xfc>
    1344:	3d c0       	rjmp	.+122    	; 0x13c0 <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    1346:	8f ec       	ldi	r24, 0xCF	; 207
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    134e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1352:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    1354:	8a e8       	ldi	r24, 0x8A	; 138
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    135c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1360:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    1362:	87 e6       	ldi	r24, 0x67	; 103
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    136a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    136e:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    1370:	83 e3       	ldi	r24, 0x33	; 51
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1378:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    137c:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    137e:	89 e1       	ldi	r24, 0x19	; 25
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1386:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    138a:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    138c:	87 e0       	ldi	r24, 0x07	; 7
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1394:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1398:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13a6:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13b4:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    13b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13ba:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13be:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    13c0:	8f ec       	ldi	r24, 0xCF	; 207
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13cc:	08 95       	ret

000013ce <sprintf>:
    13ce:	ae e0       	ldi	r26, 0x0E	; 14
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ed ee       	ldi	r30, 0xED	; 237
    13d4:	f9 e0       	ldi	r31, 0x09	; 9
    13d6:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__prologue_saves__+0x1c>
    13da:	0d 89       	ldd	r16, Y+21	; 0x15
    13dc:	1e 89       	ldd	r17, Y+22	; 0x16
    13de:	86 e0       	ldi	r24, 0x06	; 6
    13e0:	8c 83       	std	Y+4, r24	; 0x04
    13e2:	1a 83       	std	Y+2, r17	; 0x02
    13e4:	09 83       	std	Y+1, r16	; 0x01
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	9f e7       	ldi	r25, 0x7F	; 127
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	ae 01       	movw	r20, r28
    13f0:	47 5e       	subi	r20, 0xE7	; 231
    13f2:	5f 4f       	sbci	r21, 0xFF	; 255
    13f4:	6f 89       	ldd	r22, Y+23	; 0x17
    13f6:	78 8d       	ldd	r23, Y+24	; 0x18
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	0e 94 09 0a 	call	0x1412	; 0x1412 <vfprintf>
    1400:	ef 81       	ldd	r30, Y+7	; 0x07
    1402:	f8 85       	ldd	r31, Y+8	; 0x08
    1404:	e0 0f       	add	r30, r16
    1406:	f1 1f       	adc	r31, r17
    1408:	10 82       	st	Z, r1
    140a:	2e 96       	adiw	r28, 0x0e	; 14
    140c:	e4 e0       	ldi	r30, 0x04	; 4
    140e:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__epilogue_restores__+0x1c>

00001412 <vfprintf>:
    1412:	ab e0       	ldi	r26, 0x0B	; 11
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ef e0       	ldi	r30, 0x0F	; 15
    1418:	fa e0       	ldi	r31, 0x0A	; 10
    141a:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__prologue_saves__>
    141e:	6c 01       	movw	r12, r24
    1420:	7b 01       	movw	r14, r22
    1422:	8a 01       	movw	r16, r20
    1424:	fc 01       	movw	r30, r24
    1426:	17 82       	std	Z+7, r1	; 0x07
    1428:	16 82       	std	Z+6, r1	; 0x06
    142a:	83 81       	ldd	r24, Z+3	; 0x03
    142c:	81 ff       	sbrs	r24, 1
    142e:	cc c1       	rjmp	.+920    	; 0x17c8 <vfprintf+0x3b6>
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	3c 01       	movw	r6, r24
    1436:	f6 01       	movw	r30, r12
    1438:	93 81       	ldd	r25, Z+3	; 0x03
    143a:	f7 01       	movw	r30, r14
    143c:	93 fd       	sbrc	r25, 3
    143e:	85 91       	lpm	r24, Z+
    1440:	93 ff       	sbrs	r25, 3
    1442:	81 91       	ld	r24, Z+
    1444:	7f 01       	movw	r14, r30
    1446:	88 23       	and	r24, r24
    1448:	09 f4       	brne	.+2      	; 0x144c <vfprintf+0x3a>
    144a:	ba c1       	rjmp	.+884    	; 0x17c0 <vfprintf+0x3ae>
    144c:	85 32       	cpi	r24, 0x25	; 37
    144e:	39 f4       	brne	.+14     	; 0x145e <vfprintf+0x4c>
    1450:	93 fd       	sbrc	r25, 3
    1452:	85 91       	lpm	r24, Z+
    1454:	93 ff       	sbrs	r25, 3
    1456:	81 91       	ld	r24, Z+
    1458:	7f 01       	movw	r14, r30
    145a:	85 32       	cpi	r24, 0x25	; 37
    145c:	29 f4       	brne	.+10     	; 0x1468 <vfprintf+0x56>
    145e:	b6 01       	movw	r22, r12
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 00 0c 	call	0x1800	; 0x1800 <fputc>
    1466:	e7 cf       	rjmp	.-50     	; 0x1436 <vfprintf+0x24>
    1468:	91 2c       	mov	r9, r1
    146a:	21 2c       	mov	r2, r1
    146c:	31 2c       	mov	r3, r1
    146e:	ff e1       	ldi	r31, 0x1F	; 31
    1470:	f3 15       	cp	r31, r3
    1472:	d8 f0       	brcs	.+54     	; 0x14aa <vfprintf+0x98>
    1474:	8b 32       	cpi	r24, 0x2B	; 43
    1476:	79 f0       	breq	.+30     	; 0x1496 <vfprintf+0x84>
    1478:	38 f4       	brcc	.+14     	; 0x1488 <vfprintf+0x76>
    147a:	80 32       	cpi	r24, 0x20	; 32
    147c:	79 f0       	breq	.+30     	; 0x149c <vfprintf+0x8a>
    147e:	83 32       	cpi	r24, 0x23	; 35
    1480:	a1 f4       	brne	.+40     	; 0x14aa <vfprintf+0x98>
    1482:	23 2d       	mov	r18, r3
    1484:	20 61       	ori	r18, 0x10	; 16
    1486:	1d c0       	rjmp	.+58     	; 0x14c2 <vfprintf+0xb0>
    1488:	8d 32       	cpi	r24, 0x2D	; 45
    148a:	61 f0       	breq	.+24     	; 0x14a4 <vfprintf+0x92>
    148c:	80 33       	cpi	r24, 0x30	; 48
    148e:	69 f4       	brne	.+26     	; 0x14aa <vfprintf+0x98>
    1490:	23 2d       	mov	r18, r3
    1492:	21 60       	ori	r18, 0x01	; 1
    1494:	16 c0       	rjmp	.+44     	; 0x14c2 <vfprintf+0xb0>
    1496:	83 2d       	mov	r24, r3
    1498:	82 60       	ori	r24, 0x02	; 2
    149a:	38 2e       	mov	r3, r24
    149c:	e3 2d       	mov	r30, r3
    149e:	e4 60       	ori	r30, 0x04	; 4
    14a0:	3e 2e       	mov	r3, r30
    14a2:	2a c0       	rjmp	.+84     	; 0x14f8 <vfprintf+0xe6>
    14a4:	f3 2d       	mov	r31, r3
    14a6:	f8 60       	ori	r31, 0x08	; 8
    14a8:	1d c0       	rjmp	.+58     	; 0x14e4 <vfprintf+0xd2>
    14aa:	37 fc       	sbrc	r3, 7
    14ac:	2d c0       	rjmp	.+90     	; 0x1508 <vfprintf+0xf6>
    14ae:	20 ed       	ldi	r18, 0xD0	; 208
    14b0:	28 0f       	add	r18, r24
    14b2:	2a 30       	cpi	r18, 0x0A	; 10
    14b4:	40 f0       	brcs	.+16     	; 0x14c6 <vfprintf+0xb4>
    14b6:	8e 32       	cpi	r24, 0x2E	; 46
    14b8:	b9 f4       	brne	.+46     	; 0x14e8 <vfprintf+0xd6>
    14ba:	36 fc       	sbrc	r3, 6
    14bc:	81 c1       	rjmp	.+770    	; 0x17c0 <vfprintf+0x3ae>
    14be:	23 2d       	mov	r18, r3
    14c0:	20 64       	ori	r18, 0x40	; 64
    14c2:	32 2e       	mov	r3, r18
    14c4:	19 c0       	rjmp	.+50     	; 0x14f8 <vfprintf+0xe6>
    14c6:	36 fe       	sbrs	r3, 6
    14c8:	06 c0       	rjmp	.+12     	; 0x14d6 <vfprintf+0xc4>
    14ca:	8a e0       	ldi	r24, 0x0A	; 10
    14cc:	98 9e       	mul	r9, r24
    14ce:	20 0d       	add	r18, r0
    14d0:	11 24       	eor	r1, r1
    14d2:	92 2e       	mov	r9, r18
    14d4:	11 c0       	rjmp	.+34     	; 0x14f8 <vfprintf+0xe6>
    14d6:	ea e0       	ldi	r30, 0x0A	; 10
    14d8:	2e 9e       	mul	r2, r30
    14da:	20 0d       	add	r18, r0
    14dc:	11 24       	eor	r1, r1
    14de:	22 2e       	mov	r2, r18
    14e0:	f3 2d       	mov	r31, r3
    14e2:	f0 62       	ori	r31, 0x20	; 32
    14e4:	3f 2e       	mov	r3, r31
    14e6:	08 c0       	rjmp	.+16     	; 0x14f8 <vfprintf+0xe6>
    14e8:	8c 36       	cpi	r24, 0x6C	; 108
    14ea:	21 f4       	brne	.+8      	; 0x14f4 <vfprintf+0xe2>
    14ec:	83 2d       	mov	r24, r3
    14ee:	80 68       	ori	r24, 0x80	; 128
    14f0:	38 2e       	mov	r3, r24
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <vfprintf+0xe6>
    14f4:	88 36       	cpi	r24, 0x68	; 104
    14f6:	41 f4       	brne	.+16     	; 0x1508 <vfprintf+0xf6>
    14f8:	f7 01       	movw	r30, r14
    14fa:	93 fd       	sbrc	r25, 3
    14fc:	85 91       	lpm	r24, Z+
    14fe:	93 ff       	sbrs	r25, 3
    1500:	81 91       	ld	r24, Z+
    1502:	7f 01       	movw	r14, r30
    1504:	81 11       	cpse	r24, r1
    1506:	b3 cf       	rjmp	.-154    	; 0x146e <vfprintf+0x5c>
    1508:	98 2f       	mov	r25, r24
    150a:	9f 7d       	andi	r25, 0xDF	; 223
    150c:	95 54       	subi	r25, 0x45	; 69
    150e:	93 30       	cpi	r25, 0x03	; 3
    1510:	28 f4       	brcc	.+10     	; 0x151c <vfprintf+0x10a>
    1512:	0c 5f       	subi	r16, 0xFC	; 252
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	9f e3       	ldi	r25, 0x3F	; 63
    1518:	99 83       	std	Y+1, r25	; 0x01
    151a:	0d c0       	rjmp	.+26     	; 0x1536 <vfprintf+0x124>
    151c:	83 36       	cpi	r24, 0x63	; 99
    151e:	31 f0       	breq	.+12     	; 0x152c <vfprintf+0x11a>
    1520:	83 37       	cpi	r24, 0x73	; 115
    1522:	71 f0       	breq	.+28     	; 0x1540 <vfprintf+0x12e>
    1524:	83 35       	cpi	r24, 0x53	; 83
    1526:	09 f0       	breq	.+2      	; 0x152a <vfprintf+0x118>
    1528:	59 c0       	rjmp	.+178    	; 0x15dc <vfprintf+0x1ca>
    152a:	21 c0       	rjmp	.+66     	; 0x156e <vfprintf+0x15c>
    152c:	f8 01       	movw	r30, r16
    152e:	80 81       	ld	r24, Z
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	0e 5f       	subi	r16, 0xFE	; 254
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	88 24       	eor	r8, r8
    1538:	83 94       	inc	r8
    153a:	91 2c       	mov	r9, r1
    153c:	53 01       	movw	r10, r6
    153e:	13 c0       	rjmp	.+38     	; 0x1566 <vfprintf+0x154>
    1540:	28 01       	movw	r4, r16
    1542:	f2 e0       	ldi	r31, 0x02	; 2
    1544:	4f 0e       	add	r4, r31
    1546:	51 1c       	adc	r5, r1
    1548:	f8 01       	movw	r30, r16
    154a:	a0 80       	ld	r10, Z
    154c:	b1 80       	ldd	r11, Z+1	; 0x01
    154e:	36 fe       	sbrs	r3, 6
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <vfprintf+0x146>
    1552:	69 2d       	mov	r22, r9
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <vfprintf+0x14a>
    1558:	6f ef       	ldi	r22, 0xFF	; 255
    155a:	7f ef       	ldi	r23, 0xFF	; 255
    155c:	c5 01       	movw	r24, r10
    155e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <strnlen>
    1562:	4c 01       	movw	r8, r24
    1564:	82 01       	movw	r16, r4
    1566:	f3 2d       	mov	r31, r3
    1568:	ff 77       	andi	r31, 0x7F	; 127
    156a:	3f 2e       	mov	r3, r31
    156c:	16 c0       	rjmp	.+44     	; 0x159a <vfprintf+0x188>
    156e:	28 01       	movw	r4, r16
    1570:	22 e0       	ldi	r18, 0x02	; 2
    1572:	42 0e       	add	r4, r18
    1574:	51 1c       	adc	r5, r1
    1576:	f8 01       	movw	r30, r16
    1578:	a0 80       	ld	r10, Z
    157a:	b1 80       	ldd	r11, Z+1	; 0x01
    157c:	36 fe       	sbrs	r3, 6
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <vfprintf+0x174>
    1580:	69 2d       	mov	r22, r9
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	02 c0       	rjmp	.+4      	; 0x158a <vfprintf+0x178>
    1586:	6f ef       	ldi	r22, 0xFF	; 255
    1588:	7f ef       	ldi	r23, 0xFF	; 255
    158a:	c5 01       	movw	r24, r10
    158c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <strnlen_P>
    1590:	4c 01       	movw	r8, r24
    1592:	f3 2d       	mov	r31, r3
    1594:	f0 68       	ori	r31, 0x80	; 128
    1596:	3f 2e       	mov	r3, r31
    1598:	82 01       	movw	r16, r4
    159a:	33 fc       	sbrc	r3, 3
    159c:	1b c0       	rjmp	.+54     	; 0x15d4 <vfprintf+0x1c2>
    159e:	82 2d       	mov	r24, r2
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	88 16       	cp	r8, r24
    15a4:	99 06       	cpc	r9, r25
    15a6:	b0 f4       	brcc	.+44     	; 0x15d4 <vfprintf+0x1c2>
    15a8:	b6 01       	movw	r22, r12
    15aa:	80 e2       	ldi	r24, 0x20	; 32
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 00 0c 	call	0x1800	; 0x1800 <fputc>
    15b2:	2a 94       	dec	r2
    15b4:	f4 cf       	rjmp	.-24     	; 0x159e <vfprintf+0x18c>
    15b6:	f5 01       	movw	r30, r10
    15b8:	37 fc       	sbrc	r3, 7
    15ba:	85 91       	lpm	r24, Z+
    15bc:	37 fe       	sbrs	r3, 7
    15be:	81 91       	ld	r24, Z+
    15c0:	5f 01       	movw	r10, r30
    15c2:	b6 01       	movw	r22, r12
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 00 0c 	call	0x1800	; 0x1800 <fputc>
    15ca:	21 10       	cpse	r2, r1
    15cc:	2a 94       	dec	r2
    15ce:	21 e0       	ldi	r18, 0x01	; 1
    15d0:	82 1a       	sub	r8, r18
    15d2:	91 08       	sbc	r9, r1
    15d4:	81 14       	cp	r8, r1
    15d6:	91 04       	cpc	r9, r1
    15d8:	71 f7       	brne	.-36     	; 0x15b6 <vfprintf+0x1a4>
    15da:	e8 c0       	rjmp	.+464    	; 0x17ac <vfprintf+0x39a>
    15dc:	84 36       	cpi	r24, 0x64	; 100
    15de:	11 f0       	breq	.+4      	; 0x15e4 <vfprintf+0x1d2>
    15e0:	89 36       	cpi	r24, 0x69	; 105
    15e2:	41 f5       	brne	.+80     	; 0x1634 <vfprintf+0x222>
    15e4:	f8 01       	movw	r30, r16
    15e6:	37 fe       	sbrs	r3, 7
    15e8:	07 c0       	rjmp	.+14     	; 0x15f8 <vfprintf+0x1e6>
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	0c 5f       	subi	r16, 0xFC	; 252
    15f4:	1f 4f       	sbci	r17, 0xFF	; 255
    15f6:	08 c0       	rjmp	.+16     	; 0x1608 <vfprintf+0x1f6>
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	07 2e       	mov	r0, r23
    15fe:	00 0c       	add	r0, r0
    1600:	88 0b       	sbc	r24, r24
    1602:	99 0b       	sbc	r25, r25
    1604:	0e 5f       	subi	r16, 0xFE	; 254
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	f3 2d       	mov	r31, r3
    160a:	ff 76       	andi	r31, 0x6F	; 111
    160c:	3f 2e       	mov	r3, r31
    160e:	97 ff       	sbrs	r25, 7
    1610:	09 c0       	rjmp	.+18     	; 0x1624 <vfprintf+0x212>
    1612:	90 95       	com	r25
    1614:	80 95       	com	r24
    1616:	70 95       	com	r23
    1618:	61 95       	neg	r22
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	8f 4f       	sbci	r24, 0xFF	; 255
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	f0 68       	ori	r31, 0x80	; 128
    1622:	3f 2e       	mov	r3, r31
    1624:	2a e0       	ldi	r18, 0x0A	; 10
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	a3 01       	movw	r20, r6
    162a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__ultoa_invert>
    162e:	88 2e       	mov	r8, r24
    1630:	86 18       	sub	r8, r6
    1632:	45 c0       	rjmp	.+138    	; 0x16be <vfprintf+0x2ac>
    1634:	85 37       	cpi	r24, 0x75	; 117
    1636:	31 f4       	brne	.+12     	; 0x1644 <vfprintf+0x232>
    1638:	23 2d       	mov	r18, r3
    163a:	2f 7e       	andi	r18, 0xEF	; 239
    163c:	b2 2e       	mov	r11, r18
    163e:	2a e0       	ldi	r18, 0x0A	; 10
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	25 c0       	rjmp	.+74     	; 0x168e <vfprintf+0x27c>
    1644:	93 2d       	mov	r25, r3
    1646:	99 7f       	andi	r25, 0xF9	; 249
    1648:	b9 2e       	mov	r11, r25
    164a:	8f 36       	cpi	r24, 0x6F	; 111
    164c:	c1 f0       	breq	.+48     	; 0x167e <vfprintf+0x26c>
    164e:	18 f4       	brcc	.+6      	; 0x1656 <vfprintf+0x244>
    1650:	88 35       	cpi	r24, 0x58	; 88
    1652:	79 f0       	breq	.+30     	; 0x1672 <vfprintf+0x260>
    1654:	b5 c0       	rjmp	.+362    	; 0x17c0 <vfprintf+0x3ae>
    1656:	80 37       	cpi	r24, 0x70	; 112
    1658:	19 f0       	breq	.+6      	; 0x1660 <vfprintf+0x24e>
    165a:	88 37       	cpi	r24, 0x78	; 120
    165c:	21 f0       	breq	.+8      	; 0x1666 <vfprintf+0x254>
    165e:	b0 c0       	rjmp	.+352    	; 0x17c0 <vfprintf+0x3ae>
    1660:	e9 2f       	mov	r30, r25
    1662:	e0 61       	ori	r30, 0x10	; 16
    1664:	be 2e       	mov	r11, r30
    1666:	b4 fe       	sbrs	r11, 4
    1668:	0d c0       	rjmp	.+26     	; 0x1684 <vfprintf+0x272>
    166a:	fb 2d       	mov	r31, r11
    166c:	f4 60       	ori	r31, 0x04	; 4
    166e:	bf 2e       	mov	r11, r31
    1670:	09 c0       	rjmp	.+18     	; 0x1684 <vfprintf+0x272>
    1672:	34 fe       	sbrs	r3, 4
    1674:	0a c0       	rjmp	.+20     	; 0x168a <vfprintf+0x278>
    1676:	29 2f       	mov	r18, r25
    1678:	26 60       	ori	r18, 0x06	; 6
    167a:	b2 2e       	mov	r11, r18
    167c:	06 c0       	rjmp	.+12     	; 0x168a <vfprintf+0x278>
    167e:	28 e0       	ldi	r18, 0x08	; 8
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	05 c0       	rjmp	.+10     	; 0x168e <vfprintf+0x27c>
    1684:	20 e1       	ldi	r18, 0x10	; 16
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	02 c0       	rjmp	.+4      	; 0x168e <vfprintf+0x27c>
    168a:	20 e1       	ldi	r18, 0x10	; 16
    168c:	32 e0       	ldi	r19, 0x02	; 2
    168e:	f8 01       	movw	r30, r16
    1690:	b7 fe       	sbrs	r11, 7
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <vfprintf+0x290>
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	0c 5f       	subi	r16, 0xFC	; 252
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <vfprintf+0x29c>
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 5f       	subi	r16, 0xFE	; 254
    16ac:	1f 4f       	sbci	r17, 0xFF	; 255
    16ae:	a3 01       	movw	r20, r6
    16b0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__ultoa_invert>
    16b4:	88 2e       	mov	r8, r24
    16b6:	86 18       	sub	r8, r6
    16b8:	fb 2d       	mov	r31, r11
    16ba:	ff 77       	andi	r31, 0x7F	; 127
    16bc:	3f 2e       	mov	r3, r31
    16be:	36 fe       	sbrs	r3, 6
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <vfprintf+0x2ca>
    16c2:	23 2d       	mov	r18, r3
    16c4:	2e 7f       	andi	r18, 0xFE	; 254
    16c6:	a2 2e       	mov	r10, r18
    16c8:	89 14       	cp	r8, r9
    16ca:	58 f4       	brcc	.+22     	; 0x16e2 <vfprintf+0x2d0>
    16cc:	34 fe       	sbrs	r3, 4
    16ce:	0b c0       	rjmp	.+22     	; 0x16e6 <vfprintf+0x2d4>
    16d0:	32 fc       	sbrc	r3, 2
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <vfprintf+0x2d4>
    16d4:	83 2d       	mov	r24, r3
    16d6:	8e 7e       	andi	r24, 0xEE	; 238
    16d8:	a8 2e       	mov	r10, r24
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <vfprintf+0x2d4>
    16dc:	b8 2c       	mov	r11, r8
    16de:	a3 2c       	mov	r10, r3
    16e0:	03 c0       	rjmp	.+6      	; 0x16e8 <vfprintf+0x2d6>
    16e2:	b8 2c       	mov	r11, r8
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <vfprintf+0x2d6>
    16e6:	b9 2c       	mov	r11, r9
    16e8:	a4 fe       	sbrs	r10, 4
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <vfprintf+0x2f8>
    16ec:	fe 01       	movw	r30, r28
    16ee:	e8 0d       	add	r30, r8
    16f0:	f1 1d       	adc	r31, r1
    16f2:	80 81       	ld	r24, Z
    16f4:	80 33       	cpi	r24, 0x30	; 48
    16f6:	21 f4       	brne	.+8      	; 0x1700 <vfprintf+0x2ee>
    16f8:	9a 2d       	mov	r25, r10
    16fa:	99 7e       	andi	r25, 0xE9	; 233
    16fc:	a9 2e       	mov	r10, r25
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <vfprintf+0x300>
    1700:	a2 fe       	sbrs	r10, 2
    1702:	06 c0       	rjmp	.+12     	; 0x1710 <vfprintf+0x2fe>
    1704:	b3 94       	inc	r11
    1706:	b3 94       	inc	r11
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <vfprintf+0x300>
    170a:	8a 2d       	mov	r24, r10
    170c:	86 78       	andi	r24, 0x86	; 134
    170e:	09 f0       	breq	.+2      	; 0x1712 <vfprintf+0x300>
    1710:	b3 94       	inc	r11
    1712:	a3 fc       	sbrc	r10, 3
    1714:	11 c0       	rjmp	.+34     	; 0x1738 <vfprintf+0x326>
    1716:	a0 fe       	sbrs	r10, 0
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <vfprintf+0x314>
    171a:	b2 14       	cp	r11, r2
    171c:	88 f4       	brcc	.+34     	; 0x1740 <vfprintf+0x32e>
    171e:	28 0c       	add	r2, r8
    1720:	92 2c       	mov	r9, r2
    1722:	9b 18       	sub	r9, r11
    1724:	0e c0       	rjmp	.+28     	; 0x1742 <vfprintf+0x330>
    1726:	b2 14       	cp	r11, r2
    1728:	60 f4       	brcc	.+24     	; 0x1742 <vfprintf+0x330>
    172a:	b6 01       	movw	r22, r12
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 00 0c 	call	0x1800	; 0x1800 <fputc>
    1734:	b3 94       	inc	r11
    1736:	f7 cf       	rjmp	.-18     	; 0x1726 <vfprintf+0x314>
    1738:	b2 14       	cp	r11, r2
    173a:	18 f4       	brcc	.+6      	; 0x1742 <vfprintf+0x330>
    173c:	2b 18       	sub	r2, r11
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <vfprintf+0x332>
    1740:	98 2c       	mov	r9, r8
    1742:	21 2c       	mov	r2, r1
    1744:	a4 fe       	sbrs	r10, 4
    1746:	10 c0       	rjmp	.+32     	; 0x1768 <vfprintf+0x356>
    1748:	b6 01       	movw	r22, r12
    174a:	80 e3       	ldi	r24, 0x30	; 48
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 00 0c 	call	0x1800	; 0x1800 <fputc>
    1752:	a2 fe       	sbrs	r10, 2
    1754:	17 c0       	rjmp	.+46     	; 0x1784 <vfprintf+0x372>
    1756:	a1 fc       	sbrc	r10, 1
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <vfprintf+0x34e>
    175a:	88 e7       	ldi	r24, 0x78	; 120
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <vfprintf+0x352>
    1760:	88 e5       	ldi	r24, 0x58	; 88
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	b6 01       	movw	r22, r12
    1766:	0c c0       	rjmp	.+24     	; 0x1780 <vfprintf+0x36e>
    1768:	8a 2d       	mov	r24, r10
    176a:	86 78       	andi	r24, 0x86	; 134
    176c:	59 f0       	breq	.+22     	; 0x1784 <vfprintf+0x372>
    176e:	a1 fe       	sbrs	r10, 1
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <vfprintf+0x364>
    1772:	8b e2       	ldi	r24, 0x2B	; 43
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <vfprintf+0x366>
    1776:	80 e2       	ldi	r24, 0x20	; 32
    1778:	a7 fc       	sbrc	r10, 7
    177a:	8d e2       	ldi	r24, 0x2D	; 45
    177c:	b6 01       	movw	r22, r12
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 00 0c 	call	0x1800	; 0x1800 <fputc>
    1784:	89 14       	cp	r8, r9
    1786:	38 f4       	brcc	.+14     	; 0x1796 <vfprintf+0x384>
    1788:	b6 01       	movw	r22, r12
    178a:	80 e3       	ldi	r24, 0x30	; 48
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 00 0c 	call	0x1800	; 0x1800 <fputc>
    1792:	9a 94       	dec	r9
    1794:	f7 cf       	rjmp	.-18     	; 0x1784 <vfprintf+0x372>
    1796:	8a 94       	dec	r8
    1798:	f3 01       	movw	r30, r6
    179a:	e8 0d       	add	r30, r8
    179c:	f1 1d       	adc	r31, r1
    179e:	80 81       	ld	r24, Z
    17a0:	b6 01       	movw	r22, r12
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 00 0c 	call	0x1800	; 0x1800 <fputc>
    17a8:	81 10       	cpse	r8, r1
    17aa:	f5 cf       	rjmp	.-22     	; 0x1796 <vfprintf+0x384>
    17ac:	22 20       	and	r2, r2
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <vfprintf+0x3a0>
    17b0:	42 ce       	rjmp	.-892    	; 0x1436 <vfprintf+0x24>
    17b2:	b6 01       	movw	r22, r12
    17b4:	80 e2       	ldi	r24, 0x20	; 32
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 00 0c 	call	0x1800	; 0x1800 <fputc>
    17bc:	2a 94       	dec	r2
    17be:	f6 cf       	rjmp	.-20     	; 0x17ac <vfprintf+0x39a>
    17c0:	f6 01       	movw	r30, r12
    17c2:	86 81       	ldd	r24, Z+6	; 0x06
    17c4:	97 81       	ldd	r25, Z+7	; 0x07
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <vfprintf+0x3ba>
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	9f ef       	ldi	r25, 0xFF	; 255
    17cc:	2b 96       	adiw	r28, 0x0b	; 11
    17ce:	e2 e1       	ldi	r30, 0x12	; 18
    17d0:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__epilogue_restores__>

000017d4 <strnlen_P>:
    17d4:	fc 01       	movw	r30, r24
    17d6:	05 90       	lpm	r0, Z+
    17d8:	61 50       	subi	r22, 0x01	; 1
    17da:	70 40       	sbci	r23, 0x00	; 0
    17dc:	01 10       	cpse	r0, r1
    17de:	d8 f7       	brcc	.-10     	; 0x17d6 <strnlen_P+0x2>
    17e0:	80 95       	com	r24
    17e2:	90 95       	com	r25
    17e4:	8e 0f       	add	r24, r30
    17e6:	9f 1f       	adc	r25, r31
    17e8:	08 95       	ret

000017ea <strnlen>:
    17ea:	fc 01       	movw	r30, r24
    17ec:	61 50       	subi	r22, 0x01	; 1
    17ee:	70 40       	sbci	r23, 0x00	; 0
    17f0:	01 90       	ld	r0, Z+
    17f2:	01 10       	cpse	r0, r1
    17f4:	d8 f7       	brcc	.-10     	; 0x17ec <strnlen+0x2>
    17f6:	80 95       	com	r24
    17f8:	90 95       	com	r25
    17fa:	8e 0f       	add	r24, r30
    17fc:	9f 1f       	adc	r25, r31
    17fe:	08 95       	ret

00001800 <fputc>:
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	fb 01       	movw	r30, r22
    180a:	23 81       	ldd	r18, Z+3	; 0x03
    180c:	21 fd       	sbrc	r18, 1
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <fputc+0x16>
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	9f ef       	ldi	r25, 0xFF	; 255
    1814:	2c c0       	rjmp	.+88     	; 0x186e <fputc+0x6e>
    1816:	22 ff       	sbrs	r18, 2
    1818:	16 c0       	rjmp	.+44     	; 0x1846 <fputc+0x46>
    181a:	46 81       	ldd	r20, Z+6	; 0x06
    181c:	57 81       	ldd	r21, Z+7	; 0x07
    181e:	24 81       	ldd	r18, Z+4	; 0x04
    1820:	35 81       	ldd	r19, Z+5	; 0x05
    1822:	42 17       	cp	r20, r18
    1824:	53 07       	cpc	r21, r19
    1826:	44 f4       	brge	.+16     	; 0x1838 <fputc+0x38>
    1828:	a0 81       	ld	r26, Z
    182a:	b1 81       	ldd	r27, Z+1	; 0x01
    182c:	9d 01       	movw	r18, r26
    182e:	2f 5f       	subi	r18, 0xFF	; 255
    1830:	3f 4f       	sbci	r19, 0xFF	; 255
    1832:	31 83       	std	Z+1, r19	; 0x01
    1834:	20 83       	st	Z, r18
    1836:	8c 93       	st	X, r24
    1838:	26 81       	ldd	r18, Z+6	; 0x06
    183a:	37 81       	ldd	r19, Z+7	; 0x07
    183c:	2f 5f       	subi	r18, 0xFF	; 255
    183e:	3f 4f       	sbci	r19, 0xFF	; 255
    1840:	37 83       	std	Z+7, r19	; 0x07
    1842:	26 83       	std	Z+6, r18	; 0x06
    1844:	14 c0       	rjmp	.+40     	; 0x186e <fputc+0x6e>
    1846:	8b 01       	movw	r16, r22
    1848:	ec 01       	movw	r28, r24
    184a:	fb 01       	movw	r30, r22
    184c:	00 84       	ldd	r0, Z+8	; 0x08
    184e:	f1 85       	ldd	r31, Z+9	; 0x09
    1850:	e0 2d       	mov	r30, r0
    1852:	09 95       	icall
    1854:	89 2b       	or	r24, r25
    1856:	e1 f6       	brne	.-72     	; 0x1810 <fputc+0x10>
    1858:	d8 01       	movw	r26, r16
    185a:	16 96       	adiw	r26, 0x06	; 6
    185c:	8d 91       	ld	r24, X+
    185e:	9c 91       	ld	r25, X
    1860:	17 97       	sbiw	r26, 0x07	; 7
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	17 96       	adiw	r26, 0x07	; 7
    1866:	9c 93       	st	X, r25
    1868:	8e 93       	st	-X, r24
    186a:	16 97       	sbiw	r26, 0x06	; 6
    186c:	ce 01       	movw	r24, r28
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

00001878 <__ultoa_invert>:
    1878:	fa 01       	movw	r30, r20
    187a:	aa 27       	eor	r26, r26
    187c:	28 30       	cpi	r18, 0x08	; 8
    187e:	51 f1       	breq	.+84     	; 0x18d4 <__ultoa_invert+0x5c>
    1880:	20 31       	cpi	r18, 0x10	; 16
    1882:	81 f1       	breq	.+96     	; 0x18e4 <__ultoa_invert+0x6c>
    1884:	e8 94       	clt
    1886:	6f 93       	push	r22
    1888:	6e 7f       	andi	r22, 0xFE	; 254
    188a:	6e 5f       	subi	r22, 0xFE	; 254
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	8f 4f       	sbci	r24, 0xFF	; 255
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	af 4f       	sbci	r26, 0xFF	; 255
    1894:	b1 e0       	ldi	r27, 0x01	; 1
    1896:	3e d0       	rcall	.+124    	; 0x1914 <__ultoa_invert+0x9c>
    1898:	b4 e0       	ldi	r27, 0x04	; 4
    189a:	3c d0       	rcall	.+120    	; 0x1914 <__ultoa_invert+0x9c>
    189c:	67 0f       	add	r22, r23
    189e:	78 1f       	adc	r23, r24
    18a0:	89 1f       	adc	r24, r25
    18a2:	9a 1f       	adc	r25, r26
    18a4:	a1 1d       	adc	r26, r1
    18a6:	68 0f       	add	r22, r24
    18a8:	79 1f       	adc	r23, r25
    18aa:	8a 1f       	adc	r24, r26
    18ac:	91 1d       	adc	r25, r1
    18ae:	a1 1d       	adc	r26, r1
    18b0:	6a 0f       	add	r22, r26
    18b2:	71 1d       	adc	r23, r1
    18b4:	81 1d       	adc	r24, r1
    18b6:	91 1d       	adc	r25, r1
    18b8:	a1 1d       	adc	r26, r1
    18ba:	20 d0       	rcall	.+64     	; 0x18fc <__ultoa_invert+0x84>
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <__ultoa_invert+0x48>
    18be:	68 94       	set
    18c0:	3f 91       	pop	r19
    18c2:	2a e0       	ldi	r18, 0x0A	; 10
    18c4:	26 9f       	mul	r18, r22
    18c6:	11 24       	eor	r1, r1
    18c8:	30 19       	sub	r19, r0
    18ca:	30 5d       	subi	r19, 0xD0	; 208
    18cc:	31 93       	st	Z+, r19
    18ce:	de f6       	brtc	.-74     	; 0x1886 <__ultoa_invert+0xe>
    18d0:	cf 01       	movw	r24, r30
    18d2:	08 95       	ret
    18d4:	46 2f       	mov	r20, r22
    18d6:	47 70       	andi	r20, 0x07	; 7
    18d8:	40 5d       	subi	r20, 0xD0	; 208
    18da:	41 93       	st	Z+, r20
    18dc:	b3 e0       	ldi	r27, 0x03	; 3
    18de:	0f d0       	rcall	.+30     	; 0x18fe <__ultoa_invert+0x86>
    18e0:	c9 f7       	brne	.-14     	; 0x18d4 <__ultoa_invert+0x5c>
    18e2:	f6 cf       	rjmp	.-20     	; 0x18d0 <__ultoa_invert+0x58>
    18e4:	46 2f       	mov	r20, r22
    18e6:	4f 70       	andi	r20, 0x0F	; 15
    18e8:	40 5d       	subi	r20, 0xD0	; 208
    18ea:	4a 33       	cpi	r20, 0x3A	; 58
    18ec:	18 f0       	brcs	.+6      	; 0x18f4 <__ultoa_invert+0x7c>
    18ee:	49 5d       	subi	r20, 0xD9	; 217
    18f0:	31 fd       	sbrc	r19, 1
    18f2:	40 52       	subi	r20, 0x20	; 32
    18f4:	41 93       	st	Z+, r20
    18f6:	02 d0       	rcall	.+4      	; 0x18fc <__ultoa_invert+0x84>
    18f8:	a9 f7       	brne	.-22     	; 0x18e4 <__ultoa_invert+0x6c>
    18fa:	ea cf       	rjmp	.-44     	; 0x18d0 <__ultoa_invert+0x58>
    18fc:	b4 e0       	ldi	r27, 0x04	; 4
    18fe:	a6 95       	lsr	r26
    1900:	97 95       	ror	r25
    1902:	87 95       	ror	r24
    1904:	77 95       	ror	r23
    1906:	67 95       	ror	r22
    1908:	ba 95       	dec	r27
    190a:	c9 f7       	brne	.-14     	; 0x18fe <__ultoa_invert+0x86>
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	61 05       	cpc	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	08 95       	ret
    1914:	9b 01       	movw	r18, r22
    1916:	ac 01       	movw	r20, r24
    1918:	0a 2e       	mov	r0, r26
    191a:	06 94       	lsr	r0
    191c:	57 95       	ror	r21
    191e:	47 95       	ror	r20
    1920:	37 95       	ror	r19
    1922:	27 95       	ror	r18
    1924:	ba 95       	dec	r27
    1926:	c9 f7       	brne	.-14     	; 0x191a <__ultoa_invert+0xa2>
    1928:	62 0f       	add	r22, r18
    192a:	73 1f       	adc	r23, r19
    192c:	84 1f       	adc	r24, r20
    192e:	95 1f       	adc	r25, r21
    1930:	a0 1d       	adc	r26, r0
    1932:	08 95       	ret

00001934 <__prologue_saves__>:
    1934:	2f 92       	push	r2
    1936:	3f 92       	push	r3
    1938:	4f 92       	push	r4
    193a:	5f 92       	push	r5
    193c:	6f 92       	push	r6
    193e:	7f 92       	push	r7
    1940:	8f 92       	push	r8
    1942:	9f 92       	push	r9
    1944:	af 92       	push	r10
    1946:	bf 92       	push	r11
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	ca 1b       	sub	r28, r26
    195e:	db 0b       	sbc	r29, r27
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	09 94       	ijmp

0000196c <__epilogue_restores__>:
    196c:	2a 88       	ldd	r2, Y+18	; 0x12
    196e:	39 88       	ldd	r3, Y+17	; 0x11
    1970:	48 88       	ldd	r4, Y+16	; 0x10
    1972:	5f 84       	ldd	r5, Y+15	; 0x0f
    1974:	6e 84       	ldd	r6, Y+14	; 0x0e
    1976:	7d 84       	ldd	r7, Y+13	; 0x0d
    1978:	8c 84       	ldd	r8, Y+12	; 0x0c
    197a:	9b 84       	ldd	r9, Y+11	; 0x0b
    197c:	aa 84       	ldd	r10, Y+10	; 0x0a
    197e:	b9 84       	ldd	r11, Y+9	; 0x09
    1980:	c8 84       	ldd	r12, Y+8	; 0x08
    1982:	df 80       	ldd	r13, Y+7	; 0x07
    1984:	ee 80       	ldd	r14, Y+6	; 0x06
    1986:	fd 80       	ldd	r15, Y+5	; 0x05
    1988:	0c 81       	ldd	r16, Y+4	; 0x04
    198a:	1b 81       	ldd	r17, Y+3	; 0x03
    198c:	aa 81       	ldd	r26, Y+2	; 0x02
    198e:	b9 81       	ldd	r27, Y+1	; 0x01
    1990:	ce 0f       	add	r28, r30
    1992:	d1 1d       	adc	r29, r1
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	ed 01       	movw	r28, r26
    19a0:	08 95       	ret

000019a2 <_exit>:
    19a2:	f8 94       	cli

000019a4 <__stop_program>:
    19a4:	ff cf       	rjmp	.-2      	; 0x19a4 <__stop_program>
