
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00002aac  00002b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  008001b0  008001b0  00002bf0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000286f  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc7  00000000  00000000  000057b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e86  00000000  00000000  0000677a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007fc  00000000  00000000  00008600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b3a  00000000  00000000  00008dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000262b  00000000  00000000  00009936  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000bf61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_4>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__vector_14>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__vector_18>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <__vector_20>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_21>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <lcd1602_send_byte+0x34>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <i2c_send_packet+0x8>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <__vector_21+0x14>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	ec ea       	ldi	r30, 0xAC	; 172
     176:	fa e2       	ldi	r31, 0x2A	; 42
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a0 3b       	cpi	r26, 0xB0	; 176
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	22 e0       	ldi	r18, 0x02	; 2
     186:	a0 eb       	ldi	r26, 0xB0	; 176
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a0 34       	cpi	r26, 0x40	; 64
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 20 0a 	call	0x1440	; 0x1440 <main>
     198:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <ADC_init>:


void ADC_init()
{
	
	PRR = 0;						//power reduction off
     1a0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
     1a4:	80 ec       	ldi	r24, 0xC0	; 192
     1a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
     1aa:	8e ee       	ldi	r24, 0xEE	; 238
     1ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
     1b0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
     1b4:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <ad_kanal>
     1b8:	08 95       	ret

000001ba <__vector_21>:


/* TODO: u ISR-u neka bude samo flag, a obrada podataka izdvojeno, jer je ovo glup nacin, da racun radim u prekidnoj rutini */

ISR(ADC_vect)
{
     1ba:	1f 92       	push	r1
     1bc:	0f 92       	push	r0
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	0f 92       	push	r0
     1c2:	11 24       	eor	r1, r1
     1c4:	8f 93       	push	r24
	/*
	 * AD konverzija
	 * ISR okine kada je gotova konverzija
	 */
	isr_adc = 1;	//set flag
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <__data_end>

}
     1cc:	8f 91       	pop	r24
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <adc_read>:

void adc_read()
{
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
	
	if (isr_adc)
     1e8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     1ec:	88 23       	and	r24, r24
     1ee:	09 f4       	brne	.+2      	; 0x1f2 <adc_read+0x1a>
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <adc_read+0x124>
	{
		isr_adc = 0;	//reset flag
     1f2:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <__data_end>
	
	
		//upis ad konverzije oba kanala u odgovarajuce promenljive
		if(ad_kanal == 0)
     1f6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <ad_kanal>
     1fa:	81 11       	cpse	r24, r1
     1fc:	09 c0       	rjmp	.+18     	; 0x210 <adc_read+0x38>
			adc_napon_raw = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
     1fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     202:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     206:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <adc_napon_raw+0x1>
     20a:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <adc_napon_raw>
     20e:	0a c0       	rjmp	.+20     	; 0x224 <adc_read+0x4c>
		else if(ad_kanal == 1)
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	41 f4       	brne	.+16     	; 0x224 <adc_read+0x4c>
			adc_struja_raw = (uint16_t)ADC;
     214:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     218:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     21c:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <adc_struja_raw+0x1>
     220:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <adc_struja_raw>
	
		//npr: napon 1023 = 280V
		//     struja 1023 = 25A
		napon = adc_napon_raw/3.65;
     224:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <adc_napon_raw>
     228:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <adc_napon_raw+0x1>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
     234:	2a e9       	ldi	r18, 0x9A	; 154
     236:	39 e9       	ldi	r19, 0x99	; 153
     238:	49 e6       	ldi	r20, 0x69	; 105
     23a:	50 e4       	ldi	r21, 0x40	; 64
     23c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__divsf3>
     240:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__fixunssfsi>
     244:	6b 01       	movw	r12, r22
     246:	7c 01       	movw	r14, r24
     248:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <napon+0x1>
     24c:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <napon>
		struja = adc_struja_raw/40.92;
     250:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <adc_struja_raw>
     254:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <adc_struja_raw+0x1>
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
     260:	24 e1       	ldi	r18, 0x14	; 20
     262:	3e ea       	ldi	r19, 0xAE	; 174
     264:	43 e2       	ldi	r20, 0x23	; 35
     266:	52 e4       	ldi	r21, 0x42	; 66
     268:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__divsf3>
     26c:	4b 01       	movw	r8, r22
     26e:	5c 01       	movw	r10, r24
     270:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <struja>
     274:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <struja+0x1>
     278:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <struja+0x2>
     27c:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <struja+0x3>
		snaga = (napon * struja)/1000.0;	//kW
     280:	b6 01       	movw	r22, r12
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
     28a:	a5 01       	movw	r20, r10
     28c:	94 01       	movw	r18, r8
     28e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__mulsf3>
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	4a e7       	ldi	r20, 0x7A	; 122
     298:	54 e4       	ldi	r21, 0x44	; 68
     29a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__divsf3>
     29e:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <snaga>
     2a2:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <snaga+0x1>
     2a6:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <snaga+0x2>
     2aa:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <snaga+0x3>
		//snaga se integrali(sumira) svaki sekund u main-u cime se racuna elektricna energija
		
		/**************************************************************************************************************/
		ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     2ae:	ea e7       	ldi	r30, 0x7A	; 122
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8f 77       	andi	r24, 0x7F	; 127
     2b6:	80 83       	st	Z, r24
	
	
		ad_kanal++;			//inkrementiraj kanal
     2b8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <ad_kanal>
     2bc:	8f 5f       	subi	r24, 0xFF	; 255
     2be:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <ad_kanal>
		if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     2c2:	82 30       	cpi	r24, 0x02	; 2
     2c4:	18 f0       	brcs	.+6      	; 0x2cc <adc_read+0xf4>
			ad_kanal = 0;
     2c6:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <ad_kanal>
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <adc_read+0xfe>
	


	
		//multipleksiranje ad ulaza; tj. promena ad kanala
		switch(ad_kanal)
     2cc:	88 23       	and	r24, r24
     2ce:	19 f0       	breq	.+6      	; 0x2d6 <adc_read+0xfe>
     2d0:	81 30       	cpi	r24, 0x01	; 1
     2d2:	39 f0       	breq	.+14     	; 0x2e2 <adc_read+0x10a>
     2d4:	0e c0       	rjmp	.+28     	; 0x2f2 <adc_read+0x11a>
		{
			case 0:
			ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     2d6:	ec e7       	ldi	r30, 0x7C	; 124
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	8c 7f       	andi	r24, 0xFC	; 252
     2de:	80 83       	st	Z, r24
			break;
     2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <adc_read+0x11a>
		
			case 1:
			ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     2e2:	ec e7       	ldi	r30, 0x7C	; 124
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	8d 7f       	andi	r24, 0xFD	; 253
     2ea:	80 83       	st	Z, r24
			ADMUX |= (0b1);
     2ec:	80 81       	ld	r24, Z
     2ee:	81 60       	ori	r24, 0x01	; 1
     2f0:	80 83       	st	Z, r24
		}
	
	
		//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala.
	
		ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     2f2:	ea e7       	ldi	r30, 0x7A	; 122
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	80 6c       	ori	r24, 0xC0	; 192
     2fa:	80 83       	st	Z, r24
		
	}
}
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	bf 90       	pop	r11
     306:	af 90       	pop	r10
     308:	9f 90       	pop	r9
     30a:	8f 90       	pop	r8
     30c:	08 95       	ret

0000030e <EEPROM_read>:


uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     30e:	f9 99       	sbic	0x1f, 1	; 31
     310:	fe cf       	rjmp	.-4      	; 0x30e <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
     312:	92 bd       	out	0x22, r25	; 34
     314:	81 bd       	out	0x21, r24	; 33
	
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     316:	f8 9a       	sbi	0x1f, 0	; 31
	
	/* Return data from Data Register */
	return EEDR;
     318:	80 b5       	in	r24, 0x20	; 32
}
     31a:	08 95       	ret

0000031c <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     31c:	f9 99       	sbic	0x1f, 1	; 31
     31e:	fe cf       	rjmp	.-4      	; 0x31c <EEPROM_write>
	
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     320:	92 bd       	out	0x22, r25	; 34
     322:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     324:	60 bd       	out	0x20, r22	; 32
	
	/**********************!!!!!!!!!!!!!!!!!!!!!!***************************/
	cli();									//zabrana interapta, po preporuci iz datasheet-a, doci ce do write-faila ako se desi interapt izmedju ova dva koraka
     326:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     328:	fa 9a       	sbi	0x1f, 2	; 31
	
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     32a:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();									//dozvola interapta
     32c:	78 94       	sei
     32e:	08 95       	ret

00000330 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     330:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     334:	88 e4       	ldi	r24, 0x48	; 72
     336:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     33a:	08 95       	ret

0000033c <i2c_start_wait>:
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	ec eb       	ldi	r30, 0xBC	; 188
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	24 ea       	ldi	r18, 0xA4	; 164
     346:	a9 eb       	ldi	r26, 0xB9	; 185
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	cb eb       	ldi	r28, 0xBB	; 187
     34c:	d0 e0       	ldi	r29, 0x00	; 0
     34e:	34 e8       	ldi	r19, 0x84	; 132
     350:	44 e9       	ldi	r20, 0x94	; 148
     352:	20 83       	st	Z, r18
     354:	90 81       	ld	r25, Z
     356:	99 23       	and	r25, r25
     358:	ec f7       	brge	.-6      	; 0x354 <i2c_start_wait+0x18>
     35a:	9c 91       	ld	r25, X
     35c:	98 7f       	andi	r25, 0xF8	; 248
     35e:	98 30       	cpi	r25, 0x08	; 8
     360:	11 f0       	breq	.+4      	; 0x366 <i2c_start_wait+0x2a>
     362:	90 31       	cpi	r25, 0x10	; 16
     364:	b1 f7       	brne	.-20     	; 0x352 <i2c_start_wait+0x16>
     366:	88 83       	st	Y, r24
     368:	30 83       	st	Z, r19
     36a:	90 81       	ld	r25, Z
     36c:	99 23       	and	r25, r25
     36e:	ec f7       	brge	.-6      	; 0x36a <i2c_start_wait+0x2e>
     370:	9c 91       	ld	r25, X
     372:	98 7f       	andi	r25, 0xF8	; 248
     374:	90 32       	cpi	r25, 0x20	; 32
     376:	11 f0       	breq	.+4      	; 0x37c <i2c_start_wait+0x40>
     378:	98 35       	cpi	r25, 0x58	; 88
     37a:	29 f4       	brne	.+10     	; 0x386 <i2c_start_wait+0x4a>
     37c:	40 83       	st	Z, r20
     37e:	90 81       	ld	r25, Z
     380:	94 fd       	sbrc	r25, 4
     382:	fd cf       	rjmp	.-6      	; 0x37e <i2c_start_wait+0x42>
     384:	e6 cf       	rjmp	.-52     	; 0x352 <i2c_start_wait+0x16>
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <i2c_stop>:
     38c:	84 e9       	ldi	r24, 0x94	; 148
     38e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     392:	ec eb       	ldi	r30, 0xBC	; 188
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	84 fd       	sbrc	r24, 4
     39a:	fd cf       	rjmp	.-6      	; 0x396 <i2c_stop+0xa>
     39c:	08 95       	ret

0000039e <i2c_write>:
     39e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3a2:	84 e8       	ldi	r24, 0x84	; 132
     3a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3a8:	ec eb       	ldi	r30, 0xBC	; 188
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	88 23       	and	r24, r24
     3b0:	ec f7       	brge	.-6      	; 0x3ac <i2c_write+0xe>
     3b2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3b6:	98 7f       	andi	r25, 0xF8	; 248
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	98 32       	cpi	r25, 0x28	; 40
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <i2c_write+0x22>
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	08 95       	ret

000003c2 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     3c2:	84 e8       	ldi	r24, 0x84	; 132
     3c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     3c8:	ec eb       	ldi	r30, 0xBC	; 188
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	88 23       	and	r24, r24
     3d0:	ec f7       	brge	.-6      	; 0x3cc <i2c_readNak+0xa>
	
    return TWDR;
     3d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     3d6:	08 95       	ret

000003d8 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     3d8:	cf 93       	push	r28
     3da:	c8 2f       	mov	r28, r24
     3dc:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     3de:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_start_wait>
	i2c_write(value);                      // write 
     3e2:	8c 2f       	mov	r24, r28
     3e4:	0e 94 cf 01 	call	0x39e	; 0x39e <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     3e8:	0e 94 c6 01 	call	0x38c	; 0x38c <i2c_stop>
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <sati_ispis>:




void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	fc 01       	movw	r30, r24
     3fa:	06 2f       	mov	r16, r22
     3fc:	17 2f       	mov	r17, r23
     3fe:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     400:	21 11       	cpse	r18, r1
     402:	28 c0       	rjmp	.+80     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	{
		(*sat)++;
     404:	80 81       	ld	r24, Z
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
     406:	99 ee       	ldi	r25, 0xE9	; 233
     408:	98 0f       	add	r25, r24
     40a:	96 30       	cpi	r25, 0x06	; 6
     40c:	18 f0       	brcs	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sat)++;
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 83       	st	Z, r24
     412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
			*sat = 0;
     414:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sat);
     416:	80 81       	ld	r24, Z
     418:	1f 92       	push	r1
     41a:	8f 93       	push	r24
     41c:	8a e2       	ldi	r24, 0x2A	; 42
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	9f 93       	push	r25
     422:	8f 93       	push	r24
     424:	1f 93       	push	r17
     426:	0f 93       	push	r16
     428:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     42c:	88 81       	ld	r24, Y
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	81 50       	subi	r24, 0x01	; 1
     432:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     436:	80 2f       	mov	r24, r16
     438:	91 2f       	mov	r25, r17
     43a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	88 81       	ld	r24, Y
     442:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	28 c0       	rjmp	.+80     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	}
	else if (inc_dec == UMANJI)
     454:	21 30       	cpi	r18, 0x01	; 1
     456:	31 f5       	brne	.+76     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	{
		(*sat)--;
     458:	80 81       	ld	r24, Z
     45a:	81 50       	subi	r24, 0x01	; 1
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     45c:	8a 3f       	cpi	r24, 0xFA	; 250
     45e:	10 f4       	brcc	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sat)--;
     460:	80 83       	st	Z, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sat = 23;
     464:	87 e1       	ldi	r24, 0x17	; 23
     466:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sat);
     468:	80 81       	ld	r24, Z
     46a:	1f 92       	push	r1
     46c:	8f 93       	push	r24
     46e:	8a e2       	ldi	r24, 0x2A	; 42
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	1f 93       	push	r17
     478:	0f 93       	push	r16
     47a:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     47e:	88 81       	ld	r24, Y
     480:	61 e0       	ldi	r22, 0x01	; 1
     482:	81 50       	subi	r24, 0x01	; 1
     484:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     488:	80 2f       	mov	r24, r16
     48a:	91 2f       	mov	r25, r17
     48c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	88 81       	ld	r24, Y
     494:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
	}
	
	
}
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	08 95       	ret

000004ae <minuti_ispis>:

void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	fc 01       	movw	r30, r24
     4b8:	06 2f       	mov	r16, r22
     4ba:	17 2f       	mov	r17, r23
     4bc:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     4be:	21 11       	cpse	r18, r1
     4c0:	28 c0       	rjmp	.+80     	; 0x512 <minuti_ispis+0x64>
	{
		(*minut)++;
     4c2:	80 81       	ld	r24, Z
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
     4c4:	95 ec       	ldi	r25, 0xC5	; 197
     4c6:	98 0f       	add	r25, r24
     4c8:	95 30       	cpi	r25, 0x05	; 5
     4ca:	18 f0       	brcs	.+6      	; 0x4d2 <minuti_ispis+0x24>
void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*minut)++;
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	80 83       	st	Z, r24
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <minuti_ispis+0x26>
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
			*minut = 0;
     4d2:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *minut);
     4d4:	80 81       	ld	r24, Z
     4d6:	1f 92       	push	r1
     4d8:	8f 93       	push	r24
     4da:	8a e2       	ldi	r24, 0x2A	; 42
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	1f 93       	push	r17
     4e4:	0f 93       	push	r16
     4e6:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     4ea:	88 81       	ld	r24, Y
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	81 50       	subi	r24, 0x01	; 1
     4f0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     4f4:	80 2f       	mov	r24, r16
     4f6:	91 2f       	mov	r25, r17
     4f8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	88 81       	ld	r24, Y
     500:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	28 c0       	rjmp	.+80     	; 0x562 <minuti_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     512:	21 30       	cpi	r18, 0x01	; 1
     514:	31 f5       	brne	.+76     	; 0x562 <minuti_ispis+0xb4>
	{
		(*minut)--;
     516:	80 81       	ld	r24, Z
     518:	81 50       	subi	r24, 0x01	; 1
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     51a:	8a 3f       	cpi	r24, 0xFA	; 250
     51c:	10 f4       	brcc	.+4      	; 0x522 <minuti_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*minut)--;
     51e:	80 83       	st	Z, r24
     520:	02 c0       	rjmp	.+4      	; 0x526 <minuti_ispis+0x78>
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*minut = 59;
     522:	8b e3       	ldi	r24, 0x3B	; 59
     524:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *minut);
     526:	80 81       	ld	r24, Z
     528:	1f 92       	push	r1
     52a:	8f 93       	push	r24
     52c:	8a e2       	ldi	r24, 0x2A	; 42
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	1f 93       	push	r17
     536:	0f 93       	push	r16
     538:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     53c:	88 81       	ld	r24, Y
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	81 50       	subi	r24, 0x01	; 1
     542:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     546:	80 2f       	mov	r24, r16
     548:	91 2f       	mov	r25, r17
     54a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	88 81       	ld	r24, Y
     552:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
	}
	
	
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	08 95       	ret

0000056c <sekundi_ispis>:

void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	fc 01       	movw	r30, r24
     576:	06 2f       	mov	r16, r22
     578:	17 2f       	mov	r17, r23
     57a:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     57c:	21 11       	cpse	r18, r1
     57e:	28 c0       	rjmp	.+80     	; 0x5d0 <sekundi_ispis+0x64>
	{
		(*sekund)++;
     580:	80 81       	ld	r24, Z
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
     582:	95 ec       	ldi	r25, 0xC5	; 197
     584:	98 0f       	add	r25, r24
     586:	95 30       	cpi	r25, 0x05	; 5
     588:	18 f0       	brcs	.+6      	; 0x590 <sekundi_ispis+0x24>
void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sekund)++;
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	80 83       	st	Z, r24
     58e:	01 c0       	rjmp	.+2      	; 0x592 <sekundi_ispis+0x26>
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
			*sekund = 0;
     590:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sekund);
     592:	80 81       	ld	r24, Z
     594:	1f 92       	push	r1
     596:	8f 93       	push	r24
     598:	8a e2       	ldi	r24, 0x2A	; 42
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	1f 93       	push	r17
     5a2:	0f 93       	push	r16
     5a4:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     5a8:	88 81       	ld	r24, Y
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	81 50       	subi	r24, 0x01	; 1
     5ae:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     5b2:	80 2f       	mov	r24, r16
     5b4:	91 2f       	mov	r25, r17
     5b6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	88 81       	ld	r24, Y
     5be:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	28 c0       	rjmp	.+80     	; 0x620 <sekundi_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     5d0:	21 30       	cpi	r18, 0x01	; 1
     5d2:	31 f5       	brne	.+76     	; 0x620 <sekundi_ispis+0xb4>
	{
		(*sekund)--;
     5d4:	80 81       	ld	r24, Z
     5d6:	81 50       	subi	r24, 0x01	; 1
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     5d8:	8a 3f       	cpi	r24, 0xFA	; 250
     5da:	10 f4       	brcc	.+4      	; 0x5e0 <sekundi_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sekund)--;
     5dc:	80 83       	st	Z, r24
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <sekundi_ispis+0x78>
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sekund = 59;
     5e0:	8b e3       	ldi	r24, 0x3B	; 59
     5e2:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sekund);
     5e4:	80 81       	ld	r24, Z
     5e6:	1f 92       	push	r1
     5e8:	8f 93       	push	r24
     5ea:	8a e2       	ldi	r24, 0x2A	; 42
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	1f 93       	push	r17
     5f4:	0f 93       	push	r16
     5f6:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     5fa:	88 81       	ld	r24, Y
     5fc:	61 e0       	ldi	r22, 0x01	; 1
     5fe:	81 50       	subi	r24, 0x01	; 1
     600:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     604:	80 2f       	mov	r24, r16
     606:	91 2f       	mov	r25, r17
     608:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	88 81       	ld	r24, Y
     610:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
	}
	
	
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <putnibble>:
uint8_t led_pin;



void putnibble(char t)
{
     62a:	cf 93       	push	r28
     62c:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_W);		//SLA_W je i2c adresa shifotvana u levo za 1
     62e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <led_pin>
     632:	84 60       	ori	r24, 0x04	; 4
     634:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <led_pin>
     638:	6e e4       	ldi	r22, 0x4E	; 78
     63a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63e:	87 ec       	ldi	r24, 0xC7	; 199
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <putnibble+0x18>
     646:	00 c0       	rjmp	.+0      	; 0x648 <putnibble+0x1e>
     648:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_W);
     64a:	c2 95       	swap	r28
     64c:	c0 7f       	andi	r28, 0xF0	; 240
     64e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <led_pin>
     652:	6e e4       	ldi	r22, 0x4E	; 78
     654:	8c 2b       	or	r24, r28
     656:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_W);
     65a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <led_pin>
     65e:	8b 7f       	andi	r24, 0xFB	; 251
     660:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <led_pin>
     664:	6e e4       	ldi	r22, 0x4E	; 78
     666:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
     66a:	87 ec       	ldi	r24, 0xC7	; 199
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <putnibble+0x44>
     672:	00 c0       	rjmp	.+0      	; 0x674 <putnibble+0x4a>
     674:	00 00       	nop
	_delay_us(50);
}
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <lcd1602_send_byte>:

void lcd1602_send_byte(char c, char rs)
{
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
     680:	d8 2f       	mov	r29, r24
     682:	d2 95       	swap	r29
     684:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
     686:	61 11       	cpse	r22, r1
     688:	09 c0       	rjmp	.+18     	; 0x69c <lcd1602_send_byte+0x22>
		i2c_send_packet(led_pin &=~ 0x01, SLA_W);
     68a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <led_pin>
     68e:	8e 7f       	andi	r24, 0xFE	; 254
     690:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <led_pin>
     694:	6e e4       	ldi	r22, 0x4E	; 78
     696:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
     69a:	08 c0       	rjmp	.+16     	; 0x6ac <lcd1602_send_byte+0x32>
	else
		i2c_send_packet(led_pin |= 0x01, SLA_W);
     69c:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <led_pin>
     6a0:	81 60       	ori	r24, 0x01	; 1
     6a2:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <led_pin>
     6a6:	6e e4       	ldi	r22, 0x4E	; 78
     6a8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
	putnibble(highc);
     6ac:	8d 2f       	mov	r24, r29
     6ae:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
	putnibble(c);
     6b2:	8c 2f       	mov	r24, r28
     6b4:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <lcd1602_send_char>:

void lcd1602_send_char(char c)
{
     6be:	cf 93       	push	r28
     6c0:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_W);
     6c2:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <led_pin>
     6c6:	81 60       	ori	r24, 0x01	; 1
     6c8:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <led_pin>
     6cc:	6e e4       	ldi	r22, 0x4E	; 78
     6ce:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
	putnibble(highc);
     6d2:	8c 2f       	mov	r24, r28
     6d4:	82 95       	swap	r24
     6d6:	8f 70       	andi	r24, 0x0F	; 15
     6d8:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
	putnibble(c);
     6dc:	8c 2f       	mov	r24, r28
     6de:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
}
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <lcd1602_init>:

void lcd1602_init()
{
	led_pin = 0;
     6e6:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <led_pin>
	i2c_init();
     6ea:	0e 94 98 01 	call	0x330	; 0x330 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ee:	8f e5       	ldi	r24, 0x5F	; 95
     6f0:	9a ee       	ldi	r25, 0xEA	; 234
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <lcd1602_init+0xc>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <lcd1602_init+0x12>
     6f8:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
     700:	8f e7       	ldi	r24, 0x7F	; 127
     702:	9e e3       	ldi	r25, 0x3E	; 62
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <lcd1602_init+0x1e>
     708:	00 c0       	rjmp	.+0      	; 0x70a <lcd1602_init+0x24>
     70a:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     712:	8f e8       	ldi	r24, 0x8F	; 143
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <lcd1602_init+0x30>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <lcd1602_init+0x36>
     71c:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     724:	8f e9       	ldi	r24, 0x9F	; 159
     726:	9f e0       	ldi	r25, 0x0F	; 15
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <lcd1602_init+0x42>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <lcd1602_init+0x48>
     72e:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	0e 94 15 03 	call	0x62a	; 0x62a <putnibble>
     736:	8f e9       	ldi	r24, 0x9F	; 159
     738:	9f e0       	ldi	r25, 0x0F	; 15
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <lcd1602_init+0x54>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <lcd1602_init+0x5a>
     740:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x28, LCD_COMMAND);
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	88 e2       	ldi	r24, 0x28	; 40
     746:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     74a:	8f e9       	ldi	r24, 0x9F	; 159
     74c:	9f e0       	ldi	r25, 0x0F	; 15
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <lcd1602_init+0x68>
     752:	00 c0       	rjmp	.+0      	; 0x754 <lcd1602_init+0x6e>
     754:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x0C, LCD_COMMAND);
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	8c e0       	ldi	r24, 0x0C	; 12
     75a:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     75e:	8f e9       	ldi	r24, 0x9F	; 159
     760:	9f e0       	ldi	r25, 0x0F	; 15
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <lcd1602_init+0x7c>
     766:	00 c0       	rjmp	.+0      	; 0x768 <lcd1602_init+0x82>
     768:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x06, LCD_COMMAND);
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	86 e0       	ldi	r24, 0x06	; 6
     76e:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     772:	8f e9       	ldi	r24, 0x9F	; 159
     774:	9f e0       	ldi	r25, 0x0F	; 15
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <lcd1602_init+0x90>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <lcd1602_init+0x96>
     77c:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_W);
     77e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <led_pin>
     782:	88 60       	ori	r24, 0x08	; 8
     784:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <led_pin>
     788:	6e e4       	ldi	r22, 0x4E	; 78
     78a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_W);
     78e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <led_pin>
     792:	8d 7f       	andi	r24, 0xFD	; 253
     794:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <led_pin>
     798:	6e e4       	ldi	r22, 0x4E	; 78
     79a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <i2c_send_packet>
     79e:	08 95       	ret

000007a0 <lcd1602_clear>:
}

void lcd1602_clear()
{
	lcd1602_send_byte(0x01, LCD_COMMAND);
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a8:	8f e8       	ldi	r24, 0x8F	; 143
     7aa:	9a e1       	ldi	r25, 0x1A	; 26
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <lcd1602_clear+0xc>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <lcd1602_clear+0x12>
     7b2:	00 00       	nop
     7b4:	08 95       	ret

000007b6 <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     7b6:	90 e4       	ldi	r25, 0x40	; 64
     7b8:	69 9f       	mul	r22, r25
     7ba:	80 0d       	add	r24, r0
     7bc:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	80 68       	ori	r24, 0x80	; 128
     7c2:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     7c6:	08 95       	ret

000007c8 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     7d0:	80 81       	ld	r24, Z
     7d2:	88 23       	and	r24, r24
     7d4:	59 f0       	breq	.+22     	; 0x7ec <lcd1602_send_string+0x24>
     7d6:	8f 01       	movw	r16, r30
     7d8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     7da:	0e 94 5f 03 	call	0x6be	; 0x6be <lcd1602_send_char>
		i++;
     7de:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     7e0:	f8 01       	movw	r30, r16
     7e2:	ec 0f       	add	r30, r28
     7e4:	f1 1d       	adc	r31, r1
     7e6:	80 81       	ld	r24, Z
     7e8:	81 11       	cpse	r24, r1
     7ea:	f7 cf       	rjmp	.-18     	; 0x7da <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     7f4:	88 23       	and	r24, r24
     7f6:	29 f0       	breq	.+10     	; 0x802 <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);	//blink on
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	8f e0       	ldi	r24, 0x0F	; 15
     7fc:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     800:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);	//blink off
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	8c e0       	ldi	r24, 0x0C	; 12
     806:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd1602_send_byte>
     80a:	08 95       	ret

0000080c <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     80c:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     80e:	dc 01       	movw	r26, r24
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	2c 91       	ld	r18, X
     814:	12 97       	sbiw	r26, 0x02	; 2
     816:	54 e6       	ldi	r21, 0x64	; 100
     818:	11 96       	adiw	r26, 0x01	; 1
     81a:	8c 91       	ld	r24, X
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	52 9f       	mul	r21, r18
     820:	80 0d       	add	r24, r0
     822:	91 1d       	adc	r25, r1
     824:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     826:	db 01       	movw	r26, r22
     828:	12 96       	adiw	r26, 0x02	; 2
     82a:	2c 91       	ld	r18, X
     82c:	12 97       	sbiw	r26, 0x02	; 2
     82e:	11 96       	adiw	r26, 0x01	; 1
     830:	6c 91       	ld	r22, X
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	52 9f       	mul	r21, r18
     836:	60 0d       	add	r22, r0
     838:	71 1d       	adc	r23, r1
     83a:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     83c:	42 81       	ldd	r20, Z+2	; 0x02
     83e:	21 81       	ldd	r18, Z+1	; 0x01
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	54 9f       	mul	r21, r20
     844:	20 0d       	add	r18, r0
     846:	31 1d       	adc	r19, r1
     848:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     84a:	86 17       	cp	r24, r22
     84c:	97 07       	cpc	r25, r23
     84e:	68 f0       	brcs	.+26     	; 0x86a <period_paljenja+0x5e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     850:	28 17       	cp	r18, r24
     852:	39 07       	cpc	r19, r25
     854:	20 f0       	brcs	.+8      	; 0x85e <period_paljenja+0x52>
     856:	28 33       	cpi	r18, 0x38	; 56
     858:	b9 e0       	ldi	r27, 0x09	; 9
     85a:	3b 07       	cpc	r19, r27
     85c:	78 f0       	brcs	.+30     	; 0x87c <period_paljenja+0x70>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	26 17       	cp	r18, r22
     862:	37 07       	cpc	r19, r23
     864:	70 f0       	brcs	.+28     	; 0x882 <period_paljenja+0x76>
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     86a:	28 17       	cp	r18, r24
     86c:	39 07       	cpc	r19, r25
     86e:	40 f0       	brcs	.+16     	; 0x880 <period_paljenja+0x74>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	26 17       	cp	r18, r22
     874:	37 07       	cpc	r19, r23
     876:	28 f0       	brcs	.+10     	; 0x882 <period_paljenja+0x76>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     880:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     882:	08 95       	ret

00000884 <fsm_lcd_menu>:

void fsm_lcd_menu()
{
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
	int pom;
	
	switch(STATE)
     88c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <STATE>
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	09 f4       	brne	.+2      	; 0x896 <fsm_lcd_menu+0x12>
     894:	14 c1       	rjmp	.+552    	; 0xabe <__stack+0x1bf>
     896:	30 f4       	brcc	.+12     	; 0x8a4 <fsm_lcd_menu+0x20>
     898:	88 23       	and	r24, r24
     89a:	69 f0       	breq	.+26     	; 0x8b6 <fsm_lcd_menu+0x32>
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	09 f4       	brne	.+2      	; 0x8a2 <fsm_lcd_menu+0x1e>
     8a0:	94 c0       	rjmp	.+296    	; 0x9ca <__stack+0xcb>
     8a2:	c9 c5       	rjmp	.+2962   	; 0x1436 <__stack+0xb37>
     8a4:	84 30       	cpi	r24, 0x04	; 4
     8a6:	09 f4       	brne	.+2      	; 0x8aa <fsm_lcd_menu+0x26>
     8a8:	fc c2       	rjmp	.+1528   	; 0xea2 <__stack+0x5a3>
     8aa:	08 f4       	brcc	.+2      	; 0x8ae <fsm_lcd_menu+0x2a>
     8ac:	ee c1       	rjmp	.+988    	; 0xc8a <__stack+0x38b>
     8ae:	85 30       	cpi	r24, 0x05	; 5
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <fsm_lcd_menu+0x30>
     8b2:	5a c4       	rjmp	.+2228   	; 0x1168 <__stack+0x869>
     8b4:	c0 c5       	rjmp	.+2944   	; 0x1436 <__stack+0xb37>
		
		case DISPL1:
				/* prvi, tj. glavni meni sa ispisom tren. vremena i vremena on/off */
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				
				if ( displ_flag_shot )	//samo prvi put kad se uleti
     8b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8ba:	88 23       	and	r24, r24
     8bc:	31 f0       	breq	.+12     	; 0x8ca <fsm_lcd_menu+0x46>
				{
					displ_flag_shot = 0; //resetujem flag, i zabranim ponovni ulazak
     8be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     8c2:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <timer_disp_cycle+0x1>
     8c6:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <timer_disp_cycle>
				}
				if (timer_disp_cycle > 7000)	//7 sekundi
     8ca:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <timer_disp_cycle>
     8ce:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <timer_disp_cycle+0x1>
     8d2:	89 35       	cpi	r24, 0x59	; 89
     8d4:	9b 41       	sbci	r25, 0x1B	; 27
     8d6:	28 f0       	brcs	.+10     	; 0x8e2 <fsm_lcd_menu+0x5e>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = DISPL2;
     8de:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
				}
						
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     8e2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <flag_pc_int>
     8e6:	88 23       	and	r24, r24
     8e8:	09 f4       	brne	.+2      	; 0x8ec <fsm_lcd_menu+0x68>
     8ea:	60 c0       	rjmp	.+192    	; 0x9ac <__stack+0xad>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     8ec:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <flag_pc_int>
			
					getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     8f0:	00 e0       	ldi	r16, 0x00	; 0
     8f2:	25 e3       	ldi	r18, 0x35	; 53
     8f4:	32 e0       	ldi	r19, 0x02	; 2
     8f6:	4d e2       	ldi	r20, 0x2D	; 45
     8f8:	52 e0       	ldi	r21, 0x02	; 2
     8fa:	6e e2       	ldi	r22, 0x2E	; 46
     8fc:	72 e0       	ldi	r23, 0x02	; 2
     8fe:	8f e2       	ldi	r24, 0x2F	; 47
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     906:	ed e2       	ldi	r30, 0x2D	; 45
     908:	f2 e0       	ldi	r31, 0x02	; 2
     90a:	80 81       	ld	r24, Z
     90c:	1f 92       	push	r1
     90e:	8f 93       	push	r24
     910:	81 81       	ldd	r24, Z+1	; 0x01
     912:	1f 92       	push	r1
     914:	8f 93       	push	r24
     916:	82 81       	ldd	r24, Z+2	; 0x02
     918:	1f 92       	push	r1
     91a:	8f 93       	push	r24
     91c:	86 e0       	ldi	r24, 0x06	; 6
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	9f 93       	push	r25
     922:	8f 93       	push	r24
     924:	c5 ef       	ldi	r28, 0xF5	; 245
     926:	d1 e0       	ldi	r29, 0x01	; 1
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
					
					//lcd1602_clear();
			
					/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
					lcd1602_goto_xy(0,0);
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string("    ");
     938:	85 e1       	ldi	r24, 0x15	; 21
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_send_string(bafer);
     940:	ce 01       	movw	r24, r28
     942:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_send_string("    ");
     946:	85 e1       	ldi	r24, 0x15	; 21
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
			
					lcd1602_goto_xy(0,1);
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string("  ");
     956:	87 e1       	ldi	r24, 0x17	; 23
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     95e:	e4 e2       	ldi	r30, 0x24	; 36
     960:	f2 e0       	ldi	r31, 0x02	; 2
     962:	81 81       	ldd	r24, Z+1	; 0x01
     964:	1f 92       	push	r1
     966:	8f 93       	push	r24
     968:	82 81       	ldd	r24, Z+2	; 0x02
     96a:	1f 92       	push	r1
     96c:	8f 93       	push	r24
     96e:	e2 e1       	ldi	r30, 0x12	; 18
     970:	f2 e0       	ldi	r31, 0x02	; 2
     972:	81 81       	ldd	r24, Z+1	; 0x01
     974:	1f 92       	push	r1
     976:	8f 93       	push	r24
     978:	82 81       	ldd	r24, Z+2	; 0x02
     97a:	1f 92       	push	r1
     97c:	8f 93       	push	r24
     97e:	8a e1       	ldi	r24, 0x1A	; 26
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	9f 93       	push	r25
     984:	8f 93       	push	r24
     986:	df 93       	push	r29
     988:	cf 93       	push	r28
     98a:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
					lcd1602_send_string(bafer);
     98e:	ce 01       	movw	r24, r28
     990:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_send_string("  ");
     994:	87 e1       	ldi	r24, 0x17	; 23
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
     99c:	8d b7       	in	r24, 0x3d	; 61
     99e:	9e b7       	in	r25, 0x3e	; 62
     9a0:	46 96       	adiw	r24, 0x16	; 22
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	9e bf       	out	0x3e, r25	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	8d bf       	out	0x3d, r24	; 61
			
				}
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     9ac:	65 e0       	ldi	r22, 0x05	; 5
     9ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     9b2:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     9b6:	88 23       	and	r24, r24
     9b8:	09 f4       	brne	.+2      	; 0x9bc <__stack+0xbd>
     9ba:	3d c5       	rjmp	.+2682   	; 0x1436 <__stack+0xb37>
				{
					displ_flag_shot = 1;	//opet dozvolim, pri izlazku iz ovog stejta
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
     9c8:	36 c5       	rjmp	.+2668   	; 0x1436 <__stack+0xb37>
		break;
		
		case DISPL2:
				//ispisuje napon, struju, snagu... Smenjuje se periodicno sa DISPL1, uz pomoc tajmera
				
				if ( displ_flag_shot )	//samo prvi put kad se uleti
     9ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9ce:	88 23       	and	r24, r24
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <__stack+0xd5>
     9d2:	5a c0       	rjmp	.+180    	; 0xa88 <__stack+0x189>
				{
					displ_flag_shot = 0; //resetujem flag, i zabranim ponovni ulazak
     9d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     9d8:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <timer_disp_cycle+0x1>
     9dc:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <timer_disp_cycle>
					
					lcd1602_clear();
     9e0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <lcd1602_clear>
					
					sprintf(bafer, "%4dV", napon);
     9e4:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <napon+0x1>
     9e8:	8f 93       	push	r24
     9ea:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <napon>
     9ee:	8f 93       	push	r24
     9f0:	8f e2       	ldi	r24, 0x2F	; 47
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	85 ef       	ldi	r24, 0xF5	; 245
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	9f 93       	push	r25
     9fe:	8f 93       	push	r24
     a00:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
					lcd1602_goto_xy(1,0);
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(bafer);
     a0c:	85 ef       	ldi	r24, 0xF5	; 245
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					
					dtostrf(struja, 4, 1, bafer);
     a14:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <struja>
     a18:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <struja+0x1>
     a1c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <struja+0x2>
     a20:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <struja+0x3>
     a24:	05 ef       	ldi	r16, 0xF5	; 245
     a26:	11 e0       	ldi	r17, 0x01	; 1
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	44 e0       	ldi	r20, 0x04	; 4
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	0e 94 18 10 	call	0x2030	; 0x2030 <dtostrf>
					lcd1602_goto_xy(1,1);
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(bafer);
     a3c:	c8 01       	movw	r24, r16
     a3e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_send_string("A");
     a42:	80 e5       	ldi	r24, 0x50	; 80
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					
					dtostrf(snaga, 4, 1, bafer);
     a4a:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <snaga>
     a4e:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <snaga+0x1>
     a52:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <snaga+0x2>
     a56:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <snaga+0x3>
     a5a:	21 e0       	ldi	r18, 0x01	; 1
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	44 e0       	ldi	r20, 0x04	; 4
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	0e 94 18 10 	call	0x2030	; 0x2030 <dtostrf>
					lcd1602_goto_xy(9,0);
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	89 e0       	ldi	r24, 0x09	; 9
     a6a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(bafer);
     a6e:	c8 01       	movw	r24, r16
     a70:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_send_string("kW");
     a74:	84 e3       	ldi	r24, 0x34	; 52
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
					//lcd1602_goto_xy(0,0);
					//lcd1602_send_string("224V      2.2kW");
					//lcd1602_goto_xy(0,1);
					//lcd1602_send_string("9.88A    396kWh");
				}
				if (timer_disp_cycle > 4000)	//4 sekunde
     a88:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <timer_disp_cycle>
     a8c:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <timer_disp_cycle+0x1>
     a90:	81 3a       	cpi	r24, 0xA1	; 161
     a92:	9f 40       	sbci	r25, 0x0F	; 15
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__stack+0x1a1>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = DISPL1;
     a9c:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <STATE>
				}
				
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     aa0:	65 e0       	ldi	r22, 0x05	; 5
     aa2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     aa6:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     aaa:	88 23       	and	r24, r24
     aac:	09 f4       	brne	.+2      	; 0xab0 <__stack+0x1b1>
     aae:	c3 c4       	rjmp	.+2438   	; 0x1436 <__stack+0xb37>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
     abc:	bc c4       	rjmp	.+2424   	; 0x1436 <__stack+0xb37>
					
		break;
		
		case MENU1:
					//lcd1602_clear();
					pom = kursor;
     abe:	c0 91 c6 01 	lds	r28, 0x01C6	; 0x8001c6 <kursor>
     ac2:	0c 2e       	mov	r0, r28
     ac4:	00 0c       	add	r0, r0
     ac6:	dd 0b       	sbc	r29, r29
					
					lcd1602_goto_xy(0, 0);
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(">");	//fiksno, a djiram text za menije vertikalno
     ad0:	8f e3       	ldi	r24, 0x3F	; 63
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					lcd1602_goto_xy(0,1);
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(" ");	//prazno polje ispod ">"
     ae0:	88 e1       	ldi	r24, 0x18	; 24
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>

					lcd1602_goto_xy(1,0);
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					lcd1602_send_string(menu1_txt[kursor]);
     af0:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     af4:	21 e1       	ldi	r18, 0x11	; 17
     af6:	82 02       	muls	r24, r18
     af8:	c0 01       	movw	r24, r0
     afa:	11 24       	eor	r1, r1
     afc:	84 58       	subi	r24, 0x84	; 132
     afe:	9e 4f       	sbci	r25, 0xFE	; 254
     b00:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					if (kursor == KURSOR_JEDNOKRAT)			//jednokrat na prvoj liniji
     b04:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     b08:	81 11       	cpse	r24, r1
     b0a:	15 c0       	rjmp	.+42     	; 0xb36 <__stack+0x237>
					{
						if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     b0c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <jednok_on_off>
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	49 f4       	brne	.+18     	; 0xb26 <__stack+0x227>
						{
							lcd1602_goto_xy(12,0);
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	8c e0       	ldi	r24, 0x0C	; 12
     b18:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
							lcd1602_send_string("<ON>");
     b1c:	87 e3       	ldi	r24, 0x37	; 55
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
     b24:	08 c0       	rjmp	.+16     	; 0xb36 <__stack+0x237>
						}
						else					//ako je off ispisi <OF> pored JEDNOKRATNO
						{
							lcd1602_goto_xy(12,0);
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	8c e0       	ldi	r24, 0x0C	; 12
     b2a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
							lcd1602_send_string("<OF>");
     b2e:	8c e3       	ldi	r24, 0x3C	; 60
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						}
					}
					
					lcd1602_goto_xy(1,1);
     b36:	61 e0       	ldi	r22, 0x01	; 1
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
					pom = (pom==KURSOR_MENU1_MAX) ? -1 : pom;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
     b3e:	c2 30       	cpi	r28, 0x02	; 2
     b40:	d1 05       	cpc	r29, r1
     b42:	09 f4       	brne	.+2      	; 0xb46 <__stack+0x247>
     b44:	73 c4       	rjmp	.+2278   	; 0x142c <__stack+0xb2d>
					lcd1602_send_string(menu1_txt[pom + 1]);
     b46:	9e 01       	movw	r18, r28
     b48:	2f 5f       	subi	r18, 0xFF	; 255
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	41 e1       	ldi	r20, 0x11	; 17
     b4e:	42 9f       	mul	r20, r18
     b50:	c0 01       	movw	r24, r0
     b52:	43 9f       	mul	r20, r19
     b54:	90 0d       	add	r25, r0
     b56:	11 24       	eor	r1, r1
     b58:	84 58       	subi	r24, 0x84	; 132
     b5a:	9e 4f       	sbci	r25, 0xFE	; 254
     b5c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
					if ( (pom+1) == KURSOR_JEDNOKRAT)			//jednokrat na drugoj liniji, sa wrap-around-om
     b60:	21 96       	adiw	r28, 0x01	; 1
     b62:	a9 f4       	brne	.+42     	; 0xb8e <__stack+0x28f>
					{
						if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     b64:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <jednok_on_off>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	49 f4       	brne	.+18     	; 0xb7e <__stack+0x27f>
						{
							lcd1602_goto_xy(12,1);
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	8c e0       	ldi	r24, 0x0C	; 12
     b70:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
							lcd1602_send_string("<ON>");
     b74:	87 e3       	ldi	r24, 0x37	; 55
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
     b7c:	08 c0       	rjmp	.+16     	; 0xb8e <__stack+0x28f>
						}
						else					//ako je off ispisi <OF> pored JEDNOKRATNO
						{
							lcd1602_goto_xy(12,1);
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	8c e0       	ldi	r24, 0x0C	; 12
     b82:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
							lcd1602_send_string("<OF>");
     b86:	8c e3       	ldi	r24, 0x3C	; 60
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						}
					}

		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     b8e:	63 e0       	ldi	r22, 0x03	; 3
     b90:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     b94:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     b98:	88 23       	and	r24, r24
     b9a:	59 f0       	breq	.+22     	; 0xbb2 <__stack+0x2b3>
					{
						kursor++;
     b9c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     ba0:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor > KURSOR_MENU1_MAX)
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	1c f4       	brge	.+6      	; 0xbac <__stack+0x2ad>
					}

		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor++;
     ba6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
     baa:	45 c4       	rjmp	.+2186   	; 0x1436 <__stack+0xb37>
						if(kursor > KURSOR_MENU1_MAX)
						kursor = 0;
     bac:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
     bb0:	42 c4       	rjmp	.+2180   	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     bb2:	62 e0       	ldi	r22, 0x02	; 2
     bb4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     bb8:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     bbc:	88 23       	and	r24, r24
     bbe:	59 f0       	breq	.+22     	; 0xbd6 <__stack+0x2d7>
					{
						kursor--;
     bc0:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     bc4:	81 50       	subi	r24, 0x01	; 1
						if(kursor < 0)		//min je 0, logicno
     bc6:	1a f0       	brmi	.+6      	; 0xbce <__stack+0x2cf>
						if(kursor > KURSOR_MENU1_MAX)
						kursor = 0;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor--;
     bc8:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
     bcc:	34 c4       	rjmp	.+2152   	; 0x1436 <__stack+0xb37>
						if(kursor < 0)		//min je 0, logicno
						kursor = KURSOR_MENU1_MAX;
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
     bd4:	30 c4       	rjmp	.+2144   	; 0x1436 <__stack+0xb37>
					}
					else if(kursor == KURSOR_PODSAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     bd6:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	69 f4       	brne	.+26     	; 0xbf8 <__stack+0x2f9>
     bde:	65 e0       	ldi	r22, 0x05	; 5
     be0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     be4:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     be8:	88 23       	and	r24, r24
     bea:	31 f0       	breq	.+12     	; 0xbf8 <__stack+0x2f9>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     bec:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
						STATE = POD_SAT;	//meni za podesavanje sata
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
     bf6:	1f c4       	rjmp	.+2110   	; 0x1436 <__stack+0xb37>
					}
					else if(kursor == KURSOR_PODONOF && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     bf8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	69 f4       	brne	.+26     	; 0xc1a <__stack+0x31b>
     c00:	65 e0       	ldi	r22, 0x05	; 5
     c02:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c06:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     c0a:	88 23       	and	r24, r24
     c0c:	31 f0       	breq	.+12     	; 0xc1a <__stack+0x31b>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     c0e:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     c12:	84 e0       	ldi	r24, 0x04	; 4
     c14:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
     c18:	0e c4       	rjmp	.+2076   	; 0x1436 <__stack+0xb37>
					}
					else if(kursor == KURSOR_JEDNOKRAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     c1a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     c1e:	81 11       	cpse	r24, r1
     c20:	27 c0       	rjmp	.+78     	; 0xc70 <__stack+0x371>
     c22:	65 e0       	ldi	r22, 0x05	; 5
     c24:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c28:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     c2c:	88 23       	and	r24, r24
     c2e:	31 f0       	breq	.+12     	; 0xc3c <__stack+0x33d>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     c30:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
						STATE = JEDNOKRATNO;	//sub_meni za podesavanje on ili off vremena jednokratno
     c34:	85 e0       	ldi	r24, 0x05	; 5
     c36:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
     c3a:	fd c3       	rjmp	.+2042   	; 0x1436 <__stack+0xb37>
					}
					else if( kursor == KURSOR_JEDNOKRAT && ( ocitaj_jedan_taster(tasteri, TASTER_LEVO) ||  ocitaj_jedan_taster(tasteri, TASTER_DESNO) ) ) //levo ili desno kad je na JEDNOKRATNO da togluje on/of
     c3c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     c40:	81 11       	cpse	r24, r1
     c42:	16 c0       	rjmp	.+44     	; 0xc70 <__stack+0x371>
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c4a:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     c4e:	81 11       	cpse	r24, r1
     c50:	07 c0       	rjmp	.+14     	; 0xc60 <__stack+0x361>
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c58:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     c5c:	88 23       	and	r24, r24
     c5e:	41 f0       	breq	.+16     	; 0xc70 <__stack+0x371>
					{
						jednok_on_off = !jednok_on_off;	//toggle
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <jednok_on_off>
     c66:	91 11       	cpse	r25, r1
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <jednok_on_off>
     c6e:	e3 c3       	rjmp	.+1990   	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     c70:	64 e0       	ldi	r22, 0x04	; 4
     c72:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     c76:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     c7a:	88 23       	and	r24, r24
     c7c:	09 f4       	brne	.+2      	; 0xc80 <__stack+0x381>
     c7e:	db c3       	rjmp	.+1974   	; 0x1436 <__stack+0xb37>
					{
						kursor = 0;			//resetujem kursor jer ostane memorisan
     c80:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     c84:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <STATE>
     c88:	d6 c3       	rjmp	.+1964   	; 0x1436 <__stack+0xb37>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (flag_pod_vremena)
     c8a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag_pod_vremena>
     c8e:	88 23       	and	r24, r24
     c90:	09 f4       	brne	.+2      	; 0xc94 <__stack+0x395>
     c92:	4b c0       	rjmp	.+150    	; 0xd2a <__stack+0x42b>
					{
						flag_pod_vremena = 0;
     c94:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag_pod_vremena>
						snap_shot_vremena = vreme_datum;
     c98:	89 e0       	ldi	r24, 0x09	; 9
     c9a:	ed e2       	ldi	r30, 0x2D	; 45
     c9c:	f2 e0       	ldi	r31, 0x02	; 2
     c9e:	ac ee       	ldi	r26, 0xEC	; 236
     ca0:	b1 e0       	ldi	r27, 0x01	; 1
     ca2:	01 90       	ld	r0, Z+
     ca4:	0d 92       	st	X+, r0
     ca6:	8a 95       	dec	r24
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <__stack+0x3a3>
						sprintf(bafer, "%02d:%02d:%02d", snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s);
     caa:	ec ee       	ldi	r30, 0xEC	; 236
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	80 81       	ld	r24, Z
     cb0:	1f 92       	push	r1
     cb2:	8f 93       	push	r24
     cb4:	81 81       	ldd	r24, Z+1	; 0x01
     cb6:	1f 92       	push	r1
     cb8:	8f 93       	push	r24
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	1f 92       	push	r1
     cbe:	8f 93       	push	r24
     cc0:	86 e0       	ldi	r24, 0x06	; 6
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	85 ef       	ldi	r24, 0xF5	; 245
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	9f 93       	push	r25
     cce:	8f 93       	push	r24
     cd0:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
			
						kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     cd4:	85 e0       	ldi	r24, 0x05	; 5
     cd6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
			
						lcd1602_goto_xy(0,0);
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("PODESAVANJE SATA");
     ce2:	81 e4       	ldi	r24, 0x41	; 65
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
			
						lcd1602_goto_xy(0,1);
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("    ");
     cf2:	85 e1       	ldi	r24, 0x15	; 21
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     cfa:	85 ef       	ldi	r24, 0xF5	; 245
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string("    ");
     d02:	85 e1       	ldi	r24, 0x15	; 21
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
			
						lcd1602_goto_xy(kursor,1);
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     d10:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
     d1a:	8d b7       	in	r24, 0x3d	; 61
     d1c:	9e b7       	in	r25, 0x3e	; 62
     d1e:	0a 96       	adiw	r24, 0x0a	; 10
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	9e bf       	out	0x3e, r25	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	8d bf       	out	0x3d, r24	; 61
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     d30:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     d34:	88 23       	and	r24, r24
     d36:	89 f0       	breq	.+34     	; 0xd5a <__stack+0x45b>
					{
						kursor += 3;
     d38:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     d3c:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 11)
     d3e:	8c 30       	cpi	r24, 0x0C	; 12
     d40:	1c f4       	brge	.+6      	; 0xd48 <__stack+0x449>
						lcd1602_cursor_blink(1);
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     d42:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <__stack+0x44f>
						if(kursor > 11)
							kursor = 11;
     d48:	8b e0       	ldi	r24, 0x0B	; 11
     d4a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
						lcd1602_goto_xy(kursor,1);
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     d54:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     d58:	6e c3       	rjmp	.+1756   	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     d60:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     d64:	88 23       	and	r24, r24
     d66:	89 f0       	breq	.+34     	; 0xd8a <__stack+0x48b>
					{
						kursor -= 3;
     d68:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     d6c:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 5)
     d6e:	85 30       	cpi	r24, 0x05	; 5
     d70:	1c f0       	brlt	.+6      	; 0xd78 <__stack+0x479>
							kursor = 11;
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     d72:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <__stack+0x47f>
						if(kursor < 5)
							kursor = 5;
     d78:	85 e0       	ldi	r24, 0x05	; 5
     d7a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
						lcd1602_goto_xy(kursor,1);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     d84:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     d88:	56 c3       	rjmp	.+1708   	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     d8a:	62 e0       	ldi	r22, 0x02	; 2
     d8c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     d90:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     d94:	88 23       	and	r24, r24
     d96:	39 f1       	breq	.+78     	; 0xde6 <__stack+0x4e7>
					{
						if (kursor == 5)												//podesava SATE ++
     d98:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     d9c:	85 30       	cpi	r24, 0x05	; 5
     d9e:	51 f4       	brne	.+20     	; 0xdb4 <__stack+0x4b5>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UVECAJ);
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	46 ec       	ldi	r20, 0xC6	; 198
     da4:	51 e0       	ldi	r21, 0x01	; 1
     da6:	65 ef       	ldi	r22, 0xF5	; 245
     da8:	71 e0       	ldi	r23, 0x01	; 1
     daa:	8e ee       	ldi	r24, 0xEE	; 238
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
     db2:	41 c3       	rjmp	.+1666   	; 0x1436 <__stack+0xb37>
						else if (kursor == 8)											//podesava MINUTE ++
     db4:	88 30       	cpi	r24, 0x08	; 8
     db6:	51 f4       	brne	.+20     	; 0xdcc <__stack+0x4cd>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UVECAJ);
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	46 ec       	ldi	r20, 0xC6	; 198
     dbc:	51 e0       	ldi	r21, 0x01	; 1
     dbe:	65 ef       	ldi	r22, 0xF5	; 245
     dc0:	71 e0       	ldi	r23, 0x01	; 1
     dc2:	8d ee       	ldi	r24, 0xED	; 237
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
     dca:	35 c3       	rjmp	.+1642   	; 0x1436 <__stack+0xb37>
						else if (kursor == 11)											//podesava SEKUNDE ++
     dcc:	8b 30       	cpi	r24, 0x0B	; 11
     dce:	09 f0       	breq	.+2      	; 0xdd2 <__stack+0x4d3>
     dd0:	32 c3       	rjmp	.+1636   	; 0x1436 <__stack+0xb37>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UVECAJ);
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	46 ec       	ldi	r20, 0xC6	; 198
     dd6:	51 e0       	ldi	r21, 0x01	; 1
     dd8:	65 ef       	ldi	r22, 0xF5	; 245
     dda:	71 e0       	ldi	r23, 0x01	; 1
     ddc:	8c ee       	ldi	r24, 0xEC	; 236
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 b6 02 	call	0x56c	; 0x56c <sekundi_ispis>
     de4:	28 c3       	rjmp	.+1616   	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     de6:	63 e0       	ldi	r22, 0x03	; 3
     de8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     dec:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     df0:	88 23       	and	r24, r24
     df2:	39 f1       	breq	.+78     	; 0xe42 <__stack+0x543>
					{
						if (kursor == 5)												//podesava SATE --
     df4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     df8:	85 30       	cpi	r24, 0x05	; 5
     dfa:	51 f4       	brne	.+20     	; 0xe10 <__stack+0x511>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor, UMANJI);
     dfc:	21 e0       	ldi	r18, 0x01	; 1
     dfe:	46 ec       	ldi	r20, 0xC6	; 198
     e00:	51 e0       	ldi	r21, 0x01	; 1
     e02:	65 ef       	ldi	r22, 0xF5	; 245
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	8e ee       	ldi	r24, 0xEE	; 238
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
     e0e:	13 c3       	rjmp	.+1574   	; 0x1436 <__stack+0xb37>
						else if (kursor == 8)											//podesava MINUTE --
     e10:	88 30       	cpi	r24, 0x08	; 8
     e12:	51 f4       	brne	.+20     	; 0xe28 <__stack+0x529>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor, UMANJI);
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	46 ec       	ldi	r20, 0xC6	; 198
     e18:	51 e0       	ldi	r21, 0x01	; 1
     e1a:	65 ef       	ldi	r22, 0xF5	; 245
     e1c:	71 e0       	ldi	r23, 0x01	; 1
     e1e:	8d ee       	ldi	r24, 0xED	; 237
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
     e26:	07 c3       	rjmp	.+1550   	; 0x1436 <__stack+0xb37>
						else if (kursor == 11)											//podesava SEKUNDE --
     e28:	8b 30       	cpi	r24, 0x0B	; 11
     e2a:	09 f0       	breq	.+2      	; 0xe2e <__stack+0x52f>
     e2c:	04 c3       	rjmp	.+1544   	; 0x1436 <__stack+0xb37>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor, UMANJI);
     e2e:	21 e0       	ldi	r18, 0x01	; 1
     e30:	46 ec       	ldi	r20, 0xC6	; 198
     e32:	51 e0       	ldi	r21, 0x01	; 1
     e34:	65 ef       	ldi	r22, 0xF5	; 245
     e36:	71 e0       	ldi	r23, 0x01	; 1
     e38:	8c ee       	ldi	r24, 0xEC	; 236
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	0e 94 b6 02 	call	0x56c	; 0x56c <sekundi_ispis>
     e40:	fa c2       	rjmp	.+1524   	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//Potvrdi vreme koje vidis na ekranu i promeni vreme; izadji iz menija
     e42:	65 e0       	ldi	r22, 0x05	; 5
     e44:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     e48:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     e4c:	88 23       	and	r24, r24
     e4e:	a9 f0       	breq	.+42     	; 0xe7a <__stack+0x57b>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s, am, _24_hour_format);
     e50:	ec ee       	ldi	r30, 0xEC	; 236
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	00 e0       	ldi	r16, 0x00	; 0
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	40 81       	ld	r20, Z
     e5a:	61 81       	ldd	r22, Z+1	; 0x01
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <setTime>
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     e68:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
     e78:	de c2       	rjmp	.+1468   	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     e7a:	64 e0       	ldi	r22, 0x04	; 4
     e7c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     e80:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     e84:	88 23       	and	r24, r24
     e86:	09 f4       	brne	.+2      	; 0xe8a <__stack+0x58b>
     e88:	d6 c2       	rjmp	.+1452   	; 0x1436 <__stack+0xb37>
					{
						/* Vreme setujem samo ako je stisnut ENTER, ako je stisnuto NAZAD, vreme se ne dira, tj. ovde se ne dira */
								//setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
						flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_pod_vremena>
						kursor = 0;					//reset kursora
     e90:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
     ea0:	ca c2       	rjmp	.+1428   	; 0x1436 <__stack+0xb37>
		break;
		
		case POD_ON_OFF:																				
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
     ea2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_pod_ONOFF>
     ea6:	88 23       	and	r24, r24
     ea8:	09 f4       	brne	.+2      	; 0xeac <__stack+0x5ad>
     eaa:	59 c0       	rjmp	.+178    	; 0xf5e <__stack+0x65f>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
     eac:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_pod_ONOFF>
						
						snap_vreme_paljenja = vreme_paljenja;	
     eb0:	89 e0       	ldi	r24, 0x09	; 9
     eb2:	e2 e1       	ldi	r30, 0x12	; 18
     eb4:	f2 e0       	ldi	r31, 0x02	; 2
     eb6:	ab e1       	ldi	r26, 0x1B	; 27
     eb8:	b2 e0       	ldi	r27, 0x02	; 2
     eba:	01 90       	ld	r0, Z+
     ebc:	0d 92       	st	X+, r0
     ebe:	8a 95       	dec	r24
     ec0:	e1 f7       	brne	.-8      	; 0xeba <__stack+0x5bb>
						snap_vreme_gasenja = vreme_gasenja;
     ec2:	89 e0       	ldi	r24, 0x09	; 9
     ec4:	e4 e2       	ldi	r30, 0x24	; 36
     ec6:	f2 e0       	ldi	r31, 0x02	; 2
     ec8:	a9 e0       	ldi	r26, 0x09	; 9
     eca:	b2 e0       	ldi	r27, 0x02	; 2
     ecc:	01 90       	ld	r0, Z+
     ece:	0d 92       	st	X+, r0
     ed0:	8a 95       	dec	r24
     ed2:	e1 f7       	brne	.-8      	; 0xecc <__stack+0x5cd>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
						
						lcd1602_goto_xy(0,0);
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("  UPALI--UGASI  ");
     ee2:	82 e5       	ldi	r24, 0x52	; 82
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     eea:	e9 e0       	ldi	r30, 0x09	; 9
     eec:	f2 e0       	ldi	r31, 0x02	; 2
     eee:	81 81       	ldd	r24, Z+1	; 0x01
     ef0:	1f 92       	push	r1
     ef2:	8f 93       	push	r24
     ef4:	82 81       	ldd	r24, Z+2	; 0x02
     ef6:	1f 92       	push	r1
     ef8:	8f 93       	push	r24
     efa:	eb e1       	ldi	r30, 0x1B	; 27
     efc:	f2 e0       	ldi	r31, 0x02	; 2
     efe:	81 81       	ldd	r24, Z+1	; 0x01
     f00:	1f 92       	push	r1
     f02:	8f 93       	push	r24
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	1f 92       	push	r1
     f08:	8f 93       	push	r24
     f0a:	8a e1       	ldi	r24, 0x1A	; 26
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	9f 93       	push	r25
     f10:	8f 93       	push	r24
     f12:	85 ef       	ldi	r24, 0xF5	; 245
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	9f 93       	push	r25
     f18:	8f 93       	push	r24
     f1a:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
						
						lcd1602_goto_xy(0,1);
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("  ");
     f26:	87 e1       	ldi	r24, 0x17	; 23
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string(bafer);
     f2e:	85 ef       	ldi	r24, 0xF5	; 245
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string("  ");
     f36:	87 e1       	ldi	r24, 0x17	; 23
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     f44:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
     f4e:	8d b7       	in	r24, 0x3d	; 61
     f50:	9e b7       	in	r25, 0x3e	; 62
     f52:	0c 96       	adiw	r24, 0x0c	; 12
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	9e bf       	out	0x3e, r25	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     f64:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     f68:	88 23       	and	r24, r24
     f6a:	c9 f0       	breq	.+50     	; 0xf9e <__stack+0x69f>
					{
						kursor += 3;
     f6c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
     f70:	9c ef       	ldi	r25, 0xFC	; 252
     f72:	98 0f       	add	r25, r24
     f74:	93 30       	cpi	r25, 0x03	; 3
     f76:	20 f4       	brcc	.+8      	; 0xf80 <__stack+0x681>
							kursor = 10;
     f78:	8a e0       	ldi	r24, 0x0A	; 10
     f7a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <__stack+0x693>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     f80:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
     f82:	8e 30       	cpi	r24, 0x0E	; 14
     f84:	1c f4       	brge	.+6      	; 0xf8c <__stack+0x68d>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
     f86:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <__stack+0x693>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 10;
						else if (kursor > 13)
							kursor = 13;
     f8c:	8d e0       	ldi	r24, 0x0D	; 13
     f8e:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     f98:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     f9c:	4c c2       	rjmp	.+1176   	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     fa4:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     fa8:	88 23       	and	r24, r24
     faa:	c9 f0       	breq	.+50     	; 0xfde <__stack+0x6df>
					{
						kursor -= 3;
     fac:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
     fb0:	96 ef       	ldi	r25, 0xF6	; 246
     fb2:	98 0f       	add	r25, r24
     fb4:	93 30       	cpi	r25, 0x03	; 3
     fb6:	20 f4       	brcc	.+8      	; 0xfc0 <__stack+0x6c1>
							kursor = 6;
     fb8:	86 e0       	ldi	r24, 0x06	; 6
     fba:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
     fbe:	09 c0       	rjmp	.+18     	; 0xfd2 <__stack+0x6d3>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     fc0:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	1c f0       	brlt	.+6      	; 0xfcc <__stack+0x6cd>
							
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
     fc6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <__stack+0x6d3>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor = 6;
						else if(kursor < 3)
							kursor = 3;
     fcc:	83 e0       	ldi	r24, 0x03	; 3
     fce:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
							
						lcd1602_goto_xy(kursor,1);
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     fd8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
     fdc:	2c c2       	rjmp	.+1112   	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     fde:	62 e0       	ldi	r22, 0x02	; 2
     fe0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
     fe4:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
     fe8:	88 23       	and	r24, r24
     fea:	99 f1       	breq	.+102    	; 0x1052 <__stack+0x753>
					{
						if (kursor == 3)												//podesava SATE_ON ++
     fec:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
     ff0:	83 30       	cpi	r24, 0x03	; 3
     ff2:	51 f4       	brne	.+20     	; 0x1008 <__stack+0x709>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	46 ec       	ldi	r20, 0xC6	; 198
     ff8:	51 e0       	ldi	r21, 0x01	; 1
     ffa:	65 ef       	ldi	r22, 0xF5	; 245
     ffc:	71 e0       	ldi	r23, 0x01	; 1
     ffe:	8d e1       	ldi	r24, 0x1D	; 29
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    1006:	17 c2       	rjmp	.+1070   	; 0x1436 <__stack+0xb37>
						else if (kursor == 6)											//podesava MINUTE_ON ++
    1008:	86 30       	cpi	r24, 0x06	; 6
    100a:	51 f4       	brne	.+20     	; 0x1020 <__stack+0x721>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	46 ec       	ldi	r20, 0xC6	; 198
    1010:	51 e0       	ldi	r21, 0x01	; 1
    1012:	65 ef       	ldi	r22, 0xF5	; 245
    1014:	71 e0       	ldi	r23, 0x01	; 1
    1016:	8c e1       	ldi	r24, 0x1C	; 28
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    101e:	0b c2       	rjmp	.+1046   	; 0x1436 <__stack+0xb37>
						else if (kursor == 10)											//podesava SATE_OFF ++
    1020:	8a 30       	cpi	r24, 0x0A	; 10
    1022:	51 f4       	brne	.+20     	; 0x1038 <__stack+0x739>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	46 ec       	ldi	r20, 0xC6	; 198
    1028:	51 e0       	ldi	r21, 0x01	; 1
    102a:	65 ef       	ldi	r22, 0xF5	; 245
    102c:	71 e0       	ldi	r23, 0x01	; 1
    102e:	8b e0       	ldi	r24, 0x0B	; 11
    1030:	92 e0       	ldi	r25, 0x02	; 2
    1032:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    1036:	ff c1       	rjmp	.+1022   	; 0x1436 <__stack+0xb37>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
    1038:	8d 30       	cpi	r24, 0x0D	; 13
    103a:	09 f0       	breq	.+2      	; 0x103e <__stack+0x73f>
    103c:	fc c1       	rjmp	.+1016   	; 0x1436 <__stack+0xb37>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	46 ec       	ldi	r20, 0xC6	; 198
    1042:	51 e0       	ldi	r21, 0x01	; 1
    1044:	65 ef       	ldi	r22, 0xF5	; 245
    1046:	71 e0       	ldi	r23, 0x01	; 1
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    1050:	f2 c1       	rjmp	.+996    	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    1052:	63 e0       	ldi	r22, 0x03	; 3
    1054:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    1058:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
    105c:	88 23       	and	r24, r24
    105e:	99 f1       	breq	.+102    	; 0x10c6 <__stack+0x7c7>
					{
						if (kursor == 3)												//podesava SATE_ON --
    1060:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	51 f4       	brne	.+20     	; 0x107c <__stack+0x77d>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
    1068:	21 e0       	ldi	r18, 0x01	; 1
    106a:	46 ec       	ldi	r20, 0xC6	; 198
    106c:	51 e0       	ldi	r21, 0x01	; 1
    106e:	65 ef       	ldi	r22, 0xF5	; 245
    1070:	71 e0       	ldi	r23, 0x01	; 1
    1072:	8d e1       	ldi	r24, 0x1D	; 29
    1074:	92 e0       	ldi	r25, 0x02	; 2
    1076:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    107a:	dd c1       	rjmp	.+954    	; 0x1436 <__stack+0xb37>
						else if (kursor == 6)											//podesava MINUTE_ON --
    107c:	86 30       	cpi	r24, 0x06	; 6
    107e:	51 f4       	brne	.+20     	; 0x1094 <__stack+0x795>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	46 ec       	ldi	r20, 0xC6	; 198
    1084:	51 e0       	ldi	r21, 0x01	; 1
    1086:	65 ef       	ldi	r22, 0xF5	; 245
    1088:	71 e0       	ldi	r23, 0x01	; 1
    108a:	8c e1       	ldi	r24, 0x1C	; 28
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    1092:	d1 c1       	rjmp	.+930    	; 0x1436 <__stack+0xb37>
						else if (kursor == 10)											//podesava SATE_OFF --
    1094:	8a 30       	cpi	r24, 0x0A	; 10
    1096:	51 f4       	brne	.+20     	; 0x10ac <__stack+0x7ad>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
    1098:	21 e0       	ldi	r18, 0x01	; 1
    109a:	46 ec       	ldi	r20, 0xC6	; 198
    109c:	51 e0       	ldi	r21, 0x01	; 1
    109e:	65 ef       	ldi	r22, 0xF5	; 245
    10a0:	71 e0       	ldi	r23, 0x01	; 1
    10a2:	8b e0       	ldi	r24, 0x0B	; 11
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    10aa:	c5 c1       	rjmp	.+906    	; 0x1436 <__stack+0xb37>
						else if (kursor == 13)											//podesava MINUTE_OFF --
    10ac:	8d 30       	cpi	r24, 0x0D	; 13
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <__stack+0x7b3>
    10b0:	c2 c1       	rjmp	.+900    	; 0x1436 <__stack+0xb37>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	46 ec       	ldi	r20, 0xC6	; 198
    10b6:	51 e0       	ldi	r21, 0x01	; 1
    10b8:	65 ef       	ldi	r22, 0xF5	; 245
    10ba:	71 e0       	ldi	r23, 0x01	; 1
    10bc:	8a e0       	ldi	r24, 0x0A	; 10
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    10c4:	b8 c1       	rjmp	.+880    	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    10c6:	65 e0       	ldi	r22, 0x05	; 5
    10c8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    10cc:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
    10d0:	88 23       	and	r24, r24
    10d2:	b1 f1       	breq	.+108    	; 0x1140 <__stack+0x841>
					{
						vreme_paljenja = snap_vreme_paljenja;	//konacno upisem
    10d4:	89 e0       	ldi	r24, 0x09	; 9
    10d6:	eb e1       	ldi	r30, 0x1B	; 27
    10d8:	f2 e0       	ldi	r31, 0x02	; 2
    10da:	a2 e1       	ldi	r26, 0x12	; 18
    10dc:	b2 e0       	ldi	r27, 0x02	; 2
    10de:	01 90       	ld	r0, Z+
    10e0:	0d 92       	st	X+, r0
    10e2:	8a 95       	dec	r24
    10e4:	e1 f7       	brne	.-8      	; 0x10de <__stack+0x7df>
						vreme_gasenja = snap_vreme_gasenja;
    10e6:	89 e0       	ldi	r24, 0x09	; 9
    10e8:	e9 e0       	ldi	r30, 0x09	; 9
    10ea:	f2 e0       	ldi	r31, 0x02	; 2
    10ec:	a4 e2       	ldi	r26, 0x24	; 36
    10ee:	b2 e0       	ldi	r27, 0x02	; 2
    10f0:	01 90       	ld	r0, Z+
    10f2:	0d 92       	st	X+, r0
    10f4:	8a 95       	dec	r24
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <__stack+0x7f1>
						
						/* upis u eeprom */
						EEPROM_write(UPALI_HR_ADR, vreme_paljenja.hr);
    10f8:	c2 e1       	ldi	r28, 0x12	; 18
    10fa:	d2 e0       	ldi	r29, 0x02	; 2
    10fc:	6a 81       	ldd	r22, Y+2	; 0x02
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(UPALI_MIN_ADR, vreme_paljenja.min);
    1106:	69 81       	ldd	r22, Y+1	; 0x01
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(UGASI_HR_ADR, vreme_gasenja.hr);
    1110:	c4 e2       	ldi	r28, 0x24	; 36
    1112:	d2 e0       	ldi	r29, 0x02	; 2
    1114:	6a 81       	ldd	r22, Y+2	; 0x02
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(UGASI_MIN_ADR, vreme_gasenja.min);
    111e:	69 81       	ldd	r22, Y+1	; 0x01
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    112e:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
    113e:	7b c1       	rjmp	.+758    	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1140:	64 e0       	ldi	r22, 0x04	; 4
    1142:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    1146:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
    114a:	88 23       	and	r24, r24
    114c:	09 f4       	brne	.+2      	; 0x1150 <__stack+0x851>
    114e:	73 c1       	rjmp	.+742    	; 0x1436 <__stack+0xb37>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    1156:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
    1166:	67 c1       	rjmp	.+718    	; 0x1436 <__stack+0xb37>
		case JEDNOKRATNO:
					//da opali samo jednom, bez obzira na glavni period
					/* prakticno kopija POD-ON-OFF samo se u drugu promenljivu belezi, cak pozajmljujem i iste tmp promenljive */
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (flag_pod_ONOFF)
    1168:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_pod_ONOFF>
    116c:	88 23       	and	r24, r24
    116e:	09 f4       	brne	.+2      	; 0x1172 <__stack+0x873>
    1170:	59 c0       	rjmp	.+178    	; 0x1224 <__stack+0x925>
					{
						flag_pod_ONOFF = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
    1172:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_pod_ONOFF>
						
						snap_vreme_paljenja = jednokratno_paljenje;
    1176:	89 e0       	ldi	r24, 0x09	; 9
    1178:	e3 ee       	ldi	r30, 0xE3	; 227
    117a:	f1 e0       	ldi	r31, 0x01	; 1
    117c:	ab e1       	ldi	r26, 0x1B	; 27
    117e:	b2 e0       	ldi	r27, 0x02	; 2
    1180:	01 90       	ld	r0, Z+
    1182:	0d 92       	st	X+, r0
    1184:	8a 95       	dec	r24
    1186:	e1 f7       	brne	.-8      	; 0x1180 <__stack+0x881>
						snap_vreme_gasenja = jednokratno_gasenje;
    1188:	89 e0       	ldi	r24, 0x09	; 9
    118a:	ea ed       	ldi	r30, 0xDA	; 218
    118c:	f1 e0       	ldi	r31, 0x01	; 1
    118e:	a9 e0       	ldi	r26, 0x09	; 9
    1190:	b2 e0       	ldi	r27, 0x02	; 2
    1192:	01 90       	ld	r0, Z+
    1194:	0d 92       	st	X+, r0
    1196:	8a 95       	dec	r24
    1198:	e1 f7       	brne	.-8      	; 0x1192 <__stack+0x893>
						
						kursor = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
    119a:	83 e0       	ldi	r24, 0x03	; 3
    119c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
						
						lcd1602_goto_xy(0,0);
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("  JEDNOKRATNO:  ");
    11a8:	83 e6       	ldi	r24, 0x63	; 99
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						
						sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
    11b0:	e9 e0       	ldi	r30, 0x09	; 9
    11b2:	f2 e0       	ldi	r31, 0x02	; 2
    11b4:	81 81       	ldd	r24, Z+1	; 0x01
    11b6:	1f 92       	push	r1
    11b8:	8f 93       	push	r24
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	1f 92       	push	r1
    11be:	8f 93       	push	r24
    11c0:	eb e1       	ldi	r30, 0x1B	; 27
    11c2:	f2 e0       	ldi	r31, 0x02	; 2
    11c4:	81 81       	ldd	r24, Z+1	; 0x01
    11c6:	1f 92       	push	r1
    11c8:	8f 93       	push	r24
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	1f 92       	push	r1
    11ce:	8f 93       	push	r24
    11d0:	8a e1       	ldi	r24, 0x1A	; 26
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	9f 93       	push	r25
    11d6:	8f 93       	push	r24
    11d8:	85 ef       	ldi	r24, 0xF5	; 245
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	9f 93       	push	r25
    11de:	8f 93       	push	r24
    11e0:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
						
						lcd1602_goto_xy(0,1);
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_send_string("  ");
    11ec:	87 e1       	ldi	r24, 0x17	; 23
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string(bafer);
    11f4:	85 ef       	ldi	r24, 0xF5	; 245
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						lcd1602_send_string("  ");
    11fc:	87 e1       	ldi	r24, 0x17	; 23
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
						
						lcd1602_goto_xy(kursor,1);
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
    120a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
						lcd1602_cursor_blink(1);
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
    1214:	8d b7       	in	r24, 0x3d	; 61
    1216:	9e b7       	in	r25, 0x3e	; 62
    1218:	0c 96       	adiw	r24, 0x0c	; 12
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	9e bf       	out	0x3e, r25	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	8d bf       	out	0x3d, r24	; 61
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    122a:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
    122e:	88 23       	and	r24, r24
    1230:	c9 f0       	breq	.+50     	; 0x1264 <__stack+0x965>
					{
						kursor += 3;
    1232:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
    1236:	9c ef       	ldi	r25, 0xFC	; 252
    1238:	98 0f       	add	r25, r24
    123a:	93 30       	cpi	r25, 0x03	; 3
    123c:	20 f4       	brcc	.+8      	; 0x1246 <__stack+0x947>
						kursor = 10;
    123e:	8a e0       	ldi	r24, 0x0A	; 10
    1240:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
    1244:	09 c0       	rjmp	.+18     	; 0x1258 <__stack+0x959>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
    1246:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 10;
						else if (kursor > 13)
    1248:	8e 30       	cpi	r24, 0x0E	; 14
    124a:	1c f4       	brge	.+6      	; 0x1252 <__stack+0x953>
						lcd1602_cursor_blink(1);
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor += 3;
    124c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <__stack+0x959>
						if(kursor > 6 && kursor <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 10;
						else if (kursor > 13)
						kursor = 13;
    1252:	8d e0       	ldi	r24, 0x0D	; 13
    1254:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
						
						lcd1602_goto_xy(kursor,1);
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
    125e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
    1262:	e9 c0       	rjmp	.+466    	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    126a:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
    126e:	88 23       	and	r24, r24
    1270:	c9 f0       	breq	.+50     	; 0x12a4 <__stack+0x9a5>
					{
						kursor -= 3;
    1272:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
    1276:	96 ef       	ldi	r25, 0xF6	; 246
    1278:	98 0f       	add	r25, r24
    127a:	93 30       	cpi	r25, 0x03	; 3
    127c:	20 f4       	brcc	.+8      	; 0x1286 <__stack+0x987>
						kursor = 6;
    127e:	86 e0       	ldi	r24, 0x06	; 6
    1280:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <__stack+0x999>
						
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
    1286:	83 50       	subi	r24, 0x03	; 3
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 6;
						else if(kursor < 3)
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	1c f0       	brlt	.+6      	; 0x1292 <__stack+0x993>
						
						lcd1602_goto_xy(kursor,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor -= 3;
    128c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <__stack+0x999>
						if(kursor < 10 && kursor > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor = 6;
						else if(kursor < 3)
						kursor = 3;
    1292:	83 e0       	ldi	r24, 0x03	; 3
    1294:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <kursor>
						
						lcd1602_goto_xy(kursor,1);
    1298:	61 e0       	ldi	r22, 0x01	; 1
    129a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
    129e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd1602_goto_xy>
    12a2:	c9 c0       	rjmp	.+402    	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
    12a4:	62 e0       	ldi	r22, 0x02	; 2
    12a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    12aa:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
    12ae:	88 23       	and	r24, r24
    12b0:	99 f1       	breq	.+102    	; 0x1318 <__stack+0xa19>
					{
						if (kursor == 3)												//podesava SATE_ON ++
    12b2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	51 f4       	brne	.+20     	; 0x12ce <__stack+0x9cf>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UVECAJ);
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	46 ec       	ldi	r20, 0xC6	; 198
    12be:	51 e0       	ldi	r21, 0x01	; 1
    12c0:	65 ef       	ldi	r22, 0xF5	; 245
    12c2:	71 e0       	ldi	r23, 0x01	; 1
    12c4:	8d e1       	ldi	r24, 0x1D	; 29
    12c6:	92 e0       	ldi	r25, 0x02	; 2
    12c8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    12cc:	b4 c0       	rjmp	.+360    	; 0x1436 <__stack+0xb37>
						else if (kursor == 6)											//podesava MINUTE_ON ++
    12ce:	86 30       	cpi	r24, 0x06	; 6
    12d0:	51 f4       	brne	.+20     	; 0x12e6 <__stack+0x9e7>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UVECAJ);
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	46 ec       	ldi	r20, 0xC6	; 198
    12d6:	51 e0       	ldi	r21, 0x01	; 1
    12d8:	65 ef       	ldi	r22, 0xF5	; 245
    12da:	71 e0       	ldi	r23, 0x01	; 1
    12dc:	8c e1       	ldi	r24, 0x1C	; 28
    12de:	92 e0       	ldi	r25, 0x02	; 2
    12e0:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    12e4:	a8 c0       	rjmp	.+336    	; 0x1436 <__stack+0xb37>
						else if (kursor == 10)											//podesava SATE_OFF ++
    12e6:	8a 30       	cpi	r24, 0x0A	; 10
    12e8:	51 f4       	brne	.+20     	; 0x12fe <__stack+0x9ff>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UVECAJ);
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	46 ec       	ldi	r20, 0xC6	; 198
    12ee:	51 e0       	ldi	r21, 0x01	; 1
    12f0:	65 ef       	ldi	r22, 0xF5	; 245
    12f2:	71 e0       	ldi	r23, 0x01	; 1
    12f4:	8b e0       	ldi	r24, 0x0B	; 11
    12f6:	92 e0       	ldi	r25, 0x02	; 2
    12f8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    12fc:	9c c0       	rjmp	.+312    	; 0x1436 <__stack+0xb37>
						else if (kursor == 13)											//podesava MINUTE_OFF ++
    12fe:	8d 30       	cpi	r24, 0x0D	; 13
    1300:	09 f0       	breq	.+2      	; 0x1304 <__stack+0xa05>
    1302:	99 c0       	rjmp	.+306    	; 0x1436 <__stack+0xb37>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UVECAJ);
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	46 ec       	ldi	r20, 0xC6	; 198
    1308:	51 e0       	ldi	r21, 0x01	; 1
    130a:	65 ef       	ldi	r22, 0xF5	; 245
    130c:	71 e0       	ldi	r23, 0x01	; 1
    130e:	8a e0       	ldi	r24, 0x0A	; 10
    1310:	92 e0       	ldi	r25, 0x02	; 2
    1312:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    1316:	8f c0       	rjmp	.+286    	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    1318:	63 e0       	ldi	r22, 0x03	; 3
    131a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    131e:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
    1322:	88 23       	and	r24, r24
    1324:	99 f1       	breq	.+102    	; 0x138c <__stack+0xa8d>
					{
						if (kursor == 3)												//podesava SATE_ON --
    1326:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <kursor>
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	51 f4       	brne	.+20     	; 0x1342 <__stack+0xa43>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor, UMANJI);
    132e:	21 e0       	ldi	r18, 0x01	; 1
    1330:	46 ec       	ldi	r20, 0xC6	; 198
    1332:	51 e0       	ldi	r21, 0x01	; 1
    1334:	65 ef       	ldi	r22, 0xF5	; 245
    1336:	71 e0       	ldi	r23, 0x01	; 1
    1338:	8d e1       	ldi	r24, 0x1D	; 29
    133a:	92 e0       	ldi	r25, 0x02	; 2
    133c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    1340:	7a c0       	rjmp	.+244    	; 0x1436 <__stack+0xb37>
						else if (kursor == 6)											//podesava MINUTE_ON --
    1342:	86 30       	cpi	r24, 0x06	; 6
    1344:	51 f4       	brne	.+20     	; 0x135a <__stack+0xa5b>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor, UMANJI);
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	46 ec       	ldi	r20, 0xC6	; 198
    134a:	51 e0       	ldi	r21, 0x01	; 1
    134c:	65 ef       	ldi	r22, 0xF5	; 245
    134e:	71 e0       	ldi	r23, 0x01	; 1
    1350:	8c e1       	ldi	r24, 0x1C	; 28
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    1358:	6e c0       	rjmp	.+220    	; 0x1436 <__stack+0xb37>
						else if (kursor == 10)											//podesava SATE_OFF --
    135a:	8a 30       	cpi	r24, 0x0A	; 10
    135c:	51 f4       	brne	.+20     	; 0x1372 <__stack+0xa73>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor, UMANJI);
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	46 ec       	ldi	r20, 0xC6	; 198
    1362:	51 e0       	ldi	r21, 0x01	; 1
    1364:	65 ef       	ldi	r22, 0xF5	; 245
    1366:	71 e0       	ldi	r23, 0x01	; 1
    1368:	8b e0       	ldi	r24, 0x0B	; 11
    136a:	92 e0       	ldi	r25, 0x02	; 2
    136c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sati_ispis>
    1370:	62 c0       	rjmp	.+196    	; 0x1436 <__stack+0xb37>
						else if (kursor == 13)											//podesava MINUTE_OFF --
    1372:	8d 30       	cpi	r24, 0x0D	; 13
    1374:	09 f0       	breq	.+2      	; 0x1378 <__stack+0xa79>
    1376:	5f c0       	rjmp	.+190    	; 0x1436 <__stack+0xb37>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor, UMANJI);
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	46 ec       	ldi	r20, 0xC6	; 198
    137c:	51 e0       	ldi	r21, 0x01	; 1
    137e:	65 ef       	ldi	r22, 0xF5	; 245
    1380:	71 e0       	ldi	r23, 0x01	; 1
    1382:	8a e0       	ldi	r24, 0x0A	; 10
    1384:	92 e0       	ldi	r25, 0x02	; 2
    1386:	0e 94 57 02 	call	0x4ae	; 0x4ae <minuti_ispis>
    138a:	55 c0       	rjmp	.+170    	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    138c:	65 e0       	ldi	r22, 0x05	; 5
    138e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    1392:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
    1396:	88 23       	and	r24, r24
    1398:	b1 f1       	breq	.+108    	; 0x1406 <__stack+0xb07>
					{
						jednokratno_paljenje = snap_vreme_paljenja;	//konacno upisem
    139a:	89 e0       	ldi	r24, 0x09	; 9
    139c:	eb e1       	ldi	r30, 0x1B	; 27
    139e:	f2 e0       	ldi	r31, 0x02	; 2
    13a0:	a3 ee       	ldi	r26, 0xE3	; 227
    13a2:	b1 e0       	ldi	r27, 0x01	; 1
    13a4:	01 90       	ld	r0, Z+
    13a6:	0d 92       	st	X+, r0
    13a8:	8a 95       	dec	r24
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <__stack+0xaa5>
						jednokratno_gasenje = snap_vreme_gasenja;
    13ac:	89 e0       	ldi	r24, 0x09	; 9
    13ae:	e9 e0       	ldi	r30, 0x09	; 9
    13b0:	f2 e0       	ldi	r31, 0x02	; 2
    13b2:	aa ed       	ldi	r26, 0xDA	; 218
    13b4:	b1 e0       	ldi	r27, 0x01	; 1
    13b6:	01 90       	ld	r0, Z+
    13b8:	0d 92       	st	X+, r0
    13ba:	8a 95       	dec	r24
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <__stack+0xab7>
						
						/* upis u eeprom */
						EEPROM_write(JEDNOK_UPALI_HR_ADR, jednokratno_paljenje.hr);
    13be:	c3 ee       	ldi	r28, 0xE3	; 227
    13c0:	d1 e0       	ldi	r29, 0x01	; 1
    13c2:	6a 81       	ldd	r22, Y+2	; 0x02
    13c4:	84 e0       	ldi	r24, 0x04	; 4
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(JEDNOK_UPALI_MIN_ADR, jednokratno_paljenje.min);
    13cc:	69 81       	ldd	r22, Y+1	; 0x01
    13ce:	85 e0       	ldi	r24, 0x05	; 5
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_HR_ADR, jednokratno_gasenje.hr);
    13d6:	ca ed       	ldi	r28, 0xDA	; 218
    13d8:	d1 e0       	ldi	r29, 0x01	; 1
    13da:	6a 81       	ldd	r22, Y+2	; 0x02
    13dc:	86 e0       	ldi	r24, 0x06	; 6
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_MIN_ADR, jednokratno_gasenje.min);
    13e4:	69 81       	ldd	r22, Y+1	; 0x01
    13e6:	87 e0       	ldi	r24, 0x07	; 7
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_write>
						
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    13f4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
    1404:	18 c0       	rjmp	.+48     	; 0x1436 <__stack+0xb37>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1406:	64 e0       	ldi	r22, 0x04	; 4
    1408:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri>
    140c:	0e 94 bd 0b 	call	0x177a	; 0x177a <ocitaj_jedan_taster>
    1410:	88 23       	and	r24, r24
    1412:	89 f0       	breq	.+34     	; 0x1436 <__stack+0xb37>
					{
						flag_pod_ONOFF = 1;			//dozvolim ponovni ispis
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_pod_ONOFF>
						kursor = 0;					//reset kursora
    141a:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <kursor>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <STATE>
		break;
		
		default: {}
		
	}
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <__stack+0xb37>
						}
					}
					
					lcd1602_goto_xy(1,1);
					pom = (pom==KURSOR_MENU1_MAX) ? -1 : pom;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
					lcd1602_send_string(menu1_txt[pom + 1]);
    142c:	8c e7       	ldi	r24, 0x7C	; 124
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <lcd1602_send_string>
    1434:	97 cb       	rjmp	.-2258   	; 0xb64 <__stack+0x265>
		break;
		
		default: {}
		
	}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <main>:
{
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			
    1440:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup na SDA i SCL, PC4-PC5 
    1444:	0e 94 98 01 	call	0x330	; 0x330 <i2c_init>
	lcd1602_init();
    1448:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd1602_init>
	ADC_init();				
    144c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda; 500k
    1450:	60 e2       	ldi	r22, 0x20	; 32
    1452:	71 ea       	ldi	r23, 0xA1	; 161
    1454:	87 e0       	ldi	r24, 0x07	; 7
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <uart_init>
	DS3231_init();			//RTC init
    145c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
    1460:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <pc_init>
	tasteri_init();			//NAPOMENA: PD2-7 INPUT, INT_PULLUP=ON
    1464:	0e 94 87 0b 	call	0x170e	; 0x170e <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
    1468:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;		//pinB 4 OUTPUT 
    146a:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
    146c:	78 94       	sei
	//EEPROM_write(UPALI_MIN_ADR, 25);
	//EEPROM_write(UGASI_HR_ADR, 5);
	//EEPROM_write(UGASI_MIN_ADR, 45);
	
	/* citanje on-off vremena iz eeproma pri inicijalizaciji */
	vreme_paljenja.hr = EEPROM_read(UPALI_HR_ADR);
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    1476:	c2 e1       	ldi	r28, 0x12	; 18
    1478:	d2 e0       	ldi	r29, 0x02	; 2
    147a:	8a 83       	std	Y+2, r24	; 0x02
	vreme_paljenja.min = EEPROM_read(UPALI_MIN_ADR);
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    1484:	89 83       	std	Y+1, r24	; 0x01
	vreme_gasenja.hr = EEPROM_read(UGASI_HR_ADR);
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    148e:	c4 e2       	ldi	r28, 0x24	; 36
    1490:	d2 e0       	ldi	r29, 0x02	; 2
    1492:	8a 83       	std	Y+2, r24	; 0x02
	vreme_gasenja.min = EEPROM_read(UGASI_MIN_ADR);
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    149c:	89 83       	std	Y+1, r24	; 0x01
	
	jednokratno_paljenje.hr = EEPROM_read(JEDNOK_UPALI_HR_ADR);
    149e:	84 e0       	ldi	r24, 0x04	; 4
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    14a6:	c3 ee       	ldi	r28, 0xE3	; 227
    14a8:	d1 e0       	ldi	r29, 0x01	; 1
    14aa:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_paljenje.min = EEPROM_read(JEDNOK_UPALI_MIN_ADR);
    14ac:	85 e0       	ldi	r24, 0x05	; 5
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    14b4:	89 83       	std	Y+1, r24	; 0x01
	jednokratno_gasenje.hr = EEPROM_read(JEDNOK_UGASI_HR_ADR);
    14b6:	86 e0       	ldi	r24, 0x06	; 6
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    14be:	ca ed       	ldi	r28, 0xDA	; 218
    14c0:	d1 e0       	ldi	r29, 0x01	; 1
    14c2:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_gasenje.min = EEPROM_read(JEDNOK_UGASI_MIN_ADR);
    14c4:	87 e0       	ldi	r24, 0x07	; 7
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_read>
    14cc:	89 83       	std	Y+1, r24	; 0x01
	
	snap_vreme_paljenja = vreme_paljenja;
    14ce:	89 e0       	ldi	r24, 0x09	; 9
    14d0:	e2 e1       	ldi	r30, 0x12	; 18
    14d2:	f2 e0       	ldi	r31, 0x02	; 2
    14d4:	ab e1       	ldi	r26, 0x1B	; 27
    14d6:	b2 e0       	ldi	r27, 0x02	; 2
    14d8:	01 90       	ld	r0, Z+
    14da:	0d 92       	st	X+, r0
    14dc:	8a 95       	dec	r24
    14de:	e1 f7       	brne	.-8      	; 0x14d8 <main+0x98>
	snap_vreme_gasenja = vreme_gasenja;
    14e0:	89 e0       	ldi	r24, 0x09	; 9
    14e2:	e4 e2       	ldi	r30, 0x24	; 36
    14e4:	f2 e0       	ldi	r31, 0x02	; 2
    14e6:	a9 e0       	ldi	r26, 0x09	; 9
    14e8:	b2 e0       	ldi	r27, 0x02	; 2
    14ea:	01 90       	ld	r0, Z+
    14ec:	0d 92       	st	X+, r0
    14ee:	8a 95       	dec	r24
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <main+0xaa>
		
		/* ocitava napon i struju */
		adc_read();			
		
		
		sprintf(bafer, "%4d  ", adc_napon_raw);
    14f2:	0f 2e       	mov	r0, r31
    14f4:	f4 e7       	ldi	r31, 0x74	; 116
    14f6:	ef 2e       	mov	r14, r31
    14f8:	f1 e0       	ldi	r31, 0x01	; 1
    14fa:	ff 2e       	mov	r15, r31
    14fc:	f0 2d       	mov	r31, r0
    14fe:	c5 ef       	ldi	r28, 0xF5	; 245
    1500:	d1 e0       	ldi	r29, 0x01	; 1
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    1502:	dd 24       	eor	r13, r13
    1504:	d3 94       	inc	r13
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
    1506:	0e 94 94 0b 	call	0x1728	; 0x1728 <ocitaj_tastere>
    150a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasteri>
		
		/* ocitava napon i struju */
		adc_read();			
    150e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <adc_read>
		
		
		sprintf(bafer, "%4d  ", adc_napon_raw);
    1512:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <adc_napon_raw+0x1>
    1516:	8f 93       	push	r24
    1518:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <adc_napon_raw>
    151c:	8f 93       	push	r24
    151e:	ff 92       	push	r15
    1520:	ef 92       	push	r14
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
		uart_send_str(bafer);
    152a:	ce 01       	movw	r24, r28
    152c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <uart_send_str>
		sprintf(bafer, "%4d  ", adc_struja_raw);
    1530:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <adc_struja_raw+0x1>
    1534:	8f 93       	push	r24
    1536:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <adc_struja_raw>
    153a:	8f 93       	push	r24
    153c:	ff 92       	push	r15
    153e:	ef 92       	push	r14
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
		uart_send_str(bafer);
    1548:	ce 01       	movw	r24, r28
    154a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <uart_send_str>
		
		sprintf(bafer, "%4d  ", napon);
    154e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <napon+0x1>
    1552:	8f 93       	push	r24
    1554:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <napon>
    1558:	8f 93       	push	r24
    155a:	ff 92       	push	r15
    155c:	ef 92       	push	r14
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	0e 94 38 10 	call	0x2070	; 0x2070 <sprintf>
		uart_send_str(bafer);
    1566:	ce 01       	movw	r24, r28
    1568:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <uart_send_str>
		dtostrf(struja, 4, 1, bafer);
    156c:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <struja>
    1570:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <struja+0x1>
    1574:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <struja+0x2>
    1578:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <struja+0x3>
    157c:	8e 01       	movw	r16, r28
    157e:	21 e0       	ldi	r18, 0x01	; 1
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	44 e0       	ldi	r20, 0x04	; 4
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	0e 94 18 10 	call	0x2030	; 0x2030 <dtostrf>
		uart_send_str(bafer);
    158a:	ce 01       	movw	r24, r28
    158c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <uart_send_str>
		uart_send_str("  ");
    1590:	87 e1       	ldi	r24, 0x17	; 23
    1592:	91 e0       	ldi	r25, 0x01	; 1
    1594:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <uart_send_str>
		dtostrf(snaga, 4, 1, bafer);
    1598:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <snaga>
    159c:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <snaga+0x1>
    15a0:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <snaga+0x2>
    15a4:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <snaga+0x3>
    15a8:	21 e0       	ldi	r18, 0x01	; 1
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	44 e0       	ldi	r20, 0x04	; 4
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	0e 94 18 10 	call	0x2030	; 0x2030 <dtostrf>
		uart_send_str(bafer);
    15b4:	ce 01       	movw	r24, r28
    15b6:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <uart_send_str>
		uart_send_str("  ");
    15ba:	87 e1       	ldi	r24, 0x17	; 23
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <uart_send_str>
		dtostrf(energija, 5, 1, bafer);
    15c2:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <energija>
    15c6:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <energija+0x1>
    15ca:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <energija+0x2>
    15ce:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <energija+0x3>
    15d2:	21 e0       	ldi	r18, 0x01	; 1
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	45 e0       	ldi	r20, 0x05	; 5
    15d8:	50 e0       	ldi	r21, 0x00	; 0
    15da:	0e 94 18 10 	call	0x2030	; 0x2030 <dtostrf>
		uart_send_str(bafer);
    15de:	ce 01       	movw	r24, r28
    15e0:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <uart_send_str>
		uart_send_str("\n");
    15e4:	8a e7       	ldi	r24, 0x7A	; 122
    15e6:	91 e0       	ldi	r25, 0x01	; 1
    15e8:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <uart_send_str>
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
    15ec:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <flag_pc_int_pomocni>
    15f0:	2d b7       	in	r18, 0x3d	; 61
    15f2:	3e b7       	in	r19, 0x3e	; 62
    15f4:	2e 5e       	subi	r18, 0xEE	; 238
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	3e bf       	out	0x3e, r19	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	2d bf       	out	0x3d, r18	; 61
    1602:	88 23       	and	r24, r24
    1604:	09 f4       	brne	.+2      	; 0x1608 <main+0x1c8>
    1606:	61 c0       	rjmp	.+194    	; 0x16ca <main+0x28a>
		{
			flag_pc_int_pomocni = 0;
    1608:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
    160c:	00 e0       	ldi	r16, 0x00	; 0
    160e:	25 e3       	ldi	r18, 0x35	; 53
    1610:	32 e0       	ldi	r19, 0x02	; 2
    1612:	4d e2       	ldi	r20, 0x2D	; 45
    1614:	52 e0       	ldi	r21, 0x02	; 2
    1616:	6e e2       	ldi	r22, 0x2E	; 46
    1618:	72 e0       	ldi	r23, 0x02	; 2
    161a:	8f e2       	ldi	r24, 0x2F	; 47
    161c:	92 e0       	ldi	r25, 0x02	; 2
    161e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <getTime>
			
			/* integraljenje(sumiranje) snage je enerija. E = P * t     */
			energija += (snaga/3600.0);		//posto merim u kWh, a ovo ide na 1 sekund, a sat ima 3600s
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	41 e6       	ldi	r20, 0x61	; 97
    1628:	55 e4       	ldi	r21, 0x45	; 69
    162a:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <snaga>
    162e:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <snaga+0x1>
    1632:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <snaga+0x2>
    1636:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <snaga+0x3>
    163a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__divsf3>
    163e:	9b 01       	movw	r18, r22
    1640:	ac 01       	movw	r20, r24
    1642:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <energija>
    1646:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <energija+0x1>
    164a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <energija+0x2>
    164e:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <energija+0x3>
    1652:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__addsf3>
    1656:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <energija>
    165a:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <energija+0x1>
    165e:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <energija+0x2>
    1662:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <energija+0x3>
			//uart_send_str(bafer);
			//uart_send_str("\n"); //novi red
		
			
			/* JEDNOKRATNI PERIOD PALJENJA */						
			if (jednok_on_off==1)
    1666:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <jednok_on_off>
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	d1 f4       	brne	.+52     	; 0x16a2 <main+0x262>
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
    166e:	4d e2       	ldi	r20, 0x2D	; 45
    1670:	52 e0       	ldi	r21, 0x02	; 2
    1672:	6a ed       	ldi	r22, 0xDA	; 218
    1674:	71 e0       	ldi	r23, 0x01	; 1
    1676:	83 ee       	ldi	r24, 0xE3	; 227
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	0e 94 06 04 	call	0x80c	; 0x80c <period_paljenja>
    167e:	88 23       	and	r24, r24
    1680:	29 f0       	breq	.+10     	; 0x168c <main+0x24c>
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    1682:	d0 92 c8 01 	sts	0x01C8, r13	; 0x8001c8 <ukljuceno>
					jednok_se_desio = 1;
    1686:	d0 92 c4 01 	sts	0x01C4, r13	; 0x8001c4 <jednok_se_desio>
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <main+0x266>
				}
				else if(jednok_se_desio)												//jednok. setovan, ALI ISTEKAO
    168c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <jednok_se_desio>
    1690:	88 23       	and	r24, r24
    1692:	49 f0       	breq	.+18     	; 0x16a6 <main+0x266>
				{																		//proverava se tek kad period paljenja vraca 0, tj kada gornji IF nije ispunjen
					ukljuceno = 0;
    1694:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <ukljuceno>
					jednok_on_off = 0;		//resetujem flag		
    1698:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <jednok_on_off>
					jednok_se_desio = 0;	//resetujem i ovaj flag. Da nema ovoga Jednokratno paljenje nikada ne bi startovalo ako tek treba da se desi
    169c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <jednok_se_desio>
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <main+0x266>
				}
			}
			else
				ukljuceno = 0;
    16a2:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <ukljuceno>
			
			/* GLAVNI PERIOD; paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno |= period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);	//ILI veza glavnog i jednok. perioda
    16a6:	4d e2       	ldi	r20, 0x2D	; 45
    16a8:	52 e0       	ldi	r21, 0x02	; 2
    16aa:	64 e2       	ldi	r22, 0x24	; 36
    16ac:	72 e0       	ldi	r23, 0x02	; 2
    16ae:	82 e1       	ldi	r24, 0x12	; 18
    16b0:	92 e0       	ldi	r25, 0x02	; 2
    16b2:	0e 94 06 04 	call	0x80c	; 0x80c <period_paljenja>
    16b6:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <ukljuceno>
    16ba:	89 2b       	or	r24, r25
    16bc:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ukljuceno>
			
			if (ukljuceno)
    16c0:	88 23       	and	r24, r24
    16c2:	11 f0       	breq	.+4      	; 0x16c8 <main+0x288>
				PORTB |= 1<<PINB5;   //high
    16c4:	2d 9a       	sbi	0x05, 5	; 5
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <main+0x28a>
			else
				PORTB &= ~(1<<PINB5);	//low
    16c8:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
    16ca:	0e 94 42 04 	call	0x884	; 0x884 <fsm_lcd_menu>
		

    }
    16ce:	1b cf       	rjmp	.-458    	; 0x1506 <main+0xc6>

000016d0 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
    16d0:	e8 e6       	ldi	r30, 0x68	; 104
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	82 60       	ori	r24, 0x02	; 2
    16d8:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
    16da:	ec e6       	ldi	r30, 0x6C	; 108
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	88 60       	ori	r24, 0x08	; 8
    16e2:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
    16e4:	3b 98       	cbi	0x07, 3	; 7
    16e6:	08 95       	ret

000016e8 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
    16f4:	33 9b       	sbis	0x06, 3	; 6
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <__vector_4+0x1a>
	{
		flag_pc_int = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <flag_pc_int>
		flag_pc_int_pomocni = 1;
    16fe:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <flag_pc_int_pomocni>
	}
		
    1702:	8f 91       	pop	r24
    1704:	0f 90       	pop	r0
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	0f 90       	pop	r0
    170a:	1f 90       	pop	r1
    170c:	18 95       	reti

0000170e <tasteri_init>:
extern const char *byte_to_binary(int x);

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
    170e:	8a b1       	in	r24, 0x0a	; 10
    1710:	8f 70       	andi	r24, 0x0F	; 15
    1712:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
    1714:	84 b1       	in	r24, 0x04	; 4
    1716:	8c 7f       	andi	r24, 0xFC	; 252
    1718:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
    171a:	8b b1       	in	r24, 0x0b	; 11
    171c:	80 6f       	ori	r24, 0xF0	; 240
    171e:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
    1720:	85 b1       	in	r24, 0x05	; 5
    1722:	83 60       	ori	r24, 0x03	; 3
    1724:	85 b9       	out	0x05, r24	; 5
    1726:	08 95       	ret

00001728 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
    1728:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <flag_prekid_debounce_time_half>
    172c:	88 23       	and	r24, r24
    172e:	69 f0       	breq	.+26     	; 0x174a <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
    1730:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
    1734:	93 b1       	in	r25, 0x03	; 3
    1736:	29 b1       	in	r18, 0x09	; 9
    1738:	30 e1       	ldi	r19, 0x10	; 16
    173a:	93 9f       	mul	r25, r19
    173c:	c0 01       	movw	r24, r0
    173e:	11 24       	eor	r1, r1
    1740:	92 2f       	mov	r25, r18
    1742:	92 95       	swap	r25
    1744:	9f 70       	andi	r25, 0x0F	; 15
    1746:	89 2b       	or	r24, r25
    1748:	01 c0       	rjmp	.+2      	; 0x174c <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
    174a:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
    174c:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <flag_prekid_debounce_time>
    1750:	99 23       	and	r25, r25
    1752:	81 f0       	breq	.+32     	; 0x1774 <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
    1754:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
    1758:	93 b1       	in	r25, 0x03	; 3
    175a:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
    175c:	50 e1       	ldi	r21, 0x10	; 16
    175e:	95 9f       	mul	r25, r21
    1760:	90 01       	movw	r18, r0
    1762:	11 24       	eor	r1, r1
    1764:	94 2f       	mov	r25, r20
    1766:	92 95       	swap	r25
    1768:	9f 70       	andi	r25, 0x0F	; 15
    176a:	29 2b       	or	r18, r25
    176c:	82 13       	cpse	r24, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
    1770:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tasteri_reg.2112>
		
	}
	
	return tasteri_reg;
}
    1774:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tasteri_reg.2112>
    1778:	08 95       	ret

0000177a <ocitaj_jedan_taster>:
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	static uint8_t delay_enable = 1;
	uint8_t pom;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	20 95       	com	r18
    1780:	30 95       	com	r19
    1782:	e6 2f       	mov	r30, r22
    1784:	a9 01       	movw	r20, r18
    1786:	06 2e       	mov	r0, r22
    1788:	02 c0       	rjmp	.+4      	; 0x178e <ocitaj_jedan_taster+0x14>
    178a:	55 95       	asr	r21
    178c:	47 95       	ror	r20
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <ocitaj_jedan_taster+0x10>
    1792:	40 ff       	sbrs	r20, 0
    1794:	17 c0       	rjmp	.+46     	; 0x17c4 <ocitaj_jedan_taster+0x4a>
    1796:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <flag_stisnut.2121>
    179a:	91 11       	cpse	r25, r1
    179c:	13 c0       	rjmp	.+38     	; 0x17c4 <ocitaj_jedan_taster+0x4a>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <flag_stisnut.2121>
		temp_tast = button;		//zapamtim koji je taster stisnut
    17a4:	60 93 cb 01 	sts	0x01CB, r22	; 0x8001cb <temp_tast.2120>
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    17a8:	80 95       	com	r24
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	06 2e       	mov	r0, r22
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <ocitaj_jedan_taster+0x3c>
    17b2:	44 0f       	add	r20, r20
    17b4:	55 1f       	adc	r21, r21
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <ocitaj_jedan_taster+0x38>
    17ba:	84 23       	and	r24, r20
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <ocitaj_jedan_taster+0x46>
    17be:	45 c0       	rjmp	.+138    	; 0x184a <ocitaj_jedan_taster+0xd0>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	08 95       	ret
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
    17c4:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <temp_tast.2120>
    17c8:	e9 2f       	mov	r30, r25
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    17ca:	80 95       	com	r24
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	09 2e       	mov	r0, r25
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <ocitaj_jedan_taster+0x5e>
    17d4:	44 0f       	add	r20, r20
    17d6:	55 1f       	adc	r21, r21
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <ocitaj_jedan_taster+0x5a>
    17dc:	84 23       	and	r24, r20
    17de:	19 f1       	breq	.+70     	; 0x1826 <ocitaj_jedan_taster+0xac>
    17e0:	8e ef       	ldi	r24, 0xFE	; 254
    17e2:	89 0f       	add	r24, r25
    17e4:	82 30       	cpi	r24, 0x02	; 2
    17e6:	08 f5       	brcc	.+66     	; 0x182a <ocitaj_jedan_taster+0xb0>
    17e8:	69 13       	cpse	r22, r25
    17ea:	21 c0       	rjmp	.+66     	; 0x182e <ocitaj_jedan_taster+0xb4>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <ocitaj_jedan_taster+0x78>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
		   ovo radim da bi bilo moguce brze menjati sate ako je taster ostao stisnut, da ne bi morao 30 puta stiskati i pustati taster */
		//startuj "delay" tajmer, ali samo prvi put
		//ako je delay istekao periodicno togluj promenljivu "stisnut", jer ce to napraviti efekat brzog stiskanja
		//kada je taster otpusten opet dozvoli startovanje "delay" tajmera
		
		if (delay_enable == 1)
    17f2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <delay_enable.2122>
    17f6:	91 30       	cpi	r25, 0x01	; 1
    17f8:	31 f4       	brne	.+12     	; 0x1806 <ocitaj_jedan_taster+0x8c>
		{
			delay_enable = 0;	//spreci ponovni ulazak
    17fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <delay_enable.2122>
			delay_timer = 0;	//start, timer ISR ga uvecava
    17fe:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <delay_timer+0x1>
    1802:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <delay_timer>
		}
		if (delay_timer >= 400)	//ako je delay veci od 400ms togluj "stisnut"
    1806:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <delay_timer>
    180a:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <delay_timer+0x1>
    180e:	20 39       	cpi	r18, 0x90	; 144
    1810:	31 40       	sbci	r19, 0x01	; 1
    1812:	00 f1       	brcs	.+64     	; 0x1854 <ocitaj_jedan_taster+0xda>
		{
			if(flag_prekid_50ms)
    1814:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <flag_prekid_50ms>
    1818:	99 23       	and	r25, r25
    181a:	e1 f0       	breq	.+56     	; 0x1854 <ocitaj_jedan_taster+0xda>
			{
				flag_prekid_50ms = 0; //reset flag-a
    181c:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_prekid_50ms>
				stisnut ^= 0b1;	//toggle
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	89 27       	eor	r24, r25
    1824:	08 95       	ret
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <ocitaj_jedan_taster+0xb6>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <ocitaj_jedan_taster+0xb6>
    182e:	80 e0       	ldi	r24, 0x00	; 0
			}
			
				
		}		
	}
	else if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <ocitaj_jedan_taster+0xbc>
    1832:	35 95       	asr	r19
    1834:	27 95       	ror	r18
    1836:	ea 95       	dec	r30
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <ocitaj_jedan_taster+0xb8>
    183a:	20 fd       	sbrc	r18, 0
    183c:	0b c0       	rjmp	.+22     	; 0x1854 <ocitaj_jedan_taster+0xda>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
    183e:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <flag_stisnut.2121>
		delay_enable = 1;	//dozvoli ponovno startovanje "delay" tajmera ako je taster otpusten
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <delay_enable.2122>
	sprintf(buff, "flag_stis:%d  ", flag_stisnut);
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    1848:	08 95       	ret
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    184a:	62 50       	subi	r22, 0x02	; 2
    184c:	62 30       	cpi	r22, 0x02	; 2
    184e:	80 f2       	brcs	.-96     	; 0x17f0 <ocitaj_jedan_taster+0x76>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	ee cf       	rjmp	.-36     	; 0x1830 <ocitaj_jedan_taster+0xb6>
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    1854:	08 95       	ret

00001856 <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
    1856:	98 2f       	mov	r25, r24
    1858:	92 95       	swap	r25
    185a:	9f 70       	andi	r25, 0x0F	; 15
    185c:	99 0f       	add	r25, r25
    185e:	29 2f       	mov	r18, r25
    1860:	22 0f       	add	r18, r18
    1862:	22 0f       	add	r18, r18
    1864:	92 0f       	add	r25, r18
    1866:	8f 70       	andi	r24, 0x0F	; 15
    1868:	89 0f       	add	r24, r25
    186a:	08 95       	ret

0000186c <decimal_to_bcd>:
    186c:	9d ec       	ldi	r25, 0xCD	; 205
    186e:	89 9f       	mul	r24, r25
    1870:	91 2d       	mov	r25, r1
    1872:	11 24       	eor	r1, r1
    1874:	96 95       	lsr	r25
    1876:	96 95       	lsr	r25
    1878:	96 95       	lsr	r25
    187a:	20 e1       	ldi	r18, 0x10	; 16
    187c:	92 9f       	mul	r25, r18
    187e:	a0 01       	movw	r20, r0
    1880:	11 24       	eor	r1, r1
    1882:	99 0f       	add	r25, r25
    1884:	29 2f       	mov	r18, r25
    1886:	22 0f       	add	r18, r18
    1888:	22 0f       	add	r18, r18
    188a:	92 0f       	add	r25, r18
    188c:	89 1b       	sub	r24, r25
    188e:	8f 70       	andi	r24, 0x0F	; 15
    1890:	84 2b       	or	r24, r20
    1892:	08 95       	ret

00001894 <DS3231_Read>:
    1894:	cf 93       	push	r28
    1896:	c8 2f       	mov	r28, r24
    1898:	80 ed       	ldi	r24, 0xD0	; 208
    189a:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_start_wait>
    189e:	8c 2f       	mov	r24, r28
    18a0:	0e 94 cf 01 	call	0x39e	; 0x39e <i2c_write>
    18a4:	81 ed       	ldi	r24, 0xD1	; 209
    18a6:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_start_wait>
    18aa:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <i2c_readNak>
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <DS3231_Write>:
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	d8 2f       	mov	r29, r24
    18b8:	c6 2f       	mov	r28, r22
    18ba:	80 ed       	ldi	r24, 0xD0	; 208
    18bc:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_start_wait>
    18c0:	8d 2f       	mov	r24, r29
    18c2:	0e 94 cf 01 	call	0x39e	; 0x39e <i2c_write>
    18c6:	8c 2f       	mov	r24, r28
    18c8:	0e 94 cf 01 	call	0x39e	; 0x39e <i2c_write>
    18cc:	0e 94 c6 01 	call	0x38c	; 0x38c <i2c_stop>
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	08 95       	ret

000018d6 <DS3231_init>:
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	8e e0       	ldi	r24, 0x0E	; 14
    18da:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <DS3231_Write>
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	8f e0       	ldi	r24, 0x0F	; 15
    18e2:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <DS3231_Write>
    18e6:	08 95       	ret

000018e8 <getTime>:
    18e8:	af 92       	push	r10
    18ea:	bf 92       	push	r11
    18ec:	cf 92       	push	r12
    18ee:	df 92       	push	r13
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	ec 01       	movw	r28, r24
    18fc:	7b 01       	movw	r14, r22
    18fe:	6a 01       	movw	r12, r20
    1900:	59 01       	movw	r10, r18
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	0e 94 4a 0c 	call	0x1894	; 0x1894 <DS3231_Read>
    1908:	0e 94 2b 0c 	call	0x1856	; 0x1856 <bcd_to_decimal>
    190c:	f6 01       	movw	r30, r12
    190e:	80 83       	st	Z, r24
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	0e 94 4a 0c 	call	0x1894	; 0x1894 <DS3231_Read>
    1916:	0e 94 2b 0c 	call	0x1856	; 0x1856 <bcd_to_decimal>
    191a:	f7 01       	movw	r30, r14
    191c:	80 83       	st	Z, r24
    191e:	01 30       	cpi	r16, 0x01	; 1
    1920:	81 f4       	brne	.+32     	; 0x1942 <getTime+0x5a>
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	0e 94 4a 0c 	call	0x1894	; 0x1894 <DS3231_Read>
    1928:	85 fb       	bst	r24, 5
    192a:	88 27       	eor	r24, r24
    192c:	80 f9       	bld	r24, 0
    192e:	f5 01       	movw	r30, r10
    1930:	80 83       	st	Z, r24
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	0e 94 4a 0c 	call	0x1894	; 0x1894 <DS3231_Read>
    1938:	8f 71       	andi	r24, 0x1F	; 31
    193a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <bcd_to_decimal>
    193e:	88 83       	st	Y, r24
    1940:	07 c0       	rjmp	.+14     	; 0x1950 <getTime+0x68>
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	0e 94 4a 0c 	call	0x1894	; 0x1894 <DS3231_Read>
    1948:	8f 73       	andi	r24, 0x3F	; 63
    194a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <bcd_to_decimal>
    194e:	88 83       	st	Y, r24
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	cf 90       	pop	r12
    195e:	bf 90       	pop	r11
    1960:	af 90       	pop	r10
    1962:	08 95       	ret

00001964 <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	d8 2f       	mov	r29, r24
    196e:	c6 2f       	mov	r28, r22
    1970:	84 2f       	mov	r24, r20
    1972:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
    1974:	0e 94 36 0c 	call	0x186c	; 0x186c <decimal_to_bcd>
    1978:	68 2f       	mov	r22, r24
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
    1980:	8c 2f       	mov	r24, r28
    1982:	0e 94 36 0c 	call	0x186c	; 0x186c <decimal_to_bcd>
    1986:	68 2f       	mov	r22, r24
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <DS3231_Write>
	
	switch(hour_format)
    198e:	01 30       	cpi	r16, 0x01	; 1
    1990:	79 f4       	brne	.+30     	; 0x19b0 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    1992:	11 30       	cpi	r17, 0x01	; 1
    1994:	11 f0       	breq	.+4      	; 0x199a <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    1996:	c0 e4       	ldi	r28, 0x40	; 64
    1998:	01 c0       	rjmp	.+2      	; 0x199c <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    199a:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    199c:	8d 2f       	mov	r24, r29
    199e:	0e 94 36 0c 	call	0x186c	; 0x186c <decimal_to_bcd>
    19a2:	8f 71       	andi	r24, 0x1F	; 31
    19a4:	68 2f       	mov	r22, r24
    19a6:	6c 2b       	or	r22, r28
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <DS3231_Write>
			break;
    19ae:	08 c0       	rjmp	.+16     	; 0x19c0 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    19b0:	8d 2f       	mov	r24, r29
    19b2:	0e 94 36 0c 	call	0x186c	; 0x186c <decimal_to_bcd>
    19b6:	68 2f       	mov	r22, r24
    19b8:	6f 73       	andi	r22, 0x3F	; 63
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <DS3231_Write>
			break;
		}
	}
}
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	08 95       	ret

000019ca <tajmer0_init>:
volatile uint16_t delay_timer = 0;			//koristim ga kod tastera za delay pri stisku, za brzo inkrementiranje
volatile uint16_t timer_disp_cycle = 0;		//za naizmenicno prikazivanje dva glavna ekrana na displeju

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    19ce:	93 e0       	ldi	r25, 0x03	; 3
    19d0:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    19d2:	99 ef       	ldi	r25, 0xF9	; 249
    19d4:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    19d6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    19da:	08 95       	ret

000019dc <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    19dc:	1f 92       	push	r1
    19de:	0f 92       	push	r0
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	0f 92       	push	r0
    19e4:	11 24       	eor	r1, r1
    19e6:	8f 93       	push	r24
    19e8:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    19f0:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <brojac_prekida_tajmera0>
    19f4:	8f 5f       	subi	r24, 0xFF	; 255
    19f6:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    19fa:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <brojac_prekida_tajmera0_debounce_half>
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    1a04:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <brojac_prekida_tajmera0_debounce>
    1a08:	8f 5f       	subi	r24, 0xFF	; 255
    1a0a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <brojac_prekida_tajmera0_debounce>
	delay_timer++;		//overflow posle 65.5 sekundi, ali koga briga ne remeti normalan rad
    1a0e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <delay_timer>
    1a12:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <delay_timer+0x1>
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <delay_timer+0x1>
    1a1c:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <delay_timer>
	timer_disp_cycle++;	//u main-u resetujem
    1a20:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <timer_disp_cycle>
    1a24:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <timer_disp_cycle+0x1>
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <timer_disp_cycle+0x1>
    1a2e:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <timer_disp_cycle>
		
	if(brojac_prekida_tajmera0 == 100)	//1ms * 50 = 50ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    1a32:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <brojac_prekida_tajmera0>
    1a36:	84 36       	cpi	r24, 0x64	; 100
    1a38:	29 f4       	brne	.+10     	; 0x1a44 <__vector_14+0x68>
	{
		brojac_prekida_tajmera0 = 0;
    1a3a:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <brojac_prekida_tajmera0>
		flag_prekid_50ms = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flag_prekid_50ms>
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    1a44:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <brojac_prekida_tajmera0_debounce_half>
    1a48:	83 30       	cpi	r24, 0x03	; 3
    1a4a:	29 f4       	brne	.+10     	; 0x1a56 <__vector_14+0x7a>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    1a4c:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <flag_prekid_debounce_time_half>
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    1a56:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <brojac_prekida_tajmera0_debounce>
    1a5a:	86 30       	cpi	r24, 0x06	; 6
    1a5c:	29 f4       	brne	.+10     	; 0x1a68 <__vector_14+0x8c>
	{
		brojac_prekida_tajmera0_debounce = 0;
    1a5e:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <flag_prekid_debounce_time>
	}
	
    1a68:	9f 91       	pop	r25
    1a6a:	8f 91       	pop	r24
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0
    1a72:	1f 90       	pop	r1
    1a74:	18 95       	reti

00001a76 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    1a76:	1f 92       	push	r1
    1a78:	0f 92       	push	r0
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	0f 92       	push	r0
    1a7e:	11 24       	eor	r1, r1
	poslato=0;
    1a80:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <poslato>
}
    1a84:	0f 90       	pop	r0
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	0f 90       	pop	r0
    1a8a:	1f 90       	pop	r1
    1a8c:	18 95       	reti

00001a8e <__vector_18>:

ISR(USART_RX_vect)
{
    1a8e:	1f 92       	push	r1
    1a90:	0f 92       	push	r0
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	0f 92       	push	r0
    1a96:	11 24       	eor	r1, r1
    1a98:	8f 93       	push	r24
    1a9a:	ef 93       	push	r30
    1a9c:	ff 93       	push	r31
	input_char=UDR0;
    1a9e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1aa2:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    1aa6:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <buff_size>
    1aaa:	88 30       	cpi	r24, 0x08	; 8
    1aac:	98 f4       	brcc	.+38     	; 0x1ad4 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    1aae:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <buff_size>
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <input_char>
    1ab8:	e8 5c       	subi	r30, 0xC8	; 200
    1aba:	fd 4f       	sbci	r31, 0xFD	; 253
    1abc:	80 83       	st	Z, r24
		buff_size++;
    1abe:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <buff_size>
    1ac2:	8f 5f       	subi	r24, 0xFF	; 255
    1ac4:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <buff_size>
		input_buffer[buff_size]='\0';
    1ac8:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <buff_size>
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	e8 5c       	subi	r30, 0xC8	; 200
    1ad0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ad2:	10 82       	st	Z, r1
	}
}
    1ad4:	ff 91       	pop	r31
    1ad6:	ef 91       	pop	r30
    1ad8:	8f 91       	pop	r24
    1ada:	0f 90       	pop	r0
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	0f 90       	pop	r0
    1ae0:	1f 90       	pop	r1
    1ae2:	18 95       	reti

00001ae4 <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    1ae4:	22 e0       	ldi	r18, 0x02	; 2
    1ae6:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    1aea:	28 ed       	ldi	r18, 0xD8	; 216
    1aec:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    1af0:	26 e0       	ldi	r18, 0x06	; 6
    1af2:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    1af6:	61 15       	cp	r22, r1
    1af8:	2c e2       	ldi	r18, 0x2C	; 44
    1afa:	72 07       	cpc	r23, r18
    1afc:	21 e0       	ldi	r18, 0x01	; 1
    1afe:	82 07       	cpc	r24, r18
    1b00:	91 05       	cpc	r25, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <uart_init+0x22>
    1b04:	51 c0       	rjmp	.+162    	; 0x1ba8 <uart_init+0xc4>
    1b06:	c8 f4       	brcc	.+50     	; 0x1b3a <uart_init+0x56>
    1b08:	60 34       	cpi	r22, 0x40	; 64
    1b0a:	28 e3       	ldi	r18, 0x38	; 56
    1b0c:	72 07       	cpc	r23, r18
    1b0e:	81 05       	cpc	r24, r1
    1b10:	91 05       	cpc	r25, r1
    1b12:	a9 f1       	breq	.+106    	; 0x1b7e <uart_init+0x9a>
    1b14:	30 f4       	brcc	.+12     	; 0x1b22 <uart_init+0x3e>
    1b16:	60 38       	cpi	r22, 0x80	; 128
    1b18:	75 42       	sbci	r23, 0x25	; 37
    1b1a:	81 05       	cpc	r24, r1
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	41 f1       	breq	.+80     	; 0x1b70 <uart_init+0x8c>
    1b20:	64 c0       	rjmp	.+200    	; 0x1bea <uart_init+0x106>
    1b22:	61 15       	cp	r22, r1
    1b24:	2b e4       	ldi	r18, 0x4B	; 75
    1b26:	72 07       	cpc	r23, r18
    1b28:	81 05       	cpc	r24, r1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	79 f1       	breq	.+94     	; 0x1b8c <uart_init+0xa8>
    1b2e:	61 15       	cp	r22, r1
    1b30:	76 49       	sbci	r23, 0x96	; 150
    1b32:	81 05       	cpc	r24, r1
    1b34:	91 05       	cpc	r25, r1
    1b36:	89 f1       	breq	.+98     	; 0x1b9a <uart_init+0xb6>
    1b38:	58 c0       	rjmp	.+176    	; 0x1bea <uart_init+0x106>
    1b3a:	60 32       	cpi	r22, 0x20	; 32
    1b3c:	21 ea       	ldi	r18, 0xA1	; 161
    1b3e:	72 07       	cpc	r23, r18
    1b40:	27 e0       	ldi	r18, 0x07	; 7
    1b42:	82 07       	cpc	r24, r18
    1b44:	91 05       	cpc	r25, r1
    1b46:	f1 f1       	breq	.+124    	; 0x1bc4 <uart_init+0xe0>
    1b48:	30 f4       	brcc	.+12     	; 0x1b56 <uart_init+0x72>
    1b4a:	60 39       	cpi	r22, 0x90	; 144
    1b4c:	70 4d       	sbci	r23, 0xD0	; 208
    1b4e:	83 40       	sbci	r24, 0x03	; 3
    1b50:	91 05       	cpc	r25, r1
    1b52:	89 f1       	breq	.+98     	; 0x1bb6 <uart_init+0xd2>
    1b54:	4a c0       	rjmp	.+148    	; 0x1bea <uart_init+0x106>
    1b56:	60 34       	cpi	r22, 0x40	; 64
    1b58:	22 e4       	ldi	r18, 0x42	; 66
    1b5a:	72 07       	cpc	r23, r18
    1b5c:	2f e0       	ldi	r18, 0x0F	; 15
    1b5e:	82 07       	cpc	r24, r18
    1b60:	91 05       	cpc	r25, r1
    1b62:	b9 f1       	breq	.+110    	; 0x1bd2 <uart_init+0xee>
    1b64:	60 38       	cpi	r22, 0x80	; 128
    1b66:	74 48       	sbci	r23, 0x84	; 132
    1b68:	8e 41       	sbci	r24, 0x1E	; 30
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	c9 f1       	breq	.+114    	; 0x1be0 <uart_init+0xfc>
    1b6e:	3d c0       	rjmp	.+122    	; 0x1bea <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    1b70:	8f ec       	ldi	r24, 0xCF	; 207
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1b78:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1b7c:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    1b7e:	8a e8       	ldi	r24, 0x8A	; 138
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1b86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1b8a:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    1b8c:	87 e6       	ldi	r24, 0x67	; 103
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1b94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1b98:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    1b9a:	83 e3       	ldi	r24, 0x33	; 51
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1ba2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1ba6:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    1ba8:	89 e1       	ldi	r24, 0x19	; 25
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bb0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bb4:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    1bb6:	87 e0       	ldi	r24, 0x07	; 7
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bbe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bc2:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bcc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bd0:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bda:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bde:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    1be0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1be4:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1be8:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    1bea:	8f ec       	ldi	r24, 0xCF	; 207
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bf2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bf6:	08 95       	ret

00001bf8 <uart_send_str>:
	}
	
}

void uart_send_str(char *str)
{
    1bf8:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1bfa:	90 81       	ld	r25, Z
    1bfc:	99 23       	and	r25, r25
    1bfe:	71 f0       	breq	.+28     	; 0x1c1c <uart_send_str+0x24>
    1c00:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1c02:	a6 ec       	ldi	r26, 0xC6	; 198
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1c06:	81 e0       	ldi	r24, 0x01	; 1
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1c08:	9c 93       	st	X, r25
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1c0a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <poslato>
		while (poslato);	//koci dok ISR ne kaze da je gotovo
    1c0e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <poslato>
    1c12:	91 11       	cpse	r25, r1
    1c14:	fc cf       	rjmp	.-8      	; 0x1c0e <uart_send_str+0x16>

void uart_send_str(char *str)
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1c16:	91 91       	ld	r25, Z+
    1c18:	91 11       	cpse	r25, r1
    1c1a:	f6 cf       	rjmp	.-20     	; 0x1c08 <uart_send_str+0x10>
    1c1c:	08 95       	ret

00001c1e <__subsf3>:
    1c1e:	50 58       	subi	r21, 0x80	; 128

00001c20 <__addsf3>:
    1c20:	bb 27       	eor	r27, r27
    1c22:	aa 27       	eor	r26, r26
    1c24:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__addsf3x>
    1c28:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_round>
    1c2c:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fp_pscA>
    1c30:	38 f0       	brcs	.+14     	; 0x1c40 <__addsf3+0x20>
    1c32:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__fp_pscB>
    1c36:	20 f0       	brcs	.+8      	; 0x1c40 <__addsf3+0x20>
    1c38:	39 f4       	brne	.+14     	; 0x1c48 <__addsf3+0x28>
    1c3a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c3c:	19 f4       	brne	.+6      	; 0x1c44 <__addsf3+0x24>
    1c3e:	26 f4       	brtc	.+8      	; 0x1c48 <__addsf3+0x28>
    1c40:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__fp_nan>
    1c44:	0e f4       	brtc	.+2      	; 0x1c48 <__addsf3+0x28>
    1c46:	e0 95       	com	r30
    1c48:	e7 fb       	bst	r30, 7
    1c4a:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_inf>

00001c4e <__addsf3x>:
    1c4e:	e9 2f       	mov	r30, r25
    1c50:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__fp_split3>
    1c54:	58 f3       	brcs	.-42     	; 0x1c2c <__addsf3+0xc>
    1c56:	ba 17       	cp	r27, r26
    1c58:	62 07       	cpc	r22, r18
    1c5a:	73 07       	cpc	r23, r19
    1c5c:	84 07       	cpc	r24, r20
    1c5e:	95 07       	cpc	r25, r21
    1c60:	20 f0       	brcs	.+8      	; 0x1c6a <__addsf3x+0x1c>
    1c62:	79 f4       	brne	.+30     	; 0x1c82 <__addsf3x+0x34>
    1c64:	a6 f5       	brtc	.+104    	; 0x1cce <__addsf3x+0x80>
    1c66:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__fp_zero>
    1c6a:	0e f4       	brtc	.+2      	; 0x1c6e <__addsf3x+0x20>
    1c6c:	e0 95       	com	r30
    1c6e:	0b 2e       	mov	r0, r27
    1c70:	ba 2f       	mov	r27, r26
    1c72:	a0 2d       	mov	r26, r0
    1c74:	0b 01       	movw	r0, r22
    1c76:	b9 01       	movw	r22, r18
    1c78:	90 01       	movw	r18, r0
    1c7a:	0c 01       	movw	r0, r24
    1c7c:	ca 01       	movw	r24, r20
    1c7e:	a0 01       	movw	r20, r0
    1c80:	11 24       	eor	r1, r1
    1c82:	ff 27       	eor	r31, r31
    1c84:	59 1b       	sub	r21, r25
    1c86:	99 f0       	breq	.+38     	; 0x1cae <__addsf3x+0x60>
    1c88:	59 3f       	cpi	r21, 0xF9	; 249
    1c8a:	50 f4       	brcc	.+20     	; 0x1ca0 <__addsf3x+0x52>
    1c8c:	50 3e       	cpi	r21, 0xE0	; 224
    1c8e:	68 f1       	brcs	.+90     	; 0x1cea <__addsf3x+0x9c>
    1c90:	1a 16       	cp	r1, r26
    1c92:	f0 40       	sbci	r31, 0x00	; 0
    1c94:	a2 2f       	mov	r26, r18
    1c96:	23 2f       	mov	r18, r19
    1c98:	34 2f       	mov	r19, r20
    1c9a:	44 27       	eor	r20, r20
    1c9c:	58 5f       	subi	r21, 0xF8	; 248
    1c9e:	f3 cf       	rjmp	.-26     	; 0x1c86 <__addsf3x+0x38>
    1ca0:	46 95       	lsr	r20
    1ca2:	37 95       	ror	r19
    1ca4:	27 95       	ror	r18
    1ca6:	a7 95       	ror	r26
    1ca8:	f0 40       	sbci	r31, 0x00	; 0
    1caa:	53 95       	inc	r21
    1cac:	c9 f7       	brne	.-14     	; 0x1ca0 <__addsf3x+0x52>
    1cae:	7e f4       	brtc	.+30     	; 0x1cce <__addsf3x+0x80>
    1cb0:	1f 16       	cp	r1, r31
    1cb2:	ba 0b       	sbc	r27, r26
    1cb4:	62 0b       	sbc	r22, r18
    1cb6:	73 0b       	sbc	r23, r19
    1cb8:	84 0b       	sbc	r24, r20
    1cba:	ba f0       	brmi	.+46     	; 0x1cea <__addsf3x+0x9c>
    1cbc:	91 50       	subi	r25, 0x01	; 1
    1cbe:	a1 f0       	breq	.+40     	; 0x1ce8 <__addsf3x+0x9a>
    1cc0:	ff 0f       	add	r31, r31
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	66 1f       	adc	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	88 1f       	adc	r24, r24
    1cca:	c2 f7       	brpl	.-16     	; 0x1cbc <__addsf3x+0x6e>
    1ccc:	0e c0       	rjmp	.+28     	; 0x1cea <__addsf3x+0x9c>
    1cce:	ba 0f       	add	r27, r26
    1cd0:	62 1f       	adc	r22, r18
    1cd2:	73 1f       	adc	r23, r19
    1cd4:	84 1f       	adc	r24, r20
    1cd6:	48 f4       	brcc	.+18     	; 0x1cea <__addsf3x+0x9c>
    1cd8:	87 95       	ror	r24
    1cda:	77 95       	ror	r23
    1cdc:	67 95       	ror	r22
    1cde:	b7 95       	ror	r27
    1ce0:	f7 95       	ror	r31
    1ce2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <__addsf3x+0x9a>
    1ce6:	b0 cf       	rjmp	.-160    	; 0x1c48 <__addsf3+0x28>
    1ce8:	93 95       	inc	r25
    1cea:	88 0f       	add	r24, r24
    1cec:	08 f0       	brcs	.+2      	; 0x1cf0 <__addsf3x+0xa2>
    1cee:	99 27       	eor	r25, r25
    1cf0:	ee 0f       	add	r30, r30
    1cf2:	97 95       	ror	r25
    1cf4:	87 95       	ror	r24
    1cf6:	08 95       	ret

00001cf8 <__divsf3>:
    1cf8:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__divsf3x>
    1cfc:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_round>
    1d00:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__fp_pscB>
    1d04:	58 f0       	brcs	.+22     	; 0x1d1c <__divsf3+0x24>
    1d06:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fp_pscA>
    1d0a:	40 f0       	brcs	.+16     	; 0x1d1c <__divsf3+0x24>
    1d0c:	29 f4       	brne	.+10     	; 0x1d18 <__divsf3+0x20>
    1d0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d10:	29 f0       	breq	.+10     	; 0x1d1c <__divsf3+0x24>
    1d12:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_inf>
    1d16:	51 11       	cpse	r21, r1
    1d18:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_szero>
    1d1c:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__fp_nan>

00001d20 <__divsf3x>:
    1d20:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__fp_split3>
    1d24:	68 f3       	brcs	.-38     	; 0x1d00 <__divsf3+0x8>

00001d26 <__divsf3_pse>:
    1d26:	99 23       	and	r25, r25
    1d28:	b1 f3       	breq	.-20     	; 0x1d16 <__divsf3+0x1e>
    1d2a:	55 23       	and	r21, r21
    1d2c:	91 f3       	breq	.-28     	; 0x1d12 <__divsf3+0x1a>
    1d2e:	95 1b       	sub	r25, r21
    1d30:	55 0b       	sbc	r21, r21
    1d32:	bb 27       	eor	r27, r27
    1d34:	aa 27       	eor	r26, r26
    1d36:	62 17       	cp	r22, r18
    1d38:	73 07       	cpc	r23, r19
    1d3a:	84 07       	cpc	r24, r20
    1d3c:	38 f0       	brcs	.+14     	; 0x1d4c <__divsf3_pse+0x26>
    1d3e:	9f 5f       	subi	r25, 0xFF	; 255
    1d40:	5f 4f       	sbci	r21, 0xFF	; 255
    1d42:	22 0f       	add	r18, r18
    1d44:	33 1f       	adc	r19, r19
    1d46:	44 1f       	adc	r20, r20
    1d48:	aa 1f       	adc	r26, r26
    1d4a:	a9 f3       	breq	.-22     	; 0x1d36 <__divsf3_pse+0x10>
    1d4c:	35 d0       	rcall	.+106    	; 0x1db8 <__divsf3_pse+0x92>
    1d4e:	0e 2e       	mov	r0, r30
    1d50:	3a f0       	brmi	.+14     	; 0x1d60 <__divsf3_pse+0x3a>
    1d52:	e0 e8       	ldi	r30, 0x80	; 128
    1d54:	32 d0       	rcall	.+100    	; 0x1dba <__divsf3_pse+0x94>
    1d56:	91 50       	subi	r25, 0x01	; 1
    1d58:	50 40       	sbci	r21, 0x00	; 0
    1d5a:	e6 95       	lsr	r30
    1d5c:	00 1c       	adc	r0, r0
    1d5e:	ca f7       	brpl	.-14     	; 0x1d52 <__divsf3_pse+0x2c>
    1d60:	2b d0       	rcall	.+86     	; 0x1db8 <__divsf3_pse+0x92>
    1d62:	fe 2f       	mov	r31, r30
    1d64:	29 d0       	rcall	.+82     	; 0x1db8 <__divsf3_pse+0x92>
    1d66:	66 0f       	add	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	bb 1f       	adc	r27, r27
    1d6e:	26 17       	cp	r18, r22
    1d70:	37 07       	cpc	r19, r23
    1d72:	48 07       	cpc	r20, r24
    1d74:	ab 07       	cpc	r26, r27
    1d76:	b0 e8       	ldi	r27, 0x80	; 128
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <__divsf3_pse+0x56>
    1d7a:	bb 0b       	sbc	r27, r27
    1d7c:	80 2d       	mov	r24, r0
    1d7e:	bf 01       	movw	r22, r30
    1d80:	ff 27       	eor	r31, r31
    1d82:	93 58       	subi	r25, 0x83	; 131
    1d84:	5f 4f       	sbci	r21, 0xFF	; 255
    1d86:	3a f0       	brmi	.+14     	; 0x1d96 <__divsf3_pse+0x70>
    1d88:	9e 3f       	cpi	r25, 0xFE	; 254
    1d8a:	51 05       	cpc	r21, r1
    1d8c:	78 f0       	brcs	.+30     	; 0x1dac <__divsf3_pse+0x86>
    1d8e:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_inf>
    1d92:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_szero>
    1d96:	5f 3f       	cpi	r21, 0xFF	; 255
    1d98:	e4 f3       	brlt	.-8      	; 0x1d92 <__divsf3_pse+0x6c>
    1d9a:	98 3e       	cpi	r25, 0xE8	; 232
    1d9c:	d4 f3       	brlt	.-12     	; 0x1d92 <__divsf3_pse+0x6c>
    1d9e:	86 95       	lsr	r24
    1da0:	77 95       	ror	r23
    1da2:	67 95       	ror	r22
    1da4:	b7 95       	ror	r27
    1da6:	f7 95       	ror	r31
    1da8:	9f 5f       	subi	r25, 0xFF	; 255
    1daa:	c9 f7       	brne	.-14     	; 0x1d9e <__divsf3_pse+0x78>
    1dac:	88 0f       	add	r24, r24
    1dae:	91 1d       	adc	r25, r1
    1db0:	96 95       	lsr	r25
    1db2:	87 95       	ror	r24
    1db4:	97 f9       	bld	r25, 7
    1db6:	08 95       	ret
    1db8:	e1 e0       	ldi	r30, 0x01	; 1
    1dba:	66 0f       	add	r22, r22
    1dbc:	77 1f       	adc	r23, r23
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	bb 1f       	adc	r27, r27
    1dc2:	62 17       	cp	r22, r18
    1dc4:	73 07       	cpc	r23, r19
    1dc6:	84 07       	cpc	r24, r20
    1dc8:	ba 07       	cpc	r27, r26
    1dca:	20 f0       	brcs	.+8      	; 0x1dd4 <__divsf3_pse+0xae>
    1dcc:	62 1b       	sub	r22, r18
    1dce:	73 0b       	sbc	r23, r19
    1dd0:	84 0b       	sbc	r24, r20
    1dd2:	ba 0b       	sbc	r27, r26
    1dd4:	ee 1f       	adc	r30, r30
    1dd6:	88 f7       	brcc	.-30     	; 0x1dba <__divsf3_pse+0x94>
    1dd8:	e0 95       	com	r30
    1dda:	08 95       	ret

00001ddc <__fixunssfsi>:
    1ddc:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__fp_splitA>
    1de0:	88 f0       	brcs	.+34     	; 0x1e04 <__fixunssfsi+0x28>
    1de2:	9f 57       	subi	r25, 0x7F	; 127
    1de4:	98 f0       	brcs	.+38     	; 0x1e0c <__fixunssfsi+0x30>
    1de6:	b9 2f       	mov	r27, r25
    1de8:	99 27       	eor	r25, r25
    1dea:	b7 51       	subi	r27, 0x17	; 23
    1dec:	b0 f0       	brcs	.+44     	; 0x1e1a <__fixunssfsi+0x3e>
    1dee:	e1 f0       	breq	.+56     	; 0x1e28 <__fixunssfsi+0x4c>
    1df0:	66 0f       	add	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	88 1f       	adc	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	1a f0       	brmi	.+6      	; 0x1e00 <__fixunssfsi+0x24>
    1dfa:	ba 95       	dec	r27
    1dfc:	c9 f7       	brne	.-14     	; 0x1df0 <__fixunssfsi+0x14>
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <__fixunssfsi+0x4c>
    1e00:	b1 30       	cpi	r27, 0x01	; 1
    1e02:	91 f0       	breq	.+36     	; 0x1e28 <__fixunssfsi+0x4c>
    1e04:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__fp_zero>
    1e08:	b1 e0       	ldi	r27, 0x01	; 1
    1e0a:	08 95       	ret
    1e0c:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__fp_zero>
    1e10:	67 2f       	mov	r22, r23
    1e12:	78 2f       	mov	r23, r24
    1e14:	88 27       	eor	r24, r24
    1e16:	b8 5f       	subi	r27, 0xF8	; 248
    1e18:	39 f0       	breq	.+14     	; 0x1e28 <__fixunssfsi+0x4c>
    1e1a:	b9 3f       	cpi	r27, 0xF9	; 249
    1e1c:	cc f3       	brlt	.-14     	; 0x1e10 <__fixunssfsi+0x34>
    1e1e:	86 95       	lsr	r24
    1e20:	77 95       	ror	r23
    1e22:	67 95       	ror	r22
    1e24:	b3 95       	inc	r27
    1e26:	d9 f7       	brne	.-10     	; 0x1e1e <__fixunssfsi+0x42>
    1e28:	3e f4       	brtc	.+14     	; 0x1e38 <__fixunssfsi+0x5c>
    1e2a:	90 95       	com	r25
    1e2c:	80 95       	com	r24
    1e2e:	70 95       	com	r23
    1e30:	61 95       	neg	r22
    1e32:	7f 4f       	sbci	r23, 0xFF	; 255
    1e34:	8f 4f       	sbci	r24, 0xFF	; 255
    1e36:	9f 4f       	sbci	r25, 0xFF	; 255
    1e38:	08 95       	ret

00001e3a <__floatunsisf>:
    1e3a:	e8 94       	clt
    1e3c:	09 c0       	rjmp	.+18     	; 0x1e50 <__floatsisf+0x12>

00001e3e <__floatsisf>:
    1e3e:	97 fb       	bst	r25, 7
    1e40:	3e f4       	brtc	.+14     	; 0x1e50 <__floatsisf+0x12>
    1e42:	90 95       	com	r25
    1e44:	80 95       	com	r24
    1e46:	70 95       	com	r23
    1e48:	61 95       	neg	r22
    1e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e50:	99 23       	and	r25, r25
    1e52:	a9 f0       	breq	.+42     	; 0x1e7e <__floatsisf+0x40>
    1e54:	f9 2f       	mov	r31, r25
    1e56:	96 e9       	ldi	r25, 0x96	; 150
    1e58:	bb 27       	eor	r27, r27
    1e5a:	93 95       	inc	r25
    1e5c:	f6 95       	lsr	r31
    1e5e:	87 95       	ror	r24
    1e60:	77 95       	ror	r23
    1e62:	67 95       	ror	r22
    1e64:	b7 95       	ror	r27
    1e66:	f1 11       	cpse	r31, r1
    1e68:	f8 cf       	rjmp	.-16     	; 0x1e5a <__floatsisf+0x1c>
    1e6a:	fa f4       	brpl	.+62     	; 0x1eaa <__floatsisf+0x6c>
    1e6c:	bb 0f       	add	r27, r27
    1e6e:	11 f4       	brne	.+4      	; 0x1e74 <__floatsisf+0x36>
    1e70:	60 ff       	sbrs	r22, 0
    1e72:	1b c0       	rjmp	.+54     	; 0x1eaa <__floatsisf+0x6c>
    1e74:	6f 5f       	subi	r22, 0xFF	; 255
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	16 c0       	rjmp	.+44     	; 0x1eaa <__floatsisf+0x6c>
    1e7e:	88 23       	and	r24, r24
    1e80:	11 f0       	breq	.+4      	; 0x1e86 <__floatsisf+0x48>
    1e82:	96 e9       	ldi	r25, 0x96	; 150
    1e84:	11 c0       	rjmp	.+34     	; 0x1ea8 <__floatsisf+0x6a>
    1e86:	77 23       	and	r23, r23
    1e88:	21 f0       	breq	.+8      	; 0x1e92 <__floatsisf+0x54>
    1e8a:	9e e8       	ldi	r25, 0x8E	; 142
    1e8c:	87 2f       	mov	r24, r23
    1e8e:	76 2f       	mov	r23, r22
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <__floatsisf+0x5e>
    1e92:	66 23       	and	r22, r22
    1e94:	71 f0       	breq	.+28     	; 0x1eb2 <__floatsisf+0x74>
    1e96:	96 e8       	ldi	r25, 0x86	; 134
    1e98:	86 2f       	mov	r24, r22
    1e9a:	70 e0       	ldi	r23, 0x00	; 0
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	2a f0       	brmi	.+10     	; 0x1eaa <__floatsisf+0x6c>
    1ea0:	9a 95       	dec	r25
    1ea2:	66 0f       	add	r22, r22
    1ea4:	77 1f       	adc	r23, r23
    1ea6:	88 1f       	adc	r24, r24
    1ea8:	da f7       	brpl	.-10     	; 0x1ea0 <__floatsisf+0x62>
    1eaa:	88 0f       	add	r24, r24
    1eac:	96 95       	lsr	r25
    1eae:	87 95       	ror	r24
    1eb0:	97 f9       	bld	r25, 7
    1eb2:	08 95       	ret

00001eb4 <__fp_inf>:
    1eb4:	97 f9       	bld	r25, 7
    1eb6:	9f 67       	ori	r25, 0x7F	; 127
    1eb8:	80 e8       	ldi	r24, 0x80	; 128
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	08 95       	ret

00001ec0 <__fp_nan>:
    1ec0:	9f ef       	ldi	r25, 0xFF	; 255
    1ec2:	80 ec       	ldi	r24, 0xC0	; 192
    1ec4:	08 95       	ret

00001ec6 <__fp_pscA>:
    1ec6:	00 24       	eor	r0, r0
    1ec8:	0a 94       	dec	r0
    1eca:	16 16       	cp	r1, r22
    1ecc:	17 06       	cpc	r1, r23
    1ece:	18 06       	cpc	r1, r24
    1ed0:	09 06       	cpc	r0, r25
    1ed2:	08 95       	ret

00001ed4 <__fp_pscB>:
    1ed4:	00 24       	eor	r0, r0
    1ed6:	0a 94       	dec	r0
    1ed8:	12 16       	cp	r1, r18
    1eda:	13 06       	cpc	r1, r19
    1edc:	14 06       	cpc	r1, r20
    1ede:	05 06       	cpc	r0, r21
    1ee0:	08 95       	ret

00001ee2 <__fp_round>:
    1ee2:	09 2e       	mov	r0, r25
    1ee4:	03 94       	inc	r0
    1ee6:	00 0c       	add	r0, r0
    1ee8:	11 f4       	brne	.+4      	; 0x1eee <__fp_round+0xc>
    1eea:	88 23       	and	r24, r24
    1eec:	52 f0       	brmi	.+20     	; 0x1f02 <__fp_round+0x20>
    1eee:	bb 0f       	add	r27, r27
    1ef0:	40 f4       	brcc	.+16     	; 0x1f02 <__fp_round+0x20>
    1ef2:	bf 2b       	or	r27, r31
    1ef4:	11 f4       	brne	.+4      	; 0x1efa <__fp_round+0x18>
    1ef6:	60 ff       	sbrs	r22, 0
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <__fp_round+0x20>
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	8f 4f       	sbci	r24, 0xFF	; 255
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	08 95       	ret

00001f04 <__fp_split3>:
    1f04:	57 fd       	sbrc	r21, 7
    1f06:	90 58       	subi	r25, 0x80	; 128
    1f08:	44 0f       	add	r20, r20
    1f0a:	55 1f       	adc	r21, r21
    1f0c:	59 f0       	breq	.+22     	; 0x1f24 <__fp_splitA+0x10>
    1f0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f10:	71 f0       	breq	.+28     	; 0x1f2e <__fp_splitA+0x1a>
    1f12:	47 95       	ror	r20

00001f14 <__fp_splitA>:
    1f14:	88 0f       	add	r24, r24
    1f16:	97 fb       	bst	r25, 7
    1f18:	99 1f       	adc	r25, r25
    1f1a:	61 f0       	breq	.+24     	; 0x1f34 <__fp_splitA+0x20>
    1f1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f1e:	79 f0       	breq	.+30     	; 0x1f3e <__fp_splitA+0x2a>
    1f20:	87 95       	ror	r24
    1f22:	08 95       	ret
    1f24:	12 16       	cp	r1, r18
    1f26:	13 06       	cpc	r1, r19
    1f28:	14 06       	cpc	r1, r20
    1f2a:	55 1f       	adc	r21, r21
    1f2c:	f2 cf       	rjmp	.-28     	; 0x1f12 <__fp_split3+0xe>
    1f2e:	46 95       	lsr	r20
    1f30:	f1 df       	rcall	.-30     	; 0x1f14 <__fp_splitA>
    1f32:	08 c0       	rjmp	.+16     	; 0x1f44 <__fp_splitA+0x30>
    1f34:	16 16       	cp	r1, r22
    1f36:	17 06       	cpc	r1, r23
    1f38:	18 06       	cpc	r1, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	f1 cf       	rjmp	.-30     	; 0x1f20 <__fp_splitA+0xc>
    1f3e:	86 95       	lsr	r24
    1f40:	71 05       	cpc	r23, r1
    1f42:	61 05       	cpc	r22, r1
    1f44:	08 94       	sec
    1f46:	08 95       	ret

00001f48 <__fp_zero>:
    1f48:	e8 94       	clt

00001f4a <__fp_szero>:
    1f4a:	bb 27       	eor	r27, r27
    1f4c:	66 27       	eor	r22, r22
    1f4e:	77 27       	eor	r23, r23
    1f50:	cb 01       	movw	r24, r22
    1f52:	97 f9       	bld	r25, 7
    1f54:	08 95       	ret

00001f56 <__mulsf3>:
    1f56:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__mulsf3x>
    1f5a:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_round>
    1f5e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fp_pscA>
    1f62:	38 f0       	brcs	.+14     	; 0x1f72 <__mulsf3+0x1c>
    1f64:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__fp_pscB>
    1f68:	20 f0       	brcs	.+8      	; 0x1f72 <__mulsf3+0x1c>
    1f6a:	95 23       	and	r25, r21
    1f6c:	11 f0       	breq	.+4      	; 0x1f72 <__mulsf3+0x1c>
    1f6e:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_inf>
    1f72:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__fp_nan>
    1f76:	11 24       	eor	r1, r1
    1f78:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_szero>

00001f7c <__mulsf3x>:
    1f7c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__fp_split3>
    1f80:	70 f3       	brcs	.-36     	; 0x1f5e <__mulsf3+0x8>

00001f82 <__mulsf3_pse>:
    1f82:	95 9f       	mul	r25, r21
    1f84:	c1 f3       	breq	.-16     	; 0x1f76 <__mulsf3+0x20>
    1f86:	95 0f       	add	r25, r21
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	55 1f       	adc	r21, r21
    1f8c:	62 9f       	mul	r22, r18
    1f8e:	f0 01       	movw	r30, r0
    1f90:	72 9f       	mul	r23, r18
    1f92:	bb 27       	eor	r27, r27
    1f94:	f0 0d       	add	r31, r0
    1f96:	b1 1d       	adc	r27, r1
    1f98:	63 9f       	mul	r22, r19
    1f9a:	aa 27       	eor	r26, r26
    1f9c:	f0 0d       	add	r31, r0
    1f9e:	b1 1d       	adc	r27, r1
    1fa0:	aa 1f       	adc	r26, r26
    1fa2:	64 9f       	mul	r22, r20
    1fa4:	66 27       	eor	r22, r22
    1fa6:	b0 0d       	add	r27, r0
    1fa8:	a1 1d       	adc	r26, r1
    1faa:	66 1f       	adc	r22, r22
    1fac:	82 9f       	mul	r24, r18
    1fae:	22 27       	eor	r18, r18
    1fb0:	b0 0d       	add	r27, r0
    1fb2:	a1 1d       	adc	r26, r1
    1fb4:	62 1f       	adc	r22, r18
    1fb6:	73 9f       	mul	r23, r19
    1fb8:	b0 0d       	add	r27, r0
    1fba:	a1 1d       	adc	r26, r1
    1fbc:	62 1f       	adc	r22, r18
    1fbe:	83 9f       	mul	r24, r19
    1fc0:	a0 0d       	add	r26, r0
    1fc2:	61 1d       	adc	r22, r1
    1fc4:	22 1f       	adc	r18, r18
    1fc6:	74 9f       	mul	r23, r20
    1fc8:	33 27       	eor	r19, r19
    1fca:	a0 0d       	add	r26, r0
    1fcc:	61 1d       	adc	r22, r1
    1fce:	23 1f       	adc	r18, r19
    1fd0:	84 9f       	mul	r24, r20
    1fd2:	60 0d       	add	r22, r0
    1fd4:	21 1d       	adc	r18, r1
    1fd6:	82 2f       	mov	r24, r18
    1fd8:	76 2f       	mov	r23, r22
    1fda:	6a 2f       	mov	r22, r26
    1fdc:	11 24       	eor	r1, r1
    1fde:	9f 57       	subi	r25, 0x7F	; 127
    1fe0:	50 40       	sbci	r21, 0x00	; 0
    1fe2:	9a f0       	brmi	.+38     	; 0x200a <__mulsf3_pse+0x88>
    1fe4:	f1 f0       	breq	.+60     	; 0x2022 <__mulsf3_pse+0xa0>
    1fe6:	88 23       	and	r24, r24
    1fe8:	4a f0       	brmi	.+18     	; 0x1ffc <__mulsf3_pse+0x7a>
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	bb 1f       	adc	r27, r27
    1ff0:	66 1f       	adc	r22, r22
    1ff2:	77 1f       	adc	r23, r23
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	91 50       	subi	r25, 0x01	; 1
    1ff8:	50 40       	sbci	r21, 0x00	; 0
    1ffa:	a9 f7       	brne	.-22     	; 0x1fe6 <__mulsf3_pse+0x64>
    1ffc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffe:	51 05       	cpc	r21, r1
    2000:	80 f0       	brcs	.+32     	; 0x2022 <__mulsf3_pse+0xa0>
    2002:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_inf>
    2006:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_szero>
    200a:	5f 3f       	cpi	r21, 0xFF	; 255
    200c:	e4 f3       	brlt	.-8      	; 0x2006 <__mulsf3_pse+0x84>
    200e:	98 3e       	cpi	r25, 0xE8	; 232
    2010:	d4 f3       	brlt	.-12     	; 0x2006 <__mulsf3_pse+0x84>
    2012:	86 95       	lsr	r24
    2014:	77 95       	ror	r23
    2016:	67 95       	ror	r22
    2018:	b7 95       	ror	r27
    201a:	f7 95       	ror	r31
    201c:	e7 95       	ror	r30
    201e:	9f 5f       	subi	r25, 0xFF	; 255
    2020:	c1 f7       	brne	.-16     	; 0x2012 <__mulsf3_pse+0x90>
    2022:	fe 2b       	or	r31, r30
    2024:	88 0f       	add	r24, r24
    2026:	91 1d       	adc	r25, r1
    2028:	96 95       	lsr	r25
    202a:	87 95       	ror	r24
    202c:	97 f9       	bld	r25, 7
    202e:	08 95       	ret

00002030 <dtostrf>:
    2030:	ef 92       	push	r14
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	e8 01       	movw	r28, r16
    203c:	47 fd       	sbrc	r20, 7
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <dtostrf+0x14>
    2040:	34 e0       	ldi	r19, 0x04	; 4
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <dtostrf+0x16>
    2044:	34 e1       	ldi	r19, 0x14	; 20
    2046:	04 2e       	mov	r0, r20
    2048:	00 0c       	add	r0, r0
    204a:	55 0b       	sbc	r21, r21
    204c:	57 ff       	sbrs	r21, 7
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <dtostrf+0x26>
    2050:	51 95       	neg	r21
    2052:	41 95       	neg	r20
    2054:	51 09       	sbc	r21, r1
    2056:	e3 2e       	mov	r14, r19
    2058:	02 2f       	mov	r16, r18
    205a:	24 2f       	mov	r18, r20
    205c:	ae 01       	movw	r20, r28
    205e:	0e 94 3b 12 	call	0x2476	; 0x2476 <dtoa_prf>
    2062:	ce 01       	movw	r24, r28
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	ef 90       	pop	r14
    206e:	08 95       	ret

00002070 <sprintf>:
    2070:	ae e0       	ldi	r26, 0x0E	; 14
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	ee e3       	ldi	r30, 0x3E	; 62
    2076:	f0 e1       	ldi	r31, 0x10	; 16
    2078:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x1c>
    207c:	0d 89       	ldd	r16, Y+21	; 0x15
    207e:	1e 89       	ldd	r17, Y+22	; 0x16
    2080:	86 e0       	ldi	r24, 0x06	; 6
    2082:	8c 83       	std	Y+4, r24	; 0x04
    2084:	1a 83       	std	Y+2, r17	; 0x02
    2086:	09 83       	std	Y+1, r16	; 0x01
    2088:	8f ef       	ldi	r24, 0xFF	; 255
    208a:	9f e7       	ldi	r25, 0x7F	; 127
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	ae 01       	movw	r20, r28
    2092:	47 5e       	subi	r20, 0xE7	; 231
    2094:	5f 4f       	sbci	r21, 0xFF	; 255
    2096:	6f 89       	ldd	r22, Y+23	; 0x17
    2098:	78 8d       	ldd	r23, Y+24	; 0x18
    209a:	ce 01       	movw	r24, r28
    209c:	01 96       	adiw	r24, 0x01	; 1
    209e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <vfprintf>
    20a2:	ef 81       	ldd	r30, Y+7	; 0x07
    20a4:	f8 85       	ldd	r31, Y+8	; 0x08
    20a6:	e0 0f       	add	r30, r16
    20a8:	f1 1f       	adc	r31, r17
    20aa:	10 82       	st	Z, r1
    20ac:	2e 96       	adiw	r28, 0x0e	; 14
    20ae:	e4 e0       	ldi	r30, 0x04	; 4
    20b0:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x1c>

000020b4 <vfprintf>:
    20b4:	ab e0       	ldi	r26, 0x0B	; 11
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e0 e6       	ldi	r30, 0x60	; 96
    20ba:	f0 e1       	ldi	r31, 0x10	; 16
    20bc:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__prologue_saves__>
    20c0:	6c 01       	movw	r12, r24
    20c2:	7b 01       	movw	r14, r22
    20c4:	8a 01       	movw	r16, r20
    20c6:	fc 01       	movw	r30, r24
    20c8:	17 82       	std	Z+7, r1	; 0x07
    20ca:	16 82       	std	Z+6, r1	; 0x06
    20cc:	83 81       	ldd	r24, Z+3	; 0x03
    20ce:	81 ff       	sbrs	r24, 1
    20d0:	cc c1       	rjmp	.+920    	; 0x246a <vfprintf+0x3b6>
    20d2:	ce 01       	movw	r24, r28
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	3c 01       	movw	r6, r24
    20d8:	f6 01       	movw	r30, r12
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	f7 01       	movw	r30, r14
    20de:	93 fd       	sbrc	r25, 3
    20e0:	85 91       	lpm	r24, Z+
    20e2:	93 ff       	sbrs	r25, 3
    20e4:	81 91       	ld	r24, Z+
    20e6:	7f 01       	movw	r14, r30
    20e8:	88 23       	and	r24, r24
    20ea:	09 f4       	brne	.+2      	; 0x20ee <vfprintf+0x3a>
    20ec:	ba c1       	rjmp	.+884    	; 0x2462 <vfprintf+0x3ae>
    20ee:	85 32       	cpi	r24, 0x25	; 37
    20f0:	39 f4       	brne	.+14     	; 0x2100 <vfprintf+0x4c>
    20f2:	93 fd       	sbrc	r25, 3
    20f4:	85 91       	lpm	r24, Z+
    20f6:	93 ff       	sbrs	r25, 3
    20f8:	81 91       	ld	r24, Z+
    20fa:	7f 01       	movw	r14, r30
    20fc:	85 32       	cpi	r24, 0x25	; 37
    20fe:	29 f4       	brne	.+10     	; 0x210a <vfprintf+0x56>
    2100:	b6 01       	movw	r22, r12
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 83 14 	call	0x2906	; 0x2906 <fputc>
    2108:	e7 cf       	rjmp	.-50     	; 0x20d8 <vfprintf+0x24>
    210a:	91 2c       	mov	r9, r1
    210c:	21 2c       	mov	r2, r1
    210e:	31 2c       	mov	r3, r1
    2110:	ff e1       	ldi	r31, 0x1F	; 31
    2112:	f3 15       	cp	r31, r3
    2114:	d8 f0       	brcs	.+54     	; 0x214c <vfprintf+0x98>
    2116:	8b 32       	cpi	r24, 0x2B	; 43
    2118:	79 f0       	breq	.+30     	; 0x2138 <vfprintf+0x84>
    211a:	38 f4       	brcc	.+14     	; 0x212a <vfprintf+0x76>
    211c:	80 32       	cpi	r24, 0x20	; 32
    211e:	79 f0       	breq	.+30     	; 0x213e <vfprintf+0x8a>
    2120:	83 32       	cpi	r24, 0x23	; 35
    2122:	a1 f4       	brne	.+40     	; 0x214c <vfprintf+0x98>
    2124:	23 2d       	mov	r18, r3
    2126:	20 61       	ori	r18, 0x10	; 16
    2128:	1d c0       	rjmp	.+58     	; 0x2164 <vfprintf+0xb0>
    212a:	8d 32       	cpi	r24, 0x2D	; 45
    212c:	61 f0       	breq	.+24     	; 0x2146 <vfprintf+0x92>
    212e:	80 33       	cpi	r24, 0x30	; 48
    2130:	69 f4       	brne	.+26     	; 0x214c <vfprintf+0x98>
    2132:	23 2d       	mov	r18, r3
    2134:	21 60       	ori	r18, 0x01	; 1
    2136:	16 c0       	rjmp	.+44     	; 0x2164 <vfprintf+0xb0>
    2138:	83 2d       	mov	r24, r3
    213a:	82 60       	ori	r24, 0x02	; 2
    213c:	38 2e       	mov	r3, r24
    213e:	e3 2d       	mov	r30, r3
    2140:	e4 60       	ori	r30, 0x04	; 4
    2142:	3e 2e       	mov	r3, r30
    2144:	2a c0       	rjmp	.+84     	; 0x219a <vfprintf+0xe6>
    2146:	f3 2d       	mov	r31, r3
    2148:	f8 60       	ori	r31, 0x08	; 8
    214a:	1d c0       	rjmp	.+58     	; 0x2186 <vfprintf+0xd2>
    214c:	37 fc       	sbrc	r3, 7
    214e:	2d c0       	rjmp	.+90     	; 0x21aa <vfprintf+0xf6>
    2150:	20 ed       	ldi	r18, 0xD0	; 208
    2152:	28 0f       	add	r18, r24
    2154:	2a 30       	cpi	r18, 0x0A	; 10
    2156:	40 f0       	brcs	.+16     	; 0x2168 <vfprintf+0xb4>
    2158:	8e 32       	cpi	r24, 0x2E	; 46
    215a:	b9 f4       	brne	.+46     	; 0x218a <vfprintf+0xd6>
    215c:	36 fc       	sbrc	r3, 6
    215e:	81 c1       	rjmp	.+770    	; 0x2462 <vfprintf+0x3ae>
    2160:	23 2d       	mov	r18, r3
    2162:	20 64       	ori	r18, 0x40	; 64
    2164:	32 2e       	mov	r3, r18
    2166:	19 c0       	rjmp	.+50     	; 0x219a <vfprintf+0xe6>
    2168:	36 fe       	sbrs	r3, 6
    216a:	06 c0       	rjmp	.+12     	; 0x2178 <vfprintf+0xc4>
    216c:	8a e0       	ldi	r24, 0x0A	; 10
    216e:	98 9e       	mul	r9, r24
    2170:	20 0d       	add	r18, r0
    2172:	11 24       	eor	r1, r1
    2174:	92 2e       	mov	r9, r18
    2176:	11 c0       	rjmp	.+34     	; 0x219a <vfprintf+0xe6>
    2178:	ea e0       	ldi	r30, 0x0A	; 10
    217a:	2e 9e       	mul	r2, r30
    217c:	20 0d       	add	r18, r0
    217e:	11 24       	eor	r1, r1
    2180:	22 2e       	mov	r2, r18
    2182:	f3 2d       	mov	r31, r3
    2184:	f0 62       	ori	r31, 0x20	; 32
    2186:	3f 2e       	mov	r3, r31
    2188:	08 c0       	rjmp	.+16     	; 0x219a <vfprintf+0xe6>
    218a:	8c 36       	cpi	r24, 0x6C	; 108
    218c:	21 f4       	brne	.+8      	; 0x2196 <vfprintf+0xe2>
    218e:	83 2d       	mov	r24, r3
    2190:	80 68       	ori	r24, 0x80	; 128
    2192:	38 2e       	mov	r3, r24
    2194:	02 c0       	rjmp	.+4      	; 0x219a <vfprintf+0xe6>
    2196:	88 36       	cpi	r24, 0x68	; 104
    2198:	41 f4       	brne	.+16     	; 0x21aa <vfprintf+0xf6>
    219a:	f7 01       	movw	r30, r14
    219c:	93 fd       	sbrc	r25, 3
    219e:	85 91       	lpm	r24, Z+
    21a0:	93 ff       	sbrs	r25, 3
    21a2:	81 91       	ld	r24, Z+
    21a4:	7f 01       	movw	r14, r30
    21a6:	81 11       	cpse	r24, r1
    21a8:	b3 cf       	rjmp	.-154    	; 0x2110 <vfprintf+0x5c>
    21aa:	98 2f       	mov	r25, r24
    21ac:	9f 7d       	andi	r25, 0xDF	; 223
    21ae:	95 54       	subi	r25, 0x45	; 69
    21b0:	93 30       	cpi	r25, 0x03	; 3
    21b2:	28 f4       	brcc	.+10     	; 0x21be <vfprintf+0x10a>
    21b4:	0c 5f       	subi	r16, 0xFC	; 252
    21b6:	1f 4f       	sbci	r17, 0xFF	; 255
    21b8:	9f e3       	ldi	r25, 0x3F	; 63
    21ba:	99 83       	std	Y+1, r25	; 0x01
    21bc:	0d c0       	rjmp	.+26     	; 0x21d8 <vfprintf+0x124>
    21be:	83 36       	cpi	r24, 0x63	; 99
    21c0:	31 f0       	breq	.+12     	; 0x21ce <vfprintf+0x11a>
    21c2:	83 37       	cpi	r24, 0x73	; 115
    21c4:	71 f0       	breq	.+28     	; 0x21e2 <vfprintf+0x12e>
    21c6:	83 35       	cpi	r24, 0x53	; 83
    21c8:	09 f0       	breq	.+2      	; 0x21cc <vfprintf+0x118>
    21ca:	59 c0       	rjmp	.+178    	; 0x227e <vfprintf+0x1ca>
    21cc:	21 c0       	rjmp	.+66     	; 0x2210 <vfprintf+0x15c>
    21ce:	f8 01       	movw	r30, r16
    21d0:	80 81       	ld	r24, Z
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	0e 5f       	subi	r16, 0xFE	; 254
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	88 24       	eor	r8, r8
    21da:	83 94       	inc	r8
    21dc:	91 2c       	mov	r9, r1
    21de:	53 01       	movw	r10, r6
    21e0:	13 c0       	rjmp	.+38     	; 0x2208 <vfprintf+0x154>
    21e2:	28 01       	movw	r4, r16
    21e4:	f2 e0       	ldi	r31, 0x02	; 2
    21e6:	4f 0e       	add	r4, r31
    21e8:	51 1c       	adc	r5, r1
    21ea:	f8 01       	movw	r30, r16
    21ec:	a0 80       	ld	r10, Z
    21ee:	b1 80       	ldd	r11, Z+1	; 0x01
    21f0:	36 fe       	sbrs	r3, 6
    21f2:	03 c0       	rjmp	.+6      	; 0x21fa <vfprintf+0x146>
    21f4:	69 2d       	mov	r22, r9
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <vfprintf+0x14a>
    21fa:	6f ef       	ldi	r22, 0xFF	; 255
    21fc:	7f ef       	ldi	r23, 0xFF	; 255
    21fe:	c5 01       	movw	r24, r10
    2200:	0e 94 78 14 	call	0x28f0	; 0x28f0 <strnlen>
    2204:	4c 01       	movw	r8, r24
    2206:	82 01       	movw	r16, r4
    2208:	f3 2d       	mov	r31, r3
    220a:	ff 77       	andi	r31, 0x7F	; 127
    220c:	3f 2e       	mov	r3, r31
    220e:	16 c0       	rjmp	.+44     	; 0x223c <vfprintf+0x188>
    2210:	28 01       	movw	r4, r16
    2212:	22 e0       	ldi	r18, 0x02	; 2
    2214:	42 0e       	add	r4, r18
    2216:	51 1c       	adc	r5, r1
    2218:	f8 01       	movw	r30, r16
    221a:	a0 80       	ld	r10, Z
    221c:	b1 80       	ldd	r11, Z+1	; 0x01
    221e:	36 fe       	sbrs	r3, 6
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <vfprintf+0x174>
    2222:	69 2d       	mov	r22, r9
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	02 c0       	rjmp	.+4      	; 0x222c <vfprintf+0x178>
    2228:	6f ef       	ldi	r22, 0xFF	; 255
    222a:	7f ef       	ldi	r23, 0xFF	; 255
    222c:	c5 01       	movw	r24, r10
    222e:	0e 94 6d 14 	call	0x28da	; 0x28da <strnlen_P>
    2232:	4c 01       	movw	r8, r24
    2234:	f3 2d       	mov	r31, r3
    2236:	f0 68       	ori	r31, 0x80	; 128
    2238:	3f 2e       	mov	r3, r31
    223a:	82 01       	movw	r16, r4
    223c:	33 fc       	sbrc	r3, 3
    223e:	1b c0       	rjmp	.+54     	; 0x2276 <vfprintf+0x1c2>
    2240:	82 2d       	mov	r24, r2
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	88 16       	cp	r8, r24
    2246:	99 06       	cpc	r9, r25
    2248:	b0 f4       	brcc	.+44     	; 0x2276 <vfprintf+0x1c2>
    224a:	b6 01       	movw	r22, r12
    224c:	80 e2       	ldi	r24, 0x20	; 32
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 83 14 	call	0x2906	; 0x2906 <fputc>
    2254:	2a 94       	dec	r2
    2256:	f4 cf       	rjmp	.-24     	; 0x2240 <vfprintf+0x18c>
    2258:	f5 01       	movw	r30, r10
    225a:	37 fc       	sbrc	r3, 7
    225c:	85 91       	lpm	r24, Z+
    225e:	37 fe       	sbrs	r3, 7
    2260:	81 91       	ld	r24, Z+
    2262:	5f 01       	movw	r10, r30
    2264:	b6 01       	movw	r22, r12
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	0e 94 83 14 	call	0x2906	; 0x2906 <fputc>
    226c:	21 10       	cpse	r2, r1
    226e:	2a 94       	dec	r2
    2270:	21 e0       	ldi	r18, 0x01	; 1
    2272:	82 1a       	sub	r8, r18
    2274:	91 08       	sbc	r9, r1
    2276:	81 14       	cp	r8, r1
    2278:	91 04       	cpc	r9, r1
    227a:	71 f7       	brne	.-36     	; 0x2258 <vfprintf+0x1a4>
    227c:	e8 c0       	rjmp	.+464    	; 0x244e <vfprintf+0x39a>
    227e:	84 36       	cpi	r24, 0x64	; 100
    2280:	11 f0       	breq	.+4      	; 0x2286 <vfprintf+0x1d2>
    2282:	89 36       	cpi	r24, 0x69	; 105
    2284:	41 f5       	brne	.+80     	; 0x22d6 <vfprintf+0x222>
    2286:	f8 01       	movw	r30, r16
    2288:	37 fe       	sbrs	r3, 7
    228a:	07 c0       	rjmp	.+14     	; 0x229a <vfprintf+0x1e6>
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	0c 5f       	subi	r16, 0xFC	; 252
    2296:	1f 4f       	sbci	r17, 0xFF	; 255
    2298:	08 c0       	rjmp	.+16     	; 0x22aa <vfprintf+0x1f6>
    229a:	60 81       	ld	r22, Z
    229c:	71 81       	ldd	r23, Z+1	; 0x01
    229e:	07 2e       	mov	r0, r23
    22a0:	00 0c       	add	r0, r0
    22a2:	88 0b       	sbc	r24, r24
    22a4:	99 0b       	sbc	r25, r25
    22a6:	0e 5f       	subi	r16, 0xFE	; 254
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	f3 2d       	mov	r31, r3
    22ac:	ff 76       	andi	r31, 0x6F	; 111
    22ae:	3f 2e       	mov	r3, r31
    22b0:	97 ff       	sbrs	r25, 7
    22b2:	09 c0       	rjmp	.+18     	; 0x22c6 <vfprintf+0x212>
    22b4:	90 95       	com	r25
    22b6:	80 95       	com	r24
    22b8:	70 95       	com	r23
    22ba:	61 95       	neg	r22
    22bc:	7f 4f       	sbci	r23, 0xFF	; 255
    22be:	8f 4f       	sbci	r24, 0xFF	; 255
    22c0:	9f 4f       	sbci	r25, 0xFF	; 255
    22c2:	f0 68       	ori	r31, 0x80	; 128
    22c4:	3f 2e       	mov	r3, r31
    22c6:	2a e0       	ldi	r18, 0x0A	; 10
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	a3 01       	movw	r20, r6
    22cc:	0e 94 bf 14 	call	0x297e	; 0x297e <__ultoa_invert>
    22d0:	88 2e       	mov	r8, r24
    22d2:	86 18       	sub	r8, r6
    22d4:	45 c0       	rjmp	.+138    	; 0x2360 <vfprintf+0x2ac>
    22d6:	85 37       	cpi	r24, 0x75	; 117
    22d8:	31 f4       	brne	.+12     	; 0x22e6 <vfprintf+0x232>
    22da:	23 2d       	mov	r18, r3
    22dc:	2f 7e       	andi	r18, 0xEF	; 239
    22de:	b2 2e       	mov	r11, r18
    22e0:	2a e0       	ldi	r18, 0x0A	; 10
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	25 c0       	rjmp	.+74     	; 0x2330 <vfprintf+0x27c>
    22e6:	93 2d       	mov	r25, r3
    22e8:	99 7f       	andi	r25, 0xF9	; 249
    22ea:	b9 2e       	mov	r11, r25
    22ec:	8f 36       	cpi	r24, 0x6F	; 111
    22ee:	c1 f0       	breq	.+48     	; 0x2320 <vfprintf+0x26c>
    22f0:	18 f4       	brcc	.+6      	; 0x22f8 <vfprintf+0x244>
    22f2:	88 35       	cpi	r24, 0x58	; 88
    22f4:	79 f0       	breq	.+30     	; 0x2314 <vfprintf+0x260>
    22f6:	b5 c0       	rjmp	.+362    	; 0x2462 <vfprintf+0x3ae>
    22f8:	80 37       	cpi	r24, 0x70	; 112
    22fa:	19 f0       	breq	.+6      	; 0x2302 <vfprintf+0x24e>
    22fc:	88 37       	cpi	r24, 0x78	; 120
    22fe:	21 f0       	breq	.+8      	; 0x2308 <vfprintf+0x254>
    2300:	b0 c0       	rjmp	.+352    	; 0x2462 <vfprintf+0x3ae>
    2302:	e9 2f       	mov	r30, r25
    2304:	e0 61       	ori	r30, 0x10	; 16
    2306:	be 2e       	mov	r11, r30
    2308:	b4 fe       	sbrs	r11, 4
    230a:	0d c0       	rjmp	.+26     	; 0x2326 <vfprintf+0x272>
    230c:	fb 2d       	mov	r31, r11
    230e:	f4 60       	ori	r31, 0x04	; 4
    2310:	bf 2e       	mov	r11, r31
    2312:	09 c0       	rjmp	.+18     	; 0x2326 <vfprintf+0x272>
    2314:	34 fe       	sbrs	r3, 4
    2316:	0a c0       	rjmp	.+20     	; 0x232c <vfprintf+0x278>
    2318:	29 2f       	mov	r18, r25
    231a:	26 60       	ori	r18, 0x06	; 6
    231c:	b2 2e       	mov	r11, r18
    231e:	06 c0       	rjmp	.+12     	; 0x232c <vfprintf+0x278>
    2320:	28 e0       	ldi	r18, 0x08	; 8
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	05 c0       	rjmp	.+10     	; 0x2330 <vfprintf+0x27c>
    2326:	20 e1       	ldi	r18, 0x10	; 16
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <vfprintf+0x27c>
    232c:	20 e1       	ldi	r18, 0x10	; 16
    232e:	32 e0       	ldi	r19, 0x02	; 2
    2330:	f8 01       	movw	r30, r16
    2332:	b7 fe       	sbrs	r11, 7
    2334:	07 c0       	rjmp	.+14     	; 0x2344 <vfprintf+0x290>
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	0c 5f       	subi	r16, 0xFC	; 252
    2340:	1f 4f       	sbci	r17, 0xFF	; 255
    2342:	06 c0       	rjmp	.+12     	; 0x2350 <vfprintf+0x29c>
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	0e 5f       	subi	r16, 0xFE	; 254
    234e:	1f 4f       	sbci	r17, 0xFF	; 255
    2350:	a3 01       	movw	r20, r6
    2352:	0e 94 bf 14 	call	0x297e	; 0x297e <__ultoa_invert>
    2356:	88 2e       	mov	r8, r24
    2358:	86 18       	sub	r8, r6
    235a:	fb 2d       	mov	r31, r11
    235c:	ff 77       	andi	r31, 0x7F	; 127
    235e:	3f 2e       	mov	r3, r31
    2360:	36 fe       	sbrs	r3, 6
    2362:	0d c0       	rjmp	.+26     	; 0x237e <vfprintf+0x2ca>
    2364:	23 2d       	mov	r18, r3
    2366:	2e 7f       	andi	r18, 0xFE	; 254
    2368:	a2 2e       	mov	r10, r18
    236a:	89 14       	cp	r8, r9
    236c:	58 f4       	brcc	.+22     	; 0x2384 <vfprintf+0x2d0>
    236e:	34 fe       	sbrs	r3, 4
    2370:	0b c0       	rjmp	.+22     	; 0x2388 <vfprintf+0x2d4>
    2372:	32 fc       	sbrc	r3, 2
    2374:	09 c0       	rjmp	.+18     	; 0x2388 <vfprintf+0x2d4>
    2376:	83 2d       	mov	r24, r3
    2378:	8e 7e       	andi	r24, 0xEE	; 238
    237a:	a8 2e       	mov	r10, r24
    237c:	05 c0       	rjmp	.+10     	; 0x2388 <vfprintf+0x2d4>
    237e:	b8 2c       	mov	r11, r8
    2380:	a3 2c       	mov	r10, r3
    2382:	03 c0       	rjmp	.+6      	; 0x238a <vfprintf+0x2d6>
    2384:	b8 2c       	mov	r11, r8
    2386:	01 c0       	rjmp	.+2      	; 0x238a <vfprintf+0x2d6>
    2388:	b9 2c       	mov	r11, r9
    238a:	a4 fe       	sbrs	r10, 4
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <vfprintf+0x2f8>
    238e:	fe 01       	movw	r30, r28
    2390:	e8 0d       	add	r30, r8
    2392:	f1 1d       	adc	r31, r1
    2394:	80 81       	ld	r24, Z
    2396:	80 33       	cpi	r24, 0x30	; 48
    2398:	21 f4       	brne	.+8      	; 0x23a2 <vfprintf+0x2ee>
    239a:	9a 2d       	mov	r25, r10
    239c:	99 7e       	andi	r25, 0xE9	; 233
    239e:	a9 2e       	mov	r10, r25
    23a0:	09 c0       	rjmp	.+18     	; 0x23b4 <vfprintf+0x300>
    23a2:	a2 fe       	sbrs	r10, 2
    23a4:	06 c0       	rjmp	.+12     	; 0x23b2 <vfprintf+0x2fe>
    23a6:	b3 94       	inc	r11
    23a8:	b3 94       	inc	r11
    23aa:	04 c0       	rjmp	.+8      	; 0x23b4 <vfprintf+0x300>
    23ac:	8a 2d       	mov	r24, r10
    23ae:	86 78       	andi	r24, 0x86	; 134
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <vfprintf+0x300>
    23b2:	b3 94       	inc	r11
    23b4:	a3 fc       	sbrc	r10, 3
    23b6:	11 c0       	rjmp	.+34     	; 0x23da <vfprintf+0x326>
    23b8:	a0 fe       	sbrs	r10, 0
    23ba:	06 c0       	rjmp	.+12     	; 0x23c8 <vfprintf+0x314>
    23bc:	b2 14       	cp	r11, r2
    23be:	88 f4       	brcc	.+34     	; 0x23e2 <vfprintf+0x32e>
    23c0:	28 0c       	add	r2, r8
    23c2:	92 2c       	mov	r9, r2
    23c4:	9b 18       	sub	r9, r11
    23c6:	0e c0       	rjmp	.+28     	; 0x23e4 <vfprintf+0x330>
    23c8:	b2 14       	cp	r11, r2
    23ca:	60 f4       	brcc	.+24     	; 0x23e4 <vfprintf+0x330>
    23cc:	b6 01       	movw	r22, r12
    23ce:	80 e2       	ldi	r24, 0x20	; 32
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 83 14 	call	0x2906	; 0x2906 <fputc>
    23d6:	b3 94       	inc	r11
    23d8:	f7 cf       	rjmp	.-18     	; 0x23c8 <vfprintf+0x314>
    23da:	b2 14       	cp	r11, r2
    23dc:	18 f4       	brcc	.+6      	; 0x23e4 <vfprintf+0x330>
    23de:	2b 18       	sub	r2, r11
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <vfprintf+0x332>
    23e2:	98 2c       	mov	r9, r8
    23e4:	21 2c       	mov	r2, r1
    23e6:	a4 fe       	sbrs	r10, 4
    23e8:	10 c0       	rjmp	.+32     	; 0x240a <vfprintf+0x356>
    23ea:	b6 01       	movw	r22, r12
    23ec:	80 e3       	ldi	r24, 0x30	; 48
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e 94 83 14 	call	0x2906	; 0x2906 <fputc>
    23f4:	a2 fe       	sbrs	r10, 2
    23f6:	17 c0       	rjmp	.+46     	; 0x2426 <vfprintf+0x372>
    23f8:	a1 fc       	sbrc	r10, 1
    23fa:	03 c0       	rjmp	.+6      	; 0x2402 <vfprintf+0x34e>
    23fc:	88 e7       	ldi	r24, 0x78	; 120
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <vfprintf+0x352>
    2402:	88 e5       	ldi	r24, 0x58	; 88
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	b6 01       	movw	r22, r12
    2408:	0c c0       	rjmp	.+24     	; 0x2422 <vfprintf+0x36e>
    240a:	8a 2d       	mov	r24, r10
    240c:	86 78       	andi	r24, 0x86	; 134
    240e:	59 f0       	breq	.+22     	; 0x2426 <vfprintf+0x372>
    2410:	a1 fe       	sbrs	r10, 1
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <vfprintf+0x364>
    2414:	8b e2       	ldi	r24, 0x2B	; 43
    2416:	01 c0       	rjmp	.+2      	; 0x241a <vfprintf+0x366>
    2418:	80 e2       	ldi	r24, 0x20	; 32
    241a:	a7 fc       	sbrc	r10, 7
    241c:	8d e2       	ldi	r24, 0x2D	; 45
    241e:	b6 01       	movw	r22, r12
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 83 14 	call	0x2906	; 0x2906 <fputc>
    2426:	89 14       	cp	r8, r9
    2428:	38 f4       	brcc	.+14     	; 0x2438 <vfprintf+0x384>
    242a:	b6 01       	movw	r22, r12
    242c:	80 e3       	ldi	r24, 0x30	; 48
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	0e 94 83 14 	call	0x2906	; 0x2906 <fputc>
    2434:	9a 94       	dec	r9
    2436:	f7 cf       	rjmp	.-18     	; 0x2426 <vfprintf+0x372>
    2438:	8a 94       	dec	r8
    243a:	f3 01       	movw	r30, r6
    243c:	e8 0d       	add	r30, r8
    243e:	f1 1d       	adc	r31, r1
    2440:	80 81       	ld	r24, Z
    2442:	b6 01       	movw	r22, r12
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	0e 94 83 14 	call	0x2906	; 0x2906 <fputc>
    244a:	81 10       	cpse	r8, r1
    244c:	f5 cf       	rjmp	.-22     	; 0x2438 <vfprintf+0x384>
    244e:	22 20       	and	r2, r2
    2450:	09 f4       	brne	.+2      	; 0x2454 <vfprintf+0x3a0>
    2452:	42 ce       	rjmp	.-892    	; 0x20d8 <vfprintf+0x24>
    2454:	b6 01       	movw	r22, r12
    2456:	80 e2       	ldi	r24, 0x20	; 32
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 83 14 	call	0x2906	; 0x2906 <fputc>
    245e:	2a 94       	dec	r2
    2460:	f6 cf       	rjmp	.-20     	; 0x244e <vfprintf+0x39a>
    2462:	f6 01       	movw	r30, r12
    2464:	86 81       	ldd	r24, Z+6	; 0x06
    2466:	97 81       	ldd	r25, Z+7	; 0x07
    2468:	02 c0       	rjmp	.+4      	; 0x246e <vfprintf+0x3ba>
    246a:	8f ef       	ldi	r24, 0xFF	; 255
    246c:	9f ef       	ldi	r25, 0xFF	; 255
    246e:	2b 96       	adiw	r28, 0x0b	; 11
    2470:	e2 e1       	ldi	r30, 0x12	; 18
    2472:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__epilogue_restores__>

00002476 <dtoa_prf>:
    2476:	a9 e0       	ldi	r26, 0x09	; 9
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e1 e4       	ldi	r30, 0x41	; 65
    247c:	f2 e1       	ldi	r31, 0x12	; 18
    247e:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__prologue_saves__+0xc>
    2482:	6a 01       	movw	r12, r20
    2484:	12 2f       	mov	r17, r18
    2486:	b0 2e       	mov	r11, r16
    2488:	2b e3       	ldi	r18, 0x3B	; 59
    248a:	20 17       	cp	r18, r16
    248c:	20 f0       	brcs	.+8      	; 0x2496 <dtoa_prf+0x20>
    248e:	ff 24       	eor	r15, r15
    2490:	f3 94       	inc	r15
    2492:	f0 0e       	add	r15, r16
    2494:	02 c0       	rjmp	.+4      	; 0x249a <dtoa_prf+0x24>
    2496:	2c e3       	ldi	r18, 0x3C	; 60
    2498:	f2 2e       	mov	r15, r18
    249a:	0f 2d       	mov	r16, r15
    249c:	27 e0       	ldi	r18, 0x07	; 7
    249e:	ae 01       	movw	r20, r28
    24a0:	4f 5f       	subi	r20, 0xFF	; 255
    24a2:	5f 4f       	sbci	r21, 0xFF	; 255
    24a4:	0e 94 95 13 	call	0x272a	; 0x272a <__ftoa_engine>
    24a8:	bc 01       	movw	r22, r24
    24aa:	49 81       	ldd	r20, Y+1	; 0x01
    24ac:	84 2f       	mov	r24, r20
    24ae:	89 70       	andi	r24, 0x09	; 9
    24b0:	81 30       	cpi	r24, 0x01	; 1
    24b2:	31 f0       	breq	.+12     	; 0x24c0 <dtoa_prf+0x4a>
    24b4:	e1 fc       	sbrc	r14, 1
    24b6:	06 c0       	rjmp	.+12     	; 0x24c4 <dtoa_prf+0x4e>
    24b8:	e0 fe       	sbrs	r14, 0
    24ba:	06 c0       	rjmp	.+12     	; 0x24c8 <dtoa_prf+0x52>
    24bc:	90 e2       	ldi	r25, 0x20	; 32
    24be:	05 c0       	rjmp	.+10     	; 0x24ca <dtoa_prf+0x54>
    24c0:	9d e2       	ldi	r25, 0x2D	; 45
    24c2:	03 c0       	rjmp	.+6      	; 0x24ca <dtoa_prf+0x54>
    24c4:	9b e2       	ldi	r25, 0x2B	; 43
    24c6:	01 c0       	rjmp	.+2      	; 0x24ca <dtoa_prf+0x54>
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	5e 2d       	mov	r21, r14
    24cc:	50 71       	andi	r21, 0x10	; 16
    24ce:	43 ff       	sbrs	r20, 3
    24d0:	3c c0       	rjmp	.+120    	; 0x254a <dtoa_prf+0xd4>
    24d2:	91 11       	cpse	r25, r1
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <dtoa_prf+0x64>
    24d6:	83 e0       	ldi	r24, 0x03	; 3
    24d8:	01 c0       	rjmp	.+2      	; 0x24dc <dtoa_prf+0x66>
    24da:	84 e0       	ldi	r24, 0x04	; 4
    24dc:	81 17       	cp	r24, r17
    24de:	18 f4       	brcc	.+6      	; 0x24e6 <dtoa_prf+0x70>
    24e0:	21 2f       	mov	r18, r17
    24e2:	28 1b       	sub	r18, r24
    24e4:	01 c0       	rjmp	.+2      	; 0x24e8 <dtoa_prf+0x72>
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	51 11       	cpse	r21, r1
    24ea:	0b c0       	rjmp	.+22     	; 0x2502 <dtoa_prf+0x8c>
    24ec:	f6 01       	movw	r30, r12
    24ee:	82 2f       	mov	r24, r18
    24f0:	30 e2       	ldi	r19, 0x20	; 32
    24f2:	88 23       	and	r24, r24
    24f4:	19 f0       	breq	.+6      	; 0x24fc <dtoa_prf+0x86>
    24f6:	31 93       	st	Z+, r19
    24f8:	81 50       	subi	r24, 0x01	; 1
    24fa:	fb cf       	rjmp	.-10     	; 0x24f2 <dtoa_prf+0x7c>
    24fc:	c2 0e       	add	r12, r18
    24fe:	d1 1c       	adc	r13, r1
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	99 23       	and	r25, r25
    2504:	29 f0       	breq	.+10     	; 0x2510 <dtoa_prf+0x9a>
    2506:	d6 01       	movw	r26, r12
    2508:	9c 93       	st	X, r25
    250a:	f6 01       	movw	r30, r12
    250c:	31 96       	adiw	r30, 0x01	; 1
    250e:	6f 01       	movw	r12, r30
    2510:	c6 01       	movw	r24, r12
    2512:	03 96       	adiw	r24, 0x03	; 3
    2514:	e2 fe       	sbrs	r14, 2
    2516:	0a c0       	rjmp	.+20     	; 0x252c <dtoa_prf+0xb6>
    2518:	3e e4       	ldi	r19, 0x4E	; 78
    251a:	d6 01       	movw	r26, r12
    251c:	3c 93       	st	X, r19
    251e:	41 e4       	ldi	r20, 0x41	; 65
    2520:	11 96       	adiw	r26, 0x01	; 1
    2522:	4c 93       	st	X, r20
    2524:	11 97       	sbiw	r26, 0x01	; 1
    2526:	12 96       	adiw	r26, 0x02	; 2
    2528:	3c 93       	st	X, r19
    252a:	06 c0       	rjmp	.+12     	; 0x2538 <dtoa_prf+0xc2>
    252c:	3e e6       	ldi	r19, 0x6E	; 110
    252e:	f6 01       	movw	r30, r12
    2530:	30 83       	st	Z, r19
    2532:	41 e6       	ldi	r20, 0x61	; 97
    2534:	41 83       	std	Z+1, r20	; 0x01
    2536:	32 83       	std	Z+2, r19	; 0x02
    2538:	fc 01       	movw	r30, r24
    253a:	32 2f       	mov	r19, r18
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	33 23       	and	r19, r19
    2540:	09 f4       	brne	.+2      	; 0x2544 <dtoa_prf+0xce>
    2542:	42 c0       	rjmp	.+132    	; 0x25c8 <dtoa_prf+0x152>
    2544:	41 93       	st	Z+, r20
    2546:	31 50       	subi	r19, 0x01	; 1
    2548:	fa cf       	rjmp	.-12     	; 0x253e <dtoa_prf+0xc8>
    254a:	42 ff       	sbrs	r20, 2
    254c:	44 c0       	rjmp	.+136    	; 0x25d6 <dtoa_prf+0x160>
    254e:	91 11       	cpse	r25, r1
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <dtoa_prf+0xe0>
    2552:	83 e0       	ldi	r24, 0x03	; 3
    2554:	01 c0       	rjmp	.+2      	; 0x2558 <dtoa_prf+0xe2>
    2556:	84 e0       	ldi	r24, 0x04	; 4
    2558:	81 17       	cp	r24, r17
    255a:	18 f4       	brcc	.+6      	; 0x2562 <dtoa_prf+0xec>
    255c:	21 2f       	mov	r18, r17
    255e:	28 1b       	sub	r18, r24
    2560:	01 c0       	rjmp	.+2      	; 0x2564 <dtoa_prf+0xee>
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	51 11       	cpse	r21, r1
    2566:	0b c0       	rjmp	.+22     	; 0x257e <dtoa_prf+0x108>
    2568:	f6 01       	movw	r30, r12
    256a:	82 2f       	mov	r24, r18
    256c:	30 e2       	ldi	r19, 0x20	; 32
    256e:	88 23       	and	r24, r24
    2570:	19 f0       	breq	.+6      	; 0x2578 <dtoa_prf+0x102>
    2572:	31 93       	st	Z+, r19
    2574:	81 50       	subi	r24, 0x01	; 1
    2576:	fb cf       	rjmp	.-10     	; 0x256e <dtoa_prf+0xf8>
    2578:	c2 0e       	add	r12, r18
    257a:	d1 1c       	adc	r13, r1
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	99 23       	and	r25, r25
    2580:	29 f0       	breq	.+10     	; 0x258c <dtoa_prf+0x116>
    2582:	d6 01       	movw	r26, r12
    2584:	9c 93       	st	X, r25
    2586:	f6 01       	movw	r30, r12
    2588:	31 96       	adiw	r30, 0x01	; 1
    258a:	6f 01       	movw	r12, r30
    258c:	c6 01       	movw	r24, r12
    258e:	03 96       	adiw	r24, 0x03	; 3
    2590:	e2 fe       	sbrs	r14, 2
    2592:	0b c0       	rjmp	.+22     	; 0x25aa <dtoa_prf+0x134>
    2594:	39 e4       	ldi	r19, 0x49	; 73
    2596:	d6 01       	movw	r26, r12
    2598:	3c 93       	st	X, r19
    259a:	3e e4       	ldi	r19, 0x4E	; 78
    259c:	11 96       	adiw	r26, 0x01	; 1
    259e:	3c 93       	st	X, r19
    25a0:	11 97       	sbiw	r26, 0x01	; 1
    25a2:	36 e4       	ldi	r19, 0x46	; 70
    25a4:	12 96       	adiw	r26, 0x02	; 2
    25a6:	3c 93       	st	X, r19
    25a8:	07 c0       	rjmp	.+14     	; 0x25b8 <dtoa_prf+0x142>
    25aa:	39 e6       	ldi	r19, 0x69	; 105
    25ac:	f6 01       	movw	r30, r12
    25ae:	30 83       	st	Z, r19
    25b0:	3e e6       	ldi	r19, 0x6E	; 110
    25b2:	31 83       	std	Z+1, r19	; 0x01
    25b4:	36 e6       	ldi	r19, 0x66	; 102
    25b6:	32 83       	std	Z+2, r19	; 0x02
    25b8:	fc 01       	movw	r30, r24
    25ba:	32 2f       	mov	r19, r18
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	33 23       	and	r19, r19
    25c0:	19 f0       	breq	.+6      	; 0x25c8 <dtoa_prf+0x152>
    25c2:	41 93       	st	Z+, r20
    25c4:	31 50       	subi	r19, 0x01	; 1
    25c6:	fb cf       	rjmp	.-10     	; 0x25be <dtoa_prf+0x148>
    25c8:	fc 01       	movw	r30, r24
    25ca:	e2 0f       	add	r30, r18
    25cc:	f1 1d       	adc	r31, r1
    25ce:	10 82       	st	Z, r1
    25d0:	8e ef       	ldi	r24, 0xFE	; 254
    25d2:	9f ef       	ldi	r25, 0xFF	; 255
    25d4:	a6 c0       	rjmp	.+332    	; 0x2722 <dtoa_prf+0x2ac>
    25d6:	21 e0       	ldi	r18, 0x01	; 1
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	91 11       	cpse	r25, r1
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <dtoa_prf+0x16c>
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	16 16       	cp	r1, r22
    25e4:	17 06       	cpc	r1, r23
    25e6:	1c f4       	brge	.+6      	; 0x25ee <dtoa_prf+0x178>
    25e8:	fb 01       	movw	r30, r22
    25ea:	31 96       	adiw	r30, 0x01	; 1
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <dtoa_prf+0x17c>
    25ee:	e1 e0       	ldi	r30, 0x01	; 1
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	2e 0f       	add	r18, r30
    25f4:	3f 1f       	adc	r19, r31
    25f6:	bb 20       	and	r11, r11
    25f8:	21 f0       	breq	.+8      	; 0x2602 <dtoa_prf+0x18c>
    25fa:	eb 2d       	mov	r30, r11
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	31 96       	adiw	r30, 0x01	; 1
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <dtoa_prf+0x190>
    2602:	e0 e0       	ldi	r30, 0x00	; 0
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	2e 0f       	add	r18, r30
    2608:	3f 1f       	adc	r19, r31
    260a:	e1 2f       	mov	r30, r17
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	2e 17       	cp	r18, r30
    2610:	3f 07       	cpc	r19, r31
    2612:	1c f4       	brge	.+6      	; 0x261a <dtoa_prf+0x1a4>
    2614:	12 1b       	sub	r17, r18
    2616:	21 2f       	mov	r18, r17
    2618:	01 c0       	rjmp	.+2      	; 0x261c <dtoa_prf+0x1a6>
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	8e 2d       	mov	r24, r14
    261e:	88 71       	andi	r24, 0x18	; 24
    2620:	59 f4       	brne	.+22     	; 0x2638 <dtoa_prf+0x1c2>
    2622:	f6 01       	movw	r30, r12
    2624:	82 2f       	mov	r24, r18
    2626:	30 e2       	ldi	r19, 0x20	; 32
    2628:	88 23       	and	r24, r24
    262a:	19 f0       	breq	.+6      	; 0x2632 <dtoa_prf+0x1bc>
    262c:	31 93       	st	Z+, r19
    262e:	81 50       	subi	r24, 0x01	; 1
    2630:	fb cf       	rjmp	.-10     	; 0x2628 <dtoa_prf+0x1b2>
    2632:	c2 0e       	add	r12, r18
    2634:	d1 1c       	adc	r13, r1
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	99 23       	and	r25, r25
    263a:	29 f0       	breq	.+10     	; 0x2646 <dtoa_prf+0x1d0>
    263c:	d6 01       	movw	r26, r12
    263e:	9c 93       	st	X, r25
    2640:	f6 01       	movw	r30, r12
    2642:	31 96       	adiw	r30, 0x01	; 1
    2644:	6f 01       	movw	r12, r30
    2646:	51 11       	cpse	r21, r1
    2648:	0b c0       	rjmp	.+22     	; 0x2660 <dtoa_prf+0x1ea>
    264a:	f6 01       	movw	r30, r12
    264c:	82 2f       	mov	r24, r18
    264e:	90 e3       	ldi	r25, 0x30	; 48
    2650:	88 23       	and	r24, r24
    2652:	19 f0       	breq	.+6      	; 0x265a <dtoa_prf+0x1e4>
    2654:	91 93       	st	Z+, r25
    2656:	81 50       	subi	r24, 0x01	; 1
    2658:	fb cf       	rjmp	.-10     	; 0x2650 <dtoa_prf+0x1da>
    265a:	c2 0e       	add	r12, r18
    265c:	d1 1c       	adc	r13, r1
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	0f 2d       	mov	r16, r15
    2662:	06 0f       	add	r16, r22
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	34 2f       	mov	r19, r20
    2668:	30 71       	andi	r19, 0x10	; 16
    266a:	44 ff       	sbrs	r20, 4
    266c:	03 c0       	rjmp	.+6      	; 0x2674 <dtoa_prf+0x1fe>
    266e:	91 33       	cpi	r25, 0x31	; 49
    2670:	09 f4       	brne	.+2      	; 0x2674 <dtoa_prf+0x1fe>
    2672:	01 50       	subi	r16, 0x01	; 1
    2674:	10 16       	cp	r1, r16
    2676:	24 f4       	brge	.+8      	; 0x2680 <dtoa_prf+0x20a>
    2678:	09 30       	cpi	r16, 0x09	; 9
    267a:	18 f0       	brcs	.+6      	; 0x2682 <dtoa_prf+0x20c>
    267c:	08 e0       	ldi	r16, 0x08	; 8
    267e:	01 c0       	rjmp	.+2      	; 0x2682 <dtoa_prf+0x20c>
    2680:	01 e0       	ldi	r16, 0x01	; 1
    2682:	ab 01       	movw	r20, r22
    2684:	77 ff       	sbrs	r23, 7
    2686:	02 c0       	rjmp	.+4      	; 0x268c <dtoa_prf+0x216>
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	fb 01       	movw	r30, r22
    268e:	e4 1b       	sub	r30, r20
    2690:	f5 0b       	sbc	r31, r21
    2692:	a1 e0       	ldi	r26, 0x01	; 1
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	ac 0f       	add	r26, r28
    2698:	bd 1f       	adc	r27, r29
    269a:	ea 0f       	add	r30, r26
    269c:	fb 1f       	adc	r31, r27
    269e:	8e e2       	ldi	r24, 0x2E	; 46
    26a0:	a8 2e       	mov	r10, r24
    26a2:	4b 01       	movw	r8, r22
    26a4:	80 1a       	sub	r8, r16
    26a6:	91 08       	sbc	r9, r1
    26a8:	0b 2d       	mov	r16, r11
    26aa:	10 e0       	ldi	r17, 0x00	; 0
    26ac:	11 95       	neg	r17
    26ae:	01 95       	neg	r16
    26b0:	11 09       	sbc	r17, r1
    26b2:	4f 3f       	cpi	r20, 0xFF	; 255
    26b4:	bf ef       	ldi	r27, 0xFF	; 255
    26b6:	5b 07       	cpc	r21, r27
    26b8:	21 f4       	brne	.+8      	; 0x26c2 <dtoa_prf+0x24c>
    26ba:	d6 01       	movw	r26, r12
    26bc:	ac 92       	st	X, r10
    26be:	11 96       	adiw	r26, 0x01	; 1
    26c0:	6d 01       	movw	r12, r26
    26c2:	64 17       	cp	r22, r20
    26c4:	75 07       	cpc	r23, r21
    26c6:	2c f0       	brlt	.+10     	; 0x26d2 <dtoa_prf+0x25c>
    26c8:	84 16       	cp	r8, r20
    26ca:	95 06       	cpc	r9, r21
    26cc:	14 f4       	brge	.+4      	; 0x26d2 <dtoa_prf+0x25c>
    26ce:	81 81       	ldd	r24, Z+1	; 0x01
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <dtoa_prf+0x25e>
    26d2:	80 e3       	ldi	r24, 0x30	; 48
    26d4:	41 50       	subi	r20, 0x01	; 1
    26d6:	51 09       	sbc	r21, r1
    26d8:	31 96       	adiw	r30, 0x01	; 1
    26da:	d6 01       	movw	r26, r12
    26dc:	11 96       	adiw	r26, 0x01	; 1
    26de:	7d 01       	movw	r14, r26
    26e0:	40 17       	cp	r20, r16
    26e2:	51 07       	cpc	r21, r17
    26e4:	24 f0       	brlt	.+8      	; 0x26ee <dtoa_prf+0x278>
    26e6:	d6 01       	movw	r26, r12
    26e8:	8c 93       	st	X, r24
    26ea:	67 01       	movw	r12, r14
    26ec:	e2 cf       	rjmp	.-60     	; 0x26b2 <dtoa_prf+0x23c>
    26ee:	64 17       	cp	r22, r20
    26f0:	75 07       	cpc	r23, r21
    26f2:	39 f4       	brne	.+14     	; 0x2702 <dtoa_prf+0x28c>
    26f4:	96 33       	cpi	r25, 0x36	; 54
    26f6:	20 f4       	brcc	.+8      	; 0x2700 <dtoa_prf+0x28a>
    26f8:	95 33       	cpi	r25, 0x35	; 53
    26fa:	19 f4       	brne	.+6      	; 0x2702 <dtoa_prf+0x28c>
    26fc:	31 11       	cpse	r19, r1
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <dtoa_prf+0x28c>
    2700:	81 e3       	ldi	r24, 0x31	; 49
    2702:	f6 01       	movw	r30, r12
    2704:	80 83       	st	Z, r24
    2706:	f7 01       	movw	r30, r14
    2708:	82 2f       	mov	r24, r18
    270a:	90 e2       	ldi	r25, 0x20	; 32
    270c:	88 23       	and	r24, r24
    270e:	19 f0       	breq	.+6      	; 0x2716 <dtoa_prf+0x2a0>
    2710:	91 93       	st	Z+, r25
    2712:	81 50       	subi	r24, 0x01	; 1
    2714:	fb cf       	rjmp	.-10     	; 0x270c <dtoa_prf+0x296>
    2716:	f7 01       	movw	r30, r14
    2718:	e2 0f       	add	r30, r18
    271a:	f1 1d       	adc	r31, r1
    271c:	10 82       	st	Z, r1
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	29 96       	adiw	r28, 0x09	; 9
    2724:	ec e0       	ldi	r30, 0x0C	; 12
    2726:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__epilogue_restores__+0xc>

0000272a <__ftoa_engine>:
    272a:	28 30       	cpi	r18, 0x08	; 8
    272c:	08 f0       	brcs	.+2      	; 0x2730 <__ftoa_engine+0x6>
    272e:	27 e0       	ldi	r18, 0x07	; 7
    2730:	33 27       	eor	r19, r19
    2732:	da 01       	movw	r26, r20
    2734:	99 0f       	add	r25, r25
    2736:	31 1d       	adc	r19, r1
    2738:	87 fd       	sbrc	r24, 7
    273a:	91 60       	ori	r25, 0x01	; 1
    273c:	00 96       	adiw	r24, 0x00	; 0
    273e:	61 05       	cpc	r22, r1
    2740:	71 05       	cpc	r23, r1
    2742:	39 f4       	brne	.+14     	; 0x2752 <__ftoa_engine+0x28>
    2744:	32 60       	ori	r19, 0x02	; 2
    2746:	2e 5f       	subi	r18, 0xFE	; 254
    2748:	3d 93       	st	X+, r19
    274a:	30 e3       	ldi	r19, 0x30	; 48
    274c:	2a 95       	dec	r18
    274e:	e1 f7       	brne	.-8      	; 0x2748 <__ftoa_engine+0x1e>
    2750:	08 95       	ret
    2752:	9f 3f       	cpi	r25, 0xFF	; 255
    2754:	30 f0       	brcs	.+12     	; 0x2762 <__ftoa_engine+0x38>
    2756:	80 38       	cpi	r24, 0x80	; 128
    2758:	71 05       	cpc	r23, r1
    275a:	61 05       	cpc	r22, r1
    275c:	09 f0       	breq	.+2      	; 0x2760 <__ftoa_engine+0x36>
    275e:	3c 5f       	subi	r19, 0xFC	; 252
    2760:	3c 5f       	subi	r19, 0xFC	; 252
    2762:	3d 93       	st	X+, r19
    2764:	91 30       	cpi	r25, 0x01	; 1
    2766:	08 f0       	brcs	.+2      	; 0x276a <__ftoa_engine+0x40>
    2768:	80 68       	ori	r24, 0x80	; 128
    276a:	91 1d       	adc	r25, r1
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	1f 93       	push	r17
    2772:	0f 93       	push	r16
    2774:	ff 92       	push	r15
    2776:	ef 92       	push	r14
    2778:	19 2f       	mov	r17, r25
    277a:	98 7f       	andi	r25, 0xF8	; 248
    277c:	96 95       	lsr	r25
    277e:	e9 2f       	mov	r30, r25
    2780:	96 95       	lsr	r25
    2782:	96 95       	lsr	r25
    2784:	e9 0f       	add	r30, r25
    2786:	ff 27       	eor	r31, r31
    2788:	ee 53       	subi	r30, 0x3E	; 62
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	99 27       	eor	r25, r25
    278e:	33 27       	eor	r19, r19
    2790:	ee 24       	eor	r14, r14
    2792:	ff 24       	eor	r15, r15
    2794:	a7 01       	movw	r20, r14
    2796:	e7 01       	movw	r28, r14
    2798:	05 90       	lpm	r0, Z+
    279a:	08 94       	sec
    279c:	07 94       	ror	r0
    279e:	28 f4       	brcc	.+10     	; 0x27aa <__ftoa_engine+0x80>
    27a0:	36 0f       	add	r19, r22
    27a2:	e7 1e       	adc	r14, r23
    27a4:	f8 1e       	adc	r15, r24
    27a6:	49 1f       	adc	r20, r25
    27a8:	51 1d       	adc	r21, r1
    27aa:	66 0f       	add	r22, r22
    27ac:	77 1f       	adc	r23, r23
    27ae:	88 1f       	adc	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	06 94       	lsr	r0
    27b4:	a1 f7       	brne	.-24     	; 0x279e <__ftoa_engine+0x74>
    27b6:	05 90       	lpm	r0, Z+
    27b8:	07 94       	ror	r0
    27ba:	28 f4       	brcc	.+10     	; 0x27c6 <__ftoa_engine+0x9c>
    27bc:	e7 0e       	add	r14, r23
    27be:	f8 1e       	adc	r15, r24
    27c0:	49 1f       	adc	r20, r25
    27c2:	56 1f       	adc	r21, r22
    27c4:	c1 1d       	adc	r28, r1
    27c6:	77 0f       	add	r23, r23
    27c8:	88 1f       	adc	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	66 1f       	adc	r22, r22
    27ce:	06 94       	lsr	r0
    27d0:	a1 f7       	brne	.-24     	; 0x27ba <__ftoa_engine+0x90>
    27d2:	05 90       	lpm	r0, Z+
    27d4:	07 94       	ror	r0
    27d6:	28 f4       	brcc	.+10     	; 0x27e2 <__ftoa_engine+0xb8>
    27d8:	f8 0e       	add	r15, r24
    27da:	49 1f       	adc	r20, r25
    27dc:	56 1f       	adc	r21, r22
    27de:	c7 1f       	adc	r28, r23
    27e0:	d1 1d       	adc	r29, r1
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	66 1f       	adc	r22, r22
    27e8:	77 1f       	adc	r23, r23
    27ea:	06 94       	lsr	r0
    27ec:	a1 f7       	brne	.-24     	; 0x27d6 <__ftoa_engine+0xac>
    27ee:	05 90       	lpm	r0, Z+
    27f0:	07 94       	ror	r0
    27f2:	20 f4       	brcc	.+8      	; 0x27fc <__ftoa_engine+0xd2>
    27f4:	49 0f       	add	r20, r25
    27f6:	56 1f       	adc	r21, r22
    27f8:	c7 1f       	adc	r28, r23
    27fa:	d8 1f       	adc	r29, r24
    27fc:	99 0f       	add	r25, r25
    27fe:	66 1f       	adc	r22, r22
    2800:	77 1f       	adc	r23, r23
    2802:	88 1f       	adc	r24, r24
    2804:	06 94       	lsr	r0
    2806:	a9 f7       	brne	.-22     	; 0x27f2 <__ftoa_engine+0xc8>
    2808:	84 91       	lpm	r24, Z
    280a:	10 95       	com	r17
    280c:	17 70       	andi	r17, 0x07	; 7
    280e:	41 f0       	breq	.+16     	; 0x2820 <__ftoa_engine+0xf6>
    2810:	d6 95       	lsr	r29
    2812:	c7 95       	ror	r28
    2814:	57 95       	ror	r21
    2816:	47 95       	ror	r20
    2818:	f7 94       	ror	r15
    281a:	e7 94       	ror	r14
    281c:	1a 95       	dec	r17
    281e:	c1 f7       	brne	.-16     	; 0x2810 <__ftoa_engine+0xe6>
    2820:	e8 e6       	ldi	r30, 0x68	; 104
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	68 94       	set
    2826:	15 90       	lpm	r1, Z+
    2828:	15 91       	lpm	r17, Z+
    282a:	35 91       	lpm	r19, Z+
    282c:	65 91       	lpm	r22, Z+
    282e:	95 91       	lpm	r25, Z+
    2830:	05 90       	lpm	r0, Z+
    2832:	7f e2       	ldi	r23, 0x2F	; 47
    2834:	73 95       	inc	r23
    2836:	e1 18       	sub	r14, r1
    2838:	f1 0a       	sbc	r15, r17
    283a:	43 0b       	sbc	r20, r19
    283c:	56 0b       	sbc	r21, r22
    283e:	c9 0b       	sbc	r28, r25
    2840:	d0 09       	sbc	r29, r0
    2842:	c0 f7       	brcc	.-16     	; 0x2834 <__ftoa_engine+0x10a>
    2844:	e1 0c       	add	r14, r1
    2846:	f1 1e       	adc	r15, r17
    2848:	43 1f       	adc	r20, r19
    284a:	56 1f       	adc	r21, r22
    284c:	c9 1f       	adc	r28, r25
    284e:	d0 1d       	adc	r29, r0
    2850:	7e f4       	brtc	.+30     	; 0x2870 <__ftoa_engine+0x146>
    2852:	70 33       	cpi	r23, 0x30	; 48
    2854:	11 f4       	brne	.+4      	; 0x285a <__ftoa_engine+0x130>
    2856:	8a 95       	dec	r24
    2858:	e6 cf       	rjmp	.-52     	; 0x2826 <__ftoa_engine+0xfc>
    285a:	e8 94       	clt
    285c:	01 50       	subi	r16, 0x01	; 1
    285e:	30 f0       	brcs	.+12     	; 0x286c <__ftoa_engine+0x142>
    2860:	08 0f       	add	r16, r24
    2862:	0a f4       	brpl	.+2      	; 0x2866 <__ftoa_engine+0x13c>
    2864:	00 27       	eor	r16, r16
    2866:	02 17       	cp	r16, r18
    2868:	08 f4       	brcc	.+2      	; 0x286c <__ftoa_engine+0x142>
    286a:	20 2f       	mov	r18, r16
    286c:	23 95       	inc	r18
    286e:	02 2f       	mov	r16, r18
    2870:	7a 33       	cpi	r23, 0x3A	; 58
    2872:	28 f0       	brcs	.+10     	; 0x287e <__ftoa_engine+0x154>
    2874:	79 e3       	ldi	r23, 0x39	; 57
    2876:	7d 93       	st	X+, r23
    2878:	2a 95       	dec	r18
    287a:	e9 f7       	brne	.-6      	; 0x2876 <__ftoa_engine+0x14c>
    287c:	10 c0       	rjmp	.+32     	; 0x289e <__ftoa_engine+0x174>
    287e:	7d 93       	st	X+, r23
    2880:	2a 95       	dec	r18
    2882:	89 f6       	brne	.-94     	; 0x2826 <__ftoa_engine+0xfc>
    2884:	06 94       	lsr	r0
    2886:	97 95       	ror	r25
    2888:	67 95       	ror	r22
    288a:	37 95       	ror	r19
    288c:	17 95       	ror	r17
    288e:	17 94       	ror	r1
    2890:	e1 18       	sub	r14, r1
    2892:	f1 0a       	sbc	r15, r17
    2894:	43 0b       	sbc	r20, r19
    2896:	56 0b       	sbc	r21, r22
    2898:	c9 0b       	sbc	r28, r25
    289a:	d0 09       	sbc	r29, r0
    289c:	98 f0       	brcs	.+38     	; 0x28c4 <__ftoa_engine+0x19a>
    289e:	23 95       	inc	r18
    28a0:	7e 91       	ld	r23, -X
    28a2:	73 95       	inc	r23
    28a4:	7a 33       	cpi	r23, 0x3A	; 58
    28a6:	08 f0       	brcs	.+2      	; 0x28aa <__ftoa_engine+0x180>
    28a8:	70 e3       	ldi	r23, 0x30	; 48
    28aa:	7c 93       	st	X, r23
    28ac:	20 13       	cpse	r18, r16
    28ae:	b8 f7       	brcc	.-18     	; 0x289e <__ftoa_engine+0x174>
    28b0:	7e 91       	ld	r23, -X
    28b2:	70 61       	ori	r23, 0x10	; 16
    28b4:	7d 93       	st	X+, r23
    28b6:	30 f0       	brcs	.+12     	; 0x28c4 <__ftoa_engine+0x19a>
    28b8:	83 95       	inc	r24
    28ba:	71 e3       	ldi	r23, 0x31	; 49
    28bc:	7d 93       	st	X+, r23
    28be:	70 e3       	ldi	r23, 0x30	; 48
    28c0:	2a 95       	dec	r18
    28c2:	e1 f7       	brne	.-8      	; 0x28bc <__ftoa_engine+0x192>
    28c4:	11 24       	eor	r1, r1
    28c6:	ef 90       	pop	r14
    28c8:	ff 90       	pop	r15
    28ca:	0f 91       	pop	r16
    28cc:	1f 91       	pop	r17
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	99 27       	eor	r25, r25
    28d4:	87 fd       	sbrc	r24, 7
    28d6:	90 95       	com	r25
    28d8:	08 95       	ret

000028da <strnlen_P>:
    28da:	fc 01       	movw	r30, r24
    28dc:	05 90       	lpm	r0, Z+
    28de:	61 50       	subi	r22, 0x01	; 1
    28e0:	70 40       	sbci	r23, 0x00	; 0
    28e2:	01 10       	cpse	r0, r1
    28e4:	d8 f7       	brcc	.-10     	; 0x28dc <strnlen_P+0x2>
    28e6:	80 95       	com	r24
    28e8:	90 95       	com	r25
    28ea:	8e 0f       	add	r24, r30
    28ec:	9f 1f       	adc	r25, r31
    28ee:	08 95       	ret

000028f0 <strnlen>:
    28f0:	fc 01       	movw	r30, r24
    28f2:	61 50       	subi	r22, 0x01	; 1
    28f4:	70 40       	sbci	r23, 0x00	; 0
    28f6:	01 90       	ld	r0, Z+
    28f8:	01 10       	cpse	r0, r1
    28fa:	d8 f7       	brcc	.-10     	; 0x28f2 <strnlen+0x2>
    28fc:	80 95       	com	r24
    28fe:	90 95       	com	r25
    2900:	8e 0f       	add	r24, r30
    2902:	9f 1f       	adc	r25, r31
    2904:	08 95       	ret

00002906 <fputc>:
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	fb 01       	movw	r30, r22
    2910:	23 81       	ldd	r18, Z+3	; 0x03
    2912:	21 fd       	sbrc	r18, 1
    2914:	03 c0       	rjmp	.+6      	; 0x291c <fputc+0x16>
    2916:	8f ef       	ldi	r24, 0xFF	; 255
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	2c c0       	rjmp	.+88     	; 0x2974 <fputc+0x6e>
    291c:	22 ff       	sbrs	r18, 2
    291e:	16 c0       	rjmp	.+44     	; 0x294c <fputc+0x46>
    2920:	46 81       	ldd	r20, Z+6	; 0x06
    2922:	57 81       	ldd	r21, Z+7	; 0x07
    2924:	24 81       	ldd	r18, Z+4	; 0x04
    2926:	35 81       	ldd	r19, Z+5	; 0x05
    2928:	42 17       	cp	r20, r18
    292a:	53 07       	cpc	r21, r19
    292c:	44 f4       	brge	.+16     	; 0x293e <fputc+0x38>
    292e:	a0 81       	ld	r26, Z
    2930:	b1 81       	ldd	r27, Z+1	; 0x01
    2932:	9d 01       	movw	r18, r26
    2934:	2f 5f       	subi	r18, 0xFF	; 255
    2936:	3f 4f       	sbci	r19, 0xFF	; 255
    2938:	31 83       	std	Z+1, r19	; 0x01
    293a:	20 83       	st	Z, r18
    293c:	8c 93       	st	X, r24
    293e:	26 81       	ldd	r18, Z+6	; 0x06
    2940:	37 81       	ldd	r19, Z+7	; 0x07
    2942:	2f 5f       	subi	r18, 0xFF	; 255
    2944:	3f 4f       	sbci	r19, 0xFF	; 255
    2946:	37 83       	std	Z+7, r19	; 0x07
    2948:	26 83       	std	Z+6, r18	; 0x06
    294a:	14 c0       	rjmp	.+40     	; 0x2974 <fputc+0x6e>
    294c:	8b 01       	movw	r16, r22
    294e:	ec 01       	movw	r28, r24
    2950:	fb 01       	movw	r30, r22
    2952:	00 84       	ldd	r0, Z+8	; 0x08
    2954:	f1 85       	ldd	r31, Z+9	; 0x09
    2956:	e0 2d       	mov	r30, r0
    2958:	09 95       	icall
    295a:	89 2b       	or	r24, r25
    295c:	e1 f6       	brne	.-72     	; 0x2916 <fputc+0x10>
    295e:	d8 01       	movw	r26, r16
    2960:	16 96       	adiw	r26, 0x06	; 6
    2962:	8d 91       	ld	r24, X+
    2964:	9c 91       	ld	r25, X
    2966:	17 97       	sbiw	r26, 0x07	; 7
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	17 96       	adiw	r26, 0x07	; 7
    296c:	9c 93       	st	X, r25
    296e:	8e 93       	st	-X, r24
    2970:	16 97       	sbiw	r26, 0x06	; 6
    2972:	ce 01       	movw	r24, r28
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	08 95       	ret

0000297e <__ultoa_invert>:
    297e:	fa 01       	movw	r30, r20
    2980:	aa 27       	eor	r26, r26
    2982:	28 30       	cpi	r18, 0x08	; 8
    2984:	51 f1       	breq	.+84     	; 0x29da <__ultoa_invert+0x5c>
    2986:	20 31       	cpi	r18, 0x10	; 16
    2988:	81 f1       	breq	.+96     	; 0x29ea <__ultoa_invert+0x6c>
    298a:	e8 94       	clt
    298c:	6f 93       	push	r22
    298e:	6e 7f       	andi	r22, 0xFE	; 254
    2990:	6e 5f       	subi	r22, 0xFE	; 254
    2992:	7f 4f       	sbci	r23, 0xFF	; 255
    2994:	8f 4f       	sbci	r24, 0xFF	; 255
    2996:	9f 4f       	sbci	r25, 0xFF	; 255
    2998:	af 4f       	sbci	r26, 0xFF	; 255
    299a:	b1 e0       	ldi	r27, 0x01	; 1
    299c:	3e d0       	rcall	.+124    	; 0x2a1a <__ultoa_invert+0x9c>
    299e:	b4 e0       	ldi	r27, 0x04	; 4
    29a0:	3c d0       	rcall	.+120    	; 0x2a1a <__ultoa_invert+0x9c>
    29a2:	67 0f       	add	r22, r23
    29a4:	78 1f       	adc	r23, r24
    29a6:	89 1f       	adc	r24, r25
    29a8:	9a 1f       	adc	r25, r26
    29aa:	a1 1d       	adc	r26, r1
    29ac:	68 0f       	add	r22, r24
    29ae:	79 1f       	adc	r23, r25
    29b0:	8a 1f       	adc	r24, r26
    29b2:	91 1d       	adc	r25, r1
    29b4:	a1 1d       	adc	r26, r1
    29b6:	6a 0f       	add	r22, r26
    29b8:	71 1d       	adc	r23, r1
    29ba:	81 1d       	adc	r24, r1
    29bc:	91 1d       	adc	r25, r1
    29be:	a1 1d       	adc	r26, r1
    29c0:	20 d0       	rcall	.+64     	; 0x2a02 <__ultoa_invert+0x84>
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <__ultoa_invert+0x48>
    29c4:	68 94       	set
    29c6:	3f 91       	pop	r19
    29c8:	2a e0       	ldi	r18, 0x0A	; 10
    29ca:	26 9f       	mul	r18, r22
    29cc:	11 24       	eor	r1, r1
    29ce:	30 19       	sub	r19, r0
    29d0:	30 5d       	subi	r19, 0xD0	; 208
    29d2:	31 93       	st	Z+, r19
    29d4:	de f6       	brtc	.-74     	; 0x298c <__ultoa_invert+0xe>
    29d6:	cf 01       	movw	r24, r30
    29d8:	08 95       	ret
    29da:	46 2f       	mov	r20, r22
    29dc:	47 70       	andi	r20, 0x07	; 7
    29de:	40 5d       	subi	r20, 0xD0	; 208
    29e0:	41 93       	st	Z+, r20
    29e2:	b3 e0       	ldi	r27, 0x03	; 3
    29e4:	0f d0       	rcall	.+30     	; 0x2a04 <__ultoa_invert+0x86>
    29e6:	c9 f7       	brne	.-14     	; 0x29da <__ultoa_invert+0x5c>
    29e8:	f6 cf       	rjmp	.-20     	; 0x29d6 <__ultoa_invert+0x58>
    29ea:	46 2f       	mov	r20, r22
    29ec:	4f 70       	andi	r20, 0x0F	; 15
    29ee:	40 5d       	subi	r20, 0xD0	; 208
    29f0:	4a 33       	cpi	r20, 0x3A	; 58
    29f2:	18 f0       	brcs	.+6      	; 0x29fa <__ultoa_invert+0x7c>
    29f4:	49 5d       	subi	r20, 0xD9	; 217
    29f6:	31 fd       	sbrc	r19, 1
    29f8:	40 52       	subi	r20, 0x20	; 32
    29fa:	41 93       	st	Z+, r20
    29fc:	02 d0       	rcall	.+4      	; 0x2a02 <__ultoa_invert+0x84>
    29fe:	a9 f7       	brne	.-22     	; 0x29ea <__ultoa_invert+0x6c>
    2a00:	ea cf       	rjmp	.-44     	; 0x29d6 <__ultoa_invert+0x58>
    2a02:	b4 e0       	ldi	r27, 0x04	; 4
    2a04:	a6 95       	lsr	r26
    2a06:	97 95       	ror	r25
    2a08:	87 95       	ror	r24
    2a0a:	77 95       	ror	r23
    2a0c:	67 95       	ror	r22
    2a0e:	ba 95       	dec	r27
    2a10:	c9 f7       	brne	.-14     	; 0x2a04 <__ultoa_invert+0x86>
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	61 05       	cpc	r22, r1
    2a16:	71 05       	cpc	r23, r1
    2a18:	08 95       	ret
    2a1a:	9b 01       	movw	r18, r22
    2a1c:	ac 01       	movw	r20, r24
    2a1e:	0a 2e       	mov	r0, r26
    2a20:	06 94       	lsr	r0
    2a22:	57 95       	ror	r21
    2a24:	47 95       	ror	r20
    2a26:	37 95       	ror	r19
    2a28:	27 95       	ror	r18
    2a2a:	ba 95       	dec	r27
    2a2c:	c9 f7       	brne	.-14     	; 0x2a20 <__ultoa_invert+0xa2>
    2a2e:	62 0f       	add	r22, r18
    2a30:	73 1f       	adc	r23, r19
    2a32:	84 1f       	adc	r24, r20
    2a34:	95 1f       	adc	r25, r21
    2a36:	a0 1d       	adc	r26, r0
    2a38:	08 95       	ret

00002a3a <__prologue_saves__>:
    2a3a:	2f 92       	push	r2
    2a3c:	3f 92       	push	r3
    2a3e:	4f 92       	push	r4
    2a40:	5f 92       	push	r5
    2a42:	6f 92       	push	r6
    2a44:	7f 92       	push	r7
    2a46:	8f 92       	push	r8
    2a48:	9f 92       	push	r9
    2a4a:	af 92       	push	r10
    2a4c:	bf 92       	push	r11
    2a4e:	cf 92       	push	r12
    2a50:	df 92       	push	r13
    2a52:	ef 92       	push	r14
    2a54:	ff 92       	push	r15
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	ca 1b       	sub	r28, r26
    2a64:	db 0b       	sbc	r29, r27
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	09 94       	ijmp

00002a72 <__epilogue_restores__>:
    2a72:	2a 88       	ldd	r2, Y+18	; 0x12
    2a74:	39 88       	ldd	r3, Y+17	; 0x11
    2a76:	48 88       	ldd	r4, Y+16	; 0x10
    2a78:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a80:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a82:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a84:	b9 84       	ldd	r11, Y+9	; 0x09
    2a86:	c8 84       	ldd	r12, Y+8	; 0x08
    2a88:	df 80       	ldd	r13, Y+7	; 0x07
    2a8a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a8c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a8e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a90:	1b 81       	ldd	r17, Y+3	; 0x03
    2a92:	aa 81       	ldd	r26, Y+2	; 0x02
    2a94:	b9 81       	ldd	r27, Y+1	; 0x01
    2a96:	ce 0f       	add	r28, r30
    2a98:	d1 1d       	adc	r29, r1
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	ed 01       	movw	r28, r26
    2aa6:	08 95       	ret

00002aa8 <_exit>:
    2aa8:	f8 94       	cli

00002aaa <__stop_program>:
    2aaa:	ff cf       	rjmp	.-2      	; 0x2aaa <__stop_program>
