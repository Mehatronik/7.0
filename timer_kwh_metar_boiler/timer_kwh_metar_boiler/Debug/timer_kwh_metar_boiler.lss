
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000fc6  0000105a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080012a  0080012a  00001084  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ec  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e09  00000000  00000000  0000364c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001340  00000000  00000000  00004455  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000594  00000000  00000000  00005798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000916  00000000  00000000  00005d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a23  00000000  00000000  00006642  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00008065  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 96 04 	jmp	0x92c	; 0x92c <__vector_20>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 35       	cpi	r26, 0x52	; 82
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 02 	call	0x576	; 0x576 <main>
  9e:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
  a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
  a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
  b2:	8e ee       	ldi	r24, 0xEE	; 238
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
  b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
  bc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
  c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	/*
	AD konverzija
	ISR okine kada je gotova konverzija
	*/
	
	PORTD |= 1<<PINB7;       //togle za osciloskop
  d4:	5f 9a       	sbi	0x0b, 7	; 11
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
  d6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
  da:	81 11       	cpse	r24, r1
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <__vector_21+0x2e>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <mereni_napon+0x1>
  ea:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <mereni_napon>
  ee:	0c c0       	rjmp	.+24     	; 0x108 <__vector_21+0x46>
	else if(ad_kanal == 1)
  f0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	41 f4       	brne	.+16     	; 0x108 <__vector_21+0x46>
		merena_struja = (uint16_t)ADC;
  f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  fc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 100:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <merena_struja+0x1>
 104:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 77       	andi	r24, 0x7F	; 127
 110:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 112:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
 11c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	10 f0       	brcs	.+4      	; 0x128 <__vector_21+0x66>
		ad_kanal = 0;
 124:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
 128:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 12c:	88 23       	and	r24, r24
 12e:	19 f0       	breq	.+6      	; 0x136 <__vector_21+0x74>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	39 f0       	breq	.+14     	; 0x142 <__vector_21+0x80>
 134:	0e c0       	rjmp	.+28     	; 0x152 <__vector_21+0x90>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
		break;
 140:	08 c0       	rjmp	.+16     	; 0x152 <__vector_21+0x90>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	80 83       	st	Z, r24
				ADMUX |= (0b1);
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 6c       	ori	r24, 0xC0	; 192
 15a:	80 83       	st	Z, r24
	
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us

	PORTD &= ~(1<<7);       //togle za osciloskop
 15c:	5f 98       	cbi	0x0b, 7	; 11
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
 170:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 174:	88 e4       	ldi	r24, 0x48	; 72
 176:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 17a:	08 95       	ret

0000017c <i2c_start_wait>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec eb       	ldi	r30, 0xBC	; 188
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	24 ea       	ldi	r18, 0xA4	; 164
 186:	a9 eb       	ldi	r26, 0xB9	; 185
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	cb eb       	ldi	r28, 0xBB	; 187
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	34 e8       	ldi	r19, 0x84	; 132
 190:	44 e9       	ldi	r20, 0x94	; 148
 192:	20 83       	st	Z, r18
 194:	90 81       	ld	r25, Z
 196:	99 23       	and	r25, r25
 198:	ec f7       	brge	.-6      	; 0x194 <i2c_start_wait+0x18>
 19a:	9c 91       	ld	r25, X
 19c:	98 7f       	andi	r25, 0xF8	; 248
 19e:	98 30       	cpi	r25, 0x08	; 8
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <i2c_start_wait+0x2a>
 1a2:	90 31       	cpi	r25, 0x10	; 16
 1a4:	b1 f7       	brne	.-20     	; 0x192 <i2c_start_wait+0x16>
 1a6:	88 83       	st	Y, r24
 1a8:	30 83       	st	Z, r19
 1aa:	90 81       	ld	r25, Z
 1ac:	99 23       	and	r25, r25
 1ae:	ec f7       	brge	.-6      	; 0x1aa <i2c_start_wait+0x2e>
 1b0:	9c 91       	ld	r25, X
 1b2:	98 7f       	andi	r25, 0xF8	; 248
 1b4:	90 32       	cpi	r25, 0x20	; 32
 1b6:	11 f0       	breq	.+4      	; 0x1bc <i2c_start_wait+0x40>
 1b8:	98 35       	cpi	r25, 0x58	; 88
 1ba:	29 f4       	brne	.+10     	; 0x1c6 <i2c_start_wait+0x4a>
 1bc:	40 83       	st	Z, r20
 1be:	90 81       	ld	r25, Z
 1c0:	94 fd       	sbrc	r25, 4
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <i2c_start_wait+0x42>
 1c4:	e6 cf       	rjmp	.-52     	; 0x192 <i2c_start_wait+0x16>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <i2c_stop>:
 1cc:	84 e9       	ldi	r24, 0x94	; 148
 1ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	84 fd       	sbrc	r24, 4
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <i2c_stop+0xa>
 1dc:	08 95       	ret

000001de <i2c_write>:
 1de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1e2:	84 e8       	ldi	r24, 0x84	; 132
 1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1e8:	ec eb       	ldi	r30, 0xBC	; 188
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 23       	and	r24, r24
 1f0:	ec f7       	brge	.-6      	; 0x1ec <i2c_write+0xe>
 1f2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1f6:	98 7f       	andi	r25, 0xF8	; 248
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	98 32       	cpi	r25, 0x28	; 40
 1fc:	09 f4       	brne	.+2      	; 0x200 <i2c_write+0x22>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret

00000202 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 202:	84 e8       	ldi	r24, 0x84	; 132
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 208:	ec eb       	ldi	r30, 0xBC	; 188
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	88 23       	and	r24, r24
 210:	ec f7       	brge	.-6      	; 0x20c <i2c_readNak+0xa>
	
    return TWDR;
 212:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
 216:	08 95       	ret

00000218 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
 218:	cf 93       	push	r28
 21a:	c8 2f       	mov	r28, r24
 21c:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
 21e:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
	i2c_write(value);                      // write 
 222:	8c 2f       	mov	r24, r28
 224:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
 228:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <putnibble>:
uint8_t led_pin;



void putnibble(char t)
{
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_W);		//SLA_W je i2c adresa shifotvana u levo za 1
 234:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <led_pin>
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <led_pin>
 23e:	6e e4       	ldi	r22, 0x4E	; 78
 240:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	87 ec       	ldi	r24, 0xC7	; 199
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <putnibble+0x18>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <putnibble+0x1e>
 24e:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_W);
 250:	c2 95       	swap	r28
 252:	c0 7f       	andi	r28, 0xF0	; 240
 254:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <led_pin>
 258:	6e e4       	ldi	r22, 0x4E	; 78
 25a:	8c 2b       	or	r24, r28
 25c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_W);
 260:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <led_pin>
 264:	8b 7f       	andi	r24, 0xFB	; 251
 266:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <led_pin>
 26a:	6e e4       	ldi	r22, 0x4E	; 78
 26c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 270:	87 ec       	ldi	r24, 0xC7	; 199
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <putnibble+0x44>
 278:	00 c0       	rjmp	.+0      	; 0x27a <putnibble+0x4a>
 27a:	00 00       	nop
	_delay_us(50);
}
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <lcd1602_send_byte>:

void lcd1602_send_byte(char c, char rs)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
 286:	d8 2f       	mov	r29, r24
 288:	d2 95       	swap	r29
 28a:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
 28c:	61 11       	cpse	r22, r1
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <lcd1602_send_byte+0x22>
		i2c_send_packet(led_pin &=~ 0x01, SLA_W);
 290:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <led_pin>
 294:	8e 7f       	andi	r24, 0xFE	; 254
 296:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <led_pin>
 29a:	6e e4       	ldi	r22, 0x4E	; 78
 29c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <lcd1602_send_byte+0x32>
	else
		i2c_send_packet(led_pin |= 0x01, SLA_W);
 2a2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <led_pin>
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <led_pin>
 2ac:	6e e4       	ldi	r22, 0x4E	; 78
 2ae:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
	putnibble(highc);
 2b2:	8d 2f       	mov	r24, r29
 2b4:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
	putnibble(c);
 2b8:	8c 2f       	mov	r24, r28
 2ba:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <lcd1602_send_char>:

void lcd1602_send_char(char c)
{
 2c4:	cf 93       	push	r28
 2c6:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_W);
 2c8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <led_pin>
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <led_pin>
 2d2:	6e e4       	ldi	r22, 0x4E	; 78
 2d4:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
	putnibble(highc);
 2d8:	8c 2f       	mov	r24, r28
 2da:	82 95       	swap	r24
 2dc:	8f 70       	andi	r24, 0x0F	; 15
 2de:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
	putnibble(c);
 2e2:	8c 2f       	mov	r24, r28
 2e4:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
}
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <lcd1602_init>:

void lcd1602_init()
{
	led_pin = 0;
 2ec:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <led_pin>
	i2c_init();
 2f0:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	8f e5       	ldi	r24, 0x5F	; 95
 2f6:	9a ee       	ldi	r25, 0xEA	; 234
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd1602_init+0xc>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <lcd1602_init+0x12>
 2fe:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 306:	8f e7       	ldi	r24, 0x7F	; 127
 308:	9e e3       	ldi	r25, 0x3E	; 62
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <lcd1602_init+0x1e>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <lcd1602_init+0x24>
 310:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	8f e8       	ldi	r24, 0x8F	; 143
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <lcd1602_init+0x30>
 320:	00 c0       	rjmp	.+0      	; 0x322 <lcd1602_init+0x36>
 322:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	8f e9       	ldi	r24, 0x9F	; 159
 32c:	9f e0       	ldi	r25, 0x0F	; 15
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <lcd1602_init+0x42>
 332:	00 c0       	rjmp	.+0      	; 0x334 <lcd1602_init+0x48>
 334:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 18 01 	call	0x230	; 0x230 <putnibble>
 33c:	8f e9       	ldi	r24, 0x9F	; 159
 33e:	9f e0       	ldi	r25, 0x0F	; 15
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <lcd1602_init+0x54>
 344:	00 c0       	rjmp	.+0      	; 0x346 <lcd1602_init+0x5a>
 346:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x28, LCD_COMMAND);
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	88 e2       	ldi	r24, 0x28	; 40
 34c:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 350:	8f e9       	ldi	r24, 0x9F	; 159
 352:	9f e0       	ldi	r25, 0x0F	; 15
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd1602_init+0x68>
 358:	00 c0       	rjmp	.+0      	; 0x35a <lcd1602_init+0x6e>
 35a:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x0C, LCD_COMMAND);
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 364:	8f e9       	ldi	r24, 0x9F	; 159
 366:	9f e0       	ldi	r25, 0x0F	; 15
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd1602_init+0x7c>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd1602_init+0x82>
 36e:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x06, LCD_COMMAND);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	86 e0       	ldi	r24, 0x06	; 6
 374:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 378:	8f e9       	ldi	r24, 0x9F	; 159
 37a:	9f e0       	ldi	r25, 0x0F	; 15
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd1602_init+0x90>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd1602_init+0x96>
 382:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_W);
 384:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <led_pin>
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <led_pin>
 38e:	6e e4       	ldi	r22, 0x4E	; 78
 390:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_W);
 394:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <led_pin>
 398:	8d 7f       	andi	r24, 0xFD	; 253
 39a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <led_pin>
 39e:	6e e4       	ldi	r22, 0x4E	; 78
 3a0:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_send_packet>
 3a4:	08 95       	ret

000003a6 <lcd1602_clear>:
}

void lcd1602_clear()
{
	lcd1602_send_byte(0x01, LCD_COMMAND);
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ae:	8f e6       	ldi	r24, 0x6F	; 111
 3b0:	97 e1       	ldi	r25, 0x17	; 23
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd1602_clear+0xc>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <lcd1602_clear+0x12>
 3b8:	00 00       	nop
 3ba:	08 95       	ret

000003bc <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
 3bc:	90 e4       	ldi	r25, 0x40	; 64
 3be:	69 9f       	mul	r22, r25
 3c0:	80 0d       	add	r24, r0
 3c2:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	80 68       	ori	r24, 0x80	; 128
 3c8:	0e 94 40 01 	call	0x280	; 0x280 <lcd1602_send_byte>
 3cc:	08 95       	ret

000003ce <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3d6:	80 81       	ld	r24, Z
 3d8:	88 23       	and	r24, r24
 3da:	59 f0       	breq	.+22     	; 0x3f2 <lcd1602_send_string+0x24>
 3dc:	8f 01       	movw	r16, r30
 3de:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
 3e0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd1602_send_char>
		i++;
 3e4:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3e6:	f8 01       	movw	r30, r16
 3e8:	ec 0f       	add	r30, r28
 3ea:	f1 1d       	adc	r31, r1
 3ec:	80 81       	ld	r24, Z
 3ee:	81 11       	cpse	r24, r1
 3f0:	f7 cf       	rjmp	.-18     	; 0x3e0 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <byte_to_binary>:



uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime);  //typedef struct mora biti pre prototipa da bi je video
const char *byte_to_binary(int x)
{
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
	static char b[9];
	b[0] = '\0';
 406:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <b.2342>
 40a:	48 e0       	ldi	r20, 0x08	; 8
 40c:	50 e0       	ldi	r21, 0x00	; 0

	int z;
	for (z = 128; z > 0; z >>= 1)
 40e:	20 e8       	ldi	r18, 0x80	; 128
 410:	30 e0       	ldi	r19, 0x00	; 0
	{
		strcat(b, ((x & z) == z) ? "1" : "0");
 412:	0f 2e       	mov	r0, r31
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	ef 2e       	mov	r14, r31
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	ff 2e       	mov	r15, r31
 41c:	f0 2d       	mov	r31, r0
 41e:	03 e0       	ldi	r16, 0x03	; 3
 420:	11 e0       	ldi	r17, 0x01	; 1
 422:	c5 e3       	ldi	r28, 0x35	; 53
 424:	d1 e0       	ldi	r29, 0x01	; 1
 426:	bc 01       	movw	r22, r24
 428:	62 23       	and	r22, r18
 42a:	73 23       	and	r23, r19
 42c:	62 17       	cp	r22, r18
 42e:	73 07       	cpc	r23, r19
 430:	11 f0       	breq	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	d8 01       	movw	r26, r16
 434:	01 c0       	rjmp	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	d7 01       	movw	r26, r14
 438:	fe 01       	movw	r30, r28
 43a:	01 90       	ld	r0, Z+
 43c:	00 20       	and	r0, r0
 43e:	e9 f7       	brne	.-6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 440:	31 97       	sbiw	r30, 0x01	; 1
 442:	6d 91       	ld	r22, X+
 444:	7c 91       	ld	r23, X
 446:	71 83       	std	Z+1, r23	; 0x01
 448:	60 83       	st	Z, r22
{
	static char b[9];
	b[0] = '\0';

	int z;
	for (z = 128; z > 0; z >>= 1)
 44a:	35 95       	asr	r19
 44c:	27 95       	ror	r18
 44e:	41 50       	subi	r20, 0x01	; 1
 450:	51 09       	sbc	r21, r1
 452:	49 f7       	brne	.-46     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		strcat(b, ((x & z) == z) ? "1" : "0");
	}

	return b;
}
 454:	85 e3       	ldi	r24, 0x35	; 53
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	08 95       	ret

00000466 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	e2 97       	sbiw	r28, 0x32	; 50
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
 47e:	fb 01       	movw	r30, r22
	static uint16_t vreme_trenutno;
	
	char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
 480:	dc 01       	movw	r26, r24
 482:	12 96       	adiw	r26, 0x02	; 2
 484:	2c 91       	ld	r18, X
 486:	12 97       	sbiw	r26, 0x02	; 2
 488:	74 e6       	ldi	r23, 0x64	; 100
 48a:	11 96       	adiw	r26, 0x01	; 1
 48c:	8c 91       	ld	r24, X
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	72 9f       	mul	r23, r18
 492:	80 0d       	add	r24, r0
 494:	91 1d       	adc	r25, r1
 496:	11 24       	eor	r1, r1
 498:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <vreme_on.2363+0x1>
 49c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <vreme_on.2363>
	vreme_off = (Off_time->hr)*100 + Off_time->min;
 4a0:	62 81       	ldd	r22, Z+2	; 0x02
 4a2:	21 81       	ldd	r18, Z+1	; 0x01
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	76 9f       	mul	r23, r22
 4a8:	20 0d       	add	r18, r0
 4aa:	31 1d       	adc	r19, r1
 4ac:	11 24       	eor	r1, r1
 4ae:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <vreme_off.2364+0x1>
 4b2:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <vreme_off.2364>
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
 4b6:	fa 01       	movw	r30, r20
 4b8:	62 81       	ldd	r22, Z+2	; 0x02
 4ba:	41 81       	ldd	r20, Z+1	; 0x01
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	76 9f       	mul	r23, r22
 4c0:	40 0d       	add	r20, r0
 4c2:	51 1d       	adc	r21, r1
 4c4:	11 24       	eor	r1, r1
 4c6:	50 93 30 01 	sts	0x0130, r21	; 0x800130 <vreme_trenutno.2365+0x1>
 4ca:	40 93 2f 01 	sts	0x012F, r20	; 0x80012f <vreme_trenutno.2365>
	
	
	sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
 4ce:	5f 93       	push	r21
 4d0:	4f 93       	push	r20
 4d2:	3f 93       	push	r19
 4d4:	2f 93       	push	r18
 4d6:	9f 93       	push	r25
 4d8:	8f 93       	push	r24
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	9f 93       	push	r25
 4e0:	8f 93       	push	r24
 4e2:	8e 01       	movw	r16, r28
 4e4:	0f 5f       	subi	r16, 0xFF	; 255
 4e6:	1f 4f       	sbci	r17, 0xFF	; 255
 4e8:	1f 93       	push	r17
 4ea:	0f 93       	push	r16
 4ec:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sprintf>
	send_str(buff);
 4f0:	c8 01       	movw	r24, r16
 4f2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_str>
	send_str("\n"); //novi red
 4f6:	88 e1       	ldi	r24, 0x18	; 24
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <send_str>
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fuli radi
 4fe:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <vreme_on.2363>
 502:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <vreme_on.2363+0x1>
 506:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <vreme_off.2364>
 50a:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <vreme_off.2364+0x1>
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
 518:	82 17       	cp	r24, r18
 51a:	93 07       	cpc	r25, r19
 51c:	88 f0       	brcs	.+34     	; 0x540 <period_paljenja+0xda>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
 51e:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <vreme_trenutno.2365>
 522:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <vreme_trenutno.2365+0x1>
 526:	48 17       	cp	r20, r24
 528:	59 07       	cpc	r21, r25
 52a:	20 f0       	brcs	.+8      	; 0x534 <period_paljenja+0xce>
 52c:	48 33       	cpi	r20, 0x38	; 56
 52e:	89 e0       	ldi	r24, 0x09	; 9
 530:	58 07       	cpc	r21, r24
 532:	98 f0       	brcs	.+38     	; 0x55a <period_paljenja+0xf4>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	42 17       	cp	r20, r18
 538:	53 07       	cpc	r21, r19
 53a:	90 f0       	brcs	.+36     	; 0x560 <period_paljenja+0xfa>
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	10 c0       	rjmp	.+32     	; 0x560 <period_paljenja+0xfa>
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
 540:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <vreme_trenutno.2365>
 544:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <vreme_trenutno.2365+0x1>
 548:	48 17       	cp	r20, r24
 54a:	59 07       	cpc	r21, r25
 54c:	40 f0       	brcs	.+16     	; 0x55e <period_paljenja+0xf8>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	42 17       	cp	r20, r18
 552:	53 07       	cpc	r21, r19
 554:	28 f0       	brcs	.+10     	; 0x560 <period_paljenja+0xfa>
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	03 c0       	rjmp	.+6      	; 0x560 <period_paljenja+0xfa>
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	01 c0       	rjmp	.+2      	; 0x560 <period_paljenja+0xfa>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
 55e:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
 560:	e2 96       	adiw	r28, 0x32	; 50
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	08 95       	ret

00000576 <main>:

	return b;
}

int main(void)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	af 97       	sbiw	r28, 0x2f	; 47
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61

	Time_date vreme_datum;
	Time_date Vreme_paljenja;
	Time_date Vreme_gasenja;
	
	Vreme_paljenja.hr = 23;
 58a:	87 e1       	ldi	r24, 0x17	; 23
 58c:	8c 87       	std	Y+12, r24	; 0x0c
	Vreme_paljenja.min = 58;
 58e:	9a e3       	ldi	r25, 0x3A	; 58
 590:	9b 87       	std	Y+11, r25	; 0x0b
	Vreme_gasenja.hr = 23;
 592:	8d 8b       	std	Y+21, r24	; 0x15
	Vreme_gasenja.min = 59;
 594:	8b e3       	ldi	r24, 0x3B	; 59
 596:	8c 8b       	std	Y+20, r24	; 0x14
	uint8_t ukljuceno = 0;  //0=OFF 1=ON
	uint8_t tasteri = 0xFF;
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			////PD2-3 output
 598:	0e 94 4f 04 	call	0x89e	; 0x89e <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
 59c:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_init>
	lcd1602_init();
 5a0:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd1602_init>
	ADC_init();				//NAPOMENA:	PINB7 output
 5a4:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init();			//baud 9600
 5a8:	0e 94 cd 04 	call	0x99a	; 0x99a <uart_init>
	DS3231_init();			//RTC init
 5ac:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
 5b0:	0e 94 42 03 	call	0x684	; 0x684 <pc_init>
	tasteri_init();			//NAPOMENA: PD4-7 i PB0-1 INPUT, INT_PULLUP=ON
 5b4:	0e 94 5f 03 	call	0x6be	; 0x6be <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
 5b8:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;
 5ba:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
 5bc:	78 94       	sei
/**************************************************************************************************************/
	
	//getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
	//getDate(&vreme_datum.dy, &vreme_datum.dt, &vreme_datum.mt, &vreme_datum.yr);
	
	setTime(23, 57, 55, am, _24_hour_format);
 5be:	00 e0       	ldi	r16, 0x00	; 0
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	47 e3       	ldi	r20, 0x37	; 55
 5c4:	69 e3       	ldi	r22, 0x39	; 57
 5c6:	87 e1       	ldi	r24, 0x17	; 23
 5c8:	0e 94 1c 04 	call	0x838	; 0x838 <setTime>
    while (1) 
    {
		
		tasteri = ocitaj_tastere();	//vrv bolje prebaciti negde u tajmer da se stalno desava
		//tasteri = PIND;
		sprintf(bafer, "%s", byte_to_binary(tasteri));
 5cc:	6e 01       	movw	r12, r28
 5ce:	2c e1       	ldi	r18, 0x1C	; 28
 5d0:	c2 0e       	add	r12, r18
 5d2:	d1 1c       	adc	r13, r1
 5d4:	fc 2c       	mov	r15, r12
 5d6:	1d 2d       	mov	r17, r13
		{
			flag_pc_int = 0; //resetujem flag koji je u ISR
			
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
 5d8:	0f 2e       	mov	r0, r31
 5da:	fa e1       	ldi	r31, 0x1A	; 26
 5dc:	af 2e       	mov	r10, r31
 5de:	f1 e0       	ldi	r31, 0x01	; 1
 5e0:	bf 2e       	mov	r11, r31
 5e2:	f0 2d       	mov	r31, r0
	
	
    while (1) 
    {
		
		tasteri = ocitaj_tastere();	//vrv bolje prebaciti negde u tajmer da se stalno desava
 5e4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <ocitaj_tastere>
		//tasteri = PIND;
		sprintf(bafer, "%s", byte_to_binary(tasteri));
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 fd 01 	call	0x3fa	; 0x3fa <byte_to_binary>
 5ee:	bc 01       	movw	r22, r24
 5f0:	8f 2d       	mov	r24, r15
 5f2:	91 2f       	mov	r25, r17
 5f4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <strcpy>
		lcd1602_goto_xy(0,1);
 5f8:	61 e0       	ldi	r22, 0x01	; 1
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcd1602_goto_xy>
		lcd1602_send_string(bafer);
 600:	8f 2d       	mov	r24, r15
 602:	91 2f       	mov	r25, r17
 604:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd1602_send_string>
		
		if(flag_pc_int)
 608:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <flag_pc_int>
 60c:	88 23       	and	r24, r24
 60e:	51 f3       	breq	.-44     	; 0x5e4 <main+0x6e>
		{
			flag_pc_int = 0; //resetujem flag koji je u ISR
 610:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <flag_pc_int>
			
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
 614:	00 e0       	ldi	r16, 0x00	; 0
 616:	9e 01       	movw	r18, r28
 618:	27 5f       	subi	r18, 0xF7	; 247
 61a:	3f 4f       	sbci	r19, 0xFF	; 255
 61c:	ae 01       	movw	r20, r28
 61e:	4f 5f       	subi	r20, 0xFF	; 255
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	be 01       	movw	r22, r28
 624:	6e 5f       	subi	r22, 0xFE	; 254
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	ce 01       	movw	r24, r28
 62a:	03 96       	adiw	r24, 0x03	; 3
 62c:	0e 94 de 03 	call	0x7bc	; 0x7bc <getTime>
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
 630:	89 81       	ldd	r24, Y+1	; 0x01
 632:	1f 92       	push	r1
 634:	8f 93       	push	r24
 636:	8a 81       	ldd	r24, Y+2	; 0x02
 638:	1f 92       	push	r1
 63a:	8f 93       	push	r24
 63c:	8b 81       	ldd	r24, Y+3	; 0x03
 63e:	1f 92       	push	r1
 640:	8f 93       	push	r24
 642:	bf 92       	push	r11
 644:	af 92       	push	r10
 646:	df 92       	push	r13
 648:	cf 92       	push	r12
 64a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sprintf>
			//send_str(bafer);
			//send_str("\n"); //novi red
			
			lcd1602_clear();
 64e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd1602_clear>
			lcd1602_send_string(bafer);
 652:	8f 2d       	mov	r24, r15
 654:	91 2f       	mov	r25, r17
 656:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd1602_send_string>
			
			
			
			ukljuceno = period_paljenja(&Vreme_paljenja, &Vreme_gasenja, &vreme_datum);
 65a:	ae 01       	movw	r20, r28
 65c:	4f 5f       	subi	r20, 0xFF	; 255
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	be 01       	movw	r22, r28
 662:	6d 5e       	subi	r22, 0xED	; 237
 664:	7f 4f       	sbci	r23, 0xFF	; 255
 666:	ce 01       	movw	r24, r28
 668:	0a 96       	adiw	r24, 0x0a	; 10
 66a:	0e 94 33 02 	call	0x466	; 0x466 <period_paljenja>
			
			if (ukljuceno)
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	f8 94       	cli
 672:	de bf       	out	0x3e, r29	; 62
 674:	0f be       	out	0x3f, r0	; 63
 676:	cd bf       	out	0x3d, r28	; 61
 678:	88 23       	and	r24, r24
 67a:	11 f0       	breq	.+4      	; 0x680 <main+0x10a>
				PORTB |= 1<<PINB5;   //high
 67c:	2d 9a       	sbi	0x05, 5	; 5
 67e:	b2 cf       	rjmp	.-156    	; 0x5e4 <main+0x6e>
			else
				PORTB &= ~(1<<PINB5);	//low
 680:	2d 98       	cbi	0x05, 5	; 5
 682:	b0 cf       	rjmp	.-160    	; 0x5e4 <main+0x6e>

00000684 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
 684:	e8 e6       	ldi	r30, 0x68	; 104
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	82 60       	ori	r24, 0x02	; 2
 68c:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
 68e:	ec e6       	ldi	r30, 0x6C	; 108
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	80 81       	ld	r24, Z
 694:	88 60       	ori	r24, 0x08	; 8
 696:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
 698:	3b 98       	cbi	0x07, 3	; 7
 69a:	08 95       	ret

0000069c <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if(PINC & (1<<PINC3) )		
 6a8:	33 9b       	sbis	0x06, 3	; 6
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <__vector_4+0x16>
		flag_pc_int = 1;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <flag_pc_int>

 6b2:	8f 91       	pop	r24
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <tasteri_init>:
#include "tajmer.h"

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
 6be:	8a b1       	in	r24, 0x0a	; 10
 6c0:	8f 70       	andi	r24, 0x0F	; 15
 6c2:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
 6c4:	84 b1       	in	r24, 0x04	; 4
 6c6:	8c 7f       	andi	r24, 0xFC	; 252
 6c8:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
 6ca:	8b b1       	in	r24, 0x0b	; 11
 6cc:	80 6f       	ori	r24, 0xF0	; 240
 6ce:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
 6d0:	85 b1       	in	r24, 0x05	; 5
 6d2:	83 60       	ori	r24, 0x03	; 3
 6d4:	85 b9       	out	0x05, r24	; 5
 6d6:	08 95       	ret

000006d8 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 25ms; zapravo perioda je 25ms jer je to razlika izmedju prvog i drugog citanja
 6d8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <flag_prekid_debounce_time_half>
 6dc:	88 23       	and	r24, r24
 6de:	69 f0       	breq	.+26     	; 0x6fa <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
 6e0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
 6e4:	93 b1       	in	r25, 0x03	; 3
 6e6:	29 b1       	in	r18, 0x09	; 9
 6e8:	30 e1       	ldi	r19, 0x10	; 16
 6ea:	93 9f       	mul	r25, r19
 6ec:	c0 01       	movw	r24, r0
 6ee:	11 24       	eor	r1, r1
 6f0:	92 2f       	mov	r25, r18
 6f2:	92 95       	swap	r25
 6f4:	9f 70       	andi	r25, 0x0F	; 15
 6f6:	89 2b       	or	r24, r25
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 25ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 50ms, tj 25ms posle drugog
 6fc:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <flag_prekid_debounce_time>
 700:	99 23       	and	r25, r25
 702:	81 f0       	breq	.+32     	; 0x724 <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
 704:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
 708:	93 b1       	in	r25, 0x03	; 3
 70a:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
 70c:	50 e1       	ldi	r21, 0x10	; 16
 70e:	95 9f       	mul	r25, r21
 710:	90 01       	movw	r18, r0
 712:	11 24       	eor	r1, r1
 714:	94 2f       	mov	r25, r20
 716:	92 95       	swap	r25
 718:	9f 70       	andi	r25, 0x0F	; 15
 71a:	29 2b       	or	r18, r25
 71c:	82 13       	cpse	r24, r18
 71e:	02 c0       	rjmp	.+4      	; 0x724 <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
 720:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
	}
	
	return tasteri_reg;
 724:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 728:	08 95       	ret

0000072a <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
 72a:	98 2f       	mov	r25, r24
 72c:	92 95       	swap	r25
 72e:	9f 70       	andi	r25, 0x0F	; 15
 730:	99 0f       	add	r25, r25
 732:	29 2f       	mov	r18, r25
 734:	22 0f       	add	r18, r18
 736:	22 0f       	add	r18, r18
 738:	92 0f       	add	r25, r18
 73a:	8f 70       	andi	r24, 0x0F	; 15
 73c:	89 0f       	add	r24, r25
 73e:	08 95       	ret

00000740 <decimal_to_bcd>:
 740:	9d ec       	ldi	r25, 0xCD	; 205
 742:	89 9f       	mul	r24, r25
 744:	91 2d       	mov	r25, r1
 746:	11 24       	eor	r1, r1
 748:	96 95       	lsr	r25
 74a:	96 95       	lsr	r25
 74c:	96 95       	lsr	r25
 74e:	20 e1       	ldi	r18, 0x10	; 16
 750:	92 9f       	mul	r25, r18
 752:	a0 01       	movw	r20, r0
 754:	11 24       	eor	r1, r1
 756:	99 0f       	add	r25, r25
 758:	29 2f       	mov	r18, r25
 75a:	22 0f       	add	r18, r18
 75c:	22 0f       	add	r18, r18
 75e:	92 0f       	add	r25, r18
 760:	89 1b       	sub	r24, r25
 762:	8f 70       	andi	r24, 0x0F	; 15
 764:	84 2b       	or	r24, r20
 766:	08 95       	ret

00000768 <DS3231_Read>:
 768:	cf 93       	push	r28
 76a:	c8 2f       	mov	r28, r24
 76c:	80 ed       	ldi	r24, 0xD0	; 208
 76e:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
 772:	8c 2f       	mov	r24, r28
 774:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
 778:	81 ed       	ldi	r24, 0xD1	; 209
 77a:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
 77e:	0e 94 01 01 	call	0x202	; 0x202 <i2c_readNak>
 782:	cf 91       	pop	r28
 784:	08 95       	ret

00000786 <DS3231_Write>:
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	d8 2f       	mov	r29, r24
 78c:	c6 2f       	mov	r28, r22
 78e:	80 ed       	ldi	r24, 0xD0	; 208
 790:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_start_wait>
 794:	8d 2f       	mov	r24, r29
 796:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
 79a:	8c 2f       	mov	r24, r28
 79c:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_write>
 7a0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	08 95       	ret

000007aa <DS3231_init>:
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	8e e0       	ldi	r24, 0x0E	; 14
 7ae:	0e 94 c3 03 	call	0x786	; 0x786 <DS3231_Write>
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	8f e0       	ldi	r24, 0x0F	; 15
 7b6:	0e 94 c3 03 	call	0x786	; 0x786 <DS3231_Write>
 7ba:	08 95       	ret

000007bc <getTime>:
 7bc:	af 92       	push	r10
 7be:	bf 92       	push	r11
 7c0:	cf 92       	push	r12
 7c2:	df 92       	push	r13
 7c4:	ef 92       	push	r14
 7c6:	ff 92       	push	r15
 7c8:	0f 93       	push	r16
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	ec 01       	movw	r28, r24
 7d0:	7b 01       	movw	r14, r22
 7d2:	6a 01       	movw	r12, r20
 7d4:	59 01       	movw	r10, r18
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	0e 94 b4 03 	call	0x768	; 0x768 <DS3231_Read>
 7dc:	0e 94 95 03 	call	0x72a	; 0x72a <bcd_to_decimal>
 7e0:	f6 01       	movw	r30, r12
 7e2:	80 83       	st	Z, r24
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	0e 94 b4 03 	call	0x768	; 0x768 <DS3231_Read>
 7ea:	0e 94 95 03 	call	0x72a	; 0x72a <bcd_to_decimal>
 7ee:	f7 01       	movw	r30, r14
 7f0:	80 83       	st	Z, r24
 7f2:	01 30       	cpi	r16, 0x01	; 1
 7f4:	81 f4       	brne	.+32     	; 0x816 <getTime+0x5a>
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	0e 94 b4 03 	call	0x768	; 0x768 <DS3231_Read>
 7fc:	85 fb       	bst	r24, 5
 7fe:	88 27       	eor	r24, r24
 800:	80 f9       	bld	r24, 0
 802:	f5 01       	movw	r30, r10
 804:	80 83       	st	Z, r24
 806:	82 e0       	ldi	r24, 0x02	; 2
 808:	0e 94 b4 03 	call	0x768	; 0x768 <DS3231_Read>
 80c:	8f 71       	andi	r24, 0x1F	; 31
 80e:	0e 94 95 03 	call	0x72a	; 0x72a <bcd_to_decimal>
 812:	88 83       	st	Y, r24
 814:	07 c0       	rjmp	.+14     	; 0x824 <getTime+0x68>
 816:	82 e0       	ldi	r24, 0x02	; 2
 818:	0e 94 b4 03 	call	0x768	; 0x768 <DS3231_Read>
 81c:	8f 73       	andi	r24, 0x3F	; 63
 81e:	0e 94 95 03 	call	0x72a	; 0x72a <bcd_to_decimal>
 822:	88 83       	st	Y, r24
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	0f 91       	pop	r16
 82a:	ff 90       	pop	r15
 82c:	ef 90       	pop	r14
 82e:	df 90       	pop	r13
 830:	cf 90       	pop	r12
 832:	bf 90       	pop	r11
 834:	af 90       	pop	r10
 836:	08 95       	ret

00000838 <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	d8 2f       	mov	r29, r24
 842:	c6 2f       	mov	r28, r22
 844:	84 2f       	mov	r24, r20
 846:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
 848:	0e 94 a0 03 	call	0x740	; 0x740 <decimal_to_bcd>
 84c:	68 2f       	mov	r22, r24
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	0e 94 c3 03 	call	0x786	; 0x786 <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
 854:	8c 2f       	mov	r24, r28
 856:	0e 94 a0 03 	call	0x740	; 0x740 <decimal_to_bcd>
 85a:	68 2f       	mov	r22, r24
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	0e 94 c3 03 	call	0x786	; 0x786 <DS3231_Write>
	
	switch(hour_format)
 862:	01 30       	cpi	r16, 0x01	; 1
 864:	79 f4       	brne	.+30     	; 0x884 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
 866:	11 30       	cpi	r17, 0x01	; 1
 868:	11 f0       	breq	.+4      	; 0x86e <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
 86a:	c0 e4       	ldi	r28, 0x40	; 64
 86c:	01 c0       	rjmp	.+2      	; 0x870 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
 86e:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
 870:	8d 2f       	mov	r24, r29
 872:	0e 94 a0 03 	call	0x740	; 0x740 <decimal_to_bcd>
 876:	8f 71       	andi	r24, 0x1F	; 31
 878:	68 2f       	mov	r22, r24
 87a:	6c 2b       	or	r22, r28
 87c:	82 e0       	ldi	r24, 0x02	; 2
 87e:	0e 94 c3 03 	call	0x786	; 0x786 <DS3231_Write>
			break;
 882:	08 c0       	rjmp	.+16     	; 0x894 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
 884:	8d 2f       	mov	r24, r29
 886:	0e 94 a0 03 	call	0x740	; 0x740 <decimal_to_bcd>
 88a:	68 2f       	mov	r22, r24
 88c:	6f 73       	andi	r22, 0x3F	; 63
 88e:	82 e0       	ldi	r24, 0x02	; 2
 890:	0e 94 c3 03 	call	0x786	; 0x786 <DS3231_Write>
			break;
		}
	}
}
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	1f 91       	pop	r17
 89a:	0f 91       	pop	r16
 89c:	08 95       	ret

0000089e <tajmer0_init>:
volatile uint8_t brojac_prekida_tajmera0_debounce = 0;
volatile uint8_t brojac_prekida_tajmera0_debounce_half = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 8a2:	93 e0       	ldi	r25, 0x03	; 3
 8a4:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 8a6:	99 ef       	ldi	r25, 0xF9	; 249
 8a8:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 8aa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRD |= (1<<PIND2)|(1<<PIND3);  //PD2-3 output
 8ae:	8a b1       	in	r24, 0x0a	; 10
 8b0:	8c 60       	ori	r24, 0x0C	; 12
 8b2:	8a b9       	out	0x0a, r24	; 10
 8b4:	08 95       	ret

000008b6 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
 8b6:	1f 92       	push	r1
 8b8:	0f 92       	push	r0
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	0f 92       	push	r0
 8be:	11 24       	eor	r1, r1
 8c0:	8f 93       	push	r24
	flag_tajmer0_prekid = 1;
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
 8c8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <brojac_prekida_tajmera0>
 8cc:	8f 5f       	subi	r24, 0xFF	; 255
 8ce:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
 8d2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <brojac_prekida_tajmera0_debounce_half>
 8d6:	8f 5f       	subi	r24, 0xFF	; 255
 8d8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
 8dc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <brojac_prekida_tajmera0_debounce>
 8e0:	8f 5f       	subi	r24, 0xFF	; 255
 8e2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <brojac_prekida_tajmera0_debounce>
		
	if(brojac_prekida_tajmera0 == 10)	//1ms * 10 = 10ms
 8e6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <brojac_prekida_tajmera0>
 8ea:	8a 30       	cpi	r24, 0x0A	; 10
 8ec:	29 f4       	brne	.+10     	; 0x8f8 <__vector_14+0x42>
	{
		brojac_prekida_tajmera0 = 0;
 8ee:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;				
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <flag_prekid_10ms>
		
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//25ms
 8f8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <brojac_prekida_tajmera0_debounce_half>
 8fc:	89 31       	cpi	r24, 0x19	; 25
 8fe:	31 f4       	brne	.+12     	; 0x90c <__stack+0xd>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
 900:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <flag_prekid_debounce_time_half>
		PIND |= 1<<PIND2;	//toggle PD2
 90a:	4a 9a       	sbi	0x09, 2	; 9
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 50 = 50ms
 90c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <brojac_prekida_tajmera0_debounce>
 910:	82 33       	cpi	r24, 0x32	; 50
 912:	31 f4       	brne	.+12     	; 0x920 <__stack+0x21>
	{
		brojac_prekida_tajmera0_debounce = 0;
 914:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <flag_prekid_debounce_time>
		PIND |= 1<<PIND3;	//toggle PD3
 91e:	4b 9a       	sbi	0x09, 3	; 9
	}
	
 920:	8f 91       	pop	r24
 922:	0f 90       	pop	r0
 924:	0f be       	out	0x3f, r0	; 63
 926:	0f 90       	pop	r0
 928:	1f 90       	pop	r1
 92a:	18 95       	reti

0000092c <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 92c:	1f 92       	push	r1
 92e:	0f 92       	push	r0
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	0f 92       	push	r0
 934:	11 24       	eor	r1, r1
	poslato=0;
 936:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <poslato>
}
 93a:	0f 90       	pop	r0
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	0f 90       	pop	r0
 940:	1f 90       	pop	r1
 942:	18 95       	reti

00000944 <__vector_18>:

ISR(USART_RX_vect)
{
 944:	1f 92       	push	r1
 946:	0f 92       	push	r0
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	0f 92       	push	r0
 94c:	11 24       	eor	r1, r1
 94e:	8f 93       	push	r24
 950:	ef 93       	push	r30
 952:	ff 93       	push	r31
	input_char=UDR0;
 954:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 958:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 95c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <buff_size>
 960:	88 30       	cpi	r24, 0x08	; 8
 962:	98 f4       	brcc	.+38     	; 0x98a <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 964:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <buff_size>
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <input_char>
 96e:	e6 5b       	subi	r30, 0xB6	; 182
 970:	fe 4f       	sbci	r31, 0xFE	; 254
 972:	80 83       	st	Z, r24
		buff_size++;
 974:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <buff_size>
 978:	8f 5f       	subi	r24, 0xFF	; 255
 97a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <buff_size>
		input_buffer[buff_size]='\0';
 97e:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <buff_size>
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	e6 5b       	subi	r30, 0xB6	; 182
 986:	fe 4f       	sbci	r31, 0xFE	; 254
 988:	10 82       	st	Z, r1
	}
}
 98a:	ff 91       	pop	r31
 98c:	ef 91       	pop	r30
 98e:	8f 91       	pop	r24
 990:	0f 90       	pop	r0
 992:	0f be       	out	0x3f, r0	; 63
 994:	0f 90       	pop	r0
 996:	1f 90       	pop	r1
 998:	18 95       	reti

0000099a <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 99a:	82 e0       	ldi	r24, 0x02	; 2
 99c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 9a0:	88 ed       	ldi	r24, 0xD8	; 216
 9a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 9a6:	86 e0       	ldi	r24, 0x06	; 6
 9a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 9ac:	8f ec       	ldi	r24, 0xCF	; 207
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 9b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 9b8:	08 95       	ret

000009ba <send_str>:
}

void send_str(char *str)
{
 9ba:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 9bc:	90 81       	ld	r25, Z
 9be:	99 23       	and	r25, r25
 9c0:	71 f0       	breq	.+28     	; 0x9de <send_str+0x24>
 9c2:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 9c4:	a6 ec       	ldi	r26, 0xC6	; 198
 9c6:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 9c8:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 9ca:	9c 93       	st	X, r25
		poslato=1;
 9cc:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <poslato>
		while (poslato);
 9d0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <poslato>
 9d4:	91 11       	cpse	r25, r1
 9d6:	fc cf       	rjmp	.-8      	; 0x9d0 <send_str+0x16>
void send_str(char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 9d8:	91 91       	ld	r25, Z+
 9da:	91 11       	cpse	r25, r1
 9dc:	f6 cf       	rjmp	.-20     	; 0x9ca <send_str+0x10>
 9de:	08 95       	ret

000009e0 <strcpy>:
 9e0:	fb 01       	movw	r30, r22
 9e2:	dc 01       	movw	r26, r24
 9e4:	01 90       	ld	r0, Z+
 9e6:	0d 92       	st	X+, r0
 9e8:	00 20       	and	r0, r0
 9ea:	e1 f7       	brne	.-8      	; 0x9e4 <strcpy+0x4>
 9ec:	08 95       	ret

000009ee <sprintf>:
 9ee:	ae e0       	ldi	r26, 0x0E	; 14
 9f0:	b0 e0       	ldi	r27, 0x00	; 0
 9f2:	ed ef       	ldi	r30, 0xFD	; 253
 9f4:	f4 e0       	ldi	r31, 0x04	; 4
 9f6:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__prologue_saves__+0x1c>
 9fa:	0d 89       	ldd	r16, Y+21	; 0x15
 9fc:	1e 89       	ldd	r17, Y+22	; 0x16
 9fe:	86 e0       	ldi	r24, 0x06	; 6
 a00:	8c 83       	std	Y+4, r24	; 0x04
 a02:	1a 83       	std	Y+2, r17	; 0x02
 a04:	09 83       	std	Y+1, r16	; 0x01
 a06:	8f ef       	ldi	r24, 0xFF	; 255
 a08:	9f e7       	ldi	r25, 0x7F	; 127
 a0a:	9e 83       	std	Y+6, r25	; 0x06
 a0c:	8d 83       	std	Y+5, r24	; 0x05
 a0e:	ae 01       	movw	r20, r28
 a10:	47 5e       	subi	r20, 0xE7	; 231
 a12:	5f 4f       	sbci	r21, 0xFF	; 255
 a14:	6f 89       	ldd	r22, Y+23	; 0x17
 a16:	78 8d       	ldd	r23, Y+24	; 0x18
 a18:	ce 01       	movw	r24, r28
 a1a:	01 96       	adiw	r24, 0x01	; 1
 a1c:	0e 94 19 05 	call	0xa32	; 0xa32 <vfprintf>
 a20:	ef 81       	ldd	r30, Y+7	; 0x07
 a22:	f8 85       	ldd	r31, Y+8	; 0x08
 a24:	e0 0f       	add	r30, r16
 a26:	f1 1f       	adc	r31, r17
 a28:	10 82       	st	Z, r1
 a2a:	2e 96       	adiw	r28, 0x0e	; 14
 a2c:	e4 e0       	ldi	r30, 0x04	; 4
 a2e:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__epilogue_restores__+0x1c>

00000a32 <vfprintf>:
 a32:	ab e0       	ldi	r26, 0x0B	; 11
 a34:	b0 e0       	ldi	r27, 0x00	; 0
 a36:	ef e1       	ldi	r30, 0x1F	; 31
 a38:	f5 e0       	ldi	r31, 0x05	; 5
 a3a:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__prologue_saves__>
 a3e:	6c 01       	movw	r12, r24
 a40:	7b 01       	movw	r14, r22
 a42:	8a 01       	movw	r16, r20
 a44:	fc 01       	movw	r30, r24
 a46:	17 82       	std	Z+7, r1	; 0x07
 a48:	16 82       	std	Z+6, r1	; 0x06
 a4a:	83 81       	ldd	r24, Z+3	; 0x03
 a4c:	81 ff       	sbrs	r24, 1
 a4e:	cc c1       	rjmp	.+920    	; 0xde8 <vfprintf+0x3b6>
 a50:	ce 01       	movw	r24, r28
 a52:	01 96       	adiw	r24, 0x01	; 1
 a54:	3c 01       	movw	r6, r24
 a56:	f6 01       	movw	r30, r12
 a58:	93 81       	ldd	r25, Z+3	; 0x03
 a5a:	f7 01       	movw	r30, r14
 a5c:	93 fd       	sbrc	r25, 3
 a5e:	85 91       	lpm	r24, Z+
 a60:	93 ff       	sbrs	r25, 3
 a62:	81 91       	ld	r24, Z+
 a64:	7f 01       	movw	r14, r30
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <vfprintf+0x3a>
 a6a:	ba c1       	rjmp	.+884    	; 0xde0 <vfprintf+0x3ae>
 a6c:	85 32       	cpi	r24, 0x25	; 37
 a6e:	39 f4       	brne	.+14     	; 0xa7e <vfprintf+0x4c>
 a70:	93 fd       	sbrc	r25, 3
 a72:	85 91       	lpm	r24, Z+
 a74:	93 ff       	sbrs	r25, 3
 a76:	81 91       	ld	r24, Z+
 a78:	7f 01       	movw	r14, r30
 a7a:	85 32       	cpi	r24, 0x25	; 37
 a7c:	29 f4       	brne	.+10     	; 0xa88 <vfprintf+0x56>
 a7e:	b6 01       	movw	r22, r12
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 a86:	e7 cf       	rjmp	.-50     	; 0xa56 <vfprintf+0x24>
 a88:	91 2c       	mov	r9, r1
 a8a:	21 2c       	mov	r2, r1
 a8c:	31 2c       	mov	r3, r1
 a8e:	ff e1       	ldi	r31, 0x1F	; 31
 a90:	f3 15       	cp	r31, r3
 a92:	d8 f0       	brcs	.+54     	; 0xaca <vfprintf+0x98>
 a94:	8b 32       	cpi	r24, 0x2B	; 43
 a96:	79 f0       	breq	.+30     	; 0xab6 <vfprintf+0x84>
 a98:	38 f4       	brcc	.+14     	; 0xaa8 <vfprintf+0x76>
 a9a:	80 32       	cpi	r24, 0x20	; 32
 a9c:	79 f0       	breq	.+30     	; 0xabc <vfprintf+0x8a>
 a9e:	83 32       	cpi	r24, 0x23	; 35
 aa0:	a1 f4       	brne	.+40     	; 0xaca <vfprintf+0x98>
 aa2:	23 2d       	mov	r18, r3
 aa4:	20 61       	ori	r18, 0x10	; 16
 aa6:	1d c0       	rjmp	.+58     	; 0xae2 <vfprintf+0xb0>
 aa8:	8d 32       	cpi	r24, 0x2D	; 45
 aaa:	61 f0       	breq	.+24     	; 0xac4 <vfprintf+0x92>
 aac:	80 33       	cpi	r24, 0x30	; 48
 aae:	69 f4       	brne	.+26     	; 0xaca <vfprintf+0x98>
 ab0:	23 2d       	mov	r18, r3
 ab2:	21 60       	ori	r18, 0x01	; 1
 ab4:	16 c0       	rjmp	.+44     	; 0xae2 <vfprintf+0xb0>
 ab6:	83 2d       	mov	r24, r3
 ab8:	82 60       	ori	r24, 0x02	; 2
 aba:	38 2e       	mov	r3, r24
 abc:	e3 2d       	mov	r30, r3
 abe:	e4 60       	ori	r30, 0x04	; 4
 ac0:	3e 2e       	mov	r3, r30
 ac2:	2a c0       	rjmp	.+84     	; 0xb18 <vfprintf+0xe6>
 ac4:	f3 2d       	mov	r31, r3
 ac6:	f8 60       	ori	r31, 0x08	; 8
 ac8:	1d c0       	rjmp	.+58     	; 0xb04 <vfprintf+0xd2>
 aca:	37 fc       	sbrc	r3, 7
 acc:	2d c0       	rjmp	.+90     	; 0xb28 <vfprintf+0xf6>
 ace:	20 ed       	ldi	r18, 0xD0	; 208
 ad0:	28 0f       	add	r18, r24
 ad2:	2a 30       	cpi	r18, 0x0A	; 10
 ad4:	40 f0       	brcs	.+16     	; 0xae6 <vfprintf+0xb4>
 ad6:	8e 32       	cpi	r24, 0x2E	; 46
 ad8:	b9 f4       	brne	.+46     	; 0xb08 <vfprintf+0xd6>
 ada:	36 fc       	sbrc	r3, 6
 adc:	81 c1       	rjmp	.+770    	; 0xde0 <vfprintf+0x3ae>
 ade:	23 2d       	mov	r18, r3
 ae0:	20 64       	ori	r18, 0x40	; 64
 ae2:	32 2e       	mov	r3, r18
 ae4:	19 c0       	rjmp	.+50     	; 0xb18 <vfprintf+0xe6>
 ae6:	36 fe       	sbrs	r3, 6
 ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <vfprintf+0xc4>
 aea:	8a e0       	ldi	r24, 0x0A	; 10
 aec:	98 9e       	mul	r9, r24
 aee:	20 0d       	add	r18, r0
 af0:	11 24       	eor	r1, r1
 af2:	92 2e       	mov	r9, r18
 af4:	11 c0       	rjmp	.+34     	; 0xb18 <vfprintf+0xe6>
 af6:	ea e0       	ldi	r30, 0x0A	; 10
 af8:	2e 9e       	mul	r2, r30
 afa:	20 0d       	add	r18, r0
 afc:	11 24       	eor	r1, r1
 afe:	22 2e       	mov	r2, r18
 b00:	f3 2d       	mov	r31, r3
 b02:	f0 62       	ori	r31, 0x20	; 32
 b04:	3f 2e       	mov	r3, r31
 b06:	08 c0       	rjmp	.+16     	; 0xb18 <vfprintf+0xe6>
 b08:	8c 36       	cpi	r24, 0x6C	; 108
 b0a:	21 f4       	brne	.+8      	; 0xb14 <vfprintf+0xe2>
 b0c:	83 2d       	mov	r24, r3
 b0e:	80 68       	ori	r24, 0x80	; 128
 b10:	38 2e       	mov	r3, r24
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <vfprintf+0xe6>
 b14:	88 36       	cpi	r24, 0x68	; 104
 b16:	41 f4       	brne	.+16     	; 0xb28 <vfprintf+0xf6>
 b18:	f7 01       	movw	r30, r14
 b1a:	93 fd       	sbrc	r25, 3
 b1c:	85 91       	lpm	r24, Z+
 b1e:	93 ff       	sbrs	r25, 3
 b20:	81 91       	ld	r24, Z+
 b22:	7f 01       	movw	r14, r30
 b24:	81 11       	cpse	r24, r1
 b26:	b3 cf       	rjmp	.-154    	; 0xa8e <vfprintf+0x5c>
 b28:	98 2f       	mov	r25, r24
 b2a:	9f 7d       	andi	r25, 0xDF	; 223
 b2c:	95 54       	subi	r25, 0x45	; 69
 b2e:	93 30       	cpi	r25, 0x03	; 3
 b30:	28 f4       	brcc	.+10     	; 0xb3c <vfprintf+0x10a>
 b32:	0c 5f       	subi	r16, 0xFC	; 252
 b34:	1f 4f       	sbci	r17, 0xFF	; 255
 b36:	9f e3       	ldi	r25, 0x3F	; 63
 b38:	99 83       	std	Y+1, r25	; 0x01
 b3a:	0d c0       	rjmp	.+26     	; 0xb56 <vfprintf+0x124>
 b3c:	83 36       	cpi	r24, 0x63	; 99
 b3e:	31 f0       	breq	.+12     	; 0xb4c <vfprintf+0x11a>
 b40:	83 37       	cpi	r24, 0x73	; 115
 b42:	71 f0       	breq	.+28     	; 0xb60 <vfprintf+0x12e>
 b44:	83 35       	cpi	r24, 0x53	; 83
 b46:	09 f0       	breq	.+2      	; 0xb4a <vfprintf+0x118>
 b48:	59 c0       	rjmp	.+178    	; 0xbfc <vfprintf+0x1ca>
 b4a:	21 c0       	rjmp	.+66     	; 0xb8e <vfprintf+0x15c>
 b4c:	f8 01       	movw	r30, r16
 b4e:	80 81       	ld	r24, Z
 b50:	89 83       	std	Y+1, r24	; 0x01
 b52:	0e 5f       	subi	r16, 0xFE	; 254
 b54:	1f 4f       	sbci	r17, 0xFF	; 255
 b56:	88 24       	eor	r8, r8
 b58:	83 94       	inc	r8
 b5a:	91 2c       	mov	r9, r1
 b5c:	53 01       	movw	r10, r6
 b5e:	13 c0       	rjmp	.+38     	; 0xb86 <vfprintf+0x154>
 b60:	28 01       	movw	r4, r16
 b62:	f2 e0       	ldi	r31, 0x02	; 2
 b64:	4f 0e       	add	r4, r31
 b66:	51 1c       	adc	r5, r1
 b68:	f8 01       	movw	r30, r16
 b6a:	a0 80       	ld	r10, Z
 b6c:	b1 80       	ldd	r11, Z+1	; 0x01
 b6e:	36 fe       	sbrs	r3, 6
 b70:	03 c0       	rjmp	.+6      	; 0xb78 <vfprintf+0x146>
 b72:	69 2d       	mov	r22, r9
 b74:	70 e0       	ldi	r23, 0x00	; 0
 b76:	02 c0       	rjmp	.+4      	; 0xb7c <vfprintf+0x14a>
 b78:	6f ef       	ldi	r22, 0xFF	; 255
 b7a:	7f ef       	ldi	r23, 0xFF	; 255
 b7c:	c5 01       	movw	r24, r10
 b7e:	0e 94 05 07 	call	0xe0a	; 0xe0a <strnlen>
 b82:	4c 01       	movw	r8, r24
 b84:	82 01       	movw	r16, r4
 b86:	f3 2d       	mov	r31, r3
 b88:	ff 77       	andi	r31, 0x7F	; 127
 b8a:	3f 2e       	mov	r3, r31
 b8c:	16 c0       	rjmp	.+44     	; 0xbba <vfprintf+0x188>
 b8e:	28 01       	movw	r4, r16
 b90:	22 e0       	ldi	r18, 0x02	; 2
 b92:	42 0e       	add	r4, r18
 b94:	51 1c       	adc	r5, r1
 b96:	f8 01       	movw	r30, r16
 b98:	a0 80       	ld	r10, Z
 b9a:	b1 80       	ldd	r11, Z+1	; 0x01
 b9c:	36 fe       	sbrs	r3, 6
 b9e:	03 c0       	rjmp	.+6      	; 0xba6 <vfprintf+0x174>
 ba0:	69 2d       	mov	r22, r9
 ba2:	70 e0       	ldi	r23, 0x00	; 0
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <vfprintf+0x178>
 ba6:	6f ef       	ldi	r22, 0xFF	; 255
 ba8:	7f ef       	ldi	r23, 0xFF	; 255
 baa:	c5 01       	movw	r24, r10
 bac:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <strnlen_P>
 bb0:	4c 01       	movw	r8, r24
 bb2:	f3 2d       	mov	r31, r3
 bb4:	f0 68       	ori	r31, 0x80	; 128
 bb6:	3f 2e       	mov	r3, r31
 bb8:	82 01       	movw	r16, r4
 bba:	33 fc       	sbrc	r3, 3
 bbc:	1b c0       	rjmp	.+54     	; 0xbf4 <vfprintf+0x1c2>
 bbe:	82 2d       	mov	r24, r2
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	88 16       	cp	r8, r24
 bc4:	99 06       	cpc	r9, r25
 bc6:	b0 f4       	brcc	.+44     	; 0xbf4 <vfprintf+0x1c2>
 bc8:	b6 01       	movw	r22, r12
 bca:	80 e2       	ldi	r24, 0x20	; 32
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 bd2:	2a 94       	dec	r2
 bd4:	f4 cf       	rjmp	.-24     	; 0xbbe <vfprintf+0x18c>
 bd6:	f5 01       	movw	r30, r10
 bd8:	37 fc       	sbrc	r3, 7
 bda:	85 91       	lpm	r24, Z+
 bdc:	37 fe       	sbrs	r3, 7
 bde:	81 91       	ld	r24, Z+
 be0:	5f 01       	movw	r10, r30
 be2:	b6 01       	movw	r22, r12
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 bea:	21 10       	cpse	r2, r1
 bec:	2a 94       	dec	r2
 bee:	21 e0       	ldi	r18, 0x01	; 1
 bf0:	82 1a       	sub	r8, r18
 bf2:	91 08       	sbc	r9, r1
 bf4:	81 14       	cp	r8, r1
 bf6:	91 04       	cpc	r9, r1
 bf8:	71 f7       	brne	.-36     	; 0xbd6 <vfprintf+0x1a4>
 bfa:	e8 c0       	rjmp	.+464    	; 0xdcc <vfprintf+0x39a>
 bfc:	84 36       	cpi	r24, 0x64	; 100
 bfe:	11 f0       	breq	.+4      	; 0xc04 <vfprintf+0x1d2>
 c00:	89 36       	cpi	r24, 0x69	; 105
 c02:	41 f5       	brne	.+80     	; 0xc54 <vfprintf+0x222>
 c04:	f8 01       	movw	r30, r16
 c06:	37 fe       	sbrs	r3, 7
 c08:	07 c0       	rjmp	.+14     	; 0xc18 <vfprintf+0x1e6>
 c0a:	60 81       	ld	r22, Z
 c0c:	71 81       	ldd	r23, Z+1	; 0x01
 c0e:	82 81       	ldd	r24, Z+2	; 0x02
 c10:	93 81       	ldd	r25, Z+3	; 0x03
 c12:	0c 5f       	subi	r16, 0xFC	; 252
 c14:	1f 4f       	sbci	r17, 0xFF	; 255
 c16:	08 c0       	rjmp	.+16     	; 0xc28 <vfprintf+0x1f6>
 c18:	60 81       	ld	r22, Z
 c1a:	71 81       	ldd	r23, Z+1	; 0x01
 c1c:	07 2e       	mov	r0, r23
 c1e:	00 0c       	add	r0, r0
 c20:	88 0b       	sbc	r24, r24
 c22:	99 0b       	sbc	r25, r25
 c24:	0e 5f       	subi	r16, 0xFE	; 254
 c26:	1f 4f       	sbci	r17, 0xFF	; 255
 c28:	f3 2d       	mov	r31, r3
 c2a:	ff 76       	andi	r31, 0x6F	; 111
 c2c:	3f 2e       	mov	r3, r31
 c2e:	97 ff       	sbrs	r25, 7
 c30:	09 c0       	rjmp	.+18     	; 0xc44 <vfprintf+0x212>
 c32:	90 95       	com	r25
 c34:	80 95       	com	r24
 c36:	70 95       	com	r23
 c38:	61 95       	neg	r22
 c3a:	7f 4f       	sbci	r23, 0xFF	; 255
 c3c:	8f 4f       	sbci	r24, 0xFF	; 255
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	f0 68       	ori	r31, 0x80	; 128
 c42:	3f 2e       	mov	r3, r31
 c44:	2a e0       	ldi	r18, 0x0A	; 10
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	a3 01       	movw	r20, r6
 c4a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__ultoa_invert>
 c4e:	88 2e       	mov	r8, r24
 c50:	86 18       	sub	r8, r6
 c52:	45 c0       	rjmp	.+138    	; 0xcde <vfprintf+0x2ac>
 c54:	85 37       	cpi	r24, 0x75	; 117
 c56:	31 f4       	brne	.+12     	; 0xc64 <vfprintf+0x232>
 c58:	23 2d       	mov	r18, r3
 c5a:	2f 7e       	andi	r18, 0xEF	; 239
 c5c:	b2 2e       	mov	r11, r18
 c5e:	2a e0       	ldi	r18, 0x0A	; 10
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	25 c0       	rjmp	.+74     	; 0xcae <vfprintf+0x27c>
 c64:	93 2d       	mov	r25, r3
 c66:	99 7f       	andi	r25, 0xF9	; 249
 c68:	b9 2e       	mov	r11, r25
 c6a:	8f 36       	cpi	r24, 0x6F	; 111
 c6c:	c1 f0       	breq	.+48     	; 0xc9e <vfprintf+0x26c>
 c6e:	18 f4       	brcc	.+6      	; 0xc76 <vfprintf+0x244>
 c70:	88 35       	cpi	r24, 0x58	; 88
 c72:	79 f0       	breq	.+30     	; 0xc92 <vfprintf+0x260>
 c74:	b5 c0       	rjmp	.+362    	; 0xde0 <vfprintf+0x3ae>
 c76:	80 37       	cpi	r24, 0x70	; 112
 c78:	19 f0       	breq	.+6      	; 0xc80 <vfprintf+0x24e>
 c7a:	88 37       	cpi	r24, 0x78	; 120
 c7c:	21 f0       	breq	.+8      	; 0xc86 <vfprintf+0x254>
 c7e:	b0 c0       	rjmp	.+352    	; 0xde0 <vfprintf+0x3ae>
 c80:	e9 2f       	mov	r30, r25
 c82:	e0 61       	ori	r30, 0x10	; 16
 c84:	be 2e       	mov	r11, r30
 c86:	b4 fe       	sbrs	r11, 4
 c88:	0d c0       	rjmp	.+26     	; 0xca4 <vfprintf+0x272>
 c8a:	fb 2d       	mov	r31, r11
 c8c:	f4 60       	ori	r31, 0x04	; 4
 c8e:	bf 2e       	mov	r11, r31
 c90:	09 c0       	rjmp	.+18     	; 0xca4 <vfprintf+0x272>
 c92:	34 fe       	sbrs	r3, 4
 c94:	0a c0       	rjmp	.+20     	; 0xcaa <vfprintf+0x278>
 c96:	29 2f       	mov	r18, r25
 c98:	26 60       	ori	r18, 0x06	; 6
 c9a:	b2 2e       	mov	r11, r18
 c9c:	06 c0       	rjmp	.+12     	; 0xcaa <vfprintf+0x278>
 c9e:	28 e0       	ldi	r18, 0x08	; 8
 ca0:	30 e0       	ldi	r19, 0x00	; 0
 ca2:	05 c0       	rjmp	.+10     	; 0xcae <vfprintf+0x27c>
 ca4:	20 e1       	ldi	r18, 0x10	; 16
 ca6:	30 e0       	ldi	r19, 0x00	; 0
 ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x27c>
 caa:	20 e1       	ldi	r18, 0x10	; 16
 cac:	32 e0       	ldi	r19, 0x02	; 2
 cae:	f8 01       	movw	r30, r16
 cb0:	b7 fe       	sbrs	r11, 7
 cb2:	07 c0       	rjmp	.+14     	; 0xcc2 <vfprintf+0x290>
 cb4:	60 81       	ld	r22, Z
 cb6:	71 81       	ldd	r23, Z+1	; 0x01
 cb8:	82 81       	ldd	r24, Z+2	; 0x02
 cba:	93 81       	ldd	r25, Z+3	; 0x03
 cbc:	0c 5f       	subi	r16, 0xFC	; 252
 cbe:	1f 4f       	sbci	r17, 0xFF	; 255
 cc0:	06 c0       	rjmp	.+12     	; 0xcce <vfprintf+0x29c>
 cc2:	60 81       	ld	r22, Z
 cc4:	71 81       	ldd	r23, Z+1	; 0x01
 cc6:	80 e0       	ldi	r24, 0x00	; 0
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	0e 5f       	subi	r16, 0xFE	; 254
 ccc:	1f 4f       	sbci	r17, 0xFF	; 255
 cce:	a3 01       	movw	r20, r6
 cd0:	0e 94 4c 07 	call	0xe98	; 0xe98 <__ultoa_invert>
 cd4:	88 2e       	mov	r8, r24
 cd6:	86 18       	sub	r8, r6
 cd8:	fb 2d       	mov	r31, r11
 cda:	ff 77       	andi	r31, 0x7F	; 127
 cdc:	3f 2e       	mov	r3, r31
 cde:	36 fe       	sbrs	r3, 6
 ce0:	0d c0       	rjmp	.+26     	; 0xcfc <vfprintf+0x2ca>
 ce2:	23 2d       	mov	r18, r3
 ce4:	2e 7f       	andi	r18, 0xFE	; 254
 ce6:	a2 2e       	mov	r10, r18
 ce8:	89 14       	cp	r8, r9
 cea:	58 f4       	brcc	.+22     	; 0xd02 <vfprintf+0x2d0>
 cec:	34 fe       	sbrs	r3, 4
 cee:	0b c0       	rjmp	.+22     	; 0xd06 <vfprintf+0x2d4>
 cf0:	32 fc       	sbrc	r3, 2
 cf2:	09 c0       	rjmp	.+18     	; 0xd06 <vfprintf+0x2d4>
 cf4:	83 2d       	mov	r24, r3
 cf6:	8e 7e       	andi	r24, 0xEE	; 238
 cf8:	a8 2e       	mov	r10, r24
 cfa:	05 c0       	rjmp	.+10     	; 0xd06 <vfprintf+0x2d4>
 cfc:	b8 2c       	mov	r11, r8
 cfe:	a3 2c       	mov	r10, r3
 d00:	03 c0       	rjmp	.+6      	; 0xd08 <vfprintf+0x2d6>
 d02:	b8 2c       	mov	r11, r8
 d04:	01 c0       	rjmp	.+2      	; 0xd08 <vfprintf+0x2d6>
 d06:	b9 2c       	mov	r11, r9
 d08:	a4 fe       	sbrs	r10, 4
 d0a:	0f c0       	rjmp	.+30     	; 0xd2a <vfprintf+0x2f8>
 d0c:	fe 01       	movw	r30, r28
 d0e:	e8 0d       	add	r30, r8
 d10:	f1 1d       	adc	r31, r1
 d12:	80 81       	ld	r24, Z
 d14:	80 33       	cpi	r24, 0x30	; 48
 d16:	21 f4       	brne	.+8      	; 0xd20 <vfprintf+0x2ee>
 d18:	9a 2d       	mov	r25, r10
 d1a:	99 7e       	andi	r25, 0xE9	; 233
 d1c:	a9 2e       	mov	r10, r25
 d1e:	09 c0       	rjmp	.+18     	; 0xd32 <vfprintf+0x300>
 d20:	a2 fe       	sbrs	r10, 2
 d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0x2fe>
 d24:	b3 94       	inc	r11
 d26:	b3 94       	inc	r11
 d28:	04 c0       	rjmp	.+8      	; 0xd32 <vfprintf+0x300>
 d2a:	8a 2d       	mov	r24, r10
 d2c:	86 78       	andi	r24, 0x86	; 134
 d2e:	09 f0       	breq	.+2      	; 0xd32 <vfprintf+0x300>
 d30:	b3 94       	inc	r11
 d32:	a3 fc       	sbrc	r10, 3
 d34:	11 c0       	rjmp	.+34     	; 0xd58 <vfprintf+0x326>
 d36:	a0 fe       	sbrs	r10, 0
 d38:	06 c0       	rjmp	.+12     	; 0xd46 <vfprintf+0x314>
 d3a:	b2 14       	cp	r11, r2
 d3c:	88 f4       	brcc	.+34     	; 0xd60 <vfprintf+0x32e>
 d3e:	28 0c       	add	r2, r8
 d40:	92 2c       	mov	r9, r2
 d42:	9b 18       	sub	r9, r11
 d44:	0e c0       	rjmp	.+28     	; 0xd62 <vfprintf+0x330>
 d46:	b2 14       	cp	r11, r2
 d48:	60 f4       	brcc	.+24     	; 0xd62 <vfprintf+0x330>
 d4a:	b6 01       	movw	r22, r12
 d4c:	80 e2       	ldi	r24, 0x20	; 32
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 d54:	b3 94       	inc	r11
 d56:	f7 cf       	rjmp	.-18     	; 0xd46 <vfprintf+0x314>
 d58:	b2 14       	cp	r11, r2
 d5a:	18 f4       	brcc	.+6      	; 0xd62 <vfprintf+0x330>
 d5c:	2b 18       	sub	r2, r11
 d5e:	02 c0       	rjmp	.+4      	; 0xd64 <vfprintf+0x332>
 d60:	98 2c       	mov	r9, r8
 d62:	21 2c       	mov	r2, r1
 d64:	a4 fe       	sbrs	r10, 4
 d66:	10 c0       	rjmp	.+32     	; 0xd88 <vfprintf+0x356>
 d68:	b6 01       	movw	r22, r12
 d6a:	80 e3       	ldi	r24, 0x30	; 48
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 d72:	a2 fe       	sbrs	r10, 2
 d74:	17 c0       	rjmp	.+46     	; 0xda4 <vfprintf+0x372>
 d76:	a1 fc       	sbrc	r10, 1
 d78:	03 c0       	rjmp	.+6      	; 0xd80 <vfprintf+0x34e>
 d7a:	88 e7       	ldi	r24, 0x78	; 120
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	02 c0       	rjmp	.+4      	; 0xd84 <vfprintf+0x352>
 d80:	88 e5       	ldi	r24, 0x58	; 88
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	b6 01       	movw	r22, r12
 d86:	0c c0       	rjmp	.+24     	; 0xda0 <vfprintf+0x36e>
 d88:	8a 2d       	mov	r24, r10
 d8a:	86 78       	andi	r24, 0x86	; 134
 d8c:	59 f0       	breq	.+22     	; 0xda4 <vfprintf+0x372>
 d8e:	a1 fe       	sbrs	r10, 1
 d90:	02 c0       	rjmp	.+4      	; 0xd96 <vfprintf+0x364>
 d92:	8b e2       	ldi	r24, 0x2B	; 43
 d94:	01 c0       	rjmp	.+2      	; 0xd98 <vfprintf+0x366>
 d96:	80 e2       	ldi	r24, 0x20	; 32
 d98:	a7 fc       	sbrc	r10, 7
 d9a:	8d e2       	ldi	r24, 0x2D	; 45
 d9c:	b6 01       	movw	r22, r12
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 da4:	89 14       	cp	r8, r9
 da6:	38 f4       	brcc	.+14     	; 0xdb6 <vfprintf+0x384>
 da8:	b6 01       	movw	r22, r12
 daa:	80 e3       	ldi	r24, 0x30	; 48
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 db2:	9a 94       	dec	r9
 db4:	f7 cf       	rjmp	.-18     	; 0xda4 <vfprintf+0x372>
 db6:	8a 94       	dec	r8
 db8:	f3 01       	movw	r30, r6
 dba:	e8 0d       	add	r30, r8
 dbc:	f1 1d       	adc	r31, r1
 dbe:	80 81       	ld	r24, Z
 dc0:	b6 01       	movw	r22, r12
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 dc8:	81 10       	cpse	r8, r1
 dca:	f5 cf       	rjmp	.-22     	; 0xdb6 <vfprintf+0x384>
 dcc:	22 20       	and	r2, r2
 dce:	09 f4       	brne	.+2      	; 0xdd2 <vfprintf+0x3a0>
 dd0:	42 ce       	rjmp	.-892    	; 0xa56 <vfprintf+0x24>
 dd2:	b6 01       	movw	r22, r12
 dd4:	80 e2       	ldi	r24, 0x20	; 32
 dd6:	90 e0       	ldi	r25, 0x00	; 0
 dd8:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 ddc:	2a 94       	dec	r2
 dde:	f6 cf       	rjmp	.-20     	; 0xdcc <vfprintf+0x39a>
 de0:	f6 01       	movw	r30, r12
 de2:	86 81       	ldd	r24, Z+6	; 0x06
 de4:	97 81       	ldd	r25, Z+7	; 0x07
 de6:	02 c0       	rjmp	.+4      	; 0xdec <vfprintf+0x3ba>
 de8:	8f ef       	ldi	r24, 0xFF	; 255
 dea:	9f ef       	ldi	r25, 0xFF	; 255
 dec:	2b 96       	adiw	r28, 0x0b	; 11
 dee:	e2 e1       	ldi	r30, 0x12	; 18
 df0:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__epilogue_restores__>

00000df4 <strnlen_P>:
 df4:	fc 01       	movw	r30, r24
 df6:	05 90       	lpm	r0, Z+
 df8:	61 50       	subi	r22, 0x01	; 1
 dfa:	70 40       	sbci	r23, 0x00	; 0
 dfc:	01 10       	cpse	r0, r1
 dfe:	d8 f7       	brcc	.-10     	; 0xdf6 <strnlen_P+0x2>
 e00:	80 95       	com	r24
 e02:	90 95       	com	r25
 e04:	8e 0f       	add	r24, r30
 e06:	9f 1f       	adc	r25, r31
 e08:	08 95       	ret

00000e0a <strnlen>:
 e0a:	fc 01       	movw	r30, r24
 e0c:	61 50       	subi	r22, 0x01	; 1
 e0e:	70 40       	sbci	r23, 0x00	; 0
 e10:	01 90       	ld	r0, Z+
 e12:	01 10       	cpse	r0, r1
 e14:	d8 f7       	brcc	.-10     	; 0xe0c <strnlen+0x2>
 e16:	80 95       	com	r24
 e18:	90 95       	com	r25
 e1a:	8e 0f       	add	r24, r30
 e1c:	9f 1f       	adc	r25, r31
 e1e:	08 95       	ret

00000e20 <fputc>:
 e20:	0f 93       	push	r16
 e22:	1f 93       	push	r17
 e24:	cf 93       	push	r28
 e26:	df 93       	push	r29
 e28:	fb 01       	movw	r30, r22
 e2a:	23 81       	ldd	r18, Z+3	; 0x03
 e2c:	21 fd       	sbrc	r18, 1
 e2e:	03 c0       	rjmp	.+6      	; 0xe36 <fputc+0x16>
 e30:	8f ef       	ldi	r24, 0xFF	; 255
 e32:	9f ef       	ldi	r25, 0xFF	; 255
 e34:	2c c0       	rjmp	.+88     	; 0xe8e <fputc+0x6e>
 e36:	22 ff       	sbrs	r18, 2
 e38:	16 c0       	rjmp	.+44     	; 0xe66 <fputc+0x46>
 e3a:	46 81       	ldd	r20, Z+6	; 0x06
 e3c:	57 81       	ldd	r21, Z+7	; 0x07
 e3e:	24 81       	ldd	r18, Z+4	; 0x04
 e40:	35 81       	ldd	r19, Z+5	; 0x05
 e42:	42 17       	cp	r20, r18
 e44:	53 07       	cpc	r21, r19
 e46:	44 f4       	brge	.+16     	; 0xe58 <fputc+0x38>
 e48:	a0 81       	ld	r26, Z
 e4a:	b1 81       	ldd	r27, Z+1	; 0x01
 e4c:	9d 01       	movw	r18, r26
 e4e:	2f 5f       	subi	r18, 0xFF	; 255
 e50:	3f 4f       	sbci	r19, 0xFF	; 255
 e52:	31 83       	std	Z+1, r19	; 0x01
 e54:	20 83       	st	Z, r18
 e56:	8c 93       	st	X, r24
 e58:	26 81       	ldd	r18, Z+6	; 0x06
 e5a:	37 81       	ldd	r19, Z+7	; 0x07
 e5c:	2f 5f       	subi	r18, 0xFF	; 255
 e5e:	3f 4f       	sbci	r19, 0xFF	; 255
 e60:	37 83       	std	Z+7, r19	; 0x07
 e62:	26 83       	std	Z+6, r18	; 0x06
 e64:	14 c0       	rjmp	.+40     	; 0xe8e <fputc+0x6e>
 e66:	8b 01       	movw	r16, r22
 e68:	ec 01       	movw	r28, r24
 e6a:	fb 01       	movw	r30, r22
 e6c:	00 84       	ldd	r0, Z+8	; 0x08
 e6e:	f1 85       	ldd	r31, Z+9	; 0x09
 e70:	e0 2d       	mov	r30, r0
 e72:	09 95       	icall
 e74:	89 2b       	or	r24, r25
 e76:	e1 f6       	brne	.-72     	; 0xe30 <fputc+0x10>
 e78:	d8 01       	movw	r26, r16
 e7a:	16 96       	adiw	r26, 0x06	; 6
 e7c:	8d 91       	ld	r24, X+
 e7e:	9c 91       	ld	r25, X
 e80:	17 97       	sbiw	r26, 0x07	; 7
 e82:	01 96       	adiw	r24, 0x01	; 1
 e84:	17 96       	adiw	r26, 0x07	; 7
 e86:	9c 93       	st	X, r25
 e88:	8e 93       	st	-X, r24
 e8a:	16 97       	sbiw	r26, 0x06	; 6
 e8c:	ce 01       	movw	r24, r28
 e8e:	df 91       	pop	r29
 e90:	cf 91       	pop	r28
 e92:	1f 91       	pop	r17
 e94:	0f 91       	pop	r16
 e96:	08 95       	ret

00000e98 <__ultoa_invert>:
 e98:	fa 01       	movw	r30, r20
 e9a:	aa 27       	eor	r26, r26
 e9c:	28 30       	cpi	r18, 0x08	; 8
 e9e:	51 f1       	breq	.+84     	; 0xef4 <__ultoa_invert+0x5c>
 ea0:	20 31       	cpi	r18, 0x10	; 16
 ea2:	81 f1       	breq	.+96     	; 0xf04 <__ultoa_invert+0x6c>
 ea4:	e8 94       	clt
 ea6:	6f 93       	push	r22
 ea8:	6e 7f       	andi	r22, 0xFE	; 254
 eaa:	6e 5f       	subi	r22, 0xFE	; 254
 eac:	7f 4f       	sbci	r23, 0xFF	; 255
 eae:	8f 4f       	sbci	r24, 0xFF	; 255
 eb0:	9f 4f       	sbci	r25, 0xFF	; 255
 eb2:	af 4f       	sbci	r26, 0xFF	; 255
 eb4:	b1 e0       	ldi	r27, 0x01	; 1
 eb6:	3e d0       	rcall	.+124    	; 0xf34 <__ultoa_invert+0x9c>
 eb8:	b4 e0       	ldi	r27, 0x04	; 4
 eba:	3c d0       	rcall	.+120    	; 0xf34 <__ultoa_invert+0x9c>
 ebc:	67 0f       	add	r22, r23
 ebe:	78 1f       	adc	r23, r24
 ec0:	89 1f       	adc	r24, r25
 ec2:	9a 1f       	adc	r25, r26
 ec4:	a1 1d       	adc	r26, r1
 ec6:	68 0f       	add	r22, r24
 ec8:	79 1f       	adc	r23, r25
 eca:	8a 1f       	adc	r24, r26
 ecc:	91 1d       	adc	r25, r1
 ece:	a1 1d       	adc	r26, r1
 ed0:	6a 0f       	add	r22, r26
 ed2:	71 1d       	adc	r23, r1
 ed4:	81 1d       	adc	r24, r1
 ed6:	91 1d       	adc	r25, r1
 ed8:	a1 1d       	adc	r26, r1
 eda:	20 d0       	rcall	.+64     	; 0xf1c <__ultoa_invert+0x84>
 edc:	09 f4       	brne	.+2      	; 0xee0 <__ultoa_invert+0x48>
 ede:	68 94       	set
 ee0:	3f 91       	pop	r19
 ee2:	2a e0       	ldi	r18, 0x0A	; 10
 ee4:	26 9f       	mul	r18, r22
 ee6:	11 24       	eor	r1, r1
 ee8:	30 19       	sub	r19, r0
 eea:	30 5d       	subi	r19, 0xD0	; 208
 eec:	31 93       	st	Z+, r19
 eee:	de f6       	brtc	.-74     	; 0xea6 <__ultoa_invert+0xe>
 ef0:	cf 01       	movw	r24, r30
 ef2:	08 95       	ret
 ef4:	46 2f       	mov	r20, r22
 ef6:	47 70       	andi	r20, 0x07	; 7
 ef8:	40 5d       	subi	r20, 0xD0	; 208
 efa:	41 93       	st	Z+, r20
 efc:	b3 e0       	ldi	r27, 0x03	; 3
 efe:	0f d0       	rcall	.+30     	; 0xf1e <__ultoa_invert+0x86>
 f00:	c9 f7       	brne	.-14     	; 0xef4 <__ultoa_invert+0x5c>
 f02:	f6 cf       	rjmp	.-20     	; 0xef0 <__ultoa_invert+0x58>
 f04:	46 2f       	mov	r20, r22
 f06:	4f 70       	andi	r20, 0x0F	; 15
 f08:	40 5d       	subi	r20, 0xD0	; 208
 f0a:	4a 33       	cpi	r20, 0x3A	; 58
 f0c:	18 f0       	brcs	.+6      	; 0xf14 <__ultoa_invert+0x7c>
 f0e:	49 5d       	subi	r20, 0xD9	; 217
 f10:	31 fd       	sbrc	r19, 1
 f12:	40 52       	subi	r20, 0x20	; 32
 f14:	41 93       	st	Z+, r20
 f16:	02 d0       	rcall	.+4      	; 0xf1c <__ultoa_invert+0x84>
 f18:	a9 f7       	brne	.-22     	; 0xf04 <__ultoa_invert+0x6c>
 f1a:	ea cf       	rjmp	.-44     	; 0xef0 <__ultoa_invert+0x58>
 f1c:	b4 e0       	ldi	r27, 0x04	; 4
 f1e:	a6 95       	lsr	r26
 f20:	97 95       	ror	r25
 f22:	87 95       	ror	r24
 f24:	77 95       	ror	r23
 f26:	67 95       	ror	r22
 f28:	ba 95       	dec	r27
 f2a:	c9 f7       	brne	.-14     	; 0xf1e <__ultoa_invert+0x86>
 f2c:	00 97       	sbiw	r24, 0x00	; 0
 f2e:	61 05       	cpc	r22, r1
 f30:	71 05       	cpc	r23, r1
 f32:	08 95       	ret
 f34:	9b 01       	movw	r18, r22
 f36:	ac 01       	movw	r20, r24
 f38:	0a 2e       	mov	r0, r26
 f3a:	06 94       	lsr	r0
 f3c:	57 95       	ror	r21
 f3e:	47 95       	ror	r20
 f40:	37 95       	ror	r19
 f42:	27 95       	ror	r18
 f44:	ba 95       	dec	r27
 f46:	c9 f7       	brne	.-14     	; 0xf3a <__ultoa_invert+0xa2>
 f48:	62 0f       	add	r22, r18
 f4a:	73 1f       	adc	r23, r19
 f4c:	84 1f       	adc	r24, r20
 f4e:	95 1f       	adc	r25, r21
 f50:	a0 1d       	adc	r26, r0
 f52:	08 95       	ret

00000f54 <__prologue_saves__>:
 f54:	2f 92       	push	r2
 f56:	3f 92       	push	r3
 f58:	4f 92       	push	r4
 f5a:	5f 92       	push	r5
 f5c:	6f 92       	push	r6
 f5e:	7f 92       	push	r7
 f60:	8f 92       	push	r8
 f62:	9f 92       	push	r9
 f64:	af 92       	push	r10
 f66:	bf 92       	push	r11
 f68:	cf 92       	push	r12
 f6a:	df 92       	push	r13
 f6c:	ef 92       	push	r14
 f6e:	ff 92       	push	r15
 f70:	0f 93       	push	r16
 f72:	1f 93       	push	r17
 f74:	cf 93       	push	r28
 f76:	df 93       	push	r29
 f78:	cd b7       	in	r28, 0x3d	; 61
 f7a:	de b7       	in	r29, 0x3e	; 62
 f7c:	ca 1b       	sub	r28, r26
 f7e:	db 0b       	sbc	r29, r27
 f80:	0f b6       	in	r0, 0x3f	; 63
 f82:	f8 94       	cli
 f84:	de bf       	out	0x3e, r29	; 62
 f86:	0f be       	out	0x3f, r0	; 63
 f88:	cd bf       	out	0x3d, r28	; 61
 f8a:	09 94       	ijmp

00000f8c <__epilogue_restores__>:
 f8c:	2a 88       	ldd	r2, Y+18	; 0x12
 f8e:	39 88       	ldd	r3, Y+17	; 0x11
 f90:	48 88       	ldd	r4, Y+16	; 0x10
 f92:	5f 84       	ldd	r5, Y+15	; 0x0f
 f94:	6e 84       	ldd	r6, Y+14	; 0x0e
 f96:	7d 84       	ldd	r7, Y+13	; 0x0d
 f98:	8c 84       	ldd	r8, Y+12	; 0x0c
 f9a:	9b 84       	ldd	r9, Y+11	; 0x0b
 f9c:	aa 84       	ldd	r10, Y+10	; 0x0a
 f9e:	b9 84       	ldd	r11, Y+9	; 0x09
 fa0:	c8 84       	ldd	r12, Y+8	; 0x08
 fa2:	df 80       	ldd	r13, Y+7	; 0x07
 fa4:	ee 80       	ldd	r14, Y+6	; 0x06
 fa6:	fd 80       	ldd	r15, Y+5	; 0x05
 fa8:	0c 81       	ldd	r16, Y+4	; 0x04
 faa:	1b 81       	ldd	r17, Y+3	; 0x03
 fac:	aa 81       	ldd	r26, Y+2	; 0x02
 fae:	b9 81       	ldd	r27, Y+1	; 0x01
 fb0:	ce 0f       	add	r28, r30
 fb2:	d1 1d       	adc	r29, r1
 fb4:	0f b6       	in	r0, 0x3f	; 63
 fb6:	f8 94       	cli
 fb8:	de bf       	out	0x3e, r29	; 62
 fba:	0f be       	out	0x3f, r0	; 63
 fbc:	cd bf       	out	0x3d, r28	; 61
 fbe:	ed 01       	movw	r28, r26
 fc0:	08 95       	ret

00000fc2 <_exit>:
 fc2:	f8 94       	cli

00000fc4 <__stop_program>:
 fc4:	ff cf       	rjmp	.-2      	; 0xfc4 <__stop_program>
