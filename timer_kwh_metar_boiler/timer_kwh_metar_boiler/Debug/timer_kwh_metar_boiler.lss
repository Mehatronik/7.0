
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00001560  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  00800160  00800160  00001654  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000242b  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e73  00000000  00000000  00003d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e5  00000000  00000000  00004be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  000062cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c2  00000000  00000000  00006954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001df3  00000000  00000000  00007316  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00009109  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_20>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e6       	ldi	r30, 0x60	; 96
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 36       	cpi	r26, 0x60	; 96
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e6       	ldi	r26, 0x60	; 96
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 3b       	cpi	r26, 0xB8	; 184
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 0c 05 	call	0xa18	; 0xa18 <main>
      9e:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init()
{
	DDRD |= 1<<PINB7;
      a6:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
      a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
      ac:	80 ec       	ldi	r24, 0xC0	; 192
      ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
      b2:	8e ee       	ldi	r24, 0xEE	; 238
      b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
      b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
      bc:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
      c0:	08 95       	ret

000000c2 <__vector_21>:
	
}

ISR(ADC_vect)
{
      c2:	1f 92       	push	r1
      c4:	0f 92       	push	r0
      c6:	0f b6       	in	r0, 0x3f	; 63
      c8:	0f 92       	push	r0
      ca:	11 24       	eor	r1, r1
      cc:	8f 93       	push	r24
      ce:	9f 93       	push	r25
      d0:	ef 93       	push	r30
      d2:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//upis ad konverzije oba kanala u odgovarajuce promenljive
	if(ad_kanal == 0)
      d4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
      d8:	81 11       	cpse	r24, r1
      da:	09 c0       	rjmp	.+18     	; 0xee <__vector_21+0x2c>
		mereni_napon = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
      dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      e4:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <mereni_napon+0x1>
      e8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <mereni_napon>
      ec:	0c c0       	rjmp	.+24     	; 0x106 <__vector_21+0x44>
	else if(ad_kanal == 1)
      ee:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	41 f4       	brne	.+16     	; 0x106 <__vector_21+0x44>
		merena_struja = (uint16_t)ADC;
      f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      fe:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <merena_struja+0x1>
     102:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <merena_struja>
	

	
	/**************************************************************************************************************/
	ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     106:	ea e7       	ldi	r30, 0x7A	; 122
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
     110:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     114:	8f 5f       	subi	r24, 0xFF	; 255
     116:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
	if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     11a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	10 f0       	brcs	.+4      	; 0x126 <__vector_21+0x64>
		ad_kanal = 0;
     122:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
		


	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
     126:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     12a:	88 23       	and	r24, r24
     12c:	19 f0       	breq	.+6      	; 0x134 <__vector_21+0x72>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	39 f0       	breq	.+14     	; 0x140 <__vector_21+0x7e>
     132:	0e c0       	rjmp	.+28     	; 0x150 <__vector_21+0x8e>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     134:	ec e7       	ldi	r30, 0x7C	; 124
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	8c 7f       	andi	r24, 0xFC	; 252
     13c:	80 83       	st	Z, r24
		break;
     13e:	08 c0       	rjmp	.+16     	; 0x150 <__vector_21+0x8e>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     140:	ec e7       	ldi	r30, 0x7C	; 124
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	8d 7f       	andi	r24, 0xFD	; 253
     148:	80 83       	st	Z, r24
				ADMUX |= (0b1);
     14a:	80 81       	ld	r24, Z
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     150:	ea e7       	ldi	r30, 0x7A	; 122
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 6c       	ori	r24, 0xC0	; 192
     158:	80 83       	st	Z, r24
	
	
	//trajanje dela sa multipleksiranjem: ~ 1.7 us


}
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	9f 91       	pop	r25
     160:	8f 91       	pop	r24
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     16c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     170:	88 e4       	ldi	r24, 0x48	; 72
     172:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     176:	08 95       	ret

00000178 <i2c_start_wait>:
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	ec eb       	ldi	r30, 0xBC	; 188
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	24 ea       	ldi	r18, 0xA4	; 164
     182:	a9 eb       	ldi	r26, 0xB9	; 185
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	cb eb       	ldi	r28, 0xBB	; 187
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	34 e8       	ldi	r19, 0x84	; 132
     18c:	44 e9       	ldi	r20, 0x94	; 148
     18e:	20 83       	st	Z, r18
     190:	90 81       	ld	r25, Z
     192:	99 23       	and	r25, r25
     194:	ec f7       	brge	.-6      	; 0x190 <i2c_start_wait+0x18>
     196:	9c 91       	ld	r25, X
     198:	98 7f       	andi	r25, 0xF8	; 248
     19a:	98 30       	cpi	r25, 0x08	; 8
     19c:	11 f0       	breq	.+4      	; 0x1a2 <i2c_start_wait+0x2a>
     19e:	90 31       	cpi	r25, 0x10	; 16
     1a0:	b1 f7       	brne	.-20     	; 0x18e <i2c_start_wait+0x16>
     1a2:	88 83       	st	Y, r24
     1a4:	30 83       	st	Z, r19
     1a6:	90 81       	ld	r25, Z
     1a8:	99 23       	and	r25, r25
     1aa:	ec f7       	brge	.-6      	; 0x1a6 <i2c_start_wait+0x2e>
     1ac:	9c 91       	ld	r25, X
     1ae:	98 7f       	andi	r25, 0xF8	; 248
     1b0:	90 32       	cpi	r25, 0x20	; 32
     1b2:	11 f0       	breq	.+4      	; 0x1b8 <i2c_start_wait+0x40>
     1b4:	98 35       	cpi	r25, 0x58	; 88
     1b6:	29 f4       	brne	.+10     	; 0x1c2 <i2c_start_wait+0x4a>
     1b8:	40 83       	st	Z, r20
     1ba:	90 81       	ld	r25, Z
     1bc:	94 fd       	sbrc	r25, 4
     1be:	fd cf       	rjmp	.-6      	; 0x1ba <i2c_start_wait+0x42>
     1c0:	e6 cf       	rjmp	.-52     	; 0x18e <i2c_start_wait+0x16>
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <i2c_stop>:
     1c8:	84 e9       	ldi	r24, 0x94	; 148
     1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1ce:	ec eb       	ldi	r30, 0xBC	; 188
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	84 fd       	sbrc	r24, 4
     1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <i2c_stop+0xa>
     1d8:	08 95       	ret

000001da <i2c_write>:
     1da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1de:	84 e8       	ldi	r24, 0x84	; 132
     1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1e4:	ec eb       	ldi	r30, 0xBC	; 188
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	88 23       	and	r24, r24
     1ec:	ec f7       	brge	.-6      	; 0x1e8 <i2c_write+0xe>
     1ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1f2:	98 7f       	andi	r25, 0xF8	; 248
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	98 32       	cpi	r25, 0x28	; 40
     1f8:	09 f4       	brne	.+2      	; 0x1fc <i2c_write+0x22>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	08 95       	ret

000001fe <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1fe:	84 e8       	ldi	r24, 0x84	; 132
     200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     204:	ec eb       	ldi	r30, 0xBC	; 188
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	88 23       	and	r24, r24
     20c:	ec f7       	brge	.-6      	; 0x208 <i2c_readNak+0xa>
	
    return TWDR;
     20e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     212:	08 95       	ret

00000214 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     214:	cf 93       	push	r28
     216:	c8 2f       	mov	r28, r24
     218:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     21a:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
	i2c_write(value);                      // write 
     21e:	8c 2f       	mov	r24, r28
     220:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     224:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_stop>
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	cf 93       	push	r28
     22e:	c8 2f       	mov	r28, r24
     230:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <led_pin>
     234:	84 60       	ori	r24, 0x04	; 4
     236:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <led_pin>
     23a:	6e e4       	ldi	r22, 0x4E	; 78
     23c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     240:	87 ec       	ldi	r24, 0xC7	; 199
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <putnibble+0x18>
     248:	00 c0       	rjmp	.+0      	; 0x24a <putnibble+0x1e>
     24a:	00 00       	nop
     24c:	c2 95       	swap	r28
     24e:	c0 7f       	andi	r28, 0xF0	; 240
     250:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <led_pin>
     254:	6e e4       	ldi	r22, 0x4E	; 78
     256:	8c 2b       	or	r24, r28
     258:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     25c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <led_pin>
     260:	8b 7f       	andi	r24, 0xFB	; 251
     262:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <led_pin>
     266:	6e e4       	ldi	r22, 0x4E	; 78
     268:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     26c:	87 ec       	ldi	r24, 0xC7	; 199
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <putnibble+0x44>
     274:	00 c0       	rjmp	.+0      	; 0x276 <putnibble+0x4a>
     276:	00 00       	nop
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <lcd1602_send_byte>:
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	c8 2f       	mov	r28, r24
     282:	d8 2f       	mov	r29, r24
     284:	d2 95       	swap	r29
     286:	df 70       	andi	r29, 0x0F	; 15
     288:	61 11       	cpse	r22, r1
     28a:	09 c0       	rjmp	.+18     	; 0x29e <lcd1602_send_byte+0x22>
     28c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <led_pin>
     290:	8e 7f       	andi	r24, 0xFE	; 254
     292:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <led_pin>
     296:	6e e4       	ldi	r22, 0x4E	; 78
     298:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <lcd1602_send_byte+0x32>
     29e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <led_pin>
     2a2:	81 60       	ori	r24, 0x01	; 1
     2a4:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <led_pin>
     2a8:	6e e4       	ldi	r22, 0x4E	; 78
     2aa:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     2ae:	8d 2f       	mov	r24, r29
     2b0:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2b4:	8c 2f       	mov	r24, r28
     2b6:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <lcd1602_send_char>:
     2c0:	cf 93       	push	r28
     2c2:	c8 2f       	mov	r28, r24
     2c4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <led_pin>
     2c8:	81 60       	ori	r24, 0x01	; 1
     2ca:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <led_pin>
     2ce:	6e e4       	ldi	r22, 0x4E	; 78
     2d0:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     2d4:	8c 2f       	mov	r24, r28
     2d6:	82 95       	swap	r24
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2de:	8c 2f       	mov	r24, r28
     2e0:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <lcd1602_init>:
     2e8:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <led_pin>
     2ec:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_init>
     2f0:	8f e5       	ldi	r24, 0x5F	; 95
     2f2:	9a ee       	ldi	r25, 0xEA	; 234
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd1602_init+0xc>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd1602_init+0x12>
     2fa:	00 00       	nop
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     302:	8f e7       	ldi	r24, 0x7F	; 127
     304:	9e e3       	ldi	r25, 0x3E	; 62
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd1602_init+0x1e>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd1602_init+0x24>
     30c:	00 00       	nop
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     314:	8f e8       	ldi	r24, 0x8F	; 143
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <lcd1602_init+0x30>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd1602_init+0x36>
     31e:	00 00       	nop
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     326:	8f e9       	ldi	r24, 0x9F	; 159
     328:	9f e0       	ldi	r25, 0x0F	; 15
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <lcd1602_init+0x42>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <lcd1602_init+0x48>
     330:	00 00       	nop
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	0e 94 16 01 	call	0x22c	; 0x22c <putnibble>
     338:	8f e9       	ldi	r24, 0x9F	; 159
     33a:	9f e0       	ldi	r25, 0x0F	; 15
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <lcd1602_init+0x54>
     340:	00 c0       	rjmp	.+0      	; 0x342 <lcd1602_init+0x5a>
     342:	00 00       	nop
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	88 e2       	ldi	r24, 0x28	; 40
     348:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     34c:	8f e9       	ldi	r24, 0x9F	; 159
     34e:	9f e0       	ldi	r25, 0x0F	; 15
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <lcd1602_init+0x68>
     354:	00 c0       	rjmp	.+0      	; 0x356 <lcd1602_init+0x6e>
     356:	00 00       	nop
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	8c e0       	ldi	r24, 0x0C	; 12
     35c:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     360:	8f e9       	ldi	r24, 0x9F	; 159
     362:	9f e0       	ldi	r25, 0x0F	; 15
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd1602_init+0x7c>
     368:	00 c0       	rjmp	.+0      	; 0x36a <lcd1602_init+0x82>
     36a:	00 00       	nop
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     374:	8f e9       	ldi	r24, 0x9F	; 159
     376:	9f e0       	ldi	r25, 0x0F	; 15
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <lcd1602_init+0x90>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <lcd1602_init+0x96>
     37e:	00 00       	nop
     380:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <led_pin>
     384:	88 60       	ori	r24, 0x08	; 8
     386:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <led_pin>
     38a:	6e e4       	ldi	r22, 0x4E	; 78
     38c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     390:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <led_pin>
     394:	8d 7f       	andi	r24, 0xFD	; 253
     396:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <led_pin>
     39a:	6e e4       	ldi	r22, 0x4E	; 78
     39c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_send_packet>
     3a0:	08 95       	ret

000003a2 <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     3a2:	90 e4       	ldi	r25, 0x40	; 64
     3a4:	69 9f       	mul	r22, r25
     3a6:	80 0d       	add	r24, r0
     3a8:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     3b2:	08 95       	ret

000003b4 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     3bc:	80 81       	ld	r24, Z
     3be:	88 23       	and	r24, r24
     3c0:	59 f0       	breq	.+22     	; 0x3d8 <lcd1602_send_string+0x24>
     3c2:	8f 01       	movw	r16, r30
     3c4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     3c6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd1602_send_char>
		i++;
     3ca:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     3cc:	f8 01       	movw	r30, r16
     3ce:	ec 0f       	add	r30, r28
     3d0:	f1 1d       	adc	r31, r1
     3d2:	80 81       	ld	r24, Z
     3d4:	81 11       	cpse	r24, r1
     3d6:	f7 cf       	rjmp	.-18     	; 0x3c6 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     3e0:	88 23       	and	r24, r24
     3e2:	29 f0       	breq	.+10     	; 0x3ee <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	8f e0       	ldi	r24, 0x0F	; 15
     3e8:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     3ec:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	8c e0       	ldi	r24, 0x0C	; 12
     3f2:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd1602_send_byte>
     3f6:	08 95       	ret

000003f8 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     3f8:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     3fa:	dc 01       	movw	r26, r24
     3fc:	12 96       	adiw	r26, 0x02	; 2
     3fe:	2c 91       	ld	r18, X
     400:	12 97       	sbiw	r26, 0x02	; 2
     402:	54 e6       	ldi	r21, 0x64	; 100
     404:	11 96       	adiw	r26, 0x01	; 1
     406:	8c 91       	ld	r24, X
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	52 9f       	mul	r21, r18
     40c:	80 0d       	add	r24, r0
     40e:	91 1d       	adc	r25, r1
     410:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     412:	db 01       	movw	r26, r22
     414:	12 96       	adiw	r26, 0x02	; 2
     416:	2c 91       	ld	r18, X
     418:	12 97       	sbiw	r26, 0x02	; 2
     41a:	11 96       	adiw	r26, 0x01	; 1
     41c:	6c 91       	ld	r22, X
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	52 9f       	mul	r21, r18
     422:	60 0d       	add	r22, r0
     424:	71 1d       	adc	r23, r1
     426:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     428:	42 81       	ldd	r20, Z+2	; 0x02
     42a:	21 81       	ldd	r18, Z+1	; 0x01
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	54 9f       	mul	r21, r20
     430:	20 0d       	add	r18, r0
     432:	31 1d       	adc	r19, r1
     434:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     436:	86 17       	cp	r24, r22
     438:	97 07       	cpc	r25, r23
     43a:	68 f0       	brcs	.+26     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     43c:	28 17       	cp	r18, r24
     43e:	39 07       	cpc	r19, r25
     440:	20 f0       	brcs	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     442:	28 33       	cpi	r18, 0x38	; 56
     444:	b9 e0       	ldi	r27, 0x09	; 9
     446:	3b 07       	cpc	r19, r27
     448:	78 f0       	brcs	.+30     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	26 17       	cp	r18, r22
     44e:	37 07       	cpc	r19, r23
     450:	70 f0       	brcs	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     456:	28 17       	cp	r18, r24
     458:	39 07       	cpc	r19, r25
     45a:	40 f0       	brcs	.+16     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	26 17       	cp	r18, r22
     460:	37 07       	cpc	r19, r23
     462:	28 f0       	brcs	.+10     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     46c:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     46e:	08 95       	ret

00000470 <fsm_lcd_menu>:

void fsm_lcd_menu()
{
     470:	0f 93       	push	r16
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
	switch(STATE)
     476:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <STATE>
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	09 f4       	brne	.+2      	; 0x480 <fsm_lcd_menu+0x10>
     47e:	76 c0       	rjmp	.+236    	; 0x56c <fsm_lcd_menu+0xfc>
     480:	83 30       	cpi	r24, 0x03	; 3
     482:	09 f4       	brne	.+2      	; 0x486 <fsm_lcd_menu+0x16>
     484:	eb c0       	rjmp	.+470    	; 0x65c <fsm_lcd_menu+0x1ec>
     486:	81 11       	cpse	r24, r1
     488:	c3 c2       	rjmp	.+1414   	; 0xa10 <__stack+0x111>
	{
		
		case DISPL1:
		/* ispis vremena svaki sekund dok je u ovom CASE-u */
		if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     48a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <flag_pc_int>
     48e:	88 23       	and	r24, r24
     490:	09 f4       	brne	.+2      	; 0x494 <fsm_lcd_menu+0x24>
     492:	60 c0       	rjmp	.+192    	; 0x554 <fsm_lcd_menu+0xe4>
		{
			flag_pc_int = 0; //resetujem flag koji je u ISR
     494:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <flag_pc_int>
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     498:	00 e0       	ldi	r16, 0x00	; 0
     49a:	2d ea       	ldi	r18, 0xAD	; 173
     49c:	31 e0       	ldi	r19, 0x01	; 1
     49e:	45 ea       	ldi	r20, 0xA5	; 165
     4a0:	51 e0       	ldi	r21, 0x01	; 1
     4a2:	66 ea       	ldi	r22, 0xA6	; 166
     4a4:	71 e0       	ldi	r23, 0x01	; 1
     4a6:	87 ea       	ldi	r24, 0xA7	; 167
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 38 06 	call	0xc70	; 0xc70 <getTime>
			sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     4ae:	e5 ea       	ldi	r30, 0xA5	; 165
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	80 81       	ld	r24, Z
     4b4:	1f 92       	push	r1
     4b6:	8f 93       	push	r24
     4b8:	81 81       	ldd	r24, Z+1	; 0x01
     4ba:	1f 92       	push	r1
     4bc:	8f 93       	push	r24
     4be:	82 81       	ldd	r24, Z+2	; 0x02
     4c0:	1f 92       	push	r1
     4c2:	8f 93       	push	r24
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	9f 93       	push	r25
     4ca:	8f 93       	push	r24
     4cc:	c6 e7       	ldi	r28, 0x76	; 118
     4ce:	d1 e0       	ldi	r29, 0x01	; 1
     4d0:	df 93       	push	r29
     4d2:	cf 93       	push	r28
     4d4:	0e 94 c4 07 	call	0xf88	; 0xf88 <sprintf>
			//send_str("\n"); //novi red
			
			//lcd1602_clear();
			
			/*izbegao sam celear-ovanje ekrana koje izaziva teperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
			lcd1602_goto_xy(0,0);
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
			lcd1602_send_string("    ");
     4e0:	84 e3       	ldi	r24, 0x34	; 52
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			lcd1602_send_string(bafer);
     4e8:	ce 01       	movw	r24, r28
     4ea:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			lcd1602_send_string("    ");
     4ee:	84 e3       	ldi	r24, 0x34	; 52
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			
			lcd1602_goto_xy(0,1);
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
			lcd1602_send_string("  ");
     4fe:	86 e3       	ldi	r24, 0x36	; 54
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			sprintf(bafer, "%02d:%02d->%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     506:	ec e9       	ldi	r30, 0x9C	; 156
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	81 81       	ldd	r24, Z+1	; 0x01
     50c:	1f 92       	push	r1
     50e:	8f 93       	push	r24
     510:	82 81       	ldd	r24, Z+2	; 0x02
     512:	1f 92       	push	r1
     514:	8f 93       	push	r24
     516:	e3 e9       	ldi	r30, 0x93	; 147
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	81 81       	ldd	r24, Z+1	; 0x01
     51c:	1f 92       	push	r1
     51e:	8f 93       	push	r24
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	1f 92       	push	r1
     524:	8f 93       	push	r24
     526:	82 e1       	ldi	r24, 0x12	; 18
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	9f 93       	push	r25
     52c:	8f 93       	push	r24
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	0e 94 c4 07 	call	0xf88	; 0xf88 <sprintf>
			lcd1602_send_string(bafer);
     536:	ce 01       	movw	r24, r28
     538:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			lcd1602_send_string("  ");
     53c:	86 e3       	ldi	r24, 0x36	; 54
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
     544:	8d b7       	in	r24, 0x3d	; 61
     546:	9e b7       	in	r25, 0x3e	; 62
     548:	46 96       	adiw	r24, 0x16	; 22
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	9e bf       	out	0x3e, r25	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	8d bf       	out	0x3d, r24	; 61
			
		}
		
		if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut   !(tasteri & (1<<TASTER_ENTER))
     554:	65 e0       	ldi	r22, 0x05	; 5
     556:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     55a:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     55e:	88 23       	and	r24, r24
     560:	09 f4       	brne	.+2      	; 0x564 <fsm_lcd_menu+0xf4>
     562:	56 c2       	rjmp	.+1196   	; 0xa10 <__stack+0x111>
		STATE = MENU1;
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <STATE>
     56a:	52 c2       	rjmp	.+1188   	; 0xa10 <__stack+0x111>
		break;
		
		case MENU1:
		//lcd1602_clear();
		
		lcd1602_goto_xy(0, kursor);
     56c:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <kursor>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
		lcd1602_send_string(">");
     576:	87 e2       	ldi	r24, 0x27	; 39
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
		lcd1602_goto_xy(0, !kursor);
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     584:	81 11       	cpse	r24, r1
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
		lcd1602_send_string(" ");
     58e:	87 e3       	ldi	r24, 0x37	; 55
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
		
		lcd1602_goto_xy(1,0);
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
		lcd1602_send_string("PODESI SAT     ");
     59e:	89 e2       	ldi	r24, 0x29	; 41
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
		lcd1602_goto_xy(1,1);
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
		lcd1602_send_string("PODESI PERIOD  ");
     5ae:	89 e3       	ldi	r24, 0x39	; 57
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
		
		if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     5bc:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     5c0:	88 23       	and	r24, r24
     5c2:	61 f0       	breq	.+24     	; 0x5dc <fsm_lcd_menu+0x16c>
		{
			kursor++;
     5c4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     5c8:	8f 5f       	subi	r24, 0xFF	; 255
			if(kursor > 1)
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	1c f4       	brge	.+6      	; 0x5d4 <fsm_lcd_menu+0x164>
		lcd1602_goto_xy(1,1);
		lcd1602_send_string("PODESI PERIOD  ");
		
		if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
		{
			kursor++;
     5ce:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kursor>
     5d2:	1e c2       	rjmp	.+1084   	; 0xa10 <__stack+0x111>
			if(kursor > 1)
			kursor = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kursor>
     5da:	1a c2       	rjmp	.+1076   	; 0xa10 <__stack+0x111>
		}
		else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     5dc:	62 e0       	ldi	r22, 0x02	; 2
     5de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     5e2:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     5e6:	88 23       	and	r24, r24
     5e8:	51 f0       	breq	.+20     	; 0x5fe <fsm_lcd_menu+0x18e>
		{
			kursor--;
     5ea:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     5ee:	81 50       	subi	r24, 0x01	; 1
			if(kursor < 0)
     5f0:	1a f0       	brmi	.+6      	; 0x5f8 <fsm_lcd_menu+0x188>
			if(kursor > 1)
			kursor = 1;
		}
		else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
		{
			kursor--;
     5f2:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kursor>
     5f6:	0c c2       	rjmp	.+1048   	; 0xa10 <__stack+0x111>
			if(kursor < 0)
			kursor = 0;
     5f8:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <kursor>
     5fc:	09 c2       	rjmp	.+1042   	; 0xa10 <__stack+0x111>
		}
		else if(kursor == 0 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     5fe:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     602:	81 11       	cpse	r24, r1
     604:	0d c0       	rjmp	.+26     	; 0x620 <fsm_lcd_menu+0x1b0>
     606:	65 e0       	ldi	r22, 0x05	; 5
     608:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     60c:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     610:	88 23       	and	r24, r24
     612:	31 f0       	breq	.+12     	; 0x620 <fsm_lcd_menu+0x1b0>
		{
			kursor = 0;			//resetujem kursor jer ostane memorisan
     614:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <kursor>
			STATE = POD_SAT;	//meni za podesavanje sata
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <STATE>
     61e:	f8 c1       	rjmp	.+1008   	; 0xa10 <__stack+0x111>
		}
		else if(kursor == 1 && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     620:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	69 f4       	brne	.+26     	; 0x642 <fsm_lcd_menu+0x1d2>
     628:	65 e0       	ldi	r22, 0x05	; 5
     62a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     62e:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     632:	88 23       	and	r24, r24
     634:	31 f0       	breq	.+12     	; 0x642 <fsm_lcd_menu+0x1d2>
		{
			kursor = 0;			//resetujem kursor jer ostane memorisan
     636:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <kursor>
			STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     63a:	84 e0       	ldi	r24, 0x04	; 4
     63c:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <STATE>
     640:	e7 c1       	rjmp	.+974    	; 0xa10 <__stack+0x111>
		}
		else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     642:	64 e0       	ldi	r22, 0x04	; 4
     644:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     648:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     64c:	88 23       	and	r24, r24
     64e:	09 f4       	brne	.+2      	; 0x652 <fsm_lcd_menu+0x1e2>
     650:	df c1       	rjmp	.+958    	; 0xa10 <__stack+0x111>
		{
			kursor = 0;			//resetujem kursor jer ostane memorisan
     652:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <kursor>
			STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     656:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <STATE>
     65a:	da c1       	rjmp	.+948    	; 0xa10 <__stack+0x111>
		break;
		
		case POD_SAT:
		
		/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
		if (flag_pod_vremena)
     65c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     660:	88 23       	and	r24, r24
     662:	09 f4       	brne	.+2      	; 0x666 <fsm_lcd_menu+0x1f6>
     664:	4b c0       	rjmp	.+150    	; 0x6fc <fsm_lcd_menu+0x28c>
		{
			flag_pod_vremena = 0;
     666:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			sanp_shot_vremena = vreme_datum;
     66a:	89 e0       	ldi	r24, 0x09	; 9
     66c:	e5 ea       	ldi	r30, 0xA5	; 165
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	aa e8       	ldi	r26, 0x8A	; 138
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	01 90       	ld	r0, Z+
     676:	0d 92       	st	X+, r0
     678:	8a 95       	dec	r24
     67a:	e1 f7       	brne	.-8      	; 0x674 <fsm_lcd_menu+0x204>
			sprintf(bafer, "%02d:%02d:%02d", sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s);
     67c:	ea e8       	ldi	r30, 0x8A	; 138
     67e:	f1 e0       	ldi	r31, 0x01	; 1
     680:	80 81       	ld	r24, Z
     682:	1f 92       	push	r1
     684:	8f 93       	push	r24
     686:	81 81       	ldd	r24, Z+1	; 0x01
     688:	1f 92       	push	r1
     68a:	8f 93       	push	r24
     68c:	82 81       	ldd	r24, Z+2	; 0x02
     68e:	1f 92       	push	r1
     690:	8f 93       	push	r24
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	86 e7       	ldi	r24, 0x76	; 118
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	0e 94 c4 07 	call	0xf88	; 0xf88 <sprintf>
			
			kursor = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     6a6:	85 e0       	ldi	r24, 0x05	; 5
     6a8:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kursor>
			
			lcd1602_goto_xy(0,0);
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
			lcd1602_send_string("PODESAVANJE SATA");
     6b4:	89 e4       	ldi	r24, 0x49	; 73
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			
			lcd1602_goto_xy(0,1);
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
			lcd1602_send_string("    ");
     6c4:	84 e3       	ldi	r24, 0x34	; 52
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			lcd1602_send_string(bafer);
     6cc:	86 e7       	ldi	r24, 0x76	; 118
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			lcd1602_send_string("    ");
     6d4:	84 e3       	ldi	r24, 0x34	; 52
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
			
			lcd1602_goto_xy(kursor,1);
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     6e2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
			lcd1602_cursor_blink(1);
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd1602_cursor_blink>
     6ec:	8d b7       	in	r24, 0x3d	; 61
     6ee:	9e b7       	in	r25, 0x3e	; 62
     6f0:	0a 96       	adiw	r24, 0x0a	; 10
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	9e bf       	out	0x3e, r25	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	8d bf       	out	0x3d, r24	; 61
		}
		
		if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     702:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     706:	88 23       	and	r24, r24
     708:	89 f0       	breq	.+34     	; 0x72c <fsm_lcd_menu+0x2bc>
		{
			kursor += 3;
     70a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     70e:	8d 5f       	subi	r24, 0xFD	; 253
			if(kursor > 11)
     710:	8c 30       	cpi	r24, 0x0C	; 12
     712:	1c f4       	brge	.+6      	; 0x71a <fsm_lcd_menu+0x2aa>
			lcd1602_cursor_blink(1);
		}
		
		if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
		{
			kursor += 3;
     714:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kursor>
     718:	03 c0       	rjmp	.+6      	; 0x720 <fsm_lcd_menu+0x2b0>
			if(kursor > 11)
			kursor = 11;
     71a:	8b e0       	ldi	r24, 0x0B	; 11
     71c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kursor>
			lcd1602_goto_xy(kursor,1);
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     726:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     72a:	72 c1       	rjmp	.+740    	; 0xa10 <__stack+0x111>
		}
		else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     732:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     736:	88 23       	and	r24, r24
     738:	89 f0       	breq	.+34     	; 0x75c <fsm_lcd_menu+0x2ec>
		{
			kursor -= 3;
     73a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     73e:	83 50       	subi	r24, 0x03	; 3
			if(kursor < 5)
     740:	85 30       	cpi	r24, 0x05	; 5
     742:	1c f0       	brlt	.+6      	; 0x74a <fsm_lcd_menu+0x2da>
			kursor = 11;
			lcd1602_goto_xy(kursor,1);
		}
		else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
		{
			kursor -= 3;
     744:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kursor>
     748:	03 c0       	rjmp	.+6      	; 0x750 <fsm_lcd_menu+0x2e0>
			if(kursor < 5)
			kursor = 5;
     74a:	85 e0       	ldi	r24, 0x05	; 5
     74c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kursor>
			lcd1602_goto_xy(kursor,1);
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     756:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     75a:	5a c1       	rjmp	.+692    	; 0xa10 <__stack+0x111>
		}
		else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     75c:	62 e0       	ldi	r22, 0x02	; 2
     75e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     762:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     766:	88 23       	and	r24, r24
     768:	09 f4       	brne	.+2      	; 0x76c <fsm_lcd_menu+0x2fc>
     76a:	99 c0       	rjmp	.+306    	; 0x89e <fsm_lcd_menu+0x42e>
		{
			if (kursor == 5)	//podesava SATE ++
     76c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     770:	85 30       	cpi	r24, 0x05	; 5
     772:	81 f5       	brne	.+96     	; 0x7d4 <fsm_lcd_menu+0x364>
			{
				sanp_shot_vremena.hr++;
     774:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <sanp_shot_vremena+0x2>
				if(sanp_shot_vremena.hr >= 24 && sanp_shot_vremena.hr < 30)		//<30 posto je hr = unsigned int
     778:	99 ee       	ldi	r25, 0xE9	; 233
     77a:	98 0f       	add	r25, r24
     77c:	96 30       	cpi	r25, 0x06	; 6
     77e:	20 f0       	brcs	.+8      	; 0x788 <fsm_lcd_menu+0x318>
		}
		else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
		{
			if (kursor == 5)	//podesava SATE ++
			{
				sanp_shot_vremena.hr++;
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <sanp_shot_vremena+0x2>
     786:	02 c0       	rjmp	.+4      	; 0x78c <fsm_lcd_menu+0x31c>
				if(sanp_shot_vremena.hr >= 24 && sanp_shot_vremena.hr < 30)		//<30 posto je hr = unsigned int
				sanp_shot_vremena.hr = 0;
     788:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sanp_shot_vremena+0x2>
				
				sprintf(bafer, "%02d", sanp_shot_vremena.hr);
     78c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <sanp_shot_vremena+0x2>
     790:	1f 92       	push	r1
     792:	8f 93       	push	r24
     794:	8d e0       	ldi	r24, 0x0D	; 13
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9f 93       	push	r25
     79a:	8f 93       	push	r24
     79c:	86 e7       	ldi	r24, 0x76	; 118
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	9f 93       	push	r25
     7a2:	8f 93       	push	r24
     7a4:	0e 94 c4 07 	call	0xf88	; 0xf88 <sprintf>
				lcd1602_goto_xy(kursor-1,1);
     7a8:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	81 50       	subi	r24, 0x01	; 1
     7b0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
				lcd1602_send_string(bafer);
     7b4:	86 e7       	ldi	r24, 0x76	; 118
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
				lcd1602_goto_xy(kursor,1);
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     7c2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	1e c1       	rjmp	.+572    	; 0xa10 <__stack+0x111>
				//setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
			}
			else if (kursor == 8)	//podesava MINUTE ++
     7d4:	88 30       	cpi	r24, 0x08	; 8
     7d6:	81 f5       	brne	.+96     	; 0x838 <fsm_lcd_menu+0x3c8>
			{
				sanp_shot_vremena.min++;
     7d8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <sanp_shot_vremena+0x1>
				if(sanp_shot_vremena.min >= 60 && sanp_shot_vremena.min < 65)		//<65 posto je = unsigned int
     7dc:	95 ec       	ldi	r25, 0xC5	; 197
     7de:	98 0f       	add	r25, r24
     7e0:	95 30       	cpi	r25, 0x05	; 5
     7e2:	20 f0       	brcs	.+8      	; 0x7ec <fsm_lcd_menu+0x37c>
				lcd1602_goto_xy(kursor,1);
				//setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
			}
			else if (kursor == 8)	//podesava MINUTE ++
			{
				sanp_shot_vremena.min++;
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <sanp_shot_vremena+0x1>
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <fsm_lcd_menu+0x380>
				if(sanp_shot_vremena.min >= 60 && sanp_shot_vremena.min < 65)		//<65 posto je = unsigned int
				sanp_shot_vremena.min = 0;
     7ec:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sanp_shot_vremena+0x1>
				
				sprintf(bafer, "%02d", sanp_shot_vremena.min);
     7f0:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <sanp_shot_vremena+0x1>
     7f4:	1f 92       	push	r1
     7f6:	8f 93       	push	r24
     7f8:	8d e0       	ldi	r24, 0x0D	; 13
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	86 e7       	ldi	r24, 0x76	; 118
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	0e 94 c4 07 	call	0xf88	; 0xf88 <sprintf>
				lcd1602_goto_xy(kursor-1,1);
     80c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	81 50       	subi	r24, 0x01	; 1
     814:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
				lcd1602_send_string(bafer);
     818:	86 e7       	ldi	r24, 0x76	; 118
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
				lcd1602_goto_xy(kursor,1);
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     826:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	ec c0       	rjmp	.+472    	; 0xa10 <__stack+0x111>
				//setTime(vreme_datum.hr, sanp_shot_vremena.min, vreme_datum.s, am, _24_hour_format);
			}
			else if (kursor == 11)	//podesava SEKUNDE ++
     838:	8b 30       	cpi	r24, 0x0B	; 11
     83a:	09 f0       	breq	.+2      	; 0x83e <fsm_lcd_menu+0x3ce>
     83c:	e9 c0       	rjmp	.+466    	; 0xa10 <__stack+0x111>
			{
				sanp_shot_vremena.s++;
     83e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sanp_shot_vremena>
				if(sanp_shot_vremena.s >= 60 && sanp_shot_vremena.s < 65)		//<65 posto je = unsigned int
     842:	95 ec       	ldi	r25, 0xC5	; 197
     844:	98 0f       	add	r25, r24
     846:	95 30       	cpi	r25, 0x05	; 5
     848:	20 f0       	brcs	.+8      	; 0x852 <fsm_lcd_menu+0x3e2>
				lcd1602_goto_xy(kursor,1);
				//setTime(vreme_datum.hr, sanp_shot_vremena.min, vreme_datum.s, am, _24_hour_format);
			}
			else if (kursor == 11)	//podesava SEKUNDE ++
			{
				sanp_shot_vremena.s++;
     84a:	8f 5f       	subi	r24, 0xFF	; 255
     84c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sanp_shot_vremena>
     850:	02 c0       	rjmp	.+4      	; 0x856 <fsm_lcd_menu+0x3e6>
				if(sanp_shot_vremena.s >= 60 && sanp_shot_vremena.s < 65)		//<65 posto je = unsigned int
				sanp_shot_vremena.s = 0;
     852:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sanp_shot_vremena>
				
				sprintf(bafer, "%02d", sanp_shot_vremena.s);
     856:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sanp_shot_vremena>
     85a:	1f 92       	push	r1
     85c:	8f 93       	push	r24
     85e:	8d e0       	ldi	r24, 0x0D	; 13
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	9f 93       	push	r25
     864:	8f 93       	push	r24
     866:	86 e7       	ldi	r24, 0x76	; 118
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	0e 94 c4 07 	call	0xf88	; 0xf88 <sprintf>
				lcd1602_goto_xy(kursor-1,1);
     872:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	81 50       	subi	r24, 0x01	; 1
     87a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
				lcd1602_send_string(bafer);
     87e:	86 e7       	ldi	r24, 0x76	; 118
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
				lcd1602_goto_xy(kursor,1);
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     88c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	b9 c0       	rjmp	.+370    	; 0xa10 <__stack+0x111>
				//setTime(vreme_datum.hr, vreme_datum.min, sanp_shot_vremena.s, am, _24_hour_format);
			}
			
		}
		else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     89e:	63 e0       	ldi	r22, 0x03	; 3
     8a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     8a4:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     8a8:	88 23       	and	r24, r24
     8aa:	09 f4       	brne	.+2      	; 0x8ae <fsm_lcd_menu+0x43e>
     8ac:	96 c0       	rjmp	.+300    	; 0x9da <__stack+0xdb>
		{
			if (kursor == 5)	//podesava SATE --
     8ae:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     8b2:	85 30       	cpi	r24, 0x05	; 5
     8b4:	79 f5       	brne	.+94     	; 0x914 <__stack+0x15>
			{
				sanp_shot_vremena.hr--;
     8b6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <sanp_shot_vremena+0x2>
     8ba:	81 50       	subi	r24, 0x01	; 1
				if(sanp_shot_vremena.hr >= 250 && sanp_shot_vremena.hr <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     8bc:	8a 3f       	cpi	r24, 0xFA	; 250
     8be:	18 f4       	brcc	.+6      	; 0x8c6 <fsm_lcd_menu+0x456>
		}
		else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
		{
			if (kursor == 5)	//podesava SATE --
			{
				sanp_shot_vremena.hr--;
     8c0:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <sanp_shot_vremena+0x2>
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <fsm_lcd_menu+0x45c>
				if(sanp_shot_vremena.hr >= 250 && sanp_shot_vremena.hr <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
				sanp_shot_vremena.hr = 23;
     8c6:	87 e1       	ldi	r24, 0x17	; 23
     8c8:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <sanp_shot_vremena+0x2>
				
				sprintf(bafer, "%02d", sanp_shot_vremena.hr);
     8cc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <sanp_shot_vremena+0x2>
     8d0:	1f 92       	push	r1
     8d2:	8f 93       	push	r24
     8d4:	8d e0       	ldi	r24, 0x0D	; 13
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	9f 93       	push	r25
     8da:	8f 93       	push	r24
     8dc:	86 e7       	ldi	r24, 0x76	; 118
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	9f 93       	push	r25
     8e2:	8f 93       	push	r24
     8e4:	0e 94 c4 07 	call	0xf88	; 0xf88 <sprintf>
				lcd1602_goto_xy(kursor-1,1);
     8e8:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	81 50       	subi	r24, 0x01	; 1
     8f0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
				lcd1602_send_string(bafer);
     8f4:	86 e7       	ldi	r24, 0x76	; 118
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
				lcd1602_goto_xy(kursor,1);
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     902:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	7e c0       	rjmp	.+252    	; 0xa10 <__stack+0x111>
				//setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
			}
			else if (kursor == 8)	//podesava MINUTE --
     914:	88 30       	cpi	r24, 0x08	; 8
     916:	79 f5       	brne	.+94     	; 0x976 <__stack+0x77>
			{
				sanp_shot_vremena.min--;
     918:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <sanp_shot_vremena+0x1>
     91c:	81 50       	subi	r24, 0x01	; 1
				if(sanp_shot_vremena.min >= 250 && sanp_shot_vremena.min <= 255)	//posto je = unsigned int 8 bit i overflow se desi
     91e:	8a 3f       	cpi	r24, 0xFA	; 250
     920:	18 f4       	brcc	.+6      	; 0x928 <__stack+0x29>
				lcd1602_goto_xy(kursor,1);
				//setTime(sanp_shot_vremena.hr, vreme_datum.min, vreme_datum.s, am, _24_hour_format);
			}
			else if (kursor == 8)	//podesava MINUTE --
			{
				sanp_shot_vremena.min--;
     922:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <sanp_shot_vremena+0x1>
     926:	03 c0       	rjmp	.+6      	; 0x92e <__stack+0x2f>
				if(sanp_shot_vremena.min >= 250 && sanp_shot_vremena.min <= 255)	//posto je = unsigned int 8 bit i overflow se desi
				sanp_shot_vremena.min = 59;
     928:	8b e3       	ldi	r24, 0x3B	; 59
     92a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <sanp_shot_vremena+0x1>
				
				sprintf(bafer, "%02d", sanp_shot_vremena.min);
     92e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <sanp_shot_vremena+0x1>
     932:	1f 92       	push	r1
     934:	8f 93       	push	r24
     936:	8d e0       	ldi	r24, 0x0D	; 13
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	86 e7       	ldi	r24, 0x76	; 118
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	0e 94 c4 07 	call	0xf88	; 0xf88 <sprintf>
				lcd1602_goto_xy(kursor-1,1);
     94a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	81 50       	subi	r24, 0x01	; 1
     952:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
				lcd1602_send_string(bafer);
     956:	86 e7       	ldi	r24, 0x76	; 118
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
				lcd1602_goto_xy(kursor,1);
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     964:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	4d c0       	rjmp	.+154    	; 0xa10 <__stack+0x111>
				//setTime(vreme_datum.hr, sanp_shot_vremena.min, vreme_datum.s, am, _24_hour_format);
			}
			else if (kursor == 11)	//podesava SEKUNDE --
     976:	8b 30       	cpi	r24, 0x0B	; 11
     978:	09 f0       	breq	.+2      	; 0x97c <__stack+0x7d>
     97a:	4a c0       	rjmp	.+148    	; 0xa10 <__stack+0x111>
			{
				sanp_shot_vremena.s--;
     97c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sanp_shot_vremena>
     980:	81 50       	subi	r24, 0x01	; 1
				if(sanp_shot_vremena.s >= 250 && sanp_shot_vremena.s <= 255)	//posto je = unsigned int 8 bit i overflow se desi
     982:	8a 3f       	cpi	r24, 0xFA	; 250
     984:	18 f4       	brcc	.+6      	; 0x98c <__stack+0x8d>
				lcd1602_goto_xy(kursor,1);
				//setTime(vreme_datum.hr, sanp_shot_vremena.min, vreme_datum.s, am, _24_hour_format);
			}
			else if (kursor == 11)	//podesava SEKUNDE --
			{
				sanp_shot_vremena.s--;
     986:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sanp_shot_vremena>
     98a:	03 c0       	rjmp	.+6      	; 0x992 <__stack+0x93>
				if(sanp_shot_vremena.s >= 250 && sanp_shot_vremena.s <= 255)	//posto je = unsigned int 8 bit i overflow se desi
				sanp_shot_vremena.s = 59;
     98c:	8b e3       	ldi	r24, 0x3B	; 59
     98e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sanp_shot_vremena>
				
				sprintf(bafer, "%02d", sanp_shot_vremena.s);
     992:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sanp_shot_vremena>
     996:	1f 92       	push	r1
     998:	8f 93       	push	r24
     99a:	8d e0       	ldi	r24, 0x0D	; 13
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	9f 93       	push	r25
     9a0:	8f 93       	push	r24
     9a2:	86 e7       	ldi	r24, 0x76	; 118
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	9f 93       	push	r25
     9a8:	8f 93       	push	r24
     9aa:	0e 94 c4 07 	call	0xf88	; 0xf88 <sprintf>
				lcd1602_goto_xy(kursor-1,1);
     9ae:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	81 50       	subi	r24, 0x01	; 1
     9b6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
				lcd1602_send_string(bafer);
     9ba:	86 e7       	ldi	r24, 0x76	; 118
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd1602_send_string>
				lcd1602_goto_xy(kursor,1);
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kursor>
     9c8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd1602_goto_xy>
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	1b c0       	rjmp	.+54     	; 0xa10 <__stack+0x111>
				//setTime(vreme_datum.hr, vreme_datum.min, sanp_shot_vremena.s, am, _24_hour_format);
			}
			
		}
		else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
     9da:	64 e0       	ldi	r22, 0x04	; 4
     9dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     9e0:	0e 94 ca 05 	call	0xb94	; 0xb94 <ocitaj_jedan_taster>
     9e4:	88 23       	and	r24, r24
     9e6:	a1 f0       	breq	.+40     	; 0xa10 <__stack+0x111>
		{
			/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
			setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
     9e8:	ea e8       	ldi	r30, 0x8A	; 138
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	00 e0       	ldi	r16, 0x00	; 0
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	40 81       	ld	r20, Z
     9f2:	61 81       	ldd	r22, Z+1	; 0x01
     9f4:	82 81       	ldd	r24, Z+2	; 0x02
     9f6:	0e 94 76 06 	call	0xcec	; 0xcec <setTime>
			flag_pod_vremena = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			kursor = 0;					//reset kursora
     a00:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <kursor>
			lcd1602_cursor_blink(0);	//isklucim blinking cursor
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd1602_cursor_blink>
			STATE = MENU1;				//vraca se u prethodni meni
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <STATE>
		break;
		
		default: {}
		
	}
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <main>:
}

int main(void)
{

	vreme_paljenja.hr = 23;
     a18:	e3 e9       	ldi	r30, 0x93	; 147
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	87 e1       	ldi	r24, 0x17	; 23
     a1e:	82 83       	std	Z+2, r24	; 0x02
	vreme_paljenja.min = 30;
     a20:	8e e1       	ldi	r24, 0x1E	; 30
     a22:	81 83       	std	Z+1, r24	; 0x01
	vreme_gasenja.hr = 5;
     a24:	ec e9       	ldi	r30, 0x9C	; 156
     a26:	f1 e0       	ldi	r31, 0x01	; 1
     a28:	85 e0       	ldi	r24, 0x05	; 5
     a2a:	82 83       	std	Z+2, r24	; 0x02
	vreme_gasenja.min = 40;
     a2c:	88 e2       	ldi	r24, 0x28	; 40
     a2e:	81 83       	std	Z+1, r24	; 0x01
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			////PD2-3 output
     a30:	0e 94 a9 06 	call	0xd52	; 0xd52 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup - ovi na SDA i SCL, unutar ove f-je
     a34:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_init>
	lcd1602_init();
     a38:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd1602_init>
	ADC_init();				
     a3c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	uart_init(9600);		//vidi f-ju za opcije bauda
     a40:	60 e8       	ldi	r22, 0x80	; 128
     a42:	75 e2       	ldi	r23, 0x25	; 37
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 27 07 	call	0xe4e	; 0xe4e <uart_init>
	DS3231_init();			//RTC init
     a4c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
     a50:	0e 94 75 05 	call	0xaea	; 0xaea <pc_init>
	tasteri_init();			//NAPOMENA: PD4-7 i PB0-1 INPUT, INT_PULLUP=ON
     a54:	0e 94 94 05 	call	0xb28	; 0xb28 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
     a58:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;
     a5a:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
     a5c:	78 94       	sei
			if (ukljuceno)
				PORTB |= 1<<PINB5;   //high
			else
				PORTB &= ~(1<<PINB5);	//low
				
			sprintf(bafer, "%d", provera);
     a5e:	0f 2e       	mov	r0, r31
     a60:	fa e5       	ldi	r31, 0x5A	; 90
     a62:	ef 2e       	mov	r14, r31
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	ff 2e       	mov	r15, r31
     a68:	f0 2d       	mov	r31, r0
     a6a:	c6 e7       	ldi	r28, 0x76	; 118
     a6c:	d1 e0       	ldi	r29, 0x01	; 1
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
     a6e:	0e 94 a1 05 	call	0xb42	; 0xb42 <ocitaj_tastere>
     a72:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tasteri>
		
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
     a76:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flag_pc_int_pomocni>
     a7a:	88 23       	and	r24, r24
     a7c:	99 f1       	breq	.+102    	; 0xae4 <main+0xcc>
		{
			flag_pc_int_pomocni = 0;
     a7e:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     a82:	00 e0       	ldi	r16, 0x00	; 0
     a84:	2d ea       	ldi	r18, 0xAD	; 173
     a86:	31 e0       	ldi	r19, 0x01	; 1
     a88:	45 ea       	ldi	r20, 0xA5	; 165
     a8a:	51 e0       	ldi	r21, 0x01	; 1
     a8c:	66 ea       	ldi	r22, 0xA6	; 166
     a8e:	71 e0       	ldi	r23, 0x01	; 1
     a90:	87 ea       	ldi	r24, 0xA7	; 167
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 38 06 	call	0xc70	; 0xc70 <getTime>
			
			
			/* paljenje/gasenje releja > grjaca bojlera */
			ukljuceno = period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);
     a98:	45 ea       	ldi	r20, 0xA5	; 165
     a9a:	51 e0       	ldi	r21, 0x01	; 1
     a9c:	6c e9       	ldi	r22, 0x9C	; 156
     a9e:	71 e0       	ldi	r23, 0x01	; 1
     aa0:	83 e9       	ldi	r24, 0x93	; 147
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <period_paljenja>
     aa8:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ukljuceno>
			
			if (ukljuceno)
     aac:	88 23       	and	r24, r24
     aae:	11 f0       	breq	.+4      	; 0xab4 <main+0x9c>
				PORTB |= 1<<PINB5;   //high
     ab0:	2d 9a       	sbi	0x05, 5	; 5
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <main+0x9e>
			else
				PORTB &= ~(1<<PINB5);	//low
     ab4:	2d 98       	cbi	0x05, 5	; 5
				
			sprintf(bafer, "%d", provera);
     ab6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <provera>
     aba:	1f 92       	push	r1
     abc:	8f 93       	push	r24
     abe:	ff 92       	push	r15
     ac0:	ef 92       	push	r14
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	0e 94 c4 07 	call	0xf88	; 0xf88 <sprintf>
			send_str(bafer);
     aca:	ce 01       	movw	r24, r28
     acc:	0e 94 b1 07 	call	0xf62	; 0xf62 <send_str>
			send_str("\n");
     ad0:	8d e5       	ldi	r24, 0x5D	; 93
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 b1 07 	call	0xf62	; 0xf62 <send_str>
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
     ae4:	0e 94 38 02 	call	0x470	; 0x470 <fsm_lcd_menu>
		

		
    }
     ae8:	c2 cf       	rjmp	.-124    	; 0xa6e <main+0x56>

00000aea <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
     aea:	e8 e6       	ldi	r30, 0x68	; 104
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	82 60       	ori	r24, 0x02	; 2
     af2:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
     af4:	ec e6       	ldi	r30, 0x6C	; 108
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	88 60       	ori	r24, 0x08	; 8
     afc:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
     afe:	3b 98       	cbi	0x07, 3	; 7
     b00:	08 95       	ret

00000b02 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
     b0e:	33 9b       	sbis	0x06, 3	; 6
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__vector_4+0x1a>
	{
		flag_pc_int = 1;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <flag_pc_int>
		flag_pc_int_pomocni = 1;
     b18:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flag_pc_int_pomocni>
	}
		
     b1c:	8f 91       	pop	r24
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <tasteri_init>:
char buff[50];

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
     b28:	8a b1       	in	r24, 0x0a	; 10
     b2a:	8f 70       	andi	r24, 0x0F	; 15
     b2c:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
     b2e:	84 b1       	in	r24, 0x04	; 4
     b30:	8c 7f       	andi	r24, 0xFC	; 252
     b32:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
     b34:	8b b1       	in	r24, 0x0b	; 11
     b36:	80 6f       	ori	r24, 0xF0	; 240
     b38:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
     b3a:	85 b1       	in	r24, 0x05	; 5
     b3c:	83 60       	ori	r24, 0x03	; 3
     b3e:	85 b9       	out	0x05, r24	; 5
     b40:	08 95       	ret

00000b42 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
     b42:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <flag_prekid_debounce_time_half>
     b46:	88 23       	and	r24, r24
     b48:	69 f0       	breq	.+26     	; 0xb64 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
     b4a:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB
     b4e:	93 b1       	in	r25, 0x03	; 3
     b50:	29 b1       	in	r18, 0x09	; 9
     b52:	30 e1       	ldi	r19, 0x10	; 16
     b54:	93 9f       	mul	r25, r19
     b56:	c0 01       	movw	r24, r0
     b58:	11 24       	eor	r1, r1
     b5a:	92 2f       	mov	r25, r18
     b5c:	92 95       	swap	r25
     b5e:	9f 70       	andi	r25, 0x0F	; 15
     b60:	89 2b       	or	r24, r25
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
     b64:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PIND a posle njih su 2 bita iz PINB

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
     b66:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <flag_prekid_debounce_time>
     b6a:	99 23       	and	r25, r25
     b6c:	81 f0       	breq	.+32     	; 0xb8e <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
     b6e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
     b72:	93 b1       	in	r25, 0x03	; 3
     b74:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
     b76:	50 e1       	ldi	r21, 0x10	; 16
     b78:	95 9f       	mul	r25, r21
     b7a:	90 01       	movw	r18, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	94 2f       	mov	r25, r20
     b80:	92 95       	swap	r25
     b82:	9f 70       	andi	r25, 0x0F	; 15
     b84:	29 2b       	or	r18, r25
     b86:	82 13       	cpse	r24, r18
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
     b8a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tasteri_reg.1950>
		
	}
	
	return tasteri_reg;
}
     b8e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tasteri_reg.1950>
     b92:	08 95       	ret

00000b94 <ocitaj_jedan_taster>:
	
	uint8_t stisnut = 0;
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	80 95       	com	r24
     b98:	90 95       	com	r25
     b9a:	9c 01       	movw	r18, r24
     b9c:	06 2e       	mov	r0, r22
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <ocitaj_jedan_taster+0x10>
     ba0:	35 95       	asr	r19
     ba2:	27 95       	ror	r18
     ba4:	0a 94       	dec	r0
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <ocitaj_jedan_taster+0xc>
     ba8:	20 ff       	sbrs	r18, 0
     baa:	0a c0       	rjmp	.+20     	; 0xbc0 <ocitaj_jedan_taster+0x2c>
     bac:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <flag_stisnut.1959>
     bb0:	21 11       	cpse	r18, r1
     bb2:	06 c0       	rjmp	.+12     	; 0xbc0 <ocitaj_jedan_taster+0x2c>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <flag_stisnut.1959>
		temp_tast = button;		//zapamtim koji je taster stisnut
     bba:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <temp_tast.1958>
     bbe:	08 95       	ret
		stisnut = 1;
	}
	if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
     bc0:	00 90 6b 01 	lds	r0, 0x016B	; 0x80016b <temp_tast.1958>
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <ocitaj_jedan_taster+0x36>
     bc6:	95 95       	asr	r25
     bc8:	87 95       	ror	r24
     bca:	0a 94       	dec	r0
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <ocitaj_jedan_taster+0x32>
     bce:	80 fd       	sbrc	r24, 0
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <ocitaj_jedan_taster+0x46>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
     bd2:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <flag_stisnut.1959>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	08 95       	ret
     bda:	80 e0       	ldi	r24, 0x00	; 0
	}
			
	
	return stisnut;
     bdc:	08 95       	ret

00000bde <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
     bde:	98 2f       	mov	r25, r24
     be0:	92 95       	swap	r25
     be2:	9f 70       	andi	r25, 0x0F	; 15
     be4:	99 0f       	add	r25, r25
     be6:	29 2f       	mov	r18, r25
     be8:	22 0f       	add	r18, r18
     bea:	22 0f       	add	r18, r18
     bec:	92 0f       	add	r25, r18
     bee:	8f 70       	andi	r24, 0x0F	; 15
     bf0:	89 0f       	add	r24, r25
     bf2:	08 95       	ret

00000bf4 <decimal_to_bcd>:
     bf4:	9d ec       	ldi	r25, 0xCD	; 205
     bf6:	89 9f       	mul	r24, r25
     bf8:	91 2d       	mov	r25, r1
     bfa:	11 24       	eor	r1, r1
     bfc:	96 95       	lsr	r25
     bfe:	96 95       	lsr	r25
     c00:	96 95       	lsr	r25
     c02:	20 e1       	ldi	r18, 0x10	; 16
     c04:	92 9f       	mul	r25, r18
     c06:	a0 01       	movw	r20, r0
     c08:	11 24       	eor	r1, r1
     c0a:	99 0f       	add	r25, r25
     c0c:	29 2f       	mov	r18, r25
     c0e:	22 0f       	add	r18, r18
     c10:	22 0f       	add	r18, r18
     c12:	92 0f       	add	r25, r18
     c14:	89 1b       	sub	r24, r25
     c16:	8f 70       	andi	r24, 0x0F	; 15
     c18:	84 2b       	or	r24, r20
     c1a:	08 95       	ret

00000c1c <DS3231_Read>:
     c1c:	cf 93       	push	r28
     c1e:	c8 2f       	mov	r28, r24
     c20:	80 ed       	ldi	r24, 0xD0	; 208
     c22:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     c26:	8c 2f       	mov	r24, r28
     c28:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     c2c:	81 ed       	ldi	r24, 0xD1	; 209
     c2e:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     c32:	0e 94 ff 00 	call	0x1fe	; 0x1fe <i2c_readNak>
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <DS3231_Write>:
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	d8 2f       	mov	r29, r24
     c40:	c6 2f       	mov	r28, r22
     c42:	80 ed       	ldi	r24, 0xD0	; 208
     c44:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_start_wait>
     c48:	8d 2f       	mov	r24, r29
     c4a:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     c4e:	8c 2f       	mov	r24, r28
     c50:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
     c54:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_stop>
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <DS3231_init>:
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	8e e0       	ldi	r24, 0x0E	; 14
     c62:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DS3231_Write>
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	8f e0       	ldi	r24, 0x0F	; 15
     c6a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DS3231_Write>
     c6e:	08 95       	ret

00000c70 <getTime>:
     c70:	af 92       	push	r10
     c72:	bf 92       	push	r11
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	7b 01       	movw	r14, r22
     c86:	6a 01       	movw	r12, r20
     c88:	59 01       	movw	r10, r18
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <DS3231_Read>
     c90:	0e 94 ef 05 	call	0xbde	; 0xbde <bcd_to_decimal>
     c94:	f6 01       	movw	r30, r12
     c96:	80 83       	st	Z, r24
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <DS3231_Read>
     c9e:	0e 94 ef 05 	call	0xbde	; 0xbde <bcd_to_decimal>
     ca2:	f7 01       	movw	r30, r14
     ca4:	80 83       	st	Z, r24
     ca6:	01 30       	cpi	r16, 0x01	; 1
     ca8:	81 f4       	brne	.+32     	; 0xcca <getTime+0x5a>
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	0e 94 0e 06 	call	0xc1c	; 0xc1c <DS3231_Read>
     cb0:	85 fb       	bst	r24, 5
     cb2:	88 27       	eor	r24, r24
     cb4:	80 f9       	bld	r24, 0
     cb6:	f5 01       	movw	r30, r10
     cb8:	80 83       	st	Z, r24
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <DS3231_Read>
     cc0:	8f 71       	andi	r24, 0x1F	; 31
     cc2:	0e 94 ef 05 	call	0xbde	; 0xbde <bcd_to_decimal>
     cc6:	88 83       	st	Y, r24
     cc8:	07 c0       	rjmp	.+14     	; 0xcd8 <getTime+0x68>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <DS3231_Read>
     cd0:	8f 73       	andi	r24, 0x3F	; 63
     cd2:	0e 94 ef 05 	call	0xbde	; 0xbde <bcd_to_decimal>
     cd6:	88 83       	st	Y, r24
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	08 95       	ret

00000cec <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	d8 2f       	mov	r29, r24
     cf6:	c6 2f       	mov	r28, r22
     cf8:	84 2f       	mov	r24, r20
     cfa:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
     cfc:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <decimal_to_bcd>
     d00:	68 2f       	mov	r22, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
     d08:	8c 2f       	mov	r24, r28
     d0a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <decimal_to_bcd>
     d0e:	68 2f       	mov	r22, r24
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DS3231_Write>
	
	switch(hour_format)
     d16:	01 30       	cpi	r16, 0x01	; 1
     d18:	79 f4       	brne	.+30     	; 0xd38 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
     d1a:	11 30       	cpi	r17, 0x01	; 1
     d1c:	11 f0       	breq	.+4      	; 0xd22 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
     d1e:	c0 e4       	ldi	r28, 0x40	; 64
     d20:	01 c0       	rjmp	.+2      	; 0xd24 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
     d22:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
     d24:	8d 2f       	mov	r24, r29
     d26:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <decimal_to_bcd>
     d2a:	8f 71       	andi	r24, 0x1F	; 31
     d2c:	68 2f       	mov	r22, r24
     d2e:	6c 2b       	or	r22, r28
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DS3231_Write>
			break;
     d36:	08 c0       	rjmp	.+16     	; 0xd48 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
     d38:	8d 2f       	mov	r24, r29
     d3a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <decimal_to_bcd>
     d3e:	68 2f       	mov	r22, r24
     d40:	6f 73       	andi	r22, 0x3F	; 63
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DS3231_Write>
			break;
		}
	}
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	08 95       	ret

00000d52 <tajmer0_init>:
volatile uint8_t brojac_prekida_tajmera0_debounce = 0;
volatile uint8_t brojac_prekida_tajmera0_debounce_half = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
     d56:	93 e0       	ldi	r25, 0x03	; 3
     d58:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
     d5a:	99 ef       	ldi	r25, 0xF9	; 249
     d5c:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
     d5e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRD |= (1<<PIND2)|(1<<PIND3);  //PD2-3 output
     d62:	8a b1       	in	r24, 0x0a	; 10
     d64:	8c 60       	ori	r24, 0x0C	; 12
     d66:	8a b9       	out	0x0a, r24	; 10
     d68:	08 95       	ret

00000d6a <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	8f 93       	push	r24
	flag_tajmer0_prekid = 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
     d7c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <brojac_prekida_tajmera0>
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
     d86:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <brojac_prekida_tajmera0_debounce_half>
     d8a:	8f 5f       	subi	r24, 0xFF	; 255
     d8c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
     d90:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <brojac_prekida_tajmera0_debounce>
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <brojac_prekida_tajmera0_debounce>
		
	if(brojac_prekida_tajmera0 == 255)	//1ms * 10 = 10ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
     d9a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <brojac_prekida_tajmera0>
     d9e:	8f 3f       	cpi	r24, 0xFF	; 255
     da0:	29 f4       	brne	.+10     	; 0xdac <__vector_14+0x42>
	{
		brojac_prekida_tajmera0 = 0;
     da2:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;				
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <flag_prekid_10ms>
		
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
     dac:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <brojac_prekida_tajmera0_debounce_half>
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	31 f4       	brne	.+12     	; 0xdc0 <__vector_14+0x56>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
     db4:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <flag_prekid_debounce_time_half>
		PIND |= 1<<PIND2;	//toggle PD2
     dbe:	4a 9a       	sbi	0x09, 2	; 9
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
     dc0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <brojac_prekida_tajmera0_debounce>
     dc4:	86 30       	cpi	r24, 0x06	; 6
     dc6:	31 f4       	brne	.+12     	; 0xdd4 <__vector_14+0x6a>
	{
		brojac_prekida_tajmera0_debounce = 0;
     dc8:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <flag_prekid_debounce_time>
		PIND |= 1<<PIND3;	//toggle PD3
     dd2:	4b 9a       	sbi	0x09, 3	; 9
	}
	
     dd4:	8f 91       	pop	r24
     dd6:	0f 90       	pop	r0
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	0f 90       	pop	r0
     ddc:	1f 90       	pop	r1
     dde:	18 95       	reti

00000de0 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
	poslato=0;
     dea:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <poslato>
}
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_18>:

ISR(USART_RX_vect)
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	8f 93       	push	r24
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
	input_char=UDR0;
     e08:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     e0c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
     e10:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <buff_size>
     e14:	88 30       	cpi	r24, 0x08	; 8
     e16:	98 f4       	brcc	.+38     	; 0xe3e <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
     e18:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <buff_size>
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <input_char>
     e22:	e0 55       	subi	r30, 0x50	; 80
     e24:	fe 4f       	sbci	r31, 0xFE	; 254
     e26:	80 83       	st	Z, r24
		buff_size++;
     e28:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <buff_size>
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <buff_size>
		input_buffer[buff_size]='\0';
     e32:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <buff_size>
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	e0 55       	subi	r30, 0x50	; 80
     e3a:	fe 4f       	sbci	r31, 0xFE	; 254
     e3c:	10 82       	st	Z, r1
	}
}
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	8f 91       	pop	r24
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
     e4e:	22 e0       	ldi	r18, 0x02	; 2
     e50:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
     e54:	28 ed       	ldi	r18, 0xD8	; 216
     e56:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
     e5a:	26 e0       	ldi	r18, 0x06	; 6
     e5c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
     e60:	61 15       	cp	r22, r1
     e62:	2c e2       	ldi	r18, 0x2C	; 44
     e64:	72 07       	cpc	r23, r18
     e66:	21 e0       	ldi	r18, 0x01	; 1
     e68:	82 07       	cpc	r24, r18
     e6a:	91 05       	cpc	r25, r1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <uart_init+0x22>
     e6e:	51 c0       	rjmp	.+162    	; 0xf12 <uart_init+0xc4>
     e70:	c8 f4       	brcc	.+50     	; 0xea4 <uart_init+0x56>
     e72:	60 34       	cpi	r22, 0x40	; 64
     e74:	28 e3       	ldi	r18, 0x38	; 56
     e76:	72 07       	cpc	r23, r18
     e78:	81 05       	cpc	r24, r1
     e7a:	91 05       	cpc	r25, r1
     e7c:	a9 f1       	breq	.+106    	; 0xee8 <uart_init+0x9a>
     e7e:	30 f4       	brcc	.+12     	; 0xe8c <uart_init+0x3e>
     e80:	60 38       	cpi	r22, 0x80	; 128
     e82:	75 42       	sbci	r23, 0x25	; 37
     e84:	81 05       	cpc	r24, r1
     e86:	91 05       	cpc	r25, r1
     e88:	41 f1       	breq	.+80     	; 0xeda <uart_init+0x8c>
     e8a:	64 c0       	rjmp	.+200    	; 0xf54 <uart_init+0x106>
     e8c:	61 15       	cp	r22, r1
     e8e:	2b e4       	ldi	r18, 0x4B	; 75
     e90:	72 07       	cpc	r23, r18
     e92:	81 05       	cpc	r24, r1
     e94:	91 05       	cpc	r25, r1
     e96:	79 f1       	breq	.+94     	; 0xef6 <uart_init+0xa8>
     e98:	61 15       	cp	r22, r1
     e9a:	76 49       	sbci	r23, 0x96	; 150
     e9c:	81 05       	cpc	r24, r1
     e9e:	91 05       	cpc	r25, r1
     ea0:	89 f1       	breq	.+98     	; 0xf04 <uart_init+0xb6>
     ea2:	58 c0       	rjmp	.+176    	; 0xf54 <uart_init+0x106>
     ea4:	60 32       	cpi	r22, 0x20	; 32
     ea6:	21 ea       	ldi	r18, 0xA1	; 161
     ea8:	72 07       	cpc	r23, r18
     eaa:	27 e0       	ldi	r18, 0x07	; 7
     eac:	82 07       	cpc	r24, r18
     eae:	91 05       	cpc	r25, r1
     eb0:	f1 f1       	breq	.+124    	; 0xf2e <uart_init+0xe0>
     eb2:	30 f4       	brcc	.+12     	; 0xec0 <uart_init+0x72>
     eb4:	60 39       	cpi	r22, 0x90	; 144
     eb6:	70 4d       	sbci	r23, 0xD0	; 208
     eb8:	83 40       	sbci	r24, 0x03	; 3
     eba:	91 05       	cpc	r25, r1
     ebc:	89 f1       	breq	.+98     	; 0xf20 <uart_init+0xd2>
     ebe:	4a c0       	rjmp	.+148    	; 0xf54 <uart_init+0x106>
     ec0:	60 34       	cpi	r22, 0x40	; 64
     ec2:	22 e4       	ldi	r18, 0x42	; 66
     ec4:	72 07       	cpc	r23, r18
     ec6:	2f e0       	ldi	r18, 0x0F	; 15
     ec8:	82 07       	cpc	r24, r18
     eca:	91 05       	cpc	r25, r1
     ecc:	b9 f1       	breq	.+110    	; 0xf3c <uart_init+0xee>
     ece:	60 38       	cpi	r22, 0x80	; 128
     ed0:	74 48       	sbci	r23, 0x84	; 132
     ed2:	8e 41       	sbci	r24, 0x1E	; 30
     ed4:	91 05       	cpc	r25, r1
     ed6:	c9 f1       	breq	.+114    	; 0xf4a <uart_init+0xfc>
     ed8:	3d c0       	rjmp	.+122    	; 0xf54 <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
     eda:	8f ec       	ldi	r24, 0xCF	; 207
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     ee2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     ee6:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
     ee8:	8a e8       	ldi	r24, 0x8A	; 138
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     ef0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     ef4:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
     ef6:	87 e6       	ldi	r24, 0x67	; 103
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     efe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f02:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
     f04:	83 e3       	ldi	r24, 0x33	; 51
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f0c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f10:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
     f12:	89 e1       	ldi	r24, 0x19	; 25
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f1a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f1e:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
     f20:	87 e0       	ldi	r24, 0x07	; 7
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f28:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f2c:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f36:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f3a:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f44:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f48:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
     f4a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f4e:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f52:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
     f54:	8f ec       	ldi	r24, 0xCF	; 207
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f5c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f60:	08 95       	ret

00000f62 <send_str>:
	}
	
}

void send_str(char *str)
{
     f62:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
     f64:	90 81       	ld	r25, Z
     f66:	99 23       	and	r25, r25
     f68:	71 f0       	breq	.+28     	; 0xf86 <send_str+0x24>
     f6a:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
     f6c:	a6 ec       	ldi	r26, 0xC6	; 198
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
		poslato = 1;		//flag koji se resetuje u TX ISR-u
     f70:	81 e0       	ldi	r24, 0x01	; 1
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
     f72:	9c 93       	st	X, r25
		poslato = 1;		//flag koji se resetuje u TX ISR-u
     f74:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <poslato>
		while (poslato);	//koci dok ISR ne kaze da je gotovo
     f78:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <poslato>
     f7c:	91 11       	cpse	r25, r1
     f7e:	fc cf       	rjmp	.-8      	; 0xf78 <send_str+0x16>

void send_str(char *str)
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
     f80:	91 91       	ld	r25, Z+
     f82:	91 11       	cpse	r25, r1
     f84:	f6 cf       	rjmp	.-20     	; 0xf72 <send_str+0x10>
     f86:	08 95       	ret

00000f88 <sprintf>:
     f88:	ae e0       	ldi	r26, 0x0E	; 14
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	ea ec       	ldi	r30, 0xCA	; 202
     f8e:	f7 e0       	ldi	r31, 0x07	; 7
     f90:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__prologue_saves__+0x1c>
     f94:	0d 89       	ldd	r16, Y+21	; 0x15
     f96:	1e 89       	ldd	r17, Y+22	; 0x16
     f98:	86 e0       	ldi	r24, 0x06	; 6
     f9a:	8c 83       	std	Y+4, r24	; 0x04
     f9c:	1a 83       	std	Y+2, r17	; 0x02
     f9e:	09 83       	std	Y+1, r16	; 0x01
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	9f e7       	ldi	r25, 0x7F	; 127
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	ae 01       	movw	r20, r28
     faa:	47 5e       	subi	r20, 0xE7	; 231
     fac:	5f 4f       	sbci	r21, 0xFF	; 255
     fae:	6f 89       	ldd	r22, Y+23	; 0x17
     fb0:	78 8d       	ldd	r23, Y+24	; 0x18
     fb2:	ce 01       	movw	r24, r28
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <vfprintf>
     fba:	ef 81       	ldd	r30, Y+7	; 0x07
     fbc:	f8 85       	ldd	r31, Y+8	; 0x08
     fbe:	e0 0f       	add	r30, r16
     fc0:	f1 1f       	adc	r31, r17
     fc2:	10 82       	st	Z, r1
     fc4:	2e 96       	adiw	r28, 0x0e	; 14
     fc6:	e4 e0       	ldi	r30, 0x04	; 4
     fc8:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__epilogue_restores__+0x1c>

00000fcc <vfprintf>:
     fcc:	ab e0       	ldi	r26, 0x0B	; 11
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ec ee       	ldi	r30, 0xEC	; 236
     fd2:	f7 e0       	ldi	r31, 0x07	; 7
     fd4:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__prologue_saves__>
     fd8:	6c 01       	movw	r12, r24
     fda:	7b 01       	movw	r14, r22
     fdc:	8a 01       	movw	r16, r20
     fde:	fc 01       	movw	r30, r24
     fe0:	17 82       	std	Z+7, r1	; 0x07
     fe2:	16 82       	std	Z+6, r1	; 0x06
     fe4:	83 81       	ldd	r24, Z+3	; 0x03
     fe6:	81 ff       	sbrs	r24, 1
     fe8:	cc c1       	rjmp	.+920    	; 0x1382 <vfprintf+0x3b6>
     fea:	ce 01       	movw	r24, r28
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	3c 01       	movw	r6, r24
     ff0:	f6 01       	movw	r30, r12
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	f7 01       	movw	r30, r14
     ff6:	93 fd       	sbrc	r25, 3
     ff8:	85 91       	lpm	r24, Z+
     ffa:	93 ff       	sbrs	r25, 3
     ffc:	81 91       	ld	r24, Z+
     ffe:	7f 01       	movw	r14, r30
    1000:	88 23       	and	r24, r24
    1002:	09 f4       	brne	.+2      	; 0x1006 <vfprintf+0x3a>
    1004:	ba c1       	rjmp	.+884    	; 0x137a <vfprintf+0x3ae>
    1006:	85 32       	cpi	r24, 0x25	; 37
    1008:	39 f4       	brne	.+14     	; 0x1018 <vfprintf+0x4c>
    100a:	93 fd       	sbrc	r25, 3
    100c:	85 91       	lpm	r24, Z+
    100e:	93 ff       	sbrs	r25, 3
    1010:	81 91       	ld	r24, Z+
    1012:	7f 01       	movw	r14, r30
    1014:	85 32       	cpi	r24, 0x25	; 37
    1016:	29 f4       	brne	.+10     	; 0x1022 <vfprintf+0x56>
    1018:	b6 01       	movw	r22, r12
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <fputc>
    1020:	e7 cf       	rjmp	.-50     	; 0xff0 <vfprintf+0x24>
    1022:	91 2c       	mov	r9, r1
    1024:	21 2c       	mov	r2, r1
    1026:	31 2c       	mov	r3, r1
    1028:	ff e1       	ldi	r31, 0x1F	; 31
    102a:	f3 15       	cp	r31, r3
    102c:	d8 f0       	brcs	.+54     	; 0x1064 <vfprintf+0x98>
    102e:	8b 32       	cpi	r24, 0x2B	; 43
    1030:	79 f0       	breq	.+30     	; 0x1050 <vfprintf+0x84>
    1032:	38 f4       	brcc	.+14     	; 0x1042 <vfprintf+0x76>
    1034:	80 32       	cpi	r24, 0x20	; 32
    1036:	79 f0       	breq	.+30     	; 0x1056 <vfprintf+0x8a>
    1038:	83 32       	cpi	r24, 0x23	; 35
    103a:	a1 f4       	brne	.+40     	; 0x1064 <vfprintf+0x98>
    103c:	23 2d       	mov	r18, r3
    103e:	20 61       	ori	r18, 0x10	; 16
    1040:	1d c0       	rjmp	.+58     	; 0x107c <vfprintf+0xb0>
    1042:	8d 32       	cpi	r24, 0x2D	; 45
    1044:	61 f0       	breq	.+24     	; 0x105e <vfprintf+0x92>
    1046:	80 33       	cpi	r24, 0x30	; 48
    1048:	69 f4       	brne	.+26     	; 0x1064 <vfprintf+0x98>
    104a:	23 2d       	mov	r18, r3
    104c:	21 60       	ori	r18, 0x01	; 1
    104e:	16 c0       	rjmp	.+44     	; 0x107c <vfprintf+0xb0>
    1050:	83 2d       	mov	r24, r3
    1052:	82 60       	ori	r24, 0x02	; 2
    1054:	38 2e       	mov	r3, r24
    1056:	e3 2d       	mov	r30, r3
    1058:	e4 60       	ori	r30, 0x04	; 4
    105a:	3e 2e       	mov	r3, r30
    105c:	2a c0       	rjmp	.+84     	; 0x10b2 <vfprintf+0xe6>
    105e:	f3 2d       	mov	r31, r3
    1060:	f8 60       	ori	r31, 0x08	; 8
    1062:	1d c0       	rjmp	.+58     	; 0x109e <vfprintf+0xd2>
    1064:	37 fc       	sbrc	r3, 7
    1066:	2d c0       	rjmp	.+90     	; 0x10c2 <vfprintf+0xf6>
    1068:	20 ed       	ldi	r18, 0xD0	; 208
    106a:	28 0f       	add	r18, r24
    106c:	2a 30       	cpi	r18, 0x0A	; 10
    106e:	40 f0       	brcs	.+16     	; 0x1080 <vfprintf+0xb4>
    1070:	8e 32       	cpi	r24, 0x2E	; 46
    1072:	b9 f4       	brne	.+46     	; 0x10a2 <vfprintf+0xd6>
    1074:	36 fc       	sbrc	r3, 6
    1076:	81 c1       	rjmp	.+770    	; 0x137a <vfprintf+0x3ae>
    1078:	23 2d       	mov	r18, r3
    107a:	20 64       	ori	r18, 0x40	; 64
    107c:	32 2e       	mov	r3, r18
    107e:	19 c0       	rjmp	.+50     	; 0x10b2 <vfprintf+0xe6>
    1080:	36 fe       	sbrs	r3, 6
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <vfprintf+0xc4>
    1084:	8a e0       	ldi	r24, 0x0A	; 10
    1086:	98 9e       	mul	r9, r24
    1088:	20 0d       	add	r18, r0
    108a:	11 24       	eor	r1, r1
    108c:	92 2e       	mov	r9, r18
    108e:	11 c0       	rjmp	.+34     	; 0x10b2 <vfprintf+0xe6>
    1090:	ea e0       	ldi	r30, 0x0A	; 10
    1092:	2e 9e       	mul	r2, r30
    1094:	20 0d       	add	r18, r0
    1096:	11 24       	eor	r1, r1
    1098:	22 2e       	mov	r2, r18
    109a:	f3 2d       	mov	r31, r3
    109c:	f0 62       	ori	r31, 0x20	; 32
    109e:	3f 2e       	mov	r3, r31
    10a0:	08 c0       	rjmp	.+16     	; 0x10b2 <vfprintf+0xe6>
    10a2:	8c 36       	cpi	r24, 0x6C	; 108
    10a4:	21 f4       	brne	.+8      	; 0x10ae <vfprintf+0xe2>
    10a6:	83 2d       	mov	r24, r3
    10a8:	80 68       	ori	r24, 0x80	; 128
    10aa:	38 2e       	mov	r3, r24
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <vfprintf+0xe6>
    10ae:	88 36       	cpi	r24, 0x68	; 104
    10b0:	41 f4       	brne	.+16     	; 0x10c2 <vfprintf+0xf6>
    10b2:	f7 01       	movw	r30, r14
    10b4:	93 fd       	sbrc	r25, 3
    10b6:	85 91       	lpm	r24, Z+
    10b8:	93 ff       	sbrs	r25, 3
    10ba:	81 91       	ld	r24, Z+
    10bc:	7f 01       	movw	r14, r30
    10be:	81 11       	cpse	r24, r1
    10c0:	b3 cf       	rjmp	.-154    	; 0x1028 <vfprintf+0x5c>
    10c2:	98 2f       	mov	r25, r24
    10c4:	9f 7d       	andi	r25, 0xDF	; 223
    10c6:	95 54       	subi	r25, 0x45	; 69
    10c8:	93 30       	cpi	r25, 0x03	; 3
    10ca:	28 f4       	brcc	.+10     	; 0x10d6 <vfprintf+0x10a>
    10cc:	0c 5f       	subi	r16, 0xFC	; 252
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	9f e3       	ldi	r25, 0x3F	; 63
    10d2:	99 83       	std	Y+1, r25	; 0x01
    10d4:	0d c0       	rjmp	.+26     	; 0x10f0 <vfprintf+0x124>
    10d6:	83 36       	cpi	r24, 0x63	; 99
    10d8:	31 f0       	breq	.+12     	; 0x10e6 <vfprintf+0x11a>
    10da:	83 37       	cpi	r24, 0x73	; 115
    10dc:	71 f0       	breq	.+28     	; 0x10fa <vfprintf+0x12e>
    10de:	83 35       	cpi	r24, 0x53	; 83
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <vfprintf+0x118>
    10e2:	59 c0       	rjmp	.+178    	; 0x1196 <vfprintf+0x1ca>
    10e4:	21 c0       	rjmp	.+66     	; 0x1128 <vfprintf+0x15c>
    10e6:	f8 01       	movw	r30, r16
    10e8:	80 81       	ld	r24, Z
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	0e 5f       	subi	r16, 0xFE	; 254
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	88 24       	eor	r8, r8
    10f2:	83 94       	inc	r8
    10f4:	91 2c       	mov	r9, r1
    10f6:	53 01       	movw	r10, r6
    10f8:	13 c0       	rjmp	.+38     	; 0x1120 <vfprintf+0x154>
    10fa:	28 01       	movw	r4, r16
    10fc:	f2 e0       	ldi	r31, 0x02	; 2
    10fe:	4f 0e       	add	r4, r31
    1100:	51 1c       	adc	r5, r1
    1102:	f8 01       	movw	r30, r16
    1104:	a0 80       	ld	r10, Z
    1106:	b1 80       	ldd	r11, Z+1	; 0x01
    1108:	36 fe       	sbrs	r3, 6
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <vfprintf+0x146>
    110c:	69 2d       	mov	r22, r9
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <vfprintf+0x14a>
    1112:	6f ef       	ldi	r22, 0xFF	; 255
    1114:	7f ef       	ldi	r23, 0xFF	; 255
    1116:	c5 01       	movw	r24, r10
    1118:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <strnlen>
    111c:	4c 01       	movw	r8, r24
    111e:	82 01       	movw	r16, r4
    1120:	f3 2d       	mov	r31, r3
    1122:	ff 77       	andi	r31, 0x7F	; 127
    1124:	3f 2e       	mov	r3, r31
    1126:	16 c0       	rjmp	.+44     	; 0x1154 <vfprintf+0x188>
    1128:	28 01       	movw	r4, r16
    112a:	22 e0       	ldi	r18, 0x02	; 2
    112c:	42 0e       	add	r4, r18
    112e:	51 1c       	adc	r5, r1
    1130:	f8 01       	movw	r30, r16
    1132:	a0 80       	ld	r10, Z
    1134:	b1 80       	ldd	r11, Z+1	; 0x01
    1136:	36 fe       	sbrs	r3, 6
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <vfprintf+0x174>
    113a:	69 2d       	mov	r22, r9
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <vfprintf+0x178>
    1140:	6f ef       	ldi	r22, 0xFF	; 255
    1142:	7f ef       	ldi	r23, 0xFF	; 255
    1144:	c5 01       	movw	r24, r10
    1146:	0e 94 c7 09 	call	0x138e	; 0x138e <strnlen_P>
    114a:	4c 01       	movw	r8, r24
    114c:	f3 2d       	mov	r31, r3
    114e:	f0 68       	ori	r31, 0x80	; 128
    1150:	3f 2e       	mov	r3, r31
    1152:	82 01       	movw	r16, r4
    1154:	33 fc       	sbrc	r3, 3
    1156:	1b c0       	rjmp	.+54     	; 0x118e <vfprintf+0x1c2>
    1158:	82 2d       	mov	r24, r2
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	88 16       	cp	r8, r24
    115e:	99 06       	cpc	r9, r25
    1160:	b0 f4       	brcc	.+44     	; 0x118e <vfprintf+0x1c2>
    1162:	b6 01       	movw	r22, r12
    1164:	80 e2       	ldi	r24, 0x20	; 32
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 dd 09 	call	0x13ba	; 0x13ba <fputc>
    116c:	2a 94       	dec	r2
    116e:	f4 cf       	rjmp	.-24     	; 0x1158 <vfprintf+0x18c>
    1170:	f5 01       	movw	r30, r10
    1172:	37 fc       	sbrc	r3, 7
    1174:	85 91       	lpm	r24, Z+
    1176:	37 fe       	sbrs	r3, 7
    1178:	81 91       	ld	r24, Z+
    117a:	5f 01       	movw	r10, r30
    117c:	b6 01       	movw	r22, r12
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 dd 09 	call	0x13ba	; 0x13ba <fputc>
    1184:	21 10       	cpse	r2, r1
    1186:	2a 94       	dec	r2
    1188:	21 e0       	ldi	r18, 0x01	; 1
    118a:	82 1a       	sub	r8, r18
    118c:	91 08       	sbc	r9, r1
    118e:	81 14       	cp	r8, r1
    1190:	91 04       	cpc	r9, r1
    1192:	71 f7       	brne	.-36     	; 0x1170 <vfprintf+0x1a4>
    1194:	e8 c0       	rjmp	.+464    	; 0x1366 <vfprintf+0x39a>
    1196:	84 36       	cpi	r24, 0x64	; 100
    1198:	11 f0       	breq	.+4      	; 0x119e <vfprintf+0x1d2>
    119a:	89 36       	cpi	r24, 0x69	; 105
    119c:	41 f5       	brne	.+80     	; 0x11ee <vfprintf+0x222>
    119e:	f8 01       	movw	r30, r16
    11a0:	37 fe       	sbrs	r3, 7
    11a2:	07 c0       	rjmp	.+14     	; 0x11b2 <vfprintf+0x1e6>
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	0c 5f       	subi	r16, 0xFC	; 252
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <vfprintf+0x1f6>
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	07 2e       	mov	r0, r23
    11b8:	00 0c       	add	r0, r0
    11ba:	88 0b       	sbc	r24, r24
    11bc:	99 0b       	sbc	r25, r25
    11be:	0e 5f       	subi	r16, 0xFE	; 254
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	f3 2d       	mov	r31, r3
    11c4:	ff 76       	andi	r31, 0x6F	; 111
    11c6:	3f 2e       	mov	r3, r31
    11c8:	97 ff       	sbrs	r25, 7
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <vfprintf+0x212>
    11cc:	90 95       	com	r25
    11ce:	80 95       	com	r24
    11d0:	70 95       	com	r23
    11d2:	61 95       	neg	r22
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	8f 4f       	sbci	r24, 0xFF	; 255
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
    11da:	f0 68       	ori	r31, 0x80	; 128
    11dc:	3f 2e       	mov	r3, r31
    11de:	2a e0       	ldi	r18, 0x0A	; 10
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	a3 01       	movw	r20, r6
    11e4:	0e 94 19 0a 	call	0x1432	; 0x1432 <__ultoa_invert>
    11e8:	88 2e       	mov	r8, r24
    11ea:	86 18       	sub	r8, r6
    11ec:	45 c0       	rjmp	.+138    	; 0x1278 <vfprintf+0x2ac>
    11ee:	85 37       	cpi	r24, 0x75	; 117
    11f0:	31 f4       	brne	.+12     	; 0x11fe <vfprintf+0x232>
    11f2:	23 2d       	mov	r18, r3
    11f4:	2f 7e       	andi	r18, 0xEF	; 239
    11f6:	b2 2e       	mov	r11, r18
    11f8:	2a e0       	ldi	r18, 0x0A	; 10
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	25 c0       	rjmp	.+74     	; 0x1248 <vfprintf+0x27c>
    11fe:	93 2d       	mov	r25, r3
    1200:	99 7f       	andi	r25, 0xF9	; 249
    1202:	b9 2e       	mov	r11, r25
    1204:	8f 36       	cpi	r24, 0x6F	; 111
    1206:	c1 f0       	breq	.+48     	; 0x1238 <vfprintf+0x26c>
    1208:	18 f4       	brcc	.+6      	; 0x1210 <vfprintf+0x244>
    120a:	88 35       	cpi	r24, 0x58	; 88
    120c:	79 f0       	breq	.+30     	; 0x122c <vfprintf+0x260>
    120e:	b5 c0       	rjmp	.+362    	; 0x137a <vfprintf+0x3ae>
    1210:	80 37       	cpi	r24, 0x70	; 112
    1212:	19 f0       	breq	.+6      	; 0x121a <vfprintf+0x24e>
    1214:	88 37       	cpi	r24, 0x78	; 120
    1216:	21 f0       	breq	.+8      	; 0x1220 <vfprintf+0x254>
    1218:	b0 c0       	rjmp	.+352    	; 0x137a <vfprintf+0x3ae>
    121a:	e9 2f       	mov	r30, r25
    121c:	e0 61       	ori	r30, 0x10	; 16
    121e:	be 2e       	mov	r11, r30
    1220:	b4 fe       	sbrs	r11, 4
    1222:	0d c0       	rjmp	.+26     	; 0x123e <vfprintf+0x272>
    1224:	fb 2d       	mov	r31, r11
    1226:	f4 60       	ori	r31, 0x04	; 4
    1228:	bf 2e       	mov	r11, r31
    122a:	09 c0       	rjmp	.+18     	; 0x123e <vfprintf+0x272>
    122c:	34 fe       	sbrs	r3, 4
    122e:	0a c0       	rjmp	.+20     	; 0x1244 <vfprintf+0x278>
    1230:	29 2f       	mov	r18, r25
    1232:	26 60       	ori	r18, 0x06	; 6
    1234:	b2 2e       	mov	r11, r18
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <vfprintf+0x278>
    1238:	28 e0       	ldi	r18, 0x08	; 8
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <vfprintf+0x27c>
    123e:	20 e1       	ldi	r18, 0x10	; 16
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <vfprintf+0x27c>
    1244:	20 e1       	ldi	r18, 0x10	; 16
    1246:	32 e0       	ldi	r19, 0x02	; 2
    1248:	f8 01       	movw	r30, r16
    124a:	b7 fe       	sbrs	r11, 7
    124c:	07 c0       	rjmp	.+14     	; 0x125c <vfprintf+0x290>
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	93 81       	ldd	r25, Z+3	; 0x03
    1256:	0c 5f       	subi	r16, 0xFC	; 252
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <vfprintf+0x29c>
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 5f       	subi	r16, 0xFE	; 254
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	a3 01       	movw	r20, r6
    126a:	0e 94 19 0a 	call	0x1432	; 0x1432 <__ultoa_invert>
    126e:	88 2e       	mov	r8, r24
    1270:	86 18       	sub	r8, r6
    1272:	fb 2d       	mov	r31, r11
    1274:	ff 77       	andi	r31, 0x7F	; 127
    1276:	3f 2e       	mov	r3, r31
    1278:	36 fe       	sbrs	r3, 6
    127a:	0d c0       	rjmp	.+26     	; 0x1296 <vfprintf+0x2ca>
    127c:	23 2d       	mov	r18, r3
    127e:	2e 7f       	andi	r18, 0xFE	; 254
    1280:	a2 2e       	mov	r10, r18
    1282:	89 14       	cp	r8, r9
    1284:	58 f4       	brcc	.+22     	; 0x129c <vfprintf+0x2d0>
    1286:	34 fe       	sbrs	r3, 4
    1288:	0b c0       	rjmp	.+22     	; 0x12a0 <vfprintf+0x2d4>
    128a:	32 fc       	sbrc	r3, 2
    128c:	09 c0       	rjmp	.+18     	; 0x12a0 <vfprintf+0x2d4>
    128e:	83 2d       	mov	r24, r3
    1290:	8e 7e       	andi	r24, 0xEE	; 238
    1292:	a8 2e       	mov	r10, r24
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <vfprintf+0x2d4>
    1296:	b8 2c       	mov	r11, r8
    1298:	a3 2c       	mov	r10, r3
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <vfprintf+0x2d6>
    129c:	b8 2c       	mov	r11, r8
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <vfprintf+0x2d6>
    12a0:	b9 2c       	mov	r11, r9
    12a2:	a4 fe       	sbrs	r10, 4
    12a4:	0f c0       	rjmp	.+30     	; 0x12c4 <vfprintf+0x2f8>
    12a6:	fe 01       	movw	r30, r28
    12a8:	e8 0d       	add	r30, r8
    12aa:	f1 1d       	adc	r31, r1
    12ac:	80 81       	ld	r24, Z
    12ae:	80 33       	cpi	r24, 0x30	; 48
    12b0:	21 f4       	brne	.+8      	; 0x12ba <vfprintf+0x2ee>
    12b2:	9a 2d       	mov	r25, r10
    12b4:	99 7e       	andi	r25, 0xE9	; 233
    12b6:	a9 2e       	mov	r10, r25
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <vfprintf+0x300>
    12ba:	a2 fe       	sbrs	r10, 2
    12bc:	06 c0       	rjmp	.+12     	; 0x12ca <vfprintf+0x2fe>
    12be:	b3 94       	inc	r11
    12c0:	b3 94       	inc	r11
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <vfprintf+0x300>
    12c4:	8a 2d       	mov	r24, r10
    12c6:	86 78       	andi	r24, 0x86	; 134
    12c8:	09 f0       	breq	.+2      	; 0x12cc <vfprintf+0x300>
    12ca:	b3 94       	inc	r11
    12cc:	a3 fc       	sbrc	r10, 3
    12ce:	11 c0       	rjmp	.+34     	; 0x12f2 <vfprintf+0x326>
    12d0:	a0 fe       	sbrs	r10, 0
    12d2:	06 c0       	rjmp	.+12     	; 0x12e0 <vfprintf+0x314>
    12d4:	b2 14       	cp	r11, r2
    12d6:	88 f4       	brcc	.+34     	; 0x12fa <vfprintf+0x32e>
    12d8:	28 0c       	add	r2, r8
    12da:	92 2c       	mov	r9, r2
    12dc:	9b 18       	sub	r9, r11
    12de:	0e c0       	rjmp	.+28     	; 0x12fc <vfprintf+0x330>
    12e0:	b2 14       	cp	r11, r2
    12e2:	60 f4       	brcc	.+24     	; 0x12fc <vfprintf+0x330>
    12e4:	b6 01       	movw	r22, r12
    12e6:	80 e2       	ldi	r24, 0x20	; 32
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 dd 09 	call	0x13ba	; 0x13ba <fputc>
    12ee:	b3 94       	inc	r11
    12f0:	f7 cf       	rjmp	.-18     	; 0x12e0 <vfprintf+0x314>
    12f2:	b2 14       	cp	r11, r2
    12f4:	18 f4       	brcc	.+6      	; 0x12fc <vfprintf+0x330>
    12f6:	2b 18       	sub	r2, r11
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <vfprintf+0x332>
    12fa:	98 2c       	mov	r9, r8
    12fc:	21 2c       	mov	r2, r1
    12fe:	a4 fe       	sbrs	r10, 4
    1300:	10 c0       	rjmp	.+32     	; 0x1322 <vfprintf+0x356>
    1302:	b6 01       	movw	r22, r12
    1304:	80 e3       	ldi	r24, 0x30	; 48
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 dd 09 	call	0x13ba	; 0x13ba <fputc>
    130c:	a2 fe       	sbrs	r10, 2
    130e:	17 c0       	rjmp	.+46     	; 0x133e <vfprintf+0x372>
    1310:	a1 fc       	sbrc	r10, 1
    1312:	03 c0       	rjmp	.+6      	; 0x131a <vfprintf+0x34e>
    1314:	88 e7       	ldi	r24, 0x78	; 120
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 c0       	rjmp	.+4      	; 0x131e <vfprintf+0x352>
    131a:	88 e5       	ldi	r24, 0x58	; 88
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	b6 01       	movw	r22, r12
    1320:	0c c0       	rjmp	.+24     	; 0x133a <vfprintf+0x36e>
    1322:	8a 2d       	mov	r24, r10
    1324:	86 78       	andi	r24, 0x86	; 134
    1326:	59 f0       	breq	.+22     	; 0x133e <vfprintf+0x372>
    1328:	a1 fe       	sbrs	r10, 1
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <vfprintf+0x364>
    132c:	8b e2       	ldi	r24, 0x2B	; 43
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <vfprintf+0x366>
    1330:	80 e2       	ldi	r24, 0x20	; 32
    1332:	a7 fc       	sbrc	r10, 7
    1334:	8d e2       	ldi	r24, 0x2D	; 45
    1336:	b6 01       	movw	r22, r12
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <fputc>
    133e:	89 14       	cp	r8, r9
    1340:	38 f4       	brcc	.+14     	; 0x1350 <vfprintf+0x384>
    1342:	b6 01       	movw	r22, r12
    1344:	80 e3       	ldi	r24, 0x30	; 48
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 dd 09 	call	0x13ba	; 0x13ba <fputc>
    134c:	9a 94       	dec	r9
    134e:	f7 cf       	rjmp	.-18     	; 0x133e <vfprintf+0x372>
    1350:	8a 94       	dec	r8
    1352:	f3 01       	movw	r30, r6
    1354:	e8 0d       	add	r30, r8
    1356:	f1 1d       	adc	r31, r1
    1358:	80 81       	ld	r24, Z
    135a:	b6 01       	movw	r22, r12
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <fputc>
    1362:	81 10       	cpse	r8, r1
    1364:	f5 cf       	rjmp	.-22     	; 0x1350 <vfprintf+0x384>
    1366:	22 20       	and	r2, r2
    1368:	09 f4       	brne	.+2      	; 0x136c <vfprintf+0x3a0>
    136a:	42 ce       	rjmp	.-892    	; 0xff0 <vfprintf+0x24>
    136c:	b6 01       	movw	r22, r12
    136e:	80 e2       	ldi	r24, 0x20	; 32
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 dd 09 	call	0x13ba	; 0x13ba <fputc>
    1376:	2a 94       	dec	r2
    1378:	f6 cf       	rjmp	.-20     	; 0x1366 <vfprintf+0x39a>
    137a:	f6 01       	movw	r30, r12
    137c:	86 81       	ldd	r24, Z+6	; 0x06
    137e:	97 81       	ldd	r25, Z+7	; 0x07
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <vfprintf+0x3ba>
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	9f ef       	ldi	r25, 0xFF	; 255
    1386:	2b 96       	adiw	r28, 0x0b	; 11
    1388:	e2 e1       	ldi	r30, 0x12	; 18
    138a:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__epilogue_restores__>

0000138e <strnlen_P>:
    138e:	fc 01       	movw	r30, r24
    1390:	05 90       	lpm	r0, Z+
    1392:	61 50       	subi	r22, 0x01	; 1
    1394:	70 40       	sbci	r23, 0x00	; 0
    1396:	01 10       	cpse	r0, r1
    1398:	d8 f7       	brcc	.-10     	; 0x1390 <strnlen_P+0x2>
    139a:	80 95       	com	r24
    139c:	90 95       	com	r25
    139e:	8e 0f       	add	r24, r30
    13a0:	9f 1f       	adc	r25, r31
    13a2:	08 95       	ret

000013a4 <strnlen>:
    13a4:	fc 01       	movw	r30, r24
    13a6:	61 50       	subi	r22, 0x01	; 1
    13a8:	70 40       	sbci	r23, 0x00	; 0
    13aa:	01 90       	ld	r0, Z+
    13ac:	01 10       	cpse	r0, r1
    13ae:	d8 f7       	brcc	.-10     	; 0x13a6 <strnlen+0x2>
    13b0:	80 95       	com	r24
    13b2:	90 95       	com	r25
    13b4:	8e 0f       	add	r24, r30
    13b6:	9f 1f       	adc	r25, r31
    13b8:	08 95       	ret

000013ba <fputc>:
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	fb 01       	movw	r30, r22
    13c4:	23 81       	ldd	r18, Z+3	; 0x03
    13c6:	21 fd       	sbrc	r18, 1
    13c8:	03 c0       	rjmp	.+6      	; 0x13d0 <fputc+0x16>
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	9f ef       	ldi	r25, 0xFF	; 255
    13ce:	2c c0       	rjmp	.+88     	; 0x1428 <fputc+0x6e>
    13d0:	22 ff       	sbrs	r18, 2
    13d2:	16 c0       	rjmp	.+44     	; 0x1400 <fputc+0x46>
    13d4:	46 81       	ldd	r20, Z+6	; 0x06
    13d6:	57 81       	ldd	r21, Z+7	; 0x07
    13d8:	24 81       	ldd	r18, Z+4	; 0x04
    13da:	35 81       	ldd	r19, Z+5	; 0x05
    13dc:	42 17       	cp	r20, r18
    13de:	53 07       	cpc	r21, r19
    13e0:	44 f4       	brge	.+16     	; 0x13f2 <fputc+0x38>
    13e2:	a0 81       	ld	r26, Z
    13e4:	b1 81       	ldd	r27, Z+1	; 0x01
    13e6:	9d 01       	movw	r18, r26
    13e8:	2f 5f       	subi	r18, 0xFF	; 255
    13ea:	3f 4f       	sbci	r19, 0xFF	; 255
    13ec:	31 83       	std	Z+1, r19	; 0x01
    13ee:	20 83       	st	Z, r18
    13f0:	8c 93       	st	X, r24
    13f2:	26 81       	ldd	r18, Z+6	; 0x06
    13f4:	37 81       	ldd	r19, Z+7	; 0x07
    13f6:	2f 5f       	subi	r18, 0xFF	; 255
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	37 83       	std	Z+7, r19	; 0x07
    13fc:	26 83       	std	Z+6, r18	; 0x06
    13fe:	14 c0       	rjmp	.+40     	; 0x1428 <fputc+0x6e>
    1400:	8b 01       	movw	r16, r22
    1402:	ec 01       	movw	r28, r24
    1404:	fb 01       	movw	r30, r22
    1406:	00 84       	ldd	r0, Z+8	; 0x08
    1408:	f1 85       	ldd	r31, Z+9	; 0x09
    140a:	e0 2d       	mov	r30, r0
    140c:	09 95       	icall
    140e:	89 2b       	or	r24, r25
    1410:	e1 f6       	brne	.-72     	; 0x13ca <fputc+0x10>
    1412:	d8 01       	movw	r26, r16
    1414:	16 96       	adiw	r26, 0x06	; 6
    1416:	8d 91       	ld	r24, X+
    1418:	9c 91       	ld	r25, X
    141a:	17 97       	sbiw	r26, 0x07	; 7
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	17 96       	adiw	r26, 0x07	; 7
    1420:	9c 93       	st	X, r25
    1422:	8e 93       	st	-X, r24
    1424:	16 97       	sbiw	r26, 0x06	; 6
    1426:	ce 01       	movw	r24, r28
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <__ultoa_invert>:
    1432:	fa 01       	movw	r30, r20
    1434:	aa 27       	eor	r26, r26
    1436:	28 30       	cpi	r18, 0x08	; 8
    1438:	51 f1       	breq	.+84     	; 0x148e <__ultoa_invert+0x5c>
    143a:	20 31       	cpi	r18, 0x10	; 16
    143c:	81 f1       	breq	.+96     	; 0x149e <__ultoa_invert+0x6c>
    143e:	e8 94       	clt
    1440:	6f 93       	push	r22
    1442:	6e 7f       	andi	r22, 0xFE	; 254
    1444:	6e 5f       	subi	r22, 0xFE	; 254
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	8f 4f       	sbci	r24, 0xFF	; 255
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	af 4f       	sbci	r26, 0xFF	; 255
    144e:	b1 e0       	ldi	r27, 0x01	; 1
    1450:	3e d0       	rcall	.+124    	; 0x14ce <__ultoa_invert+0x9c>
    1452:	b4 e0       	ldi	r27, 0x04	; 4
    1454:	3c d0       	rcall	.+120    	; 0x14ce <__ultoa_invert+0x9c>
    1456:	67 0f       	add	r22, r23
    1458:	78 1f       	adc	r23, r24
    145a:	89 1f       	adc	r24, r25
    145c:	9a 1f       	adc	r25, r26
    145e:	a1 1d       	adc	r26, r1
    1460:	68 0f       	add	r22, r24
    1462:	79 1f       	adc	r23, r25
    1464:	8a 1f       	adc	r24, r26
    1466:	91 1d       	adc	r25, r1
    1468:	a1 1d       	adc	r26, r1
    146a:	6a 0f       	add	r22, r26
    146c:	71 1d       	adc	r23, r1
    146e:	81 1d       	adc	r24, r1
    1470:	91 1d       	adc	r25, r1
    1472:	a1 1d       	adc	r26, r1
    1474:	20 d0       	rcall	.+64     	; 0x14b6 <__ultoa_invert+0x84>
    1476:	09 f4       	brne	.+2      	; 0x147a <__ultoa_invert+0x48>
    1478:	68 94       	set
    147a:	3f 91       	pop	r19
    147c:	2a e0       	ldi	r18, 0x0A	; 10
    147e:	26 9f       	mul	r18, r22
    1480:	11 24       	eor	r1, r1
    1482:	30 19       	sub	r19, r0
    1484:	30 5d       	subi	r19, 0xD0	; 208
    1486:	31 93       	st	Z+, r19
    1488:	de f6       	brtc	.-74     	; 0x1440 <__ultoa_invert+0xe>
    148a:	cf 01       	movw	r24, r30
    148c:	08 95       	ret
    148e:	46 2f       	mov	r20, r22
    1490:	47 70       	andi	r20, 0x07	; 7
    1492:	40 5d       	subi	r20, 0xD0	; 208
    1494:	41 93       	st	Z+, r20
    1496:	b3 e0       	ldi	r27, 0x03	; 3
    1498:	0f d0       	rcall	.+30     	; 0x14b8 <__ultoa_invert+0x86>
    149a:	c9 f7       	brne	.-14     	; 0x148e <__ultoa_invert+0x5c>
    149c:	f6 cf       	rjmp	.-20     	; 0x148a <__ultoa_invert+0x58>
    149e:	46 2f       	mov	r20, r22
    14a0:	4f 70       	andi	r20, 0x0F	; 15
    14a2:	40 5d       	subi	r20, 0xD0	; 208
    14a4:	4a 33       	cpi	r20, 0x3A	; 58
    14a6:	18 f0       	brcs	.+6      	; 0x14ae <__ultoa_invert+0x7c>
    14a8:	49 5d       	subi	r20, 0xD9	; 217
    14aa:	31 fd       	sbrc	r19, 1
    14ac:	40 52       	subi	r20, 0x20	; 32
    14ae:	41 93       	st	Z+, r20
    14b0:	02 d0       	rcall	.+4      	; 0x14b6 <__ultoa_invert+0x84>
    14b2:	a9 f7       	brne	.-22     	; 0x149e <__ultoa_invert+0x6c>
    14b4:	ea cf       	rjmp	.-44     	; 0x148a <__ultoa_invert+0x58>
    14b6:	b4 e0       	ldi	r27, 0x04	; 4
    14b8:	a6 95       	lsr	r26
    14ba:	97 95       	ror	r25
    14bc:	87 95       	ror	r24
    14be:	77 95       	ror	r23
    14c0:	67 95       	ror	r22
    14c2:	ba 95       	dec	r27
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__ultoa_invert+0x86>
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	61 05       	cpc	r22, r1
    14ca:	71 05       	cpc	r23, r1
    14cc:	08 95       	ret
    14ce:	9b 01       	movw	r18, r22
    14d0:	ac 01       	movw	r20, r24
    14d2:	0a 2e       	mov	r0, r26
    14d4:	06 94       	lsr	r0
    14d6:	57 95       	ror	r21
    14d8:	47 95       	ror	r20
    14da:	37 95       	ror	r19
    14dc:	27 95       	ror	r18
    14de:	ba 95       	dec	r27
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <__ultoa_invert+0xa2>
    14e2:	62 0f       	add	r22, r18
    14e4:	73 1f       	adc	r23, r19
    14e6:	84 1f       	adc	r24, r20
    14e8:	95 1f       	adc	r25, r21
    14ea:	a0 1d       	adc	r26, r0
    14ec:	08 95       	ret

000014ee <__prologue_saves__>:
    14ee:	2f 92       	push	r2
    14f0:	3f 92       	push	r3
    14f2:	4f 92       	push	r4
    14f4:	5f 92       	push	r5
    14f6:	6f 92       	push	r6
    14f8:	7f 92       	push	r7
    14fa:	8f 92       	push	r8
    14fc:	9f 92       	push	r9
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	ca 1b       	sub	r28, r26
    1518:	db 0b       	sbc	r29, r27
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	09 94       	ijmp

00001526 <__epilogue_restores__>:
    1526:	2a 88       	ldd	r2, Y+18	; 0x12
    1528:	39 88       	ldd	r3, Y+17	; 0x11
    152a:	48 88       	ldd	r4, Y+16	; 0x10
    152c:	5f 84       	ldd	r5, Y+15	; 0x0f
    152e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1530:	7d 84       	ldd	r7, Y+13	; 0x0d
    1532:	8c 84       	ldd	r8, Y+12	; 0x0c
    1534:	9b 84       	ldd	r9, Y+11	; 0x0b
    1536:	aa 84       	ldd	r10, Y+10	; 0x0a
    1538:	b9 84       	ldd	r11, Y+9	; 0x09
    153a:	c8 84       	ldd	r12, Y+8	; 0x08
    153c:	df 80       	ldd	r13, Y+7	; 0x07
    153e:	ee 80       	ldd	r14, Y+6	; 0x06
    1540:	fd 80       	ldd	r15, Y+5	; 0x05
    1542:	0c 81       	ldd	r16, Y+4	; 0x04
    1544:	1b 81       	ldd	r17, Y+3	; 0x03
    1546:	aa 81       	ldd	r26, Y+2	; 0x02
    1548:	b9 81       	ldd	r27, Y+1	; 0x01
    154a:	ce 0f       	add	r28, r30
    154c:	d1 1d       	adc	r29, r1
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	ed 01       	movw	r28, r26
    155a:	08 95       	ret

0000155c <_exit>:
    155c:	f8 94       	cli

0000155e <__stop_program>:
    155e:	ff cf       	rjmp	.-2      	; 0x155e <__stop_program>
