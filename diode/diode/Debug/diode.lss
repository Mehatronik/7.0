
diode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074a  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000682  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002af  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000385  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000016e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


int main(void)
{
    
	DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
    {

		
		for(i=0; i<5; i++)
		{
			PORTB = 1<<i;
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
			_delay_ms(100);
			PORTB = 0;
		}
		
		for(i=3; i>0; i--)
  98:	53 e0       	ldi	r21, 0x03	; 3
  9a:	40 e0       	ldi	r20, 0x00	; 0
	
    while (1) 
    {

		
		for(i=0; i<5; i++)
  9c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB = 1<<i;
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <main+0x20>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <main+0x1c>
  b4:	65 b9       	out	0x05, r22	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	7f ef       	ldi	r23, 0xFF	; 255
  b8:	81 ee       	ldi	r24, 0xE1	; 225
  ba:	94 e0       	ldi	r25, 0x04	; 4
  bc:	71 50       	subi	r23, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x2c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x36>
  c6:	00 00       	nop
			_delay_ms(100);
			PORTB = 0;
  c8:	15 b8       	out	0x05, r1	; 5
	
    while (1) 
    {

		
		for(i=0; i<5; i++)
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  dc:	85 30       	cpi	r24, 0x05	; 5
  de:	91 05       	cpc	r25, r1
  e0:	1c f3       	brlt	.-58     	; 0xa8 <main+0x18>
  e2:	1e c0       	rjmp	.+60     	; 0x120 <main+0x90>
			PORTB = 0;
		}
		
		for(i=3; i>0; i--)
		{
			PORTB = 1<<i;
  e4:	b9 01       	movw	r22, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x5c>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	8a 95       	dec	r24
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x58>
  f0:	65 b9       	out	0x05, r22	; 5
  f2:	7f ef       	ldi	r23, 0xFF	; 255
  f4:	81 ee       	ldi	r24, 0xE1	; 225
  f6:	94 e0       	ldi	r25, 0x04	; 4
  f8:	71 50       	subi	r23, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x68>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x72>
 102:	00 00       	nop
			_delay_ms(100);
			PORTB = 0;
 104:	15 b8       	out	0x05, r1	; 5
			PORTB = 1<<i;
			_delay_ms(100);
			PORTB = 0;
		}
		
		for(i=3; i>0; i--)
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 118:	18 16       	cp	r1, r24
 11a:	19 06       	cpc	r1, r25
 11c:	1c f3       	brlt	.-58     	; 0xe4 <main+0x54>
 11e:	be cf       	rjmp	.-132    	; 0x9c <main+0xc>
 120:	50 93 00 01 	sts	0x0100, r21	; 0x800100 <_edata>
 124:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <_edata+0x1>
 128:	85 2f       	mov	r24, r21
 12a:	dc cf       	rjmp	.-72     	; 0xe4 <main+0x54>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
