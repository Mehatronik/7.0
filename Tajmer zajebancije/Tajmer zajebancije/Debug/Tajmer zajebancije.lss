
Tajmer zajebancije.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000798  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b7  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032b  00000000  00000000  0000116f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e3  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000da  00000000  00000000  000018fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000019d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  88:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
	
	
}

ISR(ADC_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	//ADCL mora biti prvi procitan
	adc_low = (int)ADCL;    //koriste se dva 8-bit registra jer je rezultat AD konverzije 10-bitan
  9e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adc_low+0x1>
  a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adc_low>
	adc_high = (int)ADCH;
  ac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <adc_high+0x1>
  b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_high>
	
	/**stapam rezultate iz dva registra u jednu promenljivu na ovaj nacin**/
	if(adc_high==0)
  ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
  be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
  c2:	89 2b       	or	r24, r25
  c4:	49 f4       	brne	.+18     	; 0xd8 <__vector_21+0x48>
	adc_res = adc_low;
  c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adc_low>
  ca:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adc_low+0x1>
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  d6:	2f c0       	rjmp	.+94     	; 0x136 <__vector_21+0xa6>
	else if(adc_high==1)
  d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
  dc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	51 f4       	brne	.+20     	; 0xf8 <__vector_21+0x68>
	adc_res = 256 + adc_low;
  e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adc_low>
  e8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adc_low+0x1>
  ec:	93 95       	inc	r25
  ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f6:	1f c0       	rjmp	.+62     	; 0x136 <__vector_21+0xa6>
	else if(adc_high==2)
  f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
  fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
 100:	02 97       	sbiw	r24, 0x02	; 2
 102:	51 f4       	brne	.+20     	; 0x118 <__vector_21+0x88>
	adc_res = 256+256 + adc_low;
 104:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adc_low>
 108:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adc_low+0x1>
 10c:	9e 5f       	subi	r25, 0xFE	; 254
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 116:	0f c0       	rjmp	.+30     	; 0x136 <__vector_21+0xa6>
	else if(adc_high==3)
 118:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
 11c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
 120:	03 97       	sbiw	r24, 0x03	; 3
 122:	49 f4       	brne	.+18     	; 0x136 <__vector_21+0xa6>
	adc_res = 256+256+256 + adc_low;
 124:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adc_low>
 128:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adc_low+0x1>
 12c:	9d 5f       	subi	r25, 0xFD	; 253
 12e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	//adc_res = 1024 max
	
	OCR1A = adc_res; //2.56;
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 142:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
	//PINB |= 1<<PINB5; //toogle pin 5
	PORTB ^= 1<<5;
 162:	95 b1       	in	r25, 0x05	; 5
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	89 27       	eor	r24, r25
 168:	85 b9       	out	0x05, r24	; 5

}
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <main>:

int main(void)
{
    
	DDRB |= 1<<PORTB1;  //PB1 izlazni pin
 178:	21 9a       	sbi	0x04, 1	; 4
	
	//DDRD |= 1<<PORTD6; //PD6 izlaz (OC0A pin)
	     
	TCCR1A |= (1<<COM1A0);		//toogle, ctc mode
 17a:	e0 e8       	ldi	r30, 0x80	; 128
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)|(1<<CS10);	//prescaler = 1
 184:	e1 e8       	ldi	r30, 0x81	; 129
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	89 60       	ori	r24, 0x09	; 9
 18c:	80 83       	st	Z, r24
	OCR1A = 210;
 18e:	82 ed       	ldi	r24, 0xD2	; 210
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 196:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 |= 1<<OCIE1A;  //ctc A interrupt enable
 19a:	ef e6       	ldi	r30, 0x6F	; 111
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	80 83       	st	Z, r24
	
	
	
	//AD_C_init();
	
	sei();
 1a4:	78 94       	sei

	
    while (1) 
    {
		for(i =25 ; i<=50; i++)
 1a6:	29 e1       	ldi	r18, 0x19	; 25
 1a8:	30 e0       	ldi	r19, 0x00	; 0
		{
			OCR1A = i;
 1aa:	e8 e8       	ldi	r30, 0x88	; 136
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
	sei();

	
    while (1) 
    {
		for(i =25 ; i<=50; i++)
 1ae:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <i+0x1>
 1b2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <i>
 1b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i>
 1ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <i+0x1>
 1be:	c3 97       	sbiw	r24, 0x33	; 51
 1c0:	b4 f7       	brge	.-20     	; 0x1ae <main+0x36>
		{
			OCR1A = i;
 1c2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i>
 1c6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <i+0x1>
 1ca:	91 83       	std	Z+1, r25	; 0x01
 1cc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	4f ef       	ldi	r20, 0xFF	; 255
 1d0:	80 e7       	ldi	r24, 0x70	; 112
 1d2:	92 e0       	ldi	r25, 0x02	; 2
 1d4:	41 50       	subi	r20, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x5c>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x66>
 1de:	00 00       	nop
	sei();

	
    while (1) 
    {
		for(i =25 ; i<=50; i++)
 1e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i>
 1e4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <i+0x1>
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <i+0x1>
 1ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
 1f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i>
 1f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <i+0x1>
 1fa:	c3 97       	sbiw	r24, 0x33	; 51
 1fc:	14 f3       	brlt	.-60     	; 0x1c2 <main+0x4a>
 1fe:	d7 cf       	rjmp	.-82     	; 0x1ae <main+0x36>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
