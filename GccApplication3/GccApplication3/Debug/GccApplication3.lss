
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000701  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065e  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024a  00000000  00000000  00000f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006f  00000000  00000000  00001562  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_7>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <IO_init>:



void IO_init()
{
	DDRB |= ((1<<PORTB2)|(1<<PORTB3)) ; //PB2,PB3 izlazi (10, 11)
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 60       	ori	r24, 0x0C	; 12
  84:	84 b9       	out	0x04, r24	; 4
  86:	08 95       	ret

00000088 <timer2_init>:
	
}

void timer2_init()
{
	PRR = 0;  //ili: PRR &= ~(1<<PRTIM2); upis nule za svaki slucaj da se iskljuci sleep mod
  88:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	TCCR2A |= ( (1<<COM2A1)|(1<<WGM21)|(1<<WGM20) );  //pwm non-inverted na OC2A pinu (digital 11), TOP = OCR2A (gornja vrednost brojaca),, START Brojaca
  8c:	e0 eb       	ldi	r30, 0xB0	; 176
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	83 68       	ori	r24, 0x83	; 131
  94:	80 83       	st	Z, r24
	TCCR2B |= 0b01; //1<<CS21;  //prescaler 1/1   f=62.5kHz
  96:	e1 eb       	ldi	r30, 0xB1	; 177
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	80 83       	st	Z, r24
	OCR2A = 100;           //fakticki faktor ispune
  a0:	84 e6       	ldi	r24, 0x64	; 100
  a2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TIMSK2 |= 1<<OCIE2A;        //dozvola prekida tajmera #2 usled poredjenja sa OCR2A, tj. dostizanja tog broja
  a6:	e0 e7       	ldi	r30, 0x70	; 112
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	sei();                 //globalna dozvola prekida
  b0:	78 94       	sei
  b2:	08 95       	ret

000000b4 <__vector_7>:
}



ISR(TIMER2_COMPA_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
	
	//OCR2A = 20;
	
}
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <main>:
{
    
	int i;
	int niz[200];

	IO_init(); //inicijalizacija ulazno-izlaznih portva(pinova)
  c8:	0e 94 40 00 	call	0x80	; 0x80 <IO_init>
	timer2_init(); //inicijalizacija tajmera #2 
  cc:	0e 94 44 00 	call	0x88	; 0x88 <timer2_init>
  d0:	88 ec       	ldi	r24, 0xC8	; 200
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
	
	for(i=0; i<200; i++)
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0xc>
			i = 0;
		_delay_ms(50);
		
		
    }*/
}
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	08 95       	ret

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
