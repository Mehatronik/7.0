
DSP on atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000ac4  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006be  0080010e  0080010e  00000b66  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d26  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000908  00000000  00000000  000019f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c2  00000000  00000000  000022fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000489  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000365  00000000  00000000  00003101  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003466  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_20>
  54:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3c       	cpi	r26, 0xCC	; 204
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  9e:	0c 94 60 05 	jmp	0xac0	; 0xac0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADCSetup>:
		
		sample=sample>>6;
        sample=sample<<6;         

        return sample;
}
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8d 62       	ori	r24, 0x2D	; 45
  ae:	80 83       	st	Z, r24
  b0:	ac e7       	ldi	r26, 0x7C	; 124
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	8c 91       	ld	r24, X
  b6:	85 6e       	ori	r24, 0xE5	; 229
  b8:	8c 93       	st	X, r24
  ba:	80 81       	ld	r24, Z
  bc:	80 6c       	ori	r24, 0xC0	; 192
  be:	80 83       	st	Z, r24
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <PWMSetup>:
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	84 b5       	in	r24, 0x24	; 36
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	84 bd       	out	0x24, r24	; 36
  cc:	84 b5       	in	r24, 0x24	; 36
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	84 bd       	out	0x24, r24	; 36
  d2:	80 e8       	ldi	r24, 0x80	; 128
  d4:	88 bd       	out	0x28, r24	; 40
  d6:	85 b5       	in	r24, 0x25	; 37
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	85 bd       	out	0x25, r24	; 37
  dc:	08 95       	ret

000000de <buttonSetup>:
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	83 6c       	ori	r24, 0xC3	; 195
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	80 6c       	ori	r24, 0xC0	; 192
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	08 95       	ret

000000ec <echo>:
	static uint16_t indexRead=1;
	uint16_t temp=0;
	static uint8_t Buffer[BUFLENGTH]={0};
	static uint8_t downSample=1; //
		
	temp=sample  +  (Buffer[indexRead]>>1); //Reads sample and adds echo 
  ec:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <indexRead.1640>
  f0:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <indexRead.1640+0x1>
	
	Buffer[indexWrite]=(uint8_t)temp;	   
  f4:	40 91 84 04 	lds	r20, 0x0484	; 0x800484 <indexWrite.1639>
  f8:	50 91 85 04 	lds	r21, 0x0485	; 0x800485 <indexWrite.1639+0x1>
	static uint16_t indexRead=1;
	uint16_t temp=0;
	static uint8_t Buffer[BUFLENGTH]={0};
	static uint8_t downSample=1; //
		
	temp=sample  +  (Buffer[indexRead]>>1); //Reads sample and adds echo 
  fc:	f9 01       	movw	r30, r18
  fe:	ea 57       	subi	r30, 0x7A	; 122
 100:	fb 4f       	sbci	r31, 0xFB	; 251
 102:	90 81       	ld	r25, Z
 104:	96 95       	lsr	r25
 106:	89 0f       	add	r24, r25
	
	Buffer[indexWrite]=(uint8_t)temp;	   
 108:	fa 01       	movw	r30, r20
 10a:	ea 57       	subi	r30, 0x7A	; 122
 10c:	fb 4f       	sbci	r31, 0xFB	; 251
 10e:	80 83       	st	Z, r24

	if (downSample==1)
 110:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <downSample.1643>
 114:	91 30       	cpi	r25, 0x01	; 1
 116:	09 f5       	brne	.+66     	; 0x15a <echo+0x6e>
	{	
		indexRead++;
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
		if (indexRead==(BUFLENGTH-1)) indexRead=0;
 11c:	28 33       	cpi	r18, 0x38	; 56
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	39 07       	cpc	r19, r25
 122:	29 f0       	breq	.+10     	; 0x12e <echo+0x42>
	
	Buffer[indexWrite]=(uint8_t)temp;	   

	if (downSample==1)
	{	
		indexRead++;
 124:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <indexRead.1640+0x1>
 128:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <indexRead.1640>
 12c:	04 c0       	rjmp	.+8      	; 0x136 <echo+0x4a>
		if (indexRead==(BUFLENGTH-1)) indexRead=0;
 12e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <indexRead.1640+0x1>
 132:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <indexRead.1640>

		indexWrite++;
 136:	4f 5f       	subi	r20, 0xFF	; 255
 138:	5f 4f       	sbci	r21, 0xFF	; 255
		if (indexWrite==(BUFLENGTH-1)) indexWrite=0;
 13a:	48 33       	cpi	r20, 0x38	; 56
 13c:	93 e0       	ldi	r25, 0x03	; 3
 13e:	59 07       	cpc	r21, r25
 140:	29 f0       	breq	.+10     	; 0x14c <echo+0x60>
	if (downSample==1)
	{	
		indexRead++;
		if (indexRead==(BUFLENGTH-1)) indexRead=0;

		indexWrite++;
 142:	50 93 85 04 	sts	0x0485, r21	; 0x800485 <indexWrite.1639+0x1>
 146:	40 93 84 04 	sts	0x0484, r20	; 0x800484 <indexWrite.1639>
 14a:	04 c0       	rjmp	.+8      	; 0x154 <echo+0x68>
		if (indexWrite==(BUFLENGTH-1)) indexWrite=0;
 14c:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <indexWrite.1639+0x1>
 150:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <indexWrite.1639>

		downSample=0;
 154:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <downSample.1643>
 158:	08 95       	ret


	}else{
		downSample=1;
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <downSample.1643>
	}


	return  (uint8_t)temp;
}	
 160:	08 95       	ret

00000162 <phasor>:
	static uint8_t Buffer[BUFPH]={0};	
	static uint16_t indexWrite=0;
	static uint16_t indexRead=1;
	static uint16_t temp=0;
	
	temp=(sample>>1)+(Buffer[indexRead]>>1); //Reads sample and adds flanger 
 162:	68 2f       	mov	r22, r24
 164:	66 95       	lsr	r22
 166:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <indexRead.1649>
 16a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <indexRead.1649+0x1>
 16e:	f9 01       	movw	r30, r18
 170:	e2 51       	subi	r30, 0x12	; 18
 172:	fc 4f       	sbci	r31, 0xFC	; 252
 174:	90 81       	ld	r25, Z
 176:	96 95       	lsr	r25
	
	Buffer[indexWrite]=sample;
 178:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <indexWrite.1648>
 17c:	50 91 ed 03 	lds	r21, 0x03ED	; 0x8003ed <indexWrite.1648+0x1>
 180:	fa 01       	movw	r30, r20
 182:	e2 51       	subi	r30, 0x12	; 18
 184:	fc 4f       	sbci	r31, 0xFC	; 252
 186:	80 83       	st	Z, r24
	  

	indexRead++;
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
	if (indexRead>=BUFPH-1) indexRead=0;
 18c:	25 39       	cpi	r18, 0x95	; 149
 18e:	31 05       	cpc	r19, r1
 190:	28 f4       	brcc	.+10     	; 0x19c <phasor+0x3a>
	temp=(sample>>1)+(Buffer[indexRead]>>1); //Reads sample and adds flanger 
	
	Buffer[indexWrite]=sample;
	  

	indexRead++;
 192:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <indexRead.1649+0x1>
 196:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <indexRead.1649>
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <phasor+0x42>
	if (indexRead>=BUFPH-1) indexRead=0;
 19c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <indexRead.1649+0x1>
 1a0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <indexRead.1649>

	indexWrite++;
 1a4:	4f 5f       	subi	r20, 0xFF	; 255
 1a6:	5f 4f       	sbci	r21, 0xFF	; 255
	if (indexWrite>=BUFPH) indexWrite=0;
 1a8:	46 39       	cpi	r20, 0x96	; 150
 1aa:	51 05       	cpc	r21, r1
 1ac:	28 f4       	brcc	.+10     	; 0x1b8 <phasor+0x56>
	  

	indexRead++;
	if (indexRead>=BUFPH-1) indexRead=0;

	indexWrite++;
 1ae:	50 93 ed 03 	sts	0x03ED, r21	; 0x8003ed <indexWrite.1648+0x1>
 1b2:	40 93 ec 03 	sts	0x03EC, r20	; 0x8003ec <indexWrite.1648>
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <phasor+0x5e>
	if (indexWrite>=BUFPH) indexWrite=0;
 1b8:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <indexWrite.1648+0x1>
 1bc:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <indexWrite.1648>
	
	return  (uint8_t)temp;
}
 1c0:	86 2f       	mov	r24, r22
 1c2:	89 0f       	add	r24, r25
 1c4:	08 95       	ret

000001c6 <lowpass>:

extern uint8_t lowpass(uint8_t sample){
	static uint8_t filter[9]={0};
	
	filter[8]=filter[7];
 1c6:	e3 ee       	ldi	r30, 0xE3	; 227
 1c8:	f3 e0       	ldi	r31, 0x03	; 3
 1ca:	97 81       	ldd	r25, Z+7	; 0x07
 1cc:	90 87       	std	Z+8, r25	; 0x08
	filter[7]=filter[6];
 1ce:	96 81       	ldd	r25, Z+6	; 0x06
 1d0:	97 83       	std	Z+7, r25	; 0x07
	filter[6]=filter[5];
 1d2:	25 81       	ldd	r18, Z+5	; 0x05
 1d4:	26 83       	std	Z+6, r18	; 0x06
	filter[5]=filter[4];
 1d6:	44 81       	ldd	r20, Z+4	; 0x04
 1d8:	45 83       	std	Z+5, r20	; 0x05
	filter[4]=filter[3];
 1da:	63 81       	ldd	r22, Z+3	; 0x03
 1dc:	64 83       	std	Z+4, r22	; 0x04
	filter[3]=filter[2];
 1de:	92 81       	ldd	r25, Z+2	; 0x02
 1e0:	93 83       	std	Z+3, r25	; 0x03
	filter[2]=filter[1];
 1e2:	71 81       	ldd	r23, Z+1	; 0x01
 1e4:	72 83       	std	Z+2, r23	; 0x02
	filter[1]=filter[0];
 1e6:	30 81       	ld	r19, Z
 1e8:	31 83       	std	Z+1, r19	; 0x01
	filter[0]=sample;
 1ea:	80 83       	st	Z, r24

	sample = (filter[0]*0 +filter[1]*0 + filter[2]*22 + filter[3]*75 +filter[4]*108 +filter[5]*75 + filter[6]*22 + filter[7]*0 + filter[8]*0)>>8; //fir order 7, window Kaiser (beta 2.5, fc 3000Hz)
	
	return  sample;
 1ec:	36 e1       	ldi	r19, 0x16	; 22
 1ee:	5b e4       	ldi	r21, 0x4B	; 75
 1f0:	59 9f       	mul	r21, r25
 1f2:	c0 01       	movw	r24, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	37 9f       	mul	r19, r23
 1f8:	80 0d       	add	r24, r0
 1fa:	91 1d       	adc	r25, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	7c e6       	ldi	r23, 0x6C	; 108
 200:	67 9f       	mul	r22, r23
 202:	80 0d       	add	r24, r0
 204:	91 1d       	adc	r25, r1
 206:	11 24       	eor	r1, r1
 208:	54 9f       	mul	r21, r20
 20a:	80 0d       	add	r24, r0
 20c:	91 1d       	adc	r25, r1
 20e:	11 24       	eor	r1, r1
 210:	32 9f       	mul	r19, r18
 212:	80 0d       	add	r24, r0
 214:	91 1d       	adc	r25, r1
 216:	11 24       	eor	r1, r1
}
 218:	89 2f       	mov	r24, r25
 21a:	08 95       	ret

0000021c <pitch_up>:
extern uint8_t pitch_up(uint8_t sample){
	static int indexWrite=0;
	static int indexRead=1;
	static uint8_t Buffer[BUFP]={0};
	
	Buffer[indexWrite]=sample;
 21c:	20 91 e1 03 	lds	r18, 0x03E1	; 0x8003e1 <indexWrite.1658>
 220:	30 91 e2 03 	lds	r19, 0x03E2	; 0x8003e2 <indexWrite.1658+0x1>
 224:	f9 01       	movw	r30, r18
 226:	e7 58       	subi	r30, 0x87	; 135
 228:	fd 4f       	sbci	r31, 0xFD	; 253
 22a:	80 83       	st	Z, r24
	   
	indexRead+=2;
 22c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead.1659>
 230:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <indexRead.1659+0x1>
 234:	02 96       	adiw	r24, 0x02	; 2

	if (indexRead>=(BUFP-1)) indexRead=0;
 236:	87 36       	cpi	r24, 0x67	; 103
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	94 07       	cpc	r25, r20
 23c:	2c f4       	brge	.+10     	; 0x248 <pitch_up+0x2c>
	static int indexRead=1;
	static uint8_t Buffer[BUFP]={0};
	
	Buffer[indexWrite]=sample;
	   
	indexRead+=2;
 23e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <indexRead.1659+0x1>
 242:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead.1659>
 246:	04 c0       	rjmp	.+8      	; 0x250 <pitch_up+0x34>

	if (indexRead>=(BUFP-1)) indexRead=0;
 248:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <indexRead.1659+0x1>
 24c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <indexRead.1659>

	indexWrite++;
 250:	2f 5f       	subi	r18, 0xFF	; 255
 252:	3f 4f       	sbci	r19, 0xFF	; 255
	if (indexWrite>=(BUFP-1)) indexWrite=0;
 254:	27 36       	cpi	r18, 0x67	; 103
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	38 07       	cpc	r19, r24
 25a:	2c f4       	brge	.+10     	; 0x266 <pitch_up+0x4a>
	   
	indexRead+=2;

	if (indexRead>=(BUFP-1)) indexRead=0;

	indexWrite++;
 25c:	30 93 e2 03 	sts	0x03E2, r19	; 0x8003e2 <indexWrite.1658+0x1>
 260:	20 93 e1 03 	sts	0x03E1, r18	; 0x8003e1 <indexWrite.1658>
 264:	04 c0       	rjmp	.+8      	; 0x26e <pitch_up+0x52>
	if (indexWrite>=(BUFP-1)) indexWrite=0;
 266:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <indexWrite.1658+0x1>
 26a:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <indexWrite.1658>
	
		
	return  Buffer[indexRead];
 26e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead.1659>
 272:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <indexRead.1659+0x1>
 276:	e7 58       	subi	r30, 0x87	; 135
 278:	fd 4f       	sbci	r31, 0xFD	; 253
}
 27a:	80 81       	ld	r24, Z
 27c:	08 95       	ret

0000027e <pitch_down>:
	static uint8_t half=0;
	static uint8_t Buffer[BUFP]={0};

	

	Buffer[indexWrite]=sample;
 27e:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <indexWrite.1664>
 282:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <indexWrite.1664+0x1>
 286:	f9 01       	movw	r30, r18
 288:	e1 5f       	subi	r30, 0xF1	; 241
 28a:	fe 4f       	sbci	r31, 0xFE	; 254
 28c:	80 83       	st	Z, r24
	  half++; 
 28e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	if(half==2){
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	59 f4       	brne	.+22     	; 0x2b2 <pitch_down+0x34>
		indexRead++;
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		half=0;
 2ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
	

	if (indexRead>=(BUFP-1)) indexRead=0;
 2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2ba:	87 36       	cpi	r24, 0x67	; 103
 2bc:	91 40       	sbci	r25, 0x01	; 1
 2be:	24 f0       	brlt	.+8      	; 0x2c8 <pitch_down+0x4a>
 2c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 2c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>

	indexWrite++;
 2c8:	2f 5f       	subi	r18, 0xFF	; 255
 2ca:	3f 4f       	sbci	r19, 0xFF	; 255
	if (indexWrite>=(BUFP-1)) indexWrite=0;
 2cc:	27 36       	cpi	r18, 0x67	; 103
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	38 07       	cpc	r19, r24
 2d2:	2c f4       	brge	.+10     	; 0x2de <pitch_down+0x60>
	}
	

	if (indexRead>=(BUFP-1)) indexRead=0;

	indexWrite++;
 2d4:	30 93 78 02 	sts	0x0278, r19	; 0x800278 <indexWrite.1664+0x1>
 2d8:	20 93 77 02 	sts	0x0277, r18	; 0x800277 <indexWrite.1664>
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <pitch_down+0x68>
	if (indexWrite>=(BUFP-1)) indexWrite=0;
 2de:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <indexWrite.1664+0x1>
 2e2:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <indexWrite.1664>
	
	
		
	return  Buffer[indexRead];
 2e6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 2ea:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 2ee:	e1 5f       	subi	r30, 0xF1	; 241
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
}
 2f2:	80 81       	ld	r24, Z
 2f4:	08 95       	ret

000002f6 <__vector_21>:


ISR(ADC_vect) 
{ 
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	4f 93       	push	r20
 306:	5f 93       	push	r21
 308:	6f 93       	push	r22
 30a:	7f 93       	push	r23
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	af 93       	push	r26
 312:	bf 93       	push	r27
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
		//uint8_t ADCdata=0;
		
		PORTB |= 1<<PORTB5; //set
 318:	2d 9a       	sbi	0x05, 5	; 5
		
        ADCdata=ADCH;
 31a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 31e:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <ADCdata>

		if(effects&PITCHUP) ADCdata=pitch_up(ADCdata);
 322:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <effects>
 326:	81 ff       	sbrs	r24, 1
 328:	06 c0       	rjmp	.+12     	; 0x336 <__vector_21+0x40>
 32a:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <ADCdata>
 32e:	0e 94 0e 01 	call	0x21c	; 0x21c <pitch_up>
 332:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <ADCdata>
		if(effects&PITCHDOWN) ADCdata=pitch_down(ADCdata);
 336:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <effects>
 33a:	82 ff       	sbrs	r24, 2
 33c:	06 c0       	rjmp	.+12     	; 0x34a <__vector_21+0x54>
 33e:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <ADCdata>
 342:	0e 94 3f 01 	call	0x27e	; 0x27e <pitch_down>
 346:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <ADCdata>
		if(effects&BITCRUSH) ADCdata=bitcrush(ADCdata);
 34a:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <effects>
 34e:	84 ff       	sbrs	r24, 4
 350:	05 c0       	rjmp	.+10     	; 0x35c <__vector_21+0x66>
 352:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <ADCdata>
}

extern uint8_t bitcrush(uint8_t sample){
		
		sample=sample>>6;
        sample=sample<<6;         
 356:	80 7c       	andi	r24, 0xC0	; 192
		
        ADCdata=ADCH;

		if(effects&PITCHUP) ADCdata=pitch_up(ADCdata);
		if(effects&PITCHDOWN) ADCdata=pitch_down(ADCdata);
		if(effects&BITCRUSH) ADCdata=bitcrush(ADCdata);
 358:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <ADCdata>

				
		//only echo or phasor can be used at one time
		if(effects&ECHO)ADCdata=echo(ADCdata);
 35c:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <effects>
 360:	85 ff       	sbrs	r24, 5
 362:	06 c0       	rjmp	.+12     	; 0x370 <__vector_21+0x7a>
 364:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <ADCdata>
 368:	0e 94 76 00 	call	0xec	; 0xec <echo>
 36c:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <ADCdata>
		if( effects&PHASOR) ADCdata=phasor(ADCdata);
 370:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <effects>
 374:	88 23       	and	r24, r24
 376:	34 f4       	brge	.+12     	; 0x384 <__vector_21+0x8e>
 378:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <ADCdata>
 37c:	0e 94 b1 00 	call	0x162	; 0x162 <phasor>
 380:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <ADCdata>
		
		if(effects&LOWPASS) ADCdata=lowpass(ADCdata); //clean up the signal
 384:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <effects>
 388:	80 ff       	sbrs	r24, 0
 38a:	06 c0       	rjmp	.+12     	; 0x398 <__vector_21+0xa2>
 38c:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <ADCdata>
 390:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lowpass>
 394:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <ADCdata>
		
        OCR0B = ADCdata;
 398:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <ADCdata>
 39c:	88 bd       	out	0x28, r24	; 40
		PORTB &= ~(1<<PORTB5); //reset
 39e:	2d 98       	cbi	0x05, 5	; 5
} 
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	bf 91       	pop	r27
 3a6:	af 91       	pop	r26
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	7f 91       	pop	r23
 3ae:	6f 91       	pop	r22
 3b0:	5f 91       	pop	r21
 3b2:	4f 91       	pop	r20
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <main>:
#include <avr/io.h>
#include "uart.h"
#include <util/delay.h>

int main(void)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	2f 97       	sbiw	r28, 0x0f	; 15
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
    char buffer[15] = {0};
 3d6:	fe 01       	movw	r30, r28
 3d8:	31 96       	adiw	r30, 0x01	; 1
 3da:	8f e0       	ldi	r24, 0x0F	; 15
 3dc:	df 01       	movw	r26, r30
 3de:	1d 92       	st	X+, r1
 3e0:	8a 95       	dec	r24
 3e2:	e9 f7       	brne	.-6      	; 0x3de <main+0x1c>
	
	uart_init();
 3e4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <uart_init>
	ADCSetup();
 3e8:	0e 94 53 00 	call	0xa6	; 0xa6 <ADCSetup>
	PWMSetup();
 3ec:	0e 94 62 00 	call	0xc4	; 0xc4 <PWMSetup>
	buttonSetup();
 3f0:	0e 94 6f 00 	call	0xde	; 0xde <buttonSetup>
	
	DDRB |= 1<<PORTB5; //led
 3f4:	25 9a       	sbi	0x04, 5	; 4
	//effects&= ~PITCHUP;
	//effects|=BITCRUSH;
    while (1) 
    {
		
		sprintf(buffer, "%d", ADCdata);
 3f6:	0f 2e       	mov	r0, r31
 3f8:	f9 e0       	ldi	r31, 0x09	; 9
 3fa:	ef 2e       	mov	r14, r31
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	ff 2e       	mov	r15, r31
 400:	f0 2d       	mov	r31, r0
 402:	8e 01       	movw	r16, r28
 404:	0f 5f       	subi	r16, 0xFF	; 255
 406:	1f 4f       	sbci	r17, 0xFF	; 255
 408:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <ADCdata>
 40c:	1f 92       	push	r1
 40e:	8f 93       	push	r24
 410:	ff 92       	push	r15
 412:	ef 92       	push	r14
 414:	1f 93       	push	r17
 416:	0f 93       	push	r16
 418:	0e 94 76 02 	call	0x4ec	; 0x4ec <sprintf>
		send_str(buffer);
 41c:	c8 01       	movw	r24, r16
 41e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <send_str>
		send_str("\n");
 422:	8c e0       	ldi	r24, 0x0C	; 12
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 63 02 	call	0x4c6	; 0x4c6 <send_str>
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	e8 cf       	rjmp	.-48     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

00000438 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
	poslato=0;
 442:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <poslato>
}
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <__vector_18>:

ISR(USART_RX_vect)
{
 450:	1f 92       	push	r1
 452:	0f 92       	push	r0
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	0f 92       	push	r0
 458:	11 24       	eor	r1, r1
 45a:	8f 93       	push	r24
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
	input_char=UDR0;
 460:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 464:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 468:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <buff_size>
 46c:	88 30       	cpi	r24, 0x08	; 8
 46e:	98 f4       	brcc	.+38     	; 0x496 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 470:	e0 91 c1 07 	lds	r30, 0x07C1	; 0x8007c1 <buff_size>
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <input_char>
 47a:	ec 53       	subi	r30, 0x3C	; 60
 47c:	f8 4f       	sbci	r31, 0xF8	; 248
 47e:	80 83       	st	Z, r24
		buff_size++;
 480:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <buff_size>
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <buff_size>
		input_buffer[buff_size]='\0';
 48a:	e0 91 c1 07 	lds	r30, 0x07C1	; 0x8007c1 <buff_size>
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	ec 53       	subi	r30, 0x3C	; 60
 492:	f8 4f       	sbci	r31, 0xF8	; 248
 494:	10 82       	st	Z, r1
	}
}
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	8f 91       	pop	r24
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 4ac:	88 ed       	ldi	r24, 0xD8	; 216
 4ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 4b2:	86 e0       	ldi	r24, 0x06	; 6
 4b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 4b8:	8f ec       	ldi	r24, 0xCF	; 207
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 4c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 4c4:	08 95       	ret

000004c6 <send_str>:
}

void send_str(unsigned char *str)
{
 4c6:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 4c8:	90 81       	ld	r25, Z
 4ca:	99 23       	and	r25, r25
 4cc:	71 f0       	breq	.+28     	; 0x4ea <send_str+0x24>
 4ce:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 4d0:	a6 ec       	ldi	r26, 0xC6	; 198
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 4d6:	9c 93       	st	X, r25
		poslato=1;
 4d8:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <poslato>
		while (poslato);
 4dc:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <poslato>
 4e0:	91 11       	cpse	r25, r1
 4e2:	fc cf       	rjmp	.-8      	; 0x4dc <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 4e4:	91 91       	ld	r25, Z+
 4e6:	91 11       	cpse	r25, r1
 4e8:	f6 cf       	rjmp	.-20     	; 0x4d6 <send_str+0x10>
 4ea:	08 95       	ret

000004ec <sprintf>:
 4ec:	ae e0       	ldi	r26, 0x0E	; 14
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	ec e7       	ldi	r30, 0x7C	; 124
 4f2:	f2 e0       	ldi	r31, 0x02	; 2
 4f4:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__prologue_saves__+0x1c>
 4f8:	0d 89       	ldd	r16, Y+21	; 0x15
 4fa:	1e 89       	ldd	r17, Y+22	; 0x16
 4fc:	86 e0       	ldi	r24, 0x06	; 6
 4fe:	8c 83       	std	Y+4, r24	; 0x04
 500:	1a 83       	std	Y+2, r17	; 0x02
 502:	09 83       	std	Y+1, r16	; 0x01
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	9f e7       	ldi	r25, 0x7F	; 127
 508:	9e 83       	std	Y+6, r25	; 0x06
 50a:	8d 83       	std	Y+5, r24	; 0x05
 50c:	ae 01       	movw	r20, r28
 50e:	47 5e       	subi	r20, 0xE7	; 231
 510:	5f 4f       	sbci	r21, 0xFF	; 255
 512:	6f 89       	ldd	r22, Y+23	; 0x17
 514:	78 8d       	ldd	r23, Y+24	; 0x18
 516:	ce 01       	movw	r24, r28
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	0e 94 98 02 	call	0x530	; 0x530 <vfprintf>
 51e:	ef 81       	ldd	r30, Y+7	; 0x07
 520:	f8 85       	ldd	r31, Y+8	; 0x08
 522:	e0 0f       	add	r30, r16
 524:	f1 1f       	adc	r31, r17
 526:	10 82       	st	Z, r1
 528:	2e 96       	adiw	r28, 0x0e	; 14
 52a:	e4 e0       	ldi	r30, 0x04	; 4
 52c:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__epilogue_restores__+0x1c>

00000530 <vfprintf>:
 530:	ab e0       	ldi	r26, 0x0B	; 11
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	ee e9       	ldi	r30, 0x9E	; 158
 536:	f2 e0       	ldi	r31, 0x02	; 2
 538:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__prologue_saves__>
 53c:	6c 01       	movw	r12, r24
 53e:	7b 01       	movw	r14, r22
 540:	8a 01       	movw	r16, r20
 542:	fc 01       	movw	r30, r24
 544:	17 82       	std	Z+7, r1	; 0x07
 546:	16 82       	std	Z+6, r1	; 0x06
 548:	83 81       	ldd	r24, Z+3	; 0x03
 54a:	81 ff       	sbrs	r24, 1
 54c:	cc c1       	rjmp	.+920    	; 0x8e6 <vfprintf+0x3b6>
 54e:	ce 01       	movw	r24, r28
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	3c 01       	movw	r6, r24
 554:	f6 01       	movw	r30, r12
 556:	93 81       	ldd	r25, Z+3	; 0x03
 558:	f7 01       	movw	r30, r14
 55a:	93 fd       	sbrc	r25, 3
 55c:	85 91       	lpm	r24, Z+
 55e:	93 ff       	sbrs	r25, 3
 560:	81 91       	ld	r24, Z+
 562:	7f 01       	movw	r14, r30
 564:	88 23       	and	r24, r24
 566:	09 f4       	brne	.+2      	; 0x56a <vfprintf+0x3a>
 568:	ba c1       	rjmp	.+884    	; 0x8de <vfprintf+0x3ae>
 56a:	85 32       	cpi	r24, 0x25	; 37
 56c:	39 f4       	brne	.+14     	; 0x57c <vfprintf+0x4c>
 56e:	93 fd       	sbrc	r25, 3
 570:	85 91       	lpm	r24, Z+
 572:	93 ff       	sbrs	r25, 3
 574:	81 91       	ld	r24, Z+
 576:	7f 01       	movw	r14, r30
 578:	85 32       	cpi	r24, 0x25	; 37
 57a:	29 f4       	brne	.+10     	; 0x586 <vfprintf+0x56>
 57c:	b6 01       	movw	r22, r12
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 8f 04 	call	0x91e	; 0x91e <fputc>
 584:	e7 cf       	rjmp	.-50     	; 0x554 <vfprintf+0x24>
 586:	91 2c       	mov	r9, r1
 588:	21 2c       	mov	r2, r1
 58a:	31 2c       	mov	r3, r1
 58c:	ff e1       	ldi	r31, 0x1F	; 31
 58e:	f3 15       	cp	r31, r3
 590:	d8 f0       	brcs	.+54     	; 0x5c8 <vfprintf+0x98>
 592:	8b 32       	cpi	r24, 0x2B	; 43
 594:	79 f0       	breq	.+30     	; 0x5b4 <vfprintf+0x84>
 596:	38 f4       	brcc	.+14     	; 0x5a6 <vfprintf+0x76>
 598:	80 32       	cpi	r24, 0x20	; 32
 59a:	79 f0       	breq	.+30     	; 0x5ba <vfprintf+0x8a>
 59c:	83 32       	cpi	r24, 0x23	; 35
 59e:	a1 f4       	brne	.+40     	; 0x5c8 <vfprintf+0x98>
 5a0:	23 2d       	mov	r18, r3
 5a2:	20 61       	ori	r18, 0x10	; 16
 5a4:	1d c0       	rjmp	.+58     	; 0x5e0 <vfprintf+0xb0>
 5a6:	8d 32       	cpi	r24, 0x2D	; 45
 5a8:	61 f0       	breq	.+24     	; 0x5c2 <vfprintf+0x92>
 5aa:	80 33       	cpi	r24, 0x30	; 48
 5ac:	69 f4       	brne	.+26     	; 0x5c8 <vfprintf+0x98>
 5ae:	23 2d       	mov	r18, r3
 5b0:	21 60       	ori	r18, 0x01	; 1
 5b2:	16 c0       	rjmp	.+44     	; 0x5e0 <vfprintf+0xb0>
 5b4:	83 2d       	mov	r24, r3
 5b6:	82 60       	ori	r24, 0x02	; 2
 5b8:	38 2e       	mov	r3, r24
 5ba:	e3 2d       	mov	r30, r3
 5bc:	e4 60       	ori	r30, 0x04	; 4
 5be:	3e 2e       	mov	r3, r30
 5c0:	2a c0       	rjmp	.+84     	; 0x616 <vfprintf+0xe6>
 5c2:	f3 2d       	mov	r31, r3
 5c4:	f8 60       	ori	r31, 0x08	; 8
 5c6:	1d c0       	rjmp	.+58     	; 0x602 <vfprintf+0xd2>
 5c8:	37 fc       	sbrc	r3, 7
 5ca:	2d c0       	rjmp	.+90     	; 0x626 <vfprintf+0xf6>
 5cc:	20 ed       	ldi	r18, 0xD0	; 208
 5ce:	28 0f       	add	r18, r24
 5d0:	2a 30       	cpi	r18, 0x0A	; 10
 5d2:	40 f0       	brcs	.+16     	; 0x5e4 <vfprintf+0xb4>
 5d4:	8e 32       	cpi	r24, 0x2E	; 46
 5d6:	b9 f4       	brne	.+46     	; 0x606 <vfprintf+0xd6>
 5d8:	36 fc       	sbrc	r3, 6
 5da:	81 c1       	rjmp	.+770    	; 0x8de <vfprintf+0x3ae>
 5dc:	23 2d       	mov	r18, r3
 5de:	20 64       	ori	r18, 0x40	; 64
 5e0:	32 2e       	mov	r3, r18
 5e2:	19 c0       	rjmp	.+50     	; 0x616 <vfprintf+0xe6>
 5e4:	36 fe       	sbrs	r3, 6
 5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <vfprintf+0xc4>
 5e8:	8a e0       	ldi	r24, 0x0A	; 10
 5ea:	98 9e       	mul	r9, r24
 5ec:	20 0d       	add	r18, r0
 5ee:	11 24       	eor	r1, r1
 5f0:	92 2e       	mov	r9, r18
 5f2:	11 c0       	rjmp	.+34     	; 0x616 <vfprintf+0xe6>
 5f4:	ea e0       	ldi	r30, 0x0A	; 10
 5f6:	2e 9e       	mul	r2, r30
 5f8:	20 0d       	add	r18, r0
 5fa:	11 24       	eor	r1, r1
 5fc:	22 2e       	mov	r2, r18
 5fe:	f3 2d       	mov	r31, r3
 600:	f0 62       	ori	r31, 0x20	; 32
 602:	3f 2e       	mov	r3, r31
 604:	08 c0       	rjmp	.+16     	; 0x616 <vfprintf+0xe6>
 606:	8c 36       	cpi	r24, 0x6C	; 108
 608:	21 f4       	brne	.+8      	; 0x612 <vfprintf+0xe2>
 60a:	83 2d       	mov	r24, r3
 60c:	80 68       	ori	r24, 0x80	; 128
 60e:	38 2e       	mov	r3, r24
 610:	02 c0       	rjmp	.+4      	; 0x616 <vfprintf+0xe6>
 612:	88 36       	cpi	r24, 0x68	; 104
 614:	41 f4       	brne	.+16     	; 0x626 <vfprintf+0xf6>
 616:	f7 01       	movw	r30, r14
 618:	93 fd       	sbrc	r25, 3
 61a:	85 91       	lpm	r24, Z+
 61c:	93 ff       	sbrs	r25, 3
 61e:	81 91       	ld	r24, Z+
 620:	7f 01       	movw	r14, r30
 622:	81 11       	cpse	r24, r1
 624:	b3 cf       	rjmp	.-154    	; 0x58c <vfprintf+0x5c>
 626:	98 2f       	mov	r25, r24
 628:	9f 7d       	andi	r25, 0xDF	; 223
 62a:	95 54       	subi	r25, 0x45	; 69
 62c:	93 30       	cpi	r25, 0x03	; 3
 62e:	28 f4       	brcc	.+10     	; 0x63a <vfprintf+0x10a>
 630:	0c 5f       	subi	r16, 0xFC	; 252
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	9f e3       	ldi	r25, 0x3F	; 63
 636:	99 83       	std	Y+1, r25	; 0x01
 638:	0d c0       	rjmp	.+26     	; 0x654 <vfprintf+0x124>
 63a:	83 36       	cpi	r24, 0x63	; 99
 63c:	31 f0       	breq	.+12     	; 0x64a <vfprintf+0x11a>
 63e:	83 37       	cpi	r24, 0x73	; 115
 640:	71 f0       	breq	.+28     	; 0x65e <vfprintf+0x12e>
 642:	83 35       	cpi	r24, 0x53	; 83
 644:	09 f0       	breq	.+2      	; 0x648 <vfprintf+0x118>
 646:	59 c0       	rjmp	.+178    	; 0x6fa <vfprintf+0x1ca>
 648:	21 c0       	rjmp	.+66     	; 0x68c <vfprintf+0x15c>
 64a:	f8 01       	movw	r30, r16
 64c:	80 81       	ld	r24, Z
 64e:	89 83       	std	Y+1, r24	; 0x01
 650:	0e 5f       	subi	r16, 0xFE	; 254
 652:	1f 4f       	sbci	r17, 0xFF	; 255
 654:	88 24       	eor	r8, r8
 656:	83 94       	inc	r8
 658:	91 2c       	mov	r9, r1
 65a:	53 01       	movw	r10, r6
 65c:	13 c0       	rjmp	.+38     	; 0x684 <vfprintf+0x154>
 65e:	28 01       	movw	r4, r16
 660:	f2 e0       	ldi	r31, 0x02	; 2
 662:	4f 0e       	add	r4, r31
 664:	51 1c       	adc	r5, r1
 666:	f8 01       	movw	r30, r16
 668:	a0 80       	ld	r10, Z
 66a:	b1 80       	ldd	r11, Z+1	; 0x01
 66c:	36 fe       	sbrs	r3, 6
 66e:	03 c0       	rjmp	.+6      	; 0x676 <vfprintf+0x146>
 670:	69 2d       	mov	r22, r9
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <vfprintf+0x14a>
 676:	6f ef       	ldi	r22, 0xFF	; 255
 678:	7f ef       	ldi	r23, 0xFF	; 255
 67a:	c5 01       	movw	r24, r10
 67c:	0e 94 84 04 	call	0x908	; 0x908 <strnlen>
 680:	4c 01       	movw	r8, r24
 682:	82 01       	movw	r16, r4
 684:	f3 2d       	mov	r31, r3
 686:	ff 77       	andi	r31, 0x7F	; 127
 688:	3f 2e       	mov	r3, r31
 68a:	16 c0       	rjmp	.+44     	; 0x6b8 <vfprintf+0x188>
 68c:	28 01       	movw	r4, r16
 68e:	22 e0       	ldi	r18, 0x02	; 2
 690:	42 0e       	add	r4, r18
 692:	51 1c       	adc	r5, r1
 694:	f8 01       	movw	r30, r16
 696:	a0 80       	ld	r10, Z
 698:	b1 80       	ldd	r11, Z+1	; 0x01
 69a:	36 fe       	sbrs	r3, 6
 69c:	03 c0       	rjmp	.+6      	; 0x6a4 <vfprintf+0x174>
 69e:	69 2d       	mov	r22, r9
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <vfprintf+0x178>
 6a4:	6f ef       	ldi	r22, 0xFF	; 255
 6a6:	7f ef       	ldi	r23, 0xFF	; 255
 6a8:	c5 01       	movw	r24, r10
 6aa:	0e 94 79 04 	call	0x8f2	; 0x8f2 <strnlen_P>
 6ae:	4c 01       	movw	r8, r24
 6b0:	f3 2d       	mov	r31, r3
 6b2:	f0 68       	ori	r31, 0x80	; 128
 6b4:	3f 2e       	mov	r3, r31
 6b6:	82 01       	movw	r16, r4
 6b8:	33 fc       	sbrc	r3, 3
 6ba:	1b c0       	rjmp	.+54     	; 0x6f2 <vfprintf+0x1c2>
 6bc:	82 2d       	mov	r24, r2
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	88 16       	cp	r8, r24
 6c2:	99 06       	cpc	r9, r25
 6c4:	b0 f4       	brcc	.+44     	; 0x6f2 <vfprintf+0x1c2>
 6c6:	b6 01       	movw	r22, r12
 6c8:	80 e2       	ldi	r24, 0x20	; 32
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 8f 04 	call	0x91e	; 0x91e <fputc>
 6d0:	2a 94       	dec	r2
 6d2:	f4 cf       	rjmp	.-24     	; 0x6bc <vfprintf+0x18c>
 6d4:	f5 01       	movw	r30, r10
 6d6:	37 fc       	sbrc	r3, 7
 6d8:	85 91       	lpm	r24, Z+
 6da:	37 fe       	sbrs	r3, 7
 6dc:	81 91       	ld	r24, Z+
 6de:	5f 01       	movw	r10, r30
 6e0:	b6 01       	movw	r22, r12
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 8f 04 	call	0x91e	; 0x91e <fputc>
 6e8:	21 10       	cpse	r2, r1
 6ea:	2a 94       	dec	r2
 6ec:	21 e0       	ldi	r18, 0x01	; 1
 6ee:	82 1a       	sub	r8, r18
 6f0:	91 08       	sbc	r9, r1
 6f2:	81 14       	cp	r8, r1
 6f4:	91 04       	cpc	r9, r1
 6f6:	71 f7       	brne	.-36     	; 0x6d4 <vfprintf+0x1a4>
 6f8:	e8 c0       	rjmp	.+464    	; 0x8ca <vfprintf+0x39a>
 6fa:	84 36       	cpi	r24, 0x64	; 100
 6fc:	11 f0       	breq	.+4      	; 0x702 <vfprintf+0x1d2>
 6fe:	89 36       	cpi	r24, 0x69	; 105
 700:	41 f5       	brne	.+80     	; 0x752 <vfprintf+0x222>
 702:	f8 01       	movw	r30, r16
 704:	37 fe       	sbrs	r3, 7
 706:	07 c0       	rjmp	.+14     	; 0x716 <vfprintf+0x1e6>
 708:	60 81       	ld	r22, Z
 70a:	71 81       	ldd	r23, Z+1	; 0x01
 70c:	82 81       	ldd	r24, Z+2	; 0x02
 70e:	93 81       	ldd	r25, Z+3	; 0x03
 710:	0c 5f       	subi	r16, 0xFC	; 252
 712:	1f 4f       	sbci	r17, 0xFF	; 255
 714:	08 c0       	rjmp	.+16     	; 0x726 <vfprintf+0x1f6>
 716:	60 81       	ld	r22, Z
 718:	71 81       	ldd	r23, Z+1	; 0x01
 71a:	07 2e       	mov	r0, r23
 71c:	00 0c       	add	r0, r0
 71e:	88 0b       	sbc	r24, r24
 720:	99 0b       	sbc	r25, r25
 722:	0e 5f       	subi	r16, 0xFE	; 254
 724:	1f 4f       	sbci	r17, 0xFF	; 255
 726:	f3 2d       	mov	r31, r3
 728:	ff 76       	andi	r31, 0x6F	; 111
 72a:	3f 2e       	mov	r3, r31
 72c:	97 ff       	sbrs	r25, 7
 72e:	09 c0       	rjmp	.+18     	; 0x742 <vfprintf+0x212>
 730:	90 95       	com	r25
 732:	80 95       	com	r24
 734:	70 95       	com	r23
 736:	61 95       	neg	r22
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	8f 4f       	sbci	r24, 0xFF	; 255
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	f0 68       	ori	r31, 0x80	; 128
 740:	3f 2e       	mov	r3, r31
 742:	2a e0       	ldi	r18, 0x0A	; 10
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	a3 01       	movw	r20, r6
 748:	0e 94 cb 04 	call	0x996	; 0x996 <__ultoa_invert>
 74c:	88 2e       	mov	r8, r24
 74e:	86 18       	sub	r8, r6
 750:	45 c0       	rjmp	.+138    	; 0x7dc <vfprintf+0x2ac>
 752:	85 37       	cpi	r24, 0x75	; 117
 754:	31 f4       	brne	.+12     	; 0x762 <vfprintf+0x232>
 756:	23 2d       	mov	r18, r3
 758:	2f 7e       	andi	r18, 0xEF	; 239
 75a:	b2 2e       	mov	r11, r18
 75c:	2a e0       	ldi	r18, 0x0A	; 10
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	25 c0       	rjmp	.+74     	; 0x7ac <vfprintf+0x27c>
 762:	93 2d       	mov	r25, r3
 764:	99 7f       	andi	r25, 0xF9	; 249
 766:	b9 2e       	mov	r11, r25
 768:	8f 36       	cpi	r24, 0x6F	; 111
 76a:	c1 f0       	breq	.+48     	; 0x79c <vfprintf+0x26c>
 76c:	18 f4       	brcc	.+6      	; 0x774 <vfprintf+0x244>
 76e:	88 35       	cpi	r24, 0x58	; 88
 770:	79 f0       	breq	.+30     	; 0x790 <vfprintf+0x260>
 772:	b5 c0       	rjmp	.+362    	; 0x8de <vfprintf+0x3ae>
 774:	80 37       	cpi	r24, 0x70	; 112
 776:	19 f0       	breq	.+6      	; 0x77e <vfprintf+0x24e>
 778:	88 37       	cpi	r24, 0x78	; 120
 77a:	21 f0       	breq	.+8      	; 0x784 <vfprintf+0x254>
 77c:	b0 c0       	rjmp	.+352    	; 0x8de <vfprintf+0x3ae>
 77e:	e9 2f       	mov	r30, r25
 780:	e0 61       	ori	r30, 0x10	; 16
 782:	be 2e       	mov	r11, r30
 784:	b4 fe       	sbrs	r11, 4
 786:	0d c0       	rjmp	.+26     	; 0x7a2 <vfprintf+0x272>
 788:	fb 2d       	mov	r31, r11
 78a:	f4 60       	ori	r31, 0x04	; 4
 78c:	bf 2e       	mov	r11, r31
 78e:	09 c0       	rjmp	.+18     	; 0x7a2 <vfprintf+0x272>
 790:	34 fe       	sbrs	r3, 4
 792:	0a c0       	rjmp	.+20     	; 0x7a8 <vfprintf+0x278>
 794:	29 2f       	mov	r18, r25
 796:	26 60       	ori	r18, 0x06	; 6
 798:	b2 2e       	mov	r11, r18
 79a:	06 c0       	rjmp	.+12     	; 0x7a8 <vfprintf+0x278>
 79c:	28 e0       	ldi	r18, 0x08	; 8
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <vfprintf+0x27c>
 7a2:	20 e1       	ldi	r18, 0x10	; 16
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <vfprintf+0x27c>
 7a8:	20 e1       	ldi	r18, 0x10	; 16
 7aa:	32 e0       	ldi	r19, 0x02	; 2
 7ac:	f8 01       	movw	r30, r16
 7ae:	b7 fe       	sbrs	r11, 7
 7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <vfprintf+0x290>
 7b2:	60 81       	ld	r22, Z
 7b4:	71 81       	ldd	r23, Z+1	; 0x01
 7b6:	82 81       	ldd	r24, Z+2	; 0x02
 7b8:	93 81       	ldd	r25, Z+3	; 0x03
 7ba:	0c 5f       	subi	r16, 0xFC	; 252
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	06 c0       	rjmp	.+12     	; 0x7cc <vfprintf+0x29c>
 7c0:	60 81       	ld	r22, Z
 7c2:	71 81       	ldd	r23, Z+1	; 0x01
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 5f       	subi	r16, 0xFE	; 254
 7ca:	1f 4f       	sbci	r17, 0xFF	; 255
 7cc:	a3 01       	movw	r20, r6
 7ce:	0e 94 cb 04 	call	0x996	; 0x996 <__ultoa_invert>
 7d2:	88 2e       	mov	r8, r24
 7d4:	86 18       	sub	r8, r6
 7d6:	fb 2d       	mov	r31, r11
 7d8:	ff 77       	andi	r31, 0x7F	; 127
 7da:	3f 2e       	mov	r3, r31
 7dc:	36 fe       	sbrs	r3, 6
 7de:	0d c0       	rjmp	.+26     	; 0x7fa <vfprintf+0x2ca>
 7e0:	23 2d       	mov	r18, r3
 7e2:	2e 7f       	andi	r18, 0xFE	; 254
 7e4:	a2 2e       	mov	r10, r18
 7e6:	89 14       	cp	r8, r9
 7e8:	58 f4       	brcc	.+22     	; 0x800 <vfprintf+0x2d0>
 7ea:	34 fe       	sbrs	r3, 4
 7ec:	0b c0       	rjmp	.+22     	; 0x804 <vfprintf+0x2d4>
 7ee:	32 fc       	sbrc	r3, 2
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <vfprintf+0x2d4>
 7f2:	83 2d       	mov	r24, r3
 7f4:	8e 7e       	andi	r24, 0xEE	; 238
 7f6:	a8 2e       	mov	r10, r24
 7f8:	05 c0       	rjmp	.+10     	; 0x804 <vfprintf+0x2d4>
 7fa:	b8 2c       	mov	r11, r8
 7fc:	a3 2c       	mov	r10, r3
 7fe:	03 c0       	rjmp	.+6      	; 0x806 <vfprintf+0x2d6>
 800:	b8 2c       	mov	r11, r8
 802:	01 c0       	rjmp	.+2      	; 0x806 <vfprintf+0x2d6>
 804:	b9 2c       	mov	r11, r9
 806:	a4 fe       	sbrs	r10, 4
 808:	0f c0       	rjmp	.+30     	; 0x828 <vfprintf+0x2f8>
 80a:	fe 01       	movw	r30, r28
 80c:	e8 0d       	add	r30, r8
 80e:	f1 1d       	adc	r31, r1
 810:	80 81       	ld	r24, Z
 812:	80 33       	cpi	r24, 0x30	; 48
 814:	21 f4       	brne	.+8      	; 0x81e <vfprintf+0x2ee>
 816:	9a 2d       	mov	r25, r10
 818:	99 7e       	andi	r25, 0xE9	; 233
 81a:	a9 2e       	mov	r10, r25
 81c:	09 c0       	rjmp	.+18     	; 0x830 <vfprintf+0x300>
 81e:	a2 fe       	sbrs	r10, 2
 820:	06 c0       	rjmp	.+12     	; 0x82e <vfprintf+0x2fe>
 822:	b3 94       	inc	r11
 824:	b3 94       	inc	r11
 826:	04 c0       	rjmp	.+8      	; 0x830 <vfprintf+0x300>
 828:	8a 2d       	mov	r24, r10
 82a:	86 78       	andi	r24, 0x86	; 134
 82c:	09 f0       	breq	.+2      	; 0x830 <vfprintf+0x300>
 82e:	b3 94       	inc	r11
 830:	a3 fc       	sbrc	r10, 3
 832:	11 c0       	rjmp	.+34     	; 0x856 <vfprintf+0x326>
 834:	a0 fe       	sbrs	r10, 0
 836:	06 c0       	rjmp	.+12     	; 0x844 <vfprintf+0x314>
 838:	b2 14       	cp	r11, r2
 83a:	88 f4       	brcc	.+34     	; 0x85e <vfprintf+0x32e>
 83c:	28 0c       	add	r2, r8
 83e:	92 2c       	mov	r9, r2
 840:	9b 18       	sub	r9, r11
 842:	0e c0       	rjmp	.+28     	; 0x860 <vfprintf+0x330>
 844:	b2 14       	cp	r11, r2
 846:	60 f4       	brcc	.+24     	; 0x860 <vfprintf+0x330>
 848:	b6 01       	movw	r22, r12
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 8f 04 	call	0x91e	; 0x91e <fputc>
 852:	b3 94       	inc	r11
 854:	f7 cf       	rjmp	.-18     	; 0x844 <vfprintf+0x314>
 856:	b2 14       	cp	r11, r2
 858:	18 f4       	brcc	.+6      	; 0x860 <vfprintf+0x330>
 85a:	2b 18       	sub	r2, r11
 85c:	02 c0       	rjmp	.+4      	; 0x862 <vfprintf+0x332>
 85e:	98 2c       	mov	r9, r8
 860:	21 2c       	mov	r2, r1
 862:	a4 fe       	sbrs	r10, 4
 864:	10 c0       	rjmp	.+32     	; 0x886 <vfprintf+0x356>
 866:	b6 01       	movw	r22, r12
 868:	80 e3       	ldi	r24, 0x30	; 48
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 8f 04 	call	0x91e	; 0x91e <fputc>
 870:	a2 fe       	sbrs	r10, 2
 872:	17 c0       	rjmp	.+46     	; 0x8a2 <vfprintf+0x372>
 874:	a1 fc       	sbrc	r10, 1
 876:	03 c0       	rjmp	.+6      	; 0x87e <vfprintf+0x34e>
 878:	88 e7       	ldi	r24, 0x78	; 120
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	02 c0       	rjmp	.+4      	; 0x882 <vfprintf+0x352>
 87e:	88 e5       	ldi	r24, 0x58	; 88
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	b6 01       	movw	r22, r12
 884:	0c c0       	rjmp	.+24     	; 0x89e <vfprintf+0x36e>
 886:	8a 2d       	mov	r24, r10
 888:	86 78       	andi	r24, 0x86	; 134
 88a:	59 f0       	breq	.+22     	; 0x8a2 <vfprintf+0x372>
 88c:	a1 fe       	sbrs	r10, 1
 88e:	02 c0       	rjmp	.+4      	; 0x894 <vfprintf+0x364>
 890:	8b e2       	ldi	r24, 0x2B	; 43
 892:	01 c0       	rjmp	.+2      	; 0x896 <vfprintf+0x366>
 894:	80 e2       	ldi	r24, 0x20	; 32
 896:	a7 fc       	sbrc	r10, 7
 898:	8d e2       	ldi	r24, 0x2D	; 45
 89a:	b6 01       	movw	r22, r12
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 8f 04 	call	0x91e	; 0x91e <fputc>
 8a2:	89 14       	cp	r8, r9
 8a4:	38 f4       	brcc	.+14     	; 0x8b4 <vfprintf+0x384>
 8a6:	b6 01       	movw	r22, r12
 8a8:	80 e3       	ldi	r24, 0x30	; 48
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 8f 04 	call	0x91e	; 0x91e <fputc>
 8b0:	9a 94       	dec	r9
 8b2:	f7 cf       	rjmp	.-18     	; 0x8a2 <vfprintf+0x372>
 8b4:	8a 94       	dec	r8
 8b6:	f3 01       	movw	r30, r6
 8b8:	e8 0d       	add	r30, r8
 8ba:	f1 1d       	adc	r31, r1
 8bc:	80 81       	ld	r24, Z
 8be:	b6 01       	movw	r22, r12
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 8f 04 	call	0x91e	; 0x91e <fputc>
 8c6:	81 10       	cpse	r8, r1
 8c8:	f5 cf       	rjmp	.-22     	; 0x8b4 <vfprintf+0x384>
 8ca:	22 20       	and	r2, r2
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <vfprintf+0x3a0>
 8ce:	42 ce       	rjmp	.-892    	; 0x554 <vfprintf+0x24>
 8d0:	b6 01       	movw	r22, r12
 8d2:	80 e2       	ldi	r24, 0x20	; 32
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 8f 04 	call	0x91e	; 0x91e <fputc>
 8da:	2a 94       	dec	r2
 8dc:	f6 cf       	rjmp	.-20     	; 0x8ca <vfprintf+0x39a>
 8de:	f6 01       	movw	r30, r12
 8e0:	86 81       	ldd	r24, Z+6	; 0x06
 8e2:	97 81       	ldd	r25, Z+7	; 0x07
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x3ba>
 8e6:	8f ef       	ldi	r24, 0xFF	; 255
 8e8:	9f ef       	ldi	r25, 0xFF	; 255
 8ea:	2b 96       	adiw	r28, 0x0b	; 11
 8ec:	e2 e1       	ldi	r30, 0x12	; 18
 8ee:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__epilogue_restores__>

000008f2 <strnlen_P>:
 8f2:	fc 01       	movw	r30, r24
 8f4:	05 90       	lpm	r0, Z+
 8f6:	61 50       	subi	r22, 0x01	; 1
 8f8:	70 40       	sbci	r23, 0x00	; 0
 8fa:	01 10       	cpse	r0, r1
 8fc:	d8 f7       	brcc	.-10     	; 0x8f4 <strnlen_P+0x2>
 8fe:	80 95       	com	r24
 900:	90 95       	com	r25
 902:	8e 0f       	add	r24, r30
 904:	9f 1f       	adc	r25, r31
 906:	08 95       	ret

00000908 <strnlen>:
 908:	fc 01       	movw	r30, r24
 90a:	61 50       	subi	r22, 0x01	; 1
 90c:	70 40       	sbci	r23, 0x00	; 0
 90e:	01 90       	ld	r0, Z+
 910:	01 10       	cpse	r0, r1
 912:	d8 f7       	brcc	.-10     	; 0x90a <strnlen+0x2>
 914:	80 95       	com	r24
 916:	90 95       	com	r25
 918:	8e 0f       	add	r24, r30
 91a:	9f 1f       	adc	r25, r31
 91c:	08 95       	ret

0000091e <fputc>:
 91e:	0f 93       	push	r16
 920:	1f 93       	push	r17
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
 926:	fb 01       	movw	r30, r22
 928:	23 81       	ldd	r18, Z+3	; 0x03
 92a:	21 fd       	sbrc	r18, 1
 92c:	03 c0       	rjmp	.+6      	; 0x934 <fputc+0x16>
 92e:	8f ef       	ldi	r24, 0xFF	; 255
 930:	9f ef       	ldi	r25, 0xFF	; 255
 932:	2c c0       	rjmp	.+88     	; 0x98c <fputc+0x6e>
 934:	22 ff       	sbrs	r18, 2
 936:	16 c0       	rjmp	.+44     	; 0x964 <fputc+0x46>
 938:	46 81       	ldd	r20, Z+6	; 0x06
 93a:	57 81       	ldd	r21, Z+7	; 0x07
 93c:	24 81       	ldd	r18, Z+4	; 0x04
 93e:	35 81       	ldd	r19, Z+5	; 0x05
 940:	42 17       	cp	r20, r18
 942:	53 07       	cpc	r21, r19
 944:	44 f4       	brge	.+16     	; 0x956 <fputc+0x38>
 946:	a0 81       	ld	r26, Z
 948:	b1 81       	ldd	r27, Z+1	; 0x01
 94a:	9d 01       	movw	r18, r26
 94c:	2f 5f       	subi	r18, 0xFF	; 255
 94e:	3f 4f       	sbci	r19, 0xFF	; 255
 950:	31 83       	std	Z+1, r19	; 0x01
 952:	20 83       	st	Z, r18
 954:	8c 93       	st	X, r24
 956:	26 81       	ldd	r18, Z+6	; 0x06
 958:	37 81       	ldd	r19, Z+7	; 0x07
 95a:	2f 5f       	subi	r18, 0xFF	; 255
 95c:	3f 4f       	sbci	r19, 0xFF	; 255
 95e:	37 83       	std	Z+7, r19	; 0x07
 960:	26 83       	std	Z+6, r18	; 0x06
 962:	14 c0       	rjmp	.+40     	; 0x98c <fputc+0x6e>
 964:	8b 01       	movw	r16, r22
 966:	ec 01       	movw	r28, r24
 968:	fb 01       	movw	r30, r22
 96a:	00 84       	ldd	r0, Z+8	; 0x08
 96c:	f1 85       	ldd	r31, Z+9	; 0x09
 96e:	e0 2d       	mov	r30, r0
 970:	09 95       	icall
 972:	89 2b       	or	r24, r25
 974:	e1 f6       	brne	.-72     	; 0x92e <fputc+0x10>
 976:	d8 01       	movw	r26, r16
 978:	16 96       	adiw	r26, 0x06	; 6
 97a:	8d 91       	ld	r24, X+
 97c:	9c 91       	ld	r25, X
 97e:	17 97       	sbiw	r26, 0x07	; 7
 980:	01 96       	adiw	r24, 0x01	; 1
 982:	17 96       	adiw	r26, 0x07	; 7
 984:	9c 93       	st	X, r25
 986:	8e 93       	st	-X, r24
 988:	16 97       	sbiw	r26, 0x06	; 6
 98a:	ce 01       	movw	r24, r28
 98c:	df 91       	pop	r29
 98e:	cf 91       	pop	r28
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	08 95       	ret

00000996 <__ultoa_invert>:
 996:	fa 01       	movw	r30, r20
 998:	aa 27       	eor	r26, r26
 99a:	28 30       	cpi	r18, 0x08	; 8
 99c:	51 f1       	breq	.+84     	; 0x9f2 <__ultoa_invert+0x5c>
 99e:	20 31       	cpi	r18, 0x10	; 16
 9a0:	81 f1       	breq	.+96     	; 0xa02 <__ultoa_invert+0x6c>
 9a2:	e8 94       	clt
 9a4:	6f 93       	push	r22
 9a6:	6e 7f       	andi	r22, 0xFE	; 254
 9a8:	6e 5f       	subi	r22, 0xFE	; 254
 9aa:	7f 4f       	sbci	r23, 0xFF	; 255
 9ac:	8f 4f       	sbci	r24, 0xFF	; 255
 9ae:	9f 4f       	sbci	r25, 0xFF	; 255
 9b0:	af 4f       	sbci	r26, 0xFF	; 255
 9b2:	b1 e0       	ldi	r27, 0x01	; 1
 9b4:	3e d0       	rcall	.+124    	; 0xa32 <__ultoa_invert+0x9c>
 9b6:	b4 e0       	ldi	r27, 0x04	; 4
 9b8:	3c d0       	rcall	.+120    	; 0xa32 <__ultoa_invert+0x9c>
 9ba:	67 0f       	add	r22, r23
 9bc:	78 1f       	adc	r23, r24
 9be:	89 1f       	adc	r24, r25
 9c0:	9a 1f       	adc	r25, r26
 9c2:	a1 1d       	adc	r26, r1
 9c4:	68 0f       	add	r22, r24
 9c6:	79 1f       	adc	r23, r25
 9c8:	8a 1f       	adc	r24, r26
 9ca:	91 1d       	adc	r25, r1
 9cc:	a1 1d       	adc	r26, r1
 9ce:	6a 0f       	add	r22, r26
 9d0:	71 1d       	adc	r23, r1
 9d2:	81 1d       	adc	r24, r1
 9d4:	91 1d       	adc	r25, r1
 9d6:	a1 1d       	adc	r26, r1
 9d8:	20 d0       	rcall	.+64     	; 0xa1a <__ultoa_invert+0x84>
 9da:	09 f4       	brne	.+2      	; 0x9de <__ultoa_invert+0x48>
 9dc:	68 94       	set
 9de:	3f 91       	pop	r19
 9e0:	2a e0       	ldi	r18, 0x0A	; 10
 9e2:	26 9f       	mul	r18, r22
 9e4:	11 24       	eor	r1, r1
 9e6:	30 19       	sub	r19, r0
 9e8:	30 5d       	subi	r19, 0xD0	; 208
 9ea:	31 93       	st	Z+, r19
 9ec:	de f6       	brtc	.-74     	; 0x9a4 <__ultoa_invert+0xe>
 9ee:	cf 01       	movw	r24, r30
 9f0:	08 95       	ret
 9f2:	46 2f       	mov	r20, r22
 9f4:	47 70       	andi	r20, 0x07	; 7
 9f6:	40 5d       	subi	r20, 0xD0	; 208
 9f8:	41 93       	st	Z+, r20
 9fa:	b3 e0       	ldi	r27, 0x03	; 3
 9fc:	0f d0       	rcall	.+30     	; 0xa1c <__ultoa_invert+0x86>
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__ultoa_invert+0x5c>
 a00:	f6 cf       	rjmp	.-20     	; 0x9ee <__ultoa_invert+0x58>
 a02:	46 2f       	mov	r20, r22
 a04:	4f 70       	andi	r20, 0x0F	; 15
 a06:	40 5d       	subi	r20, 0xD0	; 208
 a08:	4a 33       	cpi	r20, 0x3A	; 58
 a0a:	18 f0       	brcs	.+6      	; 0xa12 <__ultoa_invert+0x7c>
 a0c:	49 5d       	subi	r20, 0xD9	; 217
 a0e:	31 fd       	sbrc	r19, 1
 a10:	40 52       	subi	r20, 0x20	; 32
 a12:	41 93       	st	Z+, r20
 a14:	02 d0       	rcall	.+4      	; 0xa1a <__ultoa_invert+0x84>
 a16:	a9 f7       	brne	.-22     	; 0xa02 <__ultoa_invert+0x6c>
 a18:	ea cf       	rjmp	.-44     	; 0x9ee <__ultoa_invert+0x58>
 a1a:	b4 e0       	ldi	r27, 0x04	; 4
 a1c:	a6 95       	lsr	r26
 a1e:	97 95       	ror	r25
 a20:	87 95       	ror	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	ba 95       	dec	r27
 a28:	c9 f7       	brne	.-14     	; 0xa1c <__ultoa_invert+0x86>
 a2a:	00 97       	sbiw	r24, 0x00	; 0
 a2c:	61 05       	cpc	r22, r1
 a2e:	71 05       	cpc	r23, r1
 a30:	08 95       	ret
 a32:	9b 01       	movw	r18, r22
 a34:	ac 01       	movw	r20, r24
 a36:	0a 2e       	mov	r0, r26
 a38:	06 94       	lsr	r0
 a3a:	57 95       	ror	r21
 a3c:	47 95       	ror	r20
 a3e:	37 95       	ror	r19
 a40:	27 95       	ror	r18
 a42:	ba 95       	dec	r27
 a44:	c9 f7       	brne	.-14     	; 0xa38 <__ultoa_invert+0xa2>
 a46:	62 0f       	add	r22, r18
 a48:	73 1f       	adc	r23, r19
 a4a:	84 1f       	adc	r24, r20
 a4c:	95 1f       	adc	r25, r21
 a4e:	a0 1d       	adc	r26, r0
 a50:	08 95       	ret

00000a52 <__prologue_saves__>:
 a52:	2f 92       	push	r2
 a54:	3f 92       	push	r3
 a56:	4f 92       	push	r4
 a58:	5f 92       	push	r5
 a5a:	6f 92       	push	r6
 a5c:	7f 92       	push	r7
 a5e:	8f 92       	push	r8
 a60:	9f 92       	push	r9
 a62:	af 92       	push	r10
 a64:	bf 92       	push	r11
 a66:	cf 92       	push	r12
 a68:	df 92       	push	r13
 a6a:	ef 92       	push	r14
 a6c:	ff 92       	push	r15
 a6e:	0f 93       	push	r16
 a70:	1f 93       	push	r17
 a72:	cf 93       	push	r28
 a74:	df 93       	push	r29
 a76:	cd b7       	in	r28, 0x3d	; 61
 a78:	de b7       	in	r29, 0x3e	; 62
 a7a:	ca 1b       	sub	r28, r26
 a7c:	db 0b       	sbc	r29, r27
 a7e:	0f b6       	in	r0, 0x3f	; 63
 a80:	f8 94       	cli
 a82:	de bf       	out	0x3e, r29	; 62
 a84:	0f be       	out	0x3f, r0	; 63
 a86:	cd bf       	out	0x3d, r28	; 61
 a88:	09 94       	ijmp

00000a8a <__epilogue_restores__>:
 a8a:	2a 88       	ldd	r2, Y+18	; 0x12
 a8c:	39 88       	ldd	r3, Y+17	; 0x11
 a8e:	48 88       	ldd	r4, Y+16	; 0x10
 a90:	5f 84       	ldd	r5, Y+15	; 0x0f
 a92:	6e 84       	ldd	r6, Y+14	; 0x0e
 a94:	7d 84       	ldd	r7, Y+13	; 0x0d
 a96:	8c 84       	ldd	r8, Y+12	; 0x0c
 a98:	9b 84       	ldd	r9, Y+11	; 0x0b
 a9a:	aa 84       	ldd	r10, Y+10	; 0x0a
 a9c:	b9 84       	ldd	r11, Y+9	; 0x09
 a9e:	c8 84       	ldd	r12, Y+8	; 0x08
 aa0:	df 80       	ldd	r13, Y+7	; 0x07
 aa2:	ee 80       	ldd	r14, Y+6	; 0x06
 aa4:	fd 80       	ldd	r15, Y+5	; 0x05
 aa6:	0c 81       	ldd	r16, Y+4	; 0x04
 aa8:	1b 81       	ldd	r17, Y+3	; 0x03
 aaa:	aa 81       	ldd	r26, Y+2	; 0x02
 aac:	b9 81       	ldd	r27, Y+1	; 0x01
 aae:	ce 0f       	add	r28, r30
 ab0:	d1 1d       	adc	r29, r1
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	f8 94       	cli
 ab6:	de bf       	out	0x3e, r29	; 62
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	cd bf       	out	0x3d, r28	; 61
 abc:	ed 01       	movw	r28, r26
 abe:	08 95       	ret

00000ac0 <_exit>:
 ac0:	f8 94       	cli

00000ac2 <__stop_program>:
 ac2:	ff cf       	rjmp	.-2      	; 0xac2 <__stop_program>
