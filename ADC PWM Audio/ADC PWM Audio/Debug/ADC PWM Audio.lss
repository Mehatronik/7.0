
ADC PWM Audio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800100  00800100  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000778  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066e  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d0  00000000  00000000  0000113e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008a  00000000  00000000  00001843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 36       	cpi	r26, 0x6C	; 108
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  88:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <AD_C_init>:

void AD_C_init()
{
	
	
	PRR = 0; //power reduction off
  90:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX |= (1<<REFS1)|(1<<REFS0);  //1.1V referentni napon, ulazni pin A0
  94:	ec e7       	ldi	r30, 0x7C	; 124
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 6c       	ori	r24, 0xC0	; 192
  9c:	80 83       	st	Z, r24
	ADCSRA = 0xFF ;  //ADC enable, auto trigger enable, ADC conv. complete interrupt enable, sample 125kHz (128 prescaler)
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	//ADCL, ADCH(2 zadnja bita), 
	
	ADCSRB = 0; //free runniing mode
  a4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  a8:	08 95       	ret

000000aa <PWM_init>:
	
}

void PWM_init()
{
	DDRB |= (1 << DDB1)|(1 << DDB2);
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	84 b9       	out	0x04, r24	; 4
	// PB1 and PB2 is now an output

	ICR1 =100; //399;
  b0:	84 e6       	ldi	r24, 0x64	; 100
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	// set TOP to 16bit

	OCR1A = 50;
  bc:	82 e3       	ldi	r24, 0x32	; 50
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// set PWM for 25% duty cycle @ 16bit

	OCR1B = 50;
  c8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  cc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	// set PWM for 75% duty cycle @ 16bit

	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
  d0:	e0 e8       	ldi	r30, 0x80	; 128
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 6a       	ori	r24, 0xA0	; 160
  d8:	80 83       	st	Z, r24
	// set none-inverting mode - valjda INVERTING, ili??

	TCCR1A |= (1 << WGM11);
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
  e0:	e1 e8       	ldi	r30, 0x81	; 129
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 61       	ori	r24, 0x18	; 24
  e8:	80 83       	st	Z, r24
	// set Fast PWM mode using ICR1 as TOP
	
	TCCR1B |= (1 << CS10);
  ea:	80 81       	ld	r24, Z
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <__vector_21>:
	// START the timer with no prescaler
}


ISR(ADC_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
	//ADCL mora biti prvi procitan
	adc_low = (int)ADCL;    //koriste se dva 8-bit registra jer je rezultat AD konverzije 10-bitan
 10a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <adc_low+0x1>
 114:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <adc_low>
	adc_high = (int)ADCH;
 118:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <adc_high+0x1>
 122:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_high>
	
	/**stapam rezultate iz dva registra u jednu promenljivu na ovaj nacin**/
	if(adc_high==0)
 126:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
 12a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
 12e:	89 2b       	or	r24, r25
 130:	49 f4       	brne	.+18     	; 0x144 <__vector_21+0x52>
		adc_res = adc_low;
 132:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <adc_low>
 136:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <adc_low+0x1>
 13a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 142:	2f c0       	rjmp	.+94     	; 0x1a2 <__vector_21+0xb0>
	else if(adc_high==1)
 144:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
 148:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	51 f4       	brne	.+20     	; 0x164 <__vector_21+0x72>
		adc_res = 256 + adc_low;
 150:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <adc_low>
 154:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <adc_low+0x1>
 158:	93 95       	inc	r25
 15a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 162:	1f c0       	rjmp	.+62     	; 0x1a2 <__vector_21+0xb0>
	else if(adc_high==2)
 164:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
 168:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
 16c:	02 97       	sbiw	r24, 0x02	; 2
 16e:	51 f4       	brne	.+20     	; 0x184 <__vector_21+0x92>
		adc_res = 256+256 + adc_low;
 170:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <adc_low>
 174:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <adc_low+0x1>
 178:	9e 5f       	subi	r25, 0xFE	; 254
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 182:	0f c0       	rjmp	.+30     	; 0x1a2 <__vector_21+0xb0>
	else if(adc_high==3)
 184:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
 188:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
 18c:	03 97       	sbiw	r24, 0x03	; 3
 18e:	49 f4       	brne	.+18     	; 0x1a2 <__vector_21+0xb0>
		adc_res = 256+256+256 + adc_low;
 190:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <adc_low>
 194:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <adc_low+0x1>
 198:	9d 5f       	subi	r25, 0xFD	; 253
 19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
	//adc_res = 1024 max
	
	OCR1A = adc_res/5; //2.56;
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1aa:	65 e0       	ldi	r22, 0x05	; 5
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__divmodhi4>
 1b2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1b6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
}
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <main>:

int main(void)
{


	cli();
 1d2:	f8 94       	cli
	

	AD_C_init();
 1d4:	0e 94 48 00 	call	0x90	; 0x90 <AD_C_init>
	//Rx_Tx_Init();
	PWM_init();
 1d8:	0e 94 55 00 	call	0xaa	; 0xaa <PWM_init>
	
	sei();
 1dc:	78 94       	sei
 1de:	ff cf       	rjmp	.-2      	; 0x1de <main+0xc>

000001e0 <__divmodhi4>:
 1e0:	97 fb       	bst	r25, 7
 1e2:	07 2e       	mov	r0, r23
 1e4:	16 f4       	brtc	.+4      	; 0x1ea <__divmodhi4+0xa>
 1e6:	00 94       	com	r0
 1e8:	07 d0       	rcall	.+14     	; 0x1f8 <__divmodhi4_neg1>
 1ea:	77 fd       	sbrc	r23, 7
 1ec:	09 d0       	rcall	.+18     	; 0x200 <__divmodhi4_neg2>
 1ee:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodhi4>
 1f2:	07 fc       	sbrc	r0, 7
 1f4:	05 d0       	rcall	.+10     	; 0x200 <__divmodhi4_neg2>
 1f6:	3e f4       	brtc	.+14     	; 0x206 <__divmodhi4_exit>

000001f8 <__divmodhi4_neg1>:
 1f8:	90 95       	com	r25
 1fa:	81 95       	neg	r24
 1fc:	9f 4f       	sbci	r25, 0xFF	; 255
 1fe:	08 95       	ret

00000200 <__divmodhi4_neg2>:
 200:	70 95       	com	r23
 202:	61 95       	neg	r22
 204:	7f 4f       	sbci	r23, 0xFF	; 255

00000206 <__divmodhi4_exit>:
 206:	08 95       	ret

00000208 <__udivmodhi4>:
 208:	aa 1b       	sub	r26, r26
 20a:	bb 1b       	sub	r27, r27
 20c:	51 e1       	ldi	r21, 0x11	; 17
 20e:	07 c0       	rjmp	.+14     	; 0x21e <__udivmodhi4_ep>

00000210 <__udivmodhi4_loop>:
 210:	aa 1f       	adc	r26, r26
 212:	bb 1f       	adc	r27, r27
 214:	a6 17       	cp	r26, r22
 216:	b7 07       	cpc	r27, r23
 218:	10 f0       	brcs	.+4      	; 0x21e <__udivmodhi4_ep>
 21a:	a6 1b       	sub	r26, r22
 21c:	b7 0b       	sbc	r27, r23

0000021e <__udivmodhi4_ep>:
 21e:	88 1f       	adc	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	5a 95       	dec	r21
 224:	a9 f7       	brne	.-22     	; 0x210 <__udivmodhi4_loop>
 226:	80 95       	com	r24
 228:	90 95       	com	r25
 22a:	bc 01       	movw	r22, r24
 22c:	cd 01       	movw	r24, r26
 22e:	08 95       	ret

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
