
Kontrola motora H mostom i enkoderom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000cec  00000d80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  0080012a  0080012a  00000daa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000edd  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fe  00000000  00000000  00001de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e8  00000000  00000000  000027e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c0  00000000  00000000  0000330c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038f  00000000  00000000  000038cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003c5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_20>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 37       	cpi	r26, 0x7C	; 124
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 74 06 	jmp	0xce8	; 0xce8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
char bafer[30];


int main(void)
{
		DDRB |= 1<<PORTB5;	//dig13, radi provere frekvencije; izlaz
  a6:	25 9a       	sbi	0x04, 5	; 4

		ADC_init();
  a8:	0e 94 94 00 	call	0x128	; 0x128 <ADC_init>
		pwm_init();
  ac:	0e 94 00 02 	call	0x400	; 0x400 <pwm_init>
		uart_init();
  b0:	0e 94 0c 04 	call	0x818	; 0x818 <uart_init>
		eksternInt_init();
  b4:	0e 94 b3 01 	call	0x366	; 0x366 <eksternInt_init>
		tajmer0_init();
  b8:	0e 94 21 02 	call	0x442	; 0x442 <tajmer0_init>
		
		sei();
  bc:	78 94       	sei
	
	
	send_str("Start \n");
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 1c 04 	call	0x838	; 0x838 <send_str>
	
    while (1) 
    {	
		
		
		if(flag_prekid_10ms == 1)		//slanje putem UART Tx na svakih 20ms. Podesava se u tajmer.c fajlu
  c6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <flag_prekid_10ms>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x20>
		{
			flag_prekid_10ms = 0;
  ce:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <flag_prekid_10ms>
			
			
			
			itoa((int)(ugaona_brzina), bafer, 10);
  d2:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <ugaona_brzina>
  d6:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <ugaona_brzina+0x1>
  da:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <ugaona_brzina+0x2>
  de:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <ugaona_brzina+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fixsfsi>
  e6:	dc 01       	movw	r26, r24
  e8:	cb 01       	movw	r24, r22
  ea:	4a e0       	ldi	r20, 0x0A	; 10
  ec:	6e e4       	ldi	r22, 0x4E	; 78
  ee:	71 e0       	ldi	r23, 0x01	; 1
  f0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__itoa_ncheck>
			send_str(bafer);
  f4:	8e e4       	ldi	r24, 0x4E	; 78
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 1c 04 	call	0x838	; 0x838 <send_str>
			send_str(" o/min       ");
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 1c 04 	call	0x838	; 0x838 <send_str>
			

			
			itoa((ref_brzina_sa_pot), bafer, 10);
 104:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ref_brzina_sa_pot>
 108:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ref_brzina_sa_pot+0x1>
 10c:	4a e0       	ldi	r20, 0x0A	; 10
 10e:	6e e4       	ldi	r22, 0x4E	; 78
 110:	71 e0       	ldi	r23, 0x01	; 1
 112:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__itoa_ncheck>
			send_str(bafer);
 116:	8e e4       	ldi	r24, 0x4E	; 78
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 1c 04 	call	0x838	; 0x838 <send_str>
			send_str(" \n ");
 11e:	86 e2       	ldi	r24, 0x26	; 38
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 1c 04 	call	0x838	; 0x838 <send_str>
 126:	cf cf       	rjmp	.-98     	; 0xc6 <main+0x20>

00000128 <ADC_init>:

void ADC_init()
{
	
	
	PRR = 0;					//power reduction off
 128:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = (1<<REFS0);				//5V referentni napon, ulazni pin A0
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101111;			//ADC enable, auto trigger enable, ADC conv. complete interrupt enable, 128 prescaler
 132:	8f ee       	ldi	r24, 0xEF	; 239
 134:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b11;					//auto trigger - Timer0 compare match A. Startuje AD konverziju na svaki Timer interrupt
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
 13e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
 142:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
 146:	08 95       	ret

00000148 <__vector_21>:
	
}

ISR(ADC_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//ADCL mora biti prvi procitan
	adc_low = (int)ADCL;    //koriste se dva 8-bit registra jer je rezultat AD konverzije 10-bitan
 16e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <adc_low+0x1>
 178:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <adc_low>
	adc_high = (int)ADCH;
 17c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <adc_high+0x1>
 186:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <adc_high>
	
		/**stapam rezultate iz dva registra u jednu promenljivu na ovaj nacin**/
		/**rezultat ad konverzije je 10-bit-an, tj. od 0 do 1023**/
		if(adc_high==0)
 18a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <adc_high>
 18e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <adc_high+0x1>
 192:	89 2b       	or	r24, r25
 194:	79 f4       	brne	.+30     	; 0x1b4 <__vector_21+0x6c>
			adc_res[ad_kanal] = adc_low;
 196:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 19a:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__data_end+0x1>
 19e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <adc_low>
 1a2:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <adc_low+0x1>
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	e2 5d       	subi	r30, 0xD2	; 210
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	91 83       	std	Z+1, r25	; 0x01
 1b0:	80 83       	st	Z, r24
 1b2:	41 c0       	rjmp	.+130    	; 0x236 <__vector_21+0xee>
		else if(adc_high==1)
 1b4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <adc_high>
 1b8:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <adc_high+0x1>
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	81 f4       	brne	.+32     	; 0x1e0 <__vector_21+0x98>
			adc_res[ad_kanal] = 256 + adc_low;
 1c0:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 1c4:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__data_end+0x1>
 1c8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <adc_low>
 1cc:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <adc_low+0x1>
 1d0:	93 95       	inc	r25
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e2 5d       	subi	r30, 0xD2	; 210
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	91 83       	std	Z+1, r25	; 0x01
 1dc:	80 83       	st	Z, r24
 1de:	2b c0       	rjmp	.+86     	; 0x236 <__vector_21+0xee>
		else if(adc_high==2)
 1e0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <adc_high>
 1e4:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <adc_high+0x1>
 1e8:	02 97       	sbiw	r24, 0x02	; 2
 1ea:	81 f4       	brne	.+32     	; 0x20c <__vector_21+0xc4>
			adc_res[ad_kanal] = 512 + adc_low;	//256*2
 1ec:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 1f0:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__data_end+0x1>
 1f4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <adc_low>
 1f8:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <adc_low+0x1>
 1fc:	9e 5f       	subi	r25, 0xFE	; 254
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e2 5d       	subi	r30, 0xD2	; 210
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	91 83       	std	Z+1, r25	; 0x01
 208:	80 83       	st	Z, r24
 20a:	15 c0       	rjmp	.+42     	; 0x236 <__vector_21+0xee>
		else if(adc_high==3)
 20c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <adc_high>
 210:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <adc_high+0x1>
 214:	03 97       	sbiw	r24, 0x03	; 3
 216:	79 f4       	brne	.+30     	; 0x236 <__vector_21+0xee>
			adc_res[ad_kanal] = 768 + adc_low;	//256*3
 218:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 21c:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__data_end+0x1>
 220:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <adc_low>
 224:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <adc_low+0x1>
 228:	9d 5f       	subi	r25, 0xFD	; 253
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	e2 5d       	subi	r30, 0xD2	; 210
 230:	fe 4f       	sbci	r31, 0xFE	; 254
 232:	91 83       	std	Z+1, r25	; 0x01
 234:	80 83       	st	Z, r24
	
	
	ref_brzina_sa_pot = (adc_res[0] / 1.705) - 300; //skalirao bezveze da odgovara obrtajima, max 300 o/min otprilike u oba smera, -300 ofset zbog smera
 236:	ce e2       	ldi	r28, 0x2E	; 46
 238:	d1 e0       	ldi	r29, 0x01	; 1
 23a:	68 81       	ld	r22, Y
 23c:	79 81       	ldd	r23, Y+1	; 0x01
 23e:	07 2e       	mov	r0, r23
 240:	00 0c       	add	r0, r0
 242:	88 0b       	sbc	r24, r24
 244:	99 0b       	sbc	r25, r25
 246:	0e 94 46 05 	call	0xa8c	; 0xa8c <__floatsisf>
 24a:	21 e7       	ldi	r18, 0x71	; 113
 24c:	3d e3       	ldi	r19, 0x3D	; 61
 24e:	4a ed       	ldi	r20, 0xDA	; 218
 250:	5f e3       	ldi	r21, 0x3F	; 63
 252:	0e 94 9c 04 	call	0x938	; 0x938 <__divsf3>
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	46 e9       	ldi	r20, 0x96	; 150
 25c:	53 e4       	ldi	r21, 0x43	; 67
 25e:	0e 94 2f 04 	call	0x85e	; 0x85e <__subsf3>
 262:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fixsfsi>
 266:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <ref_brzina_sa_pot+0x1>
 26a:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <ref_brzina_sa_pot>
	Kp = adc_res[1]/100.0;				//skalirano da Kp ide do max 1
 26e:	6a 81       	ldd	r22, Y+2	; 0x02
 270:	7b 81       	ldd	r23, Y+3	; 0x03
 272:	07 2e       	mov	r0, r23
 274:	00 0c       	add	r0, r0
 276:	88 0b       	sbc	r24, r24
 278:	99 0b       	sbc	r25, r25
 27a:	0e 94 46 05 	call	0xa8c	; 0xa8c <__floatsisf>
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	48 ec       	ldi	r20, 0xC8	; 200
 284:	52 e4       	ldi	r21, 0x42	; 66
 286:	0e 94 9c 04 	call	0x938	; 0x938 <__divsf3>
 28a:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <Kp>
 28e:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <Kp+0x1>
 292:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Kp+0x2>
 296:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <Kp+0x3>
	Ki = adc_res[2]/1000.0;				//da Ki ide do max 1
 29a:	6c 81       	ldd	r22, Y+4	; 0x04
 29c:	7d 81       	ldd	r23, Y+5	; 0x05
 29e:	07 2e       	mov	r0, r23
 2a0:	00 0c       	add	r0, r0
 2a2:	88 0b       	sbc	r24, r24
 2a4:	99 0b       	sbc	r25, r25
 2a6:	0e 94 46 05 	call	0xa8c	; 0xa8c <__floatsisf>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	4a e7       	ldi	r20, 0x7A	; 122
 2b0:	54 e4       	ldi	r21, 0x44	; 68
 2b2:	0e 94 9c 04 	call	0x938	; 0x938 <__divsf3>
 2b6:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Ki>
 2ba:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <Ki+0x1>
 2be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Ki+0x2>
 2c2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Ki+0x3>
	
	
	ADCSRA &= ~(1<<ADEN);	//iskljucim adc da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 2c6:	ea e7       	ldi	r30, 0x7A	; 122
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	8f 77       	andi	r24, 0x7F	; 127
 2ce:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 2d0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 2d4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 2de:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
	if(ad_kanal > 3)	//kreni opet od nule kad dodjes do poslednjeg
 2e2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 2e6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 2ea:	04 97       	sbiw	r24, 0x04	; 4
 2ec:	24 f0       	brlt	.+8      	; 0x2f6 <__vector_21+0x1ae>
		ad_kanal = 0;
 2ee:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
 2f2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	
	switch(ad_kanal)
 2f6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 2fa:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	91 05       	cpc	r25, r1
 302:	71 f0       	breq	.+28     	; 0x320 <__vector_21+0x1d8>
 304:	1c f4       	brge	.+6      	; 0x30c <__vector_21+0x1c4>
 306:	89 2b       	or	r24, r25
 308:	39 f0       	breq	.+14     	; 0x318 <__vector_21+0x1d0>
 30a:	15 c0       	rjmp	.+42     	; 0x336 <__vector_21+0x1ee>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	91 05       	cpc	r25, r1
 310:	59 f0       	breq	.+22     	; 0x328 <__vector_21+0x1e0>
 312:	03 97       	sbiw	r24, 0x03	; 3
 314:	69 f0       	breq	.+26     	; 0x330 <__vector_21+0x1e8>
 316:	0f c0       	rjmp	.+30     	; 0x336 <__vector_21+0x1ee>
	{
		case 0:
				ADMUX = 0b01000000;		//ref VCC 5V, kanal A0
 318:	80 e4       	ldi	r24, 0x40	; 64
 31a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		break;
 31e:	0b c0       	rjmp	.+22     	; 0x336 <__vector_21+0x1ee>
		
		case 1:
				ADMUX = 0b01000001;		//ref VCC 5V, kanal A1
 320:	81 e4       	ldi	r24, 0x41	; 65
 322:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		break;
 326:	07 c0       	rjmp	.+14     	; 0x336 <__vector_21+0x1ee>
		
		case 2:
				ADMUX = 0b01000010;		//ref VCC 5V, kanal A2
 328:	82 e4       	ldi	r24, 0x42	; 66
 32a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		break;
 32e:	03 c0       	rjmp	.+6      	; 0x336 <__vector_21+0x1ee>
		
		case 3:
				ADMUX = 0b01000011;		//ref VCC 5V, kanal A3
 330:	83 e4       	ldi	r24, 0x43	; 67
 332:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN);	//ponovo dozvolim adc posle promene u ADMUX
 336:	ea e7       	ldi	r30, 0x7A	; 122
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	80 68       	ori	r24, 0x80	; 128
 33e:	80 83       	st	Z, r24
	


 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	7f 91       	pop	r23
 352:	6f 91       	pop	r22
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <eksternInt_init>:
volatile double ugao = 0;
volatile unsigned int brojac_ext_interaptova = 0;

void eksternInt_init()
{
	DDRD &= ~(0b1100);		//PD2(INT0) i PD3(INT1) ulazi - hardwerski interapti
 366:	8a b1       	in	r24, 0x0a	; 10
 368:	83 7f       	andi	r24, 0xF3	; 243
 36a:	8a b9       	out	0x0a, r24	; 10
	
	EICRA = 0b11;		//rastuca ivica na INT0
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b1;			//dozvola prekida na INT0 
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	8d bb       	out	0x1d, r24	; 29
 376:	08 95       	ret

00000378 <__vector_1>:
	
	
}

ISR(INT0_vect)
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	2f 93       	push	r18
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
	
		//interapt opali na rastucu ivicu INT0; ovo sam uradio zbog velike rezolucije enkodera -1024 * 57.5 na izlazu, tj na tocku zbog 2 reduktora
	
	brojac_ext_interaptova++;
 388:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <brojac_ext_interaptova>
 38c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <brojac_ext_interaptova+0x1>
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <brojac_ext_interaptova+0x1>
 396:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <brojac_ext_interaptova>
	

	
		if ( PIND & (1<<PORTD3) )	//smer 1; proverava se logicki nivo drugog kanala
 39a:	4b 9b       	sbis	0x09, 3	; 9
 39c:	0d c0       	rjmp	.+26     	; 0x3b8 <__vector_1+0x40>
		{
			smer_obrtanja = 1;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <smer_obrtanja>
			impulsi++;
 3a4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <impulsi>
 3a8:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <impulsi+0x1>
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <impulsi+0x1>
 3b2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <impulsi>
 3b6:	0c c0       	rjmp	.+24     	; 0x3d0 <__vector_1+0x58>
		} 
		else								//smer 2
		{
			smer_obrtanja = 2;
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <smer_obrtanja>
			impulsi--;	
 3be:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <impulsi>
 3c2:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <impulsi+0x1>
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <impulsi+0x1>
 3cc:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <impulsi>
	
	
	
	
	
	if(impulsi > 58879)		//za apsolutno merenje ugla
 3d0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <impulsi>
 3d4:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <impulsi+0x1>
 3d8:	81 15       	cp	r24, r1
 3da:	96 4e       	sbci	r25, 0xE6	; 230
 3dc:	28 f0       	brcs	.+10     	; 0x3e8 <__vector_1+0x70>
		impulsi = 0;
 3de:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <impulsi+0x1>
 3e2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <impulsi>
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <__vector_1+0x78>
	else if(impulsi < 0 )
 3e8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <impulsi>
 3ec:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <impulsi+0x1>
	//problem se javlja kada ove impulse zelim da iskoristim za merenje brzine, a pri prelazu preko granicne vrednosti sa 58879 na 0 i obrnuto
	//zato sam ubacio jos jedan brojac koji broji prekide "brojac_ext_interaptova" relativno, a ne apsolutno
		
	//ugao = impulsi / 57.5;	//skaliranje, 58879 impulsa po krugu odgovara 360 stepeni tocka; !!!atmega se ovde zaglavi pri umerenoj frekvenciji prekida!!!
	//ugao = 100;
}
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <pwm_init>:
void pwm_init()
{
	
	
	
	DDRB |= (1 << DDB1)|(1 << DDB2); //izlazni pinovi za PWM - D9 i D10 na Arduino Uno ploci
 400:	84 b1       	in	r24, 0x04	; 4
 402:	86 60       	ori	r24, 0x06	; 6
 404:	84 b9       	out	0x04, r24	; 4
	

	ICR1 = 500;			//frekvencija ~ 16 kHz
 406:	84 ef       	ldi	r24, 0xF4	; 244
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 40e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 250;		//faktor ispune 50% na startu sto daje nultu vrednost struje na H mostu
 412:	e8 e8       	ldi	r30, 0x88	; 136
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	8a ef       	ldi	r24, 0xFA	; 250
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	91 83       	std	Z+1, r25	; 0x01
 41c:	80 83       	st	Z, r24
	OCR1B = OCR1A;
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 426:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	

	TCCR1A = 0b10110000;		//inverting rezim tj. pwm signali su komplementarni
 42a:	80 eb       	ldi	r24, 0xB0	; 176
 42c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	
	TCCR1B |= (1 << WGM13);		// set Fast PWM mode using ICR1 as TOP
 430:	e1 e8       	ldi	r30, 0x81	; 129
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	80 61       	ori	r24, 0x10	; 16
 438:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << CS10);		// START the timer with no prescaler
 43a:	80 81       	ld	r24, Z
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	80 83       	st	Z, r24
 440:	08 95       	ret

00000442 <tajmer0_init>:
const volatile double stepeniPOms_to_rpm = 16.67;		//faktor konverzije izmedju izmerenog broja stepeni u prozoru od 10ms u obrtaje po minutu
volatile double relativni_ugao = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 446:	93 e0       	ldi	r25, 0x03	; 3
 448:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 44a:	99 ef       	ldi	r25, 0xF9	; 249
 44c:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 44e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 452:	08 95       	ret

00000454 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	8f 92       	push	r8
 460:	9f 92       	push	r9
 462:	af 92       	push	r10
 464:	bf 92       	push	r11
 466:	cf 92       	push	r12
 468:	df 92       	push	r13
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	2f 93       	push	r18
 470:	3f 93       	push	r19
 472:	4f 93       	push	r20
 474:	5f 93       	push	r21
 476:	6f 93       	push	r22
 478:	7f 93       	push	r23
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	af 93       	push	r26
 480:	bf 93       	push	r27
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
	flag_tajmer0_prekid = 1;
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
 48c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <brojac_prekida_tajmera0>
 490:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <brojac_prekida_tajmera0+0x1>
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <brojac_prekida_tajmera0+0x1>
 49a:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)
 49e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <brojac_prekida_tajmera0>
 4a2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <brojac_prekida_tajmera0+0x1>
 4a6:	0a 97       	sbiw	r24, 0x0a	; 10
 4a8:	09 f0       	breq	.+2      	; 0x4ac <__vector_14+0x58>
 4aa:	66 c1       	rjmp	.+716    	; 0x778 <__vector_14+0x324>
	{
		brojac_prekida_tajmera0 = 0;
 4ac:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <brojac_prekida_tajmera0+0x1>
 4b0:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <flag_prekid_10ms>
		//***********************merenje brzine treba obaviti unutar ISR jer je vremenski kriticno*****************************************
	
		relativni_ugao = brojac_ext_interaptova / 57.5;	//skaliranje, 58800 impulsa po krugu odgovara 360 stepeni
 4ba:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <brojac_ext_interaptova>
 4be:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <brojac_ext_interaptova+0x1>
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 44 05 	call	0xa88	; 0xa88 <__floatunsisf>
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	46 e6       	ldi	r20, 0x66	; 102
 4d0:	52 e4       	ldi	r21, 0x42	; 66
 4d2:	0e 94 9c 04 	call	0x938	; 0x938 <__divsf3>
 4d6:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <relativni_ugao>
 4da:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <relativni_ugao+0x1>
 4de:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <relativni_ugao+0x2>
 4e2:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <relativni_ugao+0x3>
		
		if(smer_obrtanja == 2)		//ODREDJUJEM NA KOJU STRANU SE VRTI
 4e6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <smer_obrtanja>
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	d9 f4       	brne	.+54     	; 0x524 <__vector_14+0xd0>
		{
			ugaona_brzina = stepeniPOms_to_rpm * relativni_ugao;				//posto se zna da merenje relativnog ugla traje 1ms, to je zapravo ugaona
 4ee:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 4f2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 4f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 4fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 4fe:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <relativni_ugao>
 502:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <relativni_ugao+0x1>
 506:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <relativni_ugao+0x2>
 50a:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <relativni_ugao+0x3>
 50e:	0e 94 d2 05 	call	0xba4	; 0xba4 <__mulsf3>
 512:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <ugaona_brzina>
 516:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <ugaona_brzina+0x1>
 51a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <ugaona_brzina+0x2>
 51e:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <ugaona_brzina+0x3>
 522:	1d c0       	rjmp	.+58     	; 0x55e <__vector_14+0x10a>
															//brzina u stepen/1ms, a 166.67 je faktor konverzije izmedju stepeni/1ms i obrtaja/min
		}
		else
		{
			ugaona_brzina = -(stepeniPOms_to_rpm * relativni_ugao);	//ako je na drugu brzina je negativna
 524:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 528:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 52c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 530:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 534:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <relativni_ugao>
 538:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <relativni_ugao+0x1>
 53c:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <relativni_ugao+0x2>
 540:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <relativni_ugao+0x3>
 544:	0e 94 d2 05 	call	0xba4	; 0xba4 <__mulsf3>
 548:	dc 01       	movw	r26, r24
 54a:	cb 01       	movw	r24, r22
 54c:	b0 58       	subi	r27, 0x80	; 128
 54e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <ugaona_brzina>
 552:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <ugaona_brzina+0x1>
 556:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <ugaona_brzina+0x2>
 55a:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <ugaona_brzina+0x3>
		}
															
	
		PINB |= 1<<PINB5;					//toogle pin 5 - DIG13, test da vidim da li je korektna frekvencija
 55e:	1d 9a       	sbi	0x03, 5	; 3
		
		
		greska = ref_brzina_sa_pot - ugaona_brzina;
 560:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <ref_brzina_sa_pot>
 564:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <ref_brzina_sa_pot+0x1>
 568:	c0 90 47 01 	lds	r12, 0x0147	; 0x800147 <ugaona_brzina>
 56c:	d0 90 48 01 	lds	r13, 0x0148	; 0x800148 <ugaona_brzina+0x1>
 570:	e0 90 49 01 	lds	r14, 0x0149	; 0x800149 <ugaona_brzina+0x2>
 574:	f0 90 4a 01 	lds	r15, 0x014A	; 0x80014a <ugaona_brzina+0x3>
 578:	07 2e       	mov	r0, r23
 57a:	00 0c       	add	r0, r0
 57c:	88 0b       	sbc	r24, r24
 57e:	99 0b       	sbc	r25, r25
 580:	0e 94 46 05 	call	0xa8c	; 0xa8c <__floatsisf>
 584:	a7 01       	movw	r20, r14
 586:	96 01       	movw	r18, r12
 588:	0e 94 2f 04 	call	0x85e	; 0x85e <__subsf3>
 58c:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <greska>
 590:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <greska+0x1>
 594:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <greska+0x2>
 598:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <greska+0x3>
		
		Upravljanje = 250 + Kp * greska;		//Proporcionalni regulator; ofset 250 zbog h-mosta. Top je 500
 59c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Kp>
 5a0:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Kp+0x1>
 5a4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Kp+0x2>
 5a8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Kp+0x3>
 5ac:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <greska>
 5b0:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <greska+0x1>
 5b4:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <greska+0x2>
 5b8:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <greska+0x3>
 5bc:	0e 94 d2 05 	call	0xba4	; 0xba4 <__mulsf3>
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	4a e7       	ldi	r20, 0x7A	; 122
 5c6:	53 e4       	ldi	r21, 0x43	; 67
 5c8:	0e 94 30 04 	call	0x860	; 0x860 <__addsf3>
 5cc:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fixsfsi>
 5d0:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Upravljanje>
 5d4:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Upravljanje+0x1>
 5d8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Upravljanje+0x2>
 5dc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Upravljanje+0x3>
		
		suma_greske += greska;			//suma greske
 5e0:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <greska>
 5e4:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <greska+0x1>
 5e8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <greska+0x2>
 5ec:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <greska+0x3>
 5f0:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <suma_greske>
 5f4:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <suma_greske+0x1>
 5f8:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <suma_greske+0x2>
 5fc:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <suma_greske+0x3>
 600:	0e 94 30 04 	call	0x860	; 0x860 <__addsf3>
 604:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <suma_greske>
 608:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <suma_greske+0x1>
 60c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <suma_greske+0x2>
 610:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <suma_greske+0x3>
		
		
		Upravljanje += Ki * suma_greske;			//Integralno dejstvo sabiram sa prethodnim upravljanjem
 614:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Ki>
 618:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Ki+0x1>
 61c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Ki+0x2>
 620:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Ki+0x3>
 624:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <suma_greske>
 628:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <suma_greske+0x1>
 62c:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <suma_greske+0x2>
 630:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <suma_greske+0x3>
 634:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <Upravljanje>
 638:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <Upravljanje+0x1>
 63c:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <Upravljanje+0x2>
 640:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <Upravljanje+0x3>
 644:	0e 94 d2 05 	call	0xba4	; 0xba4 <__mulsf3>
 648:	6b 01       	movw	r12, r22
 64a:	7c 01       	movw	r14, r24
 64c:	c5 01       	movw	r24, r10
 64e:	b4 01       	movw	r22, r8
 650:	0e 94 46 05 	call	0xa8c	; 0xa8c <__floatsisf>
 654:	9b 01       	movw	r18, r22
 656:	ac 01       	movw	r20, r24
 658:	c7 01       	movw	r24, r14
 65a:	b6 01       	movw	r22, r12
 65c:	0e 94 30 04 	call	0x860	; 0x860 <__addsf3>
 660:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fixsfsi>
 664:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Upravljanje>
 668:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Upravljanje+0x1>
 66c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Upravljanje+0x2>
 670:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Upravljanje+0x3>
		
		if(Upravljanje >= 500 )		//ogranicenje jer 500 u OCR1A registru daje maksimalan faktor ispune
 674:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Upravljanje>
 678:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Upravljanje+0x1>
 67c:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <Upravljanje+0x2>
 680:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <Upravljanje+0x3>
 684:	84 3f       	cpi	r24, 0xF4	; 244
 686:	91 40       	sbci	r25, 0x01	; 1
 688:	a1 05       	cpc	r26, r1
 68a:	b1 05       	cpc	r27, r1
 68c:	3c f1       	brlt	.+78     	; 0x6dc <__vector_14+0x288>
									
		{
			Upravljanje = 500;
 68e:	84 ef       	ldi	r24, 0xF4	; 244
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	a0 e0       	ldi	r26, 0x00	; 0
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Upravljanje>
 69a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <Upravljanje+0x1>
 69e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <Upravljanje+0x2>
 6a2:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <Upravljanje+0x3>
			suma_greske -= greska;		//ako vec imas max upravljanje nemoj vise povecavati sumu greske; zastita od wind up-a
 6a6:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <greska>
 6aa:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <greska+0x1>
 6ae:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <greska+0x2>
 6b2:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <greska+0x3>
 6b6:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <suma_greske>
 6ba:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <suma_greske+0x1>
 6be:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <suma_greske+0x2>
 6c2:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <suma_greske+0x3>
 6c6:	0e 94 2f 04 	call	0x85e	; 0x85e <__subsf3>
 6ca:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <suma_greske>
 6ce:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <suma_greske+0x1>
 6d2:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <suma_greske+0x2>
 6d6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <suma_greske+0x3>
 6da:	2f c0       	rjmp	.+94     	; 0x73a <__vector_14+0x2e6>
		}
		else if(Upravljanje <= 0)	//ogranicenje, 0 daje max upravljanje u drugom smeru
 6dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Upravljanje>
 6e0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Upravljanje+0x1>
 6e4:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <Upravljanje+0x2>
 6e8:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <Upravljanje+0x3>
 6ec:	18 16       	cp	r1, r24
 6ee:	19 06       	cpc	r1, r25
 6f0:	1a 06       	cpc	r1, r26
 6f2:	1b 06       	cpc	r1, r27
 6f4:	14 f1       	brlt	.+68     	; 0x73a <__vector_14+0x2e6>
		{
			Upravljanje = 0;
 6f6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Upravljanje>
 6fa:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <Upravljanje+0x1>
 6fe:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Upravljanje+0x2>
 702:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Upravljanje+0x3>
			suma_greske -= greska;		//drugi smer, obratna situacija
 706:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <greska>
 70a:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <greska+0x1>
 70e:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <greska+0x2>
 712:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <greska+0x3>
 716:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <suma_greske>
 71a:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <suma_greske+0x1>
 71e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <suma_greske+0x2>
 722:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <suma_greske+0x3>
 726:	0e 94 2f 04 	call	0x85e	; 0x85e <__subsf3>
 72a:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <suma_greske>
 72e:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <suma_greske+0x1>
 732:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <suma_greske+0x2>
 736:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <suma_greske+0x3>
		}
		
		
		
		OCR1A = Upravljanje;	//mogao sam i direktno da upisujem u OCR1A, ali sam dodao promenljivu 'Upravljanje' da bi bilo baferovano
 73a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Upravljanje>
 73e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Upravljanje+0x1>
 742:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <Upravljanje+0x2>
 746:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <Upravljanje+0x3>
 74a:	e8 e8       	ldi	r30, 0x88	; 136
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	91 83       	std	Z+1, r25	; 0x01
 750:	80 83       	st	Z, r24
		OCR1B = OCR1A + 50;		//+50 za mrtvo vreme
 752:	80 81       	ld	r24, Z
 754:	91 81       	ldd	r25, Z+1	; 0x01
 756:	c2 96       	adiw	r24, 0x32	; 50
 758:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 75c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		
		
		if(OCR1A==0)
 760:	80 81       	ld	r24, Z
 762:	91 81       	ldd	r25, Z+1	; 0x01
 764:	89 2b       	or	r24, r25
 766:	21 f4       	brne	.+8      	; 0x770 <__vector_14+0x31c>
			OCR1B = 0;
 768:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 76c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		

		brojac_ext_interaptova =0;			//nuliram da bi brojanje bilo relativno
 770:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <brojac_ext_interaptova+0x1>
 774:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <brojac_ext_interaptova>
		
	
	}
	

 778:	ff 91       	pop	r31
 77a:	ef 91       	pop	r30
 77c:	bf 91       	pop	r27
 77e:	af 91       	pop	r26
 780:	9f 91       	pop	r25
 782:	8f 91       	pop	r24
 784:	7f 91       	pop	r23
 786:	6f 91       	pop	r22
 788:	5f 91       	pop	r21
 78a:	4f 91       	pop	r20
 78c:	3f 91       	pop	r19
 78e:	2f 91       	pop	r18
 790:	ff 90       	pop	r15
 792:	ef 90       	pop	r14
 794:	df 90       	pop	r13
 796:	cf 90       	pop	r12
 798:	bf 90       	pop	r11
 79a:	af 90       	pop	r10
 79c:	9f 90       	pop	r9
 79e:	8f 90       	pop	r8
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti

000007aa <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
	poslato=0;
 7b4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <poslato>
}
 7b8:	0f 90       	pop	r0
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	0f 90       	pop	r0
 7be:	1f 90       	pop	r1
 7c0:	18 95       	reti

000007c2 <__vector_18>:

ISR(USART_RX_vect)
{
 7c2:	1f 92       	push	r1
 7c4:	0f 92       	push	r0
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	0f 92       	push	r0
 7ca:	11 24       	eor	r1, r1
 7cc:	8f 93       	push	r24
 7ce:	ef 93       	push	r30
 7d0:	ff 93       	push	r31
	input_char=UDR0;
 7d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7d6:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 7da:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <buff_size>
 7de:	88 30       	cpi	r24, 0x08	; 8
 7e0:	98 f4       	brcc	.+38     	; 0x808 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 7e2:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <buff_size>
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <input_char>
 7ec:	ec 58       	subi	r30, 0x8C	; 140
 7ee:	fe 4f       	sbci	r31, 0xFE	; 254
 7f0:	80 83       	st	Z, r24
		buff_size++;
 7f2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <buff_size>
 7f6:	8f 5f       	subi	r24, 0xFF	; 255
 7f8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <buff_size>
		input_buffer[buff_size]='\0';
 7fc:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <buff_size>
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	ec 58       	subi	r30, 0x8C	; 140
 804:	fe 4f       	sbci	r31, 0xFE	; 254
 806:	10 82       	st	Z, r1
	}
}
 808:	ff 91       	pop	r31
 80a:	ef 91       	pop	r30
 80c:	8f 91       	pop	r24
 80e:	0f 90       	pop	r0
 810:	0f be       	out	0x3f, r0	; 63
 812:	0f 90       	pop	r0
 814:	1f 90       	pop	r1
 816:	18 95       	reti

00000818 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 818:	82 e0       	ldi	r24, 0x02	; 2
 81a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 81e:	88 ed       	ldi	r24, 0xD8	; 216
 820:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 824:	86 e0       	ldi	r24, 0x06	; 6
 826:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 82a:	8f ec       	ldi	r24, 0xCF	; 207
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 832:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 836:	08 95       	ret

00000838 <send_str>:
}

void send_str(unsigned char *str)
{
 838:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 83a:	90 81       	ld	r25, Z
 83c:	99 23       	and	r25, r25
 83e:	71 f0       	breq	.+28     	; 0x85c <send_str+0x24>
 840:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 842:	a6 ec       	ldi	r26, 0xC6	; 198
 844:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 846:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 848:	9c 93       	st	X, r25
		poslato=1;
 84a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <poslato>
		while (poslato);
 84e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <poslato>
 852:	91 11       	cpse	r25, r1
 854:	fc cf       	rjmp	.-8      	; 0x84e <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 856:	91 91       	ld	r25, Z+
 858:	91 11       	cpse	r25, r1
 85a:	f6 cf       	rjmp	.-20     	; 0x848 <send_str+0x10>
 85c:	08 95       	ret

0000085e <__subsf3>:
 85e:	50 58       	subi	r21, 0x80	; 128

00000860 <__addsf3>:
 860:	bb 27       	eor	r27, r27
 862:	aa 27       	eor	r26, r26
 864:	0e 94 47 04 	call	0x88e	; 0x88e <__addsf3x>
 868:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_round>
 86c:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_pscA>
 870:	38 f0       	brcs	.+14     	; 0x880 <__addsf3+0x20>
 872:	0e 94 91 05 	call	0xb22	; 0xb22 <__fp_pscB>
 876:	20 f0       	brcs	.+8      	; 0x880 <__addsf3+0x20>
 878:	39 f4       	brne	.+14     	; 0x888 <__addsf3+0x28>
 87a:	9f 3f       	cpi	r25, 0xFF	; 255
 87c:	19 f4       	brne	.+6      	; 0x884 <__addsf3+0x24>
 87e:	26 f4       	brtc	.+8      	; 0x888 <__addsf3+0x28>
 880:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_nan>
 884:	0e f4       	brtc	.+2      	; 0x888 <__addsf3+0x28>
 886:	e0 95       	com	r30
 888:	e7 fb       	bst	r30, 7
 88a:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_inf>

0000088e <__addsf3x>:
 88e:	e9 2f       	mov	r30, r25
 890:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_split3>
 894:	58 f3       	brcs	.-42     	; 0x86c <__addsf3+0xc>
 896:	ba 17       	cp	r27, r26
 898:	62 07       	cpc	r22, r18
 89a:	73 07       	cpc	r23, r19
 89c:	84 07       	cpc	r24, r20
 89e:	95 07       	cpc	r25, r21
 8a0:	20 f0       	brcs	.+8      	; 0x8aa <__addsf3x+0x1c>
 8a2:	79 f4       	brne	.+30     	; 0x8c2 <__addsf3x+0x34>
 8a4:	a6 f5       	brtc	.+104    	; 0x90e <__stack+0xf>
 8a6:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_zero>
 8aa:	0e f4       	brtc	.+2      	; 0x8ae <__addsf3x+0x20>
 8ac:	e0 95       	com	r30
 8ae:	0b 2e       	mov	r0, r27
 8b0:	ba 2f       	mov	r27, r26
 8b2:	a0 2d       	mov	r26, r0
 8b4:	0b 01       	movw	r0, r22
 8b6:	b9 01       	movw	r22, r18
 8b8:	90 01       	movw	r18, r0
 8ba:	0c 01       	movw	r0, r24
 8bc:	ca 01       	movw	r24, r20
 8be:	a0 01       	movw	r20, r0
 8c0:	11 24       	eor	r1, r1
 8c2:	ff 27       	eor	r31, r31
 8c4:	59 1b       	sub	r21, r25
 8c6:	99 f0       	breq	.+38     	; 0x8ee <__addsf3x+0x60>
 8c8:	59 3f       	cpi	r21, 0xF9	; 249
 8ca:	50 f4       	brcc	.+20     	; 0x8e0 <__addsf3x+0x52>
 8cc:	50 3e       	cpi	r21, 0xE0	; 224
 8ce:	68 f1       	brcs	.+90     	; 0x92a <__stack+0x2b>
 8d0:	1a 16       	cp	r1, r26
 8d2:	f0 40       	sbci	r31, 0x00	; 0
 8d4:	a2 2f       	mov	r26, r18
 8d6:	23 2f       	mov	r18, r19
 8d8:	34 2f       	mov	r19, r20
 8da:	44 27       	eor	r20, r20
 8dc:	58 5f       	subi	r21, 0xF8	; 248
 8de:	f3 cf       	rjmp	.-26     	; 0x8c6 <__addsf3x+0x38>
 8e0:	46 95       	lsr	r20
 8e2:	37 95       	ror	r19
 8e4:	27 95       	ror	r18
 8e6:	a7 95       	ror	r26
 8e8:	f0 40       	sbci	r31, 0x00	; 0
 8ea:	53 95       	inc	r21
 8ec:	c9 f7       	brne	.-14     	; 0x8e0 <__addsf3x+0x52>
 8ee:	7e f4       	brtc	.+30     	; 0x90e <__stack+0xf>
 8f0:	1f 16       	cp	r1, r31
 8f2:	ba 0b       	sbc	r27, r26
 8f4:	62 0b       	sbc	r22, r18
 8f6:	73 0b       	sbc	r23, r19
 8f8:	84 0b       	sbc	r24, r20
 8fa:	ba f0       	brmi	.+46     	; 0x92a <__stack+0x2b>
 8fc:	91 50       	subi	r25, 0x01	; 1
 8fe:	a1 f0       	breq	.+40     	; 0x928 <__stack+0x29>
 900:	ff 0f       	add	r31, r31
 902:	bb 1f       	adc	r27, r27
 904:	66 1f       	adc	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	c2 f7       	brpl	.-16     	; 0x8fc <__addsf3x+0x6e>
 90c:	0e c0       	rjmp	.+28     	; 0x92a <__stack+0x2b>
 90e:	ba 0f       	add	r27, r26
 910:	62 1f       	adc	r22, r18
 912:	73 1f       	adc	r23, r19
 914:	84 1f       	adc	r24, r20
 916:	48 f4       	brcc	.+18     	; 0x92a <__stack+0x2b>
 918:	87 95       	ror	r24
 91a:	77 95       	ror	r23
 91c:	67 95       	ror	r22
 91e:	b7 95       	ror	r27
 920:	f7 95       	ror	r31
 922:	9e 3f       	cpi	r25, 0xFE	; 254
 924:	08 f0       	brcs	.+2      	; 0x928 <__stack+0x29>
 926:	b0 cf       	rjmp	.-160    	; 0x888 <__addsf3+0x28>
 928:	93 95       	inc	r25
 92a:	88 0f       	add	r24, r24
 92c:	08 f0       	brcs	.+2      	; 0x930 <__stack+0x31>
 92e:	99 27       	eor	r25, r25
 930:	ee 0f       	add	r30, r30
 932:	97 95       	ror	r25
 934:	87 95       	ror	r24
 936:	08 95       	ret

00000938 <__divsf3>:
 938:	0e 94 b0 04 	call	0x960	; 0x960 <__divsf3x>
 93c:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_round>
 940:	0e 94 91 05 	call	0xb22	; 0xb22 <__fp_pscB>
 944:	58 f0       	brcs	.+22     	; 0x95c <__divsf3+0x24>
 946:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_pscA>
 94a:	40 f0       	brcs	.+16     	; 0x95c <__divsf3+0x24>
 94c:	29 f4       	brne	.+10     	; 0x958 <__divsf3+0x20>
 94e:	5f 3f       	cpi	r21, 0xFF	; 255
 950:	29 f0       	breq	.+10     	; 0x95c <__divsf3+0x24>
 952:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_inf>
 956:	51 11       	cpse	r21, r1
 958:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_szero>
 95c:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_nan>

00000960 <__divsf3x>:
 960:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_split3>
 964:	68 f3       	brcs	.-38     	; 0x940 <__divsf3+0x8>

00000966 <__divsf3_pse>:
 966:	99 23       	and	r25, r25
 968:	b1 f3       	breq	.-20     	; 0x956 <__divsf3+0x1e>
 96a:	55 23       	and	r21, r21
 96c:	91 f3       	breq	.-28     	; 0x952 <__divsf3+0x1a>
 96e:	95 1b       	sub	r25, r21
 970:	55 0b       	sbc	r21, r21
 972:	bb 27       	eor	r27, r27
 974:	aa 27       	eor	r26, r26
 976:	62 17       	cp	r22, r18
 978:	73 07       	cpc	r23, r19
 97a:	84 07       	cpc	r24, r20
 97c:	38 f0       	brcs	.+14     	; 0x98c <__divsf3_pse+0x26>
 97e:	9f 5f       	subi	r25, 0xFF	; 255
 980:	5f 4f       	sbci	r21, 0xFF	; 255
 982:	22 0f       	add	r18, r18
 984:	33 1f       	adc	r19, r19
 986:	44 1f       	adc	r20, r20
 988:	aa 1f       	adc	r26, r26
 98a:	a9 f3       	breq	.-22     	; 0x976 <__divsf3_pse+0x10>
 98c:	35 d0       	rcall	.+106    	; 0x9f8 <__divsf3_pse+0x92>
 98e:	0e 2e       	mov	r0, r30
 990:	3a f0       	brmi	.+14     	; 0x9a0 <__divsf3_pse+0x3a>
 992:	e0 e8       	ldi	r30, 0x80	; 128
 994:	32 d0       	rcall	.+100    	; 0x9fa <__divsf3_pse+0x94>
 996:	91 50       	subi	r25, 0x01	; 1
 998:	50 40       	sbci	r21, 0x00	; 0
 99a:	e6 95       	lsr	r30
 99c:	00 1c       	adc	r0, r0
 99e:	ca f7       	brpl	.-14     	; 0x992 <__divsf3_pse+0x2c>
 9a0:	2b d0       	rcall	.+86     	; 0x9f8 <__divsf3_pse+0x92>
 9a2:	fe 2f       	mov	r31, r30
 9a4:	29 d0       	rcall	.+82     	; 0x9f8 <__divsf3_pse+0x92>
 9a6:	66 0f       	add	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 1f       	adc	r24, r24
 9ac:	bb 1f       	adc	r27, r27
 9ae:	26 17       	cp	r18, r22
 9b0:	37 07       	cpc	r19, r23
 9b2:	48 07       	cpc	r20, r24
 9b4:	ab 07       	cpc	r26, r27
 9b6:	b0 e8       	ldi	r27, 0x80	; 128
 9b8:	09 f0       	breq	.+2      	; 0x9bc <__divsf3_pse+0x56>
 9ba:	bb 0b       	sbc	r27, r27
 9bc:	80 2d       	mov	r24, r0
 9be:	bf 01       	movw	r22, r30
 9c0:	ff 27       	eor	r31, r31
 9c2:	93 58       	subi	r25, 0x83	; 131
 9c4:	5f 4f       	sbci	r21, 0xFF	; 255
 9c6:	3a f0       	brmi	.+14     	; 0x9d6 <__divsf3_pse+0x70>
 9c8:	9e 3f       	cpi	r25, 0xFE	; 254
 9ca:	51 05       	cpc	r21, r1
 9cc:	78 f0       	brcs	.+30     	; 0x9ec <__divsf3_pse+0x86>
 9ce:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_inf>
 9d2:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_szero>
 9d6:	5f 3f       	cpi	r21, 0xFF	; 255
 9d8:	e4 f3       	brlt	.-8      	; 0x9d2 <__divsf3_pse+0x6c>
 9da:	98 3e       	cpi	r25, 0xE8	; 232
 9dc:	d4 f3       	brlt	.-12     	; 0x9d2 <__divsf3_pse+0x6c>
 9de:	86 95       	lsr	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	b7 95       	ror	r27
 9e6:	f7 95       	ror	r31
 9e8:	9f 5f       	subi	r25, 0xFF	; 255
 9ea:	c9 f7       	brne	.-14     	; 0x9de <__divsf3_pse+0x78>
 9ec:	88 0f       	add	r24, r24
 9ee:	91 1d       	adc	r25, r1
 9f0:	96 95       	lsr	r25
 9f2:	87 95       	ror	r24
 9f4:	97 f9       	bld	r25, 7
 9f6:	08 95       	ret
 9f8:	e1 e0       	ldi	r30, 0x01	; 1
 9fa:	66 0f       	add	r22, r22
 9fc:	77 1f       	adc	r23, r23
 9fe:	88 1f       	adc	r24, r24
 a00:	bb 1f       	adc	r27, r27
 a02:	62 17       	cp	r22, r18
 a04:	73 07       	cpc	r23, r19
 a06:	84 07       	cpc	r24, r20
 a08:	ba 07       	cpc	r27, r26
 a0a:	20 f0       	brcs	.+8      	; 0xa14 <__divsf3_pse+0xae>
 a0c:	62 1b       	sub	r22, r18
 a0e:	73 0b       	sbc	r23, r19
 a10:	84 0b       	sbc	r24, r20
 a12:	ba 0b       	sbc	r27, r26
 a14:	ee 1f       	adc	r30, r30
 a16:	88 f7       	brcc	.-30     	; 0x9fa <__divsf3_pse+0x94>
 a18:	e0 95       	com	r30
 a1a:	08 95       	ret

00000a1c <__fixsfsi>:
 a1c:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fixunssfsi>
 a20:	68 94       	set
 a22:	b1 11       	cpse	r27, r1
 a24:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_szero>
 a28:	08 95       	ret

00000a2a <__fixunssfsi>:
 a2a:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_splitA>
 a2e:	88 f0       	brcs	.+34     	; 0xa52 <__fixunssfsi+0x28>
 a30:	9f 57       	subi	r25, 0x7F	; 127
 a32:	98 f0       	brcs	.+38     	; 0xa5a <__fixunssfsi+0x30>
 a34:	b9 2f       	mov	r27, r25
 a36:	99 27       	eor	r25, r25
 a38:	b7 51       	subi	r27, 0x17	; 23
 a3a:	b0 f0       	brcs	.+44     	; 0xa68 <__fixunssfsi+0x3e>
 a3c:	e1 f0       	breq	.+56     	; 0xa76 <__fixunssfsi+0x4c>
 a3e:	66 0f       	add	r22, r22
 a40:	77 1f       	adc	r23, r23
 a42:	88 1f       	adc	r24, r24
 a44:	99 1f       	adc	r25, r25
 a46:	1a f0       	brmi	.+6      	; 0xa4e <__fixunssfsi+0x24>
 a48:	ba 95       	dec	r27
 a4a:	c9 f7       	brne	.-14     	; 0xa3e <__fixunssfsi+0x14>
 a4c:	14 c0       	rjmp	.+40     	; 0xa76 <__fixunssfsi+0x4c>
 a4e:	b1 30       	cpi	r27, 0x01	; 1
 a50:	91 f0       	breq	.+36     	; 0xa76 <__fixunssfsi+0x4c>
 a52:	0e 94 cb 05 	call	0xb96	; 0xb96 <__fp_zero>
 a56:	b1 e0       	ldi	r27, 0x01	; 1
 a58:	08 95       	ret
 a5a:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_zero>
 a5e:	67 2f       	mov	r22, r23
 a60:	78 2f       	mov	r23, r24
 a62:	88 27       	eor	r24, r24
 a64:	b8 5f       	subi	r27, 0xF8	; 248
 a66:	39 f0       	breq	.+14     	; 0xa76 <__fixunssfsi+0x4c>
 a68:	b9 3f       	cpi	r27, 0xF9	; 249
 a6a:	cc f3       	brlt	.-14     	; 0xa5e <__fixunssfsi+0x34>
 a6c:	86 95       	lsr	r24
 a6e:	77 95       	ror	r23
 a70:	67 95       	ror	r22
 a72:	b3 95       	inc	r27
 a74:	d9 f7       	brne	.-10     	; 0xa6c <__fixunssfsi+0x42>
 a76:	3e f4       	brtc	.+14     	; 0xa86 <__fixunssfsi+0x5c>
 a78:	90 95       	com	r25
 a7a:	80 95       	com	r24
 a7c:	70 95       	com	r23
 a7e:	61 95       	neg	r22
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	08 95       	ret

00000a88 <__floatunsisf>:
 a88:	e8 94       	clt
 a8a:	09 c0       	rjmp	.+18     	; 0xa9e <__floatsisf+0x12>

00000a8c <__floatsisf>:
 a8c:	97 fb       	bst	r25, 7
 a8e:	3e f4       	brtc	.+14     	; 0xa9e <__floatsisf+0x12>
 a90:	90 95       	com	r25
 a92:	80 95       	com	r24
 a94:	70 95       	com	r23
 a96:	61 95       	neg	r22
 a98:	7f 4f       	sbci	r23, 0xFF	; 255
 a9a:	8f 4f       	sbci	r24, 0xFF	; 255
 a9c:	9f 4f       	sbci	r25, 0xFF	; 255
 a9e:	99 23       	and	r25, r25
 aa0:	a9 f0       	breq	.+42     	; 0xacc <__floatsisf+0x40>
 aa2:	f9 2f       	mov	r31, r25
 aa4:	96 e9       	ldi	r25, 0x96	; 150
 aa6:	bb 27       	eor	r27, r27
 aa8:	93 95       	inc	r25
 aaa:	f6 95       	lsr	r31
 aac:	87 95       	ror	r24
 aae:	77 95       	ror	r23
 ab0:	67 95       	ror	r22
 ab2:	b7 95       	ror	r27
 ab4:	f1 11       	cpse	r31, r1
 ab6:	f8 cf       	rjmp	.-16     	; 0xaa8 <__floatsisf+0x1c>
 ab8:	fa f4       	brpl	.+62     	; 0xaf8 <__floatsisf+0x6c>
 aba:	bb 0f       	add	r27, r27
 abc:	11 f4       	brne	.+4      	; 0xac2 <__floatsisf+0x36>
 abe:	60 ff       	sbrs	r22, 0
 ac0:	1b c0       	rjmp	.+54     	; 0xaf8 <__floatsisf+0x6c>
 ac2:	6f 5f       	subi	r22, 0xFF	; 255
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	8f 4f       	sbci	r24, 0xFF	; 255
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	16 c0       	rjmp	.+44     	; 0xaf8 <__floatsisf+0x6c>
 acc:	88 23       	and	r24, r24
 ace:	11 f0       	breq	.+4      	; 0xad4 <__floatsisf+0x48>
 ad0:	96 e9       	ldi	r25, 0x96	; 150
 ad2:	11 c0       	rjmp	.+34     	; 0xaf6 <__floatsisf+0x6a>
 ad4:	77 23       	and	r23, r23
 ad6:	21 f0       	breq	.+8      	; 0xae0 <__floatsisf+0x54>
 ad8:	9e e8       	ldi	r25, 0x8E	; 142
 ada:	87 2f       	mov	r24, r23
 adc:	76 2f       	mov	r23, r22
 ade:	05 c0       	rjmp	.+10     	; 0xaea <__floatsisf+0x5e>
 ae0:	66 23       	and	r22, r22
 ae2:	71 f0       	breq	.+28     	; 0xb00 <__floatsisf+0x74>
 ae4:	96 e8       	ldi	r25, 0x86	; 134
 ae6:	86 2f       	mov	r24, r22
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	2a f0       	brmi	.+10     	; 0xaf8 <__floatsisf+0x6c>
 aee:	9a 95       	dec	r25
 af0:	66 0f       	add	r22, r22
 af2:	77 1f       	adc	r23, r23
 af4:	88 1f       	adc	r24, r24
 af6:	da f7       	brpl	.-10     	; 0xaee <__floatsisf+0x62>
 af8:	88 0f       	add	r24, r24
 afa:	96 95       	lsr	r25
 afc:	87 95       	ror	r24
 afe:	97 f9       	bld	r25, 7
 b00:	08 95       	ret

00000b02 <__fp_inf>:
 b02:	97 f9       	bld	r25, 7
 b04:	9f 67       	ori	r25, 0x7F	; 127
 b06:	80 e8       	ldi	r24, 0x80	; 128
 b08:	70 e0       	ldi	r23, 0x00	; 0
 b0a:	60 e0       	ldi	r22, 0x00	; 0
 b0c:	08 95       	ret

00000b0e <__fp_nan>:
 b0e:	9f ef       	ldi	r25, 0xFF	; 255
 b10:	80 ec       	ldi	r24, 0xC0	; 192
 b12:	08 95       	ret

00000b14 <__fp_pscA>:
 b14:	00 24       	eor	r0, r0
 b16:	0a 94       	dec	r0
 b18:	16 16       	cp	r1, r22
 b1a:	17 06       	cpc	r1, r23
 b1c:	18 06       	cpc	r1, r24
 b1e:	09 06       	cpc	r0, r25
 b20:	08 95       	ret

00000b22 <__fp_pscB>:
 b22:	00 24       	eor	r0, r0
 b24:	0a 94       	dec	r0
 b26:	12 16       	cp	r1, r18
 b28:	13 06       	cpc	r1, r19
 b2a:	14 06       	cpc	r1, r20
 b2c:	05 06       	cpc	r0, r21
 b2e:	08 95       	ret

00000b30 <__fp_round>:
 b30:	09 2e       	mov	r0, r25
 b32:	03 94       	inc	r0
 b34:	00 0c       	add	r0, r0
 b36:	11 f4       	brne	.+4      	; 0xb3c <__fp_round+0xc>
 b38:	88 23       	and	r24, r24
 b3a:	52 f0       	brmi	.+20     	; 0xb50 <__fp_round+0x20>
 b3c:	bb 0f       	add	r27, r27
 b3e:	40 f4       	brcc	.+16     	; 0xb50 <__fp_round+0x20>
 b40:	bf 2b       	or	r27, r31
 b42:	11 f4       	brne	.+4      	; 0xb48 <__fp_round+0x18>
 b44:	60 ff       	sbrs	r22, 0
 b46:	04 c0       	rjmp	.+8      	; 0xb50 <__fp_round+0x20>
 b48:	6f 5f       	subi	r22, 0xFF	; 255
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	08 95       	ret

00000b52 <__fp_split3>:
 b52:	57 fd       	sbrc	r21, 7
 b54:	90 58       	subi	r25, 0x80	; 128
 b56:	44 0f       	add	r20, r20
 b58:	55 1f       	adc	r21, r21
 b5a:	59 f0       	breq	.+22     	; 0xb72 <__fp_splitA+0x10>
 b5c:	5f 3f       	cpi	r21, 0xFF	; 255
 b5e:	71 f0       	breq	.+28     	; 0xb7c <__fp_splitA+0x1a>
 b60:	47 95       	ror	r20

00000b62 <__fp_splitA>:
 b62:	88 0f       	add	r24, r24
 b64:	97 fb       	bst	r25, 7
 b66:	99 1f       	adc	r25, r25
 b68:	61 f0       	breq	.+24     	; 0xb82 <__fp_splitA+0x20>
 b6a:	9f 3f       	cpi	r25, 0xFF	; 255
 b6c:	79 f0       	breq	.+30     	; 0xb8c <__fp_splitA+0x2a>
 b6e:	87 95       	ror	r24
 b70:	08 95       	ret
 b72:	12 16       	cp	r1, r18
 b74:	13 06       	cpc	r1, r19
 b76:	14 06       	cpc	r1, r20
 b78:	55 1f       	adc	r21, r21
 b7a:	f2 cf       	rjmp	.-28     	; 0xb60 <__fp_split3+0xe>
 b7c:	46 95       	lsr	r20
 b7e:	f1 df       	rcall	.-30     	; 0xb62 <__fp_splitA>
 b80:	08 c0       	rjmp	.+16     	; 0xb92 <__fp_splitA+0x30>
 b82:	16 16       	cp	r1, r22
 b84:	17 06       	cpc	r1, r23
 b86:	18 06       	cpc	r1, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	f1 cf       	rjmp	.-30     	; 0xb6e <__fp_splitA+0xc>
 b8c:	86 95       	lsr	r24
 b8e:	71 05       	cpc	r23, r1
 b90:	61 05       	cpc	r22, r1
 b92:	08 94       	sec
 b94:	08 95       	ret

00000b96 <__fp_zero>:
 b96:	e8 94       	clt

00000b98 <__fp_szero>:
 b98:	bb 27       	eor	r27, r27
 b9a:	66 27       	eor	r22, r22
 b9c:	77 27       	eor	r23, r23
 b9e:	cb 01       	movw	r24, r22
 ba0:	97 f9       	bld	r25, 7
 ba2:	08 95       	ret

00000ba4 <__mulsf3>:
 ba4:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3x>
 ba8:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_round>
 bac:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_pscA>
 bb0:	38 f0       	brcs	.+14     	; 0xbc0 <__mulsf3+0x1c>
 bb2:	0e 94 91 05 	call	0xb22	; 0xb22 <__fp_pscB>
 bb6:	20 f0       	brcs	.+8      	; 0xbc0 <__mulsf3+0x1c>
 bb8:	95 23       	and	r25, r21
 bba:	11 f0       	breq	.+4      	; 0xbc0 <__mulsf3+0x1c>
 bbc:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_inf>
 bc0:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_nan>
 bc4:	11 24       	eor	r1, r1
 bc6:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_szero>

00000bca <__mulsf3x>:
 bca:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_split3>
 bce:	70 f3       	brcs	.-36     	; 0xbac <__mulsf3+0x8>

00000bd0 <__mulsf3_pse>:
 bd0:	95 9f       	mul	r25, r21
 bd2:	c1 f3       	breq	.-16     	; 0xbc4 <__mulsf3+0x20>
 bd4:	95 0f       	add	r25, r21
 bd6:	50 e0       	ldi	r21, 0x00	; 0
 bd8:	55 1f       	adc	r21, r21
 bda:	62 9f       	mul	r22, r18
 bdc:	f0 01       	movw	r30, r0
 bde:	72 9f       	mul	r23, r18
 be0:	bb 27       	eor	r27, r27
 be2:	f0 0d       	add	r31, r0
 be4:	b1 1d       	adc	r27, r1
 be6:	63 9f       	mul	r22, r19
 be8:	aa 27       	eor	r26, r26
 bea:	f0 0d       	add	r31, r0
 bec:	b1 1d       	adc	r27, r1
 bee:	aa 1f       	adc	r26, r26
 bf0:	64 9f       	mul	r22, r20
 bf2:	66 27       	eor	r22, r22
 bf4:	b0 0d       	add	r27, r0
 bf6:	a1 1d       	adc	r26, r1
 bf8:	66 1f       	adc	r22, r22
 bfa:	82 9f       	mul	r24, r18
 bfc:	22 27       	eor	r18, r18
 bfe:	b0 0d       	add	r27, r0
 c00:	a1 1d       	adc	r26, r1
 c02:	62 1f       	adc	r22, r18
 c04:	73 9f       	mul	r23, r19
 c06:	b0 0d       	add	r27, r0
 c08:	a1 1d       	adc	r26, r1
 c0a:	62 1f       	adc	r22, r18
 c0c:	83 9f       	mul	r24, r19
 c0e:	a0 0d       	add	r26, r0
 c10:	61 1d       	adc	r22, r1
 c12:	22 1f       	adc	r18, r18
 c14:	74 9f       	mul	r23, r20
 c16:	33 27       	eor	r19, r19
 c18:	a0 0d       	add	r26, r0
 c1a:	61 1d       	adc	r22, r1
 c1c:	23 1f       	adc	r18, r19
 c1e:	84 9f       	mul	r24, r20
 c20:	60 0d       	add	r22, r0
 c22:	21 1d       	adc	r18, r1
 c24:	82 2f       	mov	r24, r18
 c26:	76 2f       	mov	r23, r22
 c28:	6a 2f       	mov	r22, r26
 c2a:	11 24       	eor	r1, r1
 c2c:	9f 57       	subi	r25, 0x7F	; 127
 c2e:	50 40       	sbci	r21, 0x00	; 0
 c30:	9a f0       	brmi	.+38     	; 0xc58 <__mulsf3_pse+0x88>
 c32:	f1 f0       	breq	.+60     	; 0xc70 <__mulsf3_pse+0xa0>
 c34:	88 23       	and	r24, r24
 c36:	4a f0       	brmi	.+18     	; 0xc4a <__mulsf3_pse+0x7a>
 c38:	ee 0f       	add	r30, r30
 c3a:	ff 1f       	adc	r31, r31
 c3c:	bb 1f       	adc	r27, r27
 c3e:	66 1f       	adc	r22, r22
 c40:	77 1f       	adc	r23, r23
 c42:	88 1f       	adc	r24, r24
 c44:	91 50       	subi	r25, 0x01	; 1
 c46:	50 40       	sbci	r21, 0x00	; 0
 c48:	a9 f7       	brne	.-22     	; 0xc34 <__mulsf3_pse+0x64>
 c4a:	9e 3f       	cpi	r25, 0xFE	; 254
 c4c:	51 05       	cpc	r21, r1
 c4e:	80 f0       	brcs	.+32     	; 0xc70 <__mulsf3_pse+0xa0>
 c50:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_inf>
 c54:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_szero>
 c58:	5f 3f       	cpi	r21, 0xFF	; 255
 c5a:	e4 f3       	brlt	.-8      	; 0xc54 <__mulsf3_pse+0x84>
 c5c:	98 3e       	cpi	r25, 0xE8	; 232
 c5e:	d4 f3       	brlt	.-12     	; 0xc54 <__mulsf3_pse+0x84>
 c60:	86 95       	lsr	r24
 c62:	77 95       	ror	r23
 c64:	67 95       	ror	r22
 c66:	b7 95       	ror	r27
 c68:	f7 95       	ror	r31
 c6a:	e7 95       	ror	r30
 c6c:	9f 5f       	subi	r25, 0xFF	; 255
 c6e:	c1 f7       	brne	.-16     	; 0xc60 <__mulsf3_pse+0x90>
 c70:	fe 2b       	or	r31, r30
 c72:	88 0f       	add	r24, r24
 c74:	91 1d       	adc	r25, r1
 c76:	96 95       	lsr	r25
 c78:	87 95       	ror	r24
 c7a:	97 f9       	bld	r25, 7
 c7c:	08 95       	ret

00000c7e <__itoa_ncheck>:
 c7e:	bb 27       	eor	r27, r27
 c80:	4a 30       	cpi	r20, 0x0A	; 10
 c82:	31 f4       	brne	.+12     	; 0xc90 <__itoa_ncheck+0x12>
 c84:	99 23       	and	r25, r25
 c86:	22 f4       	brpl	.+8      	; 0xc90 <__itoa_ncheck+0x12>
 c88:	bd e2       	ldi	r27, 0x2D	; 45
 c8a:	90 95       	com	r25
 c8c:	81 95       	neg	r24
 c8e:	9f 4f       	sbci	r25, 0xFF	; 255
 c90:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__utoa_common>

00000c94 <__utoa_ncheck>:
 c94:	bb 27       	eor	r27, r27

00000c96 <__utoa_common>:
 c96:	fb 01       	movw	r30, r22
 c98:	55 27       	eor	r21, r21
 c9a:	aa 27       	eor	r26, r26
 c9c:	88 0f       	add	r24, r24
 c9e:	99 1f       	adc	r25, r25
 ca0:	aa 1f       	adc	r26, r26
 ca2:	a4 17       	cp	r26, r20
 ca4:	10 f0       	brcs	.+4      	; 0xcaa <__utoa_common+0x14>
 ca6:	a4 1b       	sub	r26, r20
 ca8:	83 95       	inc	r24
 caa:	50 51       	subi	r21, 0x10	; 16
 cac:	b9 f7       	brne	.-18     	; 0xc9c <__utoa_common+0x6>
 cae:	a0 5d       	subi	r26, 0xD0	; 208
 cb0:	aa 33       	cpi	r26, 0x3A	; 58
 cb2:	08 f0       	brcs	.+2      	; 0xcb6 <__utoa_common+0x20>
 cb4:	a9 5d       	subi	r26, 0xD9	; 217
 cb6:	a1 93       	st	Z+, r26
 cb8:	00 97       	sbiw	r24, 0x00	; 0
 cba:	79 f7       	brne	.-34     	; 0xc9a <__utoa_common+0x4>
 cbc:	b1 11       	cpse	r27, r1
 cbe:	b1 93       	st	Z+, r27
 cc0:	11 92       	st	Z+, r1
 cc2:	cb 01       	movw	r24, r22
 cc4:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <strrev>

00000cc8 <strrev>:
 cc8:	dc 01       	movw	r26, r24
 cca:	fc 01       	movw	r30, r24
 ccc:	67 2f       	mov	r22, r23
 cce:	71 91       	ld	r23, Z+
 cd0:	77 23       	and	r23, r23
 cd2:	e1 f7       	brne	.-8      	; 0xccc <strrev+0x4>
 cd4:	32 97       	sbiw	r30, 0x02	; 2
 cd6:	04 c0       	rjmp	.+8      	; 0xce0 <strrev+0x18>
 cd8:	7c 91       	ld	r23, X
 cda:	6d 93       	st	X+, r22
 cdc:	70 83       	st	Z, r23
 cde:	62 91       	ld	r22, -Z
 ce0:	ae 17       	cp	r26, r30
 ce2:	bf 07       	cpc	r27, r31
 ce4:	c8 f3       	brcs	.-14     	; 0xcd8 <strrev+0x10>
 ce6:	08 95       	ret

00000ce8 <_exit>:
 ce8:	f8 94       	cli

00000cea <__stop_program>:
 cea:	ff cf       	rjmp	.-2      	; 0xcea <__stop_program>
