
Kontrola motora H mostom i enkoderom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000cfe  00000d92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800132  00800132  00000dc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f78  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fe  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000912  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  000031ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ba  00000000  00000000  000033e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b9  00000000  00000000  000039a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003d5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__vector_20>
  54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 38       	cpi	r26, 0x84	; 132
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
char bafer[30];


int main(void)
{
		DDRB |= 1<<PORTB5;	//dig13, radi provere frekvencije; izlaz
  a6:	25 9a       	sbi	0x04, 5	; 4

		ADC_init();
  a8:	0e 94 9d 00 	call	0x13a	; 0x13a <ADC_init>
		pwm_init();
  ac:	0e 94 09 02 	call	0x412	; 0x412 <pwm_init>
		uart_init();
  b0:	0e 94 15 04 	call	0x82a	; 0x82a <uart_init>
		eksternInt_init();
  b4:	0e 94 bc 01 	call	0x378	; 0x378 <eksternInt_init>
		tajmer0_init();
  b8:	0e 94 2a 02 	call	0x454	; 0x454 <tajmer0_init>
		
		sei();
  bc:	78 94       	sei
	
	
	send_str("Start \n");
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 25 04 	call	0x84a	; 0x84a <send_str>
			*/
			
			
			
			send_str("ad[0]:");
			itoa( adc_res[0] , bafer, 10);
  c6:	c6 e3       	ldi	r28, 0x36	; 54
  c8:	d1 e0       	ldi	r29, 0x01	; 1
	
    while (1) 
    {	
		
		
		if(flag_prekid_10ms == 1)		//slanje putem UART Tx na svakih 20ms. Podesava se u tajmer.c fajlu
  ca:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <flag_prekid_10ms>
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x24>
		{
			flag_prekid_10ms = 0;
  d2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <flag_prekid_10ms>
			send_str("\n");
			*/
			
			
			
			send_str("ad[0]:");
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 25 04 	call	0x84a	; 0x84a <send_str>
			itoa( adc_res[0] , bafer, 10);
  de:	88 81       	ld	r24, Y
  e0:	99 81       	ldd	r25, Y+1	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e2:	4a e0       	ldi	r20, 0x0A	; 10
  e4:	66 e5       	ldi	r22, 0x56	; 86
  e6:	71 e0       	ldi	r23, 0x01	; 1
  e8:	0e 94 48 06 	call	0xc90	; 0xc90 <__itoa_ncheck>
			send_str(bafer);
  ec:	86 e5       	ldi	r24, 0x56	; 86
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 25 04 	call	0x84a	; 0x84a <send_str>
			
			
			send_str("  ad[1]:");
  f4:	8f e1       	ldi	r24, 0x1F	; 31
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 25 04 	call	0x84a	; 0x84a <send_str>
			itoa( adc_res[1] , bafer, 10);
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	4a e0       	ldi	r20, 0x0A	; 10
 102:	66 e5       	ldi	r22, 0x56	; 86
 104:	71 e0       	ldi	r23, 0x01	; 1
 106:	0e 94 48 06 	call	0xc90	; 0xc90 <__itoa_ncheck>
			send_str(bafer);
 10a:	86 e5       	ldi	r24, 0x56	; 86
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 25 04 	call	0x84a	; 0x84a <send_str>
			
			send_str("  ad[2]:");
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 25 04 	call	0x84a	; 0x84a <send_str>
			itoa( adc_res[2] , bafer, 10);
 11a:	8c 81       	ldd	r24, Y+4	; 0x04
 11c:	9d 81       	ldd	r25, Y+5	; 0x05
 11e:	4a e0       	ldi	r20, 0x0A	; 10
 120:	66 e5       	ldi	r22, 0x56	; 86
 122:	71 e0       	ldi	r23, 0x01	; 1
 124:	0e 94 48 06 	call	0xc90	; 0xc90 <__itoa_ncheck>
			send_str(bafer);
 128:	86 e5       	ldi	r24, 0x56	; 86
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 25 04 	call	0x84a	; 0x84a <send_str>
			
			
			send_str("\n");
 130:	86 e1       	ldi	r24, 0x16	; 22
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 25 04 	call	0x84a	; 0x84a <send_str>
 138:	c8 cf       	rjmp	.-112    	; 0xca <main+0x24>

0000013a <ADC_init>:

void ADC_init()
{
	
	
	PRR = 0;					//power reduction off
 13a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = (1<<REFS0);				//5V referentni napon, ulazni pin A0
 13e:	80 e4       	ldi	r24, 0x40	; 64
 140:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101111;			//ADC enable, auto trigger enable, ADC conv. complete interrupt enable, 128 prescaler
 144:	8f ee       	ldi	r24, 0xEF	; 239
 146:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b11;					//auto trigger - Timer0 compare match A. Startuje AD konverziju na svaki Timer interrupt
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
 150:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <__data_end+0x1>
 154:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
 158:	08 95       	ret

0000015a <__vector_21>:
	
}

ISR(ADC_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//ADCL mora biti prvi procitan
	adc_low = (int)ADCL;    //koriste se dva 8-bit registra jer je rezultat AD konverzije 10-bitan
 180:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <adc_low+0x1>
 18a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <adc_low>
	adc_high = (int)ADCH;
 18e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <adc_high+0x1>
 198:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <adc_high>
	
		/**stapam rezultate iz dva registra u jednu promenljivu na ovaj nacin**/
		/**rezultat ad konverzije je 10-bit-an, tj. od 0 do 1023**/
		if(adc_high==0)
 19c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <adc_high>
 1a0:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <adc_high+0x1>
 1a4:	89 2b       	or	r24, r25
 1a6:	79 f4       	brne	.+30     	; 0x1c6 <__vector_21+0x6c>
			adc_res[ad_kanal] = adc_low;
 1a8:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <__data_end>
 1ac:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <__data_end+0x1>
 1b0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <adc_low>
 1b4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <adc_low+0x1>
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	ea 5c       	subi	r30, 0xCA	; 202
 1be:	fe 4f       	sbci	r31, 0xFE	; 254
 1c0:	91 83       	std	Z+1, r25	; 0x01
 1c2:	80 83       	st	Z, r24
 1c4:	41 c0       	rjmp	.+130    	; 0x248 <__vector_21+0xee>
		else if(adc_high==1)
 1c6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <adc_high>
 1ca:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <adc_high+0x1>
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	81 f4       	brne	.+32     	; 0x1f2 <__vector_21+0x98>
			adc_res[ad_kanal] = 256 + adc_low;
 1d2:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <__data_end>
 1d6:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <__data_end+0x1>
 1da:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <adc_low>
 1de:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <adc_low+0x1>
 1e2:	93 95       	inc	r25
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	ea 5c       	subi	r30, 0xCA	; 202
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	91 83       	std	Z+1, r25	; 0x01
 1ee:	80 83       	st	Z, r24
 1f0:	2b c0       	rjmp	.+86     	; 0x248 <__vector_21+0xee>
		else if(adc_high==2)
 1f2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <adc_high>
 1f6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <adc_high+0x1>
 1fa:	02 97       	sbiw	r24, 0x02	; 2
 1fc:	81 f4       	brne	.+32     	; 0x21e <__vector_21+0xc4>
			adc_res[ad_kanal] = 512 + adc_low;	//256*2
 1fe:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <__data_end>
 202:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <__data_end+0x1>
 206:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <adc_low>
 20a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <adc_low+0x1>
 20e:	9e 5f       	subi	r25, 0xFE	; 254
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	ea 5c       	subi	r30, 0xCA	; 202
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	91 83       	std	Z+1, r25	; 0x01
 21a:	80 83       	st	Z, r24
 21c:	15 c0       	rjmp	.+42     	; 0x248 <__vector_21+0xee>
		else if(adc_high==3)
 21e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <adc_high>
 222:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <adc_high+0x1>
 226:	03 97       	sbiw	r24, 0x03	; 3
 228:	79 f4       	brne	.+30     	; 0x248 <__vector_21+0xee>
			adc_res[ad_kanal] = 768 + adc_low;	//256*3
 22a:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <__data_end>
 22e:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <__data_end+0x1>
 232:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <adc_low>
 236:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <adc_low+0x1>
 23a:	9d 5f       	subi	r25, 0xFD	; 253
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	ea 5c       	subi	r30, 0xCA	; 202
 242:	fe 4f       	sbci	r31, 0xFE	; 254
 244:	91 83       	std	Z+1, r25	; 0x01
 246:	80 83       	st	Z, r24
	
	
	ref_brzina_sa_pot = (adc_res[0] / 1.705) - 300; //skalirao bezveze da odgovara obrtajima, max 300 o/min otprilike u oba smera, -300 ofset zbog smera
 248:	c6 e3       	ldi	r28, 0x36	; 54
 24a:	d1 e0       	ldi	r29, 0x01	; 1
 24c:	68 81       	ld	r22, Y
 24e:	79 81       	ldd	r23, Y+1	; 0x01
 250:	07 2e       	mov	r0, r23
 252:	00 0c       	add	r0, r0
 254:	88 0b       	sbc	r24, r24
 256:	99 0b       	sbc	r25, r25
 258:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__floatsisf>
 25c:	21 e7       	ldi	r18, 0x71	; 113
 25e:	3d e3       	ldi	r19, 0x3D	; 61
 260:	4a ed       	ldi	r20, 0xDA	; 218
 262:	5f e3       	ldi	r21, 0x3F	; 63
 264:	0e 94 a5 04 	call	0x94a	; 0x94a <__divsf3>
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	46 e9       	ldi	r20, 0x96	; 150
 26e:	53 e4       	ldi	r21, 0x43	; 67
 270:	0e 94 38 04 	call	0x870	; 0x870 <__subsf3>
 274:	0e 94 17 05 	call	0xa2e	; 0xa2e <__fixsfsi>
 278:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <ref_brzina_sa_pot+0x1>
 27c:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <ref_brzina_sa_pot>
	Kp = adc_res[1]/100.0;				//skalirano da Kp ide do max 1
 280:	6a 81       	ldd	r22, Y+2	; 0x02
 282:	7b 81       	ldd	r23, Y+3	; 0x03
 284:	07 2e       	mov	r0, r23
 286:	00 0c       	add	r0, r0
 288:	88 0b       	sbc	r24, r24
 28a:	99 0b       	sbc	r25, r25
 28c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__floatsisf>
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	48 ec       	ldi	r20, 0xC8	; 200
 296:	52 e4       	ldi	r21, 0x42	; 66
 298:	0e 94 a5 04 	call	0x94a	; 0x94a <__divsf3>
 29c:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <Kp>
 2a0:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <Kp+0x1>
 2a4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Kp+0x2>
 2a8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <Kp+0x3>
	Ki = adc_res[2]/1000.0;				//da Ki ide do max 1
 2ac:	6c 81       	ldd	r22, Y+4	; 0x04
 2ae:	7d 81       	ldd	r23, Y+5	; 0x05
 2b0:	07 2e       	mov	r0, r23
 2b2:	00 0c       	add	r0, r0
 2b4:	88 0b       	sbc	r24, r24
 2b6:	99 0b       	sbc	r25, r25
 2b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__floatsisf>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	4a e7       	ldi	r20, 0x7A	; 122
 2c2:	54 e4       	ldi	r21, 0x44	; 68
 2c4:	0e 94 a5 04 	call	0x94a	; 0x94a <__divsf3>
 2c8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Ki>
 2cc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <Ki+0x1>
 2d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Ki+0x2>
 2d4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Ki+0x3>
	
	
	ADCSRA &= ~(1<<ADEN);	//iskljucim adc da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 2d8:	ea e7       	ldi	r30, 0x7A	; 122
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	8f 77       	andi	r24, 0x7F	; 127
 2e0:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 2e2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 2e6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x1>
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x1>
 2f0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
	if(ad_kanal > 3)	//kreni opet od nule kad dodjes do poslednjeg
 2f4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 2f8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x1>
 2fc:	04 97       	sbiw	r24, 0x04	; 4
 2fe:	24 f0       	brlt	.+8      	; 0x308 <__vector_21+0x1ae>
		ad_kanal = 0;
 300:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <__data_end+0x1>
 304:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	
	switch(ad_kanal)
 308:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 30c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x1>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	91 05       	cpc	r25, r1
 314:	71 f0       	breq	.+28     	; 0x332 <__vector_21+0x1d8>
 316:	1c f4       	brge	.+6      	; 0x31e <__vector_21+0x1c4>
 318:	89 2b       	or	r24, r25
 31a:	39 f0       	breq	.+14     	; 0x32a <__vector_21+0x1d0>
 31c:	15 c0       	rjmp	.+42     	; 0x348 <__vector_21+0x1ee>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	91 05       	cpc	r25, r1
 322:	59 f0       	breq	.+22     	; 0x33a <__vector_21+0x1e0>
 324:	03 97       	sbiw	r24, 0x03	; 3
 326:	69 f0       	breq	.+26     	; 0x342 <__vector_21+0x1e8>
 328:	0f c0       	rjmp	.+30     	; 0x348 <__vector_21+0x1ee>
	{
		case 0:
				ADMUX = 0b01000000;		//ref VCC 5V, kanal A0
 32a:	80 e4       	ldi	r24, 0x40	; 64
 32c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		break;
 330:	0b c0       	rjmp	.+22     	; 0x348 <__vector_21+0x1ee>
		
		case 1:
				ADMUX = 0b01000001;		//ref VCC 5V, kanal A1
 332:	81 e4       	ldi	r24, 0x41	; 65
 334:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		break;
 338:	07 c0       	rjmp	.+14     	; 0x348 <__vector_21+0x1ee>
		
		case 2:
				ADMUX = 0b01000010;		//ref VCC 5V, kanal A2
 33a:	82 e4       	ldi	r24, 0x42	; 66
 33c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		break;
 340:	03 c0       	rjmp	.+6      	; 0x348 <__vector_21+0x1ee>
		
		case 3:
				ADMUX = 0b01000011;		//ref VCC 5V, kanal A3
 342:	83 e4       	ldi	r24, 0x43	; 67
 344:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN);	//ponovo dozvolim adc posle promene u ADMUX
 348:	ea e7       	ldi	r30, 0x7A	; 122
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	80 83       	st	Z, r24
	


 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <eksternInt_init>:
volatile double ugao = 0;
volatile unsigned int brojac_ext_interaptova = 0;

void eksternInt_init()
{
	DDRD &= ~(0b1100);		//PD2(INT0) i PD3(INT1) ulazi - hardwerski interapti
 378:	8a b1       	in	r24, 0x0a	; 10
 37a:	83 7f       	andi	r24, 0xF3	; 243
 37c:	8a b9       	out	0x0a, r24	; 10
	
	EICRA = 0b11;		//rastuca ivica na INT0
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b1;			//dozvola prekida na INT0 
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	8d bb       	out	0x1d, r24	; 29
 388:	08 95       	ret

0000038a <__vector_1>:
	
	
}

ISR(INT0_vect)
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	2f 93       	push	r18
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
	
		//interapt opali na rastucu ivicu INT0; ovo sam uradio zbog velike rezolucije enkodera -1024 * 57.5 na izlazu, tj na tocku zbog 2 reduktora
	
	brojac_ext_interaptova++;
 39a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <brojac_ext_interaptova>
 39e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <brojac_ext_interaptova+0x1>
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <brojac_ext_interaptova+0x1>
 3a8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <brojac_ext_interaptova>
	

	
		if ( PIND & (1<<PORTD3) )	//smer 1; proverava se logicki nivo drugog kanala
 3ac:	4b 9b       	sbis	0x09, 3	; 9
 3ae:	0d c0       	rjmp	.+26     	; 0x3ca <__vector_1+0x40>
		{
			smer_obrtanja = 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <smer_obrtanja>
			impulsi++;
 3b6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <impulsi>
 3ba:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <impulsi+0x1>
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <impulsi+0x1>
 3c4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <impulsi>
 3c8:	0c c0       	rjmp	.+24     	; 0x3e2 <__vector_1+0x58>
		} 
		else								//smer 2
		{
			smer_obrtanja = 2;
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <smer_obrtanja>
			impulsi--;	
 3d0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <impulsi>
 3d4:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <impulsi+0x1>
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <impulsi+0x1>
 3de:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <impulsi>
	
	
	
	
	
	if(impulsi > 58879)		//za apsolutno merenje ugla
 3e2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <impulsi>
 3e6:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <impulsi+0x1>
 3ea:	81 15       	cp	r24, r1
 3ec:	96 4e       	sbci	r25, 0xE6	; 230
 3ee:	28 f0       	brcs	.+10     	; 0x3fa <__vector_1+0x70>
		impulsi = 0;
 3f0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <impulsi+0x1>
 3f4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <impulsi>
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	else if(impulsi < 0 )
 3fa:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <impulsi>
 3fe:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <impulsi+0x1>
	//problem se javlja kada ove impulse zelim da iskoristim za merenje brzine, a pri prelazu preko granicne vrednosti sa 58879 na 0 i obrnuto
	//zato sam ubacio jos jedan brojac koji broji prekide "brojac_ext_interaptova" relativno, a ne apsolutno
		
	//ugao = impulsi / 57.5;	//skaliranje, 58879 impulsa po krugu odgovara 360 stepeni tocka; !!!atmega se ovde zaglavi pri umerenoj frekvenciji prekida!!!
	//ugao = 100;
}
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	2f 91       	pop	r18
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <pwm_init>:
void pwm_init()
{
	
	
	
	DDRB |= (1 << DDB1)|(1 << DDB2); //izlazni pinovi za PWM - D9 i D10 na Arduino Uno ploci
 412:	84 b1       	in	r24, 0x04	; 4
 414:	86 60       	ori	r24, 0x06	; 6
 416:	84 b9       	out	0x04, r24	; 4
	

	ICR1 = 500;			//frekvencija ~ 16 kHz
 418:	84 ef       	ldi	r24, 0xF4	; 244
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 420:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 250;		//faktor ispune 50% na startu sto daje nultu vrednost struje na H mostu
 424:	e8 e8       	ldi	r30, 0x88	; 136
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	8a ef       	ldi	r24, 0xFA	; 250
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	91 83       	std	Z+1, r25	; 0x01
 42e:	80 83       	st	Z, r24
	OCR1B = OCR1A;
 430:	80 81       	ld	r24, Z
 432:	91 81       	ldd	r25, Z+1	; 0x01
 434:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 438:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	

	TCCR1A = 0b10110000;		//inverting rezim tj. pwm signali su komplementarni
 43c:	80 eb       	ldi	r24, 0xB0	; 176
 43e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	
	TCCR1B |= (1 << WGM13);		// set Fast PWM mode using ICR1 as TOP
 442:	e1 e8       	ldi	r30, 0x81	; 129
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	80 61       	ori	r24, 0x10	; 16
 44a:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << CS10);		// START the timer with no prescaler
 44c:	80 81       	ld	r24, Z
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	80 83       	st	Z, r24
 452:	08 95       	ret

00000454 <tajmer0_init>:
const volatile double stepeniPOms_to_rpm = 16.67;		//faktor konverzije izmedju izmerenog broja stepeni u prozoru od 10ms u obrtaje po minutu
volatile double relativni_ugao = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 458:	93 e0       	ldi	r25, 0x03	; 3
 45a:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 45c:	99 ef       	ldi	r25, 0xF9	; 249
 45e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 460:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 464:	08 95       	ret

00000466 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	8f 92       	push	r8
 472:	9f 92       	push	r9
 474:	af 92       	push	r10
 476:	bf 92       	push	r11
 478:	cf 92       	push	r12
 47a:	df 92       	push	r13
 47c:	ef 92       	push	r14
 47e:	ff 92       	push	r15
 480:	2f 93       	push	r18
 482:	3f 93       	push	r19
 484:	4f 93       	push	r20
 486:	5f 93       	push	r21
 488:	6f 93       	push	r22
 48a:	7f 93       	push	r23
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
	flag_tajmer0_prekid = 1;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
 49e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <brojac_prekida_tajmera0>
 4a2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <brojac_prekida_tajmera0+0x1>
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <brojac_prekida_tajmera0+0x1>
 4ac:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)
 4b0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <brojac_prekida_tajmera0>
 4b4:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <brojac_prekida_tajmera0+0x1>
 4b8:	0a 97       	sbiw	r24, 0x0a	; 10
 4ba:	09 f0       	breq	.+2      	; 0x4be <__vector_14+0x58>
 4bc:	66 c1       	rjmp	.+716    	; 0x78a <__vector_14+0x324>
	{
		brojac_prekida_tajmera0 = 0;
 4be:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <brojac_prekida_tajmera0+0x1>
 4c2:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <flag_prekid_10ms>
		//***********************merenje brzine treba obaviti unutar ISR jer je vremenski kriticno*****************************************
	
		relativni_ugao = brojac_ext_interaptova / 57.5;	//skaliranje, 58800 impulsa po krugu odgovara 360 stepeni
 4cc:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <brojac_ext_interaptova>
 4d0:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <brojac_ext_interaptova+0x1>
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__floatunsisf>
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	46 e6       	ldi	r20, 0x66	; 102
 4e2:	52 e4       	ldi	r21, 0x42	; 66
 4e4:	0e 94 a5 04 	call	0x94a	; 0x94a <__divsf3>
 4e8:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <relativni_ugao>
 4ec:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <relativni_ugao+0x1>
 4f0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <relativni_ugao+0x2>
 4f4:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <relativni_ugao+0x3>
		
		if(smer_obrtanja == 2)		//ODREDJUJEM NA KOJU STRANU SE VRTI
 4f8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <smer_obrtanja>
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	d9 f4       	brne	.+54     	; 0x536 <__vector_14+0xd0>
		{
			ugaona_brzina = stepeniPOms_to_rpm * relativni_ugao;				//posto se zna da merenje relativnog ugla traje 1ms, to je zapravo ugaona
 500:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 504:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 508:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 50c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 510:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <relativni_ugao>
 514:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <relativni_ugao+0x1>
 518:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <relativni_ugao+0x2>
 51c:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <relativni_ugao+0x3>
 520:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 524:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <ugaona_brzina>
 528:	70 93 50 01 	sts	0x0150, r23	; 0x800150 <ugaona_brzina+0x1>
 52c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <ugaona_brzina+0x2>
 530:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <ugaona_brzina+0x3>
 534:	1d c0       	rjmp	.+58     	; 0x570 <__vector_14+0x10a>
															//brzina u stepen/1ms, a 166.67 je faktor konverzije izmedju stepeni/1ms i obrtaja/min
		}
		else
		{
			ugaona_brzina = -(stepeniPOms_to_rpm * relativni_ugao);	//ako je na drugu brzina je negativna
 536:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 53a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 53e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 542:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 546:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <relativni_ugao>
 54a:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <relativni_ugao+0x1>
 54e:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <relativni_ugao+0x2>
 552:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <relativni_ugao+0x3>
 556:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 55a:	dc 01       	movw	r26, r24
 55c:	cb 01       	movw	r24, r22
 55e:	b0 58       	subi	r27, 0x80	; 128
 560:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <ugaona_brzina>
 564:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <ugaona_brzina+0x1>
 568:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <ugaona_brzina+0x2>
 56c:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <ugaona_brzina+0x3>
		}
															
	
		PINB |= 1<<PINB5;					//toogle pin 5 - DIG13, test da vidim da li je korektna frekvencija
 570:	1d 9a       	sbi	0x03, 5	; 3
		
		
		greska = ref_brzina_sa_pot - ugaona_brzina;
 572:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <ref_brzina_sa_pot>
 576:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <ref_brzina_sa_pot+0x1>
 57a:	c0 90 4f 01 	lds	r12, 0x014F	; 0x80014f <ugaona_brzina>
 57e:	d0 90 50 01 	lds	r13, 0x0150	; 0x800150 <ugaona_brzina+0x1>
 582:	e0 90 51 01 	lds	r14, 0x0151	; 0x800151 <ugaona_brzina+0x2>
 586:	f0 90 52 01 	lds	r15, 0x0152	; 0x800152 <ugaona_brzina+0x3>
 58a:	07 2e       	mov	r0, r23
 58c:	00 0c       	add	r0, r0
 58e:	88 0b       	sbc	r24, r24
 590:	99 0b       	sbc	r25, r25
 592:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__floatsisf>
 596:	a7 01       	movw	r20, r14
 598:	96 01       	movw	r18, r12
 59a:	0e 94 38 04 	call	0x870	; 0x870 <__subsf3>
 59e:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <greska>
 5a2:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <greska+0x1>
 5a6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <greska+0x2>
 5aa:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <greska+0x3>
		
		Upravljanje = 250 + Kp * greska;		//Proporcionalni regulator; ofset 250 zbog h-mosta. Top je 500
 5ae:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Kp>
 5b2:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Kp+0x1>
 5b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Kp+0x2>
 5ba:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Kp+0x3>
 5be:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <greska>
 5c2:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <greska+0x1>
 5c6:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <greska+0x2>
 5ca:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <greska+0x3>
 5ce:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	4a e7       	ldi	r20, 0x7A	; 122
 5d8:	53 e4       	ldi	r21, 0x43	; 67
 5da:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 5de:	0e 94 17 05 	call	0xa2e	; 0xa2e <__fixsfsi>
 5e2:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Upravljanje>
 5e6:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Upravljanje+0x1>
 5ea:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Upravljanje+0x2>
 5ee:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Upravljanje+0x3>
		
		suma_greske += greska;			//suma greske
 5f2:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <greska>
 5f6:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <greska+0x1>
 5fa:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <greska+0x2>
 5fe:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <greska+0x3>
 602:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <suma_greske>
 606:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <suma_greske+0x1>
 60a:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <suma_greske+0x2>
 60e:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <suma_greske+0x3>
 612:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 616:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <suma_greske>
 61a:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <suma_greske+0x1>
 61e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <suma_greske+0x2>
 622:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <suma_greske+0x3>
		
		
		Upravljanje += Ki * suma_greske;			//Integralno dejstvo sabiram sa prethodnim upravljanjem
 626:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Ki>
 62a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Ki+0x1>
 62e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Ki+0x2>
 632:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Ki+0x3>
 636:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <suma_greske>
 63a:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <suma_greske+0x1>
 63e:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <suma_greske+0x2>
 642:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <suma_greske+0x3>
 646:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <Upravljanje>
 64a:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <Upravljanje+0x1>
 64e:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <Upravljanje+0x2>
 652:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <Upravljanje+0x3>
 656:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 65a:	6b 01       	movw	r12, r22
 65c:	7c 01       	movw	r14, r24
 65e:	c5 01       	movw	r24, r10
 660:	b4 01       	movw	r22, r8
 662:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__floatsisf>
 666:	9b 01       	movw	r18, r22
 668:	ac 01       	movw	r20, r24
 66a:	c7 01       	movw	r24, r14
 66c:	b6 01       	movw	r22, r12
 66e:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 672:	0e 94 17 05 	call	0xa2e	; 0xa2e <__fixsfsi>
 676:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Upravljanje>
 67a:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Upravljanje+0x1>
 67e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Upravljanje+0x2>
 682:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Upravljanje+0x3>
		
		if(Upravljanje >= 500 )		//ogranicenje jer 500 u OCR1A registru daje maksimalan faktor ispune
 686:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Upravljanje>
 68a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Upravljanje+0x1>
 68e:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <Upravljanje+0x2>
 692:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <Upravljanje+0x3>
 696:	84 3f       	cpi	r24, 0xF4	; 244
 698:	91 40       	sbci	r25, 0x01	; 1
 69a:	a1 05       	cpc	r26, r1
 69c:	b1 05       	cpc	r27, r1
 69e:	3c f1       	brlt	.+78     	; 0x6ee <__vector_14+0x288>
									
		{
			Upravljanje = 500;
 6a0:	84 ef       	ldi	r24, 0xF4	; 244
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	a0 e0       	ldi	r26, 0x00	; 0
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Upravljanje>
 6ac:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <Upravljanje+0x1>
 6b0:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <Upravljanje+0x2>
 6b4:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <Upravljanje+0x3>
			suma_greske -= greska;		//ako vec imas max upravljanje nemoj vise povecavati sumu greske; zastita od wind up-a
 6b8:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <greska>
 6bc:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <greska+0x1>
 6c0:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <greska+0x2>
 6c4:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <greska+0x3>
 6c8:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <suma_greske>
 6cc:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <suma_greske+0x1>
 6d0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <suma_greske+0x2>
 6d4:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <suma_greske+0x3>
 6d8:	0e 94 38 04 	call	0x870	; 0x870 <__subsf3>
 6dc:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <suma_greske>
 6e0:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <suma_greske+0x1>
 6e4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <suma_greske+0x2>
 6e8:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <suma_greske+0x3>
 6ec:	2f c0       	rjmp	.+94     	; 0x74c <__vector_14+0x2e6>
		}
		else if(Upravljanje <= 0)	//ogranicenje, 0 daje max upravljanje u drugom smeru
 6ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Upravljanje>
 6f2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Upravljanje+0x1>
 6f6:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <Upravljanje+0x2>
 6fa:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <Upravljanje+0x3>
 6fe:	18 16       	cp	r1, r24
 700:	19 06       	cpc	r1, r25
 702:	1a 06       	cpc	r1, r26
 704:	1b 06       	cpc	r1, r27
 706:	14 f1       	brlt	.+68     	; 0x74c <__vector_14+0x2e6>
		{
			Upravljanje = 0;
 708:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Upravljanje>
 70c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <Upravljanje+0x1>
 710:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Upravljanje+0x2>
 714:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Upravljanje+0x3>
			suma_greske -= greska;		//drugi smer, obratna situacija
 718:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <greska>
 71c:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <greska+0x1>
 720:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <greska+0x2>
 724:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <greska+0x3>
 728:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <suma_greske>
 72c:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <suma_greske+0x1>
 730:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <suma_greske+0x2>
 734:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <suma_greske+0x3>
 738:	0e 94 38 04 	call	0x870	; 0x870 <__subsf3>
 73c:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <suma_greske>
 740:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <suma_greske+0x1>
 744:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <suma_greske+0x2>
 748:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <suma_greske+0x3>
		}
		
		
		
		OCR1A = Upravljanje;	//mogao sam i direktno da upisujem u OCR1A, ali sam dodao promenljivu 'Upravljanje' da bi bilo baferovano
 74c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Upravljanje>
 750:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Upravljanje+0x1>
 754:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <Upravljanje+0x2>
 758:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <Upravljanje+0x3>
 75c:	e8 e8       	ldi	r30, 0x88	; 136
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	91 83       	std	Z+1, r25	; 0x01
 762:	80 83       	st	Z, r24
		OCR1B = OCR1A + 50;		//+50 za mrtvo vreme
 764:	80 81       	ld	r24, Z
 766:	91 81       	ldd	r25, Z+1	; 0x01
 768:	c2 96       	adiw	r24, 0x32	; 50
 76a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 76e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		
		
		if(OCR1A==0)
 772:	80 81       	ld	r24, Z
 774:	91 81       	ldd	r25, Z+1	; 0x01
 776:	89 2b       	or	r24, r25
 778:	21 f4       	brne	.+8      	; 0x782 <__vector_14+0x31c>
			OCR1B = 0;
 77a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 77e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		

		brojac_ext_interaptova =0;			//nuliram da bi brojanje bilo relativno
 782:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <brojac_ext_interaptova+0x1>
 786:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <brojac_ext_interaptova>
		
	
	}
	

 78a:	ff 91       	pop	r31
 78c:	ef 91       	pop	r30
 78e:	bf 91       	pop	r27
 790:	af 91       	pop	r26
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	7f 91       	pop	r23
 798:	6f 91       	pop	r22
 79a:	5f 91       	pop	r21
 79c:	4f 91       	pop	r20
 79e:	3f 91       	pop	r19
 7a0:	2f 91       	pop	r18
 7a2:	ff 90       	pop	r15
 7a4:	ef 90       	pop	r14
 7a6:	df 90       	pop	r13
 7a8:	cf 90       	pop	r12
 7aa:	bf 90       	pop	r11
 7ac:	af 90       	pop	r10
 7ae:	9f 90       	pop	r9
 7b0:	8f 90       	pop	r8
 7b2:	0f 90       	pop	r0
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	0f 90       	pop	r0
 7b8:	1f 90       	pop	r1
 7ba:	18 95       	reti

000007bc <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 7bc:	1f 92       	push	r1
 7be:	0f 92       	push	r0
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	0f 92       	push	r0
 7c4:	11 24       	eor	r1, r1
	poslato=0;
 7c6:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <poslato>
}
 7ca:	0f 90       	pop	r0
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	0f 90       	pop	r0
 7d0:	1f 90       	pop	r1
 7d2:	18 95       	reti

000007d4 <__vector_18>:

ISR(USART_RX_vect)
{
 7d4:	1f 92       	push	r1
 7d6:	0f 92       	push	r0
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	0f 92       	push	r0
 7dc:	11 24       	eor	r1, r1
 7de:	8f 93       	push	r24
 7e0:	ef 93       	push	r30
 7e2:	ff 93       	push	r31
	input_char=UDR0;
 7e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7e8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 7ec:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <buff_size>
 7f0:	88 30       	cpi	r24, 0x08	; 8
 7f2:	98 f4       	brcc	.+38     	; 0x81a <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 7f4:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <buff_size>
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <input_char>
 7fe:	e4 58       	subi	r30, 0x84	; 132
 800:	fe 4f       	sbci	r31, 0xFE	; 254
 802:	80 83       	st	Z, r24
		buff_size++;
 804:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <buff_size>
 808:	8f 5f       	subi	r24, 0xFF	; 255
 80a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <buff_size>
		input_buffer[buff_size]='\0';
 80e:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <buff_size>
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	e4 58       	subi	r30, 0x84	; 132
 816:	fe 4f       	sbci	r31, 0xFE	; 254
 818:	10 82       	st	Z, r1
	}
}
 81a:	ff 91       	pop	r31
 81c:	ef 91       	pop	r30
 81e:	8f 91       	pop	r24
 820:	0f 90       	pop	r0
 822:	0f be       	out	0x3f, r0	; 63
 824:	0f 90       	pop	r0
 826:	1f 90       	pop	r1
 828:	18 95       	reti

0000082a <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 82a:	82 e0       	ldi	r24, 0x02	; 2
 82c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 830:	88 ed       	ldi	r24, 0xD8	; 216
 832:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 836:	86 e0       	ldi	r24, 0x06	; 6
 838:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 83c:	8f ec       	ldi	r24, 0xCF	; 207
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 844:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 848:	08 95       	ret

0000084a <send_str>:
}

void send_str(unsigned char *str)
{
 84a:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 84c:	90 81       	ld	r25, Z
 84e:	99 23       	and	r25, r25
 850:	71 f0       	breq	.+28     	; 0x86e <send_str+0x24>
 852:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 854:	a6 ec       	ldi	r26, 0xC6	; 198
 856:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 858:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 85a:	9c 93       	st	X, r25
		poslato=1;
 85c:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <poslato>
		while (poslato);
 860:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <poslato>
 864:	91 11       	cpse	r25, r1
 866:	fc cf       	rjmp	.-8      	; 0x860 <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 868:	91 91       	ld	r25, Z+
 86a:	91 11       	cpse	r25, r1
 86c:	f6 cf       	rjmp	.-20     	; 0x85a <send_str+0x10>
 86e:	08 95       	ret

00000870 <__subsf3>:
 870:	50 58       	subi	r21, 0x80	; 128

00000872 <__addsf3>:
 872:	bb 27       	eor	r27, r27
 874:	aa 27       	eor	r26, r26
 876:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__addsf3x>
 87a:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_round>
 87e:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_pscA>
 882:	38 f0       	brcs	.+14     	; 0x892 <__addsf3+0x20>
 884:	0e 94 9a 05 	call	0xb34	; 0xb34 <__fp_pscB>
 888:	20 f0       	brcs	.+8      	; 0x892 <__addsf3+0x20>
 88a:	39 f4       	brne	.+14     	; 0x89a <__addsf3+0x28>
 88c:	9f 3f       	cpi	r25, 0xFF	; 255
 88e:	19 f4       	brne	.+6      	; 0x896 <__addsf3+0x24>
 890:	26 f4       	brtc	.+8      	; 0x89a <__addsf3+0x28>
 892:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_nan>
 896:	0e f4       	brtc	.+2      	; 0x89a <__addsf3+0x28>
 898:	e0 95       	com	r30
 89a:	e7 fb       	bst	r30, 7
 89c:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_inf>

000008a0 <__addsf3x>:
 8a0:	e9 2f       	mov	r30, r25
 8a2:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_split3>
 8a6:	58 f3       	brcs	.-42     	; 0x87e <__addsf3+0xc>
 8a8:	ba 17       	cp	r27, r26
 8aa:	62 07       	cpc	r22, r18
 8ac:	73 07       	cpc	r23, r19
 8ae:	84 07       	cpc	r24, r20
 8b0:	95 07       	cpc	r25, r21
 8b2:	20 f0       	brcs	.+8      	; 0x8bc <__addsf3x+0x1c>
 8b4:	79 f4       	brne	.+30     	; 0x8d4 <__addsf3x+0x34>
 8b6:	a6 f5       	brtc	.+104    	; 0x920 <__stack+0x21>
 8b8:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__fp_zero>
 8bc:	0e f4       	brtc	.+2      	; 0x8c0 <__addsf3x+0x20>
 8be:	e0 95       	com	r30
 8c0:	0b 2e       	mov	r0, r27
 8c2:	ba 2f       	mov	r27, r26
 8c4:	a0 2d       	mov	r26, r0
 8c6:	0b 01       	movw	r0, r22
 8c8:	b9 01       	movw	r22, r18
 8ca:	90 01       	movw	r18, r0
 8cc:	0c 01       	movw	r0, r24
 8ce:	ca 01       	movw	r24, r20
 8d0:	a0 01       	movw	r20, r0
 8d2:	11 24       	eor	r1, r1
 8d4:	ff 27       	eor	r31, r31
 8d6:	59 1b       	sub	r21, r25
 8d8:	99 f0       	breq	.+38     	; 0x900 <__stack+0x1>
 8da:	59 3f       	cpi	r21, 0xF9	; 249
 8dc:	50 f4       	brcc	.+20     	; 0x8f2 <__addsf3x+0x52>
 8de:	50 3e       	cpi	r21, 0xE0	; 224
 8e0:	68 f1       	brcs	.+90     	; 0x93c <__stack+0x3d>
 8e2:	1a 16       	cp	r1, r26
 8e4:	f0 40       	sbci	r31, 0x00	; 0
 8e6:	a2 2f       	mov	r26, r18
 8e8:	23 2f       	mov	r18, r19
 8ea:	34 2f       	mov	r19, r20
 8ec:	44 27       	eor	r20, r20
 8ee:	58 5f       	subi	r21, 0xF8	; 248
 8f0:	f3 cf       	rjmp	.-26     	; 0x8d8 <__addsf3x+0x38>
 8f2:	46 95       	lsr	r20
 8f4:	37 95       	ror	r19
 8f6:	27 95       	ror	r18
 8f8:	a7 95       	ror	r26
 8fa:	f0 40       	sbci	r31, 0x00	; 0
 8fc:	53 95       	inc	r21
 8fe:	c9 f7       	brne	.-14     	; 0x8f2 <__addsf3x+0x52>
 900:	7e f4       	brtc	.+30     	; 0x920 <__stack+0x21>
 902:	1f 16       	cp	r1, r31
 904:	ba 0b       	sbc	r27, r26
 906:	62 0b       	sbc	r22, r18
 908:	73 0b       	sbc	r23, r19
 90a:	84 0b       	sbc	r24, r20
 90c:	ba f0       	brmi	.+46     	; 0x93c <__stack+0x3d>
 90e:	91 50       	subi	r25, 0x01	; 1
 910:	a1 f0       	breq	.+40     	; 0x93a <__stack+0x3b>
 912:	ff 0f       	add	r31, r31
 914:	bb 1f       	adc	r27, r27
 916:	66 1f       	adc	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	c2 f7       	brpl	.-16     	; 0x90e <__stack+0xf>
 91e:	0e c0       	rjmp	.+28     	; 0x93c <__stack+0x3d>
 920:	ba 0f       	add	r27, r26
 922:	62 1f       	adc	r22, r18
 924:	73 1f       	adc	r23, r19
 926:	84 1f       	adc	r24, r20
 928:	48 f4       	brcc	.+18     	; 0x93c <__stack+0x3d>
 92a:	87 95       	ror	r24
 92c:	77 95       	ror	r23
 92e:	67 95       	ror	r22
 930:	b7 95       	ror	r27
 932:	f7 95       	ror	r31
 934:	9e 3f       	cpi	r25, 0xFE	; 254
 936:	08 f0       	brcs	.+2      	; 0x93a <__stack+0x3b>
 938:	b0 cf       	rjmp	.-160    	; 0x89a <__addsf3+0x28>
 93a:	93 95       	inc	r25
 93c:	88 0f       	add	r24, r24
 93e:	08 f0       	brcs	.+2      	; 0x942 <__stack+0x43>
 940:	99 27       	eor	r25, r25
 942:	ee 0f       	add	r30, r30
 944:	97 95       	ror	r25
 946:	87 95       	ror	r24
 948:	08 95       	ret

0000094a <__divsf3>:
 94a:	0e 94 b9 04 	call	0x972	; 0x972 <__divsf3x>
 94e:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_round>
 952:	0e 94 9a 05 	call	0xb34	; 0xb34 <__fp_pscB>
 956:	58 f0       	brcs	.+22     	; 0x96e <__divsf3+0x24>
 958:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_pscA>
 95c:	40 f0       	brcs	.+16     	; 0x96e <__divsf3+0x24>
 95e:	29 f4       	brne	.+10     	; 0x96a <__divsf3+0x20>
 960:	5f 3f       	cpi	r21, 0xFF	; 255
 962:	29 f0       	breq	.+10     	; 0x96e <__divsf3+0x24>
 964:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_inf>
 968:	51 11       	cpse	r21, r1
 96a:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_szero>
 96e:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_nan>

00000972 <__divsf3x>:
 972:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_split3>
 976:	68 f3       	brcs	.-38     	; 0x952 <__divsf3+0x8>

00000978 <__divsf3_pse>:
 978:	99 23       	and	r25, r25
 97a:	b1 f3       	breq	.-20     	; 0x968 <__divsf3+0x1e>
 97c:	55 23       	and	r21, r21
 97e:	91 f3       	breq	.-28     	; 0x964 <__divsf3+0x1a>
 980:	95 1b       	sub	r25, r21
 982:	55 0b       	sbc	r21, r21
 984:	bb 27       	eor	r27, r27
 986:	aa 27       	eor	r26, r26
 988:	62 17       	cp	r22, r18
 98a:	73 07       	cpc	r23, r19
 98c:	84 07       	cpc	r24, r20
 98e:	38 f0       	brcs	.+14     	; 0x99e <__divsf3_pse+0x26>
 990:	9f 5f       	subi	r25, 0xFF	; 255
 992:	5f 4f       	sbci	r21, 0xFF	; 255
 994:	22 0f       	add	r18, r18
 996:	33 1f       	adc	r19, r19
 998:	44 1f       	adc	r20, r20
 99a:	aa 1f       	adc	r26, r26
 99c:	a9 f3       	breq	.-22     	; 0x988 <__divsf3_pse+0x10>
 99e:	35 d0       	rcall	.+106    	; 0xa0a <__divsf3_pse+0x92>
 9a0:	0e 2e       	mov	r0, r30
 9a2:	3a f0       	brmi	.+14     	; 0x9b2 <__divsf3_pse+0x3a>
 9a4:	e0 e8       	ldi	r30, 0x80	; 128
 9a6:	32 d0       	rcall	.+100    	; 0xa0c <__divsf3_pse+0x94>
 9a8:	91 50       	subi	r25, 0x01	; 1
 9aa:	50 40       	sbci	r21, 0x00	; 0
 9ac:	e6 95       	lsr	r30
 9ae:	00 1c       	adc	r0, r0
 9b0:	ca f7       	brpl	.-14     	; 0x9a4 <__divsf3_pse+0x2c>
 9b2:	2b d0       	rcall	.+86     	; 0xa0a <__divsf3_pse+0x92>
 9b4:	fe 2f       	mov	r31, r30
 9b6:	29 d0       	rcall	.+82     	; 0xa0a <__divsf3_pse+0x92>
 9b8:	66 0f       	add	r22, r22
 9ba:	77 1f       	adc	r23, r23
 9bc:	88 1f       	adc	r24, r24
 9be:	bb 1f       	adc	r27, r27
 9c0:	26 17       	cp	r18, r22
 9c2:	37 07       	cpc	r19, r23
 9c4:	48 07       	cpc	r20, r24
 9c6:	ab 07       	cpc	r26, r27
 9c8:	b0 e8       	ldi	r27, 0x80	; 128
 9ca:	09 f0       	breq	.+2      	; 0x9ce <__divsf3_pse+0x56>
 9cc:	bb 0b       	sbc	r27, r27
 9ce:	80 2d       	mov	r24, r0
 9d0:	bf 01       	movw	r22, r30
 9d2:	ff 27       	eor	r31, r31
 9d4:	93 58       	subi	r25, 0x83	; 131
 9d6:	5f 4f       	sbci	r21, 0xFF	; 255
 9d8:	3a f0       	brmi	.+14     	; 0x9e8 <__divsf3_pse+0x70>
 9da:	9e 3f       	cpi	r25, 0xFE	; 254
 9dc:	51 05       	cpc	r21, r1
 9de:	78 f0       	brcs	.+30     	; 0x9fe <__divsf3_pse+0x86>
 9e0:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_inf>
 9e4:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_szero>
 9e8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ea:	e4 f3       	brlt	.-8      	; 0x9e4 <__divsf3_pse+0x6c>
 9ec:	98 3e       	cpi	r25, 0xE8	; 232
 9ee:	d4 f3       	brlt	.-12     	; 0x9e4 <__divsf3_pse+0x6c>
 9f0:	86 95       	lsr	r24
 9f2:	77 95       	ror	r23
 9f4:	67 95       	ror	r22
 9f6:	b7 95       	ror	r27
 9f8:	f7 95       	ror	r31
 9fa:	9f 5f       	subi	r25, 0xFF	; 255
 9fc:	c9 f7       	brne	.-14     	; 0x9f0 <__divsf3_pse+0x78>
 9fe:	88 0f       	add	r24, r24
 a00:	91 1d       	adc	r25, r1
 a02:	96 95       	lsr	r25
 a04:	87 95       	ror	r24
 a06:	97 f9       	bld	r25, 7
 a08:	08 95       	ret
 a0a:	e1 e0       	ldi	r30, 0x01	; 1
 a0c:	66 0f       	add	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	bb 1f       	adc	r27, r27
 a14:	62 17       	cp	r22, r18
 a16:	73 07       	cpc	r23, r19
 a18:	84 07       	cpc	r24, r20
 a1a:	ba 07       	cpc	r27, r26
 a1c:	20 f0       	brcs	.+8      	; 0xa26 <__divsf3_pse+0xae>
 a1e:	62 1b       	sub	r22, r18
 a20:	73 0b       	sbc	r23, r19
 a22:	84 0b       	sbc	r24, r20
 a24:	ba 0b       	sbc	r27, r26
 a26:	ee 1f       	adc	r30, r30
 a28:	88 f7       	brcc	.-30     	; 0xa0c <__divsf3_pse+0x94>
 a2a:	e0 95       	com	r30
 a2c:	08 95       	ret

00000a2e <__fixsfsi>:
 a2e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__fixunssfsi>
 a32:	68 94       	set
 a34:	b1 11       	cpse	r27, r1
 a36:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_szero>
 a3a:	08 95       	ret

00000a3c <__fixunssfsi>:
 a3c:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_splitA>
 a40:	88 f0       	brcs	.+34     	; 0xa64 <__fixunssfsi+0x28>
 a42:	9f 57       	subi	r25, 0x7F	; 127
 a44:	98 f0       	brcs	.+38     	; 0xa6c <__fixunssfsi+0x30>
 a46:	b9 2f       	mov	r27, r25
 a48:	99 27       	eor	r25, r25
 a4a:	b7 51       	subi	r27, 0x17	; 23
 a4c:	b0 f0       	brcs	.+44     	; 0xa7a <__fixunssfsi+0x3e>
 a4e:	e1 f0       	breq	.+56     	; 0xa88 <__fixunssfsi+0x4c>
 a50:	66 0f       	add	r22, r22
 a52:	77 1f       	adc	r23, r23
 a54:	88 1f       	adc	r24, r24
 a56:	99 1f       	adc	r25, r25
 a58:	1a f0       	brmi	.+6      	; 0xa60 <__fixunssfsi+0x24>
 a5a:	ba 95       	dec	r27
 a5c:	c9 f7       	brne	.-14     	; 0xa50 <__fixunssfsi+0x14>
 a5e:	14 c0       	rjmp	.+40     	; 0xa88 <__fixunssfsi+0x4c>
 a60:	b1 30       	cpi	r27, 0x01	; 1
 a62:	91 f0       	breq	.+36     	; 0xa88 <__fixunssfsi+0x4c>
 a64:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_zero>
 a68:	b1 e0       	ldi	r27, 0x01	; 1
 a6a:	08 95       	ret
 a6c:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__fp_zero>
 a70:	67 2f       	mov	r22, r23
 a72:	78 2f       	mov	r23, r24
 a74:	88 27       	eor	r24, r24
 a76:	b8 5f       	subi	r27, 0xF8	; 248
 a78:	39 f0       	breq	.+14     	; 0xa88 <__fixunssfsi+0x4c>
 a7a:	b9 3f       	cpi	r27, 0xF9	; 249
 a7c:	cc f3       	brlt	.-14     	; 0xa70 <__fixunssfsi+0x34>
 a7e:	86 95       	lsr	r24
 a80:	77 95       	ror	r23
 a82:	67 95       	ror	r22
 a84:	b3 95       	inc	r27
 a86:	d9 f7       	brne	.-10     	; 0xa7e <__fixunssfsi+0x42>
 a88:	3e f4       	brtc	.+14     	; 0xa98 <__fixunssfsi+0x5c>
 a8a:	90 95       	com	r25
 a8c:	80 95       	com	r24
 a8e:	70 95       	com	r23
 a90:	61 95       	neg	r22
 a92:	7f 4f       	sbci	r23, 0xFF	; 255
 a94:	8f 4f       	sbci	r24, 0xFF	; 255
 a96:	9f 4f       	sbci	r25, 0xFF	; 255
 a98:	08 95       	ret

00000a9a <__floatunsisf>:
 a9a:	e8 94       	clt
 a9c:	09 c0       	rjmp	.+18     	; 0xab0 <__floatsisf+0x12>

00000a9e <__floatsisf>:
 a9e:	97 fb       	bst	r25, 7
 aa0:	3e f4       	brtc	.+14     	; 0xab0 <__floatsisf+0x12>
 aa2:	90 95       	com	r25
 aa4:	80 95       	com	r24
 aa6:	70 95       	com	r23
 aa8:	61 95       	neg	r22
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	8f 4f       	sbci	r24, 0xFF	; 255
 aae:	9f 4f       	sbci	r25, 0xFF	; 255
 ab0:	99 23       	and	r25, r25
 ab2:	a9 f0       	breq	.+42     	; 0xade <__floatsisf+0x40>
 ab4:	f9 2f       	mov	r31, r25
 ab6:	96 e9       	ldi	r25, 0x96	; 150
 ab8:	bb 27       	eor	r27, r27
 aba:	93 95       	inc	r25
 abc:	f6 95       	lsr	r31
 abe:	87 95       	ror	r24
 ac0:	77 95       	ror	r23
 ac2:	67 95       	ror	r22
 ac4:	b7 95       	ror	r27
 ac6:	f1 11       	cpse	r31, r1
 ac8:	f8 cf       	rjmp	.-16     	; 0xaba <__floatsisf+0x1c>
 aca:	fa f4       	brpl	.+62     	; 0xb0a <__floatsisf+0x6c>
 acc:	bb 0f       	add	r27, r27
 ace:	11 f4       	brne	.+4      	; 0xad4 <__floatsisf+0x36>
 ad0:	60 ff       	sbrs	r22, 0
 ad2:	1b c0       	rjmp	.+54     	; 0xb0a <__floatsisf+0x6c>
 ad4:	6f 5f       	subi	r22, 0xFF	; 255
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	16 c0       	rjmp	.+44     	; 0xb0a <__floatsisf+0x6c>
 ade:	88 23       	and	r24, r24
 ae0:	11 f0       	breq	.+4      	; 0xae6 <__floatsisf+0x48>
 ae2:	96 e9       	ldi	r25, 0x96	; 150
 ae4:	11 c0       	rjmp	.+34     	; 0xb08 <__floatsisf+0x6a>
 ae6:	77 23       	and	r23, r23
 ae8:	21 f0       	breq	.+8      	; 0xaf2 <__floatsisf+0x54>
 aea:	9e e8       	ldi	r25, 0x8E	; 142
 aec:	87 2f       	mov	r24, r23
 aee:	76 2f       	mov	r23, r22
 af0:	05 c0       	rjmp	.+10     	; 0xafc <__floatsisf+0x5e>
 af2:	66 23       	and	r22, r22
 af4:	71 f0       	breq	.+28     	; 0xb12 <__floatsisf+0x74>
 af6:	96 e8       	ldi	r25, 0x86	; 134
 af8:	86 2f       	mov	r24, r22
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	60 e0       	ldi	r22, 0x00	; 0
 afe:	2a f0       	brmi	.+10     	; 0xb0a <__floatsisf+0x6c>
 b00:	9a 95       	dec	r25
 b02:	66 0f       	add	r22, r22
 b04:	77 1f       	adc	r23, r23
 b06:	88 1f       	adc	r24, r24
 b08:	da f7       	brpl	.-10     	; 0xb00 <__floatsisf+0x62>
 b0a:	88 0f       	add	r24, r24
 b0c:	96 95       	lsr	r25
 b0e:	87 95       	ror	r24
 b10:	97 f9       	bld	r25, 7
 b12:	08 95       	ret

00000b14 <__fp_inf>:
 b14:	97 f9       	bld	r25, 7
 b16:	9f 67       	ori	r25, 0x7F	; 127
 b18:	80 e8       	ldi	r24, 0x80	; 128
 b1a:	70 e0       	ldi	r23, 0x00	; 0
 b1c:	60 e0       	ldi	r22, 0x00	; 0
 b1e:	08 95       	ret

00000b20 <__fp_nan>:
 b20:	9f ef       	ldi	r25, 0xFF	; 255
 b22:	80 ec       	ldi	r24, 0xC0	; 192
 b24:	08 95       	ret

00000b26 <__fp_pscA>:
 b26:	00 24       	eor	r0, r0
 b28:	0a 94       	dec	r0
 b2a:	16 16       	cp	r1, r22
 b2c:	17 06       	cpc	r1, r23
 b2e:	18 06       	cpc	r1, r24
 b30:	09 06       	cpc	r0, r25
 b32:	08 95       	ret

00000b34 <__fp_pscB>:
 b34:	00 24       	eor	r0, r0
 b36:	0a 94       	dec	r0
 b38:	12 16       	cp	r1, r18
 b3a:	13 06       	cpc	r1, r19
 b3c:	14 06       	cpc	r1, r20
 b3e:	05 06       	cpc	r0, r21
 b40:	08 95       	ret

00000b42 <__fp_round>:
 b42:	09 2e       	mov	r0, r25
 b44:	03 94       	inc	r0
 b46:	00 0c       	add	r0, r0
 b48:	11 f4       	brne	.+4      	; 0xb4e <__fp_round+0xc>
 b4a:	88 23       	and	r24, r24
 b4c:	52 f0       	brmi	.+20     	; 0xb62 <__fp_round+0x20>
 b4e:	bb 0f       	add	r27, r27
 b50:	40 f4       	brcc	.+16     	; 0xb62 <__fp_round+0x20>
 b52:	bf 2b       	or	r27, r31
 b54:	11 f4       	brne	.+4      	; 0xb5a <__fp_round+0x18>
 b56:	60 ff       	sbrs	r22, 0
 b58:	04 c0       	rjmp	.+8      	; 0xb62 <__fp_round+0x20>
 b5a:	6f 5f       	subi	r22, 0xFF	; 255
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	8f 4f       	sbci	r24, 0xFF	; 255
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	08 95       	ret

00000b64 <__fp_split3>:
 b64:	57 fd       	sbrc	r21, 7
 b66:	90 58       	subi	r25, 0x80	; 128
 b68:	44 0f       	add	r20, r20
 b6a:	55 1f       	adc	r21, r21
 b6c:	59 f0       	breq	.+22     	; 0xb84 <__fp_splitA+0x10>
 b6e:	5f 3f       	cpi	r21, 0xFF	; 255
 b70:	71 f0       	breq	.+28     	; 0xb8e <__fp_splitA+0x1a>
 b72:	47 95       	ror	r20

00000b74 <__fp_splitA>:
 b74:	88 0f       	add	r24, r24
 b76:	97 fb       	bst	r25, 7
 b78:	99 1f       	adc	r25, r25
 b7a:	61 f0       	breq	.+24     	; 0xb94 <__fp_splitA+0x20>
 b7c:	9f 3f       	cpi	r25, 0xFF	; 255
 b7e:	79 f0       	breq	.+30     	; 0xb9e <__fp_splitA+0x2a>
 b80:	87 95       	ror	r24
 b82:	08 95       	ret
 b84:	12 16       	cp	r1, r18
 b86:	13 06       	cpc	r1, r19
 b88:	14 06       	cpc	r1, r20
 b8a:	55 1f       	adc	r21, r21
 b8c:	f2 cf       	rjmp	.-28     	; 0xb72 <__fp_split3+0xe>
 b8e:	46 95       	lsr	r20
 b90:	f1 df       	rcall	.-30     	; 0xb74 <__fp_splitA>
 b92:	08 c0       	rjmp	.+16     	; 0xba4 <__fp_splitA+0x30>
 b94:	16 16       	cp	r1, r22
 b96:	17 06       	cpc	r1, r23
 b98:	18 06       	cpc	r1, r24
 b9a:	99 1f       	adc	r25, r25
 b9c:	f1 cf       	rjmp	.-30     	; 0xb80 <__fp_splitA+0xc>
 b9e:	86 95       	lsr	r24
 ba0:	71 05       	cpc	r23, r1
 ba2:	61 05       	cpc	r22, r1
 ba4:	08 94       	sec
 ba6:	08 95       	ret

00000ba8 <__fp_zero>:
 ba8:	e8 94       	clt

00000baa <__fp_szero>:
 baa:	bb 27       	eor	r27, r27
 bac:	66 27       	eor	r22, r22
 bae:	77 27       	eor	r23, r23
 bb0:	cb 01       	movw	r24, r22
 bb2:	97 f9       	bld	r25, 7
 bb4:	08 95       	ret

00000bb6 <__mulsf3>:
 bb6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__mulsf3x>
 bba:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_round>
 bbe:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_pscA>
 bc2:	38 f0       	brcs	.+14     	; 0xbd2 <__mulsf3+0x1c>
 bc4:	0e 94 9a 05 	call	0xb34	; 0xb34 <__fp_pscB>
 bc8:	20 f0       	brcs	.+8      	; 0xbd2 <__mulsf3+0x1c>
 bca:	95 23       	and	r25, r21
 bcc:	11 f0       	breq	.+4      	; 0xbd2 <__mulsf3+0x1c>
 bce:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_inf>
 bd2:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_nan>
 bd6:	11 24       	eor	r1, r1
 bd8:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_szero>

00000bdc <__mulsf3x>:
 bdc:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_split3>
 be0:	70 f3       	brcs	.-36     	; 0xbbe <__mulsf3+0x8>

00000be2 <__mulsf3_pse>:
 be2:	95 9f       	mul	r25, r21
 be4:	c1 f3       	breq	.-16     	; 0xbd6 <__mulsf3+0x20>
 be6:	95 0f       	add	r25, r21
 be8:	50 e0       	ldi	r21, 0x00	; 0
 bea:	55 1f       	adc	r21, r21
 bec:	62 9f       	mul	r22, r18
 bee:	f0 01       	movw	r30, r0
 bf0:	72 9f       	mul	r23, r18
 bf2:	bb 27       	eor	r27, r27
 bf4:	f0 0d       	add	r31, r0
 bf6:	b1 1d       	adc	r27, r1
 bf8:	63 9f       	mul	r22, r19
 bfa:	aa 27       	eor	r26, r26
 bfc:	f0 0d       	add	r31, r0
 bfe:	b1 1d       	adc	r27, r1
 c00:	aa 1f       	adc	r26, r26
 c02:	64 9f       	mul	r22, r20
 c04:	66 27       	eor	r22, r22
 c06:	b0 0d       	add	r27, r0
 c08:	a1 1d       	adc	r26, r1
 c0a:	66 1f       	adc	r22, r22
 c0c:	82 9f       	mul	r24, r18
 c0e:	22 27       	eor	r18, r18
 c10:	b0 0d       	add	r27, r0
 c12:	a1 1d       	adc	r26, r1
 c14:	62 1f       	adc	r22, r18
 c16:	73 9f       	mul	r23, r19
 c18:	b0 0d       	add	r27, r0
 c1a:	a1 1d       	adc	r26, r1
 c1c:	62 1f       	adc	r22, r18
 c1e:	83 9f       	mul	r24, r19
 c20:	a0 0d       	add	r26, r0
 c22:	61 1d       	adc	r22, r1
 c24:	22 1f       	adc	r18, r18
 c26:	74 9f       	mul	r23, r20
 c28:	33 27       	eor	r19, r19
 c2a:	a0 0d       	add	r26, r0
 c2c:	61 1d       	adc	r22, r1
 c2e:	23 1f       	adc	r18, r19
 c30:	84 9f       	mul	r24, r20
 c32:	60 0d       	add	r22, r0
 c34:	21 1d       	adc	r18, r1
 c36:	82 2f       	mov	r24, r18
 c38:	76 2f       	mov	r23, r22
 c3a:	6a 2f       	mov	r22, r26
 c3c:	11 24       	eor	r1, r1
 c3e:	9f 57       	subi	r25, 0x7F	; 127
 c40:	50 40       	sbci	r21, 0x00	; 0
 c42:	9a f0       	brmi	.+38     	; 0xc6a <__mulsf3_pse+0x88>
 c44:	f1 f0       	breq	.+60     	; 0xc82 <__mulsf3_pse+0xa0>
 c46:	88 23       	and	r24, r24
 c48:	4a f0       	brmi	.+18     	; 0xc5c <__mulsf3_pse+0x7a>
 c4a:	ee 0f       	add	r30, r30
 c4c:	ff 1f       	adc	r31, r31
 c4e:	bb 1f       	adc	r27, r27
 c50:	66 1f       	adc	r22, r22
 c52:	77 1f       	adc	r23, r23
 c54:	88 1f       	adc	r24, r24
 c56:	91 50       	subi	r25, 0x01	; 1
 c58:	50 40       	sbci	r21, 0x00	; 0
 c5a:	a9 f7       	brne	.-22     	; 0xc46 <__mulsf3_pse+0x64>
 c5c:	9e 3f       	cpi	r25, 0xFE	; 254
 c5e:	51 05       	cpc	r21, r1
 c60:	80 f0       	brcs	.+32     	; 0xc82 <__mulsf3_pse+0xa0>
 c62:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_inf>
 c66:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_szero>
 c6a:	5f 3f       	cpi	r21, 0xFF	; 255
 c6c:	e4 f3       	brlt	.-8      	; 0xc66 <__mulsf3_pse+0x84>
 c6e:	98 3e       	cpi	r25, 0xE8	; 232
 c70:	d4 f3       	brlt	.-12     	; 0xc66 <__mulsf3_pse+0x84>
 c72:	86 95       	lsr	r24
 c74:	77 95       	ror	r23
 c76:	67 95       	ror	r22
 c78:	b7 95       	ror	r27
 c7a:	f7 95       	ror	r31
 c7c:	e7 95       	ror	r30
 c7e:	9f 5f       	subi	r25, 0xFF	; 255
 c80:	c1 f7       	brne	.-16     	; 0xc72 <__mulsf3_pse+0x90>
 c82:	fe 2b       	or	r31, r30
 c84:	88 0f       	add	r24, r24
 c86:	91 1d       	adc	r25, r1
 c88:	96 95       	lsr	r25
 c8a:	87 95       	ror	r24
 c8c:	97 f9       	bld	r25, 7
 c8e:	08 95       	ret

00000c90 <__itoa_ncheck>:
 c90:	bb 27       	eor	r27, r27
 c92:	4a 30       	cpi	r20, 0x0A	; 10
 c94:	31 f4       	brne	.+12     	; 0xca2 <__itoa_ncheck+0x12>
 c96:	99 23       	and	r25, r25
 c98:	22 f4       	brpl	.+8      	; 0xca2 <__itoa_ncheck+0x12>
 c9a:	bd e2       	ldi	r27, 0x2D	; 45
 c9c:	90 95       	com	r25
 c9e:	81 95       	neg	r24
 ca0:	9f 4f       	sbci	r25, 0xFF	; 255
 ca2:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__utoa_common>

00000ca6 <__utoa_ncheck>:
 ca6:	bb 27       	eor	r27, r27

00000ca8 <__utoa_common>:
 ca8:	fb 01       	movw	r30, r22
 caa:	55 27       	eor	r21, r21
 cac:	aa 27       	eor	r26, r26
 cae:	88 0f       	add	r24, r24
 cb0:	99 1f       	adc	r25, r25
 cb2:	aa 1f       	adc	r26, r26
 cb4:	a4 17       	cp	r26, r20
 cb6:	10 f0       	brcs	.+4      	; 0xcbc <__utoa_common+0x14>
 cb8:	a4 1b       	sub	r26, r20
 cba:	83 95       	inc	r24
 cbc:	50 51       	subi	r21, 0x10	; 16
 cbe:	b9 f7       	brne	.-18     	; 0xcae <__utoa_common+0x6>
 cc0:	a0 5d       	subi	r26, 0xD0	; 208
 cc2:	aa 33       	cpi	r26, 0x3A	; 58
 cc4:	08 f0       	brcs	.+2      	; 0xcc8 <__utoa_common+0x20>
 cc6:	a9 5d       	subi	r26, 0xD9	; 217
 cc8:	a1 93       	st	Z+, r26
 cca:	00 97       	sbiw	r24, 0x00	; 0
 ccc:	79 f7       	brne	.-34     	; 0xcac <__utoa_common+0x4>
 cce:	b1 11       	cpse	r27, r1
 cd0:	b1 93       	st	Z+, r27
 cd2:	11 92       	st	Z+, r1
 cd4:	cb 01       	movw	r24, r22
 cd6:	0c 94 6d 06 	jmp	0xcda	; 0xcda <strrev>

00000cda <strrev>:
 cda:	dc 01       	movw	r26, r24
 cdc:	fc 01       	movw	r30, r24
 cde:	67 2f       	mov	r22, r23
 ce0:	71 91       	ld	r23, Z+
 ce2:	77 23       	and	r23, r23
 ce4:	e1 f7       	brne	.-8      	; 0xcde <strrev+0x4>
 ce6:	32 97       	sbiw	r30, 0x02	; 2
 ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <strrev+0x18>
 cea:	7c 91       	ld	r23, X
 cec:	6d 93       	st	X+, r22
 cee:	70 83       	st	Z, r23
 cf0:	62 91       	ld	r22, -Z
 cf2:	ae 17       	cp	r26, r30
 cf4:	bf 07       	cpc	r27, r31
 cf6:	c8 f3       	brcs	.-14     	; 0xcea <strrev+0x10>
 cf8:	08 95       	ret

00000cfa <_exit>:
 cfa:	f8 94       	cli

00000cfc <__stop_program>:
 cfc:	ff cf       	rjmp	.-2      	; 0xcfc <__stop_program>
