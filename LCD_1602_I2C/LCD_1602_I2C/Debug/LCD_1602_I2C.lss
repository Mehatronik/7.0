
LCD_1602_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000976  00000a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  00000a16  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000110a  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c1  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000779  00000000  00000000  0000263f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dc  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000074c  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  9e:	0c 94 b9 04 	jmp	0x972	; 0x972 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start_condition>:
  ae:	84 ea       	ldi	r24, 0xA4	; 164
  b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b4:	ec eb       	ldi	r30, 0xBC	; 188
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 23       	and	r24, r24
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start_condition+0xa>
  be:	08 95       	ret

000000c0 <i2c_send_byte>:
}

void i2c_send_byte(unsigned char byte)
{
	TWDR = byte;
  c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1 << TWINT) | (1 << TWEN);
  c4:	84 e8       	ldi	r24, 0x84	; 132
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & (1 << TWINT)) == 0);
  ca:	ec eb       	ldi	r30, 0xBC	; 188
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <i2c_send_byte+0xe>
}
  d4:	08 95       	ret

000000d6 <i2c_send_packet>:

void i2c_send_packet(unsigned char value, unsigned char address)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	c8 2f       	mov	r28, r24
  dc:	d6 2f       	mov	r29, r22
	i2c_start_condition();
  de:	0e 94 57 00 	call	0xae	; 0xae <i2c_start_condition>
	i2c_send_byte(address);
  e2:	8d 2f       	mov	r24, r29
  e4:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_send_byte>
	i2c_send_byte(value);
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_send_byte>
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  ee:	84 e9       	ldi	r24, 0x94	; 148
  f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
{
	i2c_start_condition();
	i2c_send_byte(address);
	i2c_send_byte(value);
	i2c_stop_condition();
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <putnibble>:
	uint8_t led_pin;
} lcd;


void putnibble(char t)
{
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(lcd.led_pin |= 0x04, SLA_W);
  fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 102:	84 60       	ori	r24, 0x04	; 4
 104:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 108:	6e e4       	ldi	r22, 0x4E	; 78
 10a:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	87 ec       	ldi	r24, 0xC7	; 199
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <putnibble+0x18>
 116:	00 c0       	rjmp	.+0      	; 0x118 <putnibble+0x1e>
 118:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(lcd.led_pin | t, SLA_W);
 11a:	c2 95       	swap	r28
 11c:	c0 7f       	andi	r28, 0xF0	; 240
 11e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 122:	6e e4       	ldi	r22, 0x4E	; 78
 124:	8c 2b       	or	r24, r28
 126:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
	i2c_send_packet(lcd.led_pin &= ~0x04, SLA_W);
 12a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 134:	6e e4       	ldi	r22, 0x4E	; 78
 136:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 13a:	87 ec       	ldi	r24, 0xC7	; 199
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <putnibble+0x44>
 142:	00 c0       	rjmp	.+0      	; 0x144 <putnibble+0x4a>
 144:	00 00       	nop
	_delay_us(50);
}
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd1602_send_byte>:

void lcd1602_send_byte(char c, char rs)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
 150:	d8 2f       	mov	r29, r24
 152:	d2 95       	swap	r29
 154:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
 156:	61 11       	cpse	r22, r1
 158:	09 c0       	rjmp	.+18     	; 0x16c <lcd1602_send_byte+0x22>
		i2c_send_packet(lcd.led_pin &=~ 0x01, SLA_W);
 15a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 164:	6e e4       	ldi	r22, 0x4E	; 78
 166:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 16a:	08 c0       	rjmp	.+16     	; 0x17c <lcd1602_send_byte+0x32>
	else
		i2c_send_packet(lcd.led_pin |= 0x01, SLA_W);
 16c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 170:	81 60       	ori	r24, 0x01	; 1
 172:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 176:	6e e4       	ldi	r22, 0x4E	; 78
 178:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
	putnibble(highc);
 17c:	8d 2f       	mov	r24, r29
 17e:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
	putnibble(c);
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd1602_send_char>:

void lcd1602_send_char(char c)
{
 18e:	cf 93       	push	r28
 190:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (lcd.led_pin |= 0x01, SLA_W);
 192:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 196:	81 60       	ori	r24, 0x01	; 1
 198:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 19c:	6e e4       	ldi	r22, 0x4E	; 78
 19e:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
	putnibble(highc);
 1a2:	8c 2f       	mov	r24, r28
 1a4:	82 95       	swap	r24
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
	putnibble(c);
 1ac:	8c 2f       	mov	r24, r28
 1ae:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
}
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <lcd1602_init>:

void lcd1602_init()
{
	lcd.led_pin = 0;
 1b6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	i2c_init();
 1ba:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	8f e5       	ldi	r24, 0x5F	; 95
 1c0:	9a ee       	ldi	r25, 0xEA	; 234
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd1602_init+0xc>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd1602_init+0x12>
 1c8:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
 1d0:	8f e7       	ldi	r24, 0x7F	; 127
 1d2:	9e e3       	ldi	r25, 0x3E	; 62
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd1602_init+0x1e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd1602_init+0x24>
 1da:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	8f e8       	ldi	r24, 0x8F	; 143
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd1602_init+0x30>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd1602_init+0x36>
 1ec:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	8f e9       	ldi	r24, 0x9F	; 159
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd1602_init+0x42>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd1602_init+0x48>
 1fe:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
 206:	8f e9       	ldi	r24, 0x9F	; 159
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd1602_init+0x54>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <lcd1602_init+0x5a>
 210:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x28, LCD_COMMAND);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd1602_send_byte>
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd1602_init+0x68>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd1602_init+0x6e>
 224:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x0C, LCD_COMMAND);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8c e0       	ldi	r24, 0x0C	; 12
 22a:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd1602_send_byte>
 22e:	8f e9       	ldi	r24, 0x9F	; 159
 230:	9f e0       	ldi	r25, 0x0F	; 15
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd1602_init+0x7c>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd1602_init+0x82>
 238:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x06, LCD_COMMAND);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd1602_send_byte>
 242:	8f e9       	ldi	r24, 0x9F	; 159
 244:	9f e0       	ldi	r25, 0x0F	; 15
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd1602_init+0x90>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd1602_init+0x96>
 24c:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(lcd.led_pin |= 0x08, SLA_W);
 24e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 252:	88 60       	ori	r24, 0x08	; 8
 254:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 258:	6e e4       	ldi	r22, 0x4E	; 78
 25a:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
	i2c_send_packet(lcd.led_pin &=~ 0x02, SLA_W);
 25e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 262:	8d 7f       	andi	r24, 0xFD	; 253
 264:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 268:	6e e4       	ldi	r22, 0x4E	; 78
 26a:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 26e:	08 95       	ret

00000270 <lcd1602_clear>:
}

void lcd1602_clear()
{
	lcd1602_send_byte(0x01, LCD_COMMAND);
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd1602_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	8f e6       	ldi	r24, 0x6F	; 111
 27a:	97 e1       	ldi	r25, 0x17	; 23
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd1602_clear+0xc>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd1602_clear+0x12>
 282:	00 00       	nop
 284:	08 95       	ret

00000286 <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
 286:	90 e4       	ldi	r25, 0x40	; 64
 288:	69 9f       	mul	r22, r25
 28a:	80 0d       	add	r24, r0
 28c:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	80 68       	ori	r24, 0x80	; 128
 292:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd1602_send_byte>
 296:	08 95       	ret

00000298 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 2a0:	80 81       	ld	r24, Z
 2a2:	88 23       	and	r24, r24
 2a4:	59 f0       	breq	.+22     	; 0x2bc <lcd1602_send_string+0x24>
 2a6:	8f 01       	movw	r16, r30
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
 2aa:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd1602_send_char>
		i++;
 2ae:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 2b0:	f8 01       	movw	r30, r16
 2b2:	ec 0f       	add	r30, r28
 2b4:	f1 1d       	adc	r31, r1
 2b6:	80 81       	ld	r24, Z
 2b8:	81 11       	cpse	r24, r1
 2ba:	f7 cf       	rjmp	.-18     	; 0x2aa <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <main>:
#include <util/delay.h>



int main(void)
{
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	6e 97       	sbiw	r28, 0x1e	; 30
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
    int x = 0;
	char buffer[30] = {0};
 2d8:	8e 01       	movw	r16, r28
 2da:	0f 5f       	subi	r16, 0xFF	; 255
 2dc:	1f 4f       	sbci	r17, 0xFF	; 255
 2de:	8e e1       	ldi	r24, 0x1E	; 30
 2e0:	f8 01       	movw	r30, r16
 2e2:	11 92       	st	Z+, r1
 2e4:	8a 95       	dec	r24
 2e6:	e9 f7       	brne	.-6      	; 0x2e2 <main+0x1e>
	
	i2c_init();
 2e8:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	lcd1602_init();
 2ec:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd1602_init>
	lcd1602_clear();
 2f0:	0e 94 38 01 	call	0x270	; 0x270 <lcd1602_clear>
	
	//lcd1602_send_char('a');
	//lcd1602_send_string("Hello from");
	//lcd1602_goto_xy(0,1); //kolona, red
	//lcd1602_send_string("Atmel Studio 7");
	lcd1602_send_string("Counter:");
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 4c 01 	call	0x298	; 0x298 <lcd1602_send_string>
	
	
	
    while (1) 
    {
		lcd1602_goto_xy(0,1);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 43 01 	call	0x286	; 0x286 <lcd1602_goto_xy>
		
		sprintf(buffer, "%d", x);
 304:	1f 92       	push	r1
 306:	1f 92       	push	r1
 308:	89 e0       	ldi	r24, 0x09	; 9
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	9f 93       	push	r25
 30e:	8f 93       	push	r24
 310:	1f 93       	push	r17
 312:	0f 93       	push	r16
 314:	0e 94 cf 01 	call	0x39e	; 0x39e <sprintf>
		lcd1602_send_string(buffer);
 318:	c8 01       	movw	r24, r16
 31a:	0e 94 4c 01 	call	0x298	; 0x298 <lcd1602_send_string>
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
		x++;
 32a:	01 e0       	ldi	r16, 0x01	; 1
 32c:	10 e0       	ldi	r17, 0x00	; 0
	
    while (1) 
    {
		lcd1602_goto_xy(0,1);
		
		sprintf(buffer, "%d", x);
 32e:	0f 2e       	mov	r0, r31
 330:	f9 e0       	ldi	r31, 0x09	; 9
 332:	cf 2e       	mov	r12, r31
 334:	f1 e0       	ldi	r31, 0x01	; 1
 336:	df 2e       	mov	r13, r31
 338:	f0 2d       	mov	r31, r0
 33a:	ce 01       	movw	r24, r28
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	7c 01       	movw	r14, r24
 340:	0c c0       	rjmp	.+24     	; 0x35a <main+0x96>
		lcd1602_send_string(buffer);
		x++;
		if(x>=999)
		{
			x = 0;
			lcd1602_clear(); //ujedno i vrati kursor na 0,0
 342:	0e 94 38 01 	call	0x270	; 0x270 <lcd1602_clear>
			lcd1602_send_string("Counter:");
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 4c 01 	call	0x298	; 0x298 <lcd1602_send_string>
			lcd1602_goto_xy(0,1);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 43 01 	call	0x286	; 0x286 <lcd1602_goto_xy>
		sprintf(buffer, "%d", x);
		lcd1602_send_string(buffer);
		x++;
		if(x>=999)
		{
			x = 0;
 356:	00 e0       	ldi	r16, 0x00	; 0
 358:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	ef e1       	ldi	r30, 0x1F	; 31
 35c:	fe e4       	ldi	r31, 0x4E	; 78
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0x9a>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0xa0>
 364:	00 00       	nop
	
	
	
    while (1) 
    {
		lcd1602_goto_xy(0,1);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 43 01 	call	0x286	; 0x286 <lcd1602_goto_xy>
		
		sprintf(buffer, "%d", x);
 36e:	1f 93       	push	r17
 370:	0f 93       	push	r16
 372:	df 92       	push	r13
 374:	cf 92       	push	r12
 376:	ff 92       	push	r15
 378:	ef 92       	push	r14
 37a:	0e 94 cf 01 	call	0x39e	; 0x39e <sprintf>
		lcd1602_send_string(buffer);
 37e:	c7 01       	movw	r24, r14
 380:	0e 94 4c 01 	call	0x298	; 0x298 <lcd1602_send_string>
		x++;
 384:	0f 5f       	subi	r16, 0xFF	; 255
 386:	1f 4f       	sbci	r17, 0xFF	; 255
		if(x>=999)
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	07 3e       	cpi	r16, 0xE7	; 231
 396:	f3 e0       	ldi	r31, 0x03	; 3
 398:	1f 07       	cpc	r17, r31
 39a:	fc f2       	brlt	.-66     	; 0x35a <main+0x96>
 39c:	d2 cf       	rjmp	.-92     	; 0x342 <main+0x7e>

0000039e <sprintf>:
 39e:	ae e0       	ldi	r26, 0x0E	; 14
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	e5 ed       	ldi	r30, 0xD5	; 213
 3a4:	f1 e0       	ldi	r31, 0x01	; 1
 3a6:	0c 94 90 04 	jmp	0x920	; 0x920 <__prologue_saves__+0x1c>
 3aa:	0d 89       	ldd	r16, Y+21	; 0x15
 3ac:	1e 89       	ldd	r17, Y+22	; 0x16
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	8c 83       	std	Y+4, r24	; 0x04
 3b2:	1a 83       	std	Y+2, r17	; 0x02
 3b4:	09 83       	std	Y+1, r16	; 0x01
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	9f e7       	ldi	r25, 0x7F	; 127
 3ba:	9e 83       	std	Y+6, r25	; 0x06
 3bc:	8d 83       	std	Y+5, r24	; 0x05
 3be:	ae 01       	movw	r20, r28
 3c0:	47 5e       	subi	r20, 0xE7	; 231
 3c2:	5f 4f       	sbci	r21, 0xFF	; 255
 3c4:	6f 89       	ldd	r22, Y+23	; 0x17
 3c6:	78 8d       	ldd	r23, Y+24	; 0x18
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vfprintf>
 3d0:	ef 81       	ldd	r30, Y+7	; 0x07
 3d2:	f8 85       	ldd	r31, Y+8	; 0x08
 3d4:	e0 0f       	add	r30, r16
 3d6:	f1 1f       	adc	r31, r17
 3d8:	10 82       	st	Z, r1
 3da:	2e 96       	adiw	r28, 0x0e	; 14
 3dc:	e4 e0       	ldi	r30, 0x04	; 4
 3de:	0c 94 ac 04 	jmp	0x958	; 0x958 <__epilogue_restores__+0x1c>

000003e2 <vfprintf>:
 3e2:	ab e0       	ldi	r26, 0x0B	; 11
 3e4:	b0 e0       	ldi	r27, 0x00	; 0
 3e6:	e7 ef       	ldi	r30, 0xF7	; 247
 3e8:	f1 e0       	ldi	r31, 0x01	; 1
 3ea:	0c 94 82 04 	jmp	0x904	; 0x904 <__prologue_saves__>
 3ee:	6c 01       	movw	r12, r24
 3f0:	7b 01       	movw	r14, r22
 3f2:	8a 01       	movw	r16, r20
 3f4:	fc 01       	movw	r30, r24
 3f6:	17 82       	std	Z+7, r1	; 0x07
 3f8:	16 82       	std	Z+6, r1	; 0x06
 3fa:	83 81       	ldd	r24, Z+3	; 0x03
 3fc:	81 ff       	sbrs	r24, 1
 3fe:	cc c1       	rjmp	.+920    	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
 400:	ce 01       	movw	r24, r28
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	3c 01       	movw	r6, r24
 406:	f6 01       	movw	r30, r12
 408:	93 81       	ldd	r25, Z+3	; 0x03
 40a:	f7 01       	movw	r30, r14
 40c:	93 fd       	sbrc	r25, 3
 40e:	85 91       	lpm	r24, Z+
 410:	93 ff       	sbrs	r25, 3
 412:	81 91       	ld	r24, Z+
 414:	7f 01       	movw	r14, r30
 416:	88 23       	and	r24, r24
 418:	09 f4       	brne	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	ba c1       	rjmp	.+884    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 41c:	85 32       	cpi	r24, 0x25	; 37
 41e:	39 f4       	brne	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	93 fd       	sbrc	r25, 3
 422:	85 91       	lpm	r24, Z+
 424:	93 ff       	sbrs	r25, 3
 426:	81 91       	ld	r24, Z+
 428:	7f 01       	movw	r14, r30
 42a:	85 32       	cpi	r24, 0x25	; 37
 42c:	29 f4       	brne	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42e:	b6 01       	movw	r22, r12
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <fputc>
 436:	e7 cf       	rjmp	.-50     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 438:	91 2c       	mov	r9, r1
 43a:	21 2c       	mov	r2, r1
 43c:	31 2c       	mov	r3, r1
 43e:	ff e1       	ldi	r31, 0x1F	; 31
 440:	f3 15       	cp	r31, r3
 442:	d8 f0       	brcs	.+54     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 444:	8b 32       	cpi	r24, 0x2B	; 43
 446:	79 f0       	breq	.+30     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 448:	38 f4       	brcc	.+14     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44a:	80 32       	cpi	r24, 0x20	; 32
 44c:	79 f0       	breq	.+30     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 44e:	83 32       	cpi	r24, 0x23	; 35
 450:	a1 f4       	brne	.+40     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 452:	23 2d       	mov	r18, r3
 454:	20 61       	ori	r18, 0x10	; 16
 456:	1d c0       	rjmp	.+58     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 458:	8d 32       	cpi	r24, 0x2D	; 45
 45a:	61 f0       	breq	.+24     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 45c:	80 33       	cpi	r24, 0x30	; 48
 45e:	69 f4       	brne	.+26     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 460:	23 2d       	mov	r18, r3
 462:	21 60       	ori	r18, 0x01	; 1
 464:	16 c0       	rjmp	.+44     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 466:	83 2d       	mov	r24, r3
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	38 2e       	mov	r3, r24
 46c:	e3 2d       	mov	r30, r3
 46e:	e4 60       	ori	r30, 0x04	; 4
 470:	3e 2e       	mov	r3, r30
 472:	2a c0       	rjmp	.+84     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 474:	f3 2d       	mov	r31, r3
 476:	f8 60       	ori	r31, 0x08	; 8
 478:	1d c0       	rjmp	.+58     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 47a:	37 fc       	sbrc	r3, 7
 47c:	2d c0       	rjmp	.+90     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 47e:	20 ed       	ldi	r18, 0xD0	; 208
 480:	28 0f       	add	r18, r24
 482:	2a 30       	cpi	r18, 0x0A	; 10
 484:	40 f0       	brcs	.+16     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 486:	8e 32       	cpi	r24, 0x2E	; 46
 488:	b9 f4       	brne	.+46     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 48a:	36 fc       	sbrc	r3, 6
 48c:	81 c1       	rjmp	.+770    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 48e:	23 2d       	mov	r18, r3
 490:	20 64       	ori	r18, 0x40	; 64
 492:	32 2e       	mov	r3, r18
 494:	19 c0       	rjmp	.+50     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 496:	36 fe       	sbrs	r3, 6
 498:	06 c0       	rjmp	.+12     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49a:	8a e0       	ldi	r24, 0x0A	; 10
 49c:	98 9e       	mul	r9, r24
 49e:	20 0d       	add	r18, r0
 4a0:	11 24       	eor	r1, r1
 4a2:	92 2e       	mov	r9, r18
 4a4:	11 c0       	rjmp	.+34     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4a6:	ea e0       	ldi	r30, 0x0A	; 10
 4a8:	2e 9e       	mul	r2, r30
 4aa:	20 0d       	add	r18, r0
 4ac:	11 24       	eor	r1, r1
 4ae:	22 2e       	mov	r2, r18
 4b0:	f3 2d       	mov	r31, r3
 4b2:	f0 62       	ori	r31, 0x20	; 32
 4b4:	3f 2e       	mov	r3, r31
 4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4b8:	8c 36       	cpi	r24, 0x6C	; 108
 4ba:	21 f4       	brne	.+8      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4bc:	83 2d       	mov	r24, r3
 4be:	80 68       	ori	r24, 0x80	; 128
 4c0:	38 2e       	mov	r3, r24
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c4:	88 36       	cpi	r24, 0x68	; 104
 4c6:	41 f4       	brne	.+16     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4c8:	f7 01       	movw	r30, r14
 4ca:	93 fd       	sbrc	r25, 3
 4cc:	85 91       	lpm	r24, Z+
 4ce:	93 ff       	sbrs	r25, 3
 4d0:	81 91       	ld	r24, Z+
 4d2:	7f 01       	movw	r14, r30
 4d4:	81 11       	cpse	r24, r1
 4d6:	b3 cf       	rjmp	.-154    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 4d8:	98 2f       	mov	r25, r24
 4da:	9f 7d       	andi	r25, 0xDF	; 223
 4dc:	95 54       	subi	r25, 0x45	; 69
 4de:	93 30       	cpi	r25, 0x03	; 3
 4e0:	28 f4       	brcc	.+10     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4e2:	0c 5f       	subi	r16, 0xFC	; 252
 4e4:	1f 4f       	sbci	r17, 0xFF	; 255
 4e6:	9f e3       	ldi	r25, 0x3F	; 63
 4e8:	99 83       	std	Y+1, r25	; 0x01
 4ea:	0d c0       	rjmp	.+26     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4ec:	83 36       	cpi	r24, 0x63	; 99
 4ee:	31 f0       	breq	.+12     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f0:	83 37       	cpi	r24, 0x73	; 115
 4f2:	71 f0       	breq	.+28     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 4f4:	83 35       	cpi	r24, 0x53	; 83
 4f6:	09 f0       	breq	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f8:	59 c0       	rjmp	.+178    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 4fa:	21 c0       	rjmp	.+66     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 4fc:	f8 01       	movw	r30, r16
 4fe:	80 81       	ld	r24, Z
 500:	89 83       	std	Y+1, r24	; 0x01
 502:	0e 5f       	subi	r16, 0xFE	; 254
 504:	1f 4f       	sbci	r17, 0xFF	; 255
 506:	88 24       	eor	r8, r8
 508:	83 94       	inc	r8
 50a:	91 2c       	mov	r9, r1
 50c:	53 01       	movw	r10, r6
 50e:	13 c0       	rjmp	.+38     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 510:	28 01       	movw	r4, r16
 512:	f2 e0       	ldi	r31, 0x02	; 2
 514:	4f 0e       	add	r4, r31
 516:	51 1c       	adc	r5, r1
 518:	f8 01       	movw	r30, r16
 51a:	a0 80       	ld	r10, Z
 51c:	b1 80       	ldd	r11, Z+1	; 0x01
 51e:	36 fe       	sbrs	r3, 6
 520:	03 c0       	rjmp	.+6      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 522:	69 2d       	mov	r22, r9
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 528:	6f ef       	ldi	r22, 0xFF	; 255
 52a:	7f ef       	ldi	r23, 0xFF	; 255
 52c:	c5 01       	movw	r24, r10
 52e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <strnlen>
 532:	4c 01       	movw	r8, r24
 534:	82 01       	movw	r16, r4
 536:	f3 2d       	mov	r31, r3
 538:	ff 77       	andi	r31, 0x7F	; 127
 53a:	3f 2e       	mov	r3, r31
 53c:	16 c0       	rjmp	.+44     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 53e:	28 01       	movw	r4, r16
 540:	22 e0       	ldi	r18, 0x02	; 2
 542:	42 0e       	add	r4, r18
 544:	51 1c       	adc	r5, r1
 546:	f8 01       	movw	r30, r16
 548:	a0 80       	ld	r10, Z
 54a:	b1 80       	ldd	r11, Z+1	; 0x01
 54c:	36 fe       	sbrs	r3, 6
 54e:	03 c0       	rjmp	.+6      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 550:	69 2d       	mov	r22, r9
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 556:	6f ef       	ldi	r22, 0xFF	; 255
 558:	7f ef       	ldi	r23, 0xFF	; 255
 55a:	c5 01       	movw	r24, r10
 55c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <strnlen_P>
 560:	4c 01       	movw	r8, r24
 562:	f3 2d       	mov	r31, r3
 564:	f0 68       	ori	r31, 0x80	; 128
 566:	3f 2e       	mov	r3, r31
 568:	82 01       	movw	r16, r4
 56a:	33 fc       	sbrc	r3, 3
 56c:	1b c0       	rjmp	.+54     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 56e:	82 2d       	mov	r24, r2
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	88 16       	cp	r8, r24
 574:	99 06       	cpc	r9, r25
 576:	b0 f4       	brcc	.+44     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 578:	b6 01       	movw	r22, r12
 57a:	80 e2       	ldi	r24, 0x20	; 32
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <fputc>
 582:	2a 94       	dec	r2
 584:	f4 cf       	rjmp	.-24     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 586:	f5 01       	movw	r30, r10
 588:	37 fc       	sbrc	r3, 7
 58a:	85 91       	lpm	r24, Z+
 58c:	37 fe       	sbrs	r3, 7
 58e:	81 91       	ld	r24, Z+
 590:	5f 01       	movw	r10, r30
 592:	b6 01       	movw	r22, r12
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <fputc>
 59a:	21 10       	cpse	r2, r1
 59c:	2a 94       	dec	r2
 59e:	21 e0       	ldi	r18, 0x01	; 1
 5a0:	82 1a       	sub	r8, r18
 5a2:	91 08       	sbc	r9, r1
 5a4:	81 14       	cp	r8, r1
 5a6:	91 04       	cpc	r9, r1
 5a8:	71 f7       	brne	.-36     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 5aa:	e8 c0       	rjmp	.+464    	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
 5ac:	84 36       	cpi	r24, 0x64	; 100
 5ae:	11 f0       	breq	.+4      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5b0:	89 36       	cpi	r24, 0x69	; 105
 5b2:	41 f5       	brne	.+80     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5b4:	f8 01       	movw	r30, r16
 5b6:	37 fe       	sbrs	r3, 7
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5ba:	60 81       	ld	r22, Z
 5bc:	71 81       	ldd	r23, Z+1	; 0x01
 5be:	82 81       	ldd	r24, Z+2	; 0x02
 5c0:	93 81       	ldd	r25, Z+3	; 0x03
 5c2:	0c 5f       	subi	r16, 0xFC	; 252
 5c4:	1f 4f       	sbci	r17, 0xFF	; 255
 5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5c8:	60 81       	ld	r22, Z
 5ca:	71 81       	ldd	r23, Z+1	; 0x01
 5cc:	07 2e       	mov	r0, r23
 5ce:	00 0c       	add	r0, r0
 5d0:	88 0b       	sbc	r24, r24
 5d2:	99 0b       	sbc	r25, r25
 5d4:	0e 5f       	subi	r16, 0xFE	; 254
 5d6:	1f 4f       	sbci	r17, 0xFF	; 255
 5d8:	f3 2d       	mov	r31, r3
 5da:	ff 76       	andi	r31, 0x6F	; 111
 5dc:	3f 2e       	mov	r3, r31
 5de:	97 ff       	sbrs	r25, 7
 5e0:	09 c0       	rjmp	.+18     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5e2:	90 95       	com	r25
 5e4:	80 95       	com	r24
 5e6:	70 95       	com	r23
 5e8:	61 95       	neg	r22
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	f0 68       	ori	r31, 0x80	; 128
 5f2:	3f 2e       	mov	r3, r31
 5f4:	2a e0       	ldi	r18, 0x0A	; 10
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	a3 01       	movw	r20, r6
 5fa:	0e 94 24 04 	call	0x848	; 0x848 <__ultoa_invert>
 5fe:	88 2e       	mov	r8, r24
 600:	86 18       	sub	r8, r6
 602:	45 c0       	rjmp	.+138    	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 604:	85 37       	cpi	r24, 0x75	; 117
 606:	31 f4       	brne	.+12     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 608:	23 2d       	mov	r18, r3
 60a:	2f 7e       	andi	r18, 0xEF	; 239
 60c:	b2 2e       	mov	r11, r18
 60e:	2a e0       	ldi	r18, 0x0A	; 10
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	25 c0       	rjmp	.+74     	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 614:	93 2d       	mov	r25, r3
 616:	99 7f       	andi	r25, 0xF9	; 249
 618:	b9 2e       	mov	r11, r25
 61a:	8f 36       	cpi	r24, 0x6F	; 111
 61c:	c1 f0       	breq	.+48     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 61e:	18 f4       	brcc	.+6      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 620:	88 35       	cpi	r24, 0x58	; 88
 622:	79 f0       	breq	.+30     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 624:	b5 c0       	rjmp	.+362    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 626:	80 37       	cpi	r24, 0x70	; 112
 628:	19 f0       	breq	.+6      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 62a:	88 37       	cpi	r24, 0x78	; 120
 62c:	21 f0       	breq	.+8      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 62e:	b0 c0       	rjmp	.+352    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 630:	e9 2f       	mov	r30, r25
 632:	e0 61       	ori	r30, 0x10	; 16
 634:	be 2e       	mov	r11, r30
 636:	b4 fe       	sbrs	r11, 4
 638:	0d c0       	rjmp	.+26     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 63a:	fb 2d       	mov	r31, r11
 63c:	f4 60       	ori	r31, 0x04	; 4
 63e:	bf 2e       	mov	r11, r31
 640:	09 c0       	rjmp	.+18     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 642:	34 fe       	sbrs	r3, 4
 644:	0a c0       	rjmp	.+20     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 646:	29 2f       	mov	r18, r25
 648:	26 60       	ori	r18, 0x06	; 6
 64a:	b2 2e       	mov	r11, r18
 64c:	06 c0       	rjmp	.+12     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 64e:	28 e0       	ldi	r18, 0x08	; 8
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	05 c0       	rjmp	.+10     	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 654:	20 e1       	ldi	r18, 0x10	; 16
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 65a:	20 e1       	ldi	r18, 0x10	; 16
 65c:	32 e0       	ldi	r19, 0x02	; 2
 65e:	f8 01       	movw	r30, r16
 660:	b7 fe       	sbrs	r11, 7
 662:	07 c0       	rjmp	.+14     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 664:	60 81       	ld	r22, Z
 666:	71 81       	ldd	r23, Z+1	; 0x01
 668:	82 81       	ldd	r24, Z+2	; 0x02
 66a:	93 81       	ldd	r25, Z+3	; 0x03
 66c:	0c 5f       	subi	r16, 0xFC	; 252
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	06 c0       	rjmp	.+12     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 672:	60 81       	ld	r22, Z
 674:	71 81       	ldd	r23, Z+1	; 0x01
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 5f       	subi	r16, 0xFE	; 254
 67c:	1f 4f       	sbci	r17, 0xFF	; 255
 67e:	a3 01       	movw	r20, r6
 680:	0e 94 24 04 	call	0x848	; 0x848 <__ultoa_invert>
 684:	88 2e       	mov	r8, r24
 686:	86 18       	sub	r8, r6
 688:	fb 2d       	mov	r31, r11
 68a:	ff 77       	andi	r31, 0x7F	; 127
 68c:	3f 2e       	mov	r3, r31
 68e:	36 fe       	sbrs	r3, 6
 690:	0d c0       	rjmp	.+26     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 692:	23 2d       	mov	r18, r3
 694:	2e 7f       	andi	r18, 0xFE	; 254
 696:	a2 2e       	mov	r10, r18
 698:	89 14       	cp	r8, r9
 69a:	58 f4       	brcc	.+22     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 69c:	34 fe       	sbrs	r3, 4
 69e:	0b c0       	rjmp	.+22     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 6a0:	32 fc       	sbrc	r3, 2
 6a2:	09 c0       	rjmp	.+18     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 6a4:	83 2d       	mov	r24, r3
 6a6:	8e 7e       	andi	r24, 0xEE	; 238
 6a8:	a8 2e       	mov	r10, r24
 6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 6ac:	b8 2c       	mov	r11, r8
 6ae:	a3 2c       	mov	r10, r3
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6b2:	b8 2c       	mov	r11, r8
 6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6b6:	b9 2c       	mov	r11, r9
 6b8:	a4 fe       	sbrs	r10, 4
 6ba:	0f c0       	rjmp	.+30     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 6bc:	fe 01       	movw	r30, r28
 6be:	e8 0d       	add	r30, r8
 6c0:	f1 1d       	adc	r31, r1
 6c2:	80 81       	ld	r24, Z
 6c4:	80 33       	cpi	r24, 0x30	; 48
 6c6:	21 f4       	brne	.+8      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6c8:	9a 2d       	mov	r25, r10
 6ca:	99 7e       	andi	r25, 0xE9	; 233
 6cc:	a9 2e       	mov	r10, r25
 6ce:	09 c0       	rjmp	.+18     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6d0:	a2 fe       	sbrs	r10, 2
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6d4:	b3 94       	inc	r11
 6d6:	b3 94       	inc	r11
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6da:	8a 2d       	mov	r24, r10
 6dc:	86 78       	andi	r24, 0x86	; 134
 6de:	09 f0       	breq	.+2      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6e0:	b3 94       	inc	r11
 6e2:	a3 fc       	sbrc	r10, 3
 6e4:	11 c0       	rjmp	.+34     	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 6e6:	a0 fe       	sbrs	r10, 0
 6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6ea:	b2 14       	cp	r11, r2
 6ec:	88 f4       	brcc	.+34     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 6ee:	28 0c       	add	r2, r8
 6f0:	92 2c       	mov	r9, r2
 6f2:	9b 18       	sub	r9, r11
 6f4:	0e c0       	rjmp	.+28     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6f6:	b2 14       	cp	r11, r2
 6f8:	60 f4       	brcc	.+24     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fa:	b6 01       	movw	r22, r12
 6fc:	80 e2       	ldi	r24, 0x20	; 32
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <fputc>
 704:	b3 94       	inc	r11
 706:	f7 cf       	rjmp	.-18     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 708:	b2 14       	cp	r11, r2
 70a:	18 f4       	brcc	.+6      	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 70c:	2b 18       	sub	r2, r11
 70e:	02 c0       	rjmp	.+4      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
 710:	98 2c       	mov	r9, r8
 712:	21 2c       	mov	r2, r1
 714:	a4 fe       	sbrs	r10, 4
 716:	10 c0       	rjmp	.+32     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 718:	b6 01       	movw	r22, r12
 71a:	80 e3       	ldi	r24, 0x30	; 48
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <fputc>
 722:	a2 fe       	sbrs	r10, 2
 724:	17 c0       	rjmp	.+46     	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
 726:	a1 fc       	sbrc	r10, 1
 728:	03 c0       	rjmp	.+6      	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 72a:	88 e7       	ldi	r24, 0x78	; 120
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 730:	88 e5       	ldi	r24, 0x58	; 88
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	b6 01       	movw	r22, r12
 736:	0c c0       	rjmp	.+24     	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
 738:	8a 2d       	mov	r24, r10
 73a:	86 78       	andi	r24, 0x86	; 134
 73c:	59 f0       	breq	.+22     	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
 73e:	a1 fe       	sbrs	r10, 1
 740:	02 c0       	rjmp	.+4      	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 742:	8b e2       	ldi	r24, 0x2B	; 43
 744:	01 c0       	rjmp	.+2      	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 746:	80 e2       	ldi	r24, 0x20	; 32
 748:	a7 fc       	sbrc	r10, 7
 74a:	8d e2       	ldi	r24, 0x2D	; 45
 74c:	b6 01       	movw	r22, r12
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <fputc>
 754:	89 14       	cp	r8, r9
 756:	38 f4       	brcc	.+14     	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 758:	b6 01       	movw	r22, r12
 75a:	80 e3       	ldi	r24, 0x30	; 48
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <fputc>
 762:	9a 94       	dec	r9
 764:	f7 cf       	rjmp	.-18     	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
 766:	8a 94       	dec	r8
 768:	f3 01       	movw	r30, r6
 76a:	e8 0d       	add	r30, r8
 76c:	f1 1d       	adc	r31, r1
 76e:	80 81       	ld	r24, Z
 770:	b6 01       	movw	r22, r12
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <fputc>
 778:	81 10       	cpse	r8, r1
 77a:	f5 cf       	rjmp	.-22     	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 77c:	22 20       	and	r2, r2
 77e:	09 f4       	brne	.+2      	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
 780:	42 ce       	rjmp	.-892    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 782:	b6 01       	movw	r22, r12
 784:	80 e2       	ldi	r24, 0x20	; 32
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <fputc>
 78c:	2a 94       	dec	r2
 78e:	f6 cf       	rjmp	.-20     	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
 790:	f6 01       	movw	r30, r12
 792:	86 81       	ldd	r24, Z+6	; 0x06
 794:	97 81       	ldd	r25, Z+7	; 0x07
 796:	02 c0       	rjmp	.+4      	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
 798:	8f ef       	ldi	r24, 0xFF	; 255
 79a:	9f ef       	ldi	r25, 0xFF	; 255
 79c:	2b 96       	adiw	r28, 0x0b	; 11
 79e:	e2 e1       	ldi	r30, 0x12	; 18
 7a0:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__epilogue_restores__>

000007a4 <strnlen_P>:
 7a4:	fc 01       	movw	r30, r24
 7a6:	05 90       	lpm	r0, Z+
 7a8:	61 50       	subi	r22, 0x01	; 1
 7aa:	70 40       	sbci	r23, 0x00	; 0
 7ac:	01 10       	cpse	r0, r1
 7ae:	d8 f7       	brcc	.-10     	; 0x7a6 <strnlen_P+0x2>
 7b0:	80 95       	com	r24
 7b2:	90 95       	com	r25
 7b4:	8e 0f       	add	r24, r30
 7b6:	9f 1f       	adc	r25, r31
 7b8:	08 95       	ret

000007ba <strnlen>:
 7ba:	fc 01       	movw	r30, r24
 7bc:	61 50       	subi	r22, 0x01	; 1
 7be:	70 40       	sbci	r23, 0x00	; 0
 7c0:	01 90       	ld	r0, Z+
 7c2:	01 10       	cpse	r0, r1
 7c4:	d8 f7       	brcc	.-10     	; 0x7bc <strnlen+0x2>
 7c6:	80 95       	com	r24
 7c8:	90 95       	com	r25
 7ca:	8e 0f       	add	r24, r30
 7cc:	9f 1f       	adc	r25, r31
 7ce:	08 95       	ret

000007d0 <fputc>:
 7d0:	0f 93       	push	r16
 7d2:	1f 93       	push	r17
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
 7d8:	fb 01       	movw	r30, r22
 7da:	23 81       	ldd	r18, Z+3	; 0x03
 7dc:	21 fd       	sbrc	r18, 1
 7de:	03 c0       	rjmp	.+6      	; 0x7e6 <fputc+0x16>
 7e0:	8f ef       	ldi	r24, 0xFF	; 255
 7e2:	9f ef       	ldi	r25, 0xFF	; 255
 7e4:	2c c0       	rjmp	.+88     	; 0x83e <fputc+0x6e>
 7e6:	22 ff       	sbrs	r18, 2
 7e8:	16 c0       	rjmp	.+44     	; 0x816 <fputc+0x46>
 7ea:	46 81       	ldd	r20, Z+6	; 0x06
 7ec:	57 81       	ldd	r21, Z+7	; 0x07
 7ee:	24 81       	ldd	r18, Z+4	; 0x04
 7f0:	35 81       	ldd	r19, Z+5	; 0x05
 7f2:	42 17       	cp	r20, r18
 7f4:	53 07       	cpc	r21, r19
 7f6:	44 f4       	brge	.+16     	; 0x808 <fputc+0x38>
 7f8:	a0 81       	ld	r26, Z
 7fa:	b1 81       	ldd	r27, Z+1	; 0x01
 7fc:	9d 01       	movw	r18, r26
 7fe:	2f 5f       	subi	r18, 0xFF	; 255
 800:	3f 4f       	sbci	r19, 0xFF	; 255
 802:	31 83       	std	Z+1, r19	; 0x01
 804:	20 83       	st	Z, r18
 806:	8c 93       	st	X, r24
 808:	26 81       	ldd	r18, Z+6	; 0x06
 80a:	37 81       	ldd	r19, Z+7	; 0x07
 80c:	2f 5f       	subi	r18, 0xFF	; 255
 80e:	3f 4f       	sbci	r19, 0xFF	; 255
 810:	37 83       	std	Z+7, r19	; 0x07
 812:	26 83       	std	Z+6, r18	; 0x06
 814:	14 c0       	rjmp	.+40     	; 0x83e <fputc+0x6e>
 816:	8b 01       	movw	r16, r22
 818:	ec 01       	movw	r28, r24
 81a:	fb 01       	movw	r30, r22
 81c:	00 84       	ldd	r0, Z+8	; 0x08
 81e:	f1 85       	ldd	r31, Z+9	; 0x09
 820:	e0 2d       	mov	r30, r0
 822:	09 95       	icall
 824:	89 2b       	or	r24, r25
 826:	e1 f6       	brne	.-72     	; 0x7e0 <fputc+0x10>
 828:	d8 01       	movw	r26, r16
 82a:	16 96       	adiw	r26, 0x06	; 6
 82c:	8d 91       	ld	r24, X+
 82e:	9c 91       	ld	r25, X
 830:	17 97       	sbiw	r26, 0x07	; 7
 832:	01 96       	adiw	r24, 0x01	; 1
 834:	17 96       	adiw	r26, 0x07	; 7
 836:	9c 93       	st	X, r25
 838:	8e 93       	st	-X, r24
 83a:	16 97       	sbiw	r26, 0x06	; 6
 83c:	ce 01       	movw	r24, r28
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	1f 91       	pop	r17
 844:	0f 91       	pop	r16
 846:	08 95       	ret

00000848 <__ultoa_invert>:
 848:	fa 01       	movw	r30, r20
 84a:	aa 27       	eor	r26, r26
 84c:	28 30       	cpi	r18, 0x08	; 8
 84e:	51 f1       	breq	.+84     	; 0x8a4 <__ultoa_invert+0x5c>
 850:	20 31       	cpi	r18, 0x10	; 16
 852:	81 f1       	breq	.+96     	; 0x8b4 <__ultoa_invert+0x6c>
 854:	e8 94       	clt
 856:	6f 93       	push	r22
 858:	6e 7f       	andi	r22, 0xFE	; 254
 85a:	6e 5f       	subi	r22, 0xFE	; 254
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	af 4f       	sbci	r26, 0xFF	; 255
 864:	b1 e0       	ldi	r27, 0x01	; 1
 866:	3e d0       	rcall	.+124    	; 0x8e4 <__ultoa_invert+0x9c>
 868:	b4 e0       	ldi	r27, 0x04	; 4
 86a:	3c d0       	rcall	.+120    	; 0x8e4 <__ultoa_invert+0x9c>
 86c:	67 0f       	add	r22, r23
 86e:	78 1f       	adc	r23, r24
 870:	89 1f       	adc	r24, r25
 872:	9a 1f       	adc	r25, r26
 874:	a1 1d       	adc	r26, r1
 876:	68 0f       	add	r22, r24
 878:	79 1f       	adc	r23, r25
 87a:	8a 1f       	adc	r24, r26
 87c:	91 1d       	adc	r25, r1
 87e:	a1 1d       	adc	r26, r1
 880:	6a 0f       	add	r22, r26
 882:	71 1d       	adc	r23, r1
 884:	81 1d       	adc	r24, r1
 886:	91 1d       	adc	r25, r1
 888:	a1 1d       	adc	r26, r1
 88a:	20 d0       	rcall	.+64     	; 0x8cc <__ultoa_invert+0x84>
 88c:	09 f4       	brne	.+2      	; 0x890 <__ultoa_invert+0x48>
 88e:	68 94       	set
 890:	3f 91       	pop	r19
 892:	2a e0       	ldi	r18, 0x0A	; 10
 894:	26 9f       	mul	r18, r22
 896:	11 24       	eor	r1, r1
 898:	30 19       	sub	r19, r0
 89a:	30 5d       	subi	r19, 0xD0	; 208
 89c:	31 93       	st	Z+, r19
 89e:	de f6       	brtc	.-74     	; 0x856 <__ultoa_invert+0xe>
 8a0:	cf 01       	movw	r24, r30
 8a2:	08 95       	ret
 8a4:	46 2f       	mov	r20, r22
 8a6:	47 70       	andi	r20, 0x07	; 7
 8a8:	40 5d       	subi	r20, 0xD0	; 208
 8aa:	41 93       	st	Z+, r20
 8ac:	b3 e0       	ldi	r27, 0x03	; 3
 8ae:	0f d0       	rcall	.+30     	; 0x8ce <__ultoa_invert+0x86>
 8b0:	c9 f7       	brne	.-14     	; 0x8a4 <__ultoa_invert+0x5c>
 8b2:	f6 cf       	rjmp	.-20     	; 0x8a0 <__ultoa_invert+0x58>
 8b4:	46 2f       	mov	r20, r22
 8b6:	4f 70       	andi	r20, 0x0F	; 15
 8b8:	40 5d       	subi	r20, 0xD0	; 208
 8ba:	4a 33       	cpi	r20, 0x3A	; 58
 8bc:	18 f0       	brcs	.+6      	; 0x8c4 <__ultoa_invert+0x7c>
 8be:	49 5d       	subi	r20, 0xD9	; 217
 8c0:	31 fd       	sbrc	r19, 1
 8c2:	40 52       	subi	r20, 0x20	; 32
 8c4:	41 93       	st	Z+, r20
 8c6:	02 d0       	rcall	.+4      	; 0x8cc <__ultoa_invert+0x84>
 8c8:	a9 f7       	brne	.-22     	; 0x8b4 <__ultoa_invert+0x6c>
 8ca:	ea cf       	rjmp	.-44     	; 0x8a0 <__ultoa_invert+0x58>
 8cc:	b4 e0       	ldi	r27, 0x04	; 4
 8ce:	a6 95       	lsr	r26
 8d0:	97 95       	ror	r25
 8d2:	87 95       	ror	r24
 8d4:	77 95       	ror	r23
 8d6:	67 95       	ror	r22
 8d8:	ba 95       	dec	r27
 8da:	c9 f7       	brne	.-14     	; 0x8ce <__ultoa_invert+0x86>
 8dc:	00 97       	sbiw	r24, 0x00	; 0
 8de:	61 05       	cpc	r22, r1
 8e0:	71 05       	cpc	r23, r1
 8e2:	08 95       	ret
 8e4:	9b 01       	movw	r18, r22
 8e6:	ac 01       	movw	r20, r24
 8e8:	0a 2e       	mov	r0, r26
 8ea:	06 94       	lsr	r0
 8ec:	57 95       	ror	r21
 8ee:	47 95       	ror	r20
 8f0:	37 95       	ror	r19
 8f2:	27 95       	ror	r18
 8f4:	ba 95       	dec	r27
 8f6:	c9 f7       	brne	.-14     	; 0x8ea <__ultoa_invert+0xa2>
 8f8:	62 0f       	add	r22, r18
 8fa:	73 1f       	adc	r23, r19
 8fc:	84 1f       	adc	r24, r20
 8fe:	95 1f       	adc	r25, r21
 900:	a0 1d       	adc	r26, r0
 902:	08 95       	ret

00000904 <__prologue_saves__>:
 904:	2f 92       	push	r2
 906:	3f 92       	push	r3
 908:	4f 92       	push	r4
 90a:	5f 92       	push	r5
 90c:	6f 92       	push	r6
 90e:	7f 92       	push	r7
 910:	8f 92       	push	r8
 912:	9f 92       	push	r9
 914:	af 92       	push	r10
 916:	bf 92       	push	r11
 918:	cf 92       	push	r12
 91a:	df 92       	push	r13
 91c:	ef 92       	push	r14
 91e:	ff 92       	push	r15
 920:	0f 93       	push	r16
 922:	1f 93       	push	r17
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	cd b7       	in	r28, 0x3d	; 61
 92a:	de b7       	in	r29, 0x3e	; 62
 92c:	ca 1b       	sub	r28, r26
 92e:	db 0b       	sbc	r29, r27
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	f8 94       	cli
 934:	de bf       	out	0x3e, r29	; 62
 936:	0f be       	out	0x3f, r0	; 63
 938:	cd bf       	out	0x3d, r28	; 61
 93a:	09 94       	ijmp

0000093c <__epilogue_restores__>:
 93c:	2a 88       	ldd	r2, Y+18	; 0x12
 93e:	39 88       	ldd	r3, Y+17	; 0x11
 940:	48 88       	ldd	r4, Y+16	; 0x10
 942:	5f 84       	ldd	r5, Y+15	; 0x0f
 944:	6e 84       	ldd	r6, Y+14	; 0x0e
 946:	7d 84       	ldd	r7, Y+13	; 0x0d
 948:	8c 84       	ldd	r8, Y+12	; 0x0c
 94a:	9b 84       	ldd	r9, Y+11	; 0x0b
 94c:	aa 84       	ldd	r10, Y+10	; 0x0a
 94e:	b9 84       	ldd	r11, Y+9	; 0x09
 950:	c8 84       	ldd	r12, Y+8	; 0x08
 952:	df 80       	ldd	r13, Y+7	; 0x07
 954:	ee 80       	ldd	r14, Y+6	; 0x06
 956:	fd 80       	ldd	r15, Y+5	; 0x05
 958:	0c 81       	ldd	r16, Y+4	; 0x04
 95a:	1b 81       	ldd	r17, Y+3	; 0x03
 95c:	aa 81       	ldd	r26, Y+2	; 0x02
 95e:	b9 81       	ldd	r27, Y+1	; 0x01
 960:	ce 0f       	add	r28, r30
 962:	d1 1d       	adc	r29, r1
 964:	0f b6       	in	r0, 0x3f	; 63
 966:	f8 94       	cli
 968:	de bf       	out	0x3e, r29	; 62
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	cd bf       	out	0x3d, r28	; 61
 96e:	ed 01       	movw	r28, r26
 970:	08 95       	ret

00000972 <_exit>:
 972:	f8 94       	cli

00000974 <__stop_program>:
 974:	ff cf       	rjmp	.-2      	; 0x974 <__stop_program>
