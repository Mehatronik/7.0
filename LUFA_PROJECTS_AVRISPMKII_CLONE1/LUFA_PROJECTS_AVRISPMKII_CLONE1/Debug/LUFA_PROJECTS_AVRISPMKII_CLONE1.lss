
LUFA_PROJECTS_AVRISPMKII_CLONE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00001de6  00001e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001de6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080012a  0080012a  00001ec4  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00001ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ef8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003b8  00000000  00000000  00001f38  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007274  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e9d  00000000  00000000  00009564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000c4ec  00000000  00000000  0000b401  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c8c  00000000  00000000  000178f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00016aa1  00000000  00000000  0001857c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000051a6  00000000  00000000  0002f01d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000db8  00000000  00000000  000341c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00008522  00000000  00000000  00034f7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	18 c1       	rjmp	.+560    	; 0x232 <__ctors_end>
       2:	00 00       	nop
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	00 00       	nop
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	00 00       	nop
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	00 00       	nop
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	00 00       	nop
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	00 00       	nop
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	26 c1       	rjmp	.+588    	; 0x26a <__bad_interrupt>
      1e:	00 00       	nop
      20:	24 c1       	rjmp	.+584    	; 0x26a <__bad_interrupt>
      22:	00 00       	nop
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	00 00       	nop
      28:	20 c1       	rjmp	.+576    	; 0x26a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__vector_11>
      30:	1c c1       	rjmp	.+568    	; 0x26a <__bad_interrupt>
      32:	00 00       	nop
      34:	1a c1       	rjmp	.+564    	; 0x26a <__bad_interrupt>
      36:	00 00       	nop
      38:	18 c1       	rjmp	.+560    	; 0x26a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	58 c7       	rjmp	.+3760   	; 0xeee <__vector_15>
      3e:	00 00       	nop
      40:	14 c1       	rjmp	.+552    	; 0x26a <__bad_interrupt>
      42:	00 00       	nop
      44:	12 c1       	rjmp	.+548    	; 0x26a <__bad_interrupt>
      46:	00 00       	nop
      48:	10 c1       	rjmp	.+544    	; 0x26a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__vector_19>
      50:	0c c1       	rjmp	.+536    	; 0x26a <__bad_interrupt>
      52:	00 00       	nop
      54:	0a c1       	rjmp	.+532    	; 0x26a <__bad_interrupt>
      56:	00 00       	nop
      58:	08 c1       	rjmp	.+528    	; 0x26a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	06 c1       	rjmp	.+524    	; 0x26a <__bad_interrupt>
      5e:	00 00       	nop
      60:	04 c1       	rjmp	.+520    	; 0x26a <__bad_interrupt>
      62:	00 00       	nop
      64:	02 c1       	rjmp	.+516    	; 0x26a <__bad_interrupt>
      66:	00 00       	nop
      68:	00 c1       	rjmp	.+512    	; 0x26a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fe c0       	rjmp	.+508    	; 0x26a <__bad_interrupt>
      6e:	00 00       	nop
      70:	fc c0       	rjmp	.+504    	; 0x26a <__bad_interrupt>
	...

00000074 <AVRISP_SerialString>:
      74:	1c 03 30 00 30 00 30 00 32 00 30 00 30 00 30 00     ..0.0.0.2.0.0.0.
      84:	31 00 32 00 33 00 34 00 35 00 00 00 00 00           1.2.3.4.5.....

00000092 <AVRISP_ProductString>:
      92:	18 03 41 00 56 00 52 00 49 00 53 00 50 00 20 00     ..A.V.R.I.S.P. .
      a2:	6d 00 6b 00 49 00 49 00 00 00                       m.k.I.I...

000000ac <AVRISP_ManufacturerString>:
      ac:	0c 03 41 00 54 00 4d 00 45 00 4c 00 00 00           ..A.T.M.E.L...

000000ba <AVRISP_LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <AVRISP_ConfigurationDescriptor>:
      be:	09 02 20 00 01 01 00 c0 32 09 04 00 00 02 ff 00     .. .....2.......
      ce:	00 00 07 05 82 02 40 00 0a 07 05 02 02 40 00 0a     ......@......@..

000000de <AVRISP_DeviceDescriptor>:
      de:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
      ee:	03 01                                               ..

000000f0 <TimerCompareFromSCKDuration>:
      f0:	04 00 04 00 04 00 05 00 05 00 06 00 06 00 06 00     ................
     100:	07 00 07 00 07 00 08 00 09 00 09 00 09 00 0a 00     ................
     110:	0a 00 0b 00 0c 00 0c 00 0d 00 0e 00 0f 00 0f 00     ................
     120:	10 00 11 00 12 00 13 00 14 00 15 00 16 00 17 00     ................
     130:	18 00 19 00 1b 00 1c 00 1e 00 1f 00 21 00 22 00     ............!.".
     140:	24 00 26 00 28 00 2a 00 2c 00 2e 00 31 00 33 00     $.&.(.*.,...1.3.
     150:	36 00 39 00 3b 00 3e 00 41 00 45 00 48 00 4c 00     6.9.;.>.A.E.H.L.
     160:	4f 00 54 00 58 00 5c 00 61 00 65 00 6a 00 70 00     O.T.X.\.a.e.j.p.
     170:	75 00 7b 00 81 00 88 00 8e 00 96 00 9d 00 a5 00     u.{.............
     180:	ad 00 b5 00 be 00 c8 00 d2 00 dc 00 e7 00 f2 00     ................
     190:	fe 00 0a 01 18 01 25 01 34 01 43 01 53 01 64 01     ......%.4.C.S.d.
     1a0:	76 01 88 01 9b 01 af 01 c5 01 db 01 f3 01 0b 02     v...............
     1b0:	25 02 40 02 5c 02 7a 02 99 02 ba 02 dc 02 00 03     %.@.\.z.........
     1c0:	26 03 4e 03 77 03 a3 03 d1 03 01 04 32 04 67 04     &.N.w.......2.g.
     1d0:	9f 04 da 04 15 05 55 05 97 05 e1 05 28 06 76 06     ......U.....(.v.
     1e0:	c7 06 1f 07 7a 07 d7 07 33 08 a3 08 09 09 7a 09     ....z...3.....z.
     1f0:	f6 09 70 0a f7 0a 7c 0b 0d 0c ad 0c 48 0d f2 0d     ..p...|.....H...
     200:	92 0e 41 0f 01 10 d5 10 97 11 98 12 87 13 78 14     ..A...........x.
     210:	7b 15 8c 16 a4 17 d0 18 09 1a 50 1b a2 1c 0b 1e     {.........P.....
     220:	8c 1f 19 21 af 22 6f 24 37 26                       ...!."o$7&

0000022a <SPIMaskFromSCKDuration>:
     22a:	40 40 00 41 01 42 43 00                             @@.A.BC.

00000232 <__ctors_end>:
     232:	11 24       	eor	r1, r1
     234:	1f be       	out	0x3f, r1	; 63
     236:	cf ef       	ldi	r28, 0xFF	; 255
     238:	d2 e0       	ldi	r29, 0x02	; 2
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	cd bf       	out	0x3d, r28	; 61

0000023e <__do_copy_data>:
     23e:	11 e0       	ldi	r17, 0x01	; 1
     240:	a0 e0       	ldi	r26, 0x00	; 0
     242:	b1 e0       	ldi	r27, 0x01	; 1
     244:	e6 ee       	ldi	r30, 0xE6	; 230
     246:	fd e1       	ldi	r31, 0x1D	; 29
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x10>
     24a:	05 90       	lpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	aa 32       	cpi	r26, 0x2A	; 42
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0xc>

00000254 <__do_clear_bss>:
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	aa e2       	ldi	r26, 0x2A	; 42
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	01 c0       	rjmp	.+2      	; 0x25e <.do_clear_bss_start>

0000025c <.do_clear_bss_loop>:
     25c:	1d 92       	st	X+, r1

0000025e <.do_clear_bss_start>:
     25e:	ab 33       	cpi	r26, 0x3B	; 59
     260:	b2 07       	cpc	r27, r18
     262:	e1 f7       	brne	.-8      	; 0x25c <.do_clear_bss_loop>
     264:	52 d0       	rcall	.+164    	; 0x30a <main>
     266:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <_exit>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     26c:	84 b7       	in	r24, 0x34	; 52
     26e:	87 7f       	andi	r24, 0xF7	; 247
     270:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	f8 94       	cli
     276:	a8 95       	wdr
     278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     27c:	88 61       	ori	r24, 0x18	; 24
     27e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     282:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     286:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	80 e8       	ldi	r24, 0x80	; 128
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     294:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     298:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     29a:	8a b1       	in	r24, 0x0a	; 10
     29c:	80 6f       	ori	r24, 0xF0	; 240
     29e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2a0:	8b b1       	in	r24, 0x0b	; 11
     2a2:	8f 70       	andi	r24, 0x0F	; 15
     2a4:	8b b9       	out	0x0b, r24	; 11
	#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
	UpdateCurrentCompatibilityMode();
	#endif

	/* USB Stack Initialization */
	USB_Init();
     2a6:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <USB_Init>
     2aa:	08 95       	ret

000002ac <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2ac:	8b b1       	in	r24, 0x0b	; 11
     2ae:	8f 70       	andi	r24, 0x0F	; 15
     2b0:	80 63       	ori	r24, 0x30	; 48
     2b2:	8b b9       	out	0x0b, r24	; 11
     2b4:	08 95       	ret

000002b6 <EVENT_USB_Device_Disconnect>:
     2b6:	8b b1       	in	r24, 0x0b	; 11
     2b8:	8f 70       	andi	r24, 0x0F	; 15
     2ba:	80 61       	ori	r24, 0x10	; 16
     2bc:	8b b9       	out	0x0b, r24	; 11
     2be:	08 95       	ret

000002c0 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     2c0:	42 e3       	ldi	r20, 0x32	; 50
     2c2:	60 e8       	ldi	r22, 0x80	; 128
     2c4:	82 e0       	ldi	r24, 0x02	; 2
     2c6:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <Endpoint_ConfigureEndpoint_Prv>
	/* Setup AVRISP Data IN endpoint if it is using a physically different endpoint */
	if ((AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK) != (AVRISP_DATA_OUT_EPADDR & ENDPOINT_EPNUM_MASK))
	  ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPADDR, EP_TYPE_BULK, AVRISP_DATA_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2ca:	81 11       	cpse	r24, r1
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <EVENT_USB_Device_ConfigurationChanged+0x12>
     2ce:	90 e1       	ldi	r25, 0x10	; 16
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <EVENT_USB_Device_ConfigurationChanged+0x14>
     2d2:	90 e2       	ldi	r25, 0x20	; 32
     2d4:	8b b1       	in	r24, 0x0b	; 11
     2d6:	8f 70       	andi	r24, 0x0F	; 15
     2d8:	89 2b       	or	r24, r25
     2da:	8b b9       	out	0x0b, r24	; 11
     2dc:	08 95       	ret

000002de <AVRISP_Task>:

/** Processes incoming V2 Protocol commands from the host, returning a response when required. */
void AVRISP_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     2de:	8e b3       	in	r24, 0x1e	; 30
     2e0:	84 30       	cpi	r24, 0x04	; 4
     2e2:	91 f4       	brne	.+36     	; 0x308 <__stack+0x9>
	  return;

	V2Params_UpdateParamValues();
     2e4:	0e 94 9e 0a 	call	0x153c	; 0x153c <V2Params_UpdateParamValues>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     2ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     2f2:	82 ff       	sbrs	r24, 2
     2f4:	09 c0       	rjmp	.+18     	; 0x308 <__stack+0x9>
     2f6:	8b b1       	in	r24, 0x0b	; 11
     2f8:	8f 70       	andi	r24, 0x0F	; 15
     2fa:	80 63       	ori	r24, 0x30	; 48
     2fc:	8b b9       	out	0x0b, r24	; 11
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     2fe:	b0 d7       	rcall	.+3936   	; 0x1260 <V2Protocol_ProcessCommand>
     300:	8b b1       	in	r24, 0x0b	; 11
     302:	8f 70       	andi	r24, 0x0F	; 15
     304:	80 62       	ori	r24, 0x20	; 32
     306:	8b b9       	out	0x0b, r24	; 11
     308:	08 95       	ret

0000030a <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     30a:	b0 df       	rcall	.-160    	; 0x26c <SetupHardware>
	V2Protocol_Init();
     30c:	a0 d7       	rcall	.+3904   	; 0x124e <V2Protocol_Init>
     30e:	8b b1       	in	r24, 0x0b	; 11
     310:	8f 70       	andi	r24, 0x0F	; 15
     312:	80 61       	ori	r24, 0x10	; 16
     314:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     316:	78 94       	sei
		/* On the USBTINY-MKII target, there is a secondary LED which indicates the current selected power
		   mode - either VBUS, or sourced from the VTARGET pin of the programming connectors */
		LEDs_ChangeLEDs(LEDMASK_VBUSPOWER, (PIND & (1 << 0)) ? 0 : LEDMASK_VBUSPOWER);
		#endif

		AVRISP_Task();
     318:	e2 df       	rcall	.-60     	; 0x2de <AVRISP_Task>
     31a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <USB_USBTask>
		USB_USBTask();
     31e:	fc cf       	rjmp	.-8      	; 0x318 <main+0xe>

00000320 <CALLBACK_USB_GetDescriptor>:
     320:	01 c0       	rjmp	.+2      	; 0x324 <AVRISP_GetDescriptor>
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	return AVRISP_GetDescriptor(wValue, wIndex, DescriptorAddress);
}
     322:	08 95       	ret

00000324 <AVRISP_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     324:	29 2f       	mov	r18, r25
     326:	33 27       	eor	r19, r19
     328:	22 30       	cpi	r18, 0x02	; 2
     32a:	31 05       	cpc	r19, r1
     32c:	59 f0       	breq	.+22     	; 0x344 <AVRISP_GetDescriptor+0x20>
     32e:	23 30       	cpi	r18, 0x03	; 3
     330:	31 05       	cpc	r19, r1
     332:	69 f0       	breq	.+26     	; 0x34e <AVRISP_GetDescriptor+0x2a>
     334:	21 30       	cpi	r18, 0x01	; 1
     336:	31 05       	cpc	r19, r1
     338:	59 f5       	brne	.+86     	; 0x390 <AVRISP_GetDescriptor+0x6c>
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     33a:	82 e1       	ldi	r24, 0x12	; 18
     33c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
     33e:	2e ed       	ldi	r18, 0xDE	; 222
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	2f c0       	rjmp	.+94     	; 0x3a2 <AVRISP_GetDescriptor+0x7e>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &AVRISP_ConfigurationDescriptor;
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
     344:	80 e2       	ldi	r24, 0x20	; 32
     346:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &AVRISP_ConfigurationDescriptor;
     348:	2e eb       	ldi	r18, 0xBE	; 190
     34a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
			break;
     34c:	2a c0       	rjmp	.+84     	; 0x3a2 <AVRISP_GetDescriptor+0x7e>
		case DTYPE_String:
			switch (DescriptorNumber)
     34e:	99 27       	eor	r25, r25
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	91 05       	cpc	r25, r1
     354:	89 f0       	breq	.+34     	; 0x378 <AVRISP_GetDescriptor+0x54>
     356:	50 f0       	brcs	.+20     	; 0x36c <AVRISP_GetDescriptor+0x48>
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	91 05       	cpc	r25, r1
     35c:	99 f0       	breq	.+38     	; 0x384 <AVRISP_GetDescriptor+0x60>
     35e:	03 97       	sbiw	r24, 0x03	; 3
     360:	e1 f4       	brne	.+56     	; 0x39a <AVRISP_GetDescriptor+0x76>
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
				case AVRISP_STRING_ID_Serial:
					Address = &AVRISP_SerialString;
					Size    = AVRISP_SerialString.Header.Size;
     362:	8c e1       	ldi	r24, 0x1C	; 28
     364:	90 e0       	ldi	r25, 0x00	; 0
				case AVRISP_STRING_ID_Product:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
				case AVRISP_STRING_ID_Serial:
					Address = &AVRISP_SerialString;
     366:	24 e7       	ldi	r18, 0x74	; 116
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	1b c0       	rjmp	.+54     	; 0x3a2 <AVRISP_GetDescriptor+0x7e>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case AVRISP_STRING_ID_Language:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
     36c:	ea eb       	ldi	r30, 0xBA	; 186
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	84 91       	lpm	r24, Z
     372:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case AVRISP_STRING_ID_Language:
					Address = &AVRISP_LanguageString;
     374:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
					break;
     376:	15 c0       	rjmp	.+42     	; 0x3a2 <AVRISP_GetDescriptor+0x7e>
				case AVRISP_STRING_ID_Manufacturer:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
     378:	ec ea       	ldi	r30, 0xAC	; 172
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	84 91       	lpm	r24, Z
     37e:	90 e0       	ldi	r25, 0x00	; 0
				case AVRISP_STRING_ID_Language:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
					break;
				case AVRISP_STRING_ID_Manufacturer:
					Address = &AVRISP_ManufacturerString;
     380:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
					break;
     382:	0f c0       	rjmp	.+30     	; 0x3a2 <AVRISP_GetDescriptor+0x7e>
				case AVRISP_STRING_ID_Product:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
     384:	e2 e9       	ldi	r30, 0x92	; 146
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	84 91       	lpm	r24, Z
     38a:	90 e0       	ldi	r25, 0x00	; 0
				case AVRISP_STRING_ID_Manufacturer:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
					break;
				case AVRISP_STRING_ID_Product:
					Address = &AVRISP_ProductString;
     38c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
     38e:	09 c0       	rjmp	.+18     	; 0x3a2 <AVRISP_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
                              const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	04 c0       	rjmp	.+8      	; 0x3a2 <AVRISP_GetDescriptor+0x7e>
	uint16_t    Size    = NO_DESCRIPTOR;
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
                              const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     3a2:	fa 01       	movw	r30, r20
     3a4:	31 83       	std	Z+1, r19	; 0x01
     3a6:	20 83       	st	Z, r18
	return Size;
}
     3a8:	08 95       	ret

000003aa <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command)
{
     3aa:	2f 92       	push	r2
     3ac:	3f 92       	push	r3
     3ae:	4f 92       	push	r4
     3b0:	5f 92       	push	r5
     3b2:	6f 92       	push	r6
     3b4:	7f 92       	push	r7
     3b6:	8f 92       	push	r8
     3b8:	9f 92       	push	r9
     3ba:	af 92       	push	r10
     3bc:	bf 92       	push	r11
     3be:	cf 92       	push	r12
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	cd 50       	subi	r28, 0x0D	; 13
     3d4:	d1 40       	sbci	r29, 0x01	; 1
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	b8 2e       	mov	r11, r24
		uint8_t  PollValue1;
		uint8_t  PollValue2;
		uint8_t  ProgData[256]; // Note, the Jungo driver has a very short ACK timeout period, need to buffer the
	} Write_Memory_Params;      // whole page and ACK the packet as fast as possible to prevent it from aborting

	Endpoint_Read_Stream_LE(&Write_Memory_Params, (sizeof(Write_Memory_Params) -
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	69 e0       	ldi	r22, 0x09	; 9
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	0e 94 25 0b 	call	0x164a	; 0x164a <Endpoint_Read_Stream_LE>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     3f2:	6a 81       	ldd	r22, Y+2	; 0x02
     3f4:	79 81       	ldd	r23, Y+1	; 0x01
	                                               sizeof(Write_Memory_Params.ProgData)), NULL);
	Write_Memory_Params.BytesToWrite = SwapEndian_16(Write_Memory_Params.BytesToWrite);
     3f6:	7a 83       	std	Y+2, r23	; 0x02
     3f8:	69 83       	std	Y+1, r22	; 0x01

	if (Write_Memory_Params.BytesToWrite > sizeof(Write_Memory_Params.ProgData))
     3fa:	61 30       	cpi	r22, 0x01	; 1
     3fc:	21 e0       	ldi	r18, 0x01	; 1
     3fe:	72 07       	cpc	r23, r18
     400:	b0 f0       	brcs	.+44     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     402:	e8 ee       	ldi	r30, 0xE8	; 232
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	8b 77       	andi	r24, 0x7B	; 123
     40a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     412:	ac ee       	ldi	r26, 0xEC	; 236
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	8c 91       	ld	r24, X
     418:	81 60       	ori	r24, 0x01	; 1
     41a:	8c 93       	st	X, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     41c:	a1 ef       	ldi	r26, 0xF1	; 241
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	bc 92       	st	X, r11
     422:	80 ec       	ldi	r24, 0xC0	; 192
     424:	8c 93       	st	X, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     426:	80 81       	ld	r24, Z
     428:	8e 77       	andi	r24, 0x7E	; 126
     42a:	80 83       	st	Z, r24
     42c:	85 c1       	rjmp	.+778    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
		Endpoint_Write_8(STATUS_CMD_FAILED);
		Endpoint_ClearIN();
		return;
	}

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);
     42e:	40 e0       	ldi	r20, 0x00	; 0
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	ce 01       	movw	r24, r28
     434:	0a 96       	adiw	r24, 0x0a	; 10
     436:	0e 94 25 0b 	call	0x164a	; 0x164a <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
     43e:	0a 96       	adiw	r24, 0x0a	; 10
     440:	8f 73       	andi	r24, 0x3F	; 63
     442:	99 27       	eor	r25, r25
     444:	89 2b       	or	r24, r25
     446:	39 f4       	brne	.+14     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     448:	e8 ee       	ldi	r30, 0xE8	; 232
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	8b 77       	andi	r24, 0x7B	; 123
     450:	80 83       	st	Z, r24
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     452:	0e 94 94 0c 	call	0x1928	; 0x1928 <Endpoint_WaitUntilReady>
     456:	e8 ee       	ldi	r30, 0xE8	; 232
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	8b 77       	andi	r24, 0x7B	; 123
     45e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     466:	ec ee       	ldi	r30, 0xEC	; 236
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	81 60       	ori	r24, 0x01	; 1
     46e:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
     470:	33 e1       	ldi	r19, 0x13	; 19
     472:	b3 12       	cpse	r11, r19
     474:	02 c0       	rjmp	.+4      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     476:	a8 84       	ldd	r10, Y+8	; 0x08
     478:	01 c0       	rjmp	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	a9 84       	ldd	r10, Y+9	; 0x09
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
     47c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentAddress>
     480:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentAddress+0x1>
     484:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <CurrentAddress+0x2>
     488:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <CurrentAddress+0x3>
     48c:	c6 5f       	subi	r28, 0xF6	; 246
     48e:	de 4f       	sbci	r29, 0xFE	; 254
     490:	88 83       	st	Y, r24
     492:	99 83       	std	Y+1, r25	; 0x01
     494:	aa 83       	std	Y+2, r26	; 0x02
     496:	bb 83       	std	Y+3, r27	; 0x03
     498:	ca 50       	subi	r28, 0x0A	; 10
     49a:	d1 40       	sbci	r29, 0x01	; 1

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	89 2b       	or	r24, r25
     4a2:	09 f4       	brne	.+2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a4:	bf c0       	rjmp	.+382    	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     4a6:	4e 01       	movw	r8, r28
     4a8:	9a e0       	ldi	r25, 0x0A	; 10
     4aa:	89 0e       	add	r8, r25
     4ac:	91 1c       	adc	r9, r1
     4ae:	e1 2c       	mov	r14, r1
     4b0:	f1 2c       	mov	r15, r1
     4b2:	c1 2c       	mov	r12, r1
     4b4:	d1 2c       	mov	r13, r1
			MustLoadExtendedAddress = false;
		}

		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
		ISPTarget_SendByte(CurrentAddress >> 8);
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     4b6:	0f 2e       	mov	r0, r31
     4b8:	fd e2       	ldi	r31, 0x2D	; 45
     4ba:	6f 2e       	mov	r6, r31
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	7f 2e       	mov	r7, r31
     4c0:	f0 2d       	mov	r31, r0
		ISPTarget_SendByte(ByteToWrite);

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     4c2:	68 94       	set
     4c4:	22 24       	eor	r2, r2
     4c6:	23 f8       	bld	r2, 3
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     4c8:	33 24       	eor	r3, r3
     4ca:	33 94       	inc	r3
			/* Abort the programming loop early if the byte/word programming failed */
			if (ProgrammingStatus != STATUS_CMD_OK)
			  break;

			/* Must reset the polling address afterwards, so it is not erroneously used for the next byte */
			PollAddress = 0;
     4cc:	41 2c       	mov	r4, r1
     4ce:	51 2c       	mov	r5, r1
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
	{
		uint8_t ByteToWrite     = *(NextWriteByte++);
     4d0:	d4 01       	movw	r26, r8
     4d2:	0d 91       	ld	r16, X+
     4d4:	4d 01       	movw	r8, r26
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
     4d6:	1b 81       	ldd	r17, Y+3	; 0x03

		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     4d8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <MustLoadExtendedAddress>
     4dc:	88 23       	and	r24, r24
     4de:	19 f0       	breq	.+6      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
		{
			ISPTarget_LoadExtendedAddress();
     4e0:	04 d6       	rcall	.+3080   	; 0x10ea <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     4e2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <MustLoadExtendedAddress>
		}

		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
     4e6:	8d 81       	ldd	r24, Y+5	; 0x05
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     4e8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     4ec:	99 23       	and	r25, r25
     4ee:	29 f0       	breq	.+10     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4f2:	0d b4       	in	r0, 0x2d	; 45
     4f4:	07 fe       	sbrs	r0, 7
     4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4fa:	90 d5       	rcall	.+2848   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     4fc:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentAddress>
     500:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentAddress+0x1>
     504:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <CurrentAddress+0x2>
     508:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <CurrentAddress+0x3>
     50c:	89 2f       	mov	r24, r25
     50e:	9a 2f       	mov	r25, r26
     510:	ab 2f       	mov	r26, r27
     512:	bb 27       	eor	r27, r27
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     514:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <HardwareSPIMode>
     518:	22 23       	and	r18, r18
     51a:	29 f0       	breq	.+10     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     51c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     51e:	0d b4       	in	r0, 0x2d	; 45
     520:	07 fe       	sbrs	r0, 7
     522:	fd cf       	rjmp	.-6      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     524:	01 c0       	rjmp	.+2      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     526:	7a d5       	rcall	.+2804   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     528:	f3 01       	movw	r30, r6
     52a:	80 81       	ld	r24, Z
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     52c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     530:	99 23       	and	r25, r25
     532:	29 f0       	breq	.+10     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     534:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     536:	0d b4       	in	r0, 0x2d	; 45
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     53c:	01 c0       	rjmp	.+2      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     53e:	6e d5       	rcall	.+2780   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     540:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
     544:	88 23       	and	r24, r24
     546:	29 f0       	breq	.+10     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     548:	0e bd       	out	0x2e, r16	; 46
				while (!(SPSR & (1 << SPIF)));
     54a:	0d b4       	in	r0, 0x2d	; 45
     54c:	07 fe       	sbrs	r0, 7
     54e:	fd cf       	rjmp	.-6      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     550:	02 c0       	rjmp	.+4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     552:	80 2f       	mov	r24, r16
     554:	63 d5       	rcall	.+2758   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(ByteToWrite);

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
     556:	f3 e1       	ldi	r31, 0x13	; 19
     558:	bf 12       	cpse	r11, r31
     55a:	03 c0       	rjmp	.+6      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     55c:	8d 81       	ldd	r24, Y+5	; 0x05
     55e:	82 25       	eor	r24, r2
     560:	8d 83       	std	Y+5, r24	; 0x05

		/* Check to see if we have a valid polling address */
		if (!(PollAddress) && (ByteToWrite != PollValue))
     562:	c1 14       	cp	r12, r1
     564:	d1 04       	cpc	r13, r1
     566:	09 f0       	breq	.+2      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     568:	d0 c0       	rjmp	.+416    	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
     56a:	a0 16       	cp	r10, r16
     56c:	09 f4       	brne	.+2      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     56e:	ca c0       	rjmp	.+404    	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
		{
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
     570:	e0 fe       	sbrs	r14, 0
     572:	0d c0       	rjmp	.+26     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     574:	23 e1       	ldi	r18, 0x13	; 19
     576:	b2 12       	cpse	r11, r18
     578:	0a c0       	rjmp	.+20     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
     57a:	8f 81       	ldd	r24, Y+7	; 0x07
     57c:	88 60       	ori	r24, 0x08	; 8
     57e:	8f 83       	std	Y+7, r24	; 0x07
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;

			PollAddress = (CurrentAddress & 0xFFFF);
     580:	d3 01       	movw	r26, r6
     582:	8d 91       	ld	r24, X+
     584:	9c 91       	ld	r25, X
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     586:	10 ff       	sbrs	r17, 0
     588:	0a c0       	rjmp	.+20     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;

			PollAddress = (CurrentAddress & 0xFFFF);
     58a:	6c 01       	movw	r12, r24
     58c:	22 c0       	rjmp	.+68     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
		if (!(PollAddress) && (ByteToWrite != PollValue))
		{
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
     58e:	8f 81       	ldd	r24, Y+7	; 0x07
     590:	87 7f       	andi	r24, 0xF7	; 247
     592:	8f 83       	std	Y+7, r24	; 0x07

			PollAddress = (CurrentAddress & 0xFFFF);
     594:	f3 01       	movw	r30, r6
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     59a:	10 fd       	sbrc	r17, 0
     59c:	13 c0       	rjmp	.+38     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
		{
			/* If the current polling address is invalid, switch to timed delay write completion mode */
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
     59e:	00 97       	sbiw	r24, 0x00	; 0
     5a0:	29 f4       	brne	.+10     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5a2:	13 fd       	sbrc	r17, 3
     5a4:	04 c0       	rjmp	.+8      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
     5a6:	19 7f       	andi	r17, 0xF9	; 249
     5a8:	12 60       	ori	r17, 0x02	; 2
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5ac:	6c 01       	movw	r12, r24

			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
     5ae:	0f 81       	ldd	r16, Y+7	; 0x07
     5b0:	2c 81       	ldd	r18, Y+4	; 0x04
     5b2:	4a 2d       	mov	r20, r10
     5b4:	b6 01       	movw	r22, r12
     5b6:	81 2f       	mov	r24, r17
     5b8:	d0 d5       	rcall	.+2976   	; 0x115a <ISPTarget_WaitForProgComplete>
			                                                  Write_Memory_Params.DelayMS,
			                                                  Write_Memory_Params.ProgrammingCommands[2]);

			/* Abort the programming loop early if the byte/word programming failed */
			if (ProgrammingStatus != STATUS_CMD_OK)
     5ba:	81 11       	cpse	r24, r1
     5bc:	36 c0       	rjmp	.+108    	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
			  break;

			/* Must reset the polling address afterwards, so it is not erroneously used for the next byte */
			PollAddress = 0;
     5be:	c4 2c       	mov	r12, r4
     5c0:	d5 2c       	mov	r13, r5
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;

			PollAddress = (CurrentAddress & 0xFFFF);
     5c4:	6c 01       	movw	r12, r24
		}

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed during FLASH memory programming */
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
     5c6:	e0 fc       	sbrc	r14, 0
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     5ca:	f5 e1       	ldi	r31, 0x15	; 21
     5cc:	bf 12       	cpse	r11, r31
     5ce:	1f c0       	rjmp	.+62     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     5d0:	9f c0       	rjmp	.+318    	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
		{
			CurrentAddress++;
     5d2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentAddress>
     5d6:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentAddress+0x1>
     5da:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <CurrentAddress+0x2>
     5de:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <CurrentAddress+0x3>
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	a1 1d       	adc	r26, r1
     5e6:	b1 1d       	adc	r27, r1
     5e8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <CurrentAddress>
     5ec:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <CurrentAddress+0x1>
     5f0:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <CurrentAddress+0x2>
     5f4:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <CurrentAddress+0x3>

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     5f8:	23 e1       	ldi	r18, 0x13	; 19
     5fa:	b2 12       	cpse	r11, r18
     5fc:	08 c0       	rjmp	.+16     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     5fe:	aa 27       	eor	r26, r26
     600:	bb 27       	eor	r27, r27
     602:	89 2b       	or	r24, r25
     604:	8a 2b       	or	r24, r26
     606:	8b 2b       	or	r24, r27
     608:	11 f4       	brne	.+4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
			  MustLoadExtendedAddress = true;
     60a:	30 92 2c 01 	sts	0x012C, r3	; 0x80012c <MustLoadExtendedAddress>
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     60e:	3f ef       	ldi	r19, 0xFF	; 255
     610:	e3 1a       	sub	r14, r19
     612:	f3 0a       	sbc	r15, r19
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	9a 81       	ldd	r25, Y+2	; 0x02
     618:	e8 16       	cp	r14, r24
     61a:	f9 06       	cpc	r15, r25
     61c:	08 f4       	brcc	.+2      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     61e:	58 cf       	rjmp	.-336    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	03 c0       	rjmp	.+6      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
     624:	c1 2c       	mov	r12, r1
     626:	d1 2c       	mov	r13, r1

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
     628:	80 e0       	ldi	r24, 0x00	; 0
			  MustLoadExtendedAddress = true;
		}
	}

	/* If the current page must be committed, send the PROGRAM PAGE command to the target */
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
     62a:	9b 81       	ldd	r25, Y+3	; 0x03
     62c:	99 23       	and	r25, r25
     62e:	0c f0       	brlt	.+2      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     630:	5f c0       	rjmp	.+190    	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
	{
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[1]);
     632:	8e 81       	ldd	r24, Y+6	; 0x06
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     634:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     638:	99 23       	and	r25, r25
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     63a:	29 f0       	breq	.+10     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
				while (!(SPSR & (1 << SPIF)));
     63c:	8e bd       	out	0x2e, r24	; 46
     63e:	0d b4       	in	r0, 0x2d	; 45
     640:	07 fe       	sbrs	r0, 7
     642:	fd cf       	rjmp	.-6      	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     644:	01 c0       	rjmp	.+2      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     646:	ea d4       	rcall	.+2516   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(PageStartAddress >> 8);
     648:	c6 5f       	subi	r28, 0xF6	; 246
     64a:	de 4f       	sbci	r29, 0xFE	; 254
     64c:	a8 81       	ld	r26, Y
     64e:	b9 81       	ldd	r27, Y+1	; 0x01
     650:	ca 50       	subi	r28, 0x0A	; 10
     652:	d1 40       	sbci	r29, 0x01	; 1
     654:	8b 2f       	mov	r24, r27
     656:	99 27       	eor	r25, r25
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     658:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <HardwareSPIMode>
     65c:	22 23       	and	r18, r18
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     65e:	29 f0       	breq	.+10     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
				while (!(SPSR & (1 << SPIF)));
     660:	8e bd       	out	0x2e, r24	; 46
     662:	0d b4       	in	r0, 0x2d	; 45
     664:	07 fe       	sbrs	r0, 7
     666:	fd cf       	rjmp	.-6      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     668:	01 c0       	rjmp	.+2      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     66a:	d8 d4       	rcall	.+2480   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     66c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
     670:	88 23       	and	r24, r24
     672:	51 f0       	breq	.+20     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     674:	c6 5f       	subi	r28, 0xF6	; 246
     676:	de 4f       	sbci	r29, 0xFE	; 254
     678:	b8 81       	ld	r27, Y
     67a:	ca 50       	subi	r28, 0x0A	; 10
     67c:	d1 40       	sbci	r29, 0x01	; 1
     67e:	be bd       	out	0x2e, r27	; 46
				while (!(SPSR & (1 << SPIF)));
     680:	0d b4       	in	r0, 0x2d	; 45
     682:	07 fe       	sbrs	r0, 7
     684:	fd cf       	rjmp	.-6      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     686:	06 c0       	rjmp	.+12     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     688:	c6 5f       	subi	r28, 0xF6	; 246
     68a:	de 4f       	sbci	r29, 0xFE	; 254
     68c:	88 81       	ld	r24, Y
     68e:	ca 50       	subi	r28, 0x0A	; 10
     690:	d1 40       	sbci	r29, 0x01	; 1
     692:	c4 d4       	rcall	.+2440   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     694:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
     698:	88 23       	and	r24, r24
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     69a:	29 f0       	breq	.+10     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
				while (!(SPSR & (1 << SPIF)));
     69c:	1e bc       	out	0x2e, r1	; 46
     69e:	0d b4       	in	r0, 0x2d	; 45
     6a0:	07 fe       	sbrs	r0, 7
     6a2:	fd cf       	rjmp	.-6      	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	b9 d4       	rcall	.+2418   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(PageStartAddress & 0xFF);
		ISPTarget_SendByte(0x00);

		/* Check if polling is enabled and possible, if not switch to timed delay mode */
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	85 ff       	sbrs	r24, 5
     6ae:	06 c0       	rjmp	.+12     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     6b0:	c1 14       	cp	r12, r1
     6b2:	d1 04       	cpc	r13, r1
		{
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
     6b4:	19 f4       	brne	.+6      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     6b6:	8f 7c       	andi	r24, 0xCF	; 207
     6b8:	80 61       	ori	r24, 0x10	; 16
												   PROG_MODE_PAGED_TIMEDELAY_MASK;
		}

		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
     6ba:	8b 83       	std	Y+3, r24	; 0x03
     6bc:	0f 81       	ldd	r16, Y+7	; 0x07
     6be:	2c 81       	ldd	r18, Y+4	; 0x04
     6c0:	4a 2d       	mov	r20, r10
     6c2:	b6 01       	movw	r22, r12
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
     6c6:	49 d5       	rcall	.+2706   	; 0x115a <ISPTarget_WaitForProgComplete>
		                                                  Write_Memory_Params.DelayMS,
		                                                  Write_Memory_Params.ProgrammingCommands[2]);

		/* Check to see if the FLASH address has crossed the extended address boundary */
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     6c8:	e3 e1       	ldi	r30, 0x13	; 19
     6ca:	be 12       	cpse	r11, r30
     6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
     6ce:	40 91 2d 01 	lds	r20, 0x012D	; 0x80012d <CurrentAddress>
     6d2:	50 91 2e 01 	lds	r21, 0x012E	; 0x80012e <CurrentAddress+0x1>
     6d6:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <CurrentAddress+0x2>
     6da:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <CurrentAddress+0x3>
     6de:	66 27       	eor	r22, r22
     6e0:	77 27       	eor	r23, r23
     6e2:	45 2b       	or	r20, r21
     6e4:	46 2b       	or	r20, r22
     6e6:	47 2b       	or	r20, r23
     6e8:	19 f4       	brne	.+6      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
		  MustLoadExtendedAddress = true;
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <MustLoadExtendedAddress>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6f0:	e1 ef       	ldi	r30, 0xF1	; 241
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	b0 82       	st	Z, r11
     6f6:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6f8:	e8 ee       	ldi	r30, 0xE8	; 232
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	8e 77       	andi	r24, 0x7E	; 126
     700:	80 83       	st	Z, r24
     702:	1a c0       	rjmp	.+52     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>

			PollAddress = (CurrentAddress & 0xFFFF);
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     704:	10 ff       	sbrs	r17, 0
     706:	4d cf       	rjmp	.-358    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     708:	5e cf       	rjmp	.-324    	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     70a:	10 ff       	sbrs	r17, 0
     70c:	50 cf       	rjmp	.-352    	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     70e:	5b cf       	rjmp	.-330    	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed during FLASH memory programming */
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
		{
			CurrentAddress++;
     710:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentAddress>
     714:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentAddress+0x1>
     718:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <CurrentAddress+0x2>
     71c:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <CurrentAddress+0x3>
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	a1 1d       	adc	r26, r1
     724:	b1 1d       	adc	r27, r1
     726:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <CurrentAddress>
     72a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <CurrentAddress+0x1>
     72e:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <CurrentAddress+0x2>
     732:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <CurrentAddress+0x3>
     736:	6b cf       	rjmp	.-298    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
	}

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(ProgrammingStatus);
	Endpoint_ClearIN();
}
     738:	c3 5f       	subi	r28, 0xF3	; 243
     73a:	de 4f       	sbci	r29, 0xFE	; 254
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	bf 90       	pop	r11
     758:	af 90       	pop	r10
     75a:	9f 90       	pop	r9
     75c:	8f 90       	pop	r8
     75e:	7f 90       	pop	r7
     760:	6f 90       	pop	r6
     762:	5f 90       	pop	r5
     764:	4f 90       	pop	r4
     766:	3f 90       	pop	r3
     768:	2f 90       	pop	r2
     76a:	08 95       	ret

0000076c <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command)
{
     76c:	7f 92       	push	r7
     76e:	8f 92       	push	r8
     770:	9f 92       	push	r9
     772:	af 92       	push	r10
     774:	bf 92       	push	r11
     776:	cf 92       	push	r12
     778:	df 92       	push	r13
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <ISPProtocol_ReadMemory+0x1c>
     788:	1f 92       	push	r1
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	98 2e       	mov	r9, r24
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;

	Endpoint_Read_Stream_LE(&Read_Memory_Params, sizeof(Read_Memory_Params), NULL);
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	56 d7       	rcall	.+3756   	; 0x164a <Endpoint_Read_Stream_LE>
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;

				Temp = Data.Bytes[0];
     79e:	89 81       	ldd	r24, Y+1	; 0x01
				Data.Bytes[0] = Data.Bytes[1];
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
	Read_Memory_Params.BytesToRead = SwapEndian_16(Read_Memory_Params.BytesToRead);
     7a2:	99 83       	std	Y+1, r25	; 0x01
     7a4:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7a6:	e8 ee       	ldi	r30, 0xE8	; 232
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	8b 77       	andi	r24, 0x7B	; 123
     7ae:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     7b6:	ec ee       	ldi	r30, 0xEC	; 236
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	81 60       	ori	r24, 0x01	; 1
     7be:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7c0:	e1 ef       	ldi	r30, 0xF1	; 241
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	90 82       	st	Z, r9
     7c6:	10 82       	st	Z, r1

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	9a 81       	ldd	r25, Y+2	; 0x02
     7cc:	89 2b       	or	r24, r25
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <ISPProtocol_ReadMemory+0x66>
     7d0:	97 c0       	rjmp	.+302    	; 0x900 <ISPProtocol_ReadMemory+0x194>
     7d2:	00 e0       	ldi	r16, 0x00	; 0
     7d4:	10 e0       	ldi	r17, 0x00	; 0
		}

		/* Read the next byte from the desired memory space in the device */
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
		ISPTarget_SendByte(CurrentAddress >> 8);
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     7d6:	0f 2e       	mov	r0, r31
     7d8:	fd e2       	ldi	r31, 0x2D	; 45
     7da:	af 2e       	mov	r10, r31
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	bf 2e       	mov	r11, r31
     7e0:	f0 2d       	mov	r31, r0
     7e2:	0f 2e       	mov	r0, r31
     7e4:	f1 ef       	ldi	r31, 0xF1	; 241
     7e6:	cf 2e       	mov	r12, r31
     7e8:	d1 2c       	mov	r13, r1
     7ea:	f0 2d       	mov	r31, r0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7ec:	0f 2e       	mov	r0, r31
     7ee:	f8 ee       	ldi	r31, 0xE8	; 232
     7f0:	ef 2e       	mov	r14, r31
     7f2:	f1 2c       	mov	r15, r1
     7f4:	f0 2d       	mov	r31, r0
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     7f6:	77 24       	eor	r7, r7
     7f8:	73 94       	inc	r7
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     7fa:	68 94       	set
     7fc:	88 24       	eor	r8, r8
     7fe:	83 f8       	bld	r8, 3

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     800:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <MustLoadExtendedAddress>
     804:	88 23       	and	r24, r24
		{
			ISPTarget_LoadExtendedAddress();
     806:	19 f0       	breq	.+6      	; 0x80e <ISPProtocol_ReadMemory+0xa2>
     808:	70 d4       	rcall	.+2272   	; 0x10ea <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     80a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <MustLoadExtendedAddress>
		}

		/* Read the next byte from the desired memory space in the device */
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
     80e:	8b 81       	ldd	r24, Y+3	; 0x03
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     810:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     814:	99 23       	and	r25, r25
     816:	29 f0       	breq	.+10     	; 0x822 <ISPProtocol_ReadMemory+0xb6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     818:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     81a:	0d b4       	in	r0, 0x2d	; 45
     81c:	07 fe       	sbrs	r0, 7
     81e:	fd cf       	rjmp	.-6      	; 0x81a <ISPProtocol_ReadMemory+0xae>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     820:	01 c0       	rjmp	.+2      	; 0x824 <ISPProtocol_ReadMemory+0xb8>
     822:	fc d3       	rcall	.+2040   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     824:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentAddress>
     828:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentAddress+0x1>
     82c:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <CurrentAddress+0x2>
     830:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <CurrentAddress+0x3>
     834:	89 2f       	mov	r24, r25
     836:	9a 2f       	mov	r25, r26
     838:	ab 2f       	mov	r26, r27
     83a:	bb 27       	eor	r27, r27
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     83c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <HardwareSPIMode>
     840:	22 23       	and	r18, r18
     842:	29 f0       	breq	.+10     	; 0x84e <ISPProtocol_ReadMemory+0xe2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     844:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     846:	0d b4       	in	r0, 0x2d	; 45
     848:	07 fe       	sbrs	r0, 7
     84a:	fd cf       	rjmp	.-6      	; 0x846 <ISPProtocol_ReadMemory+0xda>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     84c:	01 c0       	rjmp	.+2      	; 0x850 <ISPProtocol_ReadMemory+0xe4>
     84e:	e6 d3       	rcall	.+1996   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     850:	f5 01       	movw	r30, r10
     852:	80 81       	ld	r24, Z
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     854:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     858:	99 23       	and	r25, r25
     85a:	29 f0       	breq	.+10     	; 0x866 <ISPProtocol_ReadMemory+0xfa>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     85c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     85e:	0d b4       	in	r0, 0x2d	; 45
     860:	07 fe       	sbrs	r0, 7
     862:	fd cf       	rjmp	.-6      	; 0x85e <ISPProtocol_ReadMemory+0xf2>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     864:	01 c0       	rjmp	.+2      	; 0x868 <ISPProtocol_ReadMemory+0xfc>
     866:	da d3       	rcall	.+1972   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     868:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
     86c:	88 23       	and	r24, r24
     86e:	31 f0       	breq	.+12     	; 0x87c <ISPProtocol_ReadMemory+0x110>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     870:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     872:	0d b4       	in	r0, 0x2d	; 45
     874:	07 fe       	sbrs	r0, 7
				return SPDR;
     876:	fd cf       	rjmp	.-6      	; 0x872 <ISPProtocol_ReadMemory+0x106>
     878:	8e b5       	in	r24, 0x2e	; 46
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
     87a:	02 c0       	rjmp	.+4      	; 0x880 <ISPProtocol_ReadMemory+0x114>
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	ce d3       	rcall	.+1948   	; 0x101c <ISPTarget_TransferSoftSPIByte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     880:	f6 01       	movw	r30, r12
     882:	80 83       	st	Z, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     884:	f7 01       	movw	r30, r14
     886:	80 81       	ld	r24, Z
		Endpoint_Write_8(ISPTarget_ReceiveByte());

		/* Check if the endpoint bank is currently full, if so send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     888:	85 fd       	sbrc	r24, 5
     88a:	05 c0       	rjmp	.+10     	; 0x896 <ISPProtocol_ReadMemory+0x12a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     88c:	80 81       	ld	r24, Z
     88e:	8e 77       	andi	r24, 0x7E	; 126
     890:	80 83       	st	Z, r24
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     892:	0e 94 94 0c 	call	0x1928	; 0x1928 <Endpoint_WaitUntilReady>
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
     896:	f4 e1       	ldi	r31, 0x14	; 20
     898:	9f 12       	cpse	r9, r31
     89a:	06 c0       	rjmp	.+12     	; 0x8a8 <ISPProtocol_ReadMemory+0x13c>
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     89c:	8b 81       	ldd	r24, Y+3	; 0x03
     89e:	88 25       	eor	r24, r8
     8a0:	8b 83       	std	Y+3, r24	; 0x03

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
     8a2:	00 fd       	sbrc	r16, 0
     8a4:	41 c0       	rjmp	.+130    	; 0x928 <ISPProtocol_ReadMemory+0x1bc>
     8a6:	24 c0       	rjmp	.+72     	; 0x8f0 <ISPProtocol_ReadMemory+0x184>
     8a8:	00 fd       	sbrc	r16, 0
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <ISPProtocol_ReadMemory+0x148>
     8ac:	26 e1       	ldi	r18, 0x16	; 22
     8ae:	92 12       	cpse	r9, r18
     8b0:	1f c0       	rjmp	.+62     	; 0x8f0 <ISPProtocol_ReadMemory+0x184>
     8b2:	4e c0       	rjmp	.+156    	; 0x950 <ISPProtocol_ReadMemory+0x1e4>
		{
			CurrentAddress++;
     8b4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentAddress>
     8b8:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentAddress+0x1>
     8bc:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <CurrentAddress+0x2>
     8c0:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <CurrentAddress+0x3>
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	a1 1d       	adc	r26, r1
     8c8:	b1 1d       	adc	r27, r1
     8ca:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <CurrentAddress>
     8ce:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <CurrentAddress+0x1>
     8d2:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <CurrentAddress+0x2>
     8d6:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <CurrentAddress+0x3>

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
     8da:	e6 e1       	ldi	r30, 0x16	; 22
     8dc:	9e 16       	cp	r9, r30
     8de:	41 f0       	breq	.+16     	; 0x8f0 <ISPProtocol_ReadMemory+0x184>
     8e0:	aa 27       	eor	r26, r26
     8e2:	bb 27       	eor	r27, r27
     8e4:	89 2b       	or	r24, r25
     8e6:	8a 2b       	or	r24, r26
     8e8:	8b 2b       	or	r24, r27
     8ea:	11 f4       	brne	.+4      	; 0x8f0 <ISPProtocol_ReadMemory+0x184>
			  MustLoadExtendedAddress = true;
     8ec:	70 92 2c 01 	sts	0x012C, r7	; 0x80012c <MustLoadExtendedAddress>

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     8f0:	0f 5f       	subi	r16, 0xFF	; 255
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	9a 81       	ldd	r25, Y+2	; 0x02
     8f8:	08 17       	cp	r16, r24
     8fa:	19 07       	cpc	r17, r25
     8fc:	08 f4       	brcc	.+2      	; 0x900 <ISPProtocol_ReadMemory+0x194>
     8fe:	80 cf       	rjmp	.-256    	; 0x800 <ISPProtocol_ReadMemory+0x94>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     900:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     904:	e8 ee       	ldi	r30, 0xE8	; 232
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	90 81       	ld	r25, Z
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     90a:	80 81       	ld	r24, Z
     90c:	8e 77       	andi	r24, 0x7E	; 126
     90e:	80 83       	st	Z, r24

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     910:	95 fd       	sbrc	r25, 5
     912:	32 c0       	rjmp	.+100    	; 0x978 <ISPProtocol_ReadMemory+0x20c>
	{
		Endpoint_WaitUntilReady();
     914:	0e 94 94 0c 	call	0x1928	; 0x1928 <Endpoint_WaitUntilReady>
     918:	e8 ee       	ldi	r30, 0xE8	; 232
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	8e 77       	andi	r24, 0x7E	; 126
     920:	80 83       	st	Z, r24
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     922:	0e 94 94 0c 	call	0x1928	; 0x1928 <Endpoint_WaitUntilReady>
	}
}
     926:	28 c0       	rjmp	.+80     	; 0x978 <ISPProtocol_ReadMemory+0x20c>
		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
		{
			CurrentAddress++;
     928:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentAddress>
     92c:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentAddress+0x1>
     930:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <CurrentAddress+0x2>
     934:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <CurrentAddress+0x3>
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	a1 1d       	adc	r26, r1
     93c:	b1 1d       	adc	r27, r1
     93e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <CurrentAddress>
     942:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <CurrentAddress+0x1>
     946:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <CurrentAddress+0x2>
     94a:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <CurrentAddress+0x3>
     94e:	c8 cf       	rjmp	.-112    	; 0x8e0 <ISPProtocol_ReadMemory+0x174>
     950:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentAddress>
     954:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentAddress+0x1>
     958:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <CurrentAddress+0x2>
     95c:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <CurrentAddress+0x3>
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	a1 1d       	adc	r26, r1
     964:	b1 1d       	adc	r27, r1
     966:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <CurrentAddress>
     96a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <CurrentAddress+0x1>
     96e:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <CurrentAddress+0x2>
     972:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <CurrentAddress+0x3>
     976:	bc cf       	rjmp	.-136    	; 0x8f0 <ISPProtocol_ReadMemory+0x184>
	{
		Endpoint_WaitUntilReady();
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
	}
}
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	bf 90       	pop	r11
     990:	af 90       	pop	r10
     992:	9f 90       	pop	r9
     994:	8f 90       	pop	r8
     996:	7f 90       	pop	r7
     998:	08 95       	ret

0000099a <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	29 97       	sbiw	r28, 0x09	; 9
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	b8 2e       	mov	r11, r24
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	Endpoint_Read_Stream_LE(&Read_FuseLockSigOSCCAL_Params, sizeof(Read_FuseLockSigOSCCAL_Params), NULL);
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	65 e0       	ldi	r22, 0x05	; 5
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	ce 01       	movw	r24, r28
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	3f d6       	rcall	.+3198   	; 0x164a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9cc:	e8 ee       	ldi	r30, 0xE8	; 232
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	8b 77       	andi	r24, 0x7B	; 123
     9d4:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     9dc:	ec ee       	ldi	r30, 0xEC	; 236
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	81 60       	ori	r24, 0x01	; 1
     9e4:	80 83       	st	Z, r24
     9e6:	8e 01       	movw	r16, r28
     9e8:	0e 5f       	subi	r16, 0xFE	; 254
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255
     9ec:	7e 01       	movw	r14, r28
     9ee:	86 e0       	ldi	r24, 0x06	; 6
     9f0:	e8 0e       	add	r14, r24
     9f2:	f1 1c       	adc	r15, r1
     9f4:	67 01       	movw	r12, r14

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
     9f6:	f8 01       	movw	r30, r16
     9f8:	81 91       	ld	r24, Z+
     9fa:	8f 01       	movw	r16, r30
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     9fc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     a00:	99 23       	and	r25, r25
     a02:	31 f0       	breq	.+12     	; 0xa10 <ISPProtocol_ReadFuseLockSigOSCCAL+0x76>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a04:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a06:	0d b4       	in	r0, 0x2d	; 45
     a08:	07 fe       	sbrs	r0, 7
     a0a:	fd cf       	rjmp	.-6      	; 0xa06 <ISPProtocol_ReadFuseLockSigOSCCAL+0x6c>
				return SPDR;
     a0c:	8e b5       	in	r24, 0x2e	; 46
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <ISPProtocol_ReadFuseLockSigOSCCAL+0x78>
     a10:	05 d3       	rcall	.+1546   	; 0x101c <ISPTarget_TransferSoftSPIByte>
     a12:	f7 01       	movw	r30, r14
     a14:	81 93       	st	Z+, r24
     a16:	7f 01       	movw	r14, r30
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     a18:	0c 15       	cp	r16, r12
     a1a:	1d 05       	cpc	r17, r13
     a1c:	61 f7       	brne	.-40     	; 0x9f6 <ISPProtocol_ReadFuseLockSigOSCCAL+0x5c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a1e:	e1 ef       	ldi	r30, 0xF1	; 241
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	b0 82       	st	Z, r11
     a24:	10 82       	st	Z, r1
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1]);
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	de 01       	movw	r26, r28
     a2a:	a8 0f       	add	r26, r24
     a2c:	b1 1d       	adc	r27, r1
     a2e:	15 96       	adiw	r26, 0x05	; 5
     a30:	8c 91       	ld	r24, X
     a32:	80 83       	st	Z, r24
     a34:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a36:	e8 ee       	ldi	r30, 0xE8	; 232
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	8e 77       	andi	r24, 0x7E	; 126
     a3e:	80 83       	st	Z, r24
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     a40:	29 96       	adiw	r28, 0x09	; 9
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	bf 90       	pop	r11
     a5e:	08 95       	ret

00000a60 <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <ISPProtocol_WriteFuseLock+0x10>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <ISPProtocol_WriteFuseLock+0x12>
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	d8 2e       	mov	r13, r24
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;

	Endpoint_Read_Stream_LE(&Write_FuseLockSig_Params, sizeof(Write_FuseLockSig_Params), NULL);
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	64 e0       	ldi	r22, 0x04	; 4
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	ce 01       	movw	r24, r28
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	e2 d5       	rcall	.+3012   	; 0x164a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a86:	e8 ee       	ldi	r30, 0xE8	; 232
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	8b 77       	andi	r24, 0x7B	; 123
     a8e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     a96:	ec ee       	ldi	r30, 0xEC	; 236
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	80 83       	st	Z, r24
     aa0:	8e 01       	movw	r16, r28
     aa2:	0f 5f       	subi	r16, 0xFF	; 255
     aa4:	1f 4f       	sbci	r17, 0xFF	; 255
     aa6:	7e 01       	movw	r14, r28
     aa8:	85 e0       	ldi	r24, 0x05	; 5
     aaa:	e8 0e       	add	r14, r24
     aac:	f1 1c       	adc	r15, r1
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
     aae:	f8 01       	movw	r30, r16
     ab0:	81 91       	ld	r24, Z+
     ab2:	8f 01       	movw	r16, r30
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     ab4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     ab8:	99 23       	and	r25, r25
     aba:	29 f0       	breq	.+10     	; 0xac6 <ISPProtocol_WriteFuseLock+0x66>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     abc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     abe:	0d b4       	in	r0, 0x2d	; 45
     ac0:	07 fe       	sbrs	r0, 7
     ac2:	fd cf       	rjmp	.-6      	; 0xabe <ISPProtocol_WriteFuseLock+0x5e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <ISPProtocol_WriteFuseLock+0x68>
     ac6:	aa d2       	rcall	.+1364   	; 0x101c <ISPTarget_TransferSoftSPIByte>
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
     ac8:	0e 15       	cp	r16, r14
     aca:	1f 05       	cpc	r17, r15
     acc:	81 f7       	brne	.-32     	; 0xaae <ISPProtocol_WriteFuseLock+0x4e>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ace:	e1 ef       	ldi	r30, 0xF1	; 241
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	d0 82       	st	Z, r13
     ad4:	10 82       	st	Z, r1
     ad6:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ad8:	e8 ee       	ldi	r30, 0xE8	; 232
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	8e 77       	andi	r24, 0x7E	; 126
     ae0:	80 83       	st	Z, r24

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	08 95       	ret

00000afa <ISPProtocol_SPIMulti>:

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	c2 50       	subi	r28, 0x02	; 2
     b12:	d1 40       	sbci	r29, 0x01	; 1
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
		uint8_t RxBytes;
		uint8_t RxStartAddr;
		uint8_t TxData[255];
	} SPI_Multi_Params;

	Endpoint_Read_Stream_LE(&SPI_Multi_Params, (sizeof(SPI_Multi_Params) - sizeof(SPI_Multi_Params.TxData)), NULL);
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	63 e0       	ldi	r22, 0x03	; 3
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	8f d5       	rcall	.+2846   	; 0x164a <Endpoint_Read_Stream_LE>
	Endpoint_Read_Stream_LE(&SPI_Multi_Params.TxData, SPI_Multi_Params.TxBytes, NULL);
     b2c:	69 81       	ldd	r22, Y+1	; 0x01
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	ce 01       	movw	r24, r28
     b36:	04 96       	adiw	r24, 0x04	; 4
     b38:	88 d5       	rcall	.+2832   	; 0x164a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b3a:	e8 ee       	ldi	r30, 0xE8	; 232
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	8b 77       	andi	r24, 0x7B	; 123
     b42:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     b4a:	ec ee       	ldi	r30, 0xEC	; 236
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	81 60       	ori	r24, 0x01	; 1
     b52:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b54:	e1 ef       	ldi	r30, 0xF1	; 241
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8d e1       	ldi	r24, 0x1D	; 29
     b5a:	80 83       	st	Z, r24
     b5c:	10 82       	st	Z, r1

	uint8_t CurrTxPos = 0;
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	88 23       	and	r24, r24
     b62:	31 f1       	breq	.+76     	; 0xbb0 <ISPProtocol_SPIMulti+0xb6>
     b64:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	18 17       	cp	r17, r24
     b6a:	90 f4       	brcc	.+36     	; 0xb90 <ISPProtocol_SPIMulti+0x96>
		  ISPTarget_SendByte(SPI_Multi_Params.TxData[CurrTxPos]);
     b6c:	e4 e0       	ldi	r30, 0x04	; 4
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	ec 0f       	add	r30, r28
     b72:	fd 1f       	adc	r31, r29
     b74:	e1 0f       	add	r30, r17
     b76:	f1 1d       	adc	r31, r1
     b78:	80 81       	ld	r24, Z
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     b7a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     b7e:	99 23       	and	r25, r25
     b80:	29 f0       	breq	.+10     	; 0xb8c <ISPProtocol_SPIMulti+0x92>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b82:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b84:	0d b4       	in	r0, 0x2d	; 45
     b86:	07 fe       	sbrs	r0, 7
     b88:	fd cf       	rjmp	.-6      	; 0xb84 <ISPProtocol_SPIMulti+0x8a>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     b8a:	0d c0       	rjmp	.+26     	; 0xba6 <ISPProtocol_SPIMulti+0xac>
     b8c:	47 d2       	rcall	.+1166   	; 0x101c <ISPTarget_TransferSoftSPIByte>
     b8e:	0b c0       	rjmp	.+22     	; 0xba6 <ISPProtocol_SPIMulti+0xac>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     b90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
     b94:	88 23       	and	r24, r24
     b96:	29 f0       	breq	.+10     	; 0xba2 <ISPProtocol_SPIMulti+0xa8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b98:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b9a:	0d b4       	in	r0, 0x2d	; 45
     b9c:	07 fe       	sbrs	r0, 7
     b9e:	fd cf       	rjmp	.-6      	; 0xb9a <ISPProtocol_SPIMulti+0xa0>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <ISPProtocol_SPIMulti+0xac>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	3b d2       	rcall	.+1142   	; 0x101c <ISPTarget_TransferSoftSPIByte>
		else
		  ISPTarget_SendByte(0);

		CurrTxPos++;
     ba6:	1f 5f       	subi	r17, 0xFF	; 255

	uint8_t CurrTxPos = 0;
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	18 17       	cp	r17, r24
     bac:	e0 f2       	brcs	.-72     	; 0xb66 <ISPProtocol_SPIMulti+0x6c>
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <ISPProtocol_SPIMulti+0xb8>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SPI_MULTI);
	Endpoint_Write_8(STATUS_CMD_OK);

	uint8_t CurrTxPos = 0;
     bb0:	10 e0       	ldi	r17, 0x00	; 0

		CurrTxPos++;
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	88 23       	and	r24, r24
     bb6:	09 f4       	brne	.+2      	; 0xbba <ISPProtocol_SPIMulti+0xc0>
     bb8:	41 c0       	rjmp	.+130    	; 0xc3c <ISPProtocol_SPIMulti+0x142>
     bba:	00 e0       	ldi	r16, 0x00	; 0
     bbc:	0f 2e       	mov	r0, r31
     bbe:	f1 ef       	ldi	r31, 0xF1	; 241
     bc0:	cf 2e       	mov	r12, r31
     bc2:	d1 2c       	mov	r13, r1
     bc4:	f0 2d       	mov	r31, r0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bc6:	0f 2e       	mov	r0, r31
     bc8:	f8 ee       	ldi	r31, 0xE8	; 232
     bca:	ef 2e       	mov	r14, r31
     bcc:	f1 2c       	mov	r15, r1
     bce:	f0 2d       	mov	r31, r0
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	18 17       	cp	r17, r24
     bd4:	c8 f4       	brcc	.+50     	; 0xc08 <ISPProtocol_SPIMulti+0x10e>
		  Endpoint_Write_8(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     bd6:	bb 24       	eor	r11, r11
     bd8:	b3 94       	inc	r11
     bda:	b1 0e       	add	r11, r17
     bdc:	e4 e0       	ldi	r30, 0x04	; 4
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	ec 0f       	add	r30, r28
     be2:	fd 1f       	adc	r31, r29
     be4:	e1 0f       	add	r30, r17
     be6:	f1 1d       	adc	r31, r1
     be8:	80 81       	ld	r24, Z
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     bea:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     bee:	99 23       	and	r25, r25
     bf0:	31 f0       	breq	.+12     	; 0xbfe <ISPProtocol_SPIMulti+0x104>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     bf2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     bf4:	0d b4       	in	r0, 0x2d	; 45
     bf6:	07 fe       	sbrs	r0, 7
				return SPDR;
     bf8:	fd cf       	rjmp	.-6      	; 0xbf4 <ISPProtocol_SPIMulti+0xfa>
     bfa:	8e b5       	in	r24, 0x2e	; 46
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <ISPProtocol_SPIMulti+0x106>
     bfe:	0e d2       	rcall	.+1052   	; 0x101c <ISPTarget_TransferSoftSPIByte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c00:	f6 01       	movw	r30, r12
     c02:	80 83       	st	Z, r24
     c04:	1b 2d       	mov	r17, r11
     c06:	0e c0       	rjmp	.+28     	; 0xc24 <ISPProtocol_SPIMulti+0x12a>
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     c08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
     c0c:	88 23       	and	r24, r24
     c0e:	31 f0       	breq	.+12     	; 0xc1c <ISPProtocol_SPIMulti+0x122>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c10:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c12:	0d b4       	in	r0, 0x2d	; 45
     c14:	07 fe       	sbrs	r0, 7
				return SPDR;
     c16:	fd cf       	rjmp	.-6      	; 0xc12 <ISPProtocol_SPIMulti+0x118>
     c18:	8e b5       	in	r24, 0x2e	; 46
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <ISPProtocol_SPIMulti+0x126>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	fe d1       	rcall	.+1020   	; 0x101c <ISPTarget_TransferSoftSPIByte>
     c20:	f6 01       	movw	r30, r12
     c22:	80 83       	st	Z, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c24:	f7 01       	movw	r30, r14
		else
		  Endpoint_Write_8(ISPTarget_ReceiveByte());

		/* Check to see if we have filled the endpoint bank and need to send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     c26:	80 81       	ld	r24, Z
     c28:	85 fd       	sbrc	r24, 5
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <ISPProtocol_SPIMulti+0x13a>
     c2c:	80 81       	ld	r24, Z
     c2e:	8e 77       	andi	r24, 0x7E	; 126
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     c30:	80 83       	st	Z, r24
     c32:	7a d6       	rcall	.+3316   	; 0x1928 <Endpoint_WaitUntilReady>
		}

		CurrRxPos++;
     c34:	0f 5f       	subi	r16, 0xFF	; 255

		CurrTxPos++;
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	08 17       	cp	r16, r24
     c3a:	50 f2       	brcs	.-108    	; 0xbd0 <ISPProtocol_SPIMulti+0xd6>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c3c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c40:	e8 ee       	ldi	r30, 0xE8	; 232
     c42:	f0 e0       	ldi	r31, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c44:	90 81       	ld	r25, Z
     c46:	80 81       	ld	r24, Z
     c48:	8e 77       	andi	r24, 0x7E	; 126

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     c4a:	80 83       	st	Z, r24
	{
		Endpoint_WaitUntilReady();
     c4c:	95 fd       	sbrc	r25, 5
     c4e:	07 c0       	rjmp	.+14     	; 0xc5e <ISPProtocol_SPIMulti+0x164>
     c50:	6b d6       	rcall	.+3286   	; 0x1928 <Endpoint_WaitUntilReady>
     c52:	e8 ee       	ldi	r30, 0xE8	; 232
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8e 77       	andi	r24, 0x7E	; 126
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     c5a:	80 83       	st	Z, r24
     c5c:	65 d6       	rcall	.+3274   	; 0x1928 <Endpoint_WaitUntilReady>
	}
}
     c5e:	ce 5f       	subi	r28, 0xFE	; 254
     c60:	de 4f       	sbci	r29, 0xFE	; 254
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	bf 90       	pop	r11
     c7e:	08 95       	ret

00000c80 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	while (DelayMS-- && TimeoutTicksRemaining)
     c80:	88 23       	and	r24, r24
     c82:	81 f0       	breq	.+32     	; 0xca4 <ISPProtocol_DelayMS+0x24>
     c84:	9a b5       	in	r25, 0x2a	; 42
     c86:	99 23       	and	r25, r25
     c88:	69 f0       	breq	.+26     	; 0xca4 <ISPProtocol_DelayMS+0x24>
     c8a:	82 50       	subi	r24, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c8c:	ef ec       	ldi	r30, 0xCF	; 207
     c8e:	f7 e0       	ldi	r31, 0x07	; 7
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <ISPProtocol_DelayMS+0x10>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <ISPProtocol_DelayMS+0x16>
     c96:	00 00       	nop
     c98:	8f 3f       	cpi	r24, 0xFF	; 255
     c9a:	21 f0       	breq	.+8      	; 0xca4 <ISPProtocol_DelayMS+0x24>
     c9c:	9a b5       	in	r25, 0x2a	; 42
     c9e:	81 50       	subi	r24, 0x01	; 1
     ca0:	91 11       	cpse	r25, r1
     ca2:	f4 cf       	rjmp	.-24     	; 0xc8c <ISPProtocol_DelayMS+0xc>
     ca4:	08 95       	ret

00000ca6 <ISPProtocol_EnterISPMode>:

/** Handler for the CMD_ENTER_PROGMODE_ISP command, which attempts to enter programming mode on
 *  the attached device, returning success or failure back to the host.
 */
void ISPProtocol_EnterISPMode(void)
{
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	2f 97       	sbiw	r28, 0x0f	; 15
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
		uint8_t PollValue;
		uint8_t PollIndex;
		uint8_t EnterProgBytes[4];
	} Enter_ISP_Params;

	Endpoint_Read_Stream_LE(&Enter_ISP_Params, sizeof(Enter_ISP_Params), NULL);
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	6b e0       	ldi	r22, 0x0B	; 11
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	bb d4       	rcall	.+2422   	; 0x164a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cd4:	e8 ee       	ldi	r30, 0xE8	; 232
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8b 77       	andi	r24, 0x7B	; 123
     cdc:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     ce4:	ec ee       	ldi	r30, 0xEC	; 236
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	81 60       	ori	r24, 0x01	; 1
     cec:	80 83       	st	Z, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;

	CurrentAddress = 0;
     cee:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <CurrentAddress>
     cf2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <CurrentAddress+0x1>
     cf6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <CurrentAddress+0x2>
     cfa:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <CurrentAddress+0x3>

	/* Perform execution delay, initialize SPI bus */
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
	ISPTarget_EnableTargetISP();
     d00:	bf df       	rcall	.-130    	; 0xc80 <ISPProtocol_DelayMS>

	ISPTarget_ChangeTargetResetLine(true);
     d02:	62 d1       	rcall	.+708    	; 0xfc8 <ISPTarget_EnableTargetISP>
     d04:	81 e0       	ldi	r24, 0x01	; 1
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     d06:	a9 d1       	rcall	.+850    	; 0x105a <ISPTarget_ChangeTargetResetLine>
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	ba df       	rcall	.-140    	; 0xc80 <ISPProtocol_DelayMS>

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	9f ef       	ldi	r25, 0xFF	; 255
     d10:	98 0f       	add	r25, r24
     d12:	9c 83       	std	Y+4, r25	; 0x04
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <ISPProtocol_EnterISPMode+0x74>
     d18:	44 c0       	rjmp	.+136    	; 0xda2 <ISPProtocol_EnterISPMode+0xfc>
     d1a:	8a b5       	in	r24, 0x2a	; 42
     d1c:	81 11       	cpse	r24, r1

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;
     d1e:	38 c0       	rjmp	.+112    	; 0xd90 <ISPProtocol_EnterISPMode+0xea>
     d20:	80 ec       	ldi	r24, 0xC0	; 192
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
		{
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
     d22:	44 c0       	rjmp	.+136    	; 0xdac <ISPProtocol_EnterISPMode+0x106>
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	ac df       	rcall	.-168    	; 0xc80 <ISPProtocol_DelayMS>
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
     d28:	f8 01       	movw	r30, r16
     d2a:	81 91       	ld	r24, Z+
     d2c:	8f 01       	movw	r16, r30
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     d2e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     d32:	99 23       	and	r25, r25
     d34:	31 f0       	breq	.+12     	; 0xd42 <ISPProtocol_EnterISPMode+0x9c>
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
				while (!(SPSR & (1 << SPIF)));
     d36:	8e bd       	out	0x2e, r24	; 46
     d38:	0d b4       	in	r0, 0x2d	; 45
     d3a:	07 fe       	sbrs	r0, 7
				return SPDR;
     d3c:	fd cf       	rjmp	.-6      	; 0xd38 <ISPProtocol_EnterISPMode+0x92>
     d3e:	8e b5       	in	r24, 0x2e	; 46
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <ISPProtocol_EnterISPMode+0x9e>
     d42:	6c d1       	rcall	.+728    	; 0x101c <ISPTarget_TransferSoftSPIByte>
     d44:	f7 01       	movw	r30, r14
     d46:	81 93       	st	Z+, r24
     d48:	7f 01       	movw	r14, r30
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     d4a:	0c 15       	cp	r16, r12
     d4c:	1d 05       	cpc	r17, r13
     d4e:	51 f7       	brne	.-44     	; 0xd24 <ISPProtocol_EnterISPMode+0x7e>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
		}

		/* Check if polling disabled, or if the polled value matches the expected value */
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
     d50:	8f 81       	ldd	r24, Y+7	; 0x07
     d52:	88 23       	and	r24, r24
     d54:	51 f0       	breq	.+20     	; 0xd6a <ISPProtocol_EnterISPMode+0xc4>
     d56:	eb e0       	ldi	r30, 0x0B	; 11
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	ec 0f       	add	r30, r28
     d5c:	fd 1f       	adc	r31, r29
     d5e:	e8 0f       	add	r30, r24
     d60:	f1 1d       	adc	r31, r1
     d62:	90 81       	ld	r25, Z
     d64:	8e 81       	ldd	r24, Y+6	; 0x06
		{
			ResponseStatus = STATUS_CMD_OK;
     d66:	98 13       	cpse	r25, r24
			break;
		}
		else
		{
			ISPTarget_ChangeTargetResetLine(false);
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <ISPProtocol_EnterISPMode+0xc8>
     d6a:	80 e0       	ldi	r24, 0x00	; 0
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     d6c:	1f c0       	rjmp	.+62     	; 0xdac <ISPProtocol_EnterISPMode+0x106>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	74 d1       	rcall	.+744    	; 0x105a <ISPTarget_ChangeTargetResetLine>
			ISPTarget_ChangeTargetResetLine(true);
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	85 df       	rcall	.-246    	; 0xc80 <ISPProtocol_DelayMS>
     d76:	81 e0       	ldi	r24, 0x01	; 1
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     d78:	70 d1       	rcall	.+736    	; 0x105a <ISPTarget_ChangeTargetResetLine>
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	81 df       	rcall	.-254    	; 0xc80 <ISPProtocol_DelayMS>
	ISPTarget_ChangeTargetResetLine(true);
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	9f ef       	ldi	r25, 0xFF	; 255
     d82:	98 0f       	add	r25, r24
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	88 23       	and	r24, r24
     d88:	71 f0       	breq	.+28     	; 0xda6 <ISPProtocol_EnterISPMode+0x100>
     d8a:	8a b5       	in	r24, 0x2a	; 42
     d8c:	88 23       	and	r24, r24
     d8e:	69 f0       	breq	.+26     	; 0xdaa <ISPProtocol_EnterISPMode+0x104>
     d90:	8e 01       	movw	r16, r28
     d92:	08 5f       	subi	r16, 0xF8	; 248
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	7e 01       	movw	r14, r28
     d98:	fc e0       	ldi	r31, 0x0C	; 12
     d9a:	ef 0e       	add	r14, r31
     d9c:	f1 1c       	adc	r15, r1
     d9e:	67 01       	movw	r12, r14
     da0:	c1 cf       	rjmp	.-126    	; 0xd24 <ISPProtocol_EnterISPMode+0x7e>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;
     da2:	80 ec       	ldi	r24, 0xC0	; 192
     da4:	03 c0       	rjmp	.+6      	; 0xdac <ISPProtocol_EnterISPMode+0x106>
     da6:	80 ec       	ldi	r24, 0xC0	; 192
     da8:	01 c0       	rjmp	.+2      	; 0xdac <ISPProtocol_EnterISPMode+0x106>
     daa:	80 ec       	ldi	r24, 0xC0	; 192
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dac:	e1 ef       	ldi	r30, 0xF1	; 241
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	90 e1       	ldi	r25, 0x10	; 16
     db2:	90 83       	st	Z, r25
     db4:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     db6:	e8 ee       	ldi	r30, 0xE8	; 232
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8e 77       	andi	r24, 0x7E	; 126
     dbe:	80 83       	st	Z, r24
	}

	Endpoint_Write_8(CMD_ENTER_PROGMODE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     dc0:	2f 96       	adiw	r28, 0x0f	; 15
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <ISPProtocol_LeaveISPMode>:

/** Handler for the CMD_LEAVE_ISP command, which releases the target from programming mode. */
void ISPProtocol_LeaveISPMode(void)
{
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	00 d0       	rcall	.+0      	; 0xde8 <ISPProtocol_LeaveISPMode+0xa>
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	{
		uint8_t PreDelayMS;
		uint8_t PostDelayMS;
	} Leave_ISP_Params;

	Endpoint_Read_Stream_LE(&Leave_ISP_Params, sizeof(Leave_ISP_Params), NULL);
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	62 e0       	ldi	r22, 0x02	; 2
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	28 d4       	rcall	.+2128   	; 0x164a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dfa:	08 ee       	ldi	r16, 0xE8	; 232
     dfc:	10 e0       	ldi	r17, 0x00	; 0
     dfe:	f8 01       	movw	r30, r16
     e00:	80 81       	ld	r24, Z
     e02:	8b 77       	andi	r24, 0x7B	; 123
     e04:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     e0c:	ec ee       	ldi	r30, 0xEC	; 236
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	81 60       	ori	r24, 0x01	; 1
     e14:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Perform pre-exit delay, release the target /RESET, disable the SPI bus and perform the post-exit delay */
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	33 df       	rcall	.-410    	; 0xc80 <ISPProtocol_DelayMS>
	ISPTarget_ChangeTargetResetLine(false);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	1e d1       	rcall	.+572    	; 0x105a <ISPTarget_ChangeTargetResetLine>
	ISPTarget_DisableTargetISP();
     e1e:	a7 d0       	rcall	.+334    	; 0xf6e <ISPTarget_DisableTargetISP>
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
     e22:	2e df       	rcall	.-420    	; 0xc80 <ISPProtocol_DelayMS>
     e24:	e1 ef       	ldi	r30, 0xF1	; 241
     e26:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e28:	81 e1       	ldi	r24, 0x11	; 17
     e2a:	80 83       	st	Z, r24
     e2c:	10 82       	st	Z, r1
     e2e:	f8 01       	movw	r30, r16
     e30:	80 81       	ld	r24, Z
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e32:	8e 77       	andi	r24, 0x7E	; 126
     e34:	80 83       	st	Z, r24
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0

	Endpoint_Write_8(CMD_LEAVE_PROGMODE_ISP);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <ISPProtocol_ChipErase>:
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
	}
}

/** Handler for the CMD_CHI_ERASE_ISP command, clearing the target's FLASH memory. */
void ISPProtocol_ChipErase(void)
{
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	00 d0       	rcall	.+0      	; 0xe52 <ISPProtocol_ChipErase+0xe>
     e52:	00 d0       	rcall	.+0      	; 0xe54 <ISPProtocol_ChipErase+0x10>
     e54:	00 d0       	rcall	.+0      	; 0xe56 <ISPProtocol_ChipErase+0x12>
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
		uint8_t EraseDelayMS;
		uint8_t PollMethod;
		uint8_t EraseCommandBytes[4];
	} Erase_Chip_Params;

	Endpoint_Read_Stream_LE(&Erase_Chip_Params, sizeof(Erase_Chip_Params), NULL);
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	66 e0       	ldi	r22, 0x06	; 6
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	f1 d3       	rcall	.+2018   	; 0x164a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e68:	e8 ee       	ldi	r30, 0xE8	; 232
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8b 77       	andi	r24, 0x7B	; 123
     e70:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     e78:	ec ee       	ldi	r30, 0xEC	; 236
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	81 60       	ori	r24, 0x01	; 1
     e80:	80 83       	st	Z, r24
     e82:	8e 01       	movw	r16, r28
     e84:	0d 5f       	subi	r16, 0xFD	; 253
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	7e 01       	movw	r14, r28
     e8a:	87 e0       	ldi	r24, 0x07	; 7
     e8c:	e8 0e       	add	r14, r24
     e8e:	f1 1c       	adc	r15, r1

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);
     e90:	f8 01       	movw	r30, r16
     e92:	81 91       	ld	r24, Z+
     e94:	8f 01       	movw	r16, r30
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     e96:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <HardwareSPIMode>
     e9a:	99 23       	and	r25, r25
     e9c:	29 f0       	breq	.+10     	; 0xea8 <ISPProtocol_ChipErase+0x64>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e9e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ea0:	0d b4       	in	r0, 0x2d	; 45
     ea2:	07 fe       	sbrs	r0, 7
     ea4:	fd cf       	rjmp	.-6      	; 0xea0 <ISPProtocol_ChipErase+0x5c>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <ISPProtocol_ChipErase+0x66>
     ea8:	b9 d0       	rcall	.+370    	; 0x101c <ISPTarget_TransferSoftSPIByte>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
     eaa:	0e 15       	cp	r16, r14
     eac:	1f 05       	cpc	r17, r15
     eae:	81 f7       	brne	.-32     	; 0xe90 <ISPProtocol_ChipErase+0x4c>
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	81 11       	cpse	r24, r1
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <ISPProtocol_ChipErase+0x7a>
     eb6:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;
     eb8:	e3 de       	rcall	.-570    	; 0xc80 <ISPProtocol_DelayMS>
     eba:	80 e0       	ldi	r24, 0x00	; 0

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
	else
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <ISPProtocol_ChipErase+0x7c>
     ebe:	db d0       	rcall	.+438    	; 0x1076 <ISPTarget_WaitWhileTargetBusy>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ec0:	e1 ef       	ldi	r30, 0xF1	; 241
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	92 e1       	ldi	r25, 0x12	; 18
     ec6:	90 83       	st	Z, r25
     ec8:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     eca:	e8 ee       	ldi	r30, 0xE8	; 232
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8e 77       	andi	r24, 0x7E	; 126
     ed2:	80 83       	st	Z, r24

	Endpoint_Write_8(CMD_CHIP_ERASE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     ed4:	26 96       	adiw	r28, 0x06	; 6
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	08 95       	ret

00000eee <__vector_15>:
static volatile uint8_t SoftSPI_BitsRemaining;


/** ISR to handle software SPI transmission and reception */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	8f 93       	push	r24
	/* Check if rising edge (output next bit) or falling edge (read in next bit) */
	if (!(PINB & (1 << 1)))
     efa:	19 99       	sbic	0x03, 1	; 3
     efc:	08 c0       	rjmp	.+16     	; 0xf0e <__vector_15+0x20>
	{
		if (SoftSPI_Data & (1 << 7))
     efe:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <SoftSPI_Data>
     f02:	88 23       	and	r24, r24
     f04:	14 f4       	brge	.+4      	; 0xf0a <__vector_15+0x1c>
		  PORTB |=  (1 << 2);
     f06:	2a 9a       	sbi	0x05, 2	; 5
     f08:	19 c0       	rjmp	.+50     	; 0xf3c <__vector_15+0x4e>
		else
		  PORTB &= ~(1 << 2);
     f0a:	2a 98       	cbi	0x05, 2	; 5
     f0c:	17 c0       	rjmp	.+46     	; 0xf3c <__vector_15+0x4e>
	}
	else
	{
		SoftSPI_Data <<= 1;
     f0e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <SoftSPI_Data>
     f12:	88 0f       	add	r24, r24
     f14:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <SoftSPI_Data>

		if (!(--SoftSPI_BitsRemaining))
     f18:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     f1c:	81 50       	subi	r24, 0x01	; 1
     f1e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
     f22:	81 11       	cpse	r24, r1
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <__vector_15+0x40>
		{
			TCCR1B = 0;
     f26:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
			TIFR1  = (1 << OCF1A);
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	86 bb       	out	0x16, r24	; 22
		}

		if (PINB & (1 << 3))
     f2e:	1b 9b       	sbis	0x03, 3	; 3
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <__vector_15+0x4e>
		  SoftSPI_Data |= (1 << 0);
     f32:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <SoftSPI_Data>
     f36:	81 60       	ori	r24, 0x01	; 1
     f38:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <SoftSPI_Data>
	}

	/* Fast toggle of PORTB.1 via the PIN register (see datasheet) */
	PINB |= (1 << 1);
     f3c:	19 9a       	sbi	0x03, 1	; 3
}
     f3e:	8f 91       	pop	r24
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <ISPTarget_ConfigureRescueClock>:
		UCSR1B = (1 << TXEN1);
		UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
	#else
		/* Configure OCR1A as an output for the specified AVR model */
		#if defined(USB_SERIES_2_AVR)
		DDRC |= (1 << 6);
     f4a:	3e 9a       	sbi	0x07, 6	; 7
		#else
		DDRB |= (1 << 5);
		#endif

		/* Start Timer 1 to generate a 4MHz clock on the OCR1A pin */
		TIMSK1 = 0;
     f4c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
		TCNT1  = 0;
     f50:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     f54:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
		OCR1A  = ((F_CPU / 2 / ISP_RESCUE_CLOCK_SPEED) - 1);
     f58:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     f5c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
		TCCR1A = (1 << COM1A0);
     f60:	80 e4       	ldi	r24, 0x40	; 64
     f62:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
		TCCR1B = ((1 << WGM12) | (1 << CS10));
     f66:	89 e0       	ldi	r24, 0x09	; 9
     f68:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
     f6c:	08 95       	ret

00000f6e <ISPTarget_DisableTargetISP>:
/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
	if (HardwareSPIMode)
     f6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
     f72:	88 23       	and	r24, r24
     f74:	49 f0       	breq	.+18     	; 0xf88 <ISPTarget_DisableTargetISP+0x1a>

			/** Turns off the SPI driver, disabling and returning used hardware to their default configuration. */
			static inline void SPI_Disable(void);
			static inline void SPI_Disable(void)
			{
				DDRB  &= ~((1 << 1) | (1 << 2));
     f76:	84 b1       	in	r24, 0x04	; 4
     f78:	89 7f       	andi	r24, 0xF9	; 249
     f7a:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~((1 << 0) | (1 << 3));
     f7c:	85 b1       	in	r24, 0x05	; 5
     f7e:	86 7f       	andi	r24, 0xF6	; 246
     f80:	85 b9       	out	0x05, r24	; 5

				SPCR   = 0;
     f82:	1c bc       	out	0x2c, r1	; 44
				SPSR   = 0;
     f84:	1d bc       	out	0x2d, r1	; 45
     f86:	08 95       	ret
	{
		SPI_Disable();
	}
	else
	{
		DDRB  &= ~((1 << 1) | (1 << 2));
     f88:	84 b1       	in	r24, 0x04	; 4
     f8a:	89 7f       	andi	r24, 0xF9	; 249
     f8c:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~((1 << 0) | (1 << 3));
     f8e:	85 b1       	in	r24, 0x05	; 5
     f90:	86 7f       	andi	r24, 0xF6	; 246
     f92:	85 b9       	out	0x05, r24	; 5

		/* Must re-enable rescue clock once software ISP has exited, as the timer for the rescue clock is
		 * re-purposed for software SPI */
		ISPTarget_ConfigureRescueClock();
     f94:	da cf       	rjmp	.-76     	; 0xf4a <ISPTarget_ConfigureRescueClock>
     f96:	08 95       	ret

00000f98 <ISPTarget_ConfigureSoftwareSPI>:
 *  \param[in] SCKDuration  Duration of the desired software ISP SCK clock
 */
void ISPTarget_ConfigureSoftwareSPI(const uint8_t SCKDuration)
{
	/* Configure Timer 1 for software SPI using the specified SCK duration */
	TIMSK1 = (1 << OCIE1A);
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	TCNT1  = 0;
     f9e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     fa2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	OCR1A  = pgm_read_word(&TimerCompareFromSCKDuration[SCKDuration - sizeof(SPIMaskFromSCKDuration)]);
     fa6:	e8 2f       	mov	r30, r24
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	ee 51       	subi	r30, 0x1E	; 30
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	85 91       	lpm	r24, Z+
     fb4:	94 91       	lpm	r25, Z
     fb6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     fba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	TCCR1A = 0;
     fbe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
	TCCR1B = 0;
     fc2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
     fc6:	08 95       	ret

00000fc8 <ISPTarget_EnableTargetISP>:
/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
	uint8_t SCKDuration = V2Params_GetParameterValue(PARAM_SCK_DURATION);
     fc8:	88 e9       	ldi	r24, 0x98	; 152
     fca:	c1 d2       	rcall	.+1410   	; 0x154e <V2Params_GetParameterValue>

	if (SCKDuration < sizeof(SPIMaskFromSCKDuration))
     fcc:	87 30       	cpi	r24, 0x07	; 7
     fce:	e0 f4       	brcc	.+56     	; 0x1008 <ISPTarget_EnableTargetISP+0x40>
	{
		HardwareSPIMode = true;
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <HardwareSPIMode>

		SPI_Init(pgm_read_byte(&SPIMaskFromSCKDuration[SCKDuration]) | SPI_ORDER_MSB_FIRST |
     fd6:	e8 2f       	mov	r30, r24
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	e6 5d       	subi	r30, 0xD6	; 214
     fdc:	fd 4f       	sbci	r31, 0xFD	; 253
     fde:	e4 91       	lpm	r30, Z
			 */
			static inline void SPI_Init(const uint8_t SPIOptions);
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     fe0:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     fe2:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     fe4:	84 b1       	in	r24, 0x04	; 4
     fe6:	86 60       	ori	r24, 0x06	; 6
     fe8:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     fea:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     fec:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
     fee:	e6 ff       	sbrs	r30, 6
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <ISPTarget_EnableTargetISP+0x32>
				  SPSR |= (1 << SPI2X);
     ff2:	8d b5       	in	r24, 0x2d	; 45
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	8d bd       	out	0x2d, r24	; 45
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <ISPTarget_EnableTargetISP+0x38>
				else
				  SPSR &= ~(1 << SPI2X);
     ffa:	8d b5       	in	r24, 0x2d	; 45
     ffc:	8e 7f       	andi	r24, 0xFE	; 254
     ffe:	8d bd       	out	0x2d, r24	; 45

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
    1000:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
    1002:	e0 65       	ori	r30, 0x50	; 80
    1004:	ec bd       	out	0x2c, r30	; 44
    1006:	08 95       	ret
		                       SPI_SCK_LEAD_RISING | SPI_SAMPLE_LEADING | SPI_MODE_MASTER);
	}
	else
	{
		HardwareSPIMode = false;
    1008:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <HardwareSPIMode>

		DDRB  |= ((1 << 1) | (1 << 2));
    100c:	94 b1       	in	r25, 0x04	; 4
    100e:	96 60       	ori	r25, 0x06	; 6
    1010:	94 b9       	out	0x04, r25	; 4
		PORTB |= ((1 << 0) | (1 << 3));
    1012:	95 b1       	in	r25, 0x05	; 5
    1014:	99 60       	ori	r25, 0x09	; 9

		ISPTarget_ConfigureSoftwareSPI(SCKDuration);
    1016:	95 b9       	out	0x05, r25	; 5
    1018:	bf cf       	rjmp	.-130    	; 0xf98 <ISPTarget_ConfigureSoftwareSPI>
    101a:	08 95       	ret

0000101c <ISPTarget_TransferSoftSPIByte>:
 *
 *  \return Received byte of data from the attached target
 */
uint8_t ISPTarget_TransferSoftSPIByte(const uint8_t Byte)
{
	SoftSPI_Data          = Byte;
    101c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <SoftSPI_Data>
	SoftSPI_BitsRemaining = 8;
    1020:	88 e0       	ldi	r24, 0x08	; 8
    1022:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>

	/* Set initial MOSI pin state according to the byte to be transferred */
	if (SoftSPI_Data & (1 << 7))
    1026:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <SoftSPI_Data>
    102a:	88 23       	and	r24, r24
    102c:	14 f4       	brge	.+4      	; 0x1032 <ISPTarget_TransferSoftSPIByte+0x16>
	  PORTB |=  (1 << 2);
    102e:	2a 9a       	sbi	0x05, 2	; 5
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <ISPTarget_TransferSoftSPIByte+0x18>
	else
	  PORTB &= ~(1 << 2);
    1032:	2a 98       	cbi	0x05, 2	; 5

	TCNT1  = 0;
    1034:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1038:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TCCR1B = ((1 << WGM12) | (1 << CS11));
    103c:	8a e0       	ldi	r24, 0x0A	; 10
    103e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	while (SoftSPI_BitsRemaining && TimeoutTicksRemaining);
    1042:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
    1046:	88 23       	and	r24, r24
    1048:	19 f0       	breq	.+6      	; 0x1050 <ISPTarget_TransferSoftSPIByte+0x34>
    104a:	8a b5       	in	r24, 0x2a	; 42
    104c:	81 11       	cpse	r24, r1
    104e:	f9 cf       	rjmp	.-14     	; 0x1042 <ISPTarget_TransferSoftSPIByte+0x26>
	TCCR1B = 0;
    1050:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>

	return SoftSPI_Data;
    1054:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <SoftSPI_Data>
}
    1058:	08 95       	ret

0000105a <ISPTarget_ChangeTargetResetLine>:
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{
	if (ResetTarget)
    105a:	88 23       	and	r24, r24
    105c:	49 f0       	breq	.+18     	; 0x1070 <ISPTarget_ChangeTargetResetLine+0x16>
	{
		AUX_LINE_DDR |= AUX_LINE_MASK;
    105e:	24 9a       	sbi	0x04, 4	; 4

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY)))
    1060:	8e e9       	ldi	r24, 0x9E	; 158
    1062:	75 d2       	rcall	.+1258   	; 0x154e <V2Params_GetParameterValue>
    1064:	81 11       	cpse	r24, r1
    1066:	02 c0       	rjmp	.+4      	; 0x106c <ISPTarget_ChangeTargetResetLine+0x12>
		  AUX_LINE_PORT |=  AUX_LINE_MASK;
    1068:	2c 9a       	sbi	0x05, 4	; 5
    106a:	08 95       	ret
		else
		  AUX_LINE_PORT &= ~AUX_LINE_MASK;
    106c:	2c 98       	cbi	0x05, 4	; 5
    106e:	08 95       	ret
	}
	else
	{
		AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    1070:	24 98       	cbi	0x04, 4	; 4
		AUX_LINE_PORT &= ~AUX_LINE_MASK;
    1072:	2c 98       	cbi	0x05, 4	; 5
    1074:	08 95       	ret

00001076 <ISPTarget_WaitWhileTargetBusy>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    1076:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    107a:	88 23       	and	r24, r24
    107c:	31 f0       	breq	.+12     	; 0x108a <ISPTarget_WaitWhileTargetBusy+0x14>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    107e:	80 ef       	ldi	r24, 0xF0	; 240
    1080:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1082:	0d b4       	in	r0, 0x2d	; 45
    1084:	07 fe       	sbrs	r0, 7
    1086:	fd cf       	rjmp	.-6      	; 0x1082 <ISPTarget_WaitWhileTargetBusy+0xc>
    1088:	02 c0       	rjmp	.+4      	; 0x108e <ISPTarget_WaitWhileTargetBusy+0x18>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    108a:	80 ef       	ldi	r24, 0xF0	; 240
    108c:	c7 df       	rcall	.-114    	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    108e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    1092:	88 23       	and	r24, r24
    1094:	29 f0       	breq	.+10     	; 0x10a0 <ISPTarget_WaitWhileTargetBusy+0x2a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1096:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1098:	0d b4       	in	r0, 0x2d	; 45
    109a:	07 fe       	sbrs	r0, 7
    109c:	fd cf       	rjmp	.-6      	; 0x1098 <ISPTarget_WaitWhileTargetBusy+0x22>
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <ISPTarget_WaitWhileTargetBusy+0x2e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	bc df       	rcall	.-136    	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    10a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    10a8:	88 23       	and	r24, r24
    10aa:	29 f0       	breq	.+10     	; 0x10b6 <ISPTarget_WaitWhileTargetBusy+0x40>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    10ac:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    10ae:	0d b4       	in	r0, 0x2d	; 45
    10b0:	07 fe       	sbrs	r0, 7
    10b2:	fd cf       	rjmp	.-6      	; 0x10ae <ISPTarget_WaitWhileTargetBusy+0x38>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <ISPTarget_WaitWhileTargetBusy+0x44>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	b1 df       	rcall	.-158    	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
    10ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    10be:	88 23       	and	r24, r24
    10c0:	31 f0       	breq	.+12     	; 0x10ce <ISPTarget_WaitWhileTargetBusy+0x58>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    10c2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    10c4:	0d b4       	in	r0, 0x2d	; 45
    10c6:	07 fe       	sbrs	r0, 7
    10c8:	fd cf       	rjmp	.-6      	; 0x10c4 <ISPTarget_WaitWhileTargetBusy+0x4e>
				return SPDR;
    10ca:	8e b5       	in	r24, 0x2e	; 46
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <ISPTarget_WaitWhileTargetBusy+0x5c>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	a5 df       	rcall	.-182    	; 0x101c <ISPTarget_TransferSoftSPIByte>
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_ReceiveByte() & 0x01) && TimeoutTicksRemaining);
    10d2:	80 ff       	sbrs	r24, 0
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <ISPTarget_WaitWhileTargetBusy+0x66>
    10d6:	8a b5       	in	r24, 0x2a	; 42
    10d8:	81 11       	cpse	r24, r1
    10da:	cd cf       	rjmp	.-102    	; 0x1076 <ISPTarget_WaitWhileTargetBusy>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
    10dc:	8a b5       	in	r24, 0x2a	; 42
    10de:	81 11       	cpse	r24, r1
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <ISPTarget_WaitWhileTargetBusy+0x70>
    10e2:	81 e8       	ldi	r24, 0x81	; 129
    10e4:	08 95       	ret
    10e6:	80 e0       	ldi	r24, 0x00	; 0
}
    10e8:	08 95       	ret

000010ea <ISPTarget_LoadExtendedAddress>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    10ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    10ee:	88 23       	and	r24, r24
    10f0:	31 f0       	breq	.+12     	; 0x10fe <ISPTarget_LoadExtendedAddress+0x14>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    10f2:	8d e4       	ldi	r24, 0x4D	; 77
    10f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    10f6:	0d b4       	in	r0, 0x2d	; 45
    10f8:	07 fe       	sbrs	r0, 7
    10fa:	fd cf       	rjmp	.-6      	; 0x10f6 <ISPTarget_LoadExtendedAddress+0xc>
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <ISPTarget_LoadExtendedAddress+0x18>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    10fe:	8d e4       	ldi	r24, 0x4D	; 77
    1100:	8d df       	rcall	.-230    	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    1102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    1106:	88 23       	and	r24, r24
    1108:	29 f0       	breq	.+10     	; 0x1114 <ISPTarget_LoadExtendedAddress+0x2a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    110a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    110c:	0d b4       	in	r0, 0x2d	; 45
    110e:	07 fe       	sbrs	r0, 7
    1110:	fd cf       	rjmp	.-6      	; 0x110c <ISPTarget_LoadExtendedAddress+0x22>
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <ISPTarget_LoadExtendedAddress+0x2e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	82 df       	rcall	.-252    	; 0x101c <ISPTarget_TransferSoftSPIByte>
 */
void ISPTarget_LoadExtendedAddress(void)
{
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
	ISPTarget_SendByte(CurrentAddress >> 16);
    1118:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentAddress>
    111c:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentAddress+0x1>
    1120:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <CurrentAddress+0x2>
    1124:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <CurrentAddress+0x3>
    1128:	cd 01       	movw	r24, r26
    112a:	aa 27       	eor	r26, r26
    112c:	bb 27       	eor	r27, r27
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    112e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <HardwareSPIMode>
    1132:	22 23       	and	r18, r18
    1134:	29 f0       	breq	.+10     	; 0x1140 <ISPTarget_LoadExtendedAddress+0x56>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1136:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1138:	0d b4       	in	r0, 0x2d	; 45
    113a:	07 fe       	sbrs	r0, 7
    113c:	fd cf       	rjmp	.-6      	; 0x1138 <ISPTarget_LoadExtendedAddress+0x4e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <ISPTarget_LoadExtendedAddress+0x58>
    1140:	6d df       	rcall	.-294    	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    1142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    1146:	88 23       	and	r24, r24
    1148:	29 f0       	breq	.+10     	; 0x1154 <ISPTarget_LoadExtendedAddress+0x6a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    114a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    114c:	0d b4       	in	r0, 0x2d	; 45
    114e:	07 fe       	sbrs	r0, 7
    1150:	fd cf       	rjmp	.-6      	; 0x114c <ISPTarget_LoadExtendedAddress+0x62>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    1152:	08 95       	ret
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	62 cf       	rjmp	.-316    	; 0x101c <ISPTarget_TransferSoftSPIByte>
    1158:	08 95       	ret

0000115a <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	16 2f       	mov	r17, r22
    1164:	d4 2f       	mov	r29, r20
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
    1166:	8e 77       	andi	r24, 0x7E	; 126
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	88 30       	cpi	r24, 0x08	; 8
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <ISPTarget_WaitForProgComplete+0x18>
    1170:	4d c0       	rjmp	.+154    	; 0x120c <ISPTarget_WaitForProgComplete+0xb2>
    1172:	34 f4       	brge	.+12     	; 0x1180 <ISPTarget_WaitForProgComplete+0x26>
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	91 05       	cpc	r25, r1
    1178:	69 f0       	breq	.+26     	; 0x1194 <ISPTarget_WaitForProgComplete+0x3a>
    117a:	04 97       	sbiw	r24, 0x04	; 4
    117c:	79 f0       	breq	.+30     	; 0x119c <ISPTarget_WaitForProgComplete+0x42>
    117e:	48 c0       	rjmp	.+144    	; 0x1210 <ISPTarget_WaitForProgComplete+0xb6>
    1180:	80 32       	cpi	r24, 0x20	; 32
    1182:	91 05       	cpc	r25, r1
    1184:	59 f0       	breq	.+22     	; 0x119c <ISPTarget_WaitForProgComplete+0x42>
    1186:	80 34       	cpi	r24, 0x40	; 64
    1188:	91 05       	cpc	r25, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <ISPTarget_WaitForProgComplete+0x34>
    118c:	3f c0       	rjmp	.+126    	; 0x120c <ISPTarget_WaitForProgComplete+0xb2>
    118e:	40 97       	sbiw	r24, 0x10	; 16
    1190:	09 f0       	breq	.+2      	; 0x1194 <ISPTarget_WaitForProgComplete+0x3a>
    1192:	3e c0       	rjmp	.+124    	; 0x1210 <ISPTarget_WaitForProgComplete+0xb6>
	{
		case PROG_MODE_WORD_TIMEDELAY_MASK:
		case PROG_MODE_PAGED_TIMEDELAY_MASK:
			ISPProtocol_DelayMS(DelayMS);
    1194:	82 2f       	mov	r24, r18
    1196:	74 dd       	rcall	.-1304   	; 0xc80 <ISPProtocol_DelayMS>
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
    1198:	80 e0       	ldi	r24, 0x00	; 0
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
	{
		case PROG_MODE_WORD_TIMEDELAY_MASK:
		case PROG_MODE_PAGED_TIMEDELAY_MASK:
			ISPProtocol_DelayMS(DelayMS);
			break;
    119a:	3d c0       	rjmp	.+122    	; 0x1216 <ISPTarget_WaitForProgComplete+0xbc>
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
    119c:	c7 2f       	mov	r28, r23
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    119e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    11a2:	88 23       	and	r24, r24
    11a4:	29 f0       	breq	.+10     	; 0x11b0 <ISPTarget_WaitForProgComplete+0x56>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    11a6:	0e bd       	out	0x2e, r16	; 46
				while (!(SPSR & (1 << SPIF)));
    11a8:	0d b4       	in	r0, 0x2d	; 45
    11aa:	07 fe       	sbrs	r0, 7
    11ac:	fd cf       	rjmp	.-6      	; 0x11a8 <ISPTarget_WaitForProgComplete+0x4e>
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <ISPTarget_WaitForProgComplete+0x5a>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    11b0:	80 2f       	mov	r24, r16
    11b2:	34 df       	rcall	.-408    	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    11b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    11b8:	88 23       	and	r24, r24
    11ba:	29 f0       	breq	.+10     	; 0x11c6 <ISPTarget_WaitForProgComplete+0x6c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    11bc:	ce bd       	out	0x2e, r28	; 46
				while (!(SPSR & (1 << SPIF)));
    11be:	0d b4       	in	r0, 0x2d	; 45
    11c0:	07 fe       	sbrs	r0, 7
    11c2:	fd cf       	rjmp	.-6      	; 0x11be <ISPTarget_WaitForProgComplete+0x64>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <ISPTarget_WaitForProgComplete+0x70>
    11c6:	8c 2f       	mov	r24, r28
    11c8:	29 df       	rcall	.-430    	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    11ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    11ce:	88 23       	and	r24, r24
    11d0:	29 f0       	breq	.+10     	; 0x11dc <ISPTarget_WaitForProgComplete+0x82>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    11d2:	1e bd       	out	0x2e, r17	; 46
				while (!(SPSR & (1 << SPIF)));
    11d4:	0d b4       	in	r0, 0x2d	; 45
    11d6:	07 fe       	sbrs	r0, 7
    11d8:	fd cf       	rjmp	.-6      	; 0x11d4 <ISPTarget_WaitForProgComplete+0x7a>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <ISPTarget_WaitForProgComplete+0x86>
    11dc:	81 2f       	mov	r24, r17
    11de:	1e df       	rcall	.-452    	; 0x101c <ISPTarget_TransferSoftSPIByte>
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
    11e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <HardwareSPIMode>
    11e4:	88 23       	and	r24, r24
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <ISPTarget_WaitForProgComplete+0x9a>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
    11e8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    11ea:	0d b4       	in	r0, 0x2d	; 45
    11ec:	07 fe       	sbrs	r0, 7
				return SPDR;
    11ee:	fd cf       	rjmp	.-6      	; 0x11ea <ISPTarget_WaitForProgComplete+0x90>
    11f0:	8e b5       	in	r24, 0x2e	; 46
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <ISPTarget_WaitForProgComplete+0x9e>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	12 df       	rcall	.-476    	; 0x101c <ISPTarget_TransferSoftSPIByte>
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
    11f8:	d8 13       	cpse	r29, r24
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <ISPTarget_WaitForProgComplete+0xa8>
    11fc:	8a b5       	in	r24, 0x2a	; 42
    11fe:	81 11       	cpse	r24, r1
    1200:	ce cf       	rjmp	.-100    	; 0x119e <ISPTarget_WaitForProgComplete+0x44>

			if (!(TimeoutTicksRemaining))
    1202:	8a b5       	in	r24, 0x2a	; 42
    1204:	81 11       	cpse	r24, r1
			  ProgrammingStatus = STATUS_CMD_TOUT;
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <ISPTarget_WaitForProgComplete+0xba>
    1208:	80 e8       	ldi	r24, 0x80	; 128

			break;
		case PROG_MODE_WORD_READYBUSY_MASK:
		case PROG_MODE_PAGED_READYBUSY_MASK:
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
    120a:	05 c0       	rjmp	.+10     	; 0x1216 <ISPTarget_WaitForProgComplete+0xbc>
    120c:	34 df       	rcall	.-408    	; 0x1076 <ISPTarget_WaitWhileTargetBusy>
			break;
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <ISPTarget_WaitForProgComplete+0xbc>
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <ISPTarget_WaitForProgComplete+0xbc>
    1214:	80 e0       	ldi	r24, 0x00	; 0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
    1216:	94 e6       	ldi	r25, 0x64	; 100
    1218:	9a bd       	out	0x2a, r25	; 42

	return ProgrammingStatus;
}
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	08 95       	ret

00001224 <__vector_19>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
    1224:	78 94       	sei
    1226:	1f 92       	push	r1
    1228:	0f 92       	push	r0
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	0f 92       	push	r0
    122e:	11 24       	eor	r1, r1
    1230:	8f 93       	push	r24
	if (TimeoutTicksRemaining)
    1232:	8a b5       	in	r24, 0x2a	; 42
    1234:	88 23       	and	r24, r24
    1236:	21 f0       	breq	.+8      	; 0x1240 <__vector_19+0x1c>
	  TimeoutTicksRemaining--;
    1238:	8a b5       	in	r24, 0x2a	; 42
    123a:	81 50       	subi	r24, 0x01	; 1
    123c:	8a bd       	out	0x2a, r24	; 42
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <__vector_19+0x1e>
	else
	  TCCR0B = 0;
    1240:	15 bc       	out	0x25, r1	; 37
}
    1242:	8f 91       	pop	r24
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <V2Protocol_Init>:
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(VTARGET_REF_MASK | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	/* Timeout timer initialization (~10ms period) */
	OCR0A  = (((F_CPU / 1024) / 100) - 1);
    124e:	8d e4       	ldi	r24, 0x4D	; 77
    1250:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A);
    1256:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>

	V2Params_LoadNonVolatileParamValues();
    125a:	57 d1       	rcall	.+686    	; 0x150a <V2Params_LoadNonVolatileParamValues>

	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
    125c:	76 ce       	rjmp	.-788    	; 0xf4a <ISPTarget_ConfigureRescueClock>
    125e:	08 95       	ret

00001260 <V2Protocol_ProcessCommand>:
    1260:	ef 92       	push	r14
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    126c:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	uint8_t V2Command = Endpoint_Read_8();

	/* Reset timeout counter duration and start the timer */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
    1270:	84 e6       	ldi	r24, 0x64	; 100
    1272:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = ((1 << CS02) | (1 << CS00));
    1274:	85 e0       	ldi	r24, 0x05	; 5
    1276:	85 bd       	out	0x25, r24	; 37

	switch (V2Command)
    1278:	c3 31       	cpi	r28, 0x13	; 19
    127a:	09 f4       	brne	.+2      	; 0x127e <V2Protocol_ProcessCommand+0x1e>
    127c:	d3 c0       	rjmp	.+422    	; 0x1424 <V2Protocol_ProcessCommand+0x1c4>
    127e:	d0 f4       	brcc	.+52     	; 0x12b4 <V2Protocol_ProcessCommand+0x54>
    1280:	c6 30       	cpi	r28, 0x06	; 6
    1282:	09 f4       	brne	.+2      	; 0x1286 <V2Protocol_ProcessCommand+0x26>
    1284:	89 c0       	rjmp	.+274    	; 0x1398 <V2Protocol_ProcessCommand+0x138>
    1286:	38 f4       	brcc	.+14     	; 0x1296 <V2Protocol_ProcessCommand+0x36>
    1288:	c1 30       	cpi	r28, 0x01	; 1
    128a:	99 f1       	breq	.+102    	; 0x12f2 <V2Protocol_ProcessCommand+0x92>
    128c:	60 f1       	brcs	.+88     	; 0x12e6 <V2Protocol_ProcessCommand+0x86>
    128e:	c4 30       	cpi	r28, 0x04	; 4
    1290:	08 f4       	brcc	.+2      	; 0x1294 <V2Protocol_ProcessCommand+0x34>
    1292:	4e c0       	rjmp	.+156    	; 0x1330 <V2Protocol_ProcessCommand+0xd0>
    1294:	28 c0       	rjmp	.+80     	; 0x12e6 <V2Protocol_ProcessCommand+0x86>
    1296:	c0 31       	cpi	r28, 0x10	; 16
    1298:	09 f4       	brne	.+2      	; 0x129c <V2Protocol_ProcessCommand+0x3c>
    129a:	c0 c0       	rjmp	.+384    	; 0x141c <V2Protocol_ProcessCommand+0x1bc>
    129c:	20 f4       	brcc	.+8      	; 0x12a6 <V2Protocol_ProcessCommand+0x46>
    129e:	ca 30       	cpi	r28, 0x0A	; 10
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <V2Protocol_ProcessCommand+0x44>
    12a2:	a6 c0       	rjmp	.+332    	; 0x13f0 <V2Protocol_ProcessCommand+0x190>
    12a4:	20 c0       	rjmp	.+64     	; 0x12e6 <V2Protocol_ProcessCommand+0x86>
    12a6:	c1 31       	cpi	r28, 0x11	; 17
    12a8:	09 f4       	brne	.+2      	; 0x12ac <V2Protocol_ProcessCommand+0x4c>
    12aa:	ba c0       	rjmp	.+372    	; 0x1420 <V2Protocol_ProcessCommand+0x1c0>
    12ac:	c2 31       	cpi	r28, 0x12	; 18
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <V2Protocol_ProcessCommand+0x52>
    12b0:	c0 c0       	rjmp	.+384    	; 0x1432 <V2Protocol_ProcessCommand+0x1d2>
    12b2:	19 c0       	rjmp	.+50     	; 0x12e6 <V2Protocol_ProcessCommand+0x86>
    12b4:	c8 31       	cpi	r28, 0x18	; 24
    12b6:	09 f4       	brne	.+2      	; 0x12ba <V2Protocol_ProcessCommand+0x5a>
    12b8:	be c0       	rjmp	.+380    	; 0x1436 <V2Protocol_ProcessCommand+0x1d6>
    12ba:	60 f4       	brcc	.+24     	; 0x12d4 <V2Protocol_ProcessCommand+0x74>
    12bc:	c5 31       	cpi	r28, 0x15	; 21
    12be:	09 f4       	brne	.+2      	; 0x12c2 <V2Protocol_ProcessCommand+0x62>
    12c0:	b1 c0       	rjmp	.+354    	; 0x1424 <V2Protocol_ProcessCommand+0x1c4>
    12c2:	08 f4       	brcc	.+2      	; 0x12c6 <V2Protocol_ProcessCommand+0x66>
    12c4:	b3 c0       	rjmp	.+358    	; 0x142c <V2Protocol_ProcessCommand+0x1cc>
    12c6:	c6 31       	cpi	r28, 0x16	; 22
    12c8:	09 f4       	brne	.+2      	; 0x12cc <V2Protocol_ProcessCommand+0x6c>
    12ca:	b0 c0       	rjmp	.+352    	; 0x142c <V2Protocol_ProcessCommand+0x1cc>
    12cc:	c7 31       	cpi	r28, 0x17	; 23
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <V2Protocol_ProcessCommand+0x72>
    12d0:	b5 c0       	rjmp	.+362    	; 0x143c <V2Protocol_ProcessCommand+0x1dc>
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <V2Protocol_ProcessCommand+0x86>
    12d4:	cd 31       	cpi	r28, 0x1D	; 29
    12d6:	20 f4       	brcc	.+8      	; 0x12e0 <V2Protocol_ProcessCommand+0x80>
    12d8:	ca 31       	cpi	r28, 0x1A	; 26
    12da:	08 f4       	brcc	.+2      	; 0x12de <V2Protocol_ProcessCommand+0x7e>
    12dc:	af c0       	rjmp	.+350    	; 0x143c <V2Protocol_ProcessCommand+0x1dc>
    12de:	ab c0       	rjmp	.+342    	; 0x1436 <V2Protocol_ProcessCommand+0x1d6>
    12e0:	cd 31       	cpi	r28, 0x1D	; 29
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <V2Protocol_ProcessCommand+0x86>
    12e4:	ae c0       	rjmp	.+348    	; 0x1442 <V2Protocol_ProcessCommand+0x1e2>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    12e6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
    12ea:	80 34       	cpi	r24, 0x40	; 64
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <V2Protocol_ProcessCommand+0x90>
    12ee:	ab c0       	rjmp	.+342    	; 0x1446 <V2Protocol_ProcessCommand+0x1e6>
    12f0:	ba c0       	rjmp	.+372    	; 0x1466 <V2Protocol_ProcessCommand+0x206>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12f2:	c8 ee       	ldi	r28, 0xE8	; 232
    12f4:	d0 e0       	ldi	r29, 0x00	; 0
    12f6:	88 81       	ld	r24, Y
    12f8:	8b 77       	andi	r24, 0x7B	; 123
    12fa:	88 83       	st	Y, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1302:	ec ee       	ldi	r30, 0xEC	; 236
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    130c:	e1 ef       	ldi	r30, 0xF1	; 241
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	80 83       	st	Z, r24
    1314:	10 82       	st	Z, r1
    1316:	8a e0       	ldi	r24, 0x0A	; 10
    1318:	80 83       	st	Z, r24
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	6a e0       	ldi	r22, 0x0A	; 10
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	8f e1       	ldi	r24, 0x1F	; 31
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	34 d1       	rcall	.+616    	; 0x1590 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1328:	88 81       	ld	r24, Y
    132a:	8e 77       	andi	r24, 0x7E	; 126
    132c:	88 83       	st	Y, r24
    132e:	b0 c0       	rjmp	.+352    	; 0x1490 <V2Protocol_ProcessCommand+0x230>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1330:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
    1334:	c2 30       	cpi	r28, 0x02	; 2
    1336:	09 f0       	breq	.+2      	; 0x133a <V2Protocol_ProcessCommand+0xda>
    1338:	b6 c0       	rjmp	.+364    	; 0x14a6 <V2Protocol_ProcessCommand+0x246>
    133a:	e1 ef       	ldi	r30, 0xF1	; 241
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	c0 81       	ld	r28, Z
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1340:	a8 ee       	ldi	r26, 0xE8	; 232
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	8c 91       	ld	r24, X
    1346:	8b 77       	andi	r24, 0x7B	; 123
    1348:	8c 93       	st	X, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    134a:	92 e0       	ldi	r25, 0x02	; 2
    134c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1350:	ac ee       	ldi	r26, 0xEC	; 236
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	8c 91       	ld	r24, X
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	8c 93       	st	X, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    135a:	90 83       	st	Z, r25
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
    135c:	8d 2f       	mov	r24, r29
    135e:	ef d0       	rcall	.+478    	; 0x153e <V2Params_GetParameterPrivileges>

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
    1360:	81 ff       	sbrs	r24, 1
    1362:	11 c0       	rjmp	.+34     	; 0x1386 <V2Protocol_ProcessCommand+0x126>
    1364:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
    1368:	6c 2f       	mov	r22, r28
    136a:	8d 2f       	mov	r24, r29
    136c:	f8 d0       	rcall	.+496    	; 0x155e <V2Params_SetParameterValue>
    136e:	0e c0       	rjmp	.+28     	; 0x138c <V2Protocol_ProcessCommand+0x12c>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
    1370:	80 ff       	sbrs	r24, 0
    1372:	09 c0       	rjmp	.+18     	; 0x1386 <V2Protocol_ProcessCommand+0x126>
    1374:	01 ef       	ldi	r16, 0xF1	; 241
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	f8 01       	movw	r30, r16
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
    137a:	10 82       	st	Z, r1
    137c:	8d 2f       	mov	r24, r29
    137e:	e7 d0       	rcall	.+462    	; 0x154e <V2Params_GetParameterValue>
    1380:	f8 01       	movw	r30, r16
    1382:	80 83       	st	Z, r24
    1384:	03 c0       	rjmp	.+6      	; 0x138c <V2Protocol_ProcessCommand+0x12c>
    1386:	80 ec       	ldi	r24, 0xC0	; 192
    1388:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    138c:	e8 ee       	ldi	r30, 0xE8	; 232
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8e 77       	andi	r24, 0x7E	; 126
    1394:	80 83       	st	Z, r24
    1396:	7c c0       	rjmp	.+248    	; 0x1490 <V2Protocol_ProcessCommand+0x230>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	64 e0       	ldi	r22, 0x04	; 4
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	8d e2       	ldi	r24, 0x2D	; 45
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	af d1       	rcall	.+862    	; 0x1704 <Endpoint_Read_Stream_BE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13a6:	e8 ee       	ldi	r30, 0xE8	; 232
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8b 77       	andi	r24, 0x7B	; 123
    13ae:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    13b6:	ec ee       	ldi	r30, 0xEC	; 236
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	81 60       	ori	r24, 0x01	; 1
    13be:	80 83       	st	Z, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
    13c0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentAddress>
    13c4:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentAddress+0x1>
    13c8:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <CurrentAddress+0x2>
    13cc:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <CurrentAddress+0x3>
    13d0:	bb 23       	and	r27, r27
    13d2:	1c f4       	brge	.+6      	; 0x13da <V2Protocol_ProcessCommand+0x17a>
	  MustLoadExtendedAddress = true;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <MustLoadExtendedAddress>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13da:	e1 ef       	ldi	r30, 0xF1	; 241
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	86 e0       	ldi	r24, 0x06	; 6
    13e0:	80 83       	st	Z, r24
    13e2:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13e4:	e8 ee       	ldi	r30, 0xE8	; 232
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	8e 77       	andi	r24, 0x7E	; 126
    13ec:	80 83       	st	Z, r24
    13ee:	50 c0       	rjmp	.+160    	; 0x1490 <V2Protocol_ProcessCommand+0x230>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13f0:	e8 ee       	ldi	r30, 0xE8	; 232
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8b 77       	andi	r24, 0x7B	; 123
    13f8:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1400:	ac ee       	ldi	r26, 0xEC	; 236
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	8c 91       	ld	r24, X
    1406:	81 60       	ori	r24, 0x01	; 1
    1408:	8c 93       	st	X, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    140a:	a1 ef       	ldi	r26, 0xF1	; 241
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	8a e0       	ldi	r24, 0x0A	; 10
    1410:	8c 93       	st	X, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1412:	1c 92       	st	X, r1
    1414:	80 81       	ld	r24, Z
    1416:	8e 77       	andi	r24, 0x7E	; 126
		case CMD_RESET_PROTECTION:
			V2Protocol_ResetProtection();
			break;
#if defined(ENABLE_ISP_PROTOCOL)
		case CMD_ENTER_PROGMODE_ISP:
			ISPProtocol_EnterISPMode();
    1418:	80 83       	st	Z, r24
    141a:	3a c0       	rjmp	.+116    	; 0x1490 <V2Protocol_ProcessCommand+0x230>
			break;
    141c:	44 dc       	rcall	.-1912   	; 0xca6 <ISPProtocol_EnterISPMode>
		case CMD_LEAVE_PROGMODE_ISP:
			ISPProtocol_LeaveISPMode();
    141e:	38 c0       	rjmp	.+112    	; 0x1490 <V2Protocol_ProcessCommand+0x230>
			break;
    1420:	de dc       	rcall	.-1604   	; 0xdde <ISPProtocol_LeaveISPMode>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPProtocol_ProgramMemory(V2Command);
    1422:	36 c0       	rjmp	.+108    	; 0x1490 <V2Protocol_ProcessCommand+0x230>
    1424:	8c 2f       	mov	r24, r28
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			ISPProtocol_ReadMemory(V2Command);
    1426:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ISPProtocol_ProgramMemory>
			break;
    142a:	32 c0       	rjmp	.+100    	; 0x1490 <V2Protocol_ProcessCommand+0x230>
		case CMD_CHIP_ERASE_ISP:
			ISPProtocol_ChipErase();
    142c:	8c 2f       	mov	r24, r28
			break;
    142e:	9e d9       	rcall	.-3268   	; 0x76c <ISPProtocol_ReadMemory>
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_OSCCAL_ISP:
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
    1430:	2f c0       	rjmp	.+94     	; 0x1490 <V2Protocol_ProcessCommand+0x230>
    1432:	08 dd       	rcall	.-1520   	; 0xe44 <ISPProtocol_ChipErase>
    1434:	2d c0       	rjmp	.+90     	; 0x1490 <V2Protocol_ProcessCommand+0x230>
			break;
    1436:	8c 2f       	mov	r24, r28
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			ISPProtocol_WriteFuseLock(V2Command);
    1438:	b0 da       	rcall	.-2720   	; 0x99a <ISPProtocol_ReadFuseLockSigOSCCAL>
    143a:	2a c0       	rjmp	.+84     	; 0x1490 <V2Protocol_ProcessCommand+0x230>
    143c:	8c 2f       	mov	r24, r28
			break;
    143e:	10 db       	rcall	.-2528   	; 0xa60 <ISPProtocol_WriteFuseLock>
		case CMD_SPI_MULTI:
			ISPProtocol_SPIMulti();
    1440:	27 c0       	rjmp	.+78     	; 0x1490 <V2Protocol_ProcessCommand+0x230>
    1442:	5b db       	rcall	.-2378   	; 0xafa <ISPProtocol_SPIMulti>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1444:	25 c0       	rjmp	.+74     	; 0x1490 <V2Protocol_ProcessCommand+0x230>
    1446:	08 ee       	ldi	r16, 0xE8	; 232
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	0f 2e       	mov	r0, r31
    144c:	f2 ef       	ldi	r31, 0xF2	; 242
    144e:	ef 2e       	mov	r14, r31
    1450:	f1 2c       	mov	r15, r1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1452:	f0 2d       	mov	r31, r0
    1454:	f8 01       	movw	r30, r16
    1456:	80 81       	ld	r24, Z
    1458:	8b 77       	andi	r24, 0x7B	; 123
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
    145a:	80 83       	st	Z, r24
    145c:	65 d2       	rcall	.+1226   	; 0x1928 <Endpoint_WaitUntilReady>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    145e:	f7 01       	movw	r30, r14
    1460:	80 81       	ld	r24, Z
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
    1462:	80 34       	cpi	r24, 0x40	; 64
    1464:	b9 f3       	breq	.-18     	; 0x1454 <V2Protocol_ProcessCommand+0x1f4>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1466:	e8 ee       	ldi	r30, 0xE8	; 232
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8b 77       	andi	r24, 0x7B	; 123
    146e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1476:	ac ee       	ldi	r26, 0xEC	; 236
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	8c 91       	ld	r24, X
    147c:	81 60       	ori	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    147e:	8c 93       	st	X, r24
    1480:	a1 ef       	ldi	r26, 0xF1	; 241
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	cc 93       	st	X, r28
    1486:	89 ec       	ldi	r24, 0xC9	; 201
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1488:	8c 93       	st	X, r24
    148a:	80 81       	ld	r24, Z
    148c:	8e 77       	andi	r24, 0x7E	; 126
			V2Protocol_UnknownCommand(V2Command);
			break;
	}

	/* Disable the timeout management timer */
	TCCR0B = 0;
    148e:	80 83       	st	Z, r24

	Endpoint_WaitUntilReady();
    1490:	15 bc       	out	0x25, r1	; 37
    1492:	4a d2       	rcall	.+1172   	; 0x1928 <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    149a:	ec ee       	ldi	r30, 0xEC	; 236
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8e 7f       	andi	r24, 0xFE	; 254
    14a2:	80 83       	st	Z, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
    14a4:	15 c0       	rjmp	.+42     	; 0x14d0 <V2Protocol_ProcessCommand+0x270>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14a6:	e8 ee       	ldi	r30, 0xE8	; 232
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14ae:	80 83       	st	Z, r24
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    14b6:	ec ee       	ldi	r30, 0xEC	; 236
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	81 60       	ori	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14be:	80 83       	st	Z, r24
    14c0:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
    14c4:	8d 2f       	mov	r24, r29
    14c6:	3b d0       	rcall	.+118    	; 0x153e <V2Params_GetParameterPrivileges>
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
    14c8:	c3 30       	cpi	r28, 0x03	; 3
    14ca:	09 f0       	breq	.+2      	; 0x14ce <V2Protocol_ProcessCommand+0x26e>
    14cc:	5c cf       	rjmp	.-328    	; 0x1386 <V2Protocol_ProcessCommand+0x126>
    14ce:	50 cf       	rjmp	.-352    	; 0x1370 <V2Protocol_ProcessCommand+0x110>
	TCCR0B = 0;

	Endpoint_WaitUntilReady();
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	08 95       	ret

000014de <V2Params_GetParamFromTable>:
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
    14de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ParameterTable>
    14e2:	89 17       	cp	r24, r25
    14e4:	69 f0       	breq	.+26     	; 0x1500 <V2Params_GetParamFromTable+0x22>
		  return CurrTableItem;

		CurrTableItem++;
    14e6:	e4 e0       	ldi	r30, 0x04	; 4
    14e8:	f1 e0       	ldi	r31, 0x01	; 1
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
    14ea:	90 81       	ld	r25, Z
    14ec:	98 17       	cp	r25, r24
    14ee:	59 f0       	breq	.+22     	; 0x1506 <V2Params_GetParamFromTable+0x28>
		  return CurrTableItem;

		CurrTableItem++;
    14f0:	33 96       	adiw	r30, 0x03	; 3
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	ef 31       	cpi	r30, 0x1F	; 31
    14f6:	f9 07       	cpc	r31, r25
    14f8:	c1 f7       	brne	.-16     	; 0x14ea <V2Params_GetParamFromTable+0xc>
		  return CurrTableItem;

		CurrTableItem++;
	}

	return NULL;
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	08 95       	ret
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	08 95       	ret
    1506:	cf 01       	movw	r24, r30

		CurrTableItem++;
	}

	return NULL;
}
    1508:	08 95       	ret

0000150a <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
	/* Read parameter values that are stored in non-volatile EEPROM */
	uint8_t ResetPolarity = eeprom_read_byte(&EEPROM_Reset_Polarity);
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	4d d4       	rcall	.+2202   	; 0x1dae <eeprom_read_byte>
    1514:	d8 2f       	mov	r29, r24
	uint8_t SCKDuration   = eeprom_read_byte(&EEPROM_SCK_Duration);
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	49 d4       	rcall	.+2194   	; 0x1dae <eeprom_read_byte>
    151c:	c8 2f       	mov	r28, r24

	/* Update current parameter table if the EEPROM contents was not blank */
	if (ResetPolarity != 0xFF)
    151e:	df 3f       	cpi	r29, 0xFF	; 255
	  V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = ResetPolarity;
    1520:	21 f0       	breq	.+8      	; 0x152a <V2Params_LoadNonVolatileParamValues+0x20>
    1522:	8e e9       	ldi	r24, 0x9E	; 158
    1524:	dc df       	rcall	.-72     	; 0x14de <V2Params_GetParamFromTable>
    1526:	fc 01       	movw	r30, r24
    1528:	d2 83       	std	Z+2, r29	; 0x02

	/* Update current parameter table if the EEPROM contents was not blank */
	if (SCKDuration != 0xFF)
    152a:	cf 3f       	cpi	r28, 0xFF	; 255
	  V2Params_GetParamFromTable(PARAM_SCK_DURATION)->ParamValue   = SCKDuration;
    152c:	21 f0       	breq	.+8      	; 0x1536 <V2Params_LoadNonVolatileParamValues+0x2c>
    152e:	88 e9       	ldi	r24, 0x98	; 152
    1530:	d6 df       	rcall	.-84     	; 0x14de <V2Params_GetParamFromTable>
    1532:	fc 01       	movw	r30, r24
    1534:	c2 83       	std	Z+2, r28	; 0x02
}
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	08 95       	ret

0000153c <V2Params_UpdateParamValues>:

/** Updates any parameter values that are sourced from hardware rather than explicitly set by the host, such as
 *  VTARGET levels from the ADC on supported AVR models.
 */
void V2Params_UpdateParamValues(void)
{
    153c:	08 95       	ret

0000153e <V2Params_GetParameterPrivileges>:
 *
 *  \return Privileges for the requested parameter, as a mask of \c PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
    153e:	cf df       	rcall	.-98     	; 0x14de <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	19 f0       	breq	.+6      	; 0x154a <V2Params_GetParameterPrivileges+0xc>
	  return 0;

	return ParamInfo->ParamPrivileges;
    1544:	fc 01       	movw	r30, r24
    1546:	81 81       	ldd	r24, Z+1	; 0x01
    1548:	08 95       	ret
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
    154a:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamPrivileges;
}
    154c:	08 95       	ret

0000154e <V2Params_GetParameterValue>:
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
    154e:	c7 df       	rcall	.-114    	; 0x14de <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	19 f0       	breq	.+6      	; 0x155a <V2Params_GetParameterValue+0xc>
	  return 0;

	return ParamInfo->ParamValue;
    1554:	fc 01       	movw	r30, r24
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	08 95       	ret
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
    155a:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamValue;
}
    155c:	08 95       	ret

0000155e <V2Params_SetParameterValue>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	c8 2f       	mov	r28, r24
    1564:	d6 2f       	mov	r29, r22
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
    1566:	bb df       	rcall	.-138    	; 0x14de <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	79 f0       	breq	.+30     	; 0x158a <V2Params_SetParameterValue+0x2c>
	  return;

	ParamInfo->ParamValue = Value;
    156c:	fc 01       	movw	r30, r24
    156e:	d2 83       	std	Z+2, r29	; 0x02

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
    1570:	ce 39       	cpi	r28, 0x9E	; 158
    1572:	29 f4       	brne	.+10     	; 0x157e <V2Params_SetParameterValue+0x20>
	  eeprom_update_byte(&EEPROM_Reset_Polarity, Value);
    1574:	6d 2f       	mov	r22, r29
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	21 d4       	rcall	.+2114   	; 0x1dbe <eeprom_update_byte>
    157c:	06 c0       	rjmp	.+12     	; 0x158a <V2Params_SetParameterValue+0x2c>

	/* The target SCK line period is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_SCK_DURATION)
    157e:	c8 39       	cpi	r28, 0x98	; 152
    1580:	21 f4       	brne	.+8      	; 0x158a <V2Params_SetParameterValue+0x2c>
	  eeprom_update_byte(&EEPROM_SCK_Duration, Value);
    1582:	6d 2f       	mov	r22, r29
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	1a d4       	rcall	.+2100   	; 0x1dbe <eeprom_update_byte>
}
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1590:	8f 92       	push	r8
    1592:	9f 92       	push	r9
    1594:	af 92       	push	r10
    1596:	bf 92       	push	r11
    1598:	cf 92       	push	r12
    159a:	df 92       	push	r13
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	8c 01       	movw	r16, r24
    15aa:	eb 01       	movw	r28, r22
    15ac:	5a 01       	movw	r10, r20
    15ae:	bc d1       	rcall	.+888    	; 0x1928 <Endpoint_WaitUntilReady>
    15b0:	81 11       	cpse	r24, r1
    15b2:	3e c0       	rjmp	.+124    	; 0x1630 <Endpoint_Write_Stream_LE+0xa0>
    15b4:	a1 14       	cp	r10, r1
    15b6:	b1 04       	cpc	r11, r1
    15b8:	39 f0       	breq	.+14     	; 0x15c8 <Endpoint_Write_Stream_LE+0x38>
    15ba:	f5 01       	movw	r30, r10
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	c8 1b       	sub	r28, r24
    15c2:	d9 0b       	sbc	r29, r25
    15c4:	08 0f       	add	r16, r24
    15c6:	19 1f       	adc	r17, r25
    15c8:	20 97       	sbiw	r28, 0x00	; 0
    15ca:	89 f1       	breq	.+98     	; 0x162e <Endpoint_Write_Stream_LE+0x9e>
    15cc:	e1 2c       	mov	r14, r1
    15ce:	f1 2c       	mov	r15, r1
    15d0:	0f 2e       	mov	r0, r31
    15d2:	f8 ee       	ldi	r31, 0xE8	; 232
    15d4:	8f 2e       	mov	r8, r31
    15d6:	91 2c       	mov	r9, r1
    15d8:	f0 2d       	mov	r31, r0
    15da:	0f 2e       	mov	r0, r31
    15dc:	f1 ef       	ldi	r31, 0xF1	; 241
    15de:	cf 2e       	mov	r12, r31
    15e0:	d1 2c       	mov	r13, r1
    15e2:	f0 2d       	mov	r31, r0
    15e4:	f4 01       	movw	r30, r8
    15e6:	80 81       	ld	r24, Z
    15e8:	85 fd       	sbrc	r24, 5
    15ea:	14 c0       	rjmp	.+40     	; 0x1614 <Endpoint_Write_Stream_LE+0x84>
    15ec:	80 81       	ld	r24, Z
    15ee:	8e 77       	andi	r24, 0x7E	; 126
    15f0:	80 83       	st	Z, r24
    15f2:	c4 d3       	rcall	.+1928   	; 0x1d7c <USB_USBTask>
    15f4:	a1 14       	cp	r10, r1
    15f6:	b1 04       	cpc	r11, r1
    15f8:	49 f0       	breq	.+18     	; 0x160c <Endpoint_Write_Stream_LE+0x7c>
    15fa:	f5 01       	movw	r30, r10
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	e8 0e       	add	r14, r24
    1602:	f9 1e       	adc	r15, r25
    1604:	f1 82       	std	Z+1, r15	; 0x01
    1606:	e0 82       	st	Z, r14
    1608:	85 e0       	ldi	r24, 0x05	; 5
    160a:	12 c0       	rjmp	.+36     	; 0x1630 <Endpoint_Write_Stream_LE+0xa0>
    160c:	8d d1       	rcall	.+794    	; 0x1928 <Endpoint_WaitUntilReady>
    160e:	88 23       	and	r24, r24
    1610:	51 f0       	breq	.+20     	; 0x1626 <Endpoint_Write_Stream_LE+0x96>
    1612:	0e c0       	rjmp	.+28     	; 0x1630 <Endpoint_Write_Stream_LE+0xa0>
    1614:	f8 01       	movw	r30, r16
    1616:	81 91       	ld	r24, Z+
    1618:	8f 01       	movw	r16, r30
    161a:	f6 01       	movw	r30, r12
    161c:	80 83       	st	Z, r24
    161e:	21 97       	sbiw	r28, 0x01	; 1
    1620:	ff ef       	ldi	r31, 0xFF	; 255
    1622:	ef 1a       	sub	r14, r31
    1624:	ff 0a       	sbc	r15, r31
    1626:	20 97       	sbiw	r28, 0x00	; 0
    1628:	e9 f6       	brne	.-70     	; 0x15e4 <Endpoint_Write_Stream_LE+0x54>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <Endpoint_Write_Stream_LE+0xa0>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	9f 90       	pop	r9
    1646:	8f 90       	pop	r8
    1648:	08 95       	ret

0000164a <Endpoint_Read_Stream_LE>:
    164a:	8f 92       	push	r8
    164c:	9f 92       	push	r9
    164e:	af 92       	push	r10
    1650:	bf 92       	push	r11
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	8c 01       	movw	r16, r24
    1664:	eb 01       	movw	r28, r22
    1666:	5a 01       	movw	r10, r20
    1668:	5f d1       	rcall	.+702    	; 0x1928 <Endpoint_WaitUntilReady>
    166a:	81 11       	cpse	r24, r1
    166c:	3e c0       	rjmp	.+124    	; 0x16ea <Endpoint_Read_Stream_LE+0xa0>
    166e:	a1 14       	cp	r10, r1
    1670:	b1 04       	cpc	r11, r1
    1672:	39 f0       	breq	.+14     	; 0x1682 <Endpoint_Read_Stream_LE+0x38>
    1674:	f5 01       	movw	r30, r10
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	c8 1b       	sub	r28, r24
    167c:	d9 0b       	sbc	r29, r25
    167e:	08 0f       	add	r16, r24
    1680:	19 1f       	adc	r17, r25
    1682:	20 97       	sbiw	r28, 0x00	; 0
    1684:	89 f1       	breq	.+98     	; 0x16e8 <Endpoint_Read_Stream_LE+0x9e>
    1686:	e1 2c       	mov	r14, r1
    1688:	f1 2c       	mov	r15, r1
    168a:	0f 2e       	mov	r0, r31
    168c:	f8 ee       	ldi	r31, 0xE8	; 232
    168e:	8f 2e       	mov	r8, r31
    1690:	91 2c       	mov	r9, r1
    1692:	f0 2d       	mov	r31, r0
    1694:	0f 2e       	mov	r0, r31
    1696:	f1 ef       	ldi	r31, 0xF1	; 241
    1698:	cf 2e       	mov	r12, r31
    169a:	d1 2c       	mov	r13, r1
    169c:	f0 2d       	mov	r31, r0
    169e:	f4 01       	movw	r30, r8
    16a0:	80 81       	ld	r24, Z
    16a2:	85 fd       	sbrc	r24, 5
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <Endpoint_Read_Stream_LE+0x84>
    16a6:	80 81       	ld	r24, Z
    16a8:	8b 77       	andi	r24, 0x7B	; 123
    16aa:	80 83       	st	Z, r24
    16ac:	67 d3       	rcall	.+1742   	; 0x1d7c <USB_USBTask>
    16ae:	a1 14       	cp	r10, r1
    16b0:	b1 04       	cpc	r11, r1
    16b2:	49 f0       	breq	.+18     	; 0x16c6 <Endpoint_Read_Stream_LE+0x7c>
    16b4:	f5 01       	movw	r30, r10
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	e8 0e       	add	r14, r24
    16bc:	f9 1e       	adc	r15, r25
    16be:	f1 82       	std	Z+1, r15	; 0x01
    16c0:	e0 82       	st	Z, r14
    16c2:	85 e0       	ldi	r24, 0x05	; 5
    16c4:	12 c0       	rjmp	.+36     	; 0x16ea <Endpoint_Read_Stream_LE+0xa0>
    16c6:	30 d1       	rcall	.+608    	; 0x1928 <Endpoint_WaitUntilReady>
    16c8:	88 23       	and	r24, r24
    16ca:	51 f0       	breq	.+20     	; 0x16e0 <Endpoint_Read_Stream_LE+0x96>
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <Endpoint_Read_Stream_LE+0xa0>
    16ce:	f6 01       	movw	r30, r12
    16d0:	80 81       	ld	r24, Z
    16d2:	f8 01       	movw	r30, r16
    16d4:	81 93       	st	Z+, r24
    16d6:	8f 01       	movw	r16, r30
    16d8:	21 97       	sbiw	r28, 0x01	; 1
    16da:	ff ef       	ldi	r31, 0xFF	; 255
    16dc:	ef 1a       	sub	r14, r31
    16de:	ff 0a       	sbc	r15, r31
    16e0:	20 97       	sbiw	r28, 0x00	; 0
    16e2:	e9 f6       	brne	.-70     	; 0x169e <Endpoint_Read_Stream_LE+0x54>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <Endpoint_Read_Stream_LE+0xa0>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	af 90       	pop	r10
    16fe:	9f 90       	pop	r9
    1700:	8f 90       	pop	r8
    1702:	08 95       	ret

00001704 <Endpoint_Read_Stream_BE>:
    1704:	8f 92       	push	r8
    1706:	9f 92       	push	r9
    1708:	af 92       	push	r10
    170a:	bf 92       	push	r11
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	8c 01       	movw	r16, r24
    171e:	eb 01       	movw	r28, r22
    1720:	5a 01       	movw	r10, r20
    1722:	02 d1       	rcall	.+516    	; 0x1928 <Endpoint_WaitUntilReady>
    1724:	81 11       	cpse	r24, r1
    1726:	43 c0       	rjmp	.+134    	; 0x17ae <Endpoint_Read_Stream_BE+0xaa>
    1728:	ce 01       	movw	r24, r28
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	08 0f       	add	r16, r24
    172e:	19 1f       	adc	r17, r25
    1730:	a1 14       	cp	r10, r1
    1732:	b1 04       	cpc	r11, r1
    1734:	39 f0       	breq	.+14     	; 0x1744 <Endpoint_Read_Stream_BE+0x40>
    1736:	f5 01       	movw	r30, r10
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	c8 1b       	sub	r28, r24
    173e:	d9 0b       	sbc	r29, r25
    1740:	08 1b       	sub	r16, r24
    1742:	19 0b       	sbc	r17, r25
    1744:	20 97       	sbiw	r28, 0x00	; 0
    1746:	91 f1       	breq	.+100    	; 0x17ac <Endpoint_Read_Stream_BE+0xa8>
    1748:	e1 2c       	mov	r14, r1
    174a:	f1 2c       	mov	r15, r1
    174c:	0f 2e       	mov	r0, r31
    174e:	f8 ee       	ldi	r31, 0xE8	; 232
    1750:	8f 2e       	mov	r8, r31
    1752:	91 2c       	mov	r9, r1
    1754:	f0 2d       	mov	r31, r0
    1756:	0f 2e       	mov	r0, r31
    1758:	f1 ef       	ldi	r31, 0xF1	; 241
    175a:	cf 2e       	mov	r12, r31
    175c:	d1 2c       	mov	r13, r1
    175e:	f0 2d       	mov	r31, r0
    1760:	f4 01       	movw	r30, r8
    1762:	80 81       	ld	r24, Z
    1764:	85 fd       	sbrc	r24, 5
    1766:	14 c0       	rjmp	.+40     	; 0x1790 <Endpoint_Read_Stream_BE+0x8c>
    1768:	80 81       	ld	r24, Z
    176a:	8b 77       	andi	r24, 0x7B	; 123
    176c:	80 83       	st	Z, r24
    176e:	06 d3       	rcall	.+1548   	; 0x1d7c <USB_USBTask>
    1770:	a1 14       	cp	r10, r1
    1772:	b1 04       	cpc	r11, r1
    1774:	49 f0       	breq	.+18     	; 0x1788 <Endpoint_Read_Stream_BE+0x84>
    1776:	f5 01       	movw	r30, r10
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	e8 0e       	add	r14, r24
    177e:	f9 1e       	adc	r15, r25
    1780:	f1 82       	std	Z+1, r15	; 0x01
    1782:	e0 82       	st	Z, r14
    1784:	85 e0       	ldi	r24, 0x05	; 5
    1786:	13 c0       	rjmp	.+38     	; 0x17ae <Endpoint_Read_Stream_BE+0xaa>
    1788:	cf d0       	rcall	.+414    	; 0x1928 <Endpoint_WaitUntilReady>
    178a:	88 23       	and	r24, r24
    178c:	59 f0       	breq	.+22     	; 0x17a4 <Endpoint_Read_Stream_BE+0xa0>
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <Endpoint_Read_Stream_BE+0xaa>
    1790:	f6 01       	movw	r30, r12
    1792:	80 81       	ld	r24, Z
    1794:	f8 01       	movw	r30, r16
    1796:	80 83       	st	Z, r24
    1798:	01 50       	subi	r16, 0x01	; 1
    179a:	11 09       	sbc	r17, r1
    179c:	21 97       	sbiw	r28, 0x01	; 1
    179e:	ff ef       	ldi	r31, 0xFF	; 255
    17a0:	ef 1a       	sub	r14, r31
    17a2:	ff 0a       	sbc	r15, r31
    17a4:	20 97       	sbiw	r28, 0x00	; 0
    17a6:	e1 f6       	brne	.-72     	; 0x1760 <Endpoint_Read_Stream_BE+0x5c>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <Endpoint_Read_Stream_BE+0xaa>
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	bf 90       	pop	r11
    17c0:	af 90       	pop	r10
    17c2:	9f 90       	pop	r9
    17c4:	8f 90       	pop	r8
    17c6:	08 95       	ret

000017c8 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    17d2:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <USB_ControlRequest+0x6>
    17d6:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <USB_ControlRequest+0x7>
    17da:	26 17       	cp	r18, r22
    17dc:	37 07       	cpc	r19, r23
    17de:	58 f0       	brcs	.+22     	; 0x17f6 <Endpoint_Write_Control_PStream_LE+0x2e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    17e0:	61 15       	cp	r22, r1
    17e2:	71 05       	cpc	r23, r1
    17e4:	39 f4       	brne	.+14     	; 0x17f4 <Endpoint_Write_Control_PStream_LE+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17e6:	e8 ee       	ldi	r30, 0xE8	; 232
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	20 81       	ld	r18, Z
    17ec:	2e 77       	andi	r18, 0x7E	; 126
    17ee:	20 83       	st	Z, r18
    17f0:	9b 01       	movw	r18, r22
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <Endpoint_Write_Control_PStream_LE+0x2e>
    17f4:	9b 01       	movw	r18, r22
    17f6:	e8 2f       	mov	r30, r24
    17f8:	f9 2f       	mov	r31, r25
    17fa:	60 e0       	ldi	r22, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17fc:	a8 ee       	ldi	r26, 0xE8	; 232
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1800:	42 ef       	ldi	r20, 0xF2	; 242
    1802:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1804:	0f 2e       	mov	r0, r31
    1806:	f1 ef       	ldi	r31, 0xF1	; 241
    1808:	ef 2e       	mov	r14, r31
    180a:	f1 2c       	mov	r15, r1
    180c:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    180e:	71 e0       	ldi	r23, 0x01	; 1
    1810:	10 e0       	ldi	r17, 0x00	; 0
    1812:	2d c0       	rjmp	.+90     	; 0x186e <Endpoint_Write_Control_PStream_LE+0xa6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1814:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1816:	88 23       	and	r24, r24
    1818:	09 f4       	brne	.+2      	; 0x181c <Endpoint_Write_Control_PStream_LE+0x54>
    181a:	3f c0       	rjmp	.+126    	; 0x189a <Endpoint_Write_Control_PStream_LE+0xd2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    181c:	85 30       	cpi	r24, 0x05	; 5
    181e:	09 f4       	brne	.+2      	; 0x1822 <Endpoint_Write_Control_PStream_LE+0x5a>
    1820:	3e c0       	rjmp	.+124    	; 0x189e <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1822:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1824:	83 fd       	sbrc	r24, 3
    1826:	3d c0       	rjmp	.+122    	; 0x18a2 <Endpoint_Write_Control_PStream_LE+0xda>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1828:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    182a:	82 fd       	sbrc	r24, 2
    182c:	2f c0       	rjmp	.+94     	; 0x188c <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    182e:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    1830:	80 ff       	sbrs	r24, 0
    1832:	1d c0       	rjmp	.+58     	; 0x186e <Endpoint_Write_Control_PStream_LE+0xa6>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1834:	ea 01       	movw	r28, r20
    1836:	88 81       	ld	r24, Y
    1838:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    183a:	21 15       	cp	r18, r1
    183c:	31 05       	cpc	r19, r1
    183e:	81 f0       	breq	.+32     	; 0x1860 <Endpoint_Write_Control_PStream_LE+0x98>
    1840:	80 31       	cpi	r24, 0x10	; 16
    1842:	91 05       	cpc	r25, r1
    1844:	68 f4       	brcc	.+26     	; 0x1860 <Endpoint_Write_Control_PStream_LE+0x98>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1846:	64 91       	lpm	r22, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1848:	e7 01       	movw	r28, r14
    184a:	68 83       	st	Y, r22
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    184c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    184e:	21 50       	subi	r18, 0x01	; 1
    1850:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    1852:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1854:	21 15       	cp	r18, r1
    1856:	31 05       	cpc	r19, r1
    1858:	19 f0       	breq	.+6      	; 0x1860 <Endpoint_Write_Control_PStream_LE+0x98>
    185a:	80 31       	cpi	r24, 0x10	; 16
    185c:	91 05       	cpc	r25, r1
    185e:	99 f7       	brne	.-26     	; 0x1846 <Endpoint_Write_Control_PStream_LE+0x7e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1860:	67 2f       	mov	r22, r23
    1862:	40 97       	sbiw	r24, 0x10	; 16
    1864:	09 f0       	breq	.+2      	; 0x1868 <Endpoint_Write_Control_PStream_LE+0xa0>
    1866:	61 2f       	mov	r22, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1868:	8c 91       	ld	r24, X
    186a:	8e 77       	andi	r24, 0x7E	; 126
    186c:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    186e:	21 15       	cp	r18, r1
    1870:	31 05       	cpc	r19, r1
    1872:	81 f6       	brne	.-96     	; 0x1814 <Endpoint_Write_Control_PStream_LE+0x4c>
    1874:	61 11       	cpse	r22, r1
    1876:	ce cf       	rjmp	.-100    	; 0x1814 <Endpoint_Write_Control_PStream_LE+0x4c>
    1878:	09 c0       	rjmp	.+18     	; 0x188c <Endpoint_Write_Control_PStream_LE+0xc4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    187a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    187c:	88 23       	and	r24, r24
    187e:	99 f0       	breq	.+38     	; 0x18a6 <Endpoint_Write_Control_PStream_LE+0xde>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1880:	85 30       	cpi	r24, 0x05	; 5
    1882:	99 f0       	breq	.+38     	; 0x18aa <Endpoint_Write_Control_PStream_LE+0xe2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1884:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1886:	83 ff       	sbrs	r24, 3
    1888:	03 c0       	rjmp	.+6      	; 0x1890 <Endpoint_Write_Control_PStream_LE+0xc8>
    188a:	11 c0       	rjmp	.+34     	; 0x18ae <Endpoint_Write_Control_PStream_LE+0xe6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    188c:	e8 ee       	ldi	r30, 0xE8	; 232
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1892:	82 ff       	sbrs	r24, 2
    1894:	f2 cf       	rjmp	.-28     	; 0x187a <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	0b c0       	rjmp	.+22     	; 0x18b0 <Endpoint_Write_Control_PStream_LE+0xe8>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	09 c0       	rjmp	.+18     	; 0x18b0 <Endpoint_Write_Control_PStream_LE+0xe8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	07 c0       	rjmp	.+14     	; 0x18b0 <Endpoint_Write_Control_PStream_LE+0xe8>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <Endpoint_Write_Control_PStream_LE+0xe8>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <Endpoint_Write_Control_PStream_LE+0xe8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <Endpoint_Write_Control_PStream_LE+0xe8>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	08 95       	ret

000018bc <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    18bc:	8f 70       	andi	r24, 0x0F	; 15
    18be:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    18c2:	eb ee       	ldi	r30, 0xEB	; 235
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	81 60       	ori	r24, 0x01	; 1
    18ca:	80 83       	st	Z, r24
    18cc:	ed ee       	ldi	r30, 0xED	; 237
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	10 82       	st	Z, r1
    18d2:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    18d6:	40 83       	st	Z, r20
    18d8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
    18dc:	88 1f       	adc	r24, r24
    18de:	88 27       	eor	r24, r24
    18e0:	88 1f       	adc	r24, r24
    18e2:	08 95       	ret

000018e4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    18e4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_ControlRequest>
    18e8:	88 23       	and	r24, r24
    18ea:	3c f0       	brlt	.+14     	; 0x18fa <Endpoint_ClearStatusStage+0x16>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18ec:	e8 ee       	ldi	r30, 0xE8	; 232
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	12 c0       	rjmp	.+36     	; 0x1916 <Endpoint_ClearStatusStage+0x32>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    18f2:	8e b3       	in	r24, 0x1e	; 30
    18f4:	81 11       	cpse	r24, r1
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <Endpoint_ClearStatusStage+0x1a>
    18f8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18fa:	e8 ee       	ldi	r30, 0xE8	; 232
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1900:	82 ff       	sbrs	r24, 2
    1902:	f7 cf       	rjmp	.-18     	; 0x18f2 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1904:	e8 ee       	ldi	r30, 0xE8	; 232
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	8b 77       	andi	r24, 0x7B	; 123
    190c:	80 83       	st	Z, r24
    190e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1910:	8e b3       	in	r24, 0x1e	; 30
    1912:	88 23       	and	r24, r24
    1914:	41 f0       	breq	.+16     	; 0x1926 <Endpoint_ClearStatusStage+0x42>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1916:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1918:	80 ff       	sbrs	r24, 0
    191a:	fa cf       	rjmp	.-12     	; 0x1910 <Endpoint_ClearStatusStage+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    191c:	e8 ee       	ldi	r30, 0xE8	; 232
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8e 77       	andi	r24, 0x7E	; 126
    1924:	80 83       	st	Z, r24
    1926:	08 95       	ret

00001928 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1930:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
    1934:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
    1938:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    193a:	ac ee       	ldi	r26, 0xEC	; 236
    193c:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    193e:	e8 ee       	ldi	r30, 0xE8	; 232
    1940:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1942:	0b ee       	ldi	r16, 0xEB	; 235
    1944:	10 e0       	ldi	r17, 0x00	; 0
    1946:	44 ee       	ldi	r20, 0xE4	; 228
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	01 c0       	rjmp	.+2      	; 0x194e <Endpoint_WaitUntilReady+0x26>
    194c:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    194e:	9c 91       	ld	r25, X
    1950:	89 2f       	mov	r24, r25
    1952:	81 70       	andi	r24, 0x01	; 1
    1954:	90 fd       	sbrc	r25, 0
    1956:	1c c0       	rjmp	.+56     	; 0x1990 <Endpoint_WaitUntilReady+0x68>
    1958:	1f c0       	rjmp	.+62     	; 0x1998 <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    195a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    195c:	88 23       	and	r24, r24
    195e:	81 f0       	breq	.+32     	; 0x1980 <Endpoint_WaitUntilReady+0x58>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1960:	85 30       	cpi	r24, 0x05	; 5
    1962:	81 f0       	breq	.+32     	; 0x1984 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1964:	e8 01       	movw	r28, r16
    1966:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1968:	85 fd       	sbrc	r24, 5
    196a:	0e c0       	rjmp	.+28     	; 0x1988 <Endpoint_WaitUntilReady+0x60>
    196c:	ea 01       	movw	r28, r20
    196e:	88 81       	ld	r24, Y
    1970:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1972:	28 17       	cp	r18, r24
    1974:	39 07       	cpc	r19, r25
    1976:	59 f3       	breq	.-42     	; 0x194e <Endpoint_WaitUntilReady+0x26>
    1978:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    197a:	41 f7       	brne	.-48     	; 0x194c <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    197c:	84 e0       	ldi	r24, 0x04	; 4
    197e:	0f c0       	rjmp	.+30     	; 0x199e <Endpoint_WaitUntilReady+0x76>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	0d c0       	rjmp	.+26     	; 0x199e <Endpoint_WaitUntilReady+0x76>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	0b c0       	rjmp	.+22     	; 0x199e <Endpoint_WaitUntilReady+0x76>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	09 c0       	rjmp	.+18     	; 0x199e <Endpoint_WaitUntilReady+0x76>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	07 c0       	rjmp	.+14     	; 0x199e <Endpoint_WaitUntilReady+0x76>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1990:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1992:	80 ff       	sbrs	r24, 0
    1994:	e2 cf       	rjmp	.-60     	; 0x195a <Endpoint_WaitUntilReady+0x32>
    1996:	fa cf       	rjmp	.-12     	; 0x198c <Endpoint_WaitUntilReady+0x64>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1998:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    199a:	92 ff       	sbrs	r25, 2
    199c:	de cf       	rjmp	.-68     	; 0x195a <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	08 95       	ret

000019a8 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    19a8:	36 d0       	rcall	.+108    	; 0x1a16 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    19aa:	38 d0       	rcall	.+112    	; 0x1a1c <USB_INT_ClearAllInterrupts>
    19ac:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 77       	andi	r24, 0x7F	; 127
    19b4:	80 83       	st	Z, r24
    19b6:	80 81       	ld	r24, Z
				USBCON |=  (1 << USBE);
    19b8:	80 68       	ori	r24, 0x80	; 128
    19ba:	80 83       	st	Z, r24
    19bc:	80 81       	ld	r24, Z
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    19be:	8f 7d       	andi	r24, 0xDF	; 223
    19c0:	80 83       	st	Z, r24
    19c2:	19 bc       	out	0x29, r1	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    19c4:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    19c6:	89 bd       	out	0x29, r24	; 41
    19c8:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    19ca:	00 fe       	sbrs	r0, 0
    19cc:	fd cf       	rjmp	.-6      	; 0x19c8 <USB_ResetInterface+0x20>
    19ce:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    19d0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    19d4:	42 e1       	ldi	r20, 0x12	; 18
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	70 df       	rcall	.-288    	; 0x18bc <Endpoint_ConfigureEndpoint_Prv>
    19dc:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8e 7f       	andi	r24, 0xFE	; 254
    19e4:	80 83       	st	Z, r24
    19e6:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	81 60       	ori	r24, 0x01	; 1
    19ee:	80 83       	st	Z, r24
    19f0:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    19f2:	88 60       	ori	r24, 0x08	; 8
    19f4:	80 83       	st	Z, r24
    19f6:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	8e 7f       	andi	r24, 0xFE	; 254
    19fe:	80 83       	st	Z, r24
    1a00:	08 95       	ret

00001a02 <USB_Init>:
    1a02:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	8e 7f       	andi	r24, 0xFE	; 254
    1a0a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <USB_IsInitialized>

	USB_ResetInterface();
    1a12:	ca cf       	rjmp	.-108    	; 0x19a8 <USB_ResetInterface>
    1a14:	08 95       	ret

00001a16 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1a16:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1a1a:	08 95       	ret

00001a1c <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1a1c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    1a20:	08 95       	ret

00001a22 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1a22:	1f 92       	push	r1
    1a24:	0f 92       	push	r0
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	0f 92       	push	r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	2f 93       	push	r18
    1a2e:	3f 93       	push	r19
    1a30:	4f 93       	push	r20
    1a32:	5f 93       	push	r21
    1a34:	6f 93       	push	r22
    1a36:	7f 93       	push	r23
    1a38:	8f 93       	push	r24
    1a3a:	9f 93       	push	r25
    1a3c:	af 93       	push	r26
    1a3e:	bf 93       	push	r27
    1a40:	ef 93       	push	r30
    1a42:	ff 93       	push	r31
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1a44:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1a48:	80 ff       	sbrs	r24, 0
    1a4a:	15 c0       	rjmp	.+42     	; 0x1a76 <__vector_11+0x54>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1a4c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1a50:	80 ff       	sbrs	r24, 0
    1a52:	11 c0       	rjmp	.+34     	; 0x1a76 <__vector_11+0x54>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a54:	e2 ee       	ldi	r30, 0xE2	; 226
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	8e 7f       	andi	r24, 0xFE	; 254
    1a5c:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 61       	ori	r24, 0x10	; 16
    1a62:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1a64:	e8 ed       	ldi	r30, 0xD8	; 216
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 62       	ori	r24, 0x20	; 32
    1a6c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a6e:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1a70:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
    1a72:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1a76:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1a7a:	84 ff       	sbrs	r24, 4
    1a7c:	2d c0       	rjmp	.+90     	; 0x1ad8 <__vector_11+0xb6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1a7e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1a82:	84 ff       	sbrs	r24, 4
    1a84:	29 c0       	rjmp	.+82     	; 0x1ad8 <__vector_11+0xb6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a86:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1a8c:	09 b4       	in	r0, 0x29	; 41
    1a8e:	00 fe       	sbrs	r0, 0
    1a90:	fd cf       	rjmp	.-6      	; 0x1a8c <__vector_11+0x6a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a92:	e8 ed       	ldi	r30, 0xD8	; 216
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8f 7d       	andi	r24, 0xDF	; 223
    1a9a:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1a9c:	e1 ee       	ldi	r30, 0xE1	; 225
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8f 7e       	andi	r24, 0xEF	; 239
    1aa4:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1aa6:	e2 ee       	ldi	r30, 0xE2	; 226
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	8f 7e       	andi	r24, 0xEF	; 239
    1aae:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1ab0:	80 81       	ld	r24, Z
    1ab2:	81 60       	ori	r24, 0x01	; 1
    1ab4:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1ab6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_Device_ConfigurationNumber>
    1aba:	88 23       	and	r24, r24
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <__vector_11+0xa2>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1abe:	84 e0       	ldi	r24, 0x04	; 4
    1ac0:	8e bb       	out	0x1e, r24	; 30
    1ac2:	08 c0       	rjmp	.+16     	; 0x1ad4 <__vector_11+0xb2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1ac4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1ac8:	88 23       	and	r24, r24
    1aca:	14 f0       	brlt	.+4      	; 0x1ad0 <__vector_11+0xae>
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <__vector_11+0xb0>
    1ad0:	83 e0       	ldi	r24, 0x03	; 3
    1ad2:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1ad4:	0e 94 56 01 	call	0x2ac	; 0x2ac <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1ad8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1adc:	83 ff       	sbrs	r24, 3
    1ade:	1d c0       	rjmp	.+58     	; 0x1b1a <__vector_11+0xf8>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1ae0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1ae4:	83 ff       	sbrs	r24, 3
    1ae6:	19 c0       	rjmp	.+50     	; 0x1b1a <__vector_11+0xf8>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1ae8:	e1 ee       	ldi	r30, 0xE1	; 225
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	87 7f       	andi	r24, 0xF7	; 247
    1af0:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    1af6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1afa:	80 81       	ld	r24, Z
    1afc:	8e 7f       	andi	r24, 0xFE	; 254
    1afe:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1b00:	e2 ee       	ldi	r30, 0xE2	; 226
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8e 7f       	andi	r24, 0xFE	; 254
    1b08:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1b0a:	80 81       	ld	r24, Z
    1b0c:	80 61       	ori	r24, 0x10	; 16
    1b0e:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b10:	42 e1       	ldi	r20, 0x12	; 18
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	d2 de       	rcall	.-604    	; 0x18bc <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1b18:	30 d1       	rcall	.+608    	; 0x1d7a <USB_Event_Stub>
    1b1a:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1b1c:	ef 91       	pop	r30
    1b1e:	bf 91       	pop	r27
    1b20:	af 91       	pop	r26
    1b22:	9f 91       	pop	r25
    1b24:	8f 91       	pop	r24
    1b26:	7f 91       	pop	r23
    1b28:	6f 91       	pop	r22
    1b2a:	5f 91       	pop	r21
    1b2c:	4f 91       	pop	r20
    1b2e:	3f 91       	pop	r19
    1b30:	2f 91       	pop	r18
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	0f 90       	pop	r0
    1b38:	1f 90       	pop	r1
    1b3a:	18 95       	reti

00001b3c <USB_Device_ProcessControlRequest>:
    1b3c:	0f 93       	push	r16
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <USB_Device_ProcessControlRequest+0xa>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	e3 e3       	ldi	r30, 0x33	; 51
    1b4c:	f1 e0       	ldi	r31, 0x01	; 1
    1b4e:	2b e3       	ldi	r18, 0x3B	; 59
    1b50:	31 e0       	ldi	r19, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1b52:	a1 ef       	ldi	r26, 0xF1	; 241
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1b58:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1b5a:	2e 17       	cp	r18, r30
    1b5c:	3f 07       	cpc	r19, r31
    1b5e:	d9 f7       	brne	.-10     	; 0x1b56 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1b60:	0c d1       	rcall	.+536    	; 0x1d7a <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
    1b66:	83 ff       	sbrs	r24, 3
    1b68:	ec c0       	rjmp	.+472    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1b6a:	e3 e3       	ldi	r30, 0x33	; 51
    1b6c:	f1 e0       	ldi	r31, 0x01	; 1
    1b6e:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    1b70:	81 81       	ldd	r24, Z+1	; 0x01
    1b72:	85 30       	cpi	r24, 0x05	; 5
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <USB_Device_ProcessControlRequest+0x3c>
    1b76:	6e c0       	rjmp	.+220    	; 0x1c54 <USB_Device_ProcessControlRequest+0x118>
    1b78:	30 f4       	brcc	.+12     	; 0x1b86 <USB_Device_ProcessControlRequest+0x4a>
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	91 f1       	breq	.+100    	; 0x1be2 <USB_Device_ProcessControlRequest+0xa6>
    1b7e:	68 f0       	brcs	.+26     	; 0x1b9a <USB_Device_ProcessControlRequest+0x5e>
    1b80:	83 30       	cpi	r24, 0x03	; 3
    1b82:	79 f1       	breq	.+94     	; 0x1be2 <USB_Device_ProcessControlRequest+0xa6>
    1b84:	de c0       	rjmp	.+444    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
    1b86:	88 30       	cpi	r24, 0x08	; 8
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <USB_Device_ProcessControlRequest+0x50>
    1b8a:	a7 c0       	rjmp	.+334    	; 0x1cda <USB_Device_ProcessControlRequest+0x19e>
    1b8c:	89 30       	cpi	r24, 0x09	; 9
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <USB_Device_ProcessControlRequest+0x56>
    1b90:	b4 c0       	rjmp	.+360    	; 0x1cfa <USB_Device_ProcessControlRequest+0x1be>
    1b92:	86 30       	cpi	r24, 0x06	; 6
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <USB_Device_ProcessControlRequest+0x5c>
    1b96:	d5 c0       	rjmp	.+426    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
    1b98:	7f c0       	rjmp	.+254    	; 0x1c98 <USB_Device_ProcessControlRequest+0x15c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b9a:	90 38       	cpi	r25, 0x80	; 128
    1b9c:	99 f0       	breq	.+38     	; 0x1bc4 <USB_Device_ProcessControlRequest+0x88>
    1b9e:	92 38       	cpi	r25, 0x82	; 130
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <USB_Device_ProcessControlRequest+0x68>
    1ba2:	cf c0       	rjmp	.+414    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1ba4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_ControlRequest+0x4>
    1ba8:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1baa:	85 30       	cpi	r24, 0x05	; 5
    1bac:	08 f0       	brcs	.+2      	; 0x1bb0 <USB_Device_ProcessControlRequest+0x74>
    1bae:	c9 c0       	rjmp	.+402    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bb0:	e9 ee       	ldi	r30, 0xE9	; 233
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bb6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1bba:	85 fb       	bst	r24, 5
    1bbc:	88 27       	eor	r24, r24
    1bbe:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bc0:	10 82       	st	Z, r1
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <USB_Device_ProcessControlRequest+0x8a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bc6:	e8 ee       	ldi	r30, 0xE8	; 232
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	90 81       	ld	r25, Z
    1bcc:	97 7f       	andi	r25, 0xF7	; 247
    1bce:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1bd0:	a1 ef       	ldi	r26, 0xF1	; 241
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    1bd6:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bd8:	80 81       	ld	r24, Z
    1bda:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1bdc:	80 83       	st	Z, r24
    1bde:	82 de       	rcall	.-764    	; 0x18e4 <Endpoint_ClearStatusStage>
    1be0:	b0 c0       	rjmp	.+352    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1be2:	92 30       	cpi	r25, 0x02	; 2
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <USB_Device_ProcessControlRequest+0xac>
    1be6:	bc c0       	rjmp	.+376    	; 0x1d60 <USB_Device_ProcessControlRequest+0x224>
    1be8:	ac c0       	rjmp	.+344    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1bea:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_ControlRequest+0x4>
    1bee:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1bf0:	9f ef       	ldi	r25, 0xFF	; 255
    1bf2:	98 0f       	add	r25, r24
    1bf4:	94 30       	cpi	r25, 0x04	; 4
    1bf6:	08 f0       	brcs	.+2      	; 0x1bfa <USB_Device_ProcessControlRequest+0xbe>
    1bf8:	a4 c0       	rjmp	.+328    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bfa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1bfe:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1c02:	90 ff       	sbrs	r25, 0
    1c04:	1e c0       	rjmp	.+60     	; 0x1c42 <USB_Device_ProcessControlRequest+0x106>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1c06:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <USB_ControlRequest+0x1>
    1c0a:	93 30       	cpi	r25, 0x03	; 3
    1c0c:	31 f4       	brne	.+12     	; 0x1c1a <USB_Device_ProcessControlRequest+0xde>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c0e:	eb ee       	ldi	r30, 0xEB	; 235
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	80 62       	ori	r24, 0x20	; 32
    1c16:	80 83       	st	Z, r24
    1c18:	14 c0       	rjmp	.+40     	; 0x1c42 <USB_Device_ProcessControlRequest+0x106>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c1a:	eb ee       	ldi	r30, 0xEB	; 235
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	90 81       	ld	r25, Z
    1c20:	90 61       	ori	r25, 0x10	; 16
    1c22:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1c24:	21 e0       	ldi	r18, 0x01	; 1
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	a9 01       	movw	r20, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <USB_Device_ProcessControlRequest+0xf4>
    1c2c:	44 0f       	add	r20, r20
    1c2e:	55 1f       	adc	r21, r21
    1c30:	8a 95       	dec	r24
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <USB_Device_ProcessControlRequest+0xf0>
    1c34:	aa ee       	ldi	r26, 0xEA	; 234
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	4c 93       	st	X, r20
				UERST = 0;
    1c3a:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c3c:	80 81       	ld	r24, Z
    1c3e:	88 60       	ori	r24, 0x08	; 8
    1c40:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c42:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c46:	e8 ee       	ldi	r30, 0xE8	; 232
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1c4e:	80 83       	st	Z, r24
    1c50:	49 de       	rcall	.-878    	; 0x18e4 <Endpoint_ClearStatusStage>
    1c52:	77 c0       	rjmp	.+238    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c54:	91 11       	cpse	r25, r1
    1c56:	75 c0       	rjmp	.+234    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1c58:	10 91 35 01 	lds	r17, 0x0135	; 0x800135 <USB_ControlRequest+0x2>
    1c5c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1c5e:	e3 ee       	ldi	r30, 0xE3	; 227
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	80 78       	andi	r24, 0x80	; 128
    1c66:	81 2b       	or	r24, r17
    1c68:	80 83       	st	Z, r24
    1c6a:	e8 ee       	ldi	r30, 0xE8	; 232
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1c72:	80 83       	st	Z, r24
    1c74:	37 de       	rcall	.-914    	; 0x18e4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c76:	e8 ee       	ldi	r30, 0xE8	; 232
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    1c7c:	80 ff       	sbrs	r24, 0
    1c7e:	fd cf       	rjmp	.-6      	; 0x1c7a <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1c80:	e3 ee       	ldi	r30, 0xE3	; 227
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	80 68       	ori	r24, 0x80	; 128
    1c88:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1c8a:	11 11       	cpse	r17, r1
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <USB_Device_ProcessControlRequest+0x156>
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <USB_Device_ProcessControlRequest+0x158>
    1c92:	83 e0       	ldi	r24, 0x03	; 3
    1c94:	8e bb       	out	0x1e, r24	; 30
    1c96:	55 c0       	rjmp	.+170    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1c98:	90 58       	subi	r25, 0x80	; 128
    1c9a:	92 30       	cpi	r25, 0x02	; 2
    1c9c:	08 f0       	brcs	.+2      	; 0x1ca0 <USB_Device_ProcessControlRequest+0x164>
    1c9e:	51 c0       	rjmp	.+162    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1ca0:	e3 e3       	ldi	r30, 0x33	; 51
    1ca2:	f1 e0       	ldi	r31, 0x01	; 1
    1ca4:	64 81       	ldd	r22, Z+4	; 0x04
    1ca6:	75 81       	ldd	r23, Z+5	; 0x05
    1ca8:	ae 01       	movw	r20, r28
    1caa:	4f 5f       	subi	r20, 0xFF	; 255
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	0e 94 90 01 	call	0x320	; 0x320 <CALLBACK_USB_GetDescriptor>
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	89 2b       	or	r24, r25
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <USB_Device_ProcessControlRequest+0x182>
    1cbc:	42 c0       	rjmp	.+132    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cbe:	08 ee       	ldi	r16, 0xE8	; 232
    1cc0:	10 e0       	ldi	r17, 0x00	; 0
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	90 81       	ld	r25, Z
    1cc6:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1cc8:	90 83       	st	Z, r25
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	7c dd       	rcall	.-1288   	; 0x17c8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8b 77       	andi	r24, 0x7B	; 123
    1cd6:	80 83       	st	Z, r24
    1cd8:	34 c0       	rjmp	.+104    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1cda:	90 38       	cpi	r25, 0x80	; 128
    1cdc:	91 f5       	brne	.+100    	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cde:	e8 ee       	ldi	r30, 0xE8	; 232
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	87 7f       	andi	r24, 0xF7	; 247
    1ce6:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1ce8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1cec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1cf4:	80 83       	st	Z, r24
    1cf6:	f6 dd       	rcall	.-1044   	; 0x18e4 <Endpoint_ClearStatusStage>
    1cf8:	24 c0       	rjmp	.+72     	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1cfa:	91 11       	cpse	r25, r1
    1cfc:	22 c0       	rjmp	.+68     	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1cfe:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <USB_ControlRequest+0x2>
    1d02:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <USB_ControlRequest+0x3>
    1d06:	99 27       	eor	r25, r25
    1d08:	02 97       	sbiw	r24, 0x02	; 2
    1d0a:	dc f4       	brge	.+54     	; 0x1d42 <USB_Device_ProcessControlRequest+0x206>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d0c:	e8 ee       	ldi	r30, 0xE8	; 232
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1d14:	80 83       	st	Z, r24
    1d16:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <USB_ControlRequest+0x2>
    1d1a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1d1e:	e2 dd       	rcall	.-1084   	; 0x18e4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1d20:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_Device_ConfigurationNumber>
    1d24:	88 23       	and	r24, r24
    1d26:	19 f0       	breq	.+6      	; 0x1d2e <USB_Device_ProcessControlRequest+0x1f2>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1d28:	84 e0       	ldi	r24, 0x04	; 4
    1d2a:	8e bb       	out	0x1e, r24	; 30
    1d2c:	08 c0       	rjmp	.+16     	; 0x1d3e <USB_Device_ProcessControlRequest+0x202>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d2e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1d32:	88 23       	and	r24, r24
    1d34:	14 f0       	brlt	.+4      	; 0x1d3a <USB_Device_ProcessControlRequest+0x1fe>
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <USB_Device_ProcessControlRequest+0x200>
    1d3a:	84 e0       	ldi	r24, 0x04	; 4
    1d3c:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    1d3e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1d46:	83 ff       	sbrs	r24, 3
    1d48:	11 c0       	rjmp	.+34     	; 0x1d6c <USB_Device_ProcessControlRequest+0x230>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d4a:	e8 ee       	ldi	r30, 0xE8	; 232
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	87 7f       	andi	r24, 0xF7	; 247
    1d52:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d54:	eb ee       	ldi	r30, 0xEB	; 235
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 62       	ori	r24, 0x20	; 32
    1d5c:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1d5e:	06 c0       	rjmp	.+12     	; 0x1d6c <USB_Device_ProcessControlRequest+0x230>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1d60:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <USB_ControlRequest+0x2>
    1d64:	88 23       	and	r24, r24
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <USB_Device_ProcessControlRequest+0x22e>
    1d68:	40 cf       	rjmp	.-384    	; 0x1bea <USB_Device_ProcessControlRequest+0xae>
    1d6a:	6b cf       	rjmp	.-298    	; 0x1c42 <USB_Device_ProcessControlRequest+0x106>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	08 95       	ret

00001d7a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1d7a:	08 95       	ret

00001d7c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1d7c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d7e:	8e b3       	in	r24, 0x1e	; 30
    1d80:	88 23       	and	r24, r24
    1d82:	99 f0       	breq	.+38     	; 0x1daa <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d84:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    1d88:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d8a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    1d8e:	98 2f       	mov	r25, r24
    1d90:	91 70       	andi	r25, 0x01	; 1
    1d92:	80 fd       	sbrc	r24, 0
    1d94:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d96:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d98:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1da0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1da2:	cc de       	rcall	.-616    	; 0x1b3c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1da4:	cf 70       	andi	r28, 0x0F	; 15
    1da6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1daa:	cf 91       	pop	r28
    1dac:	08 95       	ret

00001dae <eeprom_read_byte>:
    1dae:	f9 99       	sbic	0x1f, 1	; 31
    1db0:	fe cf       	rjmp	.-4      	; 0x1dae <eeprom_read_byte>
    1db2:	92 bd       	out	0x22, r25	; 34
    1db4:	81 bd       	out	0x21, r24	; 33
    1db6:	f8 9a       	sbi	0x1f, 0	; 31
    1db8:	99 27       	eor	r25, r25
    1dba:	80 b5       	in	r24, 0x20	; 32
    1dbc:	08 95       	ret

00001dbe <eeprom_update_byte>:
    1dbe:	26 2f       	mov	r18, r22

00001dc0 <eeprom_update_r18>:
    1dc0:	f9 99       	sbic	0x1f, 1	; 31
    1dc2:	fe cf       	rjmp	.-4      	; 0x1dc0 <eeprom_update_r18>
    1dc4:	92 bd       	out	0x22, r25	; 34
    1dc6:	81 bd       	out	0x21, r24	; 33
    1dc8:	f8 9a       	sbi	0x1f, 0	; 31
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	00 b4       	in	r0, 0x20	; 32
    1dce:	02 16       	cp	r0, r18
    1dd0:	39 f0       	breq	.+14     	; 0x1de0 <eeprom_update_r18+0x20>
    1dd2:	1f ba       	out	0x1f, r1	; 31
    1dd4:	20 bd       	out	0x20, r18	; 32
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	fa 9a       	sbi	0x1f, 2	; 31
    1ddc:	f9 9a       	sbi	0x1f, 1	; 31
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	08 95       	ret

00001de2 <_exit>:
    1de2:	f8 94       	cli

00001de4 <__stop_program>:
    1de4:	ff cf       	rjmp	.-2      	; 0x1de4 <__stop_program>
