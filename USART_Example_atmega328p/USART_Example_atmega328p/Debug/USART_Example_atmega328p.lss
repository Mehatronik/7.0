
USART_Example_atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  000001fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000828  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c3  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f6  00000000  00000000  000011a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000416  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000186  00000000  00000000  00001966  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_18>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  88:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART1_Init>:
	tmptail = (USART_RxTail + 1) & USART_RX_BUFFER_MASK;
	/* Store new index */
	USART_RxTail = tmptail;                
	/* Return data */
	return USART_RxBuf[tmptail];          
}
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  9e:	86 e0       	ldi	r24, 0x06	; 6
  a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  a4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <USART_RxTail>
  a8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <USART_RxHead>
  ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  b0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <USART_TxHead>
  b4:	08 95       	ret

000000b6 <__vector_18>:
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
  c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  cc:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <USART_RxHead>
  d0:	ef 5f       	subi	r30, 0xFF	; 255
  d2:	e7 70       	andi	r30, 0x07	; 7
  d4:	e0 93 0b 01 	sts	0x010B, r30	; 0x80010b <USART_RxHead>
  d8:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <USART_RxTail>
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	e4 5f       	subi	r30, 0xF4	; 244
  e0:	fe 4f       	sbci	r31, 0xFE	; 254
  e2:	80 83       	st	Z, r24
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_19>:
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <USART_TxHead>
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 110:	98 17       	cp	r25, r24
 112:	69 f0       	breq	.+26     	; 0x12e <__vector_19+0x38>
 114:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 118:	ef 5f       	subi	r30, 0xFF	; 255
 11a:	e7 70       	andi	r30, 0x07	; 7
 11c:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <_edata>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 5f       	subi	r30, 0xFE	; 254
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	80 81       	ld	r24, Z
 128:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 12c:	05 c0       	rjmp	.+10     	; 0x138 <__vector_19+0x42>
 12e:	e1 ec       	ldi	r30, 0xC1	; 193
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8f 7d       	andi	r24, 0xDF	; 223
 136:	80 83       	st	Z, r24
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <USART1_Transmit>:
void USART1_Transmit(unsigned char data)
{
	unsigned char tmphead;
	
	/* Calculate buffer index */
	tmphead = (USART_TxHead + 1) & USART_TX_BUFFER_MASK;
 14a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <USART_TxHead>
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (tmphead == USART_TxTail);
 152:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 156:	29 17       	cp	r18, r25
 158:	e1 f3       	breq	.-8      	; 0x152 <USART1_Transmit+0x8>
	/* Store data in buffer */
	USART_TxBuf[tmphead] = data;
 15a:	e2 2f       	mov	r30, r18
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ee 5f       	subi	r30, 0xFE	; 254
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 83       	st	Z, r24
	/* Store new index */
	USART_TxHead = tmphead;               
 164:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <USART_TxHead>
	/* Enable UDRE interrupt */
	UCSR0B |= (1<<UDRIE0);                    
 168:	e1 ec       	ldi	r30, 0xC1	; 193
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <main>:


int main(void)
{
	/* Set the baudrate to 9600 bps using 8MHz internal RC oscillator */
	USART1_Init(UBRR_VAL);   
 174:	87 e6       	ldi	r24, 0x67	; 103
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 48 00 	call	0x90	; 0x90 <USART1_Init>

	
		sei();
 17c:	78 94       	sei


	while(1)
	{
		/* Echo the received character */
		USART1_Transmit('a');
 17e:	81 e6       	ldi	r24, 0x61	; 97
 180:	0e 94 a5 00 	call	0x14a	; 0x14a <USART1_Transmit>
 184:	fc cf       	rjmp	.-8      	; 0x17e <main+0xa>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
