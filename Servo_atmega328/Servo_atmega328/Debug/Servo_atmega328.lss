
Servo_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000085e  000008f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000085e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800102  00800102  000008f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d47  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b9  00000000  00000000  0000179b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ea  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b6  00000000  00000000  0000302b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000033e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 2d 04 	jmp	0x85a	; 0x85a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void)
{
	//int i = 0;
  
	timer_1ms_init();
  a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <timer_1ms_init>
	pwm_init();
  aa:	0e 94 88 00 	call	0x110	; 0x110 <pwm_init>
	uart_init();
  ae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <uart_init>
	ext_int_init();
  b2:	0e 94 63 00 	call	0xc6	; 0xc6 <ext_int_init>
	
	sei();		//NEMOJ ZABORAVITI, global interrupt enable
  b6:	78 94       	sei
			_delay_ms(20);
		}
		*/
		
		
		if(flag_100ms)
  b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flag_100ms>
  bc:	88 23       	and	r24, r24
  be:	e1 f3       	breq	.-8      	; 0xb8 <main+0x12>
		{
			flag_100ms = 0; //resetuj flag koji se setuje u ISR-u
  c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <flag_100ms>
  c4:	f9 cf       	rjmp	.-14     	; 0xb8 <main+0x12>

000000c6 <ext_int_init>:
volatile uint_fast8_t opadajuca = 0;


void ext_int_init()
{
	DDRD &= ~(1<<DDD2);  //PD2 ulaz za taster
  c6:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 1<<PORTD2;  //PD2 pull up
  c8:	5a 9a       	sbi	0x0b, 2	; 11

	EICRA |= (1<<ISC01);	//The falling edge of INT0 generates an interrupt request.
  ca:	e9 e6       	ldi	r30, 0x69	; 105
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
	EIMSK |= 1<<INT0;		//External Interrupt Request 0 Enable
  d4:	e8 9a       	sbi	0x1d, 0	; 29
  d6:	08 95       	ret

000000d8 <__vector_1>:
}



ISR(INT0_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
	
	if (!opadajuca)
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e8:	81 11       	cpse	r24, r1
  ea:	0c c0       	rjmp	.+24     	; 0x104 <__vector_1+0x2c>
	{
		opadajuca = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		sys_time = 0;
  f2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sys_time>
  f6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sys_time+0x1>
  fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sys_time+0x2>
  fe:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sys_time+0x3>
		TCNT0 = 0; //reset tajmera, tj start
 102:	16 bc       	out	0x26, r1	; 38
	}
	
	
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <pwm_init>:

const uint_least16_t TOP_PWM = 39999;

void pwm_init()
{
	DDRB |= 1<<DDB1;    //PB1 = pwm izlaz za servo
 110:	21 9a       	sbi	0x04, 1	; 4
	
	TCCR1A |= (1<<COM1A1)|(1<<WGM11);           //Clear OC1A/OC1B on compare match, set OC1A/OC1B at BOTTOM (non-inverting mode); fast pwm mode, top = ICR1
 112:	e0 e8       	ldi	r30, 0x80	; 128
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	82 68       	ori	r24, 0x82	; 130
 11a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS11);	//fast pwm mode, top = ICR1;  prescaler = 8
 11c:	e1 e8       	ldi	r30, 0x81	; 129
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8a 61       	ori	r24, 0x1A	; 26
 124:	80 83       	st	Z, r24
	ICR1 = TOP_PWM;								//top=39999, 50 Hz
 126:	8f e3       	ldi	r24, 0x3F	; 63
 128:	9c e9       	ldi	r25, 0x9C	; 156
 12a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 12e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = TOP_PWM;							//duty cycle (faktor ispune);  0 - 39999 (0-100%). Inicijalno na max, tj. 5V const
 132:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 136:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//TIMSK1 |= 1<<OCIE1A;						//compare match A (OCR1A) interrupt enable
	TCNT1 = 0;									//resetujem tc brojac da ovde krene od nule. Kada udari u ICR1(39999) resetuje se
 13a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 13e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 142:	08 95       	ret

00000144 <__vector_11>:
	
}


ISR(TIMER1_COMPA_vect)	//pwm prekid, ne treba mi?
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
	
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <set_servo_angle>:




uint_least16_t set_servo_angle(uint_least8_t angle, uint_least8_t min, uint_least8_t max)
{
 158:	cf 92       	push	r12
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
	static const float koef = 0.049;	
	static const float y_ofset = 3.1;									
	
	
	//zabranjeno stanje
	if( min >= max)
 160:	64 17       	cp	r22, r20
 162:	b8 f5       	brcc	.+110    	; 0x1d2 <set_servo_angle+0x7a>
 164:	85 3b       	cpi	r24, 0xB5	; 181
 166:	08 f0       	brcs	.+2      	; 0x16a <set_servo_angle+0x12>
 168:	84 eb       	ldi	r24, 0xB4	; 180
 16a:	84 17       	cp	r24, r20
 16c:	08 f4       	brcc	.+2      	; 0x170 <set_servo_angle+0x18>
 16e:	48 2f       	mov	r20, r24
		angle = max;
	if(angle < min)
		angle = min;
	
	
	DuC = ((koef*angle + y_ofset)/100 )* TOP_PWM;		//top pwm = pwm period registar
 170:	65 3b       	cpi	r22, 0xB5	; 181
 172:	08 f0       	brcs	.+2      	; 0x176 <set_servo_angle+0x1e>
 174:	64 eb       	ldi	r22, 0xB4	; 180
 176:	64 17       	cp	r22, r20
 178:	08 f4       	brcc	.+2      	; 0x17c <set_servo_angle+0x24>
 17a:	64 2f       	mov	r22, r20
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 12 03 	call	0x624	; 0x624 <__floatsisf>
 186:	29 e3       	ldi	r18, 0x39	; 57
 188:	34 eb       	ldi	r19, 0xB4	; 180
 18a:	48 e4       	ldi	r20, 0x48	; 72
 18c:	5d e3       	ldi	r21, 0x3D	; 61
 18e:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
 192:	26 e6       	ldi	r18, 0x66	; 102
 194:	36 e6       	ldi	r19, 0x66	; 102
 196:	46 e4       	ldi	r20, 0x46	; 70
 198:	50 e4       	ldi	r21, 0x40	; 64
 19a:	0e 94 03 02 	call	0x406	; 0x406 <__addsf3>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	48 ec       	ldi	r20, 0xC8	; 200
 1a4:	52 e4       	ldi	r21, 0x42	; 66
 1a6:	0e 94 6f 02 	call	0x4de	; 0x4de <__divsf3>
 1aa:	6b 01       	movw	r12, r22
 1ac:	7c 01       	movw	r14, r24
 1ae:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <TOP_PWM>
 1b2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <TOP_PWM+0x1>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 10 03 	call	0x620	; 0x620 <__floatunsisf>
 1be:	9b 01       	movw	r18, r22
 1c0:	ac 01       	movw	r20, r24
 1c2:	c7 01       	movw	r24, r14
 1c4:	b6 01       	movw	r22, r12
 1c6:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
 1ca:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fixunssfsi>
 1ce:	cb 01       	movw	r24, r22
														//top pwm mnozi za koeficijentom (0-1), sto je fakticki faktor ispune
	return DuC;
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <set_servo_angle+0x7e>
	static const float y_ofset = 3.1;									
	
	
	//zabranjeno stanje
	if( min >= max)
		return 0;
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
	
	DuC = ((koef*angle + y_ofset)/100 )* TOP_PWM;		//top pwm = pwm period registar
														//top pwm mnozi za koeficijentom (0-1), sto je fakticki faktor ispune
	return DuC;
	
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	08 95       	ret

000001e0 <timer_1ms_init>:
volatile uint_fast32_t sys_time = 0;  //64 bita nikada nece otici u overflow. teoretski to ce se desiti za oko 600 miliona godina
volatile uint_fast8_t flag_pritisnut = 0;

void timer_1ms_init()	//sistemski tajmer, timer/counter0
{
	DDRD |= 1<<DDD6;	//PD6 izlaz = timer debug check on o-scope
 1e0:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= 1<<DDD7;
 1e2:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= 1<DDB5;     //led
 1e4:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~(1<<PORTB5); //led OFF
 1e6:	2d 98       	cbi	0x05, 5	; 5
	
	
	TCCR0A |= 1<<WGM01;				//CTC mode
 1e8:	84 b5       	in	r24, 0x24	; 36
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01)|(1<<CS00);	//prescaler = 64
 1ee:	85 b5       	in	r24, 0x25	; 37
 1f0:	83 60       	ori	r24, 0x03	; 3
 1f2:	85 bd       	out	0x25, r24	; 37
	OCR0A = TOP_timer;				//top = 249;  1kHz
 1f4:	89 ef       	ldi	r24, 0xF9	; 249
 1f6:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1<<OCIE0A;			//compare match A (OCR0A) interrupt enable
 1f8:	ee e6       	ldi	r30, 0x6E	; 110
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	80 83       	st	Z, r24
	TCNT0 = 0;						//resetujem tc brojac da ovde krene od nule. Kada udari u OCR0A(249) resetuje se
 202:	16 bc       	out	0x26, r1	; 38
 204:	08 95       	ret

00000206 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)	//1ms prekid
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	
	if ((opadajuca==1) && (sys_time==1) && (!(PIND&0b100)) )
 228:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	f9 f4       	brne	.+62     	; 0x26e <__vector_14+0x68>
 230:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sys_time>
 234:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sys_time+0x1>
 238:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <sys_time+0x2>
 23c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <sys_time+0x3>
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	a1 05       	cpc	r26, r1
 244:	b1 05       	cpc	r27, r1
 246:	99 f4       	brne	.+38     	; 0x26e <__vector_14+0x68>
 248:	4a 99       	sbic	0x09, 2	; 9
 24a:	11 c0       	rjmp	.+34     	; 0x26e <__vector_14+0x68>
	{
		OCR1A = set_servo_angle(90, 0, 180);
 24c:	44 eb       	ldi	r20, 0xB4	; 180
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	8a e5       	ldi	r24, 0x5A	; 90
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 ac 00 	call	0x158	; 0x158 <set_servo_angle>
 25c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 260:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		flag_pritisnut = 1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <flag_pritisnut>
		PORTB |= 1<<PORTB5; //led ON
 26a:	2d 9a       	sbi	0x05, 5	; 5

ISR(TIMER0_COMPA_vect)	//1ms prekid
{
	
	if ((opadajuca==1) && (sys_time==1) && (!(PIND&0b100)) )
	{
 26c:	0e c0       	rjmp	.+28     	; 0x28a <__vector_14+0x84>
		OCR1A = set_servo_angle(90, 0, 180);
		flag_pritisnut = 1;
		PORTB |= 1<<PORTB5; //led ON
	}
	else if(sys_time==1)	//ako nije ispunje gore treci uslov, u prvoj milisekundi
 26e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sys_time>
 272:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sys_time+0x1>
 276:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <sys_time+0x2>
 27a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <sys_time+0x3>
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	a1 05       	cpc	r26, r1
 282:	b1 05       	cpc	r27, r1
 284:	11 f4       	brne	.+4      	; 0x28a <__vector_14+0x84>
		opadajuca = 0; //dozvoli opet taster
 286:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>

	
	if (sys_time == interval  && flag_pritisnut)
 28a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sys_time>
 28e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sys_time+0x1>
 292:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <sys_time+0x2>
 296:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <sys_time+0x3>
 29a:	84 3f       	cpi	r24, 0xF4	; 244
 29c:	91 40       	sbci	r25, 0x01	; 1
 29e:	a1 05       	cpc	r26, r1
 2a0:	b1 05       	cpc	r27, r1
 2a2:	81 f4       	brne	.+32     	; 0x2c4 <__vector_14+0xbe>
 2a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <flag_pritisnut>
 2a8:	88 23       	and	r24, r24
 2aa:	61 f0       	breq	.+24     	; 0x2c4 <__vector_14+0xbe>
		OCR1A = set_servo_angle(0, 0, 180);
 2ac:	44 eb       	ldi	r20, 0xB4	; 180
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 ac 00 	call	0x158	; 0x158 <set_servo_angle>
 2bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		 

	
	if (sys_time == 2*interval && flag_pritisnut)
 2c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sys_time>
 2c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sys_time+0x1>
 2cc:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <sys_time+0x2>
 2d0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <sys_time+0x3>
 2d4:	88 3e       	cpi	r24, 0xE8	; 232
 2d6:	93 40       	sbci	r25, 0x03	; 3
 2d8:	a1 05       	cpc	r26, r1
 2da:	b1 05       	cpc	r27, r1
 2dc:	89 f4       	brne	.+34     	; 0x300 <__vector_14+0xfa>
 2de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <flag_pritisnut>
 2e2:	88 23       	and	r24, r24
 2e4:	69 f0       	breq	.+26     	; 0x300 <__vector_14+0xfa>
	{
		OCR1A = TOP_PWM; //servo off, Duc = 100%
 2e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <TOP_PWM>
 2ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <TOP_PWM+0x1>
 2ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		opadajuca = 0; //dozvoli opet taster
 2f6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		flag_pritisnut = 0;
 2fa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag_pritisnut>
		
		PORTB &= ~(1<<PORTB5); //led OFF
 2fe:	2d 98       	cbi	0x05, 5	; 5
	}
	
	
	
	
	if (!(sys_time % 100))
 300:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <sys_time>
 304:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <sys_time+0x1>
 308:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sys_time+0x2>
 30c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sys_time+0x3>
 310:	24 e6       	ldi	r18, 0x64	; 100
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	0e 94 0b 04 	call	0x816	; 0x816 <__udivmodsi4>
 31c:	67 2b       	or	r22, r23
 31e:	68 2b       	or	r22, r24
 320:	69 2b       	or	r22, r25
 322:	21 f4       	brne	.+8      	; 0x32c <__vector_14+0x126>
	{
		flag_100ms = 1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flag_100ms>
		PIND |= 1<<PIND7;
 32a:	4f 9a       	sbi	0x09, 7	; 9
	}
	
	
	
	sys_time++;
 32c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sys_time>
 330:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sys_time+0x1>
 334:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <sys_time+0x2>
 338:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <sys_time+0x3>
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	a1 1d       	adc	r26, r1
 340:	b1 1d       	adc	r27, r1
 342:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sys_time>
 346:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <sys_time+0x1>
 34a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <sys_time+0x2>
 34e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <sys_time+0x3>
	
	PIND |= 1<<PIND6;	//toggle
 352:	4e 9a       	sbi	0x09, 6	; 9
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
	poslato=0;
 380:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <poslato>
}
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <__vector_18>:

ISR(USART_RX_vect)
{
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	8f 93       	push	r24
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	input_char=UDR0;
 39e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 3a6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buff_size>
 3aa:	88 30       	cpi	r24, 0x08	; 8
 3ac:	98 f4       	brcc	.+38     	; 0x3d4 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 3ae:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <buff_size>
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <input_char>
 3b8:	e4 5f       	subi	r30, 0xF4	; 244
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	80 83       	st	Z, r24
		buff_size++;
 3be:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buff_size>
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buff_size>
		input_buffer[buff_size]='\0';
 3c8:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <buff_size>
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	e4 5f       	subi	r30, 0xF4	; 244
 3d0:	fe 4f       	sbci	r31, 0xFE	; 254
 3d2:	10 82       	st	Z, r1
	}
}
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	8f 91       	pop	r24
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 3ea:	88 ed       	ldi	r24, 0xD8	; 216
 3ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 3f0:	86 e0       	ldi	r24, 0x06	; 6
 3f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 3f6:	8f ec       	ldi	r24, 0xCF	; 207
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 3fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 402:	08 95       	ret

00000404 <__subsf3>:
 404:	50 58       	subi	r21, 0x80	; 128

00000406 <__addsf3>:
 406:	bb 27       	eor	r27, r27
 408:	aa 27       	eor	r26, r26
 40a:	0e 94 1a 02 	call	0x434	; 0x434 <__addsf3x>
 40e:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_round>
 412:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscA>
 416:	38 f0       	brcs	.+14     	; 0x426 <__addsf3+0x20>
 418:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscB>
 41c:	20 f0       	brcs	.+8      	; 0x426 <__addsf3+0x20>
 41e:	39 f4       	brne	.+14     	; 0x42e <__addsf3+0x28>
 420:	9f 3f       	cpi	r25, 0xFF	; 255
 422:	19 f4       	brne	.+6      	; 0x42a <__addsf3+0x24>
 424:	26 f4       	brtc	.+8      	; 0x42e <__addsf3+0x28>
 426:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_nan>
 42a:	0e f4       	brtc	.+2      	; 0x42e <__addsf3+0x28>
 42c:	e0 95       	com	r30
 42e:	e7 fb       	bst	r30, 7
 430:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>

00000434 <__addsf3x>:
 434:	e9 2f       	mov	r30, r25
 436:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 43a:	58 f3       	brcs	.-42     	; 0x412 <__addsf3+0xc>
 43c:	ba 17       	cp	r27, r26
 43e:	62 07       	cpc	r22, r18
 440:	73 07       	cpc	r23, r19
 442:	84 07       	cpc	r24, r20
 444:	95 07       	cpc	r25, r21
 446:	20 f0       	brcs	.+8      	; 0x450 <__addsf3x+0x1c>
 448:	79 f4       	brne	.+30     	; 0x468 <__addsf3x+0x34>
 44a:	a6 f5       	brtc	.+104    	; 0x4b4 <__addsf3x+0x80>
 44c:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_zero>
 450:	0e f4       	brtc	.+2      	; 0x454 <__addsf3x+0x20>
 452:	e0 95       	com	r30
 454:	0b 2e       	mov	r0, r27
 456:	ba 2f       	mov	r27, r26
 458:	a0 2d       	mov	r26, r0
 45a:	0b 01       	movw	r0, r22
 45c:	b9 01       	movw	r22, r18
 45e:	90 01       	movw	r18, r0
 460:	0c 01       	movw	r0, r24
 462:	ca 01       	movw	r24, r20
 464:	a0 01       	movw	r20, r0
 466:	11 24       	eor	r1, r1
 468:	ff 27       	eor	r31, r31
 46a:	59 1b       	sub	r21, r25
 46c:	99 f0       	breq	.+38     	; 0x494 <__addsf3x+0x60>
 46e:	59 3f       	cpi	r21, 0xF9	; 249
 470:	50 f4       	brcc	.+20     	; 0x486 <__addsf3x+0x52>
 472:	50 3e       	cpi	r21, 0xE0	; 224
 474:	68 f1       	brcs	.+90     	; 0x4d0 <__addsf3x+0x9c>
 476:	1a 16       	cp	r1, r26
 478:	f0 40       	sbci	r31, 0x00	; 0
 47a:	a2 2f       	mov	r26, r18
 47c:	23 2f       	mov	r18, r19
 47e:	34 2f       	mov	r19, r20
 480:	44 27       	eor	r20, r20
 482:	58 5f       	subi	r21, 0xF8	; 248
 484:	f3 cf       	rjmp	.-26     	; 0x46c <__addsf3x+0x38>
 486:	46 95       	lsr	r20
 488:	37 95       	ror	r19
 48a:	27 95       	ror	r18
 48c:	a7 95       	ror	r26
 48e:	f0 40       	sbci	r31, 0x00	; 0
 490:	53 95       	inc	r21
 492:	c9 f7       	brne	.-14     	; 0x486 <__addsf3x+0x52>
 494:	7e f4       	brtc	.+30     	; 0x4b4 <__addsf3x+0x80>
 496:	1f 16       	cp	r1, r31
 498:	ba 0b       	sbc	r27, r26
 49a:	62 0b       	sbc	r22, r18
 49c:	73 0b       	sbc	r23, r19
 49e:	84 0b       	sbc	r24, r20
 4a0:	ba f0       	brmi	.+46     	; 0x4d0 <__addsf3x+0x9c>
 4a2:	91 50       	subi	r25, 0x01	; 1
 4a4:	a1 f0       	breq	.+40     	; 0x4ce <__addsf3x+0x9a>
 4a6:	ff 0f       	add	r31, r31
 4a8:	bb 1f       	adc	r27, r27
 4aa:	66 1f       	adc	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	88 1f       	adc	r24, r24
 4b0:	c2 f7       	brpl	.-16     	; 0x4a2 <__addsf3x+0x6e>
 4b2:	0e c0       	rjmp	.+28     	; 0x4d0 <__addsf3x+0x9c>
 4b4:	ba 0f       	add	r27, r26
 4b6:	62 1f       	adc	r22, r18
 4b8:	73 1f       	adc	r23, r19
 4ba:	84 1f       	adc	r24, r20
 4bc:	48 f4       	brcc	.+18     	; 0x4d0 <__addsf3x+0x9c>
 4be:	87 95       	ror	r24
 4c0:	77 95       	ror	r23
 4c2:	67 95       	ror	r22
 4c4:	b7 95       	ror	r27
 4c6:	f7 95       	ror	r31
 4c8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <__addsf3x+0x9a>
 4cc:	b0 cf       	rjmp	.-160    	; 0x42e <__addsf3+0x28>
 4ce:	93 95       	inc	r25
 4d0:	88 0f       	add	r24, r24
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <__addsf3x+0xa2>
 4d4:	99 27       	eor	r25, r25
 4d6:	ee 0f       	add	r30, r30
 4d8:	97 95       	ror	r25
 4da:	87 95       	ror	r24
 4dc:	08 95       	ret

000004de <__divsf3>:
 4de:	0e 94 83 02 	call	0x506	; 0x506 <__divsf3x>
 4e2:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_round>
 4e6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscB>
 4ea:	58 f0       	brcs	.+22     	; 0x502 <__divsf3+0x24>
 4ec:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscA>
 4f0:	40 f0       	brcs	.+16     	; 0x502 <__divsf3+0x24>
 4f2:	29 f4       	brne	.+10     	; 0x4fe <__divsf3+0x20>
 4f4:	5f 3f       	cpi	r21, 0xFF	; 255
 4f6:	29 f0       	breq	.+10     	; 0x502 <__divsf3+0x24>
 4f8:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 4fc:	51 11       	cpse	r21, r1
 4fe:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 502:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_nan>

00000506 <__divsf3x>:
 506:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 50a:	68 f3       	brcs	.-38     	; 0x4e6 <__divsf3+0x8>

0000050c <__divsf3_pse>:
 50c:	99 23       	and	r25, r25
 50e:	b1 f3       	breq	.-20     	; 0x4fc <__divsf3+0x1e>
 510:	55 23       	and	r21, r21
 512:	91 f3       	breq	.-28     	; 0x4f8 <__divsf3+0x1a>
 514:	95 1b       	sub	r25, r21
 516:	55 0b       	sbc	r21, r21
 518:	bb 27       	eor	r27, r27
 51a:	aa 27       	eor	r26, r26
 51c:	62 17       	cp	r22, r18
 51e:	73 07       	cpc	r23, r19
 520:	84 07       	cpc	r24, r20
 522:	38 f0       	brcs	.+14     	; 0x532 <__divsf3_pse+0x26>
 524:	9f 5f       	subi	r25, 0xFF	; 255
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	44 1f       	adc	r20, r20
 52e:	aa 1f       	adc	r26, r26
 530:	a9 f3       	breq	.-22     	; 0x51c <__divsf3_pse+0x10>
 532:	35 d0       	rcall	.+106    	; 0x59e <__divsf3_pse+0x92>
 534:	0e 2e       	mov	r0, r30
 536:	3a f0       	brmi	.+14     	; 0x546 <__divsf3_pse+0x3a>
 538:	e0 e8       	ldi	r30, 0x80	; 128
 53a:	32 d0       	rcall	.+100    	; 0x5a0 <__divsf3_pse+0x94>
 53c:	91 50       	subi	r25, 0x01	; 1
 53e:	50 40       	sbci	r21, 0x00	; 0
 540:	e6 95       	lsr	r30
 542:	00 1c       	adc	r0, r0
 544:	ca f7       	brpl	.-14     	; 0x538 <__divsf3_pse+0x2c>
 546:	2b d0       	rcall	.+86     	; 0x59e <__divsf3_pse+0x92>
 548:	fe 2f       	mov	r31, r30
 54a:	29 d0       	rcall	.+82     	; 0x59e <__divsf3_pse+0x92>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	bb 1f       	adc	r27, r27
 554:	26 17       	cp	r18, r22
 556:	37 07       	cpc	r19, r23
 558:	48 07       	cpc	r20, r24
 55a:	ab 07       	cpc	r26, r27
 55c:	b0 e8       	ldi	r27, 0x80	; 128
 55e:	09 f0       	breq	.+2      	; 0x562 <__divsf3_pse+0x56>
 560:	bb 0b       	sbc	r27, r27
 562:	80 2d       	mov	r24, r0
 564:	bf 01       	movw	r22, r30
 566:	ff 27       	eor	r31, r31
 568:	93 58       	subi	r25, 0x83	; 131
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	3a f0       	brmi	.+14     	; 0x57c <__divsf3_pse+0x70>
 56e:	9e 3f       	cpi	r25, 0xFE	; 254
 570:	51 05       	cpc	r21, r1
 572:	78 f0       	brcs	.+30     	; 0x592 <__divsf3_pse+0x86>
 574:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 578:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 57c:	5f 3f       	cpi	r21, 0xFF	; 255
 57e:	e4 f3       	brlt	.-8      	; 0x578 <__divsf3_pse+0x6c>
 580:	98 3e       	cpi	r25, 0xE8	; 232
 582:	d4 f3       	brlt	.-12     	; 0x578 <__divsf3_pse+0x6c>
 584:	86 95       	lsr	r24
 586:	77 95       	ror	r23
 588:	67 95       	ror	r22
 58a:	b7 95       	ror	r27
 58c:	f7 95       	ror	r31
 58e:	9f 5f       	subi	r25, 0xFF	; 255
 590:	c9 f7       	brne	.-14     	; 0x584 <__divsf3_pse+0x78>
 592:	88 0f       	add	r24, r24
 594:	91 1d       	adc	r25, r1
 596:	96 95       	lsr	r25
 598:	87 95       	ror	r24
 59a:	97 f9       	bld	r25, 7
 59c:	08 95       	ret
 59e:	e1 e0       	ldi	r30, 0x01	; 1
 5a0:	66 0f       	add	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	88 1f       	adc	r24, r24
 5a6:	bb 1f       	adc	r27, r27
 5a8:	62 17       	cp	r22, r18
 5aa:	73 07       	cpc	r23, r19
 5ac:	84 07       	cpc	r24, r20
 5ae:	ba 07       	cpc	r27, r26
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__divsf3_pse+0xae>
 5b2:	62 1b       	sub	r22, r18
 5b4:	73 0b       	sbc	r23, r19
 5b6:	84 0b       	sbc	r24, r20
 5b8:	ba 0b       	sbc	r27, r26
 5ba:	ee 1f       	adc	r30, r30
 5bc:	88 f7       	brcc	.-30     	; 0x5a0 <__divsf3_pse+0x94>
 5be:	e0 95       	com	r30
 5c0:	08 95       	ret

000005c2 <__fixunssfsi>:
 5c2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_splitA>
 5c6:	88 f0       	brcs	.+34     	; 0x5ea <__fixunssfsi+0x28>
 5c8:	9f 57       	subi	r25, 0x7F	; 127
 5ca:	98 f0       	brcs	.+38     	; 0x5f2 <__fixunssfsi+0x30>
 5cc:	b9 2f       	mov	r27, r25
 5ce:	99 27       	eor	r25, r25
 5d0:	b7 51       	subi	r27, 0x17	; 23
 5d2:	b0 f0       	brcs	.+44     	; 0x600 <__fixunssfsi+0x3e>
 5d4:	e1 f0       	breq	.+56     	; 0x60e <__fixunssfsi+0x4c>
 5d6:	66 0f       	add	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	1a f0       	brmi	.+6      	; 0x5e6 <__fixunssfsi+0x24>
 5e0:	ba 95       	dec	r27
 5e2:	c9 f7       	brne	.-14     	; 0x5d6 <__fixunssfsi+0x14>
 5e4:	14 c0       	rjmp	.+40     	; 0x60e <__fixunssfsi+0x4c>
 5e6:	b1 30       	cpi	r27, 0x01	; 1
 5e8:	91 f0       	breq	.+36     	; 0x60e <__fixunssfsi+0x4c>
 5ea:	0e 94 97 03 	call	0x72e	; 0x72e <__fp_zero>
 5ee:	b1 e0       	ldi	r27, 0x01	; 1
 5f0:	08 95       	ret
 5f2:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_zero>
 5f6:	67 2f       	mov	r22, r23
 5f8:	78 2f       	mov	r23, r24
 5fa:	88 27       	eor	r24, r24
 5fc:	b8 5f       	subi	r27, 0xF8	; 248
 5fe:	39 f0       	breq	.+14     	; 0x60e <__fixunssfsi+0x4c>
 600:	b9 3f       	cpi	r27, 0xF9	; 249
 602:	cc f3       	brlt	.-14     	; 0x5f6 <__fixunssfsi+0x34>
 604:	86 95       	lsr	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b3 95       	inc	r27
 60c:	d9 f7       	brne	.-10     	; 0x604 <__fixunssfsi+0x42>
 60e:	3e f4       	brtc	.+14     	; 0x61e <__fixunssfsi+0x5c>
 610:	90 95       	com	r25
 612:	80 95       	com	r24
 614:	70 95       	com	r23
 616:	61 95       	neg	r22
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <__floatunsisf>:
 620:	e8 94       	clt
 622:	09 c0       	rjmp	.+18     	; 0x636 <__floatsisf+0x12>

00000624 <__floatsisf>:
 624:	97 fb       	bst	r25, 7
 626:	3e f4       	brtc	.+14     	; 0x636 <__floatsisf+0x12>
 628:	90 95       	com	r25
 62a:	80 95       	com	r24
 62c:	70 95       	com	r23
 62e:	61 95       	neg	r22
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	8f 4f       	sbci	r24, 0xFF	; 255
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	99 23       	and	r25, r25
 638:	a9 f0       	breq	.+42     	; 0x664 <__floatsisf+0x40>
 63a:	f9 2f       	mov	r31, r25
 63c:	96 e9       	ldi	r25, 0x96	; 150
 63e:	bb 27       	eor	r27, r27
 640:	93 95       	inc	r25
 642:	f6 95       	lsr	r31
 644:	87 95       	ror	r24
 646:	77 95       	ror	r23
 648:	67 95       	ror	r22
 64a:	b7 95       	ror	r27
 64c:	f1 11       	cpse	r31, r1
 64e:	f8 cf       	rjmp	.-16     	; 0x640 <__floatsisf+0x1c>
 650:	fa f4       	brpl	.+62     	; 0x690 <__floatsisf+0x6c>
 652:	bb 0f       	add	r27, r27
 654:	11 f4       	brne	.+4      	; 0x65a <__floatsisf+0x36>
 656:	60 ff       	sbrs	r22, 0
 658:	1b c0       	rjmp	.+54     	; 0x690 <__floatsisf+0x6c>
 65a:	6f 5f       	subi	r22, 0xFF	; 255
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	16 c0       	rjmp	.+44     	; 0x690 <__floatsisf+0x6c>
 664:	88 23       	and	r24, r24
 666:	11 f0       	breq	.+4      	; 0x66c <__floatsisf+0x48>
 668:	96 e9       	ldi	r25, 0x96	; 150
 66a:	11 c0       	rjmp	.+34     	; 0x68e <__floatsisf+0x6a>
 66c:	77 23       	and	r23, r23
 66e:	21 f0       	breq	.+8      	; 0x678 <__floatsisf+0x54>
 670:	9e e8       	ldi	r25, 0x8E	; 142
 672:	87 2f       	mov	r24, r23
 674:	76 2f       	mov	r23, r22
 676:	05 c0       	rjmp	.+10     	; 0x682 <__floatsisf+0x5e>
 678:	66 23       	and	r22, r22
 67a:	71 f0       	breq	.+28     	; 0x698 <__floatsisf+0x74>
 67c:	96 e8       	ldi	r25, 0x86	; 134
 67e:	86 2f       	mov	r24, r22
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	2a f0       	brmi	.+10     	; 0x690 <__floatsisf+0x6c>
 686:	9a 95       	dec	r25
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	da f7       	brpl	.-10     	; 0x686 <__floatsisf+0x62>
 690:	88 0f       	add	r24, r24
 692:	96 95       	lsr	r25
 694:	87 95       	ror	r24
 696:	97 f9       	bld	r25, 7
 698:	08 95       	ret

0000069a <__fp_inf>:
 69a:	97 f9       	bld	r25, 7
 69c:	9f 67       	ori	r25, 0x7F	; 127
 69e:	80 e8       	ldi	r24, 0x80	; 128
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	08 95       	ret

000006a6 <__fp_nan>:
 6a6:	9f ef       	ldi	r25, 0xFF	; 255
 6a8:	80 ec       	ldi	r24, 0xC0	; 192
 6aa:	08 95       	ret

000006ac <__fp_pscA>:
 6ac:	00 24       	eor	r0, r0
 6ae:	0a 94       	dec	r0
 6b0:	16 16       	cp	r1, r22
 6b2:	17 06       	cpc	r1, r23
 6b4:	18 06       	cpc	r1, r24
 6b6:	09 06       	cpc	r0, r25
 6b8:	08 95       	ret

000006ba <__fp_pscB>:
 6ba:	00 24       	eor	r0, r0
 6bc:	0a 94       	dec	r0
 6be:	12 16       	cp	r1, r18
 6c0:	13 06       	cpc	r1, r19
 6c2:	14 06       	cpc	r1, r20
 6c4:	05 06       	cpc	r0, r21
 6c6:	08 95       	ret

000006c8 <__fp_round>:
 6c8:	09 2e       	mov	r0, r25
 6ca:	03 94       	inc	r0
 6cc:	00 0c       	add	r0, r0
 6ce:	11 f4       	brne	.+4      	; 0x6d4 <__fp_round+0xc>
 6d0:	88 23       	and	r24, r24
 6d2:	52 f0       	brmi	.+20     	; 0x6e8 <__fp_round+0x20>
 6d4:	bb 0f       	add	r27, r27
 6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__fp_round+0x20>
 6d8:	bf 2b       	or	r27, r31
 6da:	11 f4       	brne	.+4      	; 0x6e0 <__fp_round+0x18>
 6dc:	60 ff       	sbrs	r22, 0
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <__fp_round+0x20>
 6e0:	6f 5f       	subi	r22, 0xFF	; 255
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	08 95       	ret

000006ea <__fp_split3>:
 6ea:	57 fd       	sbrc	r21, 7
 6ec:	90 58       	subi	r25, 0x80	; 128
 6ee:	44 0f       	add	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	59 f0       	breq	.+22     	; 0x70a <__fp_splitA+0x10>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	71 f0       	breq	.+28     	; 0x714 <__fp_splitA+0x1a>
 6f8:	47 95       	ror	r20

000006fa <__fp_splitA>:
 6fa:	88 0f       	add	r24, r24
 6fc:	97 fb       	bst	r25, 7
 6fe:	99 1f       	adc	r25, r25
 700:	61 f0       	breq	.+24     	; 0x71a <__fp_splitA+0x20>
 702:	9f 3f       	cpi	r25, 0xFF	; 255
 704:	79 f0       	breq	.+30     	; 0x724 <__fp_splitA+0x2a>
 706:	87 95       	ror	r24
 708:	08 95       	ret
 70a:	12 16       	cp	r1, r18
 70c:	13 06       	cpc	r1, r19
 70e:	14 06       	cpc	r1, r20
 710:	55 1f       	adc	r21, r21
 712:	f2 cf       	rjmp	.-28     	; 0x6f8 <__fp_split3+0xe>
 714:	46 95       	lsr	r20
 716:	f1 df       	rcall	.-30     	; 0x6fa <__fp_splitA>
 718:	08 c0       	rjmp	.+16     	; 0x72a <__fp_splitA+0x30>
 71a:	16 16       	cp	r1, r22
 71c:	17 06       	cpc	r1, r23
 71e:	18 06       	cpc	r1, r24
 720:	99 1f       	adc	r25, r25
 722:	f1 cf       	rjmp	.-30     	; 0x706 <__fp_splitA+0xc>
 724:	86 95       	lsr	r24
 726:	71 05       	cpc	r23, r1
 728:	61 05       	cpc	r22, r1
 72a:	08 94       	sec
 72c:	08 95       	ret

0000072e <__fp_zero>:
 72e:	e8 94       	clt

00000730 <__fp_szero>:
 730:	bb 27       	eor	r27, r27
 732:	66 27       	eor	r22, r22
 734:	77 27       	eor	r23, r23
 736:	cb 01       	movw	r24, r22
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__mulsf3>:
 73c:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3x>
 740:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_round>
 744:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscA>
 748:	38 f0       	brcs	.+14     	; 0x758 <__mulsf3+0x1c>
 74a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscB>
 74e:	20 f0       	brcs	.+8      	; 0x758 <__mulsf3+0x1c>
 750:	95 23       	and	r25, r21
 752:	11 f0       	breq	.+4      	; 0x758 <__mulsf3+0x1c>
 754:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 758:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_nan>
 75c:	11 24       	eor	r1, r1
 75e:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>

00000762 <__mulsf3x>:
 762:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 766:	70 f3       	brcs	.-36     	; 0x744 <__mulsf3+0x8>

00000768 <__mulsf3_pse>:
 768:	95 9f       	mul	r25, r21
 76a:	c1 f3       	breq	.-16     	; 0x75c <__mulsf3+0x20>
 76c:	95 0f       	add	r25, r21
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	55 1f       	adc	r21, r21
 772:	62 9f       	mul	r22, r18
 774:	f0 01       	movw	r30, r0
 776:	72 9f       	mul	r23, r18
 778:	bb 27       	eor	r27, r27
 77a:	f0 0d       	add	r31, r0
 77c:	b1 1d       	adc	r27, r1
 77e:	63 9f       	mul	r22, r19
 780:	aa 27       	eor	r26, r26
 782:	f0 0d       	add	r31, r0
 784:	b1 1d       	adc	r27, r1
 786:	aa 1f       	adc	r26, r26
 788:	64 9f       	mul	r22, r20
 78a:	66 27       	eor	r22, r22
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	66 1f       	adc	r22, r22
 792:	82 9f       	mul	r24, r18
 794:	22 27       	eor	r18, r18
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	62 1f       	adc	r22, r18
 79c:	73 9f       	mul	r23, r19
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	62 1f       	adc	r22, r18
 7a4:	83 9f       	mul	r24, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	22 1f       	adc	r18, r18
 7ac:	74 9f       	mul	r23, r20
 7ae:	33 27       	eor	r19, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	23 1f       	adc	r18, r19
 7b6:	84 9f       	mul	r24, r20
 7b8:	60 0d       	add	r22, r0
 7ba:	21 1d       	adc	r18, r1
 7bc:	82 2f       	mov	r24, r18
 7be:	76 2f       	mov	r23, r22
 7c0:	6a 2f       	mov	r22, r26
 7c2:	11 24       	eor	r1, r1
 7c4:	9f 57       	subi	r25, 0x7F	; 127
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	9a f0       	brmi	.+38     	; 0x7f0 <__mulsf3_pse+0x88>
 7ca:	f1 f0       	breq	.+60     	; 0x808 <__mulsf3_pse+0xa0>
 7cc:	88 23       	and	r24, r24
 7ce:	4a f0       	brmi	.+18     	; 0x7e2 <__mulsf3_pse+0x7a>
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	bb 1f       	adc	r27, r27
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__mulsf3_pse+0x64>
 7e2:	9e 3f       	cpi	r25, 0xFE	; 254
 7e4:	51 05       	cpc	r21, r1
 7e6:	80 f0       	brcs	.+32     	; 0x808 <__mulsf3_pse+0xa0>
 7e8:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 7ec:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 7f0:	5f 3f       	cpi	r21, 0xFF	; 255
 7f2:	e4 f3       	brlt	.-8      	; 0x7ec <__mulsf3_pse+0x84>
 7f4:	98 3e       	cpi	r25, 0xE8	; 232
 7f6:	d4 f3       	brlt	.-12     	; 0x7ec <__mulsf3_pse+0x84>
 7f8:	86 95       	lsr	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b7 95       	ror	r27
 800:	f7 95       	ror	r31
 802:	e7 95       	ror	r30
 804:	9f 5f       	subi	r25, 0xFF	; 255
 806:	c1 f7       	brne	.-16     	; 0x7f8 <__mulsf3_pse+0x90>
 808:	fe 2b       	or	r31, r30
 80a:	88 0f       	add	r24, r24
 80c:	91 1d       	adc	r25, r1
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret

00000816 <__udivmodsi4>:
 816:	a1 e2       	ldi	r26, 0x21	; 33
 818:	1a 2e       	mov	r1, r26
 81a:	aa 1b       	sub	r26, r26
 81c:	bb 1b       	sub	r27, r27
 81e:	fd 01       	movw	r30, r26
 820:	0d c0       	rjmp	.+26     	; 0x83c <__udivmodsi4_ep>

00000822 <__udivmodsi4_loop>:
 822:	aa 1f       	adc	r26, r26
 824:	bb 1f       	adc	r27, r27
 826:	ee 1f       	adc	r30, r30
 828:	ff 1f       	adc	r31, r31
 82a:	a2 17       	cp	r26, r18
 82c:	b3 07       	cpc	r27, r19
 82e:	e4 07       	cpc	r30, r20
 830:	f5 07       	cpc	r31, r21
 832:	20 f0       	brcs	.+8      	; 0x83c <__udivmodsi4_ep>
 834:	a2 1b       	sub	r26, r18
 836:	b3 0b       	sbc	r27, r19
 838:	e4 0b       	sbc	r30, r20
 83a:	f5 0b       	sbc	r31, r21

0000083c <__udivmodsi4_ep>:
 83c:	66 1f       	adc	r22, r22
 83e:	77 1f       	adc	r23, r23
 840:	88 1f       	adc	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	1a 94       	dec	r1
 846:	69 f7       	brne	.-38     	; 0x822 <__udivmodsi4_loop>
 848:	60 95       	com	r22
 84a:	70 95       	com	r23
 84c:	80 95       	com	r24
 84e:	90 95       	com	r25
 850:	9b 01       	movw	r18, r22
 852:	ac 01       	movw	r20, r24
 854:	bd 01       	movw	r22, r26
 856:	cf 01       	movw	r24, r30
 858:	08 95       	ret

0000085a <_exit>:
 85a:	f8 94       	cli

0000085c <__stop_program>:
 85c:	ff cf       	rjmp	.-2      	; 0x85c <__stop_program>
