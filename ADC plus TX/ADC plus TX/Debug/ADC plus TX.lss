
ADC plus TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800100  00800100  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000807  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006df  00000000  00000000  00000ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000360  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001d79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 36       	cpi	r26, 0x6C	; 108
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 09 01 	call	0x212	; 0x212 <main>
  88:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Rx_Tx_Init>:


void Rx_Tx_Init()
{
	
		UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Rx, Tx enable, Tx interrupt enable, Rx interrupt enable      (1<<TXCIE0)|(1<<RXCIE0)
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		
		//1 stop bit, no parity
		
		UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); //Char size = 8 bit
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		
		//UBR je podeljen u dva registra
		UBRR0H = mojUBR>>8;  //LSB od mojUBR
  9c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		UBRR0L = mojUBR;  //MSB od mojUBR
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a6:	08 95       	ret

000000a8 <AD_C_init>:

void AD_C_init()
{
	
	
	PRR = 0; //power reduction off
  a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX |= (1<<REFS1)|(1<<REFS0);  //1.1V referentni napon, ulazni pin A0
  ac:	ec e7       	ldi	r30, 0x7C	; 124
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 6c       	ori	r24, 0xC0	; 192
  b4:	80 83       	st	Z, r24
	ADCSRA = 0xFF ;  //ADC enable, auto trigger enable, ADC conv. complete interrupt enable, sample 125kHz (128 prescaler)
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	//ADCL, ADCH(2 zadnja bita), 
	
	ADCSRB = 0; //free runniing mode
  bc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  c0:	08 95       	ret

000000c2 <PWM_init>:
	
}

void PWM_init()
{
	DDRB |= (1 << DDB1)|(1 << DDB2);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	86 60       	ori	r24, 0x06	; 6
  c6:	84 b9       	out	0x04, r24	; 4
	// PB1 and PB2 is now an output

	ICR1 =399; //399;
  c8:	8f e8       	ldi	r24, 0x8F	; 143
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  d0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	// set TOP to 16bit

	OCR1A = 200;
  d4:	88 ec       	ldi	r24, 0xC8	; 200
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// set PWM for 25% duty cycle @ 16bit

	OCR1B = 200;
  e0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  e4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	// set PWM for 75% duty cycle @ 16bit

	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
  e8:	e0 e8       	ldi	r30, 0x80	; 128
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 6a       	ori	r24, 0xA0	; 160
  f0:	80 83       	st	Z, r24
	// set none-inverting mode - valjda INVERTING, ili??

	TCCR1A |= (1 << WGM11);
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
  f8:	e1 e8       	ldi	r30, 0x81	; 129
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 61       	ori	r24, 0x18	; 24
 100:	80 83       	st	Z, r24
	// set Fast PWM mode using ICR1 as TOP
	
	TCCR1B |= (1 << CS10);
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <__vector_21>:
	// START the timer with no prescaler
}


ISR(ADC_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	//ADCL mora biti prvi procitan
	adc_low = (int)ADCL;    //koriste se dva 8-bit registra jer je rezultat AD konverzije 10-bitan
 12c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <adc_low+0x1>
 136:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <adc_low>
	adc_high = (int)ADCH;
 13a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <adc_high+0x1>
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_high>
	
	/**stapam rezultate iz dva registra u jednu promenljivu na ovaj nacin**/
	if(adc_high==0)
 148:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
 14c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
 150:	89 2b       	or	r24, r25
 152:	49 f4       	brne	.+18     	; 0x166 <__vector_21+0x5c>
		adc_res = adc_low;
 154:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <adc_low>
 158:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <adc_low+0x1>
 15c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 164:	2f c0       	rjmp	.+94     	; 0x1c4 <__vector_21+0xba>
	else if(adc_high==1)
 166:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
 16a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	51 f4       	brne	.+20     	; 0x186 <__vector_21+0x7c>
		adc_res = 256 + adc_low;
 172:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <adc_low>
 176:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <adc_low+0x1>
 17a:	93 95       	inc	r25
 17c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 184:	1f c0       	rjmp	.+62     	; 0x1c4 <__vector_21+0xba>
	else if(adc_high==2)
 186:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
 18a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
 18e:	02 97       	sbiw	r24, 0x02	; 2
 190:	51 f4       	brne	.+20     	; 0x1a6 <__vector_21+0x9c>
		adc_res = 256+256 + adc_low;
 192:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <adc_low>
 196:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <adc_low+0x1>
 19a:	9e 5f       	subi	r25, 0xFE	; 254
 19c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <__vector_21+0xba>
	else if(adc_high==3)
 1a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_high>
 1aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_high+0x1>
 1ae:	03 97       	sbiw	r24, 0x03	; 3
 1b0:	49 f4       	brne	.+18     	; 0x1c4 <__vector_21+0xba>
		adc_res = 256+256+256 + adc_low;
 1b2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <adc_low>
 1b6:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <adc_low+0x1>
 1ba:	9d 5f       	subi	r25, 0xFD	; 253
 1bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
	//adc_res = 1024 max
	
	OCR1A = adc_res/2.5; //2.56;
 1c4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 1c8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 1cc:	07 2e       	mov	r0, r23
 1ce:	00 0c       	add	r0, r0
 1d0:	88 0b       	sbc	r24, r24
 1d2:	99 0b       	sbc	r25, r25
 1d4:	0e 94 ca 01 	call	0x394	; 0x394 <__floatsisf>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	40 e2       	ldi	r20, 0x20	; 32
 1de:	50 e4       	ldi	r21, 0x40	; 64
 1e0:	0e 94 27 01 	call	0x24e	; 0x24e <__divsf3>
 1e4:	0e 94 99 01 	call	0x332	; 0x332 <__fixunssfsi>
 1e8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ec:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <main>:

int main(void)
{


	cli();
 212:	f8 94       	cli
	

	AD_C_init();
 214:	0e 94 54 00 	call	0xa8	; 0xa8 <AD_C_init>
	Rx_Tx_Init();
 218:	0e 94 48 00 	call	0x90	; 0x90 <Rx_Tx_Init>
	PWM_init();
 21c:	0e 94 61 00 	call	0xc2	; 0xc2 <PWM_init>
	
	sei();
 220:	78 94       	sei
	while(1)
	{
		
		
		
		while( !(UCSR0A &(1<<UDRE0)) );
 222:	e0 ec       	ldi	r30, 0xC0	; 192
 224:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = adc_res;
 226:	a6 ec       	ldi	r26, 0xC6	; 198
 228:	b0 e0       	ldi	r27, 0x00	; 0
	while(1)
	{
		
		
		
		while( !(UCSR0A &(1<<UDRE0)) );
 22a:	80 81       	ld	r24, Z
 22c:	85 ff       	sbrs	r24, 5
 22e:	fd cf       	rjmp	.-6      	; 0x22a <main+0x18>
		UDR0 = adc_res;
 230:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 234:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 238:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	80 e7       	ldi	r24, 0x70	; 112
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x2e>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x38>
 24a:	00 00       	nop
 24c:	ee cf       	rjmp	.-36     	; 0x22a <main+0x18>

0000024e <__divsf3>:
 24e:	0e 94 3b 01 	call	0x276	; 0x276 <__divsf3x>
 252:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_round>
 256:	0e 94 15 02 	call	0x42a	; 0x42a <__fp_pscB>
 25a:	58 f0       	brcs	.+22     	; 0x272 <__divsf3+0x24>
 25c:	0e 94 0e 02 	call	0x41c	; 0x41c <__fp_pscA>
 260:	40 f0       	brcs	.+16     	; 0x272 <__divsf3+0x24>
 262:	29 f4       	brne	.+10     	; 0x26e <__divsf3+0x20>
 264:	5f 3f       	cpi	r21, 0xFF	; 255
 266:	29 f0       	breq	.+10     	; 0x272 <__divsf3+0x24>
 268:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_inf>
 26c:	51 11       	cpse	r21, r1
 26e:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_szero>
 272:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_nan>

00000276 <__divsf3x>:
 276:	0e 94 2d 02 	call	0x45a	; 0x45a <__fp_split3>
 27a:	68 f3       	brcs	.-38     	; 0x256 <__divsf3+0x8>

0000027c <__divsf3_pse>:
 27c:	99 23       	and	r25, r25
 27e:	b1 f3       	breq	.-20     	; 0x26c <__divsf3+0x1e>
 280:	55 23       	and	r21, r21
 282:	91 f3       	breq	.-28     	; 0x268 <__divsf3+0x1a>
 284:	95 1b       	sub	r25, r21
 286:	55 0b       	sbc	r21, r21
 288:	bb 27       	eor	r27, r27
 28a:	aa 27       	eor	r26, r26
 28c:	62 17       	cp	r22, r18
 28e:	73 07       	cpc	r23, r19
 290:	84 07       	cpc	r24, r20
 292:	38 f0       	brcs	.+14     	; 0x2a2 <__divsf3_pse+0x26>
 294:	9f 5f       	subi	r25, 0xFF	; 255
 296:	5f 4f       	sbci	r21, 0xFF	; 255
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	44 1f       	adc	r20, r20
 29e:	aa 1f       	adc	r26, r26
 2a0:	a9 f3       	breq	.-22     	; 0x28c <__divsf3_pse+0x10>
 2a2:	35 d0       	rcall	.+106    	; 0x30e <__divsf3_pse+0x92>
 2a4:	0e 2e       	mov	r0, r30
 2a6:	3a f0       	brmi	.+14     	; 0x2b6 <__divsf3_pse+0x3a>
 2a8:	e0 e8       	ldi	r30, 0x80	; 128
 2aa:	32 d0       	rcall	.+100    	; 0x310 <__divsf3_pse+0x94>
 2ac:	91 50       	subi	r25, 0x01	; 1
 2ae:	50 40       	sbci	r21, 0x00	; 0
 2b0:	e6 95       	lsr	r30
 2b2:	00 1c       	adc	r0, r0
 2b4:	ca f7       	brpl	.-14     	; 0x2a8 <__divsf3_pse+0x2c>
 2b6:	2b d0       	rcall	.+86     	; 0x30e <__divsf3_pse+0x92>
 2b8:	fe 2f       	mov	r31, r30
 2ba:	29 d0       	rcall	.+82     	; 0x30e <__divsf3_pse+0x92>
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	88 1f       	adc	r24, r24
 2c2:	bb 1f       	adc	r27, r27
 2c4:	26 17       	cp	r18, r22
 2c6:	37 07       	cpc	r19, r23
 2c8:	48 07       	cpc	r20, r24
 2ca:	ab 07       	cpc	r26, r27
 2cc:	b0 e8       	ldi	r27, 0x80	; 128
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <__divsf3_pse+0x56>
 2d0:	bb 0b       	sbc	r27, r27
 2d2:	80 2d       	mov	r24, r0
 2d4:	bf 01       	movw	r22, r30
 2d6:	ff 27       	eor	r31, r31
 2d8:	93 58       	subi	r25, 0x83	; 131
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	3a f0       	brmi	.+14     	; 0x2ec <__divsf3_pse+0x70>
 2de:	9e 3f       	cpi	r25, 0xFE	; 254
 2e0:	51 05       	cpc	r21, r1
 2e2:	78 f0       	brcs	.+30     	; 0x302 <__divsf3_pse+0x86>
 2e4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_inf>
 2e8:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_szero>
 2ec:	5f 3f       	cpi	r21, 0xFF	; 255
 2ee:	e4 f3       	brlt	.-8      	; 0x2e8 <__divsf3_pse+0x6c>
 2f0:	98 3e       	cpi	r25, 0xE8	; 232
 2f2:	d4 f3       	brlt	.-12     	; 0x2e8 <__divsf3_pse+0x6c>
 2f4:	86 95       	lsr	r24
 2f6:	77 95       	ror	r23
 2f8:	67 95       	ror	r22
 2fa:	b7 95       	ror	r27
 2fc:	f7 95       	ror	r31
 2fe:	9f 5f       	subi	r25, 0xFF	; 255
 300:	c9 f7       	brne	.-14     	; 0x2f4 <__divsf3_pse+0x78>
 302:	88 0f       	add	r24, r24
 304:	91 1d       	adc	r25, r1
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	97 f9       	bld	r25, 7
 30c:	08 95       	ret
 30e:	e1 e0       	ldi	r30, 0x01	; 1
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	88 1f       	adc	r24, r24
 316:	bb 1f       	adc	r27, r27
 318:	62 17       	cp	r22, r18
 31a:	73 07       	cpc	r23, r19
 31c:	84 07       	cpc	r24, r20
 31e:	ba 07       	cpc	r27, r26
 320:	20 f0       	brcs	.+8      	; 0x32a <__divsf3_pse+0xae>
 322:	62 1b       	sub	r22, r18
 324:	73 0b       	sbc	r23, r19
 326:	84 0b       	sbc	r24, r20
 328:	ba 0b       	sbc	r27, r26
 32a:	ee 1f       	adc	r30, r30
 32c:	88 f7       	brcc	.-30     	; 0x310 <__divsf3_pse+0x94>
 32e:	e0 95       	com	r30
 330:	08 95       	ret

00000332 <__fixunssfsi>:
 332:	0e 94 35 02 	call	0x46a	; 0x46a <__fp_splitA>
 336:	88 f0       	brcs	.+34     	; 0x35a <__fixunssfsi+0x28>
 338:	9f 57       	subi	r25, 0x7F	; 127
 33a:	98 f0       	brcs	.+38     	; 0x362 <__fixunssfsi+0x30>
 33c:	b9 2f       	mov	r27, r25
 33e:	99 27       	eor	r25, r25
 340:	b7 51       	subi	r27, 0x17	; 23
 342:	b0 f0       	brcs	.+44     	; 0x370 <__fixunssfsi+0x3e>
 344:	e1 f0       	breq	.+56     	; 0x37e <__fixunssfsi+0x4c>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	1a f0       	brmi	.+6      	; 0x356 <__fixunssfsi+0x24>
 350:	ba 95       	dec	r27
 352:	c9 f7       	brne	.-14     	; 0x346 <__fixunssfsi+0x14>
 354:	14 c0       	rjmp	.+40     	; 0x37e <__fixunssfsi+0x4c>
 356:	b1 30       	cpi	r27, 0x01	; 1
 358:	91 f0       	breq	.+36     	; 0x37e <__fixunssfsi+0x4c>
 35a:	0e 94 4f 02 	call	0x49e	; 0x49e <__fp_zero>
 35e:	b1 e0       	ldi	r27, 0x01	; 1
 360:	08 95       	ret
 362:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__fp_zero>
 366:	67 2f       	mov	r22, r23
 368:	78 2f       	mov	r23, r24
 36a:	88 27       	eor	r24, r24
 36c:	b8 5f       	subi	r27, 0xF8	; 248
 36e:	39 f0       	breq	.+14     	; 0x37e <__fixunssfsi+0x4c>
 370:	b9 3f       	cpi	r27, 0xF9	; 249
 372:	cc f3       	brlt	.-14     	; 0x366 <__fixunssfsi+0x34>
 374:	86 95       	lsr	r24
 376:	77 95       	ror	r23
 378:	67 95       	ror	r22
 37a:	b3 95       	inc	r27
 37c:	d9 f7       	brne	.-10     	; 0x374 <__fixunssfsi+0x42>
 37e:	3e f4       	brtc	.+14     	; 0x38e <__fixunssfsi+0x5c>
 380:	90 95       	com	r25
 382:	80 95       	com	r24
 384:	70 95       	com	r23
 386:	61 95       	neg	r22
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	8f 4f       	sbci	r24, 0xFF	; 255
 38c:	9f 4f       	sbci	r25, 0xFF	; 255
 38e:	08 95       	ret

00000390 <__floatunsisf>:
 390:	e8 94       	clt
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <__floatsisf+0x12>

00000394 <__floatsisf>:
 394:	97 fb       	bst	r25, 7
 396:	3e f4       	brtc	.+14     	; 0x3a6 <__floatsisf+0x12>
 398:	90 95       	com	r25
 39a:	80 95       	com	r24
 39c:	70 95       	com	r23
 39e:	61 95       	neg	r22
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255
 3a2:	8f 4f       	sbci	r24, 0xFF	; 255
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	99 23       	and	r25, r25
 3a8:	a9 f0       	breq	.+42     	; 0x3d4 <__floatsisf+0x40>
 3aa:	f9 2f       	mov	r31, r25
 3ac:	96 e9       	ldi	r25, 0x96	; 150
 3ae:	bb 27       	eor	r27, r27
 3b0:	93 95       	inc	r25
 3b2:	f6 95       	lsr	r31
 3b4:	87 95       	ror	r24
 3b6:	77 95       	ror	r23
 3b8:	67 95       	ror	r22
 3ba:	b7 95       	ror	r27
 3bc:	f1 11       	cpse	r31, r1
 3be:	f8 cf       	rjmp	.-16     	; 0x3b0 <__floatsisf+0x1c>
 3c0:	fa f4       	brpl	.+62     	; 0x400 <__LOCK_REGION_LENGTH__>
 3c2:	bb 0f       	add	r27, r27
 3c4:	11 f4       	brne	.+4      	; 0x3ca <__floatsisf+0x36>
 3c6:	60 ff       	sbrs	r22, 0
 3c8:	1b c0       	rjmp	.+54     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ca:	6f 5f       	subi	r22, 0xFF	; 255
 3cc:	7f 4f       	sbci	r23, 0xFF	; 255
 3ce:	8f 4f       	sbci	r24, 0xFF	; 255
 3d0:	9f 4f       	sbci	r25, 0xFF	; 255
 3d2:	16 c0       	rjmp	.+44     	; 0x400 <__LOCK_REGION_LENGTH__>
 3d4:	88 23       	and	r24, r24
 3d6:	11 f0       	breq	.+4      	; 0x3dc <__floatsisf+0x48>
 3d8:	96 e9       	ldi	r25, 0x96	; 150
 3da:	11 c0       	rjmp	.+34     	; 0x3fe <__floatsisf+0x6a>
 3dc:	77 23       	and	r23, r23
 3de:	21 f0       	breq	.+8      	; 0x3e8 <__floatsisf+0x54>
 3e0:	9e e8       	ldi	r25, 0x8E	; 142
 3e2:	87 2f       	mov	r24, r23
 3e4:	76 2f       	mov	r23, r22
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <__floatsisf+0x5e>
 3e8:	66 23       	and	r22, r22
 3ea:	71 f0       	breq	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ec:	96 e8       	ldi	r25, 0x86	; 134
 3ee:	86 2f       	mov	r24, r22
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	2a f0       	brmi	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f6:	9a 95       	dec	r25
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	da f7       	brpl	.-10     	; 0x3f6 <__floatsisf+0x62>
 400:	88 0f       	add	r24, r24
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	97 f9       	bld	r25, 7
 408:	08 95       	ret

0000040a <__fp_inf>:
 40a:	97 f9       	bld	r25, 7
 40c:	9f 67       	ori	r25, 0x7F	; 127
 40e:	80 e8       	ldi	r24, 0x80	; 128
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	08 95       	ret

00000416 <__fp_nan>:
 416:	9f ef       	ldi	r25, 0xFF	; 255
 418:	80 ec       	ldi	r24, 0xC0	; 192
 41a:	08 95       	ret

0000041c <__fp_pscA>:
 41c:	00 24       	eor	r0, r0
 41e:	0a 94       	dec	r0
 420:	16 16       	cp	r1, r22
 422:	17 06       	cpc	r1, r23
 424:	18 06       	cpc	r1, r24
 426:	09 06       	cpc	r0, r25
 428:	08 95       	ret

0000042a <__fp_pscB>:
 42a:	00 24       	eor	r0, r0
 42c:	0a 94       	dec	r0
 42e:	12 16       	cp	r1, r18
 430:	13 06       	cpc	r1, r19
 432:	14 06       	cpc	r1, r20
 434:	05 06       	cpc	r0, r21
 436:	08 95       	ret

00000438 <__fp_round>:
 438:	09 2e       	mov	r0, r25
 43a:	03 94       	inc	r0
 43c:	00 0c       	add	r0, r0
 43e:	11 f4       	brne	.+4      	; 0x444 <__fp_round+0xc>
 440:	88 23       	and	r24, r24
 442:	52 f0       	brmi	.+20     	; 0x458 <__fp_round+0x20>
 444:	bb 0f       	add	r27, r27
 446:	40 f4       	brcc	.+16     	; 0x458 <__fp_round+0x20>
 448:	bf 2b       	or	r27, r31
 44a:	11 f4       	brne	.+4      	; 0x450 <__fp_round+0x18>
 44c:	60 ff       	sbrs	r22, 0
 44e:	04 c0       	rjmp	.+8      	; 0x458 <__fp_round+0x20>
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	8f 4f       	sbci	r24, 0xFF	; 255
 456:	9f 4f       	sbci	r25, 0xFF	; 255
 458:	08 95       	ret

0000045a <__fp_split3>:
 45a:	57 fd       	sbrc	r21, 7
 45c:	90 58       	subi	r25, 0x80	; 128
 45e:	44 0f       	add	r20, r20
 460:	55 1f       	adc	r21, r21
 462:	59 f0       	breq	.+22     	; 0x47a <__fp_splitA+0x10>
 464:	5f 3f       	cpi	r21, 0xFF	; 255
 466:	71 f0       	breq	.+28     	; 0x484 <__fp_splitA+0x1a>
 468:	47 95       	ror	r20

0000046a <__fp_splitA>:
 46a:	88 0f       	add	r24, r24
 46c:	97 fb       	bst	r25, 7
 46e:	99 1f       	adc	r25, r25
 470:	61 f0       	breq	.+24     	; 0x48a <__fp_splitA+0x20>
 472:	9f 3f       	cpi	r25, 0xFF	; 255
 474:	79 f0       	breq	.+30     	; 0x494 <__fp_splitA+0x2a>
 476:	87 95       	ror	r24
 478:	08 95       	ret
 47a:	12 16       	cp	r1, r18
 47c:	13 06       	cpc	r1, r19
 47e:	14 06       	cpc	r1, r20
 480:	55 1f       	adc	r21, r21
 482:	f2 cf       	rjmp	.-28     	; 0x468 <__fp_split3+0xe>
 484:	46 95       	lsr	r20
 486:	f1 df       	rcall	.-30     	; 0x46a <__fp_splitA>
 488:	08 c0       	rjmp	.+16     	; 0x49a <__fp_splitA+0x30>
 48a:	16 16       	cp	r1, r22
 48c:	17 06       	cpc	r1, r23
 48e:	18 06       	cpc	r1, r24
 490:	99 1f       	adc	r25, r25
 492:	f1 cf       	rjmp	.-30     	; 0x476 <__fp_splitA+0xc>
 494:	86 95       	lsr	r24
 496:	71 05       	cpc	r23, r1
 498:	61 05       	cpc	r22, r1
 49a:	08 94       	sec
 49c:	08 95       	ret

0000049e <__fp_zero>:
 49e:	e8 94       	clt

000004a0 <__fp_szero>:
 4a0:	bb 27       	eor	r27, r27
 4a2:	66 27       	eor	r22, r22
 4a4:	77 27       	eor	r23, r23
 4a6:	cb 01       	movw	r24, r22
 4a8:	97 f9       	bld	r25, 7
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
