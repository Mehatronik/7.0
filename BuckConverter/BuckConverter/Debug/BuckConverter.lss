
BuckConverter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000d42  00000dd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  00800116  00800116  00000dec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e43  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f6  00000000  00000000  00001d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b3  00000000  00000000  0000278d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00003040  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000603  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000449  00000000  00000000  000038d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 00 04 	jmp	0x800	; 0x800 <__vector_20>
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>



int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	6e 97       	sbiw	r28, 0x1e	; 30
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    ADC_init();
  ba:	0e 94 91 00 	call	0x122	; 0x122 <ADC_init>
	uart_init();
  be:	0e 94 37 04 	call	0x86e	; 0x86e <uart_init>
	pwm_init();
  c2:	0e 94 33 02 	call	0x466	; 0x466 <pwm_init>
	tajmer0_init();
  c6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <tajmer0_init>
	
	
	sei();
  ca:	78 94       	sei
	char bafer[30];
	
    while (1) 
    {
		
		if(flag_prekid_10ms == 1)		//slanje putem UART Tx na svakih 20ms. Podesava se u tajmer.c fajlu
  cc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <flag_prekid_10ms>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x26>
		{
			flag_prekid_10ms = 0;
  d4:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <flag_prekid_10ms>
		
		send_str("  ");
		itoa( mereni_napon*100 , bafer, 10);
		send_str(bafer);
		*/
		send_str("  ");
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 47 04 	call	0x88e	; 0x88e <send_str>
		itoa( merena_struja*100 , bafer, 10);
  e0:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <merena_struja>
  e4:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <merena_struja+0x1>
  e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <merena_struja+0x2>
  ec:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <merena_struja+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	48 ec       	ldi	r20, 0xC8	; 200
  f6:	52 e4       	ldi	r21, 0x42	; 66
  f8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
  fc:	0e 94 39 05 	call	0xa72	; 0xa72 <__fixsfsi>
 100:	dc 01       	movw	r26, r24
 102:	cb 01       	movw	r24, r22
 104:	4a e0       	ldi	r20, 0x0A	; 10
 106:	be 01       	movw	r22, r28
 108:	6f 5f       	subi	r22, 0xFF	; 255
 10a:	7f 4f       	sbci	r23, 0xFF	; 255
 10c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__itoa_ncheck>
		send_str(bafer);
 110:	ce 01       	movw	r24, r28
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	0e 94 47 04 	call	0x88e	; 0x88e <send_str>
		
		
		send_str("\n");
 118:	83 e1       	ldi	r24, 0x13	; 19
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 47 04 	call	0x88e	; 0x88e <send_str>
 120:	d5 cf       	rjmp	.-86     	; 0xcc <main+0x26>

00000122 <ADC_init>:
volatile int adc_low=0, adc_high=0;
volatile int ad_kanal = 0;

void ADC_init()
{
	DDRD |= 1<<DDB7;
 122:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;					//power reduction off
 124:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = (1<<REFS0);				//5V referentni napon, ulazni pin A0
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101111;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 128 prescaler
 12e:	8f ee       	ldi	r24, 0xEF	; 239
 130:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
 134:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
 138:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 13c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 140:	08 95       	ret

00000142 <__vector_21>:
	
}

ISR(ADC_vect)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 92       	push	r8
 14e:	9f 92       	push	r9
 150:	af 92       	push	r10
 152:	bf 92       	push	r11
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
	ISR okine kada je gotova konverzija
	*/
	
	
	//ADCL mora biti prvi procitan
	adc_low = (int)ADCL;    //koriste se dva 8-bit registra jer je rezultat AD konverzije 10-bitan
 178:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <adc_low+0x1>
 182:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <adc_low>
	adc_high = (int)ADCH;
 186:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <adc_high+0x1>
 190:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <adc_high>
	
		/**stapam rezultate iz dva registra u jednu promenljivu na ovaj nacin**/
		/**rezultat ad konverzije je 10-bit-an, tj. od 0 do 1023**/
		if(adc_high==0)
 194:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 198:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <adc_high+0x1>
 19c:	89 2b       	or	r24, r25
 19e:	79 f4       	brne	.+30     	; 0x1be <__vector_21+0x7c>
			adc_res[ad_kanal] = adc_low;
 1a0:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 1a4:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 1a8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_low>
 1ac:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_low+0x1>
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e8 5d       	subi	r30, 0xD8	; 216
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	91 83       	std	Z+1, r25	; 0x01
 1ba:	80 83       	st	Z, r24
 1bc:	41 c0       	rjmp	.+130    	; 0x240 <__vector_21+0xfe>
		else if(adc_high==1)
 1be:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 1c2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <adc_high+0x1>
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	81 f4       	brne	.+32     	; 0x1ea <__vector_21+0xa8>
			adc_res[ad_kanal] = 256 + adc_low;
 1ca:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 1ce:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 1d2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_low>
 1d6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_low+0x1>
 1da:	93 95       	inc	r25
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	e8 5d       	subi	r30, 0xD8	; 216
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	80 83       	st	Z, r24
 1e8:	2b c0       	rjmp	.+86     	; 0x240 <__vector_21+0xfe>
		else if(adc_high==2)
 1ea:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 1ee:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <adc_high+0x1>
 1f2:	02 97       	sbiw	r24, 0x02	; 2
 1f4:	81 f4       	brne	.+32     	; 0x216 <__vector_21+0xd4>
			adc_res[ad_kanal] = 512 + adc_low;	//256*2
 1f6:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 1fa:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 1fe:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_low>
 202:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_low+0x1>
 206:	9e 5f       	subi	r25, 0xFE	; 254
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	e8 5d       	subi	r30, 0xD8	; 216
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	91 83       	std	Z+1, r25	; 0x01
 212:	80 83       	st	Z, r24
 214:	15 c0       	rjmp	.+42     	; 0x240 <__vector_21+0xfe>
		else if(adc_high==3)
 216:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 21a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <adc_high+0x1>
 21e:	03 97       	sbiw	r24, 0x03	; 3
 220:	79 f4       	brne	.+30     	; 0x240 <__vector_21+0xfe>
			adc_res[ad_kanal] = 768 + adc_low;	//256*3
 222:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 226:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 22a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_low>
 22e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_low+0x1>
 232:	9d 5f       	subi	r25, 0xFD	; 253
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	e8 5d       	subi	r30, 0xD8	; 216
 23a:	fe 4f       	sbci	r31, 0xFE	; 254
 23c:	91 83       	std	Z+1, r25	; 0x01
 23e:	80 83       	st	Z, r24
	
	
	ref_napon_sa_pot = (adc_res[0] / 51.15); //  1023 = 20V  zadati napon sa potenciometra
 240:	c8 e2       	ldi	r28, 0x28	; 40
 242:	d1 e0       	ldi	r29, 0x01	; 1
 244:	68 81       	ld	r22, Y
 246:	79 81       	ldd	r23, Y+1	; 0x01
 248:	07 2e       	mov	r0, r23
 24a:	00 0c       	add	r0, r0
 24c:	88 0b       	sbc	r24, r24
 24e:	99 0b       	sbc	r25, r25
 250:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
 254:	2a e9       	ldi	r18, 0x9A	; 154
 256:	39 e9       	ldi	r19, 0x99	; 153
 258:	4c e4       	ldi	r20, 0x4C	; 76
 25a:	52 e4       	ldi	r21, 0x42	; 66
 25c:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
 260:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <ref_napon_sa_pot>
 264:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <ref_napon_sa_pot+0x1>
 268:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ref_napon_sa_pot+0x2>
 26c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ref_napon_sa_pot+0x3>
	
	OCR1A = ref_napon_sa_pot * 10.0;  //top = 200
 270:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <ref_napon_sa_pot>
 274:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <ref_napon_sa_pot+0x1>
 278:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ref_napon_sa_pot+0x2>
 27c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ref_napon_sa_pot+0x3>
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e2       	ldi	r20, 0x20	; 32
 286:	51 e4       	ldi	r21, 0x41	; 65
 288:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
 28c:	0e 94 40 05 	call	0xa80	; 0xa80 <__fixunssfsi>
 290:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 294:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	
	merena_struja = (adc_res[2] / 930.0) * 4.5454;         // 1/0.22=4.545				//1023 = 5A (1.1V ref, preko 0.22Ohm otpornika)
 298:	6c 81       	ldd	r22, Y+4	; 0x04
 29a:	7d 81       	ldd	r23, Y+5	; 0x05
 29c:	07 2e       	mov	r0, r23
 29e:	00 0c       	add	r0, r0
 2a0:	88 0b       	sbc	r24, r24
 2a2:	99 0b       	sbc	r25, r25
 2a4:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e8       	ldi	r19, 0x80	; 128
 2ac:	48 e6       	ldi	r20, 0x68	; 104
 2ae:	54 e4       	ldi	r21, 0x44	; 68
 2b0:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
 2b4:	2b ee       	ldi	r18, 0xEB	; 235
 2b6:	33 e7       	ldi	r19, 0x73	; 115
 2b8:	41 e9       	ldi	r20, 0x91	; 145
 2ba:	50 e4       	ldi	r21, 0x40	; 64
 2bc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
 2c0:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <merena_struja>
 2c4:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <merena_struja+0x1>
 2c8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <merena_struja+0x2>
 2cc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <merena_struja+0x3>
	mereni_napon = (adc_res[1] / 51.15) - (merena_struja / 4.5454);				//1023 = 20V  (1.1V referenca) preko razdelnika
 2d0:	6a 81       	ldd	r22, Y+2	; 0x02
 2d2:	7b 81       	ldd	r23, Y+3	; 0x03
 2d4:	80 90 1c 01 	lds	r8, 0x011C	; 0x80011c <merena_struja>
 2d8:	90 90 1d 01 	lds	r9, 0x011D	; 0x80011d <merena_struja+0x1>
 2dc:	a0 90 1e 01 	lds	r10, 0x011E	; 0x80011e <merena_struja+0x2>
 2e0:	b0 90 1f 01 	lds	r11, 0x011F	; 0x80011f <merena_struja+0x3>
 2e4:	07 2e       	mov	r0, r23
 2e6:	00 0c       	add	r0, r0
 2e8:	88 0b       	sbc	r24, r24
 2ea:	99 0b       	sbc	r25, r25
 2ec:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
 2f0:	2a e9       	ldi	r18, 0x9A	; 154
 2f2:	39 e9       	ldi	r19, 0x99	; 153
 2f4:	4c e4       	ldi	r20, 0x4C	; 76
 2f6:	52 e4       	ldi	r21, 0x42	; 66
 2f8:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
 2fc:	6b 01       	movw	r12, r22
 2fe:	7c 01       	movw	r14, r24
 300:	2b ee       	ldi	r18, 0xEB	; 235
 302:	33 e7       	ldi	r19, 0x73	; 115
 304:	41 e9       	ldi	r20, 0x91	; 145
 306:	50 e4       	ldi	r21, 0x40	; 64
 308:	c5 01       	movw	r24, r10
 30a:	b4 01       	movw	r22, r8
 30c:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
 310:	9b 01       	movw	r18, r22
 312:	ac 01       	movw	r20, r24
 314:	c7 01       	movw	r24, r14
 316:	b6 01       	movw	r22, r12
 318:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__subsf3>
 31c:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <mereni_napon>
 320:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <mereni_napon+0x1>
 324:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <mereni_napon+0x2>
 328:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <mereni_napon+0x3>
	
	ADCSRA &= ~(1<<ADEN);	//iskljucim adc da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 32c:	ea e7       	ldi	r30, 0x7A	; 122
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	8f 77       	andi	r24, 0x7F	; 127
 334:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 336:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 33a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 344:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	if(ad_kanal > 3)	//kreni opet od nule kad dodjes do poslednjeg
 348:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 34c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 350:	04 97       	sbiw	r24, 0x04	; 4
 352:	24 f0       	brlt	.+8      	; 0x35c <__vector_21+0x21a>
		ad_kanal = 0;
 354:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 358:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	
	switch(ad_kanal)
 35c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 360:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	91 05       	cpc	r25, r1
 368:	71 f0       	breq	.+28     	; 0x386 <__vector_21+0x244>
 36a:	1c f4       	brge	.+6      	; 0x372 <__vector_21+0x230>
 36c:	89 2b       	or	r24, r25
 36e:	39 f0       	breq	.+14     	; 0x37e <__vector_21+0x23c>
 370:	15 c0       	rjmp	.+42     	; 0x39c <__vector_21+0x25a>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	91 05       	cpc	r25, r1
 376:	59 f0       	breq	.+22     	; 0x38e <__vector_21+0x24c>
 378:	03 97       	sbiw	r24, 0x03	; 3
 37a:	69 f0       	breq	.+26     	; 0x396 <__vector_21+0x254>
 37c:	0f c0       	rjmp	.+30     	; 0x39c <__vector_21+0x25a>
	{
		case 0:
				ADMUX = 0b11000000;		//ref internal 1.1V, kanal A0
 37e:	80 ec       	ldi	r24, 0xC0	; 192
 380:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		break;
 384:	0b c0       	rjmp	.+22     	; 0x39c <__vector_21+0x25a>
		
		case 1:
				ADMUX = 0b11000001;		//ref internal 1.1V, kanal A1
 386:	81 ec       	ldi	r24, 0xC1	; 193
 388:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		break;
 38c:	07 c0       	rjmp	.+14     	; 0x39c <__vector_21+0x25a>
		
		case 2:
				ADMUX = 0b11000010;		//ref internal 1.1V, kanal A2
 38e:	82 ec       	ldi	r24, 0xC2	; 194
 390:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		break;
 394:	03 c0       	rjmp	.+6      	; 0x39c <__vector_21+0x25a>
		
		case 3:
				ADMUX = 0b11000011;		//ref internal 1.1V, kanal A3
 396:	83 ec       	ldi	r24, 0xC3	; 195
 398:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
 39c:	ea e7       	ldi	r30, 0x7A	; 122
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	80 6c       	ori	r24, 0xC0	; 192
 3a4:	80 83       	st	Z, r24
	
	PIND |= 1<<7;
 3a6:	4f 9a       	sbi	0x09, 7	; 9

 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	df 90       	pop	r13
 3ca:	cf 90       	pop	r12
 3cc:	bf 90       	pop	r11
 3ce:	af 90       	pop	r10
 3d0:	9f 90       	pop	r9
 3d2:	8f 90       	pop	r8
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <__vector_1>:
	
	
}

ISR(INT0_vect)
{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
	
		//interapt opali na rastucu ivicu INT0; ovo sam uradio zbog velike rezolucije enkodera -1024 * 57.5 na izlazu, tj na tocku zbog 2 reduktora
	
	brojac_ext_interaptova++;
 3ee:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <brojac_ext_interaptova>
 3f2:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <brojac_ext_interaptova+0x1>
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <brojac_ext_interaptova+0x1>
 3fc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <brojac_ext_interaptova>
	

	
		if ( PIND & (1<<PORTD3) )	//smer 1; proverava se logicki nivo drugog kanala
 400:	4b 9b       	sbis	0x09, 3	; 9
 402:	0d c0       	rjmp	.+26     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{
			smer_obrtanja = 1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <smer_obrtanja>
			impulsi++;
 40a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <impulsi>
 40e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <impulsi+0x1>
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <impulsi+0x1>
 418:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <impulsi>
 41c:	0c c0       	rjmp	.+24     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		} 
		else								//smer 2
		{
			smer_obrtanja = 2;
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <smer_obrtanja>
			impulsi--;	
 424:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <impulsi>
 428:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <impulsi+0x1>
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <impulsi+0x1>
 432:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <impulsi>
	
	
	
	
	
	if(impulsi > 58879)		//za apsolutno merenje ugla
 436:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <impulsi>
 43a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <impulsi+0x1>
 43e:	81 15       	cp	r24, r1
 440:	96 4e       	sbci	r25, 0xE6	; 230
 442:	28 f0       	brcs	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		impulsi = 0;
 444:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <impulsi+0x1>
 448:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <impulsi>
 44c:	04 c0       	rjmp	.+8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	else if(impulsi < 0 )
 44e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <impulsi>
 452:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <impulsi+0x1>
	//problem se javlja kada ove impulse zelim da iskoristim za merenje brzine, a pri prelazu preko granicne vrednosti sa 58879 na 0 i obrnuto
	//zato sam ubacio jos jedan brojac koji broji prekide "brojac_ext_interaptova" relativno, a ne apsolutno
		
	//ugao = impulsi / 57.5;	//skaliranje, 58879 impulsa po krugu odgovara 360 stepeni tocka; !!!atmega se ovde zaglavi pri umerenoj frekvenciji prekida!!!
	//ugao = 100;
}
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	2f 91       	pop	r18
 45c:	0f 90       	pop	r0
 45e:	0f be       	out	0x3f, r0	; 63
 460:	0f 90       	pop	r0
 462:	1f 90       	pop	r1
 464:	18 95       	reti

00000466 <pwm_init>:
#include "common.h"

void pwm_init()
{
	
	DDRB |= 1<<DDB0;
 466:	20 9a       	sbi	0x04, 0	; 4
	
	DDRB |= (1 << DDB1)|(1 << DDB2); //izlazni pinovi za PWM - D9 i D10 na Arduino Uno ploci
 468:	84 b1       	in	r24, 0x04	; 4
 46a:	86 60       	ori	r24, 0x06	; 6
 46c:	84 b9       	out	0x04, r24	; 4
	

	ICR1 = 200;			//frekvencija ~ 20 kHz
 46e:	88 ec       	ldi	r24, 0xC8	; 200
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 476:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0;		    //faktor ispune 0% 
 47a:	e8 e8       	ldi	r30, 0x88	; 136
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	11 82       	std	Z+1, r1	; 0x01
 480:	10 82       	st	Z, r1
	OCR1B = OCR1A;
 482:	80 81       	ld	r24, Z
 484:	91 81       	ldd	r25, Z+1	; 0x01
 486:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 48a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	

	TCCR1A = 0b10110000;		//inverting rezim tj. pwm signali su komplementarni
 48e:	80 eb       	ldi	r24, 0xB0	; 176
 490:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	
	TCCR1B |= (1 << WGM13);		// set Fast PWM mode using ICR1 as TOP
 494:	e1 e8       	ldi	r30, 0x81	; 129
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	80 61       	ori	r24, 0x10	; 16
 49c:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << CS10);		// START the timer with no prescaler
 49e:	80 81       	ld	r24, Z
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 83       	st	Z, r24
	
	TIMSK1 = 0b10;     //enable comp a interupts
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 4aa:	08 95       	ret

000004ac <__vector_11>:
	
	//upis i promena faktora ispune se vrsi u ad konverziji
}

ISR(TIMER1_COMPA_vect)
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
	//ADCSRA |= 1<<ADSC; //start ad conversion
	
	PINB |= 0b1;
 4b6:	18 9a       	sbi	0x03, 0	; 3
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <tajmer0_init>:
const volatile double stepeniPOms_to_rpm = 16.67;		//faktor konverzije izmedju izmerenog broja stepeni u prozoru od 10ms u obrtaje po minutu
volatile double relativni_ugao = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 4c6:	93 e0       	ldi	r25, 0x03	; 3
 4c8:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 4ca:	99 ef       	ldi	r25, 0xF9	; 249
 4cc:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 4ce:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 4d2:	08 95       	ret

000004d4 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	8f 92       	push	r8
 4e0:	9f 92       	push	r9
 4e2:	af 92       	push	r10
 4e4:	bf 92       	push	r11
 4e6:	cf 92       	push	r12
 4e8:	df 92       	push	r13
 4ea:	ef 92       	push	r14
 4ec:	ff 92       	push	r15
 4ee:	2f 93       	push	r18
 4f0:	3f 93       	push	r19
 4f2:	4f 93       	push	r20
 4f4:	5f 93       	push	r21
 4f6:	6f 93       	push	r22
 4f8:	7f 93       	push	r23
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
 4fe:	af 93       	push	r26
 500:	bf 93       	push	r27
 502:	ef 93       	push	r30
 504:	ff 93       	push	r31
	flag_tajmer0_prekid = 1;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
 50c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <brojac_prekida_tajmera0>
 510:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <brojac_prekida_tajmera0+0x1>
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <brojac_prekida_tajmera0+0x1>
 51a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)
 51e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <brojac_prekida_tajmera0>
 522:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <brojac_prekida_tajmera0+0x1>
 526:	0a 97       	sbiw	r24, 0x0a	; 10
 528:	09 f0       	breq	.+2      	; 0x52c <__vector_14+0x58>
 52a:	51 c1       	rjmp	.+674    	; 0x7ce <__vector_14+0x2fa>
	{
		brojac_prekida_tajmera0 = 0;
 52c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <brojac_prekida_tajmera0+0x1>
 530:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <flag_prekid_10ms>
		//***********************merenje brzine treba obaviti unutar ISR jer je vremenski kriticno*****************************************
	
		relativni_ugao = brojac_ext_interaptova / 57.5;	//skaliranje, 58800 impulsa po krugu odgovara 360 stepeni
 53a:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <brojac_ext_interaptova>
 53e:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <brojac_ext_interaptova+0x1>
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 6f 05 	call	0xade	; 0xade <__floatunsisf>
 54a:	20 e0       	ldi	r18, 0x00	; 0
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	46 e6       	ldi	r20, 0x66	; 102
 550:	52 e4       	ldi	r21, 0x42	; 66
 552:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
 556:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <relativni_ugao>
 55a:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <relativni_ugao+0x1>
 55e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <relativni_ugao+0x2>
 562:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <relativni_ugao+0x3>
		
		if(smer_obrtanja == 2)		//ODREDJUJEM NA KOJU STRANU SE VRTI
 566:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <smer_obrtanja>
 56a:	82 30       	cpi	r24, 0x02	; 2
 56c:	d9 f4       	brne	.+54     	; 0x5a4 <__vector_14+0xd0>
		{
			ugaona_brzina = stepeniPOms_to_rpm * relativni_ugao;				//posto se zna da merenje relativnog ugla traje 1ms, to je zapravo ugaona
 56e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 572:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 576:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 57a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 57e:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <relativni_ugao>
 582:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <relativni_ugao+0x1>
 586:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <relativni_ugao+0x2>
 58a:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <relativni_ugao+0x3>
 58e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
 592:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <ugaona_brzina>
 596:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <ugaona_brzina+0x1>
 59a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <ugaona_brzina+0x2>
 59e:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <ugaona_brzina+0x3>
 5a2:	1d c0       	rjmp	.+58     	; 0x5de <__vector_14+0x10a>
															//brzina u stepen/1ms, a 166.67 je faktor konverzije izmedju stepeni/1ms i obrtaja/min
		}
		else
		{
			ugaona_brzina = -(stepeniPOms_to_rpm * relativni_ugao);	//ako je na drugu brzina je negativna
 5a4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 5a8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 5ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 5b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 5b4:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <relativni_ugao>
 5b8:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <relativni_ugao+0x1>
 5bc:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <relativni_ugao+0x2>
 5c0:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <relativni_ugao+0x3>
 5c4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
 5c8:	dc 01       	movw	r26, r24
 5ca:	cb 01       	movw	r24, r22
 5cc:	b0 58       	subi	r27, 0x80	; 128
 5ce:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <ugaona_brzina>
 5d2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <ugaona_brzina+0x1>
 5d6:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <ugaona_brzina+0x2>
 5da:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <ugaona_brzina+0x3>
		}
															
	
		PINB |= 1<<PINB5;					//toogle pin 5 - DIG13, test da vidim da li je korektna frekvencija
 5de:	1d 9a       	sbi	0x03, 5	; 3
		
		
		greska = ref_napon_sa_pot - ugaona_brzina;
 5e0:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <ref_napon_sa_pot>
 5e4:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <ref_napon_sa_pot+0x1>
 5e8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ref_napon_sa_pot+0x2>
 5ec:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ref_napon_sa_pot+0x3>
 5f0:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <ugaona_brzina>
 5f4:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <ugaona_brzina+0x1>
 5f8:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <ugaona_brzina+0x2>
 5fc:	50 91 44 01 	lds	r21, 0x0144	; 0x800144 <ugaona_brzina+0x3>
 600:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__subsf3>
 604:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <greska>
 608:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <greska+0x1>
 60c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <greska+0x2>
 610:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <greska+0x3>
		
		Upravljanje = 250 + Kp * greska;		//Proporcionalni regulator; ofset 250 zbog h-mosta. Top je 500
 614:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Kp>
 618:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Kp+0x1>
 61c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Kp+0x2>
 620:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Kp+0x3>
 624:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <greska>
 628:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <greska+0x1>
 62c:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <greska+0x2>
 630:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <greska+0x3>
 634:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	4a e7       	ldi	r20, 0x7A	; 122
 63e:	53 e4       	ldi	r21, 0x43	; 67
 640:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__addsf3>
 644:	0e 94 39 05 	call	0xa72	; 0xa72 <__fixsfsi>
 648:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Upravljanje>
 64c:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Upravljanje+0x1>
 650:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Upravljanje+0x2>
 654:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Upravljanje+0x3>
		
		suma_greske += greska;			//suma greske
 658:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <greska>
 65c:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <greska+0x1>
 660:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <greska+0x2>
 664:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <greska+0x3>
 668:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <suma_greske>
 66c:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <suma_greske+0x1>
 670:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <suma_greske+0x2>
 674:	50 91 3c 01 	lds	r21, 0x013C	; 0x80013c <suma_greske+0x3>
 678:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__addsf3>
 67c:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <suma_greske>
 680:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <suma_greske+0x1>
 684:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <suma_greske+0x2>
 688:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <suma_greske+0x3>
		
		
		Upravljanje += Ki * suma_greske;			//Integralno dejstvo sabiram sa prethodnim upravljanjem
 68c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Ki>
 690:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Ki+0x1>
 694:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Ki+0x2>
 698:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Ki+0x3>
 69c:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <suma_greske>
 6a0:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <suma_greske+0x1>
 6a4:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <suma_greske+0x2>
 6a8:	50 91 3c 01 	lds	r21, 0x013C	; 0x80013c <suma_greske+0x3>
 6ac:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <Upravljanje>
 6b0:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <Upravljanje+0x1>
 6b4:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <Upravljanje+0x2>
 6b8:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <Upravljanje+0x3>
 6bc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
 6c0:	6b 01       	movw	r12, r22
 6c2:	7c 01       	movw	r14, r24
 6c4:	c5 01       	movw	r24, r10
 6c6:	b4 01       	movw	r22, r8
 6c8:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
 6cc:	9b 01       	movw	r18, r22
 6ce:	ac 01       	movw	r20, r24
 6d0:	c7 01       	movw	r24, r14
 6d2:	b6 01       	movw	r22, r12
 6d4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__addsf3>
 6d8:	0e 94 39 05 	call	0xa72	; 0xa72 <__fixsfsi>
 6dc:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Upravljanje>
 6e0:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Upravljanje+0x1>
 6e4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Upravljanje+0x2>
 6e8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Upravljanje+0x3>
		
		if(Upravljanje >= 500 )		//ogranicenje jer 500 u OCR1A registru daje maksimalan faktor ispune
 6ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Upravljanje>
 6f0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Upravljanje+0x1>
 6f4:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <Upravljanje+0x2>
 6f8:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <Upravljanje+0x3>
 6fc:	84 3f       	cpi	r24, 0xF4	; 244
 6fe:	91 40       	sbci	r25, 0x01	; 1
 700:	a1 05       	cpc	r26, r1
 702:	b1 05       	cpc	r27, r1
 704:	3c f1       	brlt	.+78     	; 0x754 <__vector_14+0x280>
									
		{
			Upravljanje = 500;
 706:	84 ef       	ldi	r24, 0xF4	; 244
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	a0 e0       	ldi	r26, 0x00	; 0
 70c:	b0 e0       	ldi	r27, 0x00	; 0
 70e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Upravljanje>
 712:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <Upravljanje+0x1>
 716:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <Upravljanje+0x2>
 71a:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <Upravljanje+0x3>
			suma_greske -= greska;		//ako vec imas max upravljanje nemoj vise povecavati sumu greske; zastita od wind up-a
 71e:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <greska>
 722:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <greska+0x1>
 726:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <greska+0x2>
 72a:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <greska+0x3>
 72e:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <suma_greske>
 732:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <suma_greske+0x1>
 736:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <suma_greske+0x2>
 73a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <suma_greske+0x3>
 73e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__subsf3>
 742:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <suma_greske>
 746:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <suma_greske+0x1>
 74a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <suma_greske+0x2>
 74e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <suma_greske+0x3>
 752:	2f c0       	rjmp	.+94     	; 0x7b2 <__vector_14+0x2de>
		}
		else if(Upravljanje <= 0)	//ogranicenje, 0 daje max upravljanje u drugom smeru
 754:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Upravljanje>
 758:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Upravljanje+0x1>
 75c:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <Upravljanje+0x2>
 760:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <Upravljanje+0x3>
 764:	18 16       	cp	r1, r24
 766:	19 06       	cpc	r1, r25
 768:	1a 06       	cpc	r1, r26
 76a:	1b 06       	cpc	r1, r27
 76c:	14 f1       	brlt	.+68     	; 0x7b2 <__vector_14+0x2de>
		{
			Upravljanje = 0;
 76e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Upravljanje>
 772:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <Upravljanje+0x1>
 776:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Upravljanje+0x2>
 77a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Upravljanje+0x3>
			suma_greske -= greska;		//drugi smer, obratna situacija
 77e:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <greska>
 782:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <greska+0x1>
 786:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <greska+0x2>
 78a:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <greska+0x3>
 78e:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <suma_greske>
 792:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <suma_greske+0x1>
 796:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <suma_greske+0x2>
 79a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <suma_greske+0x3>
 79e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__subsf3>
 7a2:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <suma_greske>
 7a6:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <suma_greske+0x1>
 7aa:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <suma_greske+0x2>
 7ae:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <suma_greske+0x3>
		
		//OCR1A = Upravljanje;	//mogao sam i direktno da upisujem u OCR1A, ali sam dodao promenljivu 'Upravljanje' da bi bilo baferovano
		//OCR1B = OCR1A + 50;		//+50 za mrtvo vreme
		
		
		if(OCR1A==0)
 7b2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 7b6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 7ba:	89 2b       	or	r24, r25
 7bc:	21 f4       	brne	.+8      	; 0x7c6 <__vector_14+0x2f2>
			OCR1B = 0;
 7be:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 7c2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		

		brojac_ext_interaptova =0;			//nuliram da bi brojanje bilo relativno
 7c6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <brojac_ext_interaptova+0x1>
 7ca:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <brojac_ext_interaptova>
		
	
	}
	

 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	bf 91       	pop	r27
 7d4:	af 91       	pop	r26
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	7f 91       	pop	r23
 7dc:	6f 91       	pop	r22
 7de:	5f 91       	pop	r21
 7e0:	4f 91       	pop	r20
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	ff 90       	pop	r15
 7e8:	ef 90       	pop	r14
 7ea:	df 90       	pop	r13
 7ec:	cf 90       	pop	r12
 7ee:	bf 90       	pop	r11
 7f0:	af 90       	pop	r10
 7f2:	9f 90       	pop	r9
 7f4:	8f 90       	pop	r8
 7f6:	0f 90       	pop	r0
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	0f 90       	pop	r0
 7fc:	1f 90       	pop	r1
 7fe:	18 95       	reti

00000800 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 800:	1f 92       	push	r1
 802:	0f 92       	push	r0
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	0f 92       	push	r0
 808:	11 24       	eor	r1, r1
	poslato=0;
 80a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <poslato>
}
 80e:	0f 90       	pop	r0
 810:	0f be       	out	0x3f, r0	; 63
 812:	0f 90       	pop	r0
 814:	1f 90       	pop	r1
 816:	18 95       	reti

00000818 <__vector_18>:

ISR(USART_RX_vect)
{
 818:	1f 92       	push	r1
 81a:	0f 92       	push	r0
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	0f 92       	push	r0
 820:	11 24       	eor	r1, r1
 822:	8f 93       	push	r24
 824:	ef 93       	push	r30
 826:	ff 93       	push	r31
	input_char=UDR0;
 828:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 82c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 830:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <buff_size>
 834:	88 30       	cpi	r24, 0x08	; 8
 836:	98 f4       	brcc	.+38     	; 0x85e <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 838:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <buff_size>
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <input_char>
 842:	e4 5b       	subi	r30, 0xB4	; 180
 844:	fe 4f       	sbci	r31, 0xFE	; 254
 846:	80 83       	st	Z, r24
		buff_size++;
 848:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <buff_size>
 84c:	8f 5f       	subi	r24, 0xFF	; 255
 84e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <buff_size>
		input_buffer[buff_size]='\0';
 852:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <buff_size>
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	e4 5b       	subi	r30, 0xB4	; 180
 85a:	fe 4f       	sbci	r31, 0xFE	; 254
 85c:	10 82       	st	Z, r1
	}
}
 85e:	ff 91       	pop	r31
 860:	ef 91       	pop	r30
 862:	8f 91       	pop	r24
 864:	0f 90       	pop	r0
 866:	0f be       	out	0x3f, r0	; 63
 868:	0f 90       	pop	r0
 86a:	1f 90       	pop	r1
 86c:	18 95       	reti

0000086e <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 86e:	82 e0       	ldi	r24, 0x02	; 2
 870:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 874:	88 ed       	ldi	r24, 0xD8	; 216
 876:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 87a:	86 e0       	ldi	r24, 0x06	; 6
 87c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 880:	8f ec       	ldi	r24, 0xCF	; 207
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 888:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 88c:	08 95       	ret

0000088e <send_str>:
}

void send_str(unsigned char *str)
{
 88e:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 890:	90 81       	ld	r25, Z
 892:	99 23       	and	r25, r25
 894:	71 f0       	breq	.+28     	; 0x8b2 <send_str+0x24>
 896:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 898:	a6 ec       	ldi	r26, 0xC6	; 198
 89a:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 89c:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 89e:	9c 93       	st	X, r25
		poslato=1;
 8a0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <poslato>
		while (poslato);
 8a4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <poslato>
 8a8:	91 11       	cpse	r25, r1
 8aa:	fc cf       	rjmp	.-8      	; 0x8a4 <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 8ac:	91 91       	ld	r25, Z+
 8ae:	91 11       	cpse	r25, r1
 8b0:	f6 cf       	rjmp	.-20     	; 0x89e <send_str+0x10>
 8b2:	08 95       	ret

000008b4 <__subsf3>:
 8b4:	50 58       	subi	r21, 0x80	; 128

000008b6 <__addsf3>:
 8b6:	bb 27       	eor	r27, r27
 8b8:	aa 27       	eor	r26, r26
 8ba:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__addsf3x>
 8be:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
 8c2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
 8c6:	38 f0       	brcs	.+14     	; 0x8d6 <__addsf3+0x20>
 8c8:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
 8cc:	20 f0       	brcs	.+8      	; 0x8d6 <__addsf3+0x20>
 8ce:	39 f4       	brne	.+14     	; 0x8de <__addsf3+0x28>
 8d0:	9f 3f       	cpi	r25, 0xFF	; 255
 8d2:	19 f4       	brne	.+6      	; 0x8da <__addsf3+0x24>
 8d4:	26 f4       	brtc	.+8      	; 0x8de <__addsf3+0x28>
 8d6:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
 8da:	0e f4       	brtc	.+2      	; 0x8de <__addsf3+0x28>
 8dc:	e0 95       	com	r30
 8de:	e7 fb       	bst	r30, 7
 8e0:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>

000008e4 <__addsf3x>:
 8e4:	e9 2f       	mov	r30, r25
 8e6:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
 8ea:	58 f3       	brcs	.-42     	; 0x8c2 <__addsf3+0xc>
 8ec:	ba 17       	cp	r27, r26
 8ee:	62 07       	cpc	r22, r18
 8f0:	73 07       	cpc	r23, r19
 8f2:	84 07       	cpc	r24, r20
 8f4:	95 07       	cpc	r25, r21
 8f6:	20 f0       	brcs	.+8      	; 0x900 <__stack+0x1>
 8f8:	79 f4       	brne	.+30     	; 0x918 <__stack+0x19>
 8fa:	a6 f5       	brtc	.+104    	; 0x964 <__stack+0x65>
 8fc:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_zero>
 900:	0e f4       	brtc	.+2      	; 0x904 <__stack+0x5>
 902:	e0 95       	com	r30
 904:	0b 2e       	mov	r0, r27
 906:	ba 2f       	mov	r27, r26
 908:	a0 2d       	mov	r26, r0
 90a:	0b 01       	movw	r0, r22
 90c:	b9 01       	movw	r22, r18
 90e:	90 01       	movw	r18, r0
 910:	0c 01       	movw	r0, r24
 912:	ca 01       	movw	r24, r20
 914:	a0 01       	movw	r20, r0
 916:	11 24       	eor	r1, r1
 918:	ff 27       	eor	r31, r31
 91a:	59 1b       	sub	r21, r25
 91c:	99 f0       	breq	.+38     	; 0x944 <__stack+0x45>
 91e:	59 3f       	cpi	r21, 0xF9	; 249
 920:	50 f4       	brcc	.+20     	; 0x936 <__stack+0x37>
 922:	50 3e       	cpi	r21, 0xE0	; 224
 924:	68 f1       	brcs	.+90     	; 0x980 <__stack+0x81>
 926:	1a 16       	cp	r1, r26
 928:	f0 40       	sbci	r31, 0x00	; 0
 92a:	a2 2f       	mov	r26, r18
 92c:	23 2f       	mov	r18, r19
 92e:	34 2f       	mov	r19, r20
 930:	44 27       	eor	r20, r20
 932:	58 5f       	subi	r21, 0xF8	; 248
 934:	f3 cf       	rjmp	.-26     	; 0x91c <__stack+0x1d>
 936:	46 95       	lsr	r20
 938:	37 95       	ror	r19
 93a:	27 95       	ror	r18
 93c:	a7 95       	ror	r26
 93e:	f0 40       	sbci	r31, 0x00	; 0
 940:	53 95       	inc	r21
 942:	c9 f7       	brne	.-14     	; 0x936 <__stack+0x37>
 944:	7e f4       	brtc	.+30     	; 0x964 <__stack+0x65>
 946:	1f 16       	cp	r1, r31
 948:	ba 0b       	sbc	r27, r26
 94a:	62 0b       	sbc	r22, r18
 94c:	73 0b       	sbc	r23, r19
 94e:	84 0b       	sbc	r24, r20
 950:	ba f0       	brmi	.+46     	; 0x980 <__stack+0x81>
 952:	91 50       	subi	r25, 0x01	; 1
 954:	a1 f0       	breq	.+40     	; 0x97e <__stack+0x7f>
 956:	ff 0f       	add	r31, r31
 958:	bb 1f       	adc	r27, r27
 95a:	66 1f       	adc	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	c2 f7       	brpl	.-16     	; 0x952 <__stack+0x53>
 962:	0e c0       	rjmp	.+28     	; 0x980 <__stack+0x81>
 964:	ba 0f       	add	r27, r26
 966:	62 1f       	adc	r22, r18
 968:	73 1f       	adc	r23, r19
 96a:	84 1f       	adc	r24, r20
 96c:	48 f4       	brcc	.+18     	; 0x980 <__stack+0x81>
 96e:	87 95       	ror	r24
 970:	77 95       	ror	r23
 972:	67 95       	ror	r22
 974:	b7 95       	ror	r27
 976:	f7 95       	ror	r31
 978:	9e 3f       	cpi	r25, 0xFE	; 254
 97a:	08 f0       	brcs	.+2      	; 0x97e <__stack+0x7f>
 97c:	b0 cf       	rjmp	.-160    	; 0x8de <__addsf3+0x28>
 97e:	93 95       	inc	r25
 980:	88 0f       	add	r24, r24
 982:	08 f0       	brcs	.+2      	; 0x986 <__stack+0x87>
 984:	99 27       	eor	r25, r25
 986:	ee 0f       	add	r30, r30
 988:	97 95       	ror	r25
 98a:	87 95       	ror	r24
 98c:	08 95       	ret

0000098e <__divsf3>:
 98e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__divsf3x>
 992:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
 996:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
 99a:	58 f0       	brcs	.+22     	; 0x9b2 <__divsf3+0x24>
 99c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
 9a0:	40 f0       	brcs	.+16     	; 0x9b2 <__divsf3+0x24>
 9a2:	29 f4       	brne	.+10     	; 0x9ae <__divsf3+0x20>
 9a4:	5f 3f       	cpi	r21, 0xFF	; 255
 9a6:	29 f0       	breq	.+10     	; 0x9b2 <__divsf3+0x24>
 9a8:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
 9ac:	51 11       	cpse	r21, r1
 9ae:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
 9b2:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>

000009b6 <__divsf3x>:
 9b6:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
 9ba:	68 f3       	brcs	.-38     	; 0x996 <__divsf3+0x8>

000009bc <__divsf3_pse>:
 9bc:	99 23       	and	r25, r25
 9be:	b1 f3       	breq	.-20     	; 0x9ac <__divsf3+0x1e>
 9c0:	55 23       	and	r21, r21
 9c2:	91 f3       	breq	.-28     	; 0x9a8 <__divsf3+0x1a>
 9c4:	95 1b       	sub	r25, r21
 9c6:	55 0b       	sbc	r21, r21
 9c8:	bb 27       	eor	r27, r27
 9ca:	aa 27       	eor	r26, r26
 9cc:	62 17       	cp	r22, r18
 9ce:	73 07       	cpc	r23, r19
 9d0:	84 07       	cpc	r24, r20
 9d2:	38 f0       	brcs	.+14     	; 0x9e2 <__divsf3_pse+0x26>
 9d4:	9f 5f       	subi	r25, 0xFF	; 255
 9d6:	5f 4f       	sbci	r21, 0xFF	; 255
 9d8:	22 0f       	add	r18, r18
 9da:	33 1f       	adc	r19, r19
 9dc:	44 1f       	adc	r20, r20
 9de:	aa 1f       	adc	r26, r26
 9e0:	a9 f3       	breq	.-22     	; 0x9cc <__divsf3_pse+0x10>
 9e2:	35 d0       	rcall	.+106    	; 0xa4e <__divsf3_pse+0x92>
 9e4:	0e 2e       	mov	r0, r30
 9e6:	3a f0       	brmi	.+14     	; 0x9f6 <__divsf3_pse+0x3a>
 9e8:	e0 e8       	ldi	r30, 0x80	; 128
 9ea:	32 d0       	rcall	.+100    	; 0xa50 <__divsf3_pse+0x94>
 9ec:	91 50       	subi	r25, 0x01	; 1
 9ee:	50 40       	sbci	r21, 0x00	; 0
 9f0:	e6 95       	lsr	r30
 9f2:	00 1c       	adc	r0, r0
 9f4:	ca f7       	brpl	.-14     	; 0x9e8 <__divsf3_pse+0x2c>
 9f6:	2b d0       	rcall	.+86     	; 0xa4e <__divsf3_pse+0x92>
 9f8:	fe 2f       	mov	r31, r30
 9fa:	29 d0       	rcall	.+82     	; 0xa4e <__divsf3_pse+0x92>
 9fc:	66 0f       	add	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	bb 1f       	adc	r27, r27
 a04:	26 17       	cp	r18, r22
 a06:	37 07       	cpc	r19, r23
 a08:	48 07       	cpc	r20, r24
 a0a:	ab 07       	cpc	r26, r27
 a0c:	b0 e8       	ldi	r27, 0x80	; 128
 a0e:	09 f0       	breq	.+2      	; 0xa12 <__divsf3_pse+0x56>
 a10:	bb 0b       	sbc	r27, r27
 a12:	80 2d       	mov	r24, r0
 a14:	bf 01       	movw	r22, r30
 a16:	ff 27       	eor	r31, r31
 a18:	93 58       	subi	r25, 0x83	; 131
 a1a:	5f 4f       	sbci	r21, 0xFF	; 255
 a1c:	3a f0       	brmi	.+14     	; 0xa2c <__divsf3_pse+0x70>
 a1e:	9e 3f       	cpi	r25, 0xFE	; 254
 a20:	51 05       	cpc	r21, r1
 a22:	78 f0       	brcs	.+30     	; 0xa42 <__divsf3_pse+0x86>
 a24:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
 a28:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
 a2c:	5f 3f       	cpi	r21, 0xFF	; 255
 a2e:	e4 f3       	brlt	.-8      	; 0xa28 <__divsf3_pse+0x6c>
 a30:	98 3e       	cpi	r25, 0xE8	; 232
 a32:	d4 f3       	brlt	.-12     	; 0xa28 <__divsf3_pse+0x6c>
 a34:	86 95       	lsr	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b7 95       	ror	r27
 a3c:	f7 95       	ror	r31
 a3e:	9f 5f       	subi	r25, 0xFF	; 255
 a40:	c9 f7       	brne	.-14     	; 0xa34 <__divsf3_pse+0x78>
 a42:	88 0f       	add	r24, r24
 a44:	91 1d       	adc	r25, r1
 a46:	96 95       	lsr	r25
 a48:	87 95       	ror	r24
 a4a:	97 f9       	bld	r25, 7
 a4c:	08 95       	ret
 a4e:	e1 e0       	ldi	r30, 0x01	; 1
 a50:	66 0f       	add	r22, r22
 a52:	77 1f       	adc	r23, r23
 a54:	88 1f       	adc	r24, r24
 a56:	bb 1f       	adc	r27, r27
 a58:	62 17       	cp	r22, r18
 a5a:	73 07       	cpc	r23, r19
 a5c:	84 07       	cpc	r24, r20
 a5e:	ba 07       	cpc	r27, r26
 a60:	20 f0       	brcs	.+8      	; 0xa6a <__divsf3_pse+0xae>
 a62:	62 1b       	sub	r22, r18
 a64:	73 0b       	sbc	r23, r19
 a66:	84 0b       	sbc	r24, r20
 a68:	ba 0b       	sbc	r27, r26
 a6a:	ee 1f       	adc	r30, r30
 a6c:	88 f7       	brcc	.-30     	; 0xa50 <__divsf3_pse+0x94>
 a6e:	e0 95       	com	r30
 a70:	08 95       	ret

00000a72 <__fixsfsi>:
 a72:	0e 94 40 05 	call	0xa80	; 0xa80 <__fixunssfsi>
 a76:	68 94       	set
 a78:	b1 11       	cpse	r27, r1
 a7a:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
 a7e:	08 95       	ret

00000a80 <__fixunssfsi>:
 a80:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
 a84:	88 f0       	brcs	.+34     	; 0xaa8 <__fixunssfsi+0x28>
 a86:	9f 57       	subi	r25, 0x7F	; 127
 a88:	98 f0       	brcs	.+38     	; 0xab0 <__fixunssfsi+0x30>
 a8a:	b9 2f       	mov	r27, r25
 a8c:	99 27       	eor	r25, r25
 a8e:	b7 51       	subi	r27, 0x17	; 23
 a90:	b0 f0       	brcs	.+44     	; 0xabe <__fixunssfsi+0x3e>
 a92:	e1 f0       	breq	.+56     	; 0xacc <__fixunssfsi+0x4c>
 a94:	66 0f       	add	r22, r22
 a96:	77 1f       	adc	r23, r23
 a98:	88 1f       	adc	r24, r24
 a9a:	99 1f       	adc	r25, r25
 a9c:	1a f0       	brmi	.+6      	; 0xaa4 <__fixunssfsi+0x24>
 a9e:	ba 95       	dec	r27
 aa0:	c9 f7       	brne	.-14     	; 0xa94 <__fixunssfsi+0x14>
 aa2:	14 c0       	rjmp	.+40     	; 0xacc <__fixunssfsi+0x4c>
 aa4:	b1 30       	cpi	r27, 0x01	; 1
 aa6:	91 f0       	breq	.+36     	; 0xacc <__fixunssfsi+0x4c>
 aa8:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_zero>
 aac:	b1 e0       	ldi	r27, 0x01	; 1
 aae:	08 95       	ret
 ab0:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_zero>
 ab4:	67 2f       	mov	r22, r23
 ab6:	78 2f       	mov	r23, r24
 ab8:	88 27       	eor	r24, r24
 aba:	b8 5f       	subi	r27, 0xF8	; 248
 abc:	39 f0       	breq	.+14     	; 0xacc <__fixunssfsi+0x4c>
 abe:	b9 3f       	cpi	r27, 0xF9	; 249
 ac0:	cc f3       	brlt	.-14     	; 0xab4 <__fixunssfsi+0x34>
 ac2:	86 95       	lsr	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	b3 95       	inc	r27
 aca:	d9 f7       	brne	.-10     	; 0xac2 <__fixunssfsi+0x42>
 acc:	3e f4       	brtc	.+14     	; 0xadc <__fixunssfsi+0x5c>
 ace:	90 95       	com	r25
 ad0:	80 95       	com	r24
 ad2:	70 95       	com	r23
 ad4:	61 95       	neg	r22
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	08 95       	ret

00000ade <__floatunsisf>:
 ade:	e8 94       	clt
 ae0:	09 c0       	rjmp	.+18     	; 0xaf4 <__floatsisf+0x12>

00000ae2 <__floatsisf>:
 ae2:	97 fb       	bst	r25, 7
 ae4:	3e f4       	brtc	.+14     	; 0xaf4 <__floatsisf+0x12>
 ae6:	90 95       	com	r25
 ae8:	80 95       	com	r24
 aea:	70 95       	com	r23
 aec:	61 95       	neg	r22
 aee:	7f 4f       	sbci	r23, 0xFF	; 255
 af0:	8f 4f       	sbci	r24, 0xFF	; 255
 af2:	9f 4f       	sbci	r25, 0xFF	; 255
 af4:	99 23       	and	r25, r25
 af6:	a9 f0       	breq	.+42     	; 0xb22 <__floatsisf+0x40>
 af8:	f9 2f       	mov	r31, r25
 afa:	96 e9       	ldi	r25, 0x96	; 150
 afc:	bb 27       	eor	r27, r27
 afe:	93 95       	inc	r25
 b00:	f6 95       	lsr	r31
 b02:	87 95       	ror	r24
 b04:	77 95       	ror	r23
 b06:	67 95       	ror	r22
 b08:	b7 95       	ror	r27
 b0a:	f1 11       	cpse	r31, r1
 b0c:	f8 cf       	rjmp	.-16     	; 0xafe <__floatsisf+0x1c>
 b0e:	fa f4       	brpl	.+62     	; 0xb4e <__floatsisf+0x6c>
 b10:	bb 0f       	add	r27, r27
 b12:	11 f4       	brne	.+4      	; 0xb18 <__floatsisf+0x36>
 b14:	60 ff       	sbrs	r22, 0
 b16:	1b c0       	rjmp	.+54     	; 0xb4e <__floatsisf+0x6c>
 b18:	6f 5f       	subi	r22, 0xFF	; 255
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	16 c0       	rjmp	.+44     	; 0xb4e <__floatsisf+0x6c>
 b22:	88 23       	and	r24, r24
 b24:	11 f0       	breq	.+4      	; 0xb2a <__floatsisf+0x48>
 b26:	96 e9       	ldi	r25, 0x96	; 150
 b28:	11 c0       	rjmp	.+34     	; 0xb4c <__floatsisf+0x6a>
 b2a:	77 23       	and	r23, r23
 b2c:	21 f0       	breq	.+8      	; 0xb36 <__floatsisf+0x54>
 b2e:	9e e8       	ldi	r25, 0x8E	; 142
 b30:	87 2f       	mov	r24, r23
 b32:	76 2f       	mov	r23, r22
 b34:	05 c0       	rjmp	.+10     	; 0xb40 <__floatsisf+0x5e>
 b36:	66 23       	and	r22, r22
 b38:	71 f0       	breq	.+28     	; 0xb56 <__floatsisf+0x74>
 b3a:	96 e8       	ldi	r25, 0x86	; 134
 b3c:	86 2f       	mov	r24, r22
 b3e:	70 e0       	ldi	r23, 0x00	; 0
 b40:	60 e0       	ldi	r22, 0x00	; 0
 b42:	2a f0       	brmi	.+10     	; 0xb4e <__floatsisf+0x6c>
 b44:	9a 95       	dec	r25
 b46:	66 0f       	add	r22, r22
 b48:	77 1f       	adc	r23, r23
 b4a:	88 1f       	adc	r24, r24
 b4c:	da f7       	brpl	.-10     	; 0xb44 <__floatsisf+0x62>
 b4e:	88 0f       	add	r24, r24
 b50:	96 95       	lsr	r25
 b52:	87 95       	ror	r24
 b54:	97 f9       	bld	r25, 7
 b56:	08 95       	ret

00000b58 <__fp_inf>:
 b58:	97 f9       	bld	r25, 7
 b5a:	9f 67       	ori	r25, 0x7F	; 127
 b5c:	80 e8       	ldi	r24, 0x80	; 128
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	60 e0       	ldi	r22, 0x00	; 0
 b62:	08 95       	ret

00000b64 <__fp_nan>:
 b64:	9f ef       	ldi	r25, 0xFF	; 255
 b66:	80 ec       	ldi	r24, 0xC0	; 192
 b68:	08 95       	ret

00000b6a <__fp_pscA>:
 b6a:	00 24       	eor	r0, r0
 b6c:	0a 94       	dec	r0
 b6e:	16 16       	cp	r1, r22
 b70:	17 06       	cpc	r1, r23
 b72:	18 06       	cpc	r1, r24
 b74:	09 06       	cpc	r0, r25
 b76:	08 95       	ret

00000b78 <__fp_pscB>:
 b78:	00 24       	eor	r0, r0
 b7a:	0a 94       	dec	r0
 b7c:	12 16       	cp	r1, r18
 b7e:	13 06       	cpc	r1, r19
 b80:	14 06       	cpc	r1, r20
 b82:	05 06       	cpc	r0, r21
 b84:	08 95       	ret

00000b86 <__fp_round>:
 b86:	09 2e       	mov	r0, r25
 b88:	03 94       	inc	r0
 b8a:	00 0c       	add	r0, r0
 b8c:	11 f4       	brne	.+4      	; 0xb92 <__fp_round+0xc>
 b8e:	88 23       	and	r24, r24
 b90:	52 f0       	brmi	.+20     	; 0xba6 <__fp_round+0x20>
 b92:	bb 0f       	add	r27, r27
 b94:	40 f4       	brcc	.+16     	; 0xba6 <__fp_round+0x20>
 b96:	bf 2b       	or	r27, r31
 b98:	11 f4       	brne	.+4      	; 0xb9e <__fp_round+0x18>
 b9a:	60 ff       	sbrs	r22, 0
 b9c:	04 c0       	rjmp	.+8      	; 0xba6 <__fp_round+0x20>
 b9e:	6f 5f       	subi	r22, 0xFF	; 255
 ba0:	7f 4f       	sbci	r23, 0xFF	; 255
 ba2:	8f 4f       	sbci	r24, 0xFF	; 255
 ba4:	9f 4f       	sbci	r25, 0xFF	; 255
 ba6:	08 95       	ret

00000ba8 <__fp_split3>:
 ba8:	57 fd       	sbrc	r21, 7
 baa:	90 58       	subi	r25, 0x80	; 128
 bac:	44 0f       	add	r20, r20
 bae:	55 1f       	adc	r21, r21
 bb0:	59 f0       	breq	.+22     	; 0xbc8 <__fp_splitA+0x10>
 bb2:	5f 3f       	cpi	r21, 0xFF	; 255
 bb4:	71 f0       	breq	.+28     	; 0xbd2 <__fp_splitA+0x1a>
 bb6:	47 95       	ror	r20

00000bb8 <__fp_splitA>:
 bb8:	88 0f       	add	r24, r24
 bba:	97 fb       	bst	r25, 7
 bbc:	99 1f       	adc	r25, r25
 bbe:	61 f0       	breq	.+24     	; 0xbd8 <__fp_splitA+0x20>
 bc0:	9f 3f       	cpi	r25, 0xFF	; 255
 bc2:	79 f0       	breq	.+30     	; 0xbe2 <__fp_splitA+0x2a>
 bc4:	87 95       	ror	r24
 bc6:	08 95       	ret
 bc8:	12 16       	cp	r1, r18
 bca:	13 06       	cpc	r1, r19
 bcc:	14 06       	cpc	r1, r20
 bce:	55 1f       	adc	r21, r21
 bd0:	f2 cf       	rjmp	.-28     	; 0xbb6 <__fp_split3+0xe>
 bd2:	46 95       	lsr	r20
 bd4:	f1 df       	rcall	.-30     	; 0xbb8 <__fp_splitA>
 bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <__fp_splitA+0x30>
 bd8:	16 16       	cp	r1, r22
 bda:	17 06       	cpc	r1, r23
 bdc:	18 06       	cpc	r1, r24
 bde:	99 1f       	adc	r25, r25
 be0:	f1 cf       	rjmp	.-30     	; 0xbc4 <__fp_splitA+0xc>
 be2:	86 95       	lsr	r24
 be4:	71 05       	cpc	r23, r1
 be6:	61 05       	cpc	r22, r1
 be8:	08 94       	sec
 bea:	08 95       	ret

00000bec <__fp_zero>:
 bec:	e8 94       	clt

00000bee <__fp_szero>:
 bee:	bb 27       	eor	r27, r27
 bf0:	66 27       	eor	r22, r22
 bf2:	77 27       	eor	r23, r23
 bf4:	cb 01       	movw	r24, r22
 bf6:	97 f9       	bld	r25, 7
 bf8:	08 95       	ret

00000bfa <__mulsf3>:
 bfa:	0e 94 10 06 	call	0xc20	; 0xc20 <__mulsf3x>
 bfe:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
 c02:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
 c06:	38 f0       	brcs	.+14     	; 0xc16 <__mulsf3+0x1c>
 c08:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
 c0c:	20 f0       	brcs	.+8      	; 0xc16 <__mulsf3+0x1c>
 c0e:	95 23       	and	r25, r21
 c10:	11 f0       	breq	.+4      	; 0xc16 <__mulsf3+0x1c>
 c12:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
 c16:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
 c1a:	11 24       	eor	r1, r1
 c1c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>

00000c20 <__mulsf3x>:
 c20:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
 c24:	70 f3       	brcs	.-36     	; 0xc02 <__mulsf3+0x8>

00000c26 <__mulsf3_pse>:
 c26:	95 9f       	mul	r25, r21
 c28:	c1 f3       	breq	.-16     	; 0xc1a <__mulsf3+0x20>
 c2a:	95 0f       	add	r25, r21
 c2c:	50 e0       	ldi	r21, 0x00	; 0
 c2e:	55 1f       	adc	r21, r21
 c30:	62 9f       	mul	r22, r18
 c32:	f0 01       	movw	r30, r0
 c34:	72 9f       	mul	r23, r18
 c36:	bb 27       	eor	r27, r27
 c38:	f0 0d       	add	r31, r0
 c3a:	b1 1d       	adc	r27, r1
 c3c:	63 9f       	mul	r22, r19
 c3e:	aa 27       	eor	r26, r26
 c40:	f0 0d       	add	r31, r0
 c42:	b1 1d       	adc	r27, r1
 c44:	aa 1f       	adc	r26, r26
 c46:	64 9f       	mul	r22, r20
 c48:	66 27       	eor	r22, r22
 c4a:	b0 0d       	add	r27, r0
 c4c:	a1 1d       	adc	r26, r1
 c4e:	66 1f       	adc	r22, r22
 c50:	82 9f       	mul	r24, r18
 c52:	22 27       	eor	r18, r18
 c54:	b0 0d       	add	r27, r0
 c56:	a1 1d       	adc	r26, r1
 c58:	62 1f       	adc	r22, r18
 c5a:	73 9f       	mul	r23, r19
 c5c:	b0 0d       	add	r27, r0
 c5e:	a1 1d       	adc	r26, r1
 c60:	62 1f       	adc	r22, r18
 c62:	83 9f       	mul	r24, r19
 c64:	a0 0d       	add	r26, r0
 c66:	61 1d       	adc	r22, r1
 c68:	22 1f       	adc	r18, r18
 c6a:	74 9f       	mul	r23, r20
 c6c:	33 27       	eor	r19, r19
 c6e:	a0 0d       	add	r26, r0
 c70:	61 1d       	adc	r22, r1
 c72:	23 1f       	adc	r18, r19
 c74:	84 9f       	mul	r24, r20
 c76:	60 0d       	add	r22, r0
 c78:	21 1d       	adc	r18, r1
 c7a:	82 2f       	mov	r24, r18
 c7c:	76 2f       	mov	r23, r22
 c7e:	6a 2f       	mov	r22, r26
 c80:	11 24       	eor	r1, r1
 c82:	9f 57       	subi	r25, 0x7F	; 127
 c84:	50 40       	sbci	r21, 0x00	; 0
 c86:	9a f0       	brmi	.+38     	; 0xcae <__mulsf3_pse+0x88>
 c88:	f1 f0       	breq	.+60     	; 0xcc6 <__mulsf3_pse+0xa0>
 c8a:	88 23       	and	r24, r24
 c8c:	4a f0       	brmi	.+18     	; 0xca0 <__mulsf3_pse+0x7a>
 c8e:	ee 0f       	add	r30, r30
 c90:	ff 1f       	adc	r31, r31
 c92:	bb 1f       	adc	r27, r27
 c94:	66 1f       	adc	r22, r22
 c96:	77 1f       	adc	r23, r23
 c98:	88 1f       	adc	r24, r24
 c9a:	91 50       	subi	r25, 0x01	; 1
 c9c:	50 40       	sbci	r21, 0x00	; 0
 c9e:	a9 f7       	brne	.-22     	; 0xc8a <__mulsf3_pse+0x64>
 ca0:	9e 3f       	cpi	r25, 0xFE	; 254
 ca2:	51 05       	cpc	r21, r1
 ca4:	80 f0       	brcs	.+32     	; 0xcc6 <__mulsf3_pse+0xa0>
 ca6:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
 caa:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
 cae:	5f 3f       	cpi	r21, 0xFF	; 255
 cb0:	e4 f3       	brlt	.-8      	; 0xcaa <__mulsf3_pse+0x84>
 cb2:	98 3e       	cpi	r25, 0xE8	; 232
 cb4:	d4 f3       	brlt	.-12     	; 0xcaa <__mulsf3_pse+0x84>
 cb6:	86 95       	lsr	r24
 cb8:	77 95       	ror	r23
 cba:	67 95       	ror	r22
 cbc:	b7 95       	ror	r27
 cbe:	f7 95       	ror	r31
 cc0:	e7 95       	ror	r30
 cc2:	9f 5f       	subi	r25, 0xFF	; 255
 cc4:	c1 f7       	brne	.-16     	; 0xcb6 <__mulsf3_pse+0x90>
 cc6:	fe 2b       	or	r31, r30
 cc8:	88 0f       	add	r24, r24
 cca:	91 1d       	adc	r25, r1
 ccc:	96 95       	lsr	r25
 cce:	87 95       	ror	r24
 cd0:	97 f9       	bld	r25, 7
 cd2:	08 95       	ret

00000cd4 <__itoa_ncheck>:
 cd4:	bb 27       	eor	r27, r27
 cd6:	4a 30       	cpi	r20, 0x0A	; 10
 cd8:	31 f4       	brne	.+12     	; 0xce6 <__itoa_ncheck+0x12>
 cda:	99 23       	and	r25, r25
 cdc:	22 f4       	brpl	.+8      	; 0xce6 <__itoa_ncheck+0x12>
 cde:	bd e2       	ldi	r27, 0x2D	; 45
 ce0:	90 95       	com	r25
 ce2:	81 95       	neg	r24
 ce4:	9f 4f       	sbci	r25, 0xFF	; 255
 ce6:	0c 94 76 06 	jmp	0xcec	; 0xcec <__utoa_common>

00000cea <__utoa_ncheck>:
 cea:	bb 27       	eor	r27, r27

00000cec <__utoa_common>:
 cec:	fb 01       	movw	r30, r22
 cee:	55 27       	eor	r21, r21
 cf0:	aa 27       	eor	r26, r26
 cf2:	88 0f       	add	r24, r24
 cf4:	99 1f       	adc	r25, r25
 cf6:	aa 1f       	adc	r26, r26
 cf8:	a4 17       	cp	r26, r20
 cfa:	10 f0       	brcs	.+4      	; 0xd00 <__utoa_common+0x14>
 cfc:	a4 1b       	sub	r26, r20
 cfe:	83 95       	inc	r24
 d00:	50 51       	subi	r21, 0x10	; 16
 d02:	b9 f7       	brne	.-18     	; 0xcf2 <__utoa_common+0x6>
 d04:	a0 5d       	subi	r26, 0xD0	; 208
 d06:	aa 33       	cpi	r26, 0x3A	; 58
 d08:	08 f0       	brcs	.+2      	; 0xd0c <__utoa_common+0x20>
 d0a:	a9 5d       	subi	r26, 0xD9	; 217
 d0c:	a1 93       	st	Z+, r26
 d0e:	00 97       	sbiw	r24, 0x00	; 0
 d10:	79 f7       	brne	.-34     	; 0xcf0 <__utoa_common+0x4>
 d12:	b1 11       	cpse	r27, r1
 d14:	b1 93       	st	Z+, r27
 d16:	11 92       	st	Z+, r1
 d18:	cb 01       	movw	r24, r22
 d1a:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <strrev>

00000d1e <strrev>:
 d1e:	dc 01       	movw	r26, r24
 d20:	fc 01       	movw	r30, r24
 d22:	67 2f       	mov	r22, r23
 d24:	71 91       	ld	r23, Z+
 d26:	77 23       	and	r23, r23
 d28:	e1 f7       	brne	.-8      	; 0xd22 <strrev+0x4>
 d2a:	32 97       	sbiw	r30, 0x02	; 2
 d2c:	04 c0       	rjmp	.+8      	; 0xd36 <strrev+0x18>
 d2e:	7c 91       	ld	r23, X
 d30:	6d 93       	st	X+, r22
 d32:	70 83       	st	Z, r23
 d34:	62 91       	ld	r22, -Z
 d36:	ae 17       	cp	r26, r30
 d38:	bf 07       	cpc	r27, r31
 d3a:	c8 f3       	brcs	.-14     	; 0xd2e <strrev+0x10>
 d3c:	08 95       	ret

00000d3e <_exit>:
 d3e:	f8 94       	cli

00000d40 <__stop_program>:
 d40:	ff cf       	rjmp	.-2      	; 0xd40 <__stop_program>
