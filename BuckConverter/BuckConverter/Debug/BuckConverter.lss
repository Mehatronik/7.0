
BuckConverter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000f02  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  00800116  00800116  00000fac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001213  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a71  00000000  00000000  00002337  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a36  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  000037e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000630  00000000  00000000  00003a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000056d  00000000  00000000  000040b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000461d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__vector_20>
  54:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3e       	cpi	r26, 0xE3	; 227
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>



int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	6e 97       	sbiw	r28, 0x1e	; 30
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    ADC_init();
  ba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <ADC_init>
	uart_init();
  be:	0e 94 52 05 	call	0xaa4	; 0xaa4 <uart_init>
	pwm_init();
  c2:	0e 94 44 03 	call	0x688	; 0x688 <pwm_init>
	tajmer0_init();
  c6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <tajmer0_init>
	
	
	sei();
  ca:	78 94       	sei
#include <util/delay.h>



int main(void)
{
  cc:	82 e3       	ldi	r24, 0x32	; 50
  ce:	90 e0       	ldi	r25, 0x00	; 0
		napon_shunt_AVG =0;
		struja_shunt_AVG =0;
		
		for(i=0; i<br_semplova; i++)
		{
			niz_napona_shunt[i] = merena_struja * 1.068;
  d0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <merena_struja>
  d4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <merena_struja+0x1>
			niz_struja_shunt[i] = merena_struja;
  d8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <merena_struja>
  dc:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <merena_struja+0x1>
  e0:	01 97       	sbiw	r24, 0x01	; 1
    while (1) 
    {
		napon_shunt_AVG =0;
		struja_shunt_AVG =0;
		
		for(i=0; i<br_semplova; i++)
  e2:	b1 f7       	brne	.-20     	; 0xd0 <main+0x2a>
  e4:	82 e3       	ldi	r24, 0x32	; 50
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	01 97       	sbiw	r24, 0x01	; 1
		{
			niz_napona_shunt[i] = merena_struja * 1.068;
			niz_struja_shunt[i] = merena_struja;
		}
		
		for(i=0; i<br_semplova; i++)
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x42>
		
		napon_shunt_AVG = napon_shunt_AVG/br_semplova;
		struja_shunt_AVG = struja_shunt_AVG/br_semplova;
		
		
		if(flag_prekid_10ms == 1)		//slanje putem UART Tx na svakih 10ms. Podesava se u tajmer.c fajlu
  ec:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <flag_prekid_10ms>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	61 f7       	brne	.-40     	; 0xcc <main+0x26>
		{
			flag_prekid_10ms = 0;
  f4:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <flag_prekid_10ms>
		/*
		send_str("");
		itoa( struja_shunt_AVG , bafer, 10);
		send_str(bafer);
		*/
		send_str("  ");
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
		itoa( ref_napon_sa_pot , bafer, 10);
 100:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ref_napon_sa_pot>
 104:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ref_napon_sa_pot+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 108:	4a e0       	ldi	r20, 0x0A	; 10
 10a:	be 01       	movw	r22, r28
 10c:	6f 5f       	subi	r22, 0xFF	; 255
 10e:	7f 4f       	sbci	r23, 0xFF	; 255
 110:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>
		send_str(bafer);
 114:	ce 01       	movw	r24, r28
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
		
		
		send_str("  ");
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
		itoa( mereni_napon , bafer, 10);
 124:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mereni_napon>
 128:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <mereni_napon+0x1>
 12c:	4a e0       	ldi	r20, 0x0A	; 10
 12e:	be 01       	movw	r22, r28
 130:	6f 5f       	subi	r22, 0xFF	; 255
 132:	7f 4f       	sbci	r23, 0xFF	; 255
 134:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>
		send_str(bafer);
 138:	ce 01       	movw	r24, r28
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
		
		send_str("  ");
 140:	80 e1       	ldi	r24, 0x10	; 16
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
		itoa( merena_struja , bafer, 10);
 148:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <merena_struja>
 14c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <merena_struja+0x1>
 150:	4a e0       	ldi	r20, 0x0A	; 10
 152:	be 01       	movw	r22, r28
 154:	6f 5f       	subi	r22, 0xFF	; 255
 156:	7f 4f       	sbci	r23, 0xFF	; 255
 158:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>
		send_str(bafer);
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
		itoa( suma_greske/100 , bafer, 10);
		send_str(bafer);
		*/
		
		
		send_str("  ");
 164:	80 e1       	ldi	r24, 0x10	; 16
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
		itoa( Upravljanje*10 , bafer, 10);
 16c:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <Upravljanje>
 170:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 174:	c9 01       	movw	r24, r18
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	4a e0       	ldi	r20, 0x0A	; 10
 188:	be 01       	movw	r22, r28
 18a:	6f 5f       	subi	r22, 0xFF	; 255
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	82 0f       	add	r24, r18
 190:	93 1f       	adc	r25, r19
 192:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>
		send_str(bafer);
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
		
		send_str("  ");
 19e:	80 e1       	ldi	r24, 0x10	; 16
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
 1a6:	4a e0       	ldi	r20, 0x0A	; 10
 1a8:	be 01       	movw	r22, r28
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>
		itoa( 0 , bafer, 10);
		send_str(bafer);
 1b6:	ce 01       	movw	r24, r28
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
		
		send_str("  ");
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
 1c6:	4a e0       	ldi	r20, 0x0A	; 10
 1c8:	be 01       	movw	r22, r28
 1ca:	6f 5f       	subi	r22, 0xFF	; 255
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	88 e2       	ldi	r24, 0x28	; 40
 1d0:	93 e2       	ldi	r25, 0x23	; 35
 1d2:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>
		itoa( 9000 , bafer, 10);
		send_str(bafer);
 1d6:	ce 01       	movw	r24, r28
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
		*/

		
	
		
		send_str("\n");
 1de:	83 e1       	ldi	r24, 0x13	; 19
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 62 05 	call	0xac4	; 0xac4 <send_str>
 1e6:	72 cf       	rjmp	.-284    	; 0xcc <main+0x26>

000001e8 <ADC_init>:
volatile void sumator();
volatile void _2x8bit_reg_2_1x16bit_reg();

void ADC_init()
{
	DDRD |= 1<<DDB7;
 1e8:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
 1ea:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
 1ee:	80 ec       	ldi	r24, 0xC0	; 192
 1f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
 1f4:	8e ee       	ldi	r24, 0xEE	; 238
 1f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
 1fa:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
 1fe:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ad_kanal>
 202:	08 95       	ret

00000204 <sumator>:
}



volatile void sumator()
{
 204:	cf 92       	push	r12
 206:	df 92       	push	r13
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
	//radi sumu po kolonama matrice, tj po kanalu, izvlaci prosek i upisuje u odgovarajucu promenljivu
	volatile static uint8_t i=0;


	
	if (ad_kanal == 0) //ref_napon_sa_pot
 210:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 214:	81 11       	cpse	r24, r1
 216:	4d c0       	rjmp	.+154    	; 0x2b2 <sumator+0xae>
	{
		ref_napon_sa_pot = 0; //nuliram da ne bi uticalo na sumiranje i prosek i stvarne vrednosti
 218:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ref_napon_sa_pot+0x1>
 21c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ref_napon_sa_pot>
		
		for (i=0; i<BR_SEMPLOVA; i++)
 220:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 224:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 228:	84 31       	cpi	r24, 0x14	; 20
 22a:	18 f5       	brcc	.+70     	; 0x272 <sumator+0x6e>
		{
			ref_napon_sa_pot += adc_res[ad_kanal][i];		//suma po nultoj koloni (nultom kanalu)
 22c:	44 e1       	ldi	r20, 0x14	; 20
 22e:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 232:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 236:	4e 9f       	mul	r20, r30
 238:	f0 01       	movw	r30, r0
 23a:	11 24       	eor	r1, r1
 23c:	e8 0f       	add	r30, r24
 23e:	f1 1d       	adc	r31, r1
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	ef 5d       	subi	r30, 0xDF	; 223
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	20 81       	ld	r18, Z
 24a:	31 81       	ldd	r19, Z+1	; 0x01
 24c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ref_napon_sa_pot>
 250:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ref_napon_sa_pot+0x1>
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
 258:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ref_napon_sa_pot+0x1>
 25c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ref_napon_sa_pot>
	
	if (ad_kanal == 0) //ref_napon_sa_pot
	{
		ref_napon_sa_pot = 0; //nuliram da ne bi uticalo na sumiranje i prosek i stvarne vrednosti
		
		for (i=0; i<BR_SEMPLOVA; i++)
 260:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 26a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 26e:	84 31       	cpi	r24, 0x14	; 20
 270:	f0 f2       	brcs	.-68     	; 0x22e <sumator+0x2a>
		{
			ref_napon_sa_pot += adc_res[ad_kanal][i];		//suma po nultoj koloni (nultom kanalu)
		}
		ref_napon_sa_pot = (ref_napon_sa_pot/BR_SEMPLOVA) * 19.613;  //1023 = 20000 mV
 272:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <ref_napon_sa_pot>
 276:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <ref_napon_sa_pot+0x1>
 27a:	ad ec       	ldi	r26, 0xCD	; 205
 27c:	bc ec       	ldi	r27, 0xCC	; 204
 27e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__umulhisi3>
 282:	92 95       	swap	r25
 284:	82 95       	swap	r24
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	89 27       	eor	r24, r25
 28a:	9f 70       	andi	r25, 0x0F	; 15
 28c:	89 27       	eor	r24, r25
 28e:	bc 01       	movw	r22, r24
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 18 06 	call	0xc30	; 0xc30 <__floatunsisf>
 298:	2d e6       	ldi	r18, 0x6D	; 109
 29a:	37 ee       	ldi	r19, 0xE7	; 231
 29c:	4c e9       	ldi	r20, 0x9C	; 156
 29e:	51 e4       	ldi	r21, 0x41	; 65
 2a0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
 2a4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fixunssfsi>
 2a8:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <ref_napon_sa_pot+0x1>
 2ac:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <ref_napon_sa_pot>
 2b0:	b5 c0       	rjmp	.+362    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		
		
	}
	else if (ad_kanal == 1)	//merena struja
 2b2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	09 f0       	breq	.+2      	; 0x2bc <sumator+0xb8>
 2ba:	4d c0       	rjmp	.+154    	; 0x356 <sumator+0x152>
	{
		merena_struja = 0;
 2bc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <merena_struja+0x1>
 2c0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <merena_struja>
		
		for (i=0; i<BR_SEMPLOVA; i++)
 2c4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 2c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 2cc:	84 31       	cpi	r24, 0x14	; 20
 2ce:	18 f5       	brcc	.+70     	; 0x316 <sumator+0x112>
		{
			merena_struja += adc_res[ad_kanal][i];
 2d0:	44 e1       	ldi	r20, 0x14	; 20
 2d2:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 2d6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 2da:	4e 9f       	mul	r20, r30
 2dc:	f0 01       	movw	r30, r0
 2de:	11 24       	eor	r1, r1
 2e0:	e8 0f       	add	r30, r24
 2e2:	f1 1d       	adc	r31, r1
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	ef 5d       	subi	r30, 0xDF	; 223
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	20 81       	ld	r18, Z
 2ee:	31 81       	ldd	r19, Z+1	; 0x01
 2f0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <merena_struja>
 2f4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <merena_struja+0x1>
 2f8:	82 0f       	add	r24, r18
 2fa:	93 1f       	adc	r25, r19
 2fc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <merena_struja+0x1>
 300:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <merena_struja>
	}
	else if (ad_kanal == 1)	//merena struja
	{
		merena_struja = 0;
		
		for (i=0; i<BR_SEMPLOVA; i++)
 304:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 30e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 312:	84 31       	cpi	r24, 0x14	; 20
 314:	f0 f2       	brcs	.-68     	; 0x2d2 <sumator+0xce>
		{
			merena_struja += adc_res[ad_kanal][i];
		}
		merena_struja = (merena_struja/BR_SEMPLOVA) * 4.895;  // 1023 = 1093 mV, R=220 mOhm, I=V/R = 4968 mA (MAX); izracunato i skalirano da se za max input dobija ~5A
 316:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <merena_struja>
 31a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <merena_struja+0x1>
 31e:	ad ec       	ldi	r26, 0xCD	; 205
 320:	bc ec       	ldi	r27, 0xCC	; 204
 322:	0e 94 27 07 	call	0xe4e	; 0xe4e <__umulhisi3>
 326:	92 95       	swap	r25
 328:	82 95       	swap	r24
 32a:	8f 70       	andi	r24, 0x0F	; 15
 32c:	89 27       	eor	r24, r25
 32e:	9f 70       	andi	r25, 0x0F	; 15
 330:	89 27       	eor	r24, r25
 332:	bc 01       	movw	r22, r24
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 18 06 	call	0xc30	; 0xc30 <__floatunsisf>
 33c:	27 ed       	ldi	r18, 0xD7	; 215
 33e:	33 ea       	ldi	r19, 0xA3	; 163
 340:	4c e9       	ldi	r20, 0x9C	; 156
 342:	50 e4       	ldi	r21, 0x40	; 64
 344:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
 348:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fixunssfsi>
 34c:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <merena_struja+0x1>
 350:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <merena_struja>
 354:	63 c0       	rjmp	.+198    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
															  //malo je kompenzovan mnozitelj merenjem pomocu voltmetra
															 /***** Vref 1.1V je zapravo 1.093 V ******/
	}
	else if (ad_kanal == 2)	//mereni napon
 356:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	09 f0       	breq	.+2      	; 0x360 <sumator+0x15c>
 35e:	5e c0       	rjmp	.+188    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		mereni_napon = 0;
 360:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <mereni_napon+0x1>
 364:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <mereni_napon>
		
		for (i=0; i<BR_SEMPLOVA; i++)
 368:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 36c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 370:	84 31       	cpi	r24, 0x14	; 20
 372:	18 f5       	brcc	.+70     	; 0x3ba <sumator+0x1b6>
		{
			mereni_napon += adc_res[ad_kanal][i];
 374:	44 e1       	ldi	r20, 0x14	; 20
 376:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 37a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 37e:	4e 9f       	mul	r20, r30
 380:	f0 01       	movw	r30, r0
 382:	11 24       	eor	r1, r1
 384:	e8 0f       	add	r30, r24
 386:	f1 1d       	adc	r31, r1
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	ef 5d       	subi	r30, 0xDF	; 223
 38e:	fe 4f       	sbci	r31, 0xFE	; 254
 390:	80 81       	ld	r24, Z
 392:	91 81       	ldd	r25, Z+1	; 0x01
 394:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <mereni_napon>
 398:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <mereni_napon+0x1>
 39c:	82 0f       	add	r24, r18
 39e:	93 1f       	adc	r25, r19
 3a0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <mereni_napon+0x1>
 3a4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <mereni_napon>
	}
	else if (ad_kanal == 2)	//mereni napon
	{
		mereni_napon = 0;
		
		for (i=0; i<BR_SEMPLOVA; i++)
 3a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3ac:	8f 5f       	subi	r24, 0xFF	; 255
 3ae:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 3b2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3b6:	84 31       	cpi	r24, 0x14	; 20
 3b8:	f0 f2       	brcs	.-68     	; 0x376 <sumator+0x172>
		{
			mereni_napon += adc_res[ad_kanal][i];
		}
		mereni_napon = ((mereni_napon/BR_SEMPLOVA) * 19.613) - (merena_struja * 0.22);  //1023 = 20000 mV - naposnki pad preko sant otpornika (220 mOhm)
 3ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mereni_napon>
 3be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <mereni_napon+0x1>
 3c2:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <merena_struja>
 3c6:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <merena_struja+0x1>
 3ca:	64 e1       	ldi	r22, 0x14	; 20
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 3d2:	07 2e       	mov	r0, r23
 3d4:	00 0c       	add	r0, r0
 3d6:	88 0b       	sbc	r24, r24
 3d8:	99 0b       	sbc	r25, r25
 3da:	0e 94 1a 06 	call	0xc34	; 0xc34 <__floatsisf>
 3de:	2d e6       	ldi	r18, 0x6D	; 109
 3e0:	37 ee       	ldi	r19, 0xE7	; 231
 3e2:	4c e9       	ldi	r20, 0x9C	; 156
 3e4:	51 e4       	ldi	r21, 0x41	; 65
 3e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
 3ea:	6b 01       	movw	r12, r22
 3ec:	7c 01       	movw	r14, r24
 3ee:	be 01       	movw	r22, r28
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 18 06 	call	0xc30	; 0xc30 <__floatunsisf>
 3f8:	2e ea       	ldi	r18, 0xAE	; 174
 3fa:	37 e4       	ldi	r19, 0x47	; 71
 3fc:	41 e6       	ldi	r20, 0x61	; 97
 3fe:	5e e3       	ldi	r21, 0x3E	; 62
 400:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
 404:	9b 01       	movw	r18, r22
 406:	ac 01       	movw	r20, r24
 408:	c7 01       	movw	r24, r14
 40a:	b6 01       	movw	r22, r12
 40c:	0e 94 75 05 	call	0xaea	; 0xaea <__subsf3>
 410:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fixsfsi>
 414:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <mereni_napon+0x1>
 418:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <mereni_napon>
																				//na buck, ili pak zbog ne bas real time podataka sa ad ulaza jer im uzimam prosek
																				//Svakako trebam ovo jos malo razmotriti
	}


}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	08 95       	ret

0000042a <_2x8bit_reg_2_1x16bit_reg>:
	
	//upis adc rezultata u matricu
	
	
	//ADCL mora biti prvi procitan
	adc_low = (uint8_t)ADCL;    //koriste se dva 8-bit registra jer je rezultat AD konverzije 10-bitan
 42a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 42e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <adc_low>
	adc_high = (uint8_t)ADCH;
 432:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 436:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <adc_high>
	
	/**stapam rezultate iz dva registra u jednu promenljivu na ovaj nacin**/
	/**rezultat ad konverzije je 10-bit-an, tj. od 0 do 1023**/
	
	if(adc_high==0)
 43a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 43e:	81 11       	cpse	r24, r1
 440:	14 c0       	rjmp	.+40     	; 0x46a <_2x8bit_reg_2_1x16bit_reg+0x40>
		adc_res[ad_kanal][brojac_sempla] = adc_low;
 442:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 446:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <brojac_sempla>
 44a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_low>
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	34 e1       	ldi	r19, 0x14	; 20
 452:	e3 9f       	mul	r30, r19
 454:	f0 01       	movw	r30, r0
 456:	11 24       	eor	r1, r1
 458:	e2 0f       	add	r30, r18
 45a:	f1 1d       	adc	r31, r1
 45c:	ee 0f       	add	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	ef 5d       	subi	r30, 0xDF	; 223
 462:	fe 4f       	sbci	r31, 0xFE	; 254
 464:	91 83       	std	Z+1, r25	; 0x01
 466:	80 83       	st	Z, r24
 468:	08 95       	ret
	else if(adc_high==1)
 46a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	a9 f4       	brne	.+42     	; 0x49c <_2x8bit_reg_2_1x16bit_reg+0x72>
		adc_res[ad_kanal][brojac_sempla] = 256 + adc_low;
 472:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 476:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <brojac_sempla>
 47a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_low>
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	93 95       	inc	r25
 482:	34 e1       	ldi	r19, 0x14	; 20
 484:	e3 9f       	mul	r30, r19
 486:	f0 01       	movw	r30, r0
 488:	11 24       	eor	r1, r1
 48a:	e2 0f       	add	r30, r18
 48c:	f1 1d       	adc	r31, r1
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	ef 5d       	subi	r30, 0xDF	; 223
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	91 83       	std	Z+1, r25	; 0x01
 498:	80 83       	st	Z, r24
 49a:	08 95       	ret
	else if(adc_high==2)
 49c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 4a0:	82 30       	cpi	r24, 0x02	; 2
 4a2:	a9 f4       	brne	.+42     	; 0x4ce <_2x8bit_reg_2_1x16bit_reg+0xa4>
		adc_res[ad_kanal][brojac_sempla] = 512 + adc_low;	//256*2
 4a4:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 4a8:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <brojac_sempla>
 4ac:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_low>
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	9e 5f       	subi	r25, 0xFE	; 254
 4b4:	34 e1       	ldi	r19, 0x14	; 20
 4b6:	e3 9f       	mul	r30, r19
 4b8:	f0 01       	movw	r30, r0
 4ba:	11 24       	eor	r1, r1
 4bc:	e2 0f       	add	r30, r18
 4be:	f1 1d       	adc	r31, r1
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	ef 5d       	subi	r30, 0xDF	; 223
 4c6:	fe 4f       	sbci	r31, 0xFE	; 254
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
 4cc:	08 95       	ret
	else if(adc_high==3)
 4ce:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 4d2:	83 30       	cpi	r24, 0x03	; 3
 4d4:	a1 f4       	brne	.+40     	; 0x4fe <_2x8bit_reg_2_1x16bit_reg+0xd4>
		adc_res[ad_kanal][brojac_sempla] = 768 + adc_low;	//256*3
 4d6:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 4da:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <brojac_sempla>
 4de:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_low>
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	9d 5f       	subi	r25, 0xFD	; 253
 4e6:	34 e1       	ldi	r19, 0x14	; 20
 4e8:	e3 9f       	mul	r30, r19
 4ea:	f0 01       	movw	r30, r0
 4ec:	11 24       	eor	r1, r1
 4ee:	e2 0f       	add	r30, r18
 4f0:	f1 1d       	adc	r31, r1
 4f2:	ee 0f       	add	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	ef 5d       	subi	r30, 0xDF	; 223
 4f8:	fe 4f       	sbci	r31, 0xFE	; 254
 4fa:	91 83       	std	Z+1, r25	; 0x01
 4fc:	80 83       	st	Z, r24
 4fe:	08 95       	ret

00000500 <__vector_21>:
	ad_kanal = 0; //prvo citam A0
	
}

ISR(ADC_vect)
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	6f 93       	push	r22
 514:	7f 93       	push	r23
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	af 93       	push	r26
 51c:	bf 93       	push	r27
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	AD konverzija
	ISR okine kada je gotova konverzija
	*/
	
	
	_2x8bit_reg_2_1x16bit_reg();   //upis adc rezultata u matricu
 522:	0e 94 15 02 	call	0x42a	; 0x42a <_2x8bit_reg_2_1x16bit_reg>



	
	if (ad_kanal==0)
 526:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 52a:	81 11       	cpse	r24, r1
 52c:	03 c0       	rjmp	.+6      	; 0x534 <__vector_21+0x34>
			sumator();      //suma za dati kanal i izvucen prosek i upisan u odg promenljivu
 52e:	0e 94 02 01 	call	0x204	; 0x204 <sumator>
 532:	0d c0       	rjmp	.+26     	; 0x54e <__vector_21+0x4e>
	else if (ad_kanal==1)		
 534:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	19 f4       	brne	.+6      	; 0x542 <__vector_21+0x42>
			sumator();
 53c:	0e 94 02 01 	call	0x204	; 0x204 <sumator>
 540:	06 c0       	rjmp	.+12     	; 0x54e <__vector_21+0x4e>
	else if (ad_kanal==2)
 542:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 546:	82 30       	cpi	r24, 0x02	; 2
 548:	11 f4       	brne	.+4      	; 0x54e <__vector_21+0x4e>
			sumator();
 54a:	0e 94 02 01 	call	0x204	; 0x204 <sumator>
	//OCR1A = ref_napon_sa_pot * 20.0;  //top = 400
	//OCR1A = 200;

	
	
	ADCSRA &= ~(1<<ADEN);	//iskljucim adc da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 54e:	ea e7       	ldi	r30, 0x7A	; 122
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	8f 77       	andi	r24, 0x7F	; 127
 556:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 558:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ad_kanal>
	if(ad_kanal > 2)	//kreni opet od nule kad dodjes do poslednjeg; 2, da citam samo prva tri
 562:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 566:	83 30       	cpi	r24, 0x03	; 3
 568:	68 f0       	brcs	.+26     	; 0x584 <__vector_21+0x84>
	{
		ad_kanal = 0;
 56a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ad_kanal>
		
		brojac_sempla++; //kad dodjes do kraja kanala predji na sledeci red semplova
 56e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <brojac_sempla>
 572:	8f 5f       	subi	r24, 0xFF	; 255
 574:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <brojac_sempla>
		if(brojac_sempla >= BR_SEMPLOVA) //kad dodjes do kraja kreni opet od nule
 578:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <brojac_sempla>
 57c:	84 31       	cpi	r24, 0x14	; 20
 57e:	10 f0       	brcs	.+4      	; 0x584 <__vector_21+0x84>
			brojac_sempla = 0;
 580:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <brojac_sempla>
	
	
	
	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
 584:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	61 f0       	breq	.+24     	; 0x5a4 <__vector_21+0xa4>
 58c:	28 f0       	brcs	.+10     	; 0x598 <__vector_21+0x98>
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	91 f0       	breq	.+36     	; 0x5b6 <__vector_21+0xb6>
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	c9 f0       	breq	.+50     	; 0x5c8 <__vector_21+0xc8>
 596:	1d c0       	rjmp	.+58     	; 0x5d2 <__vector_21+0xd2>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
 598:	ec e7       	ldi	r30, 0x7C	; 124
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	8c 7f       	andi	r24, 0xFC	; 252
 5a0:	80 83       	st	Z, r24
		break;
 5a2:	17 c0       	rjmp	.+46     	; 0x5d2 <__vector_21+0xd2>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
 5a4:	ec e7       	ldi	r30, 0x7C	; 124
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	8d 7f       	andi	r24, 0xFD	; 253
 5ac:	80 83       	st	Z, r24
				ADMUX |= (0b1);
 5ae:	80 81       	ld	r24, Z
 5b0:	81 60       	ori	r24, 0x01	; 1
 5b2:	80 83       	st	Z, r24
		break;
 5b4:	0e c0       	rjmp	.+28     	; 0x5d2 <__vector_21+0xd2>
		
		case 2:
				ADMUX &= ~(0b1);		//10;ref internal 1.1V, kanal A2
 5b6:	ec e7       	ldi	r30, 0x7C	; 124
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	80 83       	st	Z, r24
				ADMUX |= (0b10);
 5c0:	80 81       	ld	r24, Z
 5c2:	82 60       	ori	r24, 0x02	; 2
 5c4:	80 83       	st	Z, r24
		break;
 5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__vector_21+0xd2>
		
		case 3:
				ADMUX |= (0b11);		//11;ref internal 1.1V, kanal A3
 5c8:	ec e7       	ldi	r30, 0x7C	; 124
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	83 60       	ori	r24, 0x03	; 3
 5d0:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
 5d2:	ea e7       	ldi	r30, 0x7A	; 122
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	80 6c       	ori	r24, 0xC0	; 192
 5da:	80 83       	st	Z, r24
	
	
	
	PIND |= 1<<7;       //togle za osciloskop
 5dc:	4f 9a       	sbi	0x09, 7	; 9

}
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <__vector_1>:
	
	
}

ISR(INT0_vect)
{
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	0f 92       	push	r0
 608:	11 24       	eor	r1, r1
 60a:	2f 93       	push	r18
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
	
		//interapt opali na rastucu ivicu INT0; ovo sam uradio zbog velike rezolucije enkodera -1024 * 57.5 na izlazu, tj na tocku zbog 2 reduktora
	
	brojac_ext_interaptova++;
 610:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <brojac_ext_interaptova>
 614:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <brojac_ext_interaptova+0x1>
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <brojac_ext_interaptova+0x1>
 61e:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <brojac_ext_interaptova>
	

	
		if ( PIND & (1<<PORTD3) )	//smer 1; proverava se logicki nivo drugog kanala
 622:	4b 9b       	sbis	0x09, 3	; 9
 624:	0d c0       	rjmp	.+26     	; 0x640 <__vector_1+0x40>
		{
			smer_obrtanja = 1;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <smer_obrtanja>
			impulsi++;
 62c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <impulsi>
 630:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <impulsi+0x1>
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <impulsi+0x1>
 63a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <impulsi>
 63e:	0c c0       	rjmp	.+24     	; 0x658 <__vector_1+0x58>
		} 
		else								//smer 2
		{
			smer_obrtanja = 2;
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <smer_obrtanja>
			impulsi--;	
 646:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <impulsi>
 64a:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <impulsi+0x1>
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <impulsi+0x1>
 654:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <impulsi>
	
	
	
	
	
	if(impulsi > 58879)		//za apsolutno merenje ugla
 658:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <impulsi>
 65c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <impulsi+0x1>
 660:	81 15       	cp	r24, r1
 662:	96 4e       	sbci	r25, 0xE6	; 230
 664:	28 f0       	brcs	.+10     	; 0x670 <__vector_1+0x70>
		impulsi = 0;
 666:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <impulsi+0x1>
 66a:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <impulsi>
 66e:	04 c0       	rjmp	.+8      	; 0x678 <__vector_1+0x78>
	else if(impulsi < 0 )
 670:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <impulsi>
 674:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <impulsi+0x1>
	//problem se javlja kada ove impulse zelim da iskoristim za merenje brzine, a pri prelazu preko granicne vrednosti sa 58879 na 0 i obrnuto
	//zato sam ubacio jos jedan brojac koji broji prekide "brojac_ext_interaptova" relativno, a ne apsolutno
		
	//ugao = impulsi / 57.5;	//skaliranje, 58879 impulsa po krugu odgovara 360 stepeni tocka; !!!atmega se ovde zaglavi pri umerenoj frekvenciji prekida!!!
	//ugao = 100;
}
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	2f 91       	pop	r18
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <pwm_init>:
#include "common.h"

void pwm_init()
{
	
	DDRB |= 1<<DDB0; //dig 8
 688:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << DDB1)|(1 << DDB2); //izlazni pinovi za PWM - D9 i D10 na Arduino Uno ploci
 68a:	84 b1       	in	r24, 0x04	; 4
 68c:	86 60       	ori	r24, 0x06	; 6
 68e:	84 b9       	out	0x04, r24	; 4
	

	ICR1 = 400;			//frekvencija ~ 40 kHz
 690:	80 e9       	ldi	r24, 0x90	; 144
 692:	91 e0       	ldi	r25, 0x01	; 1
 694:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 698:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0;		    //faktor ispune 0% 
 69c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 6a0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//OCR1B = OCR1A;
	
	TCCR1A = 0b10000010;		//jedan izlaz, fast pwm
 6a4:	82 e8       	ldi	r24, 0x82	; 130
 6a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B |= (1 << WGM13)|(1 << WGM12);		// set Fast PWM mode using ICR1 as TOP
 6aa:	e1 e8       	ldi	r30, 0x81	; 129
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	88 61       	ori	r24, 0x18	; 24
 6b2:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);		// START the timer with no prescaler	
 6b4:	80 81       	ld	r24, Z
 6b6:	81 60       	ori	r24, 0x01	; 1
 6b8:	80 83       	st	Z, r24
 6ba:	08 95       	ret

000006bc <__vector_11>:
	
	//upis i promena faktora ispune se vrsi u ad konverziji
}

ISR(TIMER1_COMPA_vect)
{
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
	//ADCSRA |= 1<<ADSC; //start ad conversion
	
	PINB |= 0b1;
 6c6:	18 9a       	sbi	0x03, 0	; 3
 6c8:	0f 90       	pop	r0
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	0f 90       	pop	r0
 6ce:	1f 90       	pop	r1
 6d0:	18 95       	reti

000006d2 <tajmer0_init>:
//const volatile double stepeniPOms_to_rpm = 16.67;		//faktor konverzije izmedju izmerenog broja stepeni u prozoru od 10ms u obrtaje po minutu
//volatile double relativni_ugao = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 6d2:	82 e0       	ldi	r24, 0x02	; 2
 6d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 6d6:	93 e0       	ldi	r25, 0x03	; 3
 6d8:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 6da:	99 ef       	ldi	r25, 0xF9	; 249
 6dc:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 6de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRB |= 1<<PINB5;
 6e2:	25 9a       	sbi	0x04, 5	; 4
 6e4:	08 95       	ret

000006e6 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
 6e6:	1f 92       	push	r1
 6e8:	0f 92       	push	r0
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	0f 92       	push	r0
 6ee:	11 24       	eor	r1, r1
 6f0:	cf 92       	push	r12
 6f2:	df 92       	push	r13
 6f4:	ef 92       	push	r14
 6f6:	ff 92       	push	r15
 6f8:	0f 93       	push	r16
 6fa:	1f 93       	push	r17
 6fc:	2f 93       	push	r18
 6fe:	3f 93       	push	r19
 700:	4f 93       	push	r20
 702:	5f 93       	push	r21
 704:	6f 93       	push	r22
 706:	7f 93       	push	r23
 708:	8f 93       	push	r24
 70a:	9f 93       	push	r25
 70c:	af 93       	push	r26
 70e:	bf 93       	push	r27
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	flag_tajmer0_prekid = 1;
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
 71e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <brojac_prekida_tajmera0>
 722:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <brojac_prekida_tajmera0+0x1>
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <brojac_prekida_tajmera0+0x1>
 72c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)
 730:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <brojac_prekida_tajmera0>
 734:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <brojac_prekida_tajmera0+0x1>
 738:	0a 97       	sbiw	r24, 0x0a	; 10
 73a:	41 f4       	brne	.+16     	; 0x74c <__vector_14+0x66>
	{
		brojac_prekida_tajmera0 = 0;
 73c:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <brojac_prekida_tajmera0+0x1>
 740:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <flag_prekid_10ms>
		PINB |= 1<<PINB5;					//toogle pin 5 - DIG13, test da vidim da li je korektna frekvencija
 74a:	1d 9a       	sbi	0x03, 5	; 3
	
	/*Podsetnik: postoje inkrementalni i neki drugi PID zakon, pa ih malo prouci*/
	


			greska_prethodna = greska; //zapamtim proslu gresku pre racunanja nove
 74c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <greska>
 750:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <greska+0x1>
 754:	a0 91 d0 01 	lds	r26, 0x01D0	; 0x8001d0 <greska+0x2>
 758:	b0 91 d1 01 	lds	r27, 0x01D1	; 0x8001d1 <greska+0x3>
 75c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <greska_prethodna>
 760:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <greska_prethodna+0x1>
 764:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <greska_prethodna+0x2>
 768:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <greska_prethodna+0x3>

			greska = (int16_t)ref_napon_sa_pot - mereni_napon;    //greska napona (u mV)
 76c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ref_napon_sa_pot>
 770:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ref_napon_sa_pot+0x1>
 774:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <mereni_napon>
 778:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <mereni_napon+0x1>
 77c:	82 1b       	sub	r24, r18
 77e:	93 0b       	sbc	r25, r19
 780:	09 2e       	mov	r0, r25
 782:	00 0c       	add	r0, r0
 784:	aa 0b       	sbc	r26, r26
 786:	bb 0b       	sbc	r27, r27
 788:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <greska>
 78c:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <greska+0x1>
 790:	a0 93 d0 01 	sts	0x01D0, r26	; 0x8001d0 <greska+0x2>
 794:	b0 93 d1 01 	sts	0x01D1, r27	; 0x8001d1 <greska+0x3>
																 //desavao se overflow zato sto je ref_napon unsigned, posle kastovanja sve u redu
				
			Upravljanje = Kp*greska;	  //Proporcionalno dejstvo,      400 = max (~20V), 0 = min (0V)
 798:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <greska>
 79c:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <greska+0x1>
 7a0:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <greska+0x2>
 7a4:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <greska+0x3>
 7a8:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <Kp>
 7ac:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <Kp+0x1>
 7b0:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <Kp+0x2>
 7b4:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <Kp+0x3>
 7b8:	0e 94 1a 06 	call	0xc34	; 0xc34 <__floatsisf>
 7bc:	a7 01       	movw	r20, r14
 7be:	96 01       	movw	r18, r12
 7c0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
 7c4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fixsfsi>
 7c8:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <Upravljanje+0x1>
 7cc:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <Upravljanje>
			
			
			suma_greske += greska;
 7d0:	40 91 ce 01 	lds	r20, 0x01CE	; 0x8001ce <greska>
 7d4:	50 91 cf 01 	lds	r21, 0x01CF	; 0x8001cf <greska+0x1>
 7d8:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <greska+0x2>
 7dc:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <greska+0x3>
 7e0:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <suma_greske>
 7e4:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <suma_greske+0x1>
 7e8:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <suma_greske+0x2>
 7ec:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <suma_greske+0x3>
 7f0:	84 0f       	add	r24, r20
 7f2:	95 1f       	adc	r25, r21
 7f4:	a6 1f       	adc	r26, r22
 7f6:	b7 1f       	adc	r27, r23
 7f8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <suma_greske>
 7fc:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <suma_greske+0x1>
 800:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <suma_greske+0x2>
 804:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <suma_greske+0x3>
			
			if(suma_greske >= limit_sume)
 808:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <suma_greske>
 80c:	50 91 cb 01 	lds	r21, 0x01CB	; 0x8001cb <suma_greske+0x1>
 810:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <suma_greske+0x2>
 814:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <suma_greske+0x3>
 818:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 81c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 820:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 824:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 828:	48 17       	cp	r20, r24
 82a:	59 07       	cpc	r21, r25
 82c:	6a 07       	cpc	r22, r26
 82e:	7b 07       	cpc	r23, r27
 830:	8c f0       	brlt	.+34     	; 0x854 <__vector_14+0x16e>
				suma_greske = limit_sume;
 832:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 836:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 83a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 83e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 842:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <suma_greske>
 846:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <suma_greske+0x1>
 84a:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <suma_greske+0x2>
 84e:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <suma_greske+0x3>
 852:	15 c0       	rjmp	.+42     	; 0x87e <__vector_14+0x198>
			else if (suma_greske <= 0)
 854:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <suma_greske>
 858:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <suma_greske+0x1>
 85c:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <suma_greske+0x2>
 860:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <suma_greske+0x3>
 864:	18 16       	cp	r1, r24
 866:	19 06       	cpc	r1, r25
 868:	1a 06       	cpc	r1, r26
 86a:	1b 06       	cpc	r1, r27
 86c:	44 f0       	brlt	.+16     	; 0x87e <__vector_14+0x198>
				suma_greske = 0;
 86e:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <suma_greske>
 872:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <suma_greske+0x1>
 876:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <suma_greske+0x2>
 87a:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <suma_greske+0x3>
			
			
			Upravljanje += Ki * suma_greske;		//Integralno dejstvo sabiram sa P dejstvom
 87e:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <suma_greske>
 882:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <suma_greske+0x1>
 886:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <suma_greske+0x2>
 88a:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <suma_greske+0x3>
 88e:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <Ki>
 892:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <Ki+0x1>
 896:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <Ki+0x2>
 89a:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <Ki+0x3>
 89e:	c0 91 d2 01 	lds	r28, 0x01D2	; 0x8001d2 <Upravljanje>
 8a2:	d0 91 d3 01 	lds	r29, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 8a6:	0e 94 1a 06 	call	0xc34	; 0xc34 <__floatsisf>
 8aa:	a7 01       	movw	r20, r14
 8ac:	96 01       	movw	r18, r12
 8ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
 8b2:	6b 01       	movw	r12, r22
 8b4:	7c 01       	movw	r14, r24
 8b6:	be 01       	movw	r22, r28
 8b8:	dd 0f       	add	r29, r29
 8ba:	88 0b       	sbc	r24, r24
 8bc:	99 0b       	sbc	r25, r25
 8be:	0e 94 1a 06 	call	0xc34	; 0xc34 <__floatsisf>
 8c2:	9b 01       	movw	r18, r22
 8c4:	ac 01       	movw	r20, r24
 8c6:	c7 01       	movw	r24, r14
 8c8:	b6 01       	movw	r22, r12
 8ca:	0e 94 76 05 	call	0xaec	; 0xaec <__addsf3>
 8ce:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fixsfsi>
 8d2:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <Upravljanje+0x1>
 8d6:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <Upravljanje>
			
			
			Upravljanje += Kd * (greska - greska_prethodna);
 8da:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <greska>
 8de:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <greska+0x1>
 8e2:	a0 91 d0 01 	lds	r26, 0x01D0	; 0x8001d0 <greska+0x2>
 8e6:	b0 91 d1 01 	lds	r27, 0x01D1	; 0x8001d1 <greska+0x3>
 8ea:	00 91 c6 01 	lds	r16, 0x01C6	; 0x8001c6 <greska_prethodna>
 8ee:	10 91 c7 01 	lds	r17, 0x01C7	; 0x8001c7 <greska_prethodna+0x1>
 8f2:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <greska_prethodna+0x2>
 8f6:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <greska_prethodna+0x3>
 8fa:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <Kd>
 8fe:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <Kd+0x1>
 902:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <Kd+0x2>
 906:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <Kd+0x3>
 90a:	c0 91 d2 01 	lds	r28, 0x01D2	; 0x8001d2 <Upravljanje>
 90e:	d0 91 d3 01 	lds	r29, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 912:	bc 01       	movw	r22, r24
 914:	cd 01       	movw	r24, r26
 916:	60 1b       	sub	r22, r16
 918:	71 0b       	sbc	r23, r17
 91a:	82 0b       	sbc	r24, r18
 91c:	93 0b       	sbc	r25, r19
 91e:	0e 94 1a 06 	call	0xc34	; 0xc34 <__floatsisf>
 922:	a7 01       	movw	r20, r14
 924:	96 01       	movw	r18, r12
 926:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
 92a:	6b 01       	movw	r12, r22
 92c:	7c 01       	movw	r14, r24
 92e:	be 01       	movw	r22, r28
 930:	dd 0f       	add	r29, r29
 932:	88 0b       	sbc	r24, r24
 934:	99 0b       	sbc	r25, r25
 936:	0e 94 1a 06 	call	0xc34	; 0xc34 <__floatsisf>
 93a:	9b 01       	movw	r18, r22
 93c:	ac 01       	movw	r20, r24
 93e:	c7 01       	movw	r24, r14
 940:	b6 01       	movw	r22, r12
 942:	0e 94 76 05 	call	0xaec	; 0xaec <__addsf3>
 946:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fixsfsi>
 94a:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <Upravljanje+0x1>
 94e:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <Upravljanje>
			
			
			if(Upravljanje>=400)
 952:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <Upravljanje>
 956:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 95a:	80 39       	cpi	r24, 0x90	; 144
 95c:	91 40       	sbci	r25, 0x01	; 1
 95e:	1c f1       	brlt	.+70     	; 0x9a6 <__stack+0xa7>
			{
				Upravljanje = 400; //saturacija, tj ogranicenje
 960:	80 e9       	ldi	r24, 0x90	; 144
 962:	91 e0       	ldi	r25, 0x01	; 1
 964:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <Upravljanje+0x1>
 968:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <Upravljanje>
				suma_greske -= greska;		//ako vec imas max upravljanje nemoj vise povecavati sumu greske; zastita od wind up-a
 96c:	40 91 ce 01 	lds	r20, 0x01CE	; 0x8001ce <greska>
 970:	50 91 cf 01 	lds	r21, 0x01CF	; 0x8001cf <greska+0x1>
 974:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <greska+0x2>
 978:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <greska+0x3>
 97c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <suma_greske>
 980:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <suma_greske+0x1>
 984:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <suma_greske+0x2>
 988:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <suma_greske+0x3>
 98c:	84 1b       	sub	r24, r20
 98e:	95 0b       	sbc	r25, r21
 990:	a6 0b       	sbc	r26, r22
 992:	b7 0b       	sbc	r27, r23
 994:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <suma_greske>
 998:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <suma_greske+0x1>
 99c:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <suma_greske+0x2>
 9a0:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <suma_greske+0x3>
 9a4:	27 c0       	rjmp	.+78     	; 0x9f4 <__stack+0xf5>
			}
			
			else if(Upravljanje<=0)
 9a6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <Upravljanje>
 9aa:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 9ae:	18 16       	cp	r1, r24
 9b0:	19 06       	cpc	r1, r25
 9b2:	04 f1       	brlt	.+64     	; 0x9f4 <__stack+0xf5>
			{
				Upravljanje = 0;
 9b4:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <Upravljanje+0x1>
 9b8:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <Upravljanje>
				suma_greske -= greska;		//ako vec imas min upravljanje nemoj vise povecavati sumu greske; zastita od wind up-a
 9bc:	40 91 ce 01 	lds	r20, 0x01CE	; 0x8001ce <greska>
 9c0:	50 91 cf 01 	lds	r21, 0x01CF	; 0x8001cf <greska+0x1>
 9c4:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <greska+0x2>
 9c8:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <greska+0x3>
 9cc:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <suma_greske>
 9d0:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <suma_greske+0x1>
 9d4:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <suma_greske+0x2>
 9d8:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <suma_greske+0x3>
 9dc:	84 1b       	sub	r24, r20
 9de:	95 0b       	sbc	r25, r21
 9e0:	a6 0b       	sbc	r26, r22
 9e2:	b7 0b       	sbc	r27, r23
 9e4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <suma_greske>
 9e8:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <suma_greske+0x1>
 9ec:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <suma_greske+0x2>
 9f0:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <suma_greske+0x3>
			}
			
			
			OCR1A = (uint16_t)Upravljanje;
 9f4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <Upravljanje>
 9f8:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 9fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 a00:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	
 a04:	ff 91       	pop	r31
 a06:	ef 91       	pop	r30
 a08:	df 91       	pop	r29
 a0a:	cf 91       	pop	r28
 a0c:	bf 91       	pop	r27
 a0e:	af 91       	pop	r26
 a10:	9f 91       	pop	r25
 a12:	8f 91       	pop	r24
 a14:	7f 91       	pop	r23
 a16:	6f 91       	pop	r22
 a18:	5f 91       	pop	r21
 a1a:	4f 91       	pop	r20
 a1c:	3f 91       	pop	r19
 a1e:	2f 91       	pop	r18
 a20:	1f 91       	pop	r17
 a22:	0f 91       	pop	r16
 a24:	ff 90       	pop	r15
 a26:	ef 90       	pop	r14
 a28:	df 90       	pop	r13
 a2a:	cf 90       	pop	r12
 a2c:	0f 90       	pop	r0
 a2e:	0f be       	out	0x3f, r0	; 63
 a30:	0f 90       	pop	r0
 a32:	1f 90       	pop	r1
 a34:	18 95       	reti

00000a36 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 a36:	1f 92       	push	r1
 a38:	0f 92       	push	r0
 a3a:	0f b6       	in	r0, 0x3f	; 63
 a3c:	0f 92       	push	r0
 a3e:	11 24       	eor	r1, r1
	poslato=0;
 a40:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <poslato>
}
 a44:	0f 90       	pop	r0
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	0f 90       	pop	r0
 a4a:	1f 90       	pop	r1
 a4c:	18 95       	reti

00000a4e <__vector_18>:

ISR(USART_RX_vect)
{
 a4e:	1f 92       	push	r1
 a50:	0f 92       	push	r0
 a52:	0f b6       	in	r0, 0x3f	; 63
 a54:	0f 92       	push	r0
 a56:	11 24       	eor	r1, r1
 a58:	8f 93       	push	r24
 a5a:	ef 93       	push	r30
 a5c:	ff 93       	push	r31
	input_char=UDR0;
 a5e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a62:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 a66:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <buff_size>
 a6a:	88 30       	cpi	r24, 0x08	; 8
 a6c:	98 f4       	brcc	.+38     	; 0xa94 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 a6e:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <buff_size>
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <input_char>
 a78:	e5 52       	subi	r30, 0x25	; 37
 a7a:	fe 4f       	sbci	r31, 0xFE	; 254
 a7c:	80 83       	st	Z, r24
		buff_size++;
 a7e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <buff_size>
 a82:	8f 5f       	subi	r24, 0xFF	; 255
 a84:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <buff_size>
		input_buffer[buff_size]='\0';
 a88:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <buff_size>
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	e5 52       	subi	r30, 0x25	; 37
 a90:	fe 4f       	sbci	r31, 0xFE	; 254
 a92:	10 82       	st	Z, r1
	}
}
 a94:	ff 91       	pop	r31
 a96:	ef 91       	pop	r30
 a98:	8f 91       	pop	r24
 a9a:	0f 90       	pop	r0
 a9c:	0f be       	out	0x3f, r0	; 63
 a9e:	0f 90       	pop	r0
 aa0:	1f 90       	pop	r1
 aa2:	18 95       	reti

00000aa4 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 aa4:	82 e0       	ldi	r24, 0x02	; 2
 aa6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 aaa:	88 ed       	ldi	r24, 0xD8	; 216
 aac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 ab0:	86 e0       	ldi	r24, 0x06	; 6
 ab2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 ab6:	8f ec       	ldi	r24, 0xCF	; 207
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 abe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 ac2:	08 95       	ret

00000ac4 <send_str>:
}

void send_str(unsigned char *str)
{
 ac4:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 ac6:	90 81       	ld	r25, Z
 ac8:	99 23       	and	r25, r25
 aca:	71 f0       	breq	.+28     	; 0xae8 <send_str+0x24>
 acc:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 ace:	a6 ec       	ldi	r26, 0xC6	; 198
 ad0:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 ad2:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 ad4:	9c 93       	st	X, r25
		poslato=1;
 ad6:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <poslato>
		while (poslato);
 ada:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <poslato>
 ade:	91 11       	cpse	r25, r1
 ae0:	fc cf       	rjmp	.-8      	; 0xada <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 ae2:	91 91       	ld	r25, Z+
 ae4:	91 11       	cpse	r25, r1
 ae6:	f6 cf       	rjmp	.-20     	; 0xad4 <send_str+0x10>
 ae8:	08 95       	ret

00000aea <__subsf3>:
 aea:	50 58       	subi	r21, 0x80	; 128

00000aec <__addsf3>:
 aec:	bb 27       	eor	r27, r27
 aee:	aa 27       	eor	r26, r26
 af0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__addsf3x>
 af4:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_round>
 af8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_pscA>
 afc:	38 f0       	brcs	.+14     	; 0xb0c <__addsf3+0x20>
 afe:	0e 94 65 06 	call	0xcca	; 0xcca <__fp_pscB>
 b02:	20 f0       	brcs	.+8      	; 0xb0c <__addsf3+0x20>
 b04:	39 f4       	brne	.+14     	; 0xb14 <__addsf3+0x28>
 b06:	9f 3f       	cpi	r25, 0xFF	; 255
 b08:	19 f4       	brne	.+6      	; 0xb10 <__addsf3+0x24>
 b0a:	26 f4       	brtc	.+8      	; 0xb14 <__addsf3+0x28>
 b0c:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_nan>
 b10:	0e f4       	brtc	.+2      	; 0xb14 <__addsf3+0x28>
 b12:	e0 95       	com	r30
 b14:	e7 fb       	bst	r30, 7
 b16:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_inf>

00000b1a <__addsf3x>:
 b1a:	e9 2f       	mov	r30, r25
 b1c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fp_split3>
 b20:	58 f3       	brcs	.-42     	; 0xaf8 <__addsf3+0xc>
 b22:	ba 17       	cp	r27, r26
 b24:	62 07       	cpc	r22, r18
 b26:	73 07       	cpc	r23, r19
 b28:	84 07       	cpc	r24, r20
 b2a:	95 07       	cpc	r25, r21
 b2c:	20 f0       	brcs	.+8      	; 0xb36 <__addsf3x+0x1c>
 b2e:	79 f4       	brne	.+30     	; 0xb4e <__addsf3x+0x34>
 b30:	a6 f5       	brtc	.+104    	; 0xb9a <__addsf3x+0x80>
 b32:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_zero>
 b36:	0e f4       	brtc	.+2      	; 0xb3a <__addsf3x+0x20>
 b38:	e0 95       	com	r30
 b3a:	0b 2e       	mov	r0, r27
 b3c:	ba 2f       	mov	r27, r26
 b3e:	a0 2d       	mov	r26, r0
 b40:	0b 01       	movw	r0, r22
 b42:	b9 01       	movw	r22, r18
 b44:	90 01       	movw	r18, r0
 b46:	0c 01       	movw	r0, r24
 b48:	ca 01       	movw	r24, r20
 b4a:	a0 01       	movw	r20, r0
 b4c:	11 24       	eor	r1, r1
 b4e:	ff 27       	eor	r31, r31
 b50:	59 1b       	sub	r21, r25
 b52:	99 f0       	breq	.+38     	; 0xb7a <__addsf3x+0x60>
 b54:	59 3f       	cpi	r21, 0xF9	; 249
 b56:	50 f4       	brcc	.+20     	; 0xb6c <__addsf3x+0x52>
 b58:	50 3e       	cpi	r21, 0xE0	; 224
 b5a:	68 f1       	brcs	.+90     	; 0xbb6 <__addsf3x+0x9c>
 b5c:	1a 16       	cp	r1, r26
 b5e:	f0 40       	sbci	r31, 0x00	; 0
 b60:	a2 2f       	mov	r26, r18
 b62:	23 2f       	mov	r18, r19
 b64:	34 2f       	mov	r19, r20
 b66:	44 27       	eor	r20, r20
 b68:	58 5f       	subi	r21, 0xF8	; 248
 b6a:	f3 cf       	rjmp	.-26     	; 0xb52 <__addsf3x+0x38>
 b6c:	46 95       	lsr	r20
 b6e:	37 95       	ror	r19
 b70:	27 95       	ror	r18
 b72:	a7 95       	ror	r26
 b74:	f0 40       	sbci	r31, 0x00	; 0
 b76:	53 95       	inc	r21
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__addsf3x+0x52>
 b7a:	7e f4       	brtc	.+30     	; 0xb9a <__addsf3x+0x80>
 b7c:	1f 16       	cp	r1, r31
 b7e:	ba 0b       	sbc	r27, r26
 b80:	62 0b       	sbc	r22, r18
 b82:	73 0b       	sbc	r23, r19
 b84:	84 0b       	sbc	r24, r20
 b86:	ba f0       	brmi	.+46     	; 0xbb6 <__addsf3x+0x9c>
 b88:	91 50       	subi	r25, 0x01	; 1
 b8a:	a1 f0       	breq	.+40     	; 0xbb4 <__addsf3x+0x9a>
 b8c:	ff 0f       	add	r31, r31
 b8e:	bb 1f       	adc	r27, r27
 b90:	66 1f       	adc	r22, r22
 b92:	77 1f       	adc	r23, r23
 b94:	88 1f       	adc	r24, r24
 b96:	c2 f7       	brpl	.-16     	; 0xb88 <__addsf3x+0x6e>
 b98:	0e c0       	rjmp	.+28     	; 0xbb6 <__addsf3x+0x9c>
 b9a:	ba 0f       	add	r27, r26
 b9c:	62 1f       	adc	r22, r18
 b9e:	73 1f       	adc	r23, r19
 ba0:	84 1f       	adc	r24, r20
 ba2:	48 f4       	brcc	.+18     	; 0xbb6 <__addsf3x+0x9c>
 ba4:	87 95       	ror	r24
 ba6:	77 95       	ror	r23
 ba8:	67 95       	ror	r22
 baa:	b7 95       	ror	r27
 bac:	f7 95       	ror	r31
 bae:	9e 3f       	cpi	r25, 0xFE	; 254
 bb0:	08 f0       	brcs	.+2      	; 0xbb4 <__addsf3x+0x9a>
 bb2:	b0 cf       	rjmp	.-160    	; 0xb14 <__addsf3+0x28>
 bb4:	93 95       	inc	r25
 bb6:	88 0f       	add	r24, r24
 bb8:	08 f0       	brcs	.+2      	; 0xbbc <__addsf3x+0xa2>
 bba:	99 27       	eor	r25, r25
 bbc:	ee 0f       	add	r30, r30
 bbe:	97 95       	ror	r25
 bc0:	87 95       	ror	r24
 bc2:	08 95       	ret

00000bc4 <__fixsfsi>:
 bc4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fixunssfsi>
 bc8:	68 94       	set
 bca:	b1 11       	cpse	r27, r1
 bcc:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_szero>
 bd0:	08 95       	ret

00000bd2 <__fixunssfsi>:
 bd2:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_splitA>
 bd6:	88 f0       	brcs	.+34     	; 0xbfa <__fixunssfsi+0x28>
 bd8:	9f 57       	subi	r25, 0x7F	; 127
 bda:	98 f0       	brcs	.+38     	; 0xc02 <__fixunssfsi+0x30>
 bdc:	b9 2f       	mov	r27, r25
 bde:	99 27       	eor	r25, r25
 be0:	b7 51       	subi	r27, 0x17	; 23
 be2:	b0 f0       	brcs	.+44     	; 0xc10 <__fixunssfsi+0x3e>
 be4:	e1 f0       	breq	.+56     	; 0xc1e <__fixunssfsi+0x4c>
 be6:	66 0f       	add	r22, r22
 be8:	77 1f       	adc	r23, r23
 bea:	88 1f       	adc	r24, r24
 bec:	99 1f       	adc	r25, r25
 bee:	1a f0       	brmi	.+6      	; 0xbf6 <__fixunssfsi+0x24>
 bf0:	ba 95       	dec	r27
 bf2:	c9 f7       	brne	.-14     	; 0xbe6 <__fixunssfsi+0x14>
 bf4:	14 c0       	rjmp	.+40     	; 0xc1e <__fixunssfsi+0x4c>
 bf6:	b1 30       	cpi	r27, 0x01	; 1
 bf8:	91 f0       	breq	.+36     	; 0xc1e <__fixunssfsi+0x4c>
 bfa:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_zero>
 bfe:	b1 e0       	ldi	r27, 0x01	; 1
 c00:	08 95       	ret
 c02:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_zero>
 c06:	67 2f       	mov	r22, r23
 c08:	78 2f       	mov	r23, r24
 c0a:	88 27       	eor	r24, r24
 c0c:	b8 5f       	subi	r27, 0xF8	; 248
 c0e:	39 f0       	breq	.+14     	; 0xc1e <__fixunssfsi+0x4c>
 c10:	b9 3f       	cpi	r27, 0xF9	; 249
 c12:	cc f3       	brlt	.-14     	; 0xc06 <__fixunssfsi+0x34>
 c14:	86 95       	lsr	r24
 c16:	77 95       	ror	r23
 c18:	67 95       	ror	r22
 c1a:	b3 95       	inc	r27
 c1c:	d9 f7       	brne	.-10     	; 0xc14 <__fixunssfsi+0x42>
 c1e:	3e f4       	brtc	.+14     	; 0xc2e <__fixunssfsi+0x5c>
 c20:	90 95       	com	r25
 c22:	80 95       	com	r24
 c24:	70 95       	com	r23
 c26:	61 95       	neg	r22
 c28:	7f 4f       	sbci	r23, 0xFF	; 255
 c2a:	8f 4f       	sbci	r24, 0xFF	; 255
 c2c:	9f 4f       	sbci	r25, 0xFF	; 255
 c2e:	08 95       	ret

00000c30 <__floatunsisf>:
 c30:	e8 94       	clt
 c32:	09 c0       	rjmp	.+18     	; 0xc46 <__floatsisf+0x12>

00000c34 <__floatsisf>:
 c34:	97 fb       	bst	r25, 7
 c36:	3e f4       	brtc	.+14     	; 0xc46 <__floatsisf+0x12>
 c38:	90 95       	com	r25
 c3a:	80 95       	com	r24
 c3c:	70 95       	com	r23
 c3e:	61 95       	neg	r22
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	99 23       	and	r25, r25
 c48:	a9 f0       	breq	.+42     	; 0xc74 <__floatsisf+0x40>
 c4a:	f9 2f       	mov	r31, r25
 c4c:	96 e9       	ldi	r25, 0x96	; 150
 c4e:	bb 27       	eor	r27, r27
 c50:	93 95       	inc	r25
 c52:	f6 95       	lsr	r31
 c54:	87 95       	ror	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	b7 95       	ror	r27
 c5c:	f1 11       	cpse	r31, r1
 c5e:	f8 cf       	rjmp	.-16     	; 0xc50 <__floatsisf+0x1c>
 c60:	fa f4       	brpl	.+62     	; 0xca0 <__floatsisf+0x6c>
 c62:	bb 0f       	add	r27, r27
 c64:	11 f4       	brne	.+4      	; 0xc6a <__floatsisf+0x36>
 c66:	60 ff       	sbrs	r22, 0
 c68:	1b c0       	rjmp	.+54     	; 0xca0 <__floatsisf+0x6c>
 c6a:	6f 5f       	subi	r22, 0xFF	; 255
 c6c:	7f 4f       	sbci	r23, 0xFF	; 255
 c6e:	8f 4f       	sbci	r24, 0xFF	; 255
 c70:	9f 4f       	sbci	r25, 0xFF	; 255
 c72:	16 c0       	rjmp	.+44     	; 0xca0 <__floatsisf+0x6c>
 c74:	88 23       	and	r24, r24
 c76:	11 f0       	breq	.+4      	; 0xc7c <__floatsisf+0x48>
 c78:	96 e9       	ldi	r25, 0x96	; 150
 c7a:	11 c0       	rjmp	.+34     	; 0xc9e <__floatsisf+0x6a>
 c7c:	77 23       	and	r23, r23
 c7e:	21 f0       	breq	.+8      	; 0xc88 <__floatsisf+0x54>
 c80:	9e e8       	ldi	r25, 0x8E	; 142
 c82:	87 2f       	mov	r24, r23
 c84:	76 2f       	mov	r23, r22
 c86:	05 c0       	rjmp	.+10     	; 0xc92 <__floatsisf+0x5e>
 c88:	66 23       	and	r22, r22
 c8a:	71 f0       	breq	.+28     	; 0xca8 <__floatsisf+0x74>
 c8c:	96 e8       	ldi	r25, 0x86	; 134
 c8e:	86 2f       	mov	r24, r22
 c90:	70 e0       	ldi	r23, 0x00	; 0
 c92:	60 e0       	ldi	r22, 0x00	; 0
 c94:	2a f0       	brmi	.+10     	; 0xca0 <__floatsisf+0x6c>
 c96:	9a 95       	dec	r25
 c98:	66 0f       	add	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	da f7       	brpl	.-10     	; 0xc96 <__floatsisf+0x62>
 ca0:	88 0f       	add	r24, r24
 ca2:	96 95       	lsr	r25
 ca4:	87 95       	ror	r24
 ca6:	97 f9       	bld	r25, 7
 ca8:	08 95       	ret

00000caa <__fp_inf>:
 caa:	97 f9       	bld	r25, 7
 cac:	9f 67       	ori	r25, 0x7F	; 127
 cae:	80 e8       	ldi	r24, 0x80	; 128
 cb0:	70 e0       	ldi	r23, 0x00	; 0
 cb2:	60 e0       	ldi	r22, 0x00	; 0
 cb4:	08 95       	ret

00000cb6 <__fp_nan>:
 cb6:	9f ef       	ldi	r25, 0xFF	; 255
 cb8:	80 ec       	ldi	r24, 0xC0	; 192
 cba:	08 95       	ret

00000cbc <__fp_pscA>:
 cbc:	00 24       	eor	r0, r0
 cbe:	0a 94       	dec	r0
 cc0:	16 16       	cp	r1, r22
 cc2:	17 06       	cpc	r1, r23
 cc4:	18 06       	cpc	r1, r24
 cc6:	09 06       	cpc	r0, r25
 cc8:	08 95       	ret

00000cca <__fp_pscB>:
 cca:	00 24       	eor	r0, r0
 ccc:	0a 94       	dec	r0
 cce:	12 16       	cp	r1, r18
 cd0:	13 06       	cpc	r1, r19
 cd2:	14 06       	cpc	r1, r20
 cd4:	05 06       	cpc	r0, r21
 cd6:	08 95       	ret

00000cd8 <__fp_round>:
 cd8:	09 2e       	mov	r0, r25
 cda:	03 94       	inc	r0
 cdc:	00 0c       	add	r0, r0
 cde:	11 f4       	brne	.+4      	; 0xce4 <__fp_round+0xc>
 ce0:	88 23       	and	r24, r24
 ce2:	52 f0       	brmi	.+20     	; 0xcf8 <__fp_round+0x20>
 ce4:	bb 0f       	add	r27, r27
 ce6:	40 f4       	brcc	.+16     	; 0xcf8 <__fp_round+0x20>
 ce8:	bf 2b       	or	r27, r31
 cea:	11 f4       	brne	.+4      	; 0xcf0 <__fp_round+0x18>
 cec:	60 ff       	sbrs	r22, 0
 cee:	04 c0       	rjmp	.+8      	; 0xcf8 <__fp_round+0x20>
 cf0:	6f 5f       	subi	r22, 0xFF	; 255
 cf2:	7f 4f       	sbci	r23, 0xFF	; 255
 cf4:	8f 4f       	sbci	r24, 0xFF	; 255
 cf6:	9f 4f       	sbci	r25, 0xFF	; 255
 cf8:	08 95       	ret

00000cfa <__fp_split3>:
 cfa:	57 fd       	sbrc	r21, 7
 cfc:	90 58       	subi	r25, 0x80	; 128
 cfe:	44 0f       	add	r20, r20
 d00:	55 1f       	adc	r21, r21
 d02:	59 f0       	breq	.+22     	; 0xd1a <__fp_splitA+0x10>
 d04:	5f 3f       	cpi	r21, 0xFF	; 255
 d06:	71 f0       	breq	.+28     	; 0xd24 <__fp_splitA+0x1a>
 d08:	47 95       	ror	r20

00000d0a <__fp_splitA>:
 d0a:	88 0f       	add	r24, r24
 d0c:	97 fb       	bst	r25, 7
 d0e:	99 1f       	adc	r25, r25
 d10:	61 f0       	breq	.+24     	; 0xd2a <__fp_splitA+0x20>
 d12:	9f 3f       	cpi	r25, 0xFF	; 255
 d14:	79 f0       	breq	.+30     	; 0xd34 <__fp_splitA+0x2a>
 d16:	87 95       	ror	r24
 d18:	08 95       	ret
 d1a:	12 16       	cp	r1, r18
 d1c:	13 06       	cpc	r1, r19
 d1e:	14 06       	cpc	r1, r20
 d20:	55 1f       	adc	r21, r21
 d22:	f2 cf       	rjmp	.-28     	; 0xd08 <__fp_split3+0xe>
 d24:	46 95       	lsr	r20
 d26:	f1 df       	rcall	.-30     	; 0xd0a <__fp_splitA>
 d28:	08 c0       	rjmp	.+16     	; 0xd3a <__fp_splitA+0x30>
 d2a:	16 16       	cp	r1, r22
 d2c:	17 06       	cpc	r1, r23
 d2e:	18 06       	cpc	r1, r24
 d30:	99 1f       	adc	r25, r25
 d32:	f1 cf       	rjmp	.-30     	; 0xd16 <__fp_splitA+0xc>
 d34:	86 95       	lsr	r24
 d36:	71 05       	cpc	r23, r1
 d38:	61 05       	cpc	r22, r1
 d3a:	08 94       	sec
 d3c:	08 95       	ret

00000d3e <__fp_zero>:
 d3e:	e8 94       	clt

00000d40 <__fp_szero>:
 d40:	bb 27       	eor	r27, r27
 d42:	66 27       	eor	r22, r22
 d44:	77 27       	eor	r23, r23
 d46:	cb 01       	movw	r24, r22
 d48:	97 f9       	bld	r25, 7
 d4a:	08 95       	ret

00000d4c <__mulsf3>:
 d4c:	0e 94 b9 06 	call	0xd72	; 0xd72 <__mulsf3x>
 d50:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_round>
 d54:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_pscA>
 d58:	38 f0       	brcs	.+14     	; 0xd68 <__mulsf3+0x1c>
 d5a:	0e 94 65 06 	call	0xcca	; 0xcca <__fp_pscB>
 d5e:	20 f0       	brcs	.+8      	; 0xd68 <__mulsf3+0x1c>
 d60:	95 23       	and	r25, r21
 d62:	11 f0       	breq	.+4      	; 0xd68 <__mulsf3+0x1c>
 d64:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_inf>
 d68:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_nan>
 d6c:	11 24       	eor	r1, r1
 d6e:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_szero>

00000d72 <__mulsf3x>:
 d72:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fp_split3>
 d76:	70 f3       	brcs	.-36     	; 0xd54 <__mulsf3+0x8>

00000d78 <__mulsf3_pse>:
 d78:	95 9f       	mul	r25, r21
 d7a:	c1 f3       	breq	.-16     	; 0xd6c <__mulsf3+0x20>
 d7c:	95 0f       	add	r25, r21
 d7e:	50 e0       	ldi	r21, 0x00	; 0
 d80:	55 1f       	adc	r21, r21
 d82:	62 9f       	mul	r22, r18
 d84:	f0 01       	movw	r30, r0
 d86:	72 9f       	mul	r23, r18
 d88:	bb 27       	eor	r27, r27
 d8a:	f0 0d       	add	r31, r0
 d8c:	b1 1d       	adc	r27, r1
 d8e:	63 9f       	mul	r22, r19
 d90:	aa 27       	eor	r26, r26
 d92:	f0 0d       	add	r31, r0
 d94:	b1 1d       	adc	r27, r1
 d96:	aa 1f       	adc	r26, r26
 d98:	64 9f       	mul	r22, r20
 d9a:	66 27       	eor	r22, r22
 d9c:	b0 0d       	add	r27, r0
 d9e:	a1 1d       	adc	r26, r1
 da0:	66 1f       	adc	r22, r22
 da2:	82 9f       	mul	r24, r18
 da4:	22 27       	eor	r18, r18
 da6:	b0 0d       	add	r27, r0
 da8:	a1 1d       	adc	r26, r1
 daa:	62 1f       	adc	r22, r18
 dac:	73 9f       	mul	r23, r19
 dae:	b0 0d       	add	r27, r0
 db0:	a1 1d       	adc	r26, r1
 db2:	62 1f       	adc	r22, r18
 db4:	83 9f       	mul	r24, r19
 db6:	a0 0d       	add	r26, r0
 db8:	61 1d       	adc	r22, r1
 dba:	22 1f       	adc	r18, r18
 dbc:	74 9f       	mul	r23, r20
 dbe:	33 27       	eor	r19, r19
 dc0:	a0 0d       	add	r26, r0
 dc2:	61 1d       	adc	r22, r1
 dc4:	23 1f       	adc	r18, r19
 dc6:	84 9f       	mul	r24, r20
 dc8:	60 0d       	add	r22, r0
 dca:	21 1d       	adc	r18, r1
 dcc:	82 2f       	mov	r24, r18
 dce:	76 2f       	mov	r23, r22
 dd0:	6a 2f       	mov	r22, r26
 dd2:	11 24       	eor	r1, r1
 dd4:	9f 57       	subi	r25, 0x7F	; 127
 dd6:	50 40       	sbci	r21, 0x00	; 0
 dd8:	9a f0       	brmi	.+38     	; 0xe00 <__mulsf3_pse+0x88>
 dda:	f1 f0       	breq	.+60     	; 0xe18 <__mulsf3_pse+0xa0>
 ddc:	88 23       	and	r24, r24
 dde:	4a f0       	brmi	.+18     	; 0xdf2 <__mulsf3_pse+0x7a>
 de0:	ee 0f       	add	r30, r30
 de2:	ff 1f       	adc	r31, r31
 de4:	bb 1f       	adc	r27, r27
 de6:	66 1f       	adc	r22, r22
 de8:	77 1f       	adc	r23, r23
 dea:	88 1f       	adc	r24, r24
 dec:	91 50       	subi	r25, 0x01	; 1
 dee:	50 40       	sbci	r21, 0x00	; 0
 df0:	a9 f7       	brne	.-22     	; 0xddc <__mulsf3_pse+0x64>
 df2:	9e 3f       	cpi	r25, 0xFE	; 254
 df4:	51 05       	cpc	r21, r1
 df6:	80 f0       	brcs	.+32     	; 0xe18 <__mulsf3_pse+0xa0>
 df8:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_inf>
 dfc:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_szero>
 e00:	5f 3f       	cpi	r21, 0xFF	; 255
 e02:	e4 f3       	brlt	.-8      	; 0xdfc <__mulsf3_pse+0x84>
 e04:	98 3e       	cpi	r25, 0xE8	; 232
 e06:	d4 f3       	brlt	.-12     	; 0xdfc <__mulsf3_pse+0x84>
 e08:	86 95       	lsr	r24
 e0a:	77 95       	ror	r23
 e0c:	67 95       	ror	r22
 e0e:	b7 95       	ror	r27
 e10:	f7 95       	ror	r31
 e12:	e7 95       	ror	r30
 e14:	9f 5f       	subi	r25, 0xFF	; 255
 e16:	c1 f7       	brne	.-16     	; 0xe08 <__mulsf3_pse+0x90>
 e18:	fe 2b       	or	r31, r30
 e1a:	88 0f       	add	r24, r24
 e1c:	91 1d       	adc	r25, r1
 e1e:	96 95       	lsr	r25
 e20:	87 95       	ror	r24
 e22:	97 f9       	bld	r25, 7
 e24:	08 95       	ret

00000e26 <__divmodhi4>:
 e26:	97 fb       	bst	r25, 7
 e28:	07 2e       	mov	r0, r23
 e2a:	16 f4       	brtc	.+4      	; 0xe30 <__divmodhi4+0xa>
 e2c:	00 94       	com	r0
 e2e:	07 d0       	rcall	.+14     	; 0xe3e <__divmodhi4_neg1>
 e30:	77 fd       	sbrc	r23, 7
 e32:	09 d0       	rcall	.+18     	; 0xe46 <__divmodhi4_neg2>
 e34:	0e 94 36 07 	call	0xe6c	; 0xe6c <__udivmodhi4>
 e38:	07 fc       	sbrc	r0, 7
 e3a:	05 d0       	rcall	.+10     	; 0xe46 <__divmodhi4_neg2>
 e3c:	3e f4       	brtc	.+14     	; 0xe4c <__divmodhi4_exit>

00000e3e <__divmodhi4_neg1>:
 e3e:	90 95       	com	r25
 e40:	81 95       	neg	r24
 e42:	9f 4f       	sbci	r25, 0xFF	; 255
 e44:	08 95       	ret

00000e46 <__divmodhi4_neg2>:
 e46:	70 95       	com	r23
 e48:	61 95       	neg	r22
 e4a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e4c <__divmodhi4_exit>:
 e4c:	08 95       	ret

00000e4e <__umulhisi3>:
 e4e:	a2 9f       	mul	r26, r18
 e50:	b0 01       	movw	r22, r0
 e52:	b3 9f       	mul	r27, r19
 e54:	c0 01       	movw	r24, r0
 e56:	a3 9f       	mul	r26, r19
 e58:	70 0d       	add	r23, r0
 e5a:	81 1d       	adc	r24, r1
 e5c:	11 24       	eor	r1, r1
 e5e:	91 1d       	adc	r25, r1
 e60:	b2 9f       	mul	r27, r18
 e62:	70 0d       	add	r23, r0
 e64:	81 1d       	adc	r24, r1
 e66:	11 24       	eor	r1, r1
 e68:	91 1d       	adc	r25, r1
 e6a:	08 95       	ret

00000e6c <__udivmodhi4>:
 e6c:	aa 1b       	sub	r26, r26
 e6e:	bb 1b       	sub	r27, r27
 e70:	51 e1       	ldi	r21, 0x11	; 17
 e72:	07 c0       	rjmp	.+14     	; 0xe82 <__udivmodhi4_ep>

00000e74 <__udivmodhi4_loop>:
 e74:	aa 1f       	adc	r26, r26
 e76:	bb 1f       	adc	r27, r27
 e78:	a6 17       	cp	r26, r22
 e7a:	b7 07       	cpc	r27, r23
 e7c:	10 f0       	brcs	.+4      	; 0xe82 <__udivmodhi4_ep>
 e7e:	a6 1b       	sub	r26, r22
 e80:	b7 0b       	sbc	r27, r23

00000e82 <__udivmodhi4_ep>:
 e82:	88 1f       	adc	r24, r24
 e84:	99 1f       	adc	r25, r25
 e86:	5a 95       	dec	r21
 e88:	a9 f7       	brne	.-22     	; 0xe74 <__udivmodhi4_loop>
 e8a:	80 95       	com	r24
 e8c:	90 95       	com	r25
 e8e:	bc 01       	movw	r22, r24
 e90:	cd 01       	movw	r24, r26
 e92:	08 95       	ret

00000e94 <__itoa_ncheck>:
 e94:	bb 27       	eor	r27, r27
 e96:	4a 30       	cpi	r20, 0x0A	; 10
 e98:	31 f4       	brne	.+12     	; 0xea6 <__itoa_ncheck+0x12>
 e9a:	99 23       	and	r25, r25
 e9c:	22 f4       	brpl	.+8      	; 0xea6 <__itoa_ncheck+0x12>
 e9e:	bd e2       	ldi	r27, 0x2D	; 45
 ea0:	90 95       	com	r25
 ea2:	81 95       	neg	r24
 ea4:	9f 4f       	sbci	r25, 0xFF	; 255
 ea6:	0c 94 56 07 	jmp	0xeac	; 0xeac <__utoa_common>

00000eaa <__utoa_ncheck>:
 eaa:	bb 27       	eor	r27, r27

00000eac <__utoa_common>:
 eac:	fb 01       	movw	r30, r22
 eae:	55 27       	eor	r21, r21
 eb0:	aa 27       	eor	r26, r26
 eb2:	88 0f       	add	r24, r24
 eb4:	99 1f       	adc	r25, r25
 eb6:	aa 1f       	adc	r26, r26
 eb8:	a4 17       	cp	r26, r20
 eba:	10 f0       	brcs	.+4      	; 0xec0 <__utoa_common+0x14>
 ebc:	a4 1b       	sub	r26, r20
 ebe:	83 95       	inc	r24
 ec0:	50 51       	subi	r21, 0x10	; 16
 ec2:	b9 f7       	brne	.-18     	; 0xeb2 <__utoa_common+0x6>
 ec4:	a0 5d       	subi	r26, 0xD0	; 208
 ec6:	aa 33       	cpi	r26, 0x3A	; 58
 ec8:	08 f0       	brcs	.+2      	; 0xecc <__utoa_common+0x20>
 eca:	a9 5d       	subi	r26, 0xD9	; 217
 ecc:	a1 93       	st	Z+, r26
 ece:	00 97       	sbiw	r24, 0x00	; 0
 ed0:	79 f7       	brne	.-34     	; 0xeb0 <__utoa_common+0x4>
 ed2:	b1 11       	cpse	r27, r1
 ed4:	b1 93       	st	Z+, r27
 ed6:	11 92       	st	Z+, r1
 ed8:	cb 01       	movw	r24, r22
 eda:	0c 94 6f 07 	jmp	0xede	; 0xede <strrev>

00000ede <strrev>:
 ede:	dc 01       	movw	r26, r24
 ee0:	fc 01       	movw	r30, r24
 ee2:	67 2f       	mov	r22, r23
 ee4:	71 91       	ld	r23, Z+
 ee6:	77 23       	and	r23, r23
 ee8:	e1 f7       	brne	.-8      	; 0xee2 <strrev+0x4>
 eea:	32 97       	sbiw	r30, 0x02	; 2
 eec:	04 c0       	rjmp	.+8      	; 0xef6 <strrev+0x18>
 eee:	7c 91       	ld	r23, X
 ef0:	6d 93       	st	X+, r22
 ef2:	70 83       	st	Z, r23
 ef4:	62 91       	ld	r22, -Z
 ef6:	ae 17       	cp	r26, r30
 ef8:	bf 07       	cpc	r27, r31
 efa:	c8 f3       	brcs	.-14     	; 0xeee <strrev+0x10>
 efc:	08 95       	ret

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
