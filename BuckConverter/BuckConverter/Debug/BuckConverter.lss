
BuckConverter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000008da  0000096e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800106  00800106  00000974  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103c  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a46  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b6  00000000  00000000  0000255e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062b  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a3  00000000  00000000  00003643  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000039e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 a3 02 	jmp	0x546	; 0x546 <__vector_20>
  54:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 37       	cpi	r26, 0x75	; 117
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>



int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	6e 97       	sbiw	r28, 0x1e	; 30
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    ADC_init();
  ba:	0e 94 b7 00 	call	0x16e	; 0x16e <ADC_init>
	uart_init();
  be:	0e 94 da 02 	call	0x5b4	; 0x5b4 <uart_init>
	pwm_init();
  c2:	0e 94 4c 02 	call	0x498	; 0x498 <pwm_init>
	tajmer0_init();
  c6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <tajmer0_init>
	
	
	sei();
  ca:	78 94       	sei
#include <util/delay.h>



int main(void)
{
  cc:	82 e3       	ldi	r24, 0x32	; 50
  ce:	90 e0       	ldi	r25, 0x00	; 0
		napon_shunt_AVG =0;
		struja_shunt_AVG =0;
		
		for(i=0; i<br_semplova; i++)
		{
			niz_napona_shunt[i] = merena_struja * 1.068;
  d0:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <merena_struja>
  d4:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <merena_struja+0x1>
			niz_struja_shunt[i] = merena_struja;
  d8:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <merena_struja>
  dc:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <merena_struja+0x1>
  e0:	01 97       	sbiw	r24, 0x01	; 1
    while (1) 
    {
		napon_shunt_AVG =0;
		struja_shunt_AVG =0;
		
		for(i=0; i<br_semplova; i++)
  e2:	b1 f7       	brne	.-20     	; 0xd0 <main+0x2a>
  e4:	82 e3       	ldi	r24, 0x32	; 50
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	01 97       	sbiw	r24, 0x01	; 1
		{
			niz_napona_shunt[i] = merena_struja * 1.068;
			niz_struja_shunt[i] = merena_struja;
		}
		
		for(i=0; i<br_semplova; i++)
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x42>
		
		napon_shunt_AVG = napon_shunt_AVG/br_semplova;
		struja_shunt_AVG = struja_shunt_AVG/br_semplova;
		
		
		if(flag_prekid_10ms == 1)		//slanje putem UART Tx na svakih 10ms. Podesava se u tajmer.c fajlu
  ec:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <flag_prekid_10ms>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	61 f7       	brne	.-40     	; 0xcc <main+0x26>
		{
			flag_prekid_10ms = 0;
  f4:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <flag_prekid_10ms>
		/*
		send_str("");
		itoa( struja_shunt_AVG , bafer, 10);
		send_str(bafer);
		*/
		send_str("  ");
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <send_str>
		itoa( ref_napon_sa_pot , bafer, 10);
 100:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ref_napon_sa_pot>
 104:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ref_napon_sa_pot+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 108:	4a e0       	ldi	r20, 0x0A	; 10
 10a:	be 01       	movw	r22, r28
 10c:	6f 5f       	subi	r22, 0xFF	; 255
 10e:	7f 4f       	sbci	r23, 0xFF	; 255
 110:	0e 94 36 04 	call	0x86c	; 0x86c <__itoa_ncheck>
		send_str(bafer);
 114:	ce 01       	movw	r24, r28
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <send_str>
		
		
		send_str("  ");
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <send_str>
		itoa( mereni_napon , bafer, 10);
 124:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mereni_napon>
 128:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <mereni_napon+0x1>
 12c:	4a e0       	ldi	r20, 0x0A	; 10
 12e:	be 01       	movw	r22, r28
 130:	6f 5f       	subi	r22, 0xFF	; 255
 132:	7f 4f       	sbci	r23, 0xFF	; 255
 134:	0e 94 36 04 	call	0x86c	; 0x86c <__itoa_ncheck>
		send_str(bafer);
 138:	ce 01       	movw	r24, r28
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <send_str>
		
		send_str("  ");
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <send_str>
		itoa( merena_struja , bafer, 10);
 148:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <merena_struja>
 14c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <merena_struja+0x1>
 150:	4a e0       	ldi	r20, 0x0A	; 10
 152:	be 01       	movw	r22, r28
 154:	6f 5f       	subi	r22, 0xFF	; 255
 156:	7f 4f       	sbci	r23, 0xFF	; 255
 158:	0e 94 36 04 	call	0x86c	; 0x86c <__itoa_ncheck>
		send_str(bafer);
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <send_str>
		
		send_str("\n");
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <send_str>
 16c:	af cf       	rjmp	.-162    	; 0xcc <main+0x26>

0000016e <ADC_init>:
volatile const uint8_t del2 = 51.15;
volatile const uint8_t del3 = 4.5454;

void ADC_init()
{
	DDRD |= 1<<DDB7;
 16e:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;					//power reduction off
 170:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
 174:	80 ec       	ldi	r24, 0xC0	; 192
 176:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
 17a:	8e ee       	ldi	r24, 0xEE	; 238
 17c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
 180:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
 184:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 188:	08 95       	ret

0000018a <__vector_21>:
	
}

ISR(ADC_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	
	{
		

	//ADCL mora biti prvi procitan
	adc_low = (uint8_t)ADCL;    //koriste se dva 8-bit registra jer je rezultat AD konverzije 10-bitan
 1ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <adc_low>
	adc_high = (uint8_t)ADCH;
 1b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1b8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_high>
	
		/**stapam rezultate iz dva registra u jednu promenljivu na ovaj nacin**/
		/**rezultat ad konverzije je 10-bit-an, tj. od 0 do 1023**/
		
		if(adc_high==0)
 1bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adc_high>
 1c0:	81 11       	cpse	r24, r1
 1c2:	1c c0       	rjmp	.+56     	; 0x1fc <__vector_21+0x72>
			adc_res[ad_kanal][brojac_sempla] = adc_low;
 1c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <brojac_sempla>
 1ce:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <adc_low>
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	fc 01       	movw	r30, r24
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	e8 0f       	add	r30, r24
 1e8:	f9 1f       	adc	r31, r25
 1ea:	e4 0f       	add	r30, r20
 1ec:	f1 1d       	adc	r31, r1
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ef 5e       	subi	r30, 0xEF	; 239
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	31 83       	std	Z+1, r19	; 0x01
 1f8:	20 83       	st	Z, r18
 1fa:	62 c0       	rjmp	.+196    	; 0x2c0 <__vector_21+0x136>
		else if(adc_high==1)
 1fc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adc_high>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	e9 f4       	brne	.+58     	; 0x23e <__vector_21+0xb4>
			adc_res[ad_kanal][brojac_sempla] = 256 + adc_low;
 204:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <brojac_sempla>
 20e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <adc_low>
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	33 95       	inc	r19
 216:	fc 01       	movw	r30, r24
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	e8 0f       	add	r30, r24
 22a:	f9 1f       	adc	r31, r25
 22c:	e4 0f       	add	r30, r20
 22e:	f1 1d       	adc	r31, r1
 230:	ee 0f       	add	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	ef 5e       	subi	r30, 0xEF	; 239
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	31 83       	std	Z+1, r19	; 0x01
 23a:	20 83       	st	Z, r18
 23c:	41 c0       	rjmp	.+130    	; 0x2c0 <__vector_21+0x136>
		else if(adc_high==2)
 23e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adc_high>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	e9 f4       	brne	.+58     	; 0x280 <__vector_21+0xf6>
			adc_res[ad_kanal][brojac_sempla] = 512 + adc_low;	//256*2
 246:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <brojac_sempla>
 250:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <adc_low>
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	3e 5f       	subi	r19, 0xFE	; 254
 258:	fc 01       	movw	r30, r24
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	e8 0f       	add	r30, r24
 26c:	f9 1f       	adc	r31, r25
 26e:	e4 0f       	add	r30, r20
 270:	f1 1d       	adc	r31, r1
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	ef 5e       	subi	r30, 0xEF	; 239
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	31 83       	std	Z+1, r19	; 0x01
 27c:	20 83       	st	Z, r18
 27e:	20 c0       	rjmp	.+64     	; 0x2c0 <__vector_21+0x136>
		else if(adc_high==3)
 280:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adc_high>
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	e1 f4       	brne	.+56     	; 0x2c0 <__vector_21+0x136>
			adc_res[ad_kanal][brojac_sempla] = 768 + adc_low;	//256*3
 288:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <brojac_sempla>
 292:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <adc_low>
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	3d 5f       	subi	r19, 0xFD	; 253
 29a:	fc 01       	movw	r30, r24
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	e8 0f       	add	r30, r24
 2ae:	f9 1f       	adc	r31, r25
 2b0:	e4 0f       	add	r30, r20
 2b2:	f1 1d       	adc	r31, r1
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	ef 5e       	subi	r30, 0xEF	; 239
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	31 83       	std	Z+1, r19	; 0x01
 2be:	20 83       	st	Z, r18
			
	}
	
	if (ad_kanal==0)
 2c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2c4:	81 11       	cpse	r24, r1
 2c6:	45 c0       	rjmp	.+138    	; 0x352 <__vector_21+0x1c8>
	{
			ref_napon_sa_pot = 0;
 2c8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ref_napon_sa_pot+0x1>
 2cc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ref_napon_sa_pot>
			
			for (i=0; i<BR_SEMPLOVA; i++)
 2d0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <i>
 2d4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <i>
 2d8:	8a 30       	cpi	r24, 0x0A	; 10
 2da:	e0 f4       	brcc	.+56     	; 0x314 <__vector_21+0x18a>
			{
				ref_napon_sa_pot += adc_res[0][i];
 2dc:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <i>
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	ee 0f       	add	r30, r30
 2e4:	ff 1f       	adc	r31, r31
 2e6:	ef 5e       	subi	r30, 0xEF	; 239
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	20 81       	ld	r18, Z
 2ec:	31 81       	ldd	r19, Z+1	; 0x01
 2ee:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ref_napon_sa_pot>
 2f2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ref_napon_sa_pot+0x1>
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ref_napon_sa_pot+0x1>
 2fe:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ref_napon_sa_pot>
	
	if (ad_kanal==0)
	{
			ref_napon_sa_pot = 0;
			
			for (i=0; i<BR_SEMPLOVA; i++)
 302:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <i>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <i>
 30c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <i>
 310:	8a 30       	cpi	r24, 0x0A	; 10
 312:	20 f3       	brcs	.-56     	; 0x2dc <__vector_21+0x152>
			{
				ref_napon_sa_pot += adc_res[0][i];
			}
			ref_napon_sa_pot = (ref_napon_sa_pot/BR_SEMPLOVA) * 19.55;
 314:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <ref_napon_sa_pot>
 318:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <ref_napon_sa_pot+0x1>
 31c:	ad ec       	ldi	r26, 0xCD	; 205
 31e:	bc ec       	ldi	r27, 0xCC	; 204
 320:	0e 94 27 04 	call	0x84e	; 0x84e <__umulhisi3>
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	bc 01       	movw	r22, r24
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 2c 03 	call	0x658	; 0x658 <__floatunsisf>
 33a:	26 e6       	ldi	r18, 0x66	; 102
 33c:	36 e6       	ldi	r19, 0x66	; 102
 33e:	4c e9       	ldi	r20, 0x9C	; 156
 340:	51 e4       	ldi	r21, 0x41	; 65
 342:	0e 94 92 03 	call	0x724	; 0x724 <__mulsf3>
 346:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fixunssfsi>
 34a:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <ref_napon_sa_pot+0x1>
 34e:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <ref_napon_sa_pot>
	
	
	//ref_napon_sa_pot = (adc_res[0] * 19.55);      //  1023 = 20000mV  zadati napon sa potenciometra, skalirano na milivolte i miliampere da se izbegne deljenje
	
	//OCR1A = ref_napon_sa_pot * 20.0;  //top = 400
	OCR1A = 150;
 352:	86 e9       	ldi	r24, 0x96	; 150
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 35a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//merena_struja = adc_res[2] * 4.856;                   // / 935.96) * 4.545;         // 1/0.22=4.545				//1023 = 5A (1.1V ref, preko 0.22Ohm otpornika)
	//mereni_napon = (adc_res[1] * 19.55) - (merena_struja * 1.068);				//1023 = 20V  (1.1V referenca) preko razdelnika
	
	{
	
	ADCSRA &= ~(1<<ADEN);	//iskljucim adc da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 35e:	ea e7       	ldi	r30, 0x7A	; 122
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	8f 77       	andi	r24, 0x7F	; 127
 366:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 368:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if(ad_kanal >= 3)	//kreni opet od nule kad dodjes do poslednjeg; 2, da citam samo prva tri
 372:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	68 f0       	brcs	.+26     	; 0x394 <__vector_21+0x20a>
	{
		ad_kanal = 0;
 37a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		
		brojac_sempla++;
 37e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <brojac_sempla>
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <brojac_sempla>
		if(brojac_sempla >= BR_SEMPLOVA) //5 sempla
 388:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <brojac_sempla>
 38c:	8a 30       	cpi	r24, 0x0A	; 10
 38e:	10 f0       	brcs	.+4      	; 0x394 <__vector_21+0x20a>
			brojac_sempla = 0;
 390:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <brojac_sempla>
	}
	//multipleksiranje ad ulaza; tj. promena ad kanala
	
	switch(ad_kanal)
 394:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	61 f0       	breq	.+24     	; 0x3b4 <__vector_21+0x22a>
 39c:	28 f0       	brcs	.+10     	; 0x3a8 <__vector_21+0x21e>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	91 f0       	breq	.+36     	; 0x3c6 <__vector_21+0x23c>
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	c9 f0       	breq	.+50     	; 0x3d8 <__vector_21+0x24e>
 3a6:	1d c0       	rjmp	.+58     	; 0x3e2 <__vector_21+0x258>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
 3a8:	ec e7       	ldi	r30, 0x7C	; 124
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	8c 7f       	andi	r24, 0xFC	; 252
 3b0:	80 83       	st	Z, r24
		break;
 3b2:	17 c0       	rjmp	.+46     	; 0x3e2 <__vector_21+0x258>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
 3b4:	ec e7       	ldi	r30, 0x7C	; 124
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	8d 7f       	andi	r24, 0xFD	; 253
 3bc:	80 83       	st	Z, r24
				ADMUX |= (0b1);
 3be:	80 81       	ld	r24, Z
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	80 83       	st	Z, r24
		break;
 3c4:	0e c0       	rjmp	.+28     	; 0x3e2 <__vector_21+0x258>
		
		case 2:
				ADMUX &= ~(0b1);		//10;ref internal 1.1V, kanal A2
 3c6:	ec e7       	ldi	r30, 0x7C	; 124
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	8e 7f       	andi	r24, 0xFE	; 254
 3ce:	80 83       	st	Z, r24
				ADMUX |= (0b10);
 3d0:	80 81       	ld	r24, Z
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	80 83       	st	Z, r24
		break;
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <__vector_21+0x258>
		
		case 3:
				ADMUX |= (0b11);		//11;ref internal 1.1V, kanal A3
 3d8:	ec e7       	ldi	r30, 0x7C	; 124
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	83 60       	ori	r24, 0x03	; 3
 3e0:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
 3e2:	ea e7       	ldi	r30, 0x7A	; 122
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	80 6c       	ori	r24, 0xC0	; 192
 3ea:	80 83       	st	Z, r24
	
	}
	
	PIND |= 1<<7;       //togle za osciloskop
 3ec:	4f 9a       	sbi	0x09, 7	; 9

 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	bf 91       	pop	r27
 3f4:	af 91       	pop	r26
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	7f 91       	pop	r23
 3fc:	6f 91       	pop	r22
 3fe:	5f 91       	pop	r21
 400:	4f 91       	pop	r20
 402:	3f 91       	pop	r19
 404:	2f 91       	pop	r18
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <__vector_1>:
	
	
}

ISR(INT0_vect)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	2f 93       	push	r18
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
	
		//interapt opali na rastucu ivicu INT0; ovo sam uradio zbog velike rezolucije enkodera -1024 * 57.5 na izlazu, tj na tocku zbog 2 reduktora
	
	brojac_ext_interaptova++;
 420:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <brojac_ext_interaptova>
 424:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <brojac_ext_interaptova+0x1>
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <brojac_ext_interaptova+0x1>
 42e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <brojac_ext_interaptova>
	

	
		if ( PIND & (1<<PORTD3) )	//smer 1; proverava se logicki nivo drugog kanala
 432:	4b 9b       	sbis	0x09, 3	; 9
 434:	0d c0       	rjmp	.+26     	; 0x450 <__vector_1+0x40>
		{
			smer_obrtanja = 1;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <smer_obrtanja>
			impulsi++;
 43c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <impulsi>
 440:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <impulsi+0x1>
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <impulsi+0x1>
 44a:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <impulsi>
 44e:	0c c0       	rjmp	.+24     	; 0x468 <__vector_1+0x58>
		} 
		else								//smer 2
		{
			smer_obrtanja = 2;
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <smer_obrtanja>
			impulsi--;	
 456:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <impulsi>
 45a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <impulsi+0x1>
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <impulsi+0x1>
 464:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <impulsi>
	
	
	
	
	
	if(impulsi > 58879)		//za apsolutno merenje ugla
 468:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <impulsi>
 46c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <impulsi+0x1>
 470:	81 15       	cp	r24, r1
 472:	96 4e       	sbci	r25, 0xE6	; 230
 474:	28 f0       	brcs	.+10     	; 0x480 <__vector_1+0x70>
		impulsi = 0;
 476:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <impulsi+0x1>
 47a:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <impulsi>
 47e:	04 c0       	rjmp	.+8      	; 0x488 <__vector_1+0x78>
	else if(impulsi < 0 )
 480:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <impulsi>
 484:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <impulsi+0x1>
	//problem se javlja kada ove impulse zelim da iskoristim za merenje brzine, a pri prelazu preko granicne vrednosti sa 58879 na 0 i obrnuto
	//zato sam ubacio jos jedan brojac koji broji prekide "brojac_ext_interaptova" relativno, a ne apsolutno
		
	//ugao = impulsi / 57.5;	//skaliranje, 58879 impulsa po krugu odgovara 360 stepeni tocka; !!!atmega se ovde zaglavi pri umerenoj frekvenciji prekida!!!
	//ugao = 100;
}
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <pwm_init>:
#include "common.h"

void pwm_init()
{
	
	DDRB |= 1<<DDB0; //dig 8
 498:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << DDB1)|(1 << DDB2); //izlazni pinovi za PWM - D9 i D10 na Arduino Uno ploci
 49a:	84 b1       	in	r24, 0x04	; 4
 49c:	86 60       	ori	r24, 0x06	; 6
 49e:	84 b9       	out	0x04, r24	; 4
	

	ICR1 = 400;			//frekvencija ~ 40 kHz
 4a0:	80 e9       	ldi	r24, 0x90	; 144
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 4a8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0;		    //faktor ispune 0% 
 4ac:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4b0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//OCR1B = OCR1A;
	
	TCCR1A = 0b10000010;		//jedan izlaz, fast pwm
 4b4:	82 e8       	ldi	r24, 0x82	; 130
 4b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B |= (1 << WGM13)|(1 << WGM12);		// set Fast PWM mode using ICR1 as TOP
 4ba:	e1 e8       	ldi	r30, 0x81	; 129
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	88 61       	ori	r24, 0x18	; 24
 4c2:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);		// START the timer with no prescaler	
 4c4:	80 81       	ld	r24, Z
 4c6:	81 60       	ori	r24, 0x01	; 1
 4c8:	80 83       	st	Z, r24
 4ca:	08 95       	ret

000004cc <__vector_11>:
	
	//upis i promena faktora ispune se vrsi u ad konverziji
}

ISR(TIMER1_COMPA_vect)
{
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
	//ADCSRA |= 1<<ADSC; //start ad conversion
	
	PINB |= 0b1;
 4d6:	18 9a       	sbi	0x03, 0	; 3
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <tajmer0_init>:
const volatile double stepeniPOms_to_rpm = 16.67;		//faktor konverzije izmedju izmerenog broja stepeni u prozoru od 10ms u obrtaje po minutu
volatile double relativni_ugao = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 4e6:	93 e0       	ldi	r25, 0x03	; 3
 4e8:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 4ea:	99 ef       	ldi	r25, 0xF9	; 249
 4ec:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 4ee:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRB |= 1<<PINB5;
 4f2:	25 9a       	sbi	0x04, 5	; 4
 4f4:	08 95       	ret

000004f6 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	0f 92       	push	r0
 4fe:	11 24       	eor	r1, r1
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
 50a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <brojac_prekida_tajmera0>
 50e:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <brojac_prekida_tajmera0+0x1>
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <brojac_prekida_tajmera0+0x1>
 518:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)
 51c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <brojac_prekida_tajmera0>
 520:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <brojac_prekida_tajmera0+0x1>
 524:	0a 97       	sbiw	r24, 0x0a	; 10
 526:	41 f4       	brne	.+16     	; 0x538 <__vector_14+0x42>
	{
		brojac_prekida_tajmera0 = 0;
 528:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <brojac_prekida_tajmera0+0x1>
 52c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <flag_prekid_10ms>
		PINB |= 1<<PINB5;					//toogle pin 5 - DIG13, test da vidim da li je korektna frekvencija
 536:	1d 9a       	sbi	0x03, 5	; 3
	
	
	


 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 546:	1f 92       	push	r1
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	11 24       	eor	r1, r1
	poslato=0;
 550:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <poslato>
}
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__vector_18>:

ISR(USART_RX_vect)
{
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	8f 93       	push	r24
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
	input_char=UDR0;
 56e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 572:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 576:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buff_size>
 57a:	88 30       	cpi	r24, 0x08	; 8
 57c:	98 f4       	brcc	.+38     	; 0x5a4 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 57e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <buff_size>
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <input_char>
 588:	e3 59       	subi	r30, 0x93	; 147
 58a:	fe 4f       	sbci	r31, 0xFE	; 254
 58c:	80 83       	st	Z, r24
		buff_size++;
 58e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buff_size>
 592:	8f 5f       	subi	r24, 0xFF	; 255
 594:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <buff_size>
		input_buffer[buff_size]='\0';
 598:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <buff_size>
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	e3 59       	subi	r30, 0x93	; 147
 5a0:	fe 4f       	sbci	r31, 0xFE	; 254
 5a2:	10 82       	st	Z, r1
	}
}
 5a4:	ff 91       	pop	r31
 5a6:	ef 91       	pop	r30
 5a8:	8f 91       	pop	r24
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 5ba:	88 ed       	ldi	r24, 0xD8	; 216
 5bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 5c0:	86 e0       	ldi	r24, 0x06	; 6
 5c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 5c6:	8f ec       	ldi	r24, 0xCF	; 207
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 5ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 5d2:	08 95       	ret

000005d4 <send_str>:
}

void send_str(unsigned char *str)
{
 5d4:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 5d6:	90 81       	ld	r25, Z
 5d8:	99 23       	and	r25, r25
 5da:	71 f0       	breq	.+28     	; 0x5f8 <send_str+0x24>
 5dc:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 5de:	a6 ec       	ldi	r26, 0xC6	; 198
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 5e4:	9c 93       	st	X, r25
		poslato=1;
 5e6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <poslato>
		while (poslato);
 5ea:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <poslato>
 5ee:	91 11       	cpse	r25, r1
 5f0:	fc cf       	rjmp	.-8      	; 0x5ea <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 5f2:	91 91       	ld	r25, Z+
 5f4:	91 11       	cpse	r25, r1
 5f6:	f6 cf       	rjmp	.-20     	; 0x5e4 <send_str+0x10>
 5f8:	08 95       	ret

000005fa <__fixunssfsi>:
 5fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__fp_splitA>
 5fe:	88 f0       	brcs	.+34     	; 0x622 <__fixunssfsi+0x28>
 600:	9f 57       	subi	r25, 0x7F	; 127
 602:	98 f0       	brcs	.+38     	; 0x62a <__fixunssfsi+0x30>
 604:	b9 2f       	mov	r27, r25
 606:	99 27       	eor	r25, r25
 608:	b7 51       	subi	r27, 0x17	; 23
 60a:	b0 f0       	brcs	.+44     	; 0x638 <__fixunssfsi+0x3e>
 60c:	e1 f0       	breq	.+56     	; 0x646 <__fixunssfsi+0x4c>
 60e:	66 0f       	add	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	1a f0       	brmi	.+6      	; 0x61e <__fixunssfsi+0x24>
 618:	ba 95       	dec	r27
 61a:	c9 f7       	brne	.-14     	; 0x60e <__fixunssfsi+0x14>
 61c:	14 c0       	rjmp	.+40     	; 0x646 <__fixunssfsi+0x4c>
 61e:	b1 30       	cpi	r27, 0x01	; 1
 620:	91 f0       	breq	.+36     	; 0x646 <__fixunssfsi+0x4c>
 622:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_zero>
 626:	b1 e0       	ldi	r27, 0x01	; 1
 628:	08 95       	ret
 62a:	0c 94 8b 03 	jmp	0x716	; 0x716 <__fp_zero>
 62e:	67 2f       	mov	r22, r23
 630:	78 2f       	mov	r23, r24
 632:	88 27       	eor	r24, r24
 634:	b8 5f       	subi	r27, 0xF8	; 248
 636:	39 f0       	breq	.+14     	; 0x646 <__fixunssfsi+0x4c>
 638:	b9 3f       	cpi	r27, 0xF9	; 249
 63a:	cc f3       	brlt	.-14     	; 0x62e <__fixunssfsi+0x34>
 63c:	86 95       	lsr	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b3 95       	inc	r27
 644:	d9 f7       	brne	.-10     	; 0x63c <__fixunssfsi+0x42>
 646:	3e f4       	brtc	.+14     	; 0x656 <__fixunssfsi+0x5c>
 648:	90 95       	com	r25
 64a:	80 95       	com	r24
 64c:	70 95       	com	r23
 64e:	61 95       	neg	r22
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	8f 4f       	sbci	r24, 0xFF	; 255
 654:	9f 4f       	sbci	r25, 0xFF	; 255
 656:	08 95       	ret

00000658 <__floatunsisf>:
 658:	e8 94       	clt
 65a:	09 c0       	rjmp	.+18     	; 0x66e <__floatsisf+0x12>

0000065c <__floatsisf>:
 65c:	97 fb       	bst	r25, 7
 65e:	3e f4       	brtc	.+14     	; 0x66e <__floatsisf+0x12>
 660:	90 95       	com	r25
 662:	80 95       	com	r24
 664:	70 95       	com	r23
 666:	61 95       	neg	r22
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	8f 4f       	sbci	r24, 0xFF	; 255
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	99 23       	and	r25, r25
 670:	a9 f0       	breq	.+42     	; 0x69c <__floatsisf+0x40>
 672:	f9 2f       	mov	r31, r25
 674:	96 e9       	ldi	r25, 0x96	; 150
 676:	bb 27       	eor	r27, r27
 678:	93 95       	inc	r25
 67a:	f6 95       	lsr	r31
 67c:	87 95       	ror	r24
 67e:	77 95       	ror	r23
 680:	67 95       	ror	r22
 682:	b7 95       	ror	r27
 684:	f1 11       	cpse	r31, r1
 686:	f8 cf       	rjmp	.-16     	; 0x678 <__floatsisf+0x1c>
 688:	fa f4       	brpl	.+62     	; 0x6c8 <__floatsisf+0x6c>
 68a:	bb 0f       	add	r27, r27
 68c:	11 f4       	brne	.+4      	; 0x692 <__floatsisf+0x36>
 68e:	60 ff       	sbrs	r22, 0
 690:	1b c0       	rjmp	.+54     	; 0x6c8 <__floatsisf+0x6c>
 692:	6f 5f       	subi	r22, 0xFF	; 255
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	16 c0       	rjmp	.+44     	; 0x6c8 <__floatsisf+0x6c>
 69c:	88 23       	and	r24, r24
 69e:	11 f0       	breq	.+4      	; 0x6a4 <__floatsisf+0x48>
 6a0:	96 e9       	ldi	r25, 0x96	; 150
 6a2:	11 c0       	rjmp	.+34     	; 0x6c6 <__floatsisf+0x6a>
 6a4:	77 23       	and	r23, r23
 6a6:	21 f0       	breq	.+8      	; 0x6b0 <__floatsisf+0x54>
 6a8:	9e e8       	ldi	r25, 0x8E	; 142
 6aa:	87 2f       	mov	r24, r23
 6ac:	76 2f       	mov	r23, r22
 6ae:	05 c0       	rjmp	.+10     	; 0x6ba <__floatsisf+0x5e>
 6b0:	66 23       	and	r22, r22
 6b2:	71 f0       	breq	.+28     	; 0x6d0 <__floatsisf+0x74>
 6b4:	96 e8       	ldi	r25, 0x86	; 134
 6b6:	86 2f       	mov	r24, r22
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	2a f0       	brmi	.+10     	; 0x6c8 <__floatsisf+0x6c>
 6be:	9a 95       	dec	r25
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	da f7       	brpl	.-10     	; 0x6be <__floatsisf+0x62>
 6c8:	88 0f       	add	r24, r24
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	97 f9       	bld	r25, 7
 6d0:	08 95       	ret

000006d2 <__fp_split3>:
 6d2:	57 fd       	sbrc	r21, 7
 6d4:	90 58       	subi	r25, 0x80	; 128
 6d6:	44 0f       	add	r20, r20
 6d8:	55 1f       	adc	r21, r21
 6da:	59 f0       	breq	.+22     	; 0x6f2 <__fp_splitA+0x10>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	71 f0       	breq	.+28     	; 0x6fc <__fp_splitA+0x1a>
 6e0:	47 95       	ror	r20

000006e2 <__fp_splitA>:
 6e2:	88 0f       	add	r24, r24
 6e4:	97 fb       	bst	r25, 7
 6e6:	99 1f       	adc	r25, r25
 6e8:	61 f0       	breq	.+24     	; 0x702 <__fp_splitA+0x20>
 6ea:	9f 3f       	cpi	r25, 0xFF	; 255
 6ec:	79 f0       	breq	.+30     	; 0x70c <__fp_splitA+0x2a>
 6ee:	87 95       	ror	r24
 6f0:	08 95       	ret
 6f2:	12 16       	cp	r1, r18
 6f4:	13 06       	cpc	r1, r19
 6f6:	14 06       	cpc	r1, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	f2 cf       	rjmp	.-28     	; 0x6e0 <__fp_split3+0xe>
 6fc:	46 95       	lsr	r20
 6fe:	f1 df       	rcall	.-30     	; 0x6e2 <__fp_splitA>
 700:	08 c0       	rjmp	.+16     	; 0x712 <__fp_splitA+0x30>
 702:	16 16       	cp	r1, r22
 704:	17 06       	cpc	r1, r23
 706:	18 06       	cpc	r1, r24
 708:	99 1f       	adc	r25, r25
 70a:	f1 cf       	rjmp	.-30     	; 0x6ee <__fp_splitA+0xc>
 70c:	86 95       	lsr	r24
 70e:	71 05       	cpc	r23, r1
 710:	61 05       	cpc	r22, r1
 712:	08 94       	sec
 714:	08 95       	ret

00000716 <__fp_zero>:
 716:	e8 94       	clt

00000718 <__fp_szero>:
 718:	bb 27       	eor	r27, r27
 71a:	66 27       	eor	r22, r22
 71c:	77 27       	eor	r23, r23
 71e:	cb 01       	movw	r24, r22
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret

00000724 <__mulsf3>:
 724:	0e 94 a5 03 	call	0x74a	; 0x74a <__mulsf3x>
 728:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_round>
 72c:	0e 94 08 04 	call	0x810	; 0x810 <__fp_pscA>
 730:	38 f0       	brcs	.+14     	; 0x740 <__mulsf3+0x1c>
 732:	0e 94 0f 04 	call	0x81e	; 0x81e <__fp_pscB>
 736:	20 f0       	brcs	.+8      	; 0x740 <__mulsf3+0x1c>
 738:	95 23       	and	r25, r21
 73a:	11 f0       	breq	.+4      	; 0x740 <__mulsf3+0x1c>
 73c:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__fp_inf>
 740:	0c 94 05 04 	jmp	0x80a	; 0x80a <__fp_nan>
 744:	11 24       	eor	r1, r1
 746:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_szero>

0000074a <__mulsf3x>:
 74a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_split3>
 74e:	70 f3       	brcs	.-36     	; 0x72c <__mulsf3+0x8>

00000750 <__mulsf3_pse>:
 750:	95 9f       	mul	r25, r21
 752:	c1 f3       	breq	.-16     	; 0x744 <__mulsf3+0x20>
 754:	95 0f       	add	r25, r21
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	55 1f       	adc	r21, r21
 75a:	62 9f       	mul	r22, r18
 75c:	f0 01       	movw	r30, r0
 75e:	72 9f       	mul	r23, r18
 760:	bb 27       	eor	r27, r27
 762:	f0 0d       	add	r31, r0
 764:	b1 1d       	adc	r27, r1
 766:	63 9f       	mul	r22, r19
 768:	aa 27       	eor	r26, r26
 76a:	f0 0d       	add	r31, r0
 76c:	b1 1d       	adc	r27, r1
 76e:	aa 1f       	adc	r26, r26
 770:	64 9f       	mul	r22, r20
 772:	66 27       	eor	r22, r22
 774:	b0 0d       	add	r27, r0
 776:	a1 1d       	adc	r26, r1
 778:	66 1f       	adc	r22, r22
 77a:	82 9f       	mul	r24, r18
 77c:	22 27       	eor	r18, r18
 77e:	b0 0d       	add	r27, r0
 780:	a1 1d       	adc	r26, r1
 782:	62 1f       	adc	r22, r18
 784:	73 9f       	mul	r23, r19
 786:	b0 0d       	add	r27, r0
 788:	a1 1d       	adc	r26, r1
 78a:	62 1f       	adc	r22, r18
 78c:	83 9f       	mul	r24, r19
 78e:	a0 0d       	add	r26, r0
 790:	61 1d       	adc	r22, r1
 792:	22 1f       	adc	r18, r18
 794:	74 9f       	mul	r23, r20
 796:	33 27       	eor	r19, r19
 798:	a0 0d       	add	r26, r0
 79a:	61 1d       	adc	r22, r1
 79c:	23 1f       	adc	r18, r19
 79e:	84 9f       	mul	r24, r20
 7a0:	60 0d       	add	r22, r0
 7a2:	21 1d       	adc	r18, r1
 7a4:	82 2f       	mov	r24, r18
 7a6:	76 2f       	mov	r23, r22
 7a8:	6a 2f       	mov	r22, r26
 7aa:	11 24       	eor	r1, r1
 7ac:	9f 57       	subi	r25, 0x7F	; 127
 7ae:	50 40       	sbci	r21, 0x00	; 0
 7b0:	9a f0       	brmi	.+38     	; 0x7d8 <__mulsf3_pse+0x88>
 7b2:	f1 f0       	breq	.+60     	; 0x7f0 <__mulsf3_pse+0xa0>
 7b4:	88 23       	and	r24, r24
 7b6:	4a f0       	brmi	.+18     	; 0x7ca <__mulsf3_pse+0x7a>
 7b8:	ee 0f       	add	r30, r30
 7ba:	ff 1f       	adc	r31, r31
 7bc:	bb 1f       	adc	r27, r27
 7be:	66 1f       	adc	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	91 50       	subi	r25, 0x01	; 1
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	a9 f7       	brne	.-22     	; 0x7b4 <__mulsf3_pse+0x64>
 7ca:	9e 3f       	cpi	r25, 0xFE	; 254
 7cc:	51 05       	cpc	r21, r1
 7ce:	80 f0       	brcs	.+32     	; 0x7f0 <__mulsf3_pse+0xa0>
 7d0:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__fp_inf>
 7d4:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_szero>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	e4 f3       	brlt	.-8      	; 0x7d4 <__mulsf3_pse+0x84>
 7dc:	98 3e       	cpi	r25, 0xE8	; 232
 7de:	d4 f3       	brlt	.-12     	; 0x7d4 <__mulsf3_pse+0x84>
 7e0:	86 95       	lsr	r24
 7e2:	77 95       	ror	r23
 7e4:	67 95       	ror	r22
 7e6:	b7 95       	ror	r27
 7e8:	f7 95       	ror	r31
 7ea:	e7 95       	ror	r30
 7ec:	9f 5f       	subi	r25, 0xFF	; 255
 7ee:	c1 f7       	brne	.-16     	; 0x7e0 <__mulsf3_pse+0x90>
 7f0:	fe 2b       	or	r31, r30
 7f2:	88 0f       	add	r24, r24
 7f4:	91 1d       	adc	r25, r1
 7f6:	96 95       	lsr	r25
 7f8:	87 95       	ror	r24
 7fa:	97 f9       	bld	r25, 7
 7fc:	08 95       	ret

000007fe <__fp_inf>:
 7fe:	97 f9       	bld	r25, 7
 800:	9f 67       	ori	r25, 0x7F	; 127
 802:	80 e8       	ldi	r24, 0x80	; 128
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	08 95       	ret

0000080a <__fp_nan>:
 80a:	9f ef       	ldi	r25, 0xFF	; 255
 80c:	80 ec       	ldi	r24, 0xC0	; 192
 80e:	08 95       	ret

00000810 <__fp_pscA>:
 810:	00 24       	eor	r0, r0
 812:	0a 94       	dec	r0
 814:	16 16       	cp	r1, r22
 816:	17 06       	cpc	r1, r23
 818:	18 06       	cpc	r1, r24
 81a:	09 06       	cpc	r0, r25
 81c:	08 95       	ret

0000081e <__fp_pscB>:
 81e:	00 24       	eor	r0, r0
 820:	0a 94       	dec	r0
 822:	12 16       	cp	r1, r18
 824:	13 06       	cpc	r1, r19
 826:	14 06       	cpc	r1, r20
 828:	05 06       	cpc	r0, r21
 82a:	08 95       	ret

0000082c <__fp_round>:
 82c:	09 2e       	mov	r0, r25
 82e:	03 94       	inc	r0
 830:	00 0c       	add	r0, r0
 832:	11 f4       	brne	.+4      	; 0x838 <__fp_round+0xc>
 834:	88 23       	and	r24, r24
 836:	52 f0       	brmi	.+20     	; 0x84c <__fp_round+0x20>
 838:	bb 0f       	add	r27, r27
 83a:	40 f4       	brcc	.+16     	; 0x84c <__fp_round+0x20>
 83c:	bf 2b       	or	r27, r31
 83e:	11 f4       	brne	.+4      	; 0x844 <__fp_round+0x18>
 840:	60 ff       	sbrs	r22, 0
 842:	04 c0       	rjmp	.+8      	; 0x84c <__fp_round+0x20>
 844:	6f 5f       	subi	r22, 0xFF	; 255
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	8f 4f       	sbci	r24, 0xFF	; 255
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	08 95       	ret

0000084e <__umulhisi3>:
 84e:	a2 9f       	mul	r26, r18
 850:	b0 01       	movw	r22, r0
 852:	b3 9f       	mul	r27, r19
 854:	c0 01       	movw	r24, r0
 856:	a3 9f       	mul	r26, r19
 858:	70 0d       	add	r23, r0
 85a:	81 1d       	adc	r24, r1
 85c:	11 24       	eor	r1, r1
 85e:	91 1d       	adc	r25, r1
 860:	b2 9f       	mul	r27, r18
 862:	70 0d       	add	r23, r0
 864:	81 1d       	adc	r24, r1
 866:	11 24       	eor	r1, r1
 868:	91 1d       	adc	r25, r1
 86a:	08 95       	ret

0000086c <__itoa_ncheck>:
 86c:	bb 27       	eor	r27, r27
 86e:	4a 30       	cpi	r20, 0x0A	; 10
 870:	31 f4       	brne	.+12     	; 0x87e <__itoa_ncheck+0x12>
 872:	99 23       	and	r25, r25
 874:	22 f4       	brpl	.+8      	; 0x87e <__itoa_ncheck+0x12>
 876:	bd e2       	ldi	r27, 0x2D	; 45
 878:	90 95       	com	r25
 87a:	81 95       	neg	r24
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	0c 94 42 04 	jmp	0x884	; 0x884 <__utoa_common>

00000882 <__utoa_ncheck>:
 882:	bb 27       	eor	r27, r27

00000884 <__utoa_common>:
 884:	fb 01       	movw	r30, r22
 886:	55 27       	eor	r21, r21
 888:	aa 27       	eor	r26, r26
 88a:	88 0f       	add	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	aa 1f       	adc	r26, r26
 890:	a4 17       	cp	r26, r20
 892:	10 f0       	brcs	.+4      	; 0x898 <__utoa_common+0x14>
 894:	a4 1b       	sub	r26, r20
 896:	83 95       	inc	r24
 898:	50 51       	subi	r21, 0x10	; 16
 89a:	b9 f7       	brne	.-18     	; 0x88a <__utoa_common+0x6>
 89c:	a0 5d       	subi	r26, 0xD0	; 208
 89e:	aa 33       	cpi	r26, 0x3A	; 58
 8a0:	08 f0       	brcs	.+2      	; 0x8a4 <__utoa_common+0x20>
 8a2:	a9 5d       	subi	r26, 0xD9	; 217
 8a4:	a1 93       	st	Z+, r26
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	79 f7       	brne	.-34     	; 0x888 <__utoa_common+0x4>
 8aa:	b1 11       	cpse	r27, r1
 8ac:	b1 93       	st	Z+, r27
 8ae:	11 92       	st	Z+, r1
 8b0:	cb 01       	movw	r24, r22
 8b2:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <strrev>

000008b6 <strrev>:
 8b6:	dc 01       	movw	r26, r24
 8b8:	fc 01       	movw	r30, r24
 8ba:	67 2f       	mov	r22, r23
 8bc:	71 91       	ld	r23, Z+
 8be:	77 23       	and	r23, r23
 8c0:	e1 f7       	brne	.-8      	; 0x8ba <strrev+0x4>
 8c2:	32 97       	sbiw	r30, 0x02	; 2
 8c4:	04 c0       	rjmp	.+8      	; 0x8ce <strrev+0x18>
 8c6:	7c 91       	ld	r23, X
 8c8:	6d 93       	st	X+, r22
 8ca:	70 83       	st	Z, r23
 8cc:	62 91       	ld	r22, -Z
 8ce:	ae 17       	cp	r26, r30
 8d0:	bf 07       	cpc	r27, r31
 8d2:	c8 f3       	brcs	.-14     	; 0x8c6 <strrev+0x10>
 8d4:	08 95       	ret

000008d6 <_exit>:
 8d6:	f8 94       	cli

000008d8 <__stop_program>:
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <__stop_program>
