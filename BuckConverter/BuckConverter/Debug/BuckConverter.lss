
BuckConverter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000e84  00000f18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c7  00800110  00800110  00000f28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011bc  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a89  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1a  00000000  00000000  00002cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  000036f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000605  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054a  00000000  00000000  00003f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000044c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 c3 04 	jmp	0x986	; 0x986 <__vector_20>
  54:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 3d       	cpi	r26, 0xD7	; 215
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 40 07 	jmp	0xe80	; 0xe80 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>



int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	6e 97       	sbiw	r28, 0x1e	; 30
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    ADC_init();
  ba:	0e 94 01 01 	call	0x202	; 0x202 <ADC_init>
	uart_init();
  be:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <uart_init>
	pwm_init();
  c2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pwm_init>
	tajmer0_init();
  c6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <tajmer0_init>
	
	
	sei();
  ca:	78 94       	sei
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  cc:	0f 2e       	mov	r0, r31
  ce:	f4 e6       	ldi	r31, 0x64	; 100
  d0:	cf 2e       	mov	r12, r31
  d2:	d1 2c       	mov	r13, r1
  d4:	e1 2c       	mov	r14, r1
  d6:	f1 2c       	mov	r15, r1
  d8:	f0 2d       	mov	r31, r0
  da:	14 e6       	ldi	r17, 0x64	; 100
#include <util/delay.h>



int main(void)
{
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
		napon_shunt_AVG =0;
		struja_shunt_AVG =0;
		
		for(i=0; i<br_semplova; i++)
		{
			niz_napona_shunt[i] = merena_struja * 1.068;
  e0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <merena_struja>
  e4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <merena_struja+0x1>
			niz_struja_shunt[i] = merena_struja;
  e8:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <merena_struja>
  ec:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <merena_struja+0x1>
  f0:	01 97       	sbiw	r24, 0x01	; 1
    while (1) 
    {
		napon_shunt_AVG =0;
		struja_shunt_AVG =0;
		
		for(i=0; i<br_semplova; i++)
  f2:	b1 f7       	brne	.-20     	; 0xe0 <main+0x3a>
  f4:	82 e3       	ldi	r24, 0x32	; 50
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
		{
			niz_napona_shunt[i] = merena_struja * 1.068;
			niz_struja_shunt[i] = merena_struja;
		}
		
		for(i=0; i<br_semplova; i++)
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x52>
		
		napon_shunt_AVG = napon_shunt_AVG/br_semplova;
		struja_shunt_AVG = struja_shunt_AVG/br_semplova;
		
		
		if(flag_prekid_10ms == 1)		//slanje putem UART Tx na svakih 10ms. Podesava se u tajmer.c fajlu
  fc:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <flag_prekid_10ms>
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	61 f7       	brne	.-40     	; 0xdc <main+0x36>
		{
			flag_prekid_10ms = 0;
 104:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <flag_prekid_10ms>
		/*
		send_str("");
		itoa( struja_shunt_AVG , bafer, 10);
		send_str(bafer);
		*/
		send_str("  ");
 108:	8a e0       	ldi	r24, 0x0A	; 10
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
		itoa( ref_napon_sa_pot , bafer, 10);
 110:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ref_napon_sa_pot>
 114:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <ref_napon_sa_pot+0x1>
 118:	4a e0       	ldi	r20, 0x0A	; 10
 11a:	be 01       	movw	r22, r28
 11c:	6f 5f       	subi	r22, 0xFF	; 255
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	0e 94 0b 07 	call	0xe16	; 0xe16 <__itoa_ncheck>
		send_str(bafer);
 124:	ce 01       	movw	r24, r28
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
		
		
		send_str("  ");
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
		itoa( mereni_napon , bafer, 10);
 134:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mereni_napon>
 138:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <mereni_napon+0x1>
 13c:	4a e0       	ldi	r20, 0x0A	; 10
 13e:	be 01       	movw	r22, r28
 140:	6f 5f       	subi	r22, 0xFF	; 255
 142:	7f 4f       	sbci	r23, 0xFF	; 255
 144:	0e 94 0b 07 	call	0xe16	; 0xe16 <__itoa_ncheck>
		send_str(bafer);
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
		
		send_str("  ");
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
		itoa( suma_greske/100 , bafer, 10);
 158:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <suma_greske>
 15c:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <suma_greske+0x1>
 160:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <suma_greske+0x2>
 164:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <suma_greske+0x3>
 168:	a7 01       	movw	r20, r14
 16a:	96 01       	movw	r18, r12
 16c:	0e 94 bb 06 	call	0xd76	; 0xd76 <__divmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	4a e0       	ldi	r20, 0x0A	; 10
 176:	be 01       	movw	r22, r28
 178:	6f 5f       	subi	r22, 0xFF	; 255
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
 17c:	0e 94 0b 07 	call	0xe16	; 0xe16 <__itoa_ncheck>
		send_str(bafer);
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
		
		
		
		send_str("  ");
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
		itoa( Upravljanje*100 , bafer, 10);
 190:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Upravljanje>
 194:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Upravljanje+0x1>
 198:	4a e0       	ldi	r20, 0x0A	; 10
 19a:	be 01       	movw	r22, r28
 19c:	6f 5f       	subi	r22, 0xFF	; 255
 19e:	7f 4f       	sbci	r23, 0xFF	; 255
 1a0:	9c 01       	movw	r18, r24
 1a2:	12 9f       	mul	r17, r18
 1a4:	c0 01       	movw	r24, r0
 1a6:	13 9f       	mul	r17, r19
 1a8:	90 0d       	add	r25, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0e 94 0b 07 	call	0xe16	; 0xe16 <__itoa_ncheck>
		send_str(bafer);
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
		
		send_str("  ");
 1b8:	8a e0       	ldi	r24, 0x0A	; 10
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
 1c0:	4a e0       	ldi	r20, 0x0A	; 10
 1c2:	be 01       	movw	r22, r28
 1c4:	6f 5f       	subi	r22, 0xFF	; 255
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 0b 07 	call	0xe16	; 0xe16 <__itoa_ncheck>
		itoa( 0 , bafer, 10);
		send_str(bafer);
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
		
		send_str("  ");
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
 1e0:	4a e0       	ldi	r20, 0x0A	; 10
 1e2:	be 01       	movw	r22, r28
 1e4:	6f 5f       	subi	r22, 0xFF	; 255
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	93 e2       	ldi	r25, 0x23	; 35
 1ec:	0e 94 0b 07 	call	0xe16	; 0xe16 <__itoa_ncheck>
		itoa( 9000 , bafer, 10);
		send_str(bafer);
 1f0:	ce 01       	movw	r24, r28
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
		*/

		
	
		
		send_str("\n");
 1f8:	8d e0       	ldi	r24, 0x0D	; 13
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 0a 05 	call	0xa14	; 0xa14 <send_str>
 200:	6d cf       	rjmp	.-294    	; 0xdc <main+0x36>

00000202 <ADC_init>:

volatile void sumator();

void ADC_init()
{
	DDRD |= 1<<DDB7;
 202:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
 204:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
 208:	80 ec       	ldi	r24, 0xC0	; 192
 20a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
 20e:	8e ee       	ldi	r24, 0xEE	; 238
 210:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
 214:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
 218:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ad_kanal>
 21c:	08 95       	ret

0000021e <sumator>:
}



volatile void sumator()
{
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
	//radi sumu po kolonama matrice, tj po kanalu, izvlaci prosek i upisuje u odgovarajucu promenljivu
	volatile static uint8_t i=0;


	
	if (ad_kanal == 0) //ref_napon_sa_pot
 22a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ad_kanal>
 22e:	81 11       	cpse	r24, r1
 230:	4d c0       	rjmp	.+154    	; 0x2cc <sumator+0xae>
	{
		ref_napon_sa_pot = 0; //nuliram da ne bi uticalo na sumiranje i prosek i stvarne vrednosti
 232:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <ref_napon_sa_pot+0x1>
 236:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ref_napon_sa_pot>
		
		for (i=0; i<BR_SEMPLOVA; i++)
 23a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 23e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 242:	84 31       	cpi	r24, 0x14	; 20
 244:	18 f5       	brcc	.+70     	; 0x28c <sumator+0x6e>
		{
			ref_napon_sa_pot += adc_res[ad_kanal][i];		//suma po nultoj koloni (nultom kanalu)
 246:	44 e1       	ldi	r20, 0x14	; 20
 248:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <ad_kanal>
 24c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 250:	4e 9f       	mul	r20, r30
 252:	f0 01       	movw	r30, r0
 254:	11 24       	eor	r1, r1
 256:	e8 0f       	add	r30, r24
 258:	f1 1d       	adc	r31, r1
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	e5 5e       	subi	r30, 0xE5	; 229
 260:	fe 4f       	sbci	r31, 0xFE	; 254
 262:	20 81       	ld	r18, Z
 264:	31 81       	ldd	r19, Z+1	; 0x01
 266:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ref_napon_sa_pot>
 26a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <ref_napon_sa_pot+0x1>
 26e:	82 0f       	add	r24, r18
 270:	93 1f       	adc	r25, r19
 272:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <ref_napon_sa_pot+0x1>
 276:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <ref_napon_sa_pot>
	
	if (ad_kanal == 0) //ref_napon_sa_pot
	{
		ref_napon_sa_pot = 0; //nuliram da ne bi uticalo na sumiranje i prosek i stvarne vrednosti
		
		for (i=0; i<BR_SEMPLOVA; i++)
 27a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 27e:	8f 5f       	subi	r24, 0xFF	; 255
 280:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 284:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 288:	84 31       	cpi	r24, 0x14	; 20
 28a:	f0 f2       	brcs	.-68     	; 0x248 <sumator+0x2a>
		{
			ref_napon_sa_pot += adc_res[ad_kanal][i];		//suma po nultoj koloni (nultom kanalu)
		}
		ref_napon_sa_pot = (ref_napon_sa_pot/BR_SEMPLOVA) * 19.613;  //1023 = 20000 mV
 28c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <ref_napon_sa_pot>
 290:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <ref_napon_sa_pot+0x1>
 294:	ad ec       	ldi	r26, 0xCD	; 205
 296:	bc ec       	ldi	r27, 0xCC	; 204
 298:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__umulhisi3>
 29c:	92 95       	swap	r25
 29e:	82 95       	swap	r24
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	89 27       	eor	r24, r25
 2a4:	9f 70       	andi	r25, 0x0F	; 15
 2a6:	89 27       	eor	r24, r25
 2a8:	bc 01       	movw	r22, r24
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 c0 05 	call	0xb80	; 0xb80 <__floatunsisf>
 2b2:	2d e6       	ldi	r18, 0x6D	; 109
 2b4:	37 ee       	ldi	r19, 0xE7	; 231
 2b6:	4c e9       	ldi	r20, 0x9C	; 156
 2b8:	51 e4       	ldi	r21, 0x41	; 65
 2ba:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__mulsf3>
 2be:	0e 94 91 05 	call	0xb22	; 0xb22 <__fixunssfsi>
 2c2:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <ref_napon_sa_pot+0x1>
 2c6:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <ref_napon_sa_pot>
 2ca:	ba c0       	rjmp	.+372    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		
		
	}
	else if (ad_kanal == 1)	//merena struja
 2cc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ad_kanal>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <sumator+0xb8>
 2d4:	4d c0       	rjmp	.+154    	; 0x370 <sumator+0x152>
	{
		merena_struja = 0;
 2d6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <merena_struja+0x1>
 2da:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <merena_struja>
		
		for (i=0; i<BR_SEMPLOVA; i++)
 2de:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 2e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2e6:	84 31       	cpi	r24, 0x14	; 20
 2e8:	18 f5       	brcc	.+70     	; 0x330 <sumator+0x112>
		{
			merena_struja += adc_res[ad_kanal][i];
 2ea:	44 e1       	ldi	r20, 0x14	; 20
 2ec:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <ad_kanal>
 2f0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2f4:	4e 9f       	mul	r20, r30
 2f6:	f0 01       	movw	r30, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	e8 0f       	add	r30, r24
 2fc:	f1 1d       	adc	r31, r1
 2fe:	ee 0f       	add	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	e5 5e       	subi	r30, 0xE5	; 229
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	20 81       	ld	r18, Z
 308:	31 81       	ldd	r19, Z+1	; 0x01
 30a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <merena_struja>
 30e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <merena_struja+0x1>
 312:	82 0f       	add	r24, r18
 314:	93 1f       	adc	r25, r19
 316:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <merena_struja+0x1>
 31a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <merena_struja>
	}
	else if (ad_kanal == 1)	//merena struja
	{
		merena_struja = 0;
		
		for (i=0; i<BR_SEMPLOVA; i++)
 31e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 328:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 32c:	84 31       	cpi	r24, 0x14	; 20
 32e:	f0 f2       	brcs	.-68     	; 0x2ec <sumator+0xce>
		{
			merena_struja += adc_res[ad_kanal][i];
		}
		merena_struja = (merena_struja/BR_SEMPLOVA) * 4.895;  // 1023 = 1093 mV, R=220 mOhm, I=V/R = 4968 mA (MAX); izracunato i skalirano da se za max input dobija ~5A
 330:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <merena_struja>
 334:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <merena_struja+0x1>
 338:	ad ec       	ldi	r26, 0xCD	; 205
 33a:	bc ec       	ldi	r27, 0xCC	; 204
 33c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__umulhisi3>
 340:	92 95       	swap	r25
 342:	82 95       	swap	r24
 344:	8f 70       	andi	r24, 0x0F	; 15
 346:	89 27       	eor	r24, r25
 348:	9f 70       	andi	r25, 0x0F	; 15
 34a:	89 27       	eor	r24, r25
 34c:	bc 01       	movw	r22, r24
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 c0 05 	call	0xb80	; 0xb80 <__floatunsisf>
 356:	27 ed       	ldi	r18, 0xD7	; 215
 358:	33 ea       	ldi	r19, 0xA3	; 163
 35a:	4c e9       	ldi	r20, 0x9C	; 156
 35c:	50 e4       	ldi	r21, 0x40	; 64
 35e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__mulsf3>
 362:	0e 94 91 05 	call	0xb22	; 0xb22 <__fixunssfsi>
 366:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <merena_struja+0x1>
 36a:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <merena_struja>
 36e:	68 c0       	rjmp	.+208    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
															  //malo je kompenzovan mnozitelj merenjem pomocu voltmetra
															 /***** Vref 1.1V je zapravo 1.093 V ******/
	}
	else if (ad_kanal == 2)	//mereni napon
 370:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ad_kanal>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	09 f0       	breq	.+2      	; 0x37a <sumator+0x15c>
 378:	63 c0       	rjmp	.+198    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	{
		mereni_napon = 0;
 37a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <mereni_napon+0x1>
 37e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <mereni_napon>
		
		for (i=0; i<BR_SEMPLOVA; i++)
 382:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 386:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 38a:	84 31       	cpi	r24, 0x14	; 20
 38c:	18 f5       	brcc	.+70     	; 0x3d4 <sumator+0x1b6>
		{
			mereni_napon += adc_res[ad_kanal][i];
 38e:	44 e1       	ldi	r20, 0x14	; 20
 390:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <ad_kanal>
 394:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 398:	4e 9f       	mul	r20, r30
 39a:	f0 01       	movw	r30, r0
 39c:	11 24       	eor	r1, r1
 39e:	e8 0f       	add	r30, r24
 3a0:	f1 1d       	adc	r31, r1
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	e5 5e       	subi	r30, 0xE5	; 229
 3a8:	fe 4f       	sbci	r31, 0xFE	; 254
 3aa:	20 81       	ld	r18, Z
 3ac:	31 81       	ldd	r19, Z+1	; 0x01
 3ae:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mereni_napon>
 3b2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <mereni_napon+0x1>
 3b6:	82 0f       	add	r24, r18
 3b8:	93 1f       	adc	r25, r19
 3ba:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <mereni_napon+0x1>
 3be:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mereni_napon>
	}
	else if (ad_kanal == 2)	//mereni napon
	{
		mereni_napon = 0;
		
		for (i=0; i<BR_SEMPLOVA; i++)
 3c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 3c6:	8f 5f       	subi	r24, 0xFF	; 255
 3c8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 3cc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 3d0:	84 31       	cpi	r24, 0x14	; 20
 3d2:	f0 f2       	brcs	.-68     	; 0x390 <sumator+0x172>
		{
			mereni_napon += adc_res[ad_kanal][i];
		}
		mereni_napon = ((mereni_napon/BR_SEMPLOVA) * 19.613) - (merena_struja * 0.22);  //1023 = 20000 mV - naposnki pad preko sant otpornika (220 mOhm)
 3d4:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <mereni_napon>
 3d8:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <mereni_napon+0x1>
 3dc:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <merena_struja>
 3e0:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <merena_struja+0x1>
 3e4:	ad ec       	ldi	r26, 0xCD	; 205
 3e6:	bc ec       	ldi	r27, 0xCC	; 204
 3e8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__umulhisi3>
 3ec:	92 95       	swap	r25
 3ee:	82 95       	swap	r24
 3f0:	8f 70       	andi	r24, 0x0F	; 15
 3f2:	89 27       	eor	r24, r25
 3f4:	9f 70       	andi	r25, 0x0F	; 15
 3f6:	89 27       	eor	r24, r25
 3f8:	bc 01       	movw	r22, r24
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 c0 05 	call	0xb80	; 0xb80 <__floatunsisf>
 402:	2d e6       	ldi	r18, 0x6D	; 109
 404:	37 ee       	ldi	r19, 0xE7	; 231
 406:	4c e9       	ldi	r20, 0x9C	; 156
 408:	51 e4       	ldi	r21, 0x41	; 65
 40a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__mulsf3>
 40e:	6b 01       	movw	r12, r22
 410:	7c 01       	movw	r14, r24
 412:	be 01       	movw	r22, r28
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 c0 05 	call	0xb80	; 0xb80 <__floatunsisf>
 41c:	2e ea       	ldi	r18, 0xAE	; 174
 41e:	37 e4       	ldi	r19, 0x47	; 71
 420:	41 e6       	ldi	r20, 0x61	; 97
 422:	5e e3       	ldi	r21, 0x3E	; 62
 424:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__mulsf3>
 428:	9b 01       	movw	r18, r22
 42a:	ac 01       	movw	r20, r24
 42c:	c7 01       	movw	r24, r14
 42e:	b6 01       	movw	r22, r12
 430:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__subsf3>
 434:	0e 94 91 05 	call	0xb22	; 0xb22 <__fixunssfsi>
 438:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <mereni_napon+0x1>
 43c:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <mereni_napon>
																						//mnozenje napona isto malo komenzovano-kalibrisano
	}


 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	df 90       	pop	r13
 44a:	cf 90       	pop	r12
 44c:	08 95       	ret

0000044e <__vector_21>:
	ad_kanal = 0; //prvo citam A0
	
}

ISR(ADC_vect)
{
 44e:	1f 92       	push	r1
 450:	0f 92       	push	r0
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	0f 92       	push	r0
 456:	11 24       	eor	r1, r1
 458:	2f 93       	push	r18
 45a:	3f 93       	push	r19
 45c:	4f 93       	push	r20
 45e:	5f 93       	push	r21
 460:	6f 93       	push	r22
 462:	7f 93       	push	r23
 464:	8f 93       	push	r24
 466:	9f 93       	push	r25
 468:	af 93       	push	r26
 46a:	bf 93       	push	r27
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
	*/
	
		

	//ADCL mora biti prvi procitan
	adc_low = (uint8_t)ADCL;    //koriste se dva 8-bit registra jer je rezultat AD konverzije 10-bitan
 470:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 474:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <adc_low>
	adc_high = (uint8_t)ADCH;
 478:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 47c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <adc_high>
	
		/**stapam rezultate iz dva registra u jednu promenljivu na ovaj nacin**/
		/**rezultat ad konverzije je 10-bit-an, tj. od 0 do 1023**/
		
		if(adc_high==0)
 480:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adc_high>
 484:	81 11       	cpse	r24, r1
 486:	14 c0       	rjmp	.+40     	; 0x4b0 <__vector_21+0x62>
			adc_res[ad_kanal][brojac_sempla] = adc_low;
 488:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <ad_kanal>
 48c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <brojac_sempla>
 490:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <adc_low>
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	34 e1       	ldi	r19, 0x14	; 20
 498:	e3 9f       	mul	r30, r19
 49a:	f0 01       	movw	r30, r0
 49c:	11 24       	eor	r1, r1
 49e:	e2 0f       	add	r30, r18
 4a0:	f1 1d       	adc	r31, r1
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	e5 5e       	subi	r30, 0xE5	; 229
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	91 83       	std	Z+1, r25	; 0x01
 4ac:	80 83       	st	Z, r24
 4ae:	4a c0       	rjmp	.+148    	; 0x544 <__vector_21+0xf6>
		else if(adc_high==1)
 4b0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adc_high>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	a9 f4       	brne	.+42     	; 0x4e2 <__vector_21+0x94>
			adc_res[ad_kanal][brojac_sempla] = 256 + adc_low;
 4b8:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <ad_kanal>
 4bc:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <brojac_sempla>
 4c0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <adc_low>
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	93 95       	inc	r25
 4c8:	34 e1       	ldi	r19, 0x14	; 20
 4ca:	e3 9f       	mul	r30, r19
 4cc:	f0 01       	movw	r30, r0
 4ce:	11 24       	eor	r1, r1
 4d0:	e2 0f       	add	r30, r18
 4d2:	f1 1d       	adc	r31, r1
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	e5 5e       	subi	r30, 0xE5	; 229
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	91 83       	std	Z+1, r25	; 0x01
 4de:	80 83       	st	Z, r24
 4e0:	31 c0       	rjmp	.+98     	; 0x544 <__vector_21+0xf6>
		else if(adc_high==2)
 4e2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adc_high>
 4e6:	82 30       	cpi	r24, 0x02	; 2
 4e8:	a9 f4       	brne	.+42     	; 0x514 <__vector_21+0xc6>
			adc_res[ad_kanal][brojac_sempla] = 512 + adc_low;	//256*2
 4ea:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <ad_kanal>
 4ee:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <brojac_sempla>
 4f2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <adc_low>
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	9e 5f       	subi	r25, 0xFE	; 254
 4fa:	34 e1       	ldi	r19, 0x14	; 20
 4fc:	e3 9f       	mul	r30, r19
 4fe:	f0 01       	movw	r30, r0
 500:	11 24       	eor	r1, r1
 502:	e2 0f       	add	r30, r18
 504:	f1 1d       	adc	r31, r1
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	e5 5e       	subi	r30, 0xE5	; 229
 50c:	fe 4f       	sbci	r31, 0xFE	; 254
 50e:	91 83       	std	Z+1, r25	; 0x01
 510:	80 83       	st	Z, r24
 512:	18 c0       	rjmp	.+48     	; 0x544 <__vector_21+0xf6>
		else if(adc_high==3)
 514:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adc_high>
 518:	83 30       	cpi	r24, 0x03	; 3
 51a:	a1 f4       	brne	.+40     	; 0x544 <__vector_21+0xf6>
			adc_res[ad_kanal][brojac_sempla] = 768 + adc_low;	//256*3
 51c:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <ad_kanal>
 520:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <brojac_sempla>
 524:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <adc_low>
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	9d 5f       	subi	r25, 0xFD	; 253
 52c:	34 e1       	ldi	r19, 0x14	; 20
 52e:	e3 9f       	mul	r30, r19
 530:	f0 01       	movw	r30, r0
 532:	11 24       	eor	r1, r1
 534:	e2 0f       	add	r30, r18
 536:	f1 1d       	adc	r31, r1
 538:	ee 0f       	add	r30, r30
 53a:	ff 1f       	adc	r31, r31
 53c:	e5 5e       	subi	r30, 0xE5	; 229
 53e:	fe 4f       	sbci	r31, 0xFE	; 254
 540:	91 83       	std	Z+1, r25	; 0x01
 542:	80 83       	st	Z, r24
			

	
	if (ad_kanal==0)
 544:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ad_kanal>
 548:	81 11       	cpse	r24, r1
 54a:	03 c0       	rjmp	.+6      	; 0x552 <__vector_21+0x104>
			sumator();      //suma za dati kanal i izvucen prosek i upisan u odg promenljivu
 54c:	0e 94 0f 01 	call	0x21e	; 0x21e <sumator>
 550:	0d c0       	rjmp	.+26     	; 0x56c <__vector_21+0x11e>
	else if (ad_kanal==1)		
 552:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ad_kanal>
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	19 f4       	brne	.+6      	; 0x560 <__vector_21+0x112>
			sumator();
 55a:	0e 94 0f 01 	call	0x21e	; 0x21e <sumator>
 55e:	06 c0       	rjmp	.+12     	; 0x56c <__vector_21+0x11e>
	else if (ad_kanal==2)
 560:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ad_kanal>
 564:	82 30       	cpi	r24, 0x02	; 2
 566:	11 f4       	brne	.+4      	; 0x56c <__vector_21+0x11e>
			sumator();
 568:	0e 94 0f 01 	call	0x21e	; 0x21e <sumator>
	//OCR1A = ref_napon_sa_pot * 20.0;  //top = 400
	//OCR1A = 200;

	
	
	ADCSRA &= ~(1<<ADEN);	//iskljucim adc da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 56c:	ea e7       	ldi	r30, 0x7A	; 122
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	8f 77       	andi	r24, 0x7F	; 127
 574:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 576:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ad_kanal>
 57a:	8f 5f       	subi	r24, 0xFF	; 255
 57c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ad_kanal>
	if(ad_kanal > 2)	//kreni opet od nule kad dodjes do poslednjeg; 2, da citam samo prva tri
 580:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ad_kanal>
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	68 f0       	brcs	.+26     	; 0x5a2 <__vector_21+0x154>
	{
		ad_kanal = 0;
 588:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ad_kanal>
		
		brojac_sempla++; //kad dodjes do kraja kanala predji na sledeci red semplova
 58c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <brojac_sempla>
 590:	8f 5f       	subi	r24, 0xFF	; 255
 592:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <brojac_sempla>
		if(brojac_sempla >= BR_SEMPLOVA) //kad dodjes do kraja kreni opet od nule
 596:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <brojac_sempla>
 59a:	84 31       	cpi	r24, 0x14	; 20
 59c:	10 f0       	brcs	.+4      	; 0x5a2 <__vector_21+0x154>
			brojac_sempla = 0;
 59e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <brojac_sempla>
	}
	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
 5a2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ad_kanal>
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	61 f0       	breq	.+24     	; 0x5c2 <__vector_21+0x174>
 5aa:	28 f0       	brcs	.+10     	; 0x5b6 <__vector_21+0x168>
 5ac:	82 30       	cpi	r24, 0x02	; 2
 5ae:	91 f0       	breq	.+36     	; 0x5d4 <__vector_21+0x186>
 5b0:	83 30       	cpi	r24, 0x03	; 3
 5b2:	c9 f0       	breq	.+50     	; 0x5e6 <__vector_21+0x198>
 5b4:	1d c0       	rjmp	.+58     	; 0x5f0 <__vector_21+0x1a2>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
 5b6:	ec e7       	ldi	r30, 0x7C	; 124
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	8c 7f       	andi	r24, 0xFC	; 252
 5be:	80 83       	st	Z, r24
		break;
 5c0:	17 c0       	rjmp	.+46     	; 0x5f0 <__vector_21+0x1a2>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
 5c2:	ec e7       	ldi	r30, 0x7C	; 124
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	8d 7f       	andi	r24, 0xFD	; 253
 5ca:	80 83       	st	Z, r24
				ADMUX |= (0b1);
 5cc:	80 81       	ld	r24, Z
 5ce:	81 60       	ori	r24, 0x01	; 1
 5d0:	80 83       	st	Z, r24
		break;
 5d2:	0e c0       	rjmp	.+28     	; 0x5f0 <__vector_21+0x1a2>
		
		case 2:
				ADMUX &= ~(0b1);		//10;ref internal 1.1V, kanal A2
 5d4:	ec e7       	ldi	r30, 0x7C	; 124
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	8e 7f       	andi	r24, 0xFE	; 254
 5dc:	80 83       	st	Z, r24
				ADMUX |= (0b10);
 5de:	80 81       	ld	r24, Z
 5e0:	82 60       	ori	r24, 0x02	; 2
 5e2:	80 83       	st	Z, r24
		break;
 5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <__vector_21+0x1a2>
		
		case 3:
				ADMUX |= (0b11);		//11;ref internal 1.1V, kanal A3
 5e6:	ec e7       	ldi	r30, 0x7C	; 124
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	83 60       	ori	r24, 0x03	; 3
 5ee:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
 5f0:	ea e7       	ldi	r30, 0x7A	; 122
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	80 6c       	ori	r24, 0xC0	; 192
 5f8:	80 83       	st	Z, r24
	
	
	
	PIND |= 1<<7;       //togle za osciloskop
 5fa:	4f 9a       	sbi	0x09, 7	; 9

}
 5fc:	ff 91       	pop	r31
 5fe:	ef 91       	pop	r30
 600:	bf 91       	pop	r27
 602:	af 91       	pop	r26
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	7f 91       	pop	r23
 60a:	6f 91       	pop	r22
 60c:	5f 91       	pop	r21
 60e:	4f 91       	pop	r20
 610:	3f 91       	pop	r19
 612:	2f 91       	pop	r18
 614:	0f 90       	pop	r0
 616:	0f be       	out	0x3f, r0	; 63
 618:	0f 90       	pop	r0
 61a:	1f 90       	pop	r1
 61c:	18 95       	reti

0000061e <__vector_1>:
	
	
}

ISR(INT0_vect)
{
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	2f 93       	push	r18
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
	
		//interapt opali na rastucu ivicu INT0; ovo sam uradio zbog velike rezolucije enkodera -1024 * 57.5 na izlazu, tj na tocku zbog 2 reduktora
	
	brojac_ext_interaptova++;
 62e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <brojac_ext_interaptova>
 632:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <brojac_ext_interaptova+0x1>
 636:	01 96       	adiw	r24, 0x01	; 1
 638:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <brojac_ext_interaptova+0x1>
 63c:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <brojac_ext_interaptova>
	

	
		if ( PIND & (1<<PORTD3) )	//smer 1; proverava se logicki nivo drugog kanala
 640:	4b 9b       	sbis	0x09, 3	; 9
 642:	0d c0       	rjmp	.+26     	; 0x65e <__vector_1+0x40>
		{
			smer_obrtanja = 1;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <smer_obrtanja>
			impulsi++;
 64a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <impulsi>
 64e:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <impulsi+0x1>
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <impulsi+0x1>
 658:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <impulsi>
 65c:	0c c0       	rjmp	.+24     	; 0x676 <__vector_1+0x58>
		} 
		else								//smer 2
		{
			smer_obrtanja = 2;
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <smer_obrtanja>
			impulsi--;	
 664:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <impulsi>
 668:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <impulsi+0x1>
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <impulsi+0x1>
 672:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <impulsi>
	
	
	
	
	
	if(impulsi > 58879)		//za apsolutno merenje ugla
 676:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <impulsi>
 67a:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <impulsi+0x1>
 67e:	81 15       	cp	r24, r1
 680:	96 4e       	sbci	r25, 0xE6	; 230
 682:	28 f0       	brcs	.+10     	; 0x68e <__vector_1+0x70>
		impulsi = 0;
 684:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <impulsi+0x1>
 688:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <impulsi>
 68c:	04 c0       	rjmp	.+8      	; 0x696 <__vector_1+0x78>
	else if(impulsi < 0 )
 68e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <impulsi>
 692:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <impulsi+0x1>
	//problem se javlja kada ove impulse zelim da iskoristim za merenje brzine, a pri prelazu preko granicne vrednosti sa 58879 na 0 i obrnuto
	//zato sam ubacio jos jedan brojac koji broji prekide "brojac_ext_interaptova" relativno, a ne apsolutno
		
	//ugao = impulsi / 57.5;	//skaliranje, 58879 impulsa po krugu odgovara 360 stepeni tocka; !!!atmega se ovde zaglavi pri umerenoj frekvenciji prekida!!!
	//ugao = 100;
}
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	2f 91       	pop	r18
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	0f 90       	pop	r0
 6a2:	1f 90       	pop	r1
 6a4:	18 95       	reti

000006a6 <pwm_init>:
#include "common.h"

void pwm_init()
{
	
	DDRB |= 1<<DDB0; //dig 8
 6a6:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << DDB1)|(1 << DDB2); //izlazni pinovi za PWM - D9 i D10 na Arduino Uno ploci
 6a8:	84 b1       	in	r24, 0x04	; 4
 6aa:	86 60       	ori	r24, 0x06	; 6
 6ac:	84 b9       	out	0x04, r24	; 4
	

	ICR1 = 400;			//frekvencija ~ 40 kHz
 6ae:	80 e9       	ldi	r24, 0x90	; 144
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 6b6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0;		    //faktor ispune 0% 
 6ba:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 6be:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//OCR1B = OCR1A;
	
	TCCR1A = 0b10000010;		//jedan izlaz, fast pwm
 6c2:	82 e8       	ldi	r24, 0x82	; 130
 6c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B |= (1 << WGM13)|(1 << WGM12);		// set Fast PWM mode using ICR1 as TOP
 6c8:	e1 e8       	ldi	r30, 0x81	; 129
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	88 61       	ori	r24, 0x18	; 24
 6d0:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);		// START the timer with no prescaler	
 6d2:	80 81       	ld	r24, Z
 6d4:	81 60       	ori	r24, 0x01	; 1
 6d6:	80 83       	st	Z, r24
 6d8:	08 95       	ret

000006da <__vector_11>:
	
	//upis i promena faktora ispune se vrsi u ad konverziji
}

ISR(TIMER1_COMPA_vect)
{
 6da:	1f 92       	push	r1
 6dc:	0f 92       	push	r0
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	0f 92       	push	r0
 6e2:	11 24       	eor	r1, r1
	//ADCSRA |= 1<<ADSC; //start ad conversion
	
	PINB |= 0b1;
 6e4:	18 9a       	sbi	0x03, 0	; 3
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <tajmer0_init>:
//const volatile double stepeniPOms_to_rpm = 16.67;		//faktor konverzije izmedju izmerenog broja stepeni u prozoru od 10ms u obrtaje po minutu
//volatile double relativni_ugao = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 6f4:	93 e0       	ldi	r25, 0x03	; 3
 6f6:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 6f8:	99 ef       	ldi	r25, 0xF9	; 249
 6fa:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 6fc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRB |= 1<<PINB5;
 700:	25 9a       	sbi	0x04, 5	; 4
 702:	08 95       	ret

00000704 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
 704:	1f 92       	push	r1
 706:	0f 92       	push	r0
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	0f 92       	push	r0
 70c:	11 24       	eor	r1, r1
 70e:	cf 92       	push	r12
 710:	df 92       	push	r13
 712:	ef 92       	push	r14
 714:	ff 92       	push	r15
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
	flag_tajmer0_prekid = 1;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
 734:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <brojac_prekida_tajmera0>
 738:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <brojac_prekida_tajmera0+0x1>
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <brojac_prekida_tajmera0+0x1>
 742:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)
 746:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <brojac_prekida_tajmera0>
 74a:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <brojac_prekida_tajmera0+0x1>
 74e:	0a 97       	sbiw	r24, 0x0a	; 10
 750:	41 f4       	brne	.+16     	; 0x762 <__vector_14+0x5e>
	{
		brojac_prekida_tajmera0 = 0;
 752:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <brojac_prekida_tajmera0+0x1>
 756:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <flag_prekid_10ms>
		PINB |= 1<<PINB5;					//toogle pin 5 - DIG13, test da vidim da li je korektna frekvencija
 760:	1d 9a       	sbi	0x03, 5	; 3
	}
	
	/*Podsetnik: postoje inkrementalni i neki drugi PID zakon, pa ih malo prouci*/
	

			greska = ref_napon_sa_pot - mereni_napon;    //greska napona (u mV)
 762:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ref_napon_sa_pot>
 766:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <ref_napon_sa_pot+0x1>
 76a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <mereni_napon>
 76e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <mereni_napon+0x1>
 772:	82 1b       	sub	r24, r18
 774:	93 0b       	sbc	r25, r19
 776:	a0 e0       	ldi	r26, 0x00	; 0
 778:	b0 e0       	ldi	r27, 0x00	; 0
 77a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <greska>
 77e:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <greska+0x1>
 782:	a0 93 c6 01 	sts	0x01C6, r26	; 0x8001c6 <greska+0x2>
 786:	b0 93 c7 01 	sts	0x01C7, r27	; 0x8001c7 <greska+0x3>
			
			Upravljanje = Kp*greska;	  //PID,      400 = max (~20V), 0 = min (0V)
 78a:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <greska>
 78e:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <greska+0x1>
 792:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <greska+0x2>
 796:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <greska+0x3>
 79a:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <Kp>
 79e:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <Kp+0x1>
 7a2:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <Kp+0x2>
 7a6:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <Kp+0x3>
 7aa:	0e 94 c2 05 	call	0xb84	; 0xb84 <__floatsisf>
 7ae:	a7 01       	movw	r20, r14
 7b0:	96 01       	movw	r18, r12
 7b2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__mulsf3>
 7b6:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixsfsi>
 7ba:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <Upravljanje+0x1>
 7be:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <Upravljanje>
			
			
			suma_greske += greska;
 7c2:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <greska>
 7c6:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <greska+0x1>
 7ca:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <greska+0x2>
 7ce:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <greska+0x3>
 7d2:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <suma_greske>
 7d6:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <suma_greske+0x1>
 7da:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <suma_greske+0x2>
 7de:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <suma_greske+0x3>
 7e2:	84 0f       	add	r24, r20
 7e4:	95 1f       	adc	r25, r21
 7e6:	a6 1f       	adc	r26, r22
 7e8:	b7 1f       	adc	r27, r23
 7ea:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <suma_greske>
 7ee:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <suma_greske+0x1>
 7f2:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <suma_greske+0x2>
 7f6:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <suma_greske+0x3>
			
			if(suma_greske >= limit_sume)
 7fa:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <suma_greske>
 7fe:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <suma_greske+0x1>
 802:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <suma_greske+0x2>
 806:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <suma_greske+0x3>
 80a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 80e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 812:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 816:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 81a:	48 17       	cp	r20, r24
 81c:	59 07       	cpc	r21, r25
 81e:	6a 07       	cpc	r22, r26
 820:	7b 07       	cpc	r23, r27
 822:	8c f0       	brlt	.+34     	; 0x846 <__vector_14+0x142>
				suma_greske = limit_sume;
 824:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 828:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 82c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 830:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 834:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <suma_greske>
 838:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <suma_greske+0x1>
 83c:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <suma_greske+0x2>
 840:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <suma_greske+0x3>
 844:	33 c0       	rjmp	.+102    	; 0x8ac <__vector_14+0x1a8>
			else if (suma_greske <= -limit_sume)
 846:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 84a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 84e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 852:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 856:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <suma_greske>
 85a:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <suma_greske+0x1>
 85e:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <suma_greske+0x2>
 862:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <suma_greske+0x3>
 866:	b0 95       	com	r27
 868:	a0 95       	com	r26
 86a:	90 95       	com	r25
 86c:	81 95       	neg	r24
 86e:	9f 4f       	sbci	r25, 0xFF	; 255
 870:	af 4f       	sbci	r26, 0xFF	; 255
 872:	bf 4f       	sbci	r27, 0xFF	; 255
 874:	84 17       	cp	r24, r20
 876:	95 07       	cpc	r25, r21
 878:	a6 07       	cpc	r26, r22
 87a:	b7 07       	cpc	r27, r23
 87c:	bc f0       	brlt	.+46     	; 0x8ac <__vector_14+0x1a8>
			{
				suma_greske = -limit_sume;
 87e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 882:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 886:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 88a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 88e:	b0 95       	com	r27
 890:	a0 95       	com	r26
 892:	90 95       	com	r25
 894:	81 95       	neg	r24
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	af 4f       	sbci	r26, 0xFF	; 255
 89a:	bf 4f       	sbci	r27, 0xFF	; 255
 89c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <suma_greske>
 8a0:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <suma_greske+0x1>
 8a4:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <suma_greske+0x2>
 8a8:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <suma_greske+0x3>
			}
			
			//Upravljanje += Ki * suma_greske;			//Integralno dejstvo sabiram sa prethodnim upravljanjem
			
			if(Upravljanje>=400)
 8ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Upravljanje>
 8b0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Upravljanje+0x1>
 8b4:	80 39       	cpi	r24, 0x90	; 144
 8b6:	91 40       	sbci	r25, 0x01	; 1
 8b8:	14 f1       	brlt	.+68     	; 0x8fe <__vector_14+0x1fa>
			{
				Upravljanje = 400; //saturacija, tj ogranicenje
 8ba:	80 e9       	ldi	r24, 0x90	; 144
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <Upravljanje+0x1>
 8c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Upravljanje>
				suma_greske -= greska;		//ako vec imas max upravljanje nemoj vise povecavati sumu greske; zastita od wind up-a
 8c6:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <greska>
 8ca:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <greska+0x1>
 8ce:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <greska+0x2>
 8d2:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <greska+0x3>
 8d6:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <suma_greske>
 8da:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <suma_greske+0x1>
 8de:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <suma_greske+0x2>
 8e2:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <suma_greske+0x3>
 8e6:	84 1b       	sub	r24, r20
 8e8:	95 0b       	sbc	r25, r21
 8ea:	a6 0b       	sbc	r26, r22
 8ec:	b7 0b       	sbc	r27, r23
 8ee:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <suma_greske>
 8f2:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <suma_greske+0x1>
 8f6:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <suma_greske+0x2>
 8fa:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <suma_greske+0x3>
			}
			
			if(Upravljanje<=0)
 8fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Upravljanje>
 902:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Upravljanje+0x1>
 906:	18 16       	cp	r1, r24
 908:	19 06       	cpc	r1, r25
 90a:	04 f1       	brlt	.+64     	; 0x94c <__stack+0x4d>
			{
				Upravljanje = 0;
 90c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <Upravljanje+0x1>
 910:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Upravljanje>
				suma_greske -= greska;		//ako vec imas min upravljanje nemoj vise povecavati sumu greske; zastita od wind up-a
 914:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <greska>
 918:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <greska+0x1>
 91c:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <greska+0x2>
 920:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <greska+0x3>
 924:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <suma_greske>
 928:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <suma_greske+0x1>
 92c:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <suma_greske+0x2>
 930:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <suma_greske+0x3>
 934:	84 1b       	sub	r24, r20
 936:	95 0b       	sbc	r25, r21
 938:	a6 0b       	sbc	r26, r22
 93a:	b7 0b       	sbc	r27, r23
 93c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <suma_greske>
 940:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <suma_greske+0x1>
 944:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <suma_greske+0x2>
 948:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <suma_greske+0x3>
			}
			
			
			OCR1A = Upravljanje;
 94c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Upravljanje>
 950:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Upravljanje+0x1>
 954:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 958:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	
 95c:	ff 91       	pop	r31
 95e:	ef 91       	pop	r30
 960:	bf 91       	pop	r27
 962:	af 91       	pop	r26
 964:	9f 91       	pop	r25
 966:	8f 91       	pop	r24
 968:	7f 91       	pop	r23
 96a:	6f 91       	pop	r22
 96c:	5f 91       	pop	r21
 96e:	4f 91       	pop	r20
 970:	3f 91       	pop	r19
 972:	2f 91       	pop	r18
 974:	ff 90       	pop	r15
 976:	ef 90       	pop	r14
 978:	df 90       	pop	r13
 97a:	cf 90       	pop	r12
 97c:	0f 90       	pop	r0
 97e:	0f be       	out	0x3f, r0	; 63
 980:	0f 90       	pop	r0
 982:	1f 90       	pop	r1
 984:	18 95       	reti

00000986 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 986:	1f 92       	push	r1
 988:	0f 92       	push	r0
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	0f 92       	push	r0
 98e:	11 24       	eor	r1, r1
	poslato=0;
 990:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <poslato>
}
 994:	0f 90       	pop	r0
 996:	0f be       	out	0x3f, r0	; 63
 998:	0f 90       	pop	r0
 99a:	1f 90       	pop	r1
 99c:	18 95       	reti

0000099e <__vector_18>:

ISR(USART_RX_vect)
{
 99e:	1f 92       	push	r1
 9a0:	0f 92       	push	r0
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	0f 92       	push	r0
 9a6:	11 24       	eor	r1, r1
 9a8:	8f 93       	push	r24
 9aa:	ef 93       	push	r30
 9ac:	ff 93       	push	r31
	input_char=UDR0;
 9ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 9b2:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 9b6:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <buff_size>
 9ba:	88 30       	cpi	r24, 0x08	; 8
 9bc:	98 f4       	brcc	.+38     	; 0x9e4 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 9be:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <buff_size>
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <input_char>
 9c8:	e1 53       	subi	r30, 0x31	; 49
 9ca:	fe 4f       	sbci	r31, 0xFE	; 254
 9cc:	80 83       	st	Z, r24
		buff_size++;
 9ce:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <buff_size>
 9d2:	8f 5f       	subi	r24, 0xFF	; 255
 9d4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <buff_size>
		input_buffer[buff_size]='\0';
 9d8:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <buff_size>
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	e1 53       	subi	r30, 0x31	; 49
 9e0:	fe 4f       	sbci	r31, 0xFE	; 254
 9e2:	10 82       	st	Z, r1
	}
}
 9e4:	ff 91       	pop	r31
 9e6:	ef 91       	pop	r30
 9e8:	8f 91       	pop	r24
 9ea:	0f 90       	pop	r0
 9ec:	0f be       	out	0x3f, r0	; 63
 9ee:	0f 90       	pop	r0
 9f0:	1f 90       	pop	r1
 9f2:	18 95       	reti

000009f4 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 9f4:	82 e0       	ldi	r24, 0x02	; 2
 9f6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 9fa:	88 ed       	ldi	r24, 0xD8	; 216
 9fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 a00:	86 e0       	ldi	r24, 0x06	; 6
 a02:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 a06:	8f ec       	ldi	r24, 0xCF	; 207
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 a0e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 a12:	08 95       	ret

00000a14 <send_str>:
}

void send_str(unsigned char *str)
{
 a14:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 a16:	90 81       	ld	r25, Z
 a18:	99 23       	and	r25, r25
 a1a:	71 f0       	breq	.+28     	; 0xa38 <send_str+0x24>
 a1c:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 a1e:	a6 ec       	ldi	r26, 0xC6	; 198
 a20:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 a22:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 a24:	9c 93       	st	X, r25
		poslato=1;
 a26:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <poslato>
		while (poslato);
 a2a:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <poslato>
 a2e:	91 11       	cpse	r25, r1
 a30:	fc cf       	rjmp	.-8      	; 0xa2a <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 a32:	91 91       	ld	r25, Z+
 a34:	91 11       	cpse	r25, r1
 a36:	f6 cf       	rjmp	.-20     	; 0xa24 <send_str+0x10>
 a38:	08 95       	ret

00000a3a <__subsf3>:
 a3a:	50 58       	subi	r21, 0x80	; 128

00000a3c <__addsf3>:
 a3c:	bb 27       	eor	r27, r27
 a3e:	aa 27       	eor	r26, r26
 a40:	0e 94 35 05 	call	0xa6a	; 0xa6a <__addsf3x>
 a44:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__fp_round>
 a48:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_pscA>
 a4c:	38 f0       	brcs	.+14     	; 0xa5c <__addsf3+0x20>
 a4e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_pscB>
 a52:	20 f0       	brcs	.+8      	; 0xa5c <__addsf3+0x20>
 a54:	39 f4       	brne	.+14     	; 0xa64 <__addsf3+0x28>
 a56:	9f 3f       	cpi	r25, 0xFF	; 255
 a58:	19 f4       	brne	.+6      	; 0xa60 <__addsf3+0x24>
 a5a:	26 f4       	brtc	.+8      	; 0xa64 <__addsf3+0x28>
 a5c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__fp_nan>
 a60:	0e f4       	brtc	.+2      	; 0xa64 <__addsf3+0x28>
 a62:	e0 95       	com	r30
 a64:	e7 fb       	bst	r30, 7
 a66:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_inf>

00000a6a <__addsf3x>:
 a6a:	e9 2f       	mov	r30, r25
 a6c:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fp_split3>
 a70:	58 f3       	brcs	.-42     	; 0xa48 <__addsf3+0xc>
 a72:	ba 17       	cp	r27, r26
 a74:	62 07       	cpc	r22, r18
 a76:	73 07       	cpc	r23, r19
 a78:	84 07       	cpc	r24, r20
 a7a:	95 07       	cpc	r25, r21
 a7c:	20 f0       	brcs	.+8      	; 0xa86 <__addsf3x+0x1c>
 a7e:	79 f4       	brne	.+30     	; 0xa9e <__addsf3x+0x34>
 a80:	a6 f5       	brtc	.+104    	; 0xaea <__addsf3x+0x80>
 a82:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_zero>
 a86:	0e f4       	brtc	.+2      	; 0xa8a <__addsf3x+0x20>
 a88:	e0 95       	com	r30
 a8a:	0b 2e       	mov	r0, r27
 a8c:	ba 2f       	mov	r27, r26
 a8e:	a0 2d       	mov	r26, r0
 a90:	0b 01       	movw	r0, r22
 a92:	b9 01       	movw	r22, r18
 a94:	90 01       	movw	r18, r0
 a96:	0c 01       	movw	r0, r24
 a98:	ca 01       	movw	r24, r20
 a9a:	a0 01       	movw	r20, r0
 a9c:	11 24       	eor	r1, r1
 a9e:	ff 27       	eor	r31, r31
 aa0:	59 1b       	sub	r21, r25
 aa2:	99 f0       	breq	.+38     	; 0xaca <__addsf3x+0x60>
 aa4:	59 3f       	cpi	r21, 0xF9	; 249
 aa6:	50 f4       	brcc	.+20     	; 0xabc <__addsf3x+0x52>
 aa8:	50 3e       	cpi	r21, 0xE0	; 224
 aaa:	68 f1       	brcs	.+90     	; 0xb06 <__addsf3x+0x9c>
 aac:	1a 16       	cp	r1, r26
 aae:	f0 40       	sbci	r31, 0x00	; 0
 ab0:	a2 2f       	mov	r26, r18
 ab2:	23 2f       	mov	r18, r19
 ab4:	34 2f       	mov	r19, r20
 ab6:	44 27       	eor	r20, r20
 ab8:	58 5f       	subi	r21, 0xF8	; 248
 aba:	f3 cf       	rjmp	.-26     	; 0xaa2 <__addsf3x+0x38>
 abc:	46 95       	lsr	r20
 abe:	37 95       	ror	r19
 ac0:	27 95       	ror	r18
 ac2:	a7 95       	ror	r26
 ac4:	f0 40       	sbci	r31, 0x00	; 0
 ac6:	53 95       	inc	r21
 ac8:	c9 f7       	brne	.-14     	; 0xabc <__addsf3x+0x52>
 aca:	7e f4       	brtc	.+30     	; 0xaea <__addsf3x+0x80>
 acc:	1f 16       	cp	r1, r31
 ace:	ba 0b       	sbc	r27, r26
 ad0:	62 0b       	sbc	r22, r18
 ad2:	73 0b       	sbc	r23, r19
 ad4:	84 0b       	sbc	r24, r20
 ad6:	ba f0       	brmi	.+46     	; 0xb06 <__addsf3x+0x9c>
 ad8:	91 50       	subi	r25, 0x01	; 1
 ada:	a1 f0       	breq	.+40     	; 0xb04 <__addsf3x+0x9a>
 adc:	ff 0f       	add	r31, r31
 ade:	bb 1f       	adc	r27, r27
 ae0:	66 1f       	adc	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	c2 f7       	brpl	.-16     	; 0xad8 <__addsf3x+0x6e>
 ae8:	0e c0       	rjmp	.+28     	; 0xb06 <__addsf3x+0x9c>
 aea:	ba 0f       	add	r27, r26
 aec:	62 1f       	adc	r22, r18
 aee:	73 1f       	adc	r23, r19
 af0:	84 1f       	adc	r24, r20
 af2:	48 f4       	brcc	.+18     	; 0xb06 <__addsf3x+0x9c>
 af4:	87 95       	ror	r24
 af6:	77 95       	ror	r23
 af8:	67 95       	ror	r22
 afa:	b7 95       	ror	r27
 afc:	f7 95       	ror	r31
 afe:	9e 3f       	cpi	r25, 0xFE	; 254
 b00:	08 f0       	brcs	.+2      	; 0xb04 <__addsf3x+0x9a>
 b02:	b0 cf       	rjmp	.-160    	; 0xa64 <__addsf3+0x28>
 b04:	93 95       	inc	r25
 b06:	88 0f       	add	r24, r24
 b08:	08 f0       	brcs	.+2      	; 0xb0c <__addsf3x+0xa2>
 b0a:	99 27       	eor	r25, r25
 b0c:	ee 0f       	add	r30, r30
 b0e:	97 95       	ror	r25
 b10:	87 95       	ror	r24
 b12:	08 95       	ret

00000b14 <__fixsfsi>:
 b14:	0e 94 91 05 	call	0xb22	; 0xb22 <__fixunssfsi>
 b18:	68 94       	set
 b1a:	b1 11       	cpse	r27, r1
 b1c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_szero>
 b20:	08 95       	ret

00000b22 <__fixunssfsi>:
 b22:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__fp_splitA>
 b26:	88 f0       	brcs	.+34     	; 0xb4a <__fixunssfsi+0x28>
 b28:	9f 57       	subi	r25, 0x7F	; 127
 b2a:	98 f0       	brcs	.+38     	; 0xb52 <__fixunssfsi+0x30>
 b2c:	b9 2f       	mov	r27, r25
 b2e:	99 27       	eor	r25, r25
 b30:	b7 51       	subi	r27, 0x17	; 23
 b32:	b0 f0       	brcs	.+44     	; 0xb60 <__fixunssfsi+0x3e>
 b34:	e1 f0       	breq	.+56     	; 0xb6e <__fixunssfsi+0x4c>
 b36:	66 0f       	add	r22, r22
 b38:	77 1f       	adc	r23, r23
 b3a:	88 1f       	adc	r24, r24
 b3c:	99 1f       	adc	r25, r25
 b3e:	1a f0       	brmi	.+6      	; 0xb46 <__fixunssfsi+0x24>
 b40:	ba 95       	dec	r27
 b42:	c9 f7       	brne	.-14     	; 0xb36 <__fixunssfsi+0x14>
 b44:	14 c0       	rjmp	.+40     	; 0xb6e <__fixunssfsi+0x4c>
 b46:	b1 30       	cpi	r27, 0x01	; 1
 b48:	91 f0       	breq	.+36     	; 0xb6e <__fixunssfsi+0x4c>
 b4a:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_zero>
 b4e:	b1 e0       	ldi	r27, 0x01	; 1
 b50:	08 95       	ret
 b52:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_zero>
 b56:	67 2f       	mov	r22, r23
 b58:	78 2f       	mov	r23, r24
 b5a:	88 27       	eor	r24, r24
 b5c:	b8 5f       	subi	r27, 0xF8	; 248
 b5e:	39 f0       	breq	.+14     	; 0xb6e <__fixunssfsi+0x4c>
 b60:	b9 3f       	cpi	r27, 0xF9	; 249
 b62:	cc f3       	brlt	.-14     	; 0xb56 <__fixunssfsi+0x34>
 b64:	86 95       	lsr	r24
 b66:	77 95       	ror	r23
 b68:	67 95       	ror	r22
 b6a:	b3 95       	inc	r27
 b6c:	d9 f7       	brne	.-10     	; 0xb64 <__fixunssfsi+0x42>
 b6e:	3e f4       	brtc	.+14     	; 0xb7e <__fixunssfsi+0x5c>
 b70:	90 95       	com	r25
 b72:	80 95       	com	r24
 b74:	70 95       	com	r23
 b76:	61 95       	neg	r22
 b78:	7f 4f       	sbci	r23, 0xFF	; 255
 b7a:	8f 4f       	sbci	r24, 0xFF	; 255
 b7c:	9f 4f       	sbci	r25, 0xFF	; 255
 b7e:	08 95       	ret

00000b80 <__floatunsisf>:
 b80:	e8 94       	clt
 b82:	09 c0       	rjmp	.+18     	; 0xb96 <__floatsisf+0x12>

00000b84 <__floatsisf>:
 b84:	97 fb       	bst	r25, 7
 b86:	3e f4       	brtc	.+14     	; 0xb96 <__floatsisf+0x12>
 b88:	90 95       	com	r25
 b8a:	80 95       	com	r24
 b8c:	70 95       	com	r23
 b8e:	61 95       	neg	r22
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	8f 4f       	sbci	r24, 0xFF	; 255
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	99 23       	and	r25, r25
 b98:	a9 f0       	breq	.+42     	; 0xbc4 <__floatsisf+0x40>
 b9a:	f9 2f       	mov	r31, r25
 b9c:	96 e9       	ldi	r25, 0x96	; 150
 b9e:	bb 27       	eor	r27, r27
 ba0:	93 95       	inc	r25
 ba2:	f6 95       	lsr	r31
 ba4:	87 95       	ror	r24
 ba6:	77 95       	ror	r23
 ba8:	67 95       	ror	r22
 baa:	b7 95       	ror	r27
 bac:	f1 11       	cpse	r31, r1
 bae:	f8 cf       	rjmp	.-16     	; 0xba0 <__floatsisf+0x1c>
 bb0:	fa f4       	brpl	.+62     	; 0xbf0 <__floatsisf+0x6c>
 bb2:	bb 0f       	add	r27, r27
 bb4:	11 f4       	brne	.+4      	; 0xbba <__floatsisf+0x36>
 bb6:	60 ff       	sbrs	r22, 0
 bb8:	1b c0       	rjmp	.+54     	; 0xbf0 <__floatsisf+0x6c>
 bba:	6f 5f       	subi	r22, 0xFF	; 255
 bbc:	7f 4f       	sbci	r23, 0xFF	; 255
 bbe:	8f 4f       	sbci	r24, 0xFF	; 255
 bc0:	9f 4f       	sbci	r25, 0xFF	; 255
 bc2:	16 c0       	rjmp	.+44     	; 0xbf0 <__floatsisf+0x6c>
 bc4:	88 23       	and	r24, r24
 bc6:	11 f0       	breq	.+4      	; 0xbcc <__floatsisf+0x48>
 bc8:	96 e9       	ldi	r25, 0x96	; 150
 bca:	11 c0       	rjmp	.+34     	; 0xbee <__floatsisf+0x6a>
 bcc:	77 23       	and	r23, r23
 bce:	21 f0       	breq	.+8      	; 0xbd8 <__floatsisf+0x54>
 bd0:	9e e8       	ldi	r25, 0x8E	; 142
 bd2:	87 2f       	mov	r24, r23
 bd4:	76 2f       	mov	r23, r22
 bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <__floatsisf+0x5e>
 bd8:	66 23       	and	r22, r22
 bda:	71 f0       	breq	.+28     	; 0xbf8 <__floatsisf+0x74>
 bdc:	96 e8       	ldi	r25, 0x86	; 134
 bde:	86 2f       	mov	r24, r22
 be0:	70 e0       	ldi	r23, 0x00	; 0
 be2:	60 e0       	ldi	r22, 0x00	; 0
 be4:	2a f0       	brmi	.+10     	; 0xbf0 <__floatsisf+0x6c>
 be6:	9a 95       	dec	r25
 be8:	66 0f       	add	r22, r22
 bea:	77 1f       	adc	r23, r23
 bec:	88 1f       	adc	r24, r24
 bee:	da f7       	brpl	.-10     	; 0xbe6 <__floatsisf+0x62>
 bf0:	88 0f       	add	r24, r24
 bf2:	96 95       	lsr	r25
 bf4:	87 95       	ror	r24
 bf6:	97 f9       	bld	r25, 7
 bf8:	08 95       	ret

00000bfa <__fp_inf>:
 bfa:	97 f9       	bld	r25, 7
 bfc:	9f 67       	ori	r25, 0x7F	; 127
 bfe:	80 e8       	ldi	r24, 0x80	; 128
 c00:	70 e0       	ldi	r23, 0x00	; 0
 c02:	60 e0       	ldi	r22, 0x00	; 0
 c04:	08 95       	ret

00000c06 <__fp_nan>:
 c06:	9f ef       	ldi	r25, 0xFF	; 255
 c08:	80 ec       	ldi	r24, 0xC0	; 192
 c0a:	08 95       	ret

00000c0c <__fp_pscA>:
 c0c:	00 24       	eor	r0, r0
 c0e:	0a 94       	dec	r0
 c10:	16 16       	cp	r1, r22
 c12:	17 06       	cpc	r1, r23
 c14:	18 06       	cpc	r1, r24
 c16:	09 06       	cpc	r0, r25
 c18:	08 95       	ret

00000c1a <__fp_pscB>:
 c1a:	00 24       	eor	r0, r0
 c1c:	0a 94       	dec	r0
 c1e:	12 16       	cp	r1, r18
 c20:	13 06       	cpc	r1, r19
 c22:	14 06       	cpc	r1, r20
 c24:	05 06       	cpc	r0, r21
 c26:	08 95       	ret

00000c28 <__fp_round>:
 c28:	09 2e       	mov	r0, r25
 c2a:	03 94       	inc	r0
 c2c:	00 0c       	add	r0, r0
 c2e:	11 f4       	brne	.+4      	; 0xc34 <__fp_round+0xc>
 c30:	88 23       	and	r24, r24
 c32:	52 f0       	brmi	.+20     	; 0xc48 <__fp_round+0x20>
 c34:	bb 0f       	add	r27, r27
 c36:	40 f4       	brcc	.+16     	; 0xc48 <__fp_round+0x20>
 c38:	bf 2b       	or	r27, r31
 c3a:	11 f4       	brne	.+4      	; 0xc40 <__fp_round+0x18>
 c3c:	60 ff       	sbrs	r22, 0
 c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__fp_round+0x20>
 c40:	6f 5f       	subi	r22, 0xFF	; 255
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	08 95       	ret

00000c4a <__fp_split3>:
 c4a:	57 fd       	sbrc	r21, 7
 c4c:	90 58       	subi	r25, 0x80	; 128
 c4e:	44 0f       	add	r20, r20
 c50:	55 1f       	adc	r21, r21
 c52:	59 f0       	breq	.+22     	; 0xc6a <__fp_splitA+0x10>
 c54:	5f 3f       	cpi	r21, 0xFF	; 255
 c56:	71 f0       	breq	.+28     	; 0xc74 <__fp_splitA+0x1a>
 c58:	47 95       	ror	r20

00000c5a <__fp_splitA>:
 c5a:	88 0f       	add	r24, r24
 c5c:	97 fb       	bst	r25, 7
 c5e:	99 1f       	adc	r25, r25
 c60:	61 f0       	breq	.+24     	; 0xc7a <__fp_splitA+0x20>
 c62:	9f 3f       	cpi	r25, 0xFF	; 255
 c64:	79 f0       	breq	.+30     	; 0xc84 <__fp_splitA+0x2a>
 c66:	87 95       	ror	r24
 c68:	08 95       	ret
 c6a:	12 16       	cp	r1, r18
 c6c:	13 06       	cpc	r1, r19
 c6e:	14 06       	cpc	r1, r20
 c70:	55 1f       	adc	r21, r21
 c72:	f2 cf       	rjmp	.-28     	; 0xc58 <__fp_split3+0xe>
 c74:	46 95       	lsr	r20
 c76:	f1 df       	rcall	.-30     	; 0xc5a <__fp_splitA>
 c78:	08 c0       	rjmp	.+16     	; 0xc8a <__fp_splitA+0x30>
 c7a:	16 16       	cp	r1, r22
 c7c:	17 06       	cpc	r1, r23
 c7e:	18 06       	cpc	r1, r24
 c80:	99 1f       	adc	r25, r25
 c82:	f1 cf       	rjmp	.-30     	; 0xc66 <__fp_splitA+0xc>
 c84:	86 95       	lsr	r24
 c86:	71 05       	cpc	r23, r1
 c88:	61 05       	cpc	r22, r1
 c8a:	08 94       	sec
 c8c:	08 95       	ret

00000c8e <__fp_zero>:
 c8e:	e8 94       	clt

00000c90 <__fp_szero>:
 c90:	bb 27       	eor	r27, r27
 c92:	66 27       	eor	r22, r22
 c94:	77 27       	eor	r23, r23
 c96:	cb 01       	movw	r24, r22
 c98:	97 f9       	bld	r25, 7
 c9a:	08 95       	ret

00000c9c <__mulsf3>:
 c9c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__mulsf3x>
 ca0:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__fp_round>
 ca4:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_pscA>
 ca8:	38 f0       	brcs	.+14     	; 0xcb8 <__mulsf3+0x1c>
 caa:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_pscB>
 cae:	20 f0       	brcs	.+8      	; 0xcb8 <__mulsf3+0x1c>
 cb0:	95 23       	and	r25, r21
 cb2:	11 f0       	breq	.+4      	; 0xcb8 <__mulsf3+0x1c>
 cb4:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_inf>
 cb8:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__fp_nan>
 cbc:	11 24       	eor	r1, r1
 cbe:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_szero>

00000cc2 <__mulsf3x>:
 cc2:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fp_split3>
 cc6:	70 f3       	brcs	.-36     	; 0xca4 <__mulsf3+0x8>

00000cc8 <__mulsf3_pse>:
 cc8:	95 9f       	mul	r25, r21
 cca:	c1 f3       	breq	.-16     	; 0xcbc <__mulsf3+0x20>
 ccc:	95 0f       	add	r25, r21
 cce:	50 e0       	ldi	r21, 0x00	; 0
 cd0:	55 1f       	adc	r21, r21
 cd2:	62 9f       	mul	r22, r18
 cd4:	f0 01       	movw	r30, r0
 cd6:	72 9f       	mul	r23, r18
 cd8:	bb 27       	eor	r27, r27
 cda:	f0 0d       	add	r31, r0
 cdc:	b1 1d       	adc	r27, r1
 cde:	63 9f       	mul	r22, r19
 ce0:	aa 27       	eor	r26, r26
 ce2:	f0 0d       	add	r31, r0
 ce4:	b1 1d       	adc	r27, r1
 ce6:	aa 1f       	adc	r26, r26
 ce8:	64 9f       	mul	r22, r20
 cea:	66 27       	eor	r22, r22
 cec:	b0 0d       	add	r27, r0
 cee:	a1 1d       	adc	r26, r1
 cf0:	66 1f       	adc	r22, r22
 cf2:	82 9f       	mul	r24, r18
 cf4:	22 27       	eor	r18, r18
 cf6:	b0 0d       	add	r27, r0
 cf8:	a1 1d       	adc	r26, r1
 cfa:	62 1f       	adc	r22, r18
 cfc:	73 9f       	mul	r23, r19
 cfe:	b0 0d       	add	r27, r0
 d00:	a1 1d       	adc	r26, r1
 d02:	62 1f       	adc	r22, r18
 d04:	83 9f       	mul	r24, r19
 d06:	a0 0d       	add	r26, r0
 d08:	61 1d       	adc	r22, r1
 d0a:	22 1f       	adc	r18, r18
 d0c:	74 9f       	mul	r23, r20
 d0e:	33 27       	eor	r19, r19
 d10:	a0 0d       	add	r26, r0
 d12:	61 1d       	adc	r22, r1
 d14:	23 1f       	adc	r18, r19
 d16:	84 9f       	mul	r24, r20
 d18:	60 0d       	add	r22, r0
 d1a:	21 1d       	adc	r18, r1
 d1c:	82 2f       	mov	r24, r18
 d1e:	76 2f       	mov	r23, r22
 d20:	6a 2f       	mov	r22, r26
 d22:	11 24       	eor	r1, r1
 d24:	9f 57       	subi	r25, 0x7F	; 127
 d26:	50 40       	sbci	r21, 0x00	; 0
 d28:	9a f0       	brmi	.+38     	; 0xd50 <__mulsf3_pse+0x88>
 d2a:	f1 f0       	breq	.+60     	; 0xd68 <__mulsf3_pse+0xa0>
 d2c:	88 23       	and	r24, r24
 d2e:	4a f0       	brmi	.+18     	; 0xd42 <__mulsf3_pse+0x7a>
 d30:	ee 0f       	add	r30, r30
 d32:	ff 1f       	adc	r31, r31
 d34:	bb 1f       	adc	r27, r27
 d36:	66 1f       	adc	r22, r22
 d38:	77 1f       	adc	r23, r23
 d3a:	88 1f       	adc	r24, r24
 d3c:	91 50       	subi	r25, 0x01	; 1
 d3e:	50 40       	sbci	r21, 0x00	; 0
 d40:	a9 f7       	brne	.-22     	; 0xd2c <__mulsf3_pse+0x64>
 d42:	9e 3f       	cpi	r25, 0xFE	; 254
 d44:	51 05       	cpc	r21, r1
 d46:	80 f0       	brcs	.+32     	; 0xd68 <__mulsf3_pse+0xa0>
 d48:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_inf>
 d4c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_szero>
 d50:	5f 3f       	cpi	r21, 0xFF	; 255
 d52:	e4 f3       	brlt	.-8      	; 0xd4c <__mulsf3_pse+0x84>
 d54:	98 3e       	cpi	r25, 0xE8	; 232
 d56:	d4 f3       	brlt	.-12     	; 0xd4c <__mulsf3_pse+0x84>
 d58:	86 95       	lsr	r24
 d5a:	77 95       	ror	r23
 d5c:	67 95       	ror	r22
 d5e:	b7 95       	ror	r27
 d60:	f7 95       	ror	r31
 d62:	e7 95       	ror	r30
 d64:	9f 5f       	subi	r25, 0xFF	; 255
 d66:	c1 f7       	brne	.-16     	; 0xd58 <__mulsf3_pse+0x90>
 d68:	fe 2b       	or	r31, r30
 d6a:	88 0f       	add	r24, r24
 d6c:	91 1d       	adc	r25, r1
 d6e:	96 95       	lsr	r25
 d70:	87 95       	ror	r24
 d72:	97 f9       	bld	r25, 7
 d74:	08 95       	ret

00000d76 <__divmodsi4>:
 d76:	05 2e       	mov	r0, r21
 d78:	97 fb       	bst	r25, 7
 d7a:	1e f4       	brtc	.+6      	; 0xd82 <__divmodsi4+0xc>
 d7c:	00 94       	com	r0
 d7e:	0e 94 d2 06 	call	0xda4	; 0xda4 <__negsi2>
 d82:	57 fd       	sbrc	r21, 7
 d84:	07 d0       	rcall	.+14     	; 0xd94 <__divmodsi4_neg2>
 d86:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__udivmodsi4>
 d8a:	07 fc       	sbrc	r0, 7
 d8c:	03 d0       	rcall	.+6      	; 0xd94 <__divmodsi4_neg2>
 d8e:	4e f4       	brtc	.+18     	; 0xda2 <__divmodsi4_exit>
 d90:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__negsi2>

00000d94 <__divmodsi4_neg2>:
 d94:	50 95       	com	r21
 d96:	40 95       	com	r20
 d98:	30 95       	com	r19
 d9a:	21 95       	neg	r18
 d9c:	3f 4f       	sbci	r19, 0xFF	; 255
 d9e:	4f 4f       	sbci	r20, 0xFF	; 255
 da0:	5f 4f       	sbci	r21, 0xFF	; 255

00000da2 <__divmodsi4_exit>:
 da2:	08 95       	ret

00000da4 <__negsi2>:
 da4:	90 95       	com	r25
 da6:	80 95       	com	r24
 da8:	70 95       	com	r23
 daa:	61 95       	neg	r22
 dac:	7f 4f       	sbci	r23, 0xFF	; 255
 dae:	8f 4f       	sbci	r24, 0xFF	; 255
 db0:	9f 4f       	sbci	r25, 0xFF	; 255
 db2:	08 95       	ret

00000db4 <__umulhisi3>:
 db4:	a2 9f       	mul	r26, r18
 db6:	b0 01       	movw	r22, r0
 db8:	b3 9f       	mul	r27, r19
 dba:	c0 01       	movw	r24, r0
 dbc:	a3 9f       	mul	r26, r19
 dbe:	70 0d       	add	r23, r0
 dc0:	81 1d       	adc	r24, r1
 dc2:	11 24       	eor	r1, r1
 dc4:	91 1d       	adc	r25, r1
 dc6:	b2 9f       	mul	r27, r18
 dc8:	70 0d       	add	r23, r0
 dca:	81 1d       	adc	r24, r1
 dcc:	11 24       	eor	r1, r1
 dce:	91 1d       	adc	r25, r1
 dd0:	08 95       	ret

00000dd2 <__udivmodsi4>:
 dd2:	a1 e2       	ldi	r26, 0x21	; 33
 dd4:	1a 2e       	mov	r1, r26
 dd6:	aa 1b       	sub	r26, r26
 dd8:	bb 1b       	sub	r27, r27
 dda:	fd 01       	movw	r30, r26
 ddc:	0d c0       	rjmp	.+26     	; 0xdf8 <__udivmodsi4_ep>

00000dde <__udivmodsi4_loop>:
 dde:	aa 1f       	adc	r26, r26
 de0:	bb 1f       	adc	r27, r27
 de2:	ee 1f       	adc	r30, r30
 de4:	ff 1f       	adc	r31, r31
 de6:	a2 17       	cp	r26, r18
 de8:	b3 07       	cpc	r27, r19
 dea:	e4 07       	cpc	r30, r20
 dec:	f5 07       	cpc	r31, r21
 dee:	20 f0       	brcs	.+8      	; 0xdf8 <__udivmodsi4_ep>
 df0:	a2 1b       	sub	r26, r18
 df2:	b3 0b       	sbc	r27, r19
 df4:	e4 0b       	sbc	r30, r20
 df6:	f5 0b       	sbc	r31, r21

00000df8 <__udivmodsi4_ep>:
 df8:	66 1f       	adc	r22, r22
 dfa:	77 1f       	adc	r23, r23
 dfc:	88 1f       	adc	r24, r24
 dfe:	99 1f       	adc	r25, r25
 e00:	1a 94       	dec	r1
 e02:	69 f7       	brne	.-38     	; 0xdde <__udivmodsi4_loop>
 e04:	60 95       	com	r22
 e06:	70 95       	com	r23
 e08:	80 95       	com	r24
 e0a:	90 95       	com	r25
 e0c:	9b 01       	movw	r18, r22
 e0e:	ac 01       	movw	r20, r24
 e10:	bd 01       	movw	r22, r26
 e12:	cf 01       	movw	r24, r30
 e14:	08 95       	ret

00000e16 <__itoa_ncheck>:
 e16:	bb 27       	eor	r27, r27
 e18:	4a 30       	cpi	r20, 0x0A	; 10
 e1a:	31 f4       	brne	.+12     	; 0xe28 <__itoa_ncheck+0x12>
 e1c:	99 23       	and	r25, r25
 e1e:	22 f4       	brpl	.+8      	; 0xe28 <__itoa_ncheck+0x12>
 e20:	bd e2       	ldi	r27, 0x2D	; 45
 e22:	90 95       	com	r25
 e24:	81 95       	neg	r24
 e26:	9f 4f       	sbci	r25, 0xFF	; 255
 e28:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__utoa_common>

00000e2c <__utoa_ncheck>:
 e2c:	bb 27       	eor	r27, r27

00000e2e <__utoa_common>:
 e2e:	fb 01       	movw	r30, r22
 e30:	55 27       	eor	r21, r21
 e32:	aa 27       	eor	r26, r26
 e34:	88 0f       	add	r24, r24
 e36:	99 1f       	adc	r25, r25
 e38:	aa 1f       	adc	r26, r26
 e3a:	a4 17       	cp	r26, r20
 e3c:	10 f0       	brcs	.+4      	; 0xe42 <__utoa_common+0x14>
 e3e:	a4 1b       	sub	r26, r20
 e40:	83 95       	inc	r24
 e42:	50 51       	subi	r21, 0x10	; 16
 e44:	b9 f7       	brne	.-18     	; 0xe34 <__utoa_common+0x6>
 e46:	a0 5d       	subi	r26, 0xD0	; 208
 e48:	aa 33       	cpi	r26, 0x3A	; 58
 e4a:	08 f0       	brcs	.+2      	; 0xe4e <__utoa_common+0x20>
 e4c:	a9 5d       	subi	r26, 0xD9	; 217
 e4e:	a1 93       	st	Z+, r26
 e50:	00 97       	sbiw	r24, 0x00	; 0
 e52:	79 f7       	brne	.-34     	; 0xe32 <__utoa_common+0x4>
 e54:	b1 11       	cpse	r27, r1
 e56:	b1 93       	st	Z+, r27
 e58:	11 92       	st	Z+, r1
 e5a:	cb 01       	movw	r24, r22
 e5c:	0c 94 30 07 	jmp	0xe60	; 0xe60 <strrev>

00000e60 <strrev>:
 e60:	dc 01       	movw	r26, r24
 e62:	fc 01       	movw	r30, r24
 e64:	67 2f       	mov	r22, r23
 e66:	71 91       	ld	r23, Z+
 e68:	77 23       	and	r23, r23
 e6a:	e1 f7       	brne	.-8      	; 0xe64 <strrev+0x4>
 e6c:	32 97       	sbiw	r30, 0x02	; 2
 e6e:	04 c0       	rjmp	.+8      	; 0xe78 <strrev+0x18>
 e70:	7c 91       	ld	r23, X
 e72:	6d 93       	st	X+, r22
 e74:	70 83       	st	Z, r23
 e76:	62 91       	ld	r22, -Z
 e78:	ae 17       	cp	r26, r30
 e7a:	bf 07       	cpc	r27, r31
 e7c:	c8 f3       	brcs	.-14     	; 0xe70 <strrev+0x10>
 e7e:	08 95       	ret

00000e80 <_exit>:
 e80:	f8 94       	cli

00000e82 <__stop_program>:
 e82:	ff cf       	rjmp	.-2      	; 0xe82 <__stop_program>
