
BuckConverter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000f7c  00001010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  00800116  00800116  00001026  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000121c  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a75  00000000  00000000  000023bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3c  00000000  00000000  00002e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000601  00000000  00000000  00003b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d4  00000000  00000000  00004115  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000046e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__vector_20>
  54:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3e       	cpi	r26, 0xE3	; 227
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>



int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	ce 50       	subi	r28, 0x0E	; 14
  b0:	d1 40       	sbci	r29, 0x01	; 1
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
    ADC_init();
  bc:	0e 94 0b 01 	call	0x216	; 0x216 <ADC_init>
	uart_init();
  c0:	0e 94 6d 05 	call	0xada	; 0xada <uart_init>
	pwm_init();
  c4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <pwm_init>
	tajmer0_init();
  c8:	0e 94 80 03 	call	0x700	; 0x700 <tajmer0_init>
	
	
	sei();
  cc:	78 94       	sei
  ce:	8e 01       	movw	r16, r28
  d0:	09 51       	subi	r16, 0x19	; 25
  d2:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  d4:	0f 2e       	mov	r0, r31
  d6:	f4 e6       	ldi	r31, 0x64	; 100
  d8:	8f 2e       	mov	r8, r31
  da:	91 2c       	mov	r9, r1
  dc:	a1 2c       	mov	r10, r1
  de:	b1 2c       	mov	r11, r1
  e0:	f0 2d       	mov	r31, r0
  e2:	fe 01       	movw	r30, r28
  e4:	7f 96       	adiw	r30, 0x1f	; 31
#include <util/delay.h>



int main(void)
{
  e6:	df 01       	movw	r26, r30
		AVG_mereni_napon =0;
		
		for(i=0; i<br_uzoraka; i++)
		{
			
			niz_mereni_napon[i] = mereni_napon;
  e8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mereni_napon>
  ec:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <mereni_napon+0x1>
  f0:	8d 93       	st	X+, r24
  f2:	9d 93       	st	X+, r25
    {
		/*napomena: ovakaj dole pokusaj uzimanja srednje vrednosti ne pije vodu jer su petlje prebrze za ad rezultate, tako da se 
		zapravo mali broj ad rezultata obradi, mozda nekoliko. Potrebno je ovo provuci kroz tajmer*/
		AVG_mereni_napon =0;
		
		for(i=0; i<br_uzoraka; i++)
  f4:	a0 17       	cp	r26, r16
  f6:	b1 07       	cpc	r27, r17
  f8:	b9 f7       	brne	.-18     	; 0xe8 <main+0x42>
  fa:	c1 2c       	mov	r12, r1
  fc:	d1 2c       	mov	r13, r1
  fe:	76 01       	movw	r14, r12
		}
		
		for(i=0; i<br_uzoraka; i++)
		{
			
			AVG_mereni_napon += niz_mereni_napon[i];
 100:	81 91       	ld	r24, Z+
 102:	91 91       	ld	r25, Z+
 104:	c8 0e       	add	r12, r24
 106:	d9 1e       	adc	r13, r25
 108:	e1 1c       	adc	r14, r1
 10a:	f1 1c       	adc	r15, r1
		{
			
			niz_mereni_napon[i] = mereni_napon;
		}
		
		for(i=0; i<br_uzoraka; i++)
 10c:	e0 17       	cp	r30, r16
 10e:	f1 07       	cpc	r31, r17
 110:	b9 f7       	brne	.-18     	; 0x100 <main+0x5a>
		}
	
		AVG_mereni_napon = AVG_mereni_napon/br_uzoraka;
		
		
		if(flag_prekid_10ms == 1)		//slanje putem UART Tx na svakih 10ms. Podesava se u tajmer.c fajlu
 112:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <flag_prekid_10ms>
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	21 f7       	brne	.-56     	; 0xe2 <main+0x3c>
		{
			flag_prekid_10ms = 0;
 11a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <flag_prekid_10ms>
		/*
		send_str("");
		itoa( struja_shunt_AVG , bafer, 10);
		send_str(bafer);
		*/
		send_str("  ");
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
		itoa( ref_napon_sa_pot , bafer, 10);
 126:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ref_napon_sa_pot>
 12a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ref_napon_sa_pot+0x1>
 12e:	4a e0       	ldi	r20, 0x0A	; 10
 130:	be 01       	movw	r22, r28
 132:	6f 5f       	subi	r22, 0xFF	; 255
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	0e 94 87 07 	call	0xf0e	; 0xf0e <__itoa_ncheck>
		send_str(bafer);
 13a:	ce 01       	movw	r24, r28
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
		
		
		send_str("  ");
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
 14a:	c7 01       	movw	r24, r14
 14c:	b6 01       	movw	r22, r12
 14e:	a5 01       	movw	r20, r10
 150:	94 01       	movw	r18, r8
 152:	0e 94 42 07 	call	0xe84	; 0xe84 <__udivmodsi4>
 156:	da 01       	movw	r26, r20
 158:	c9 01       	movw	r24, r18
 15a:	4a e0       	ldi	r20, 0x0A	; 10
 15c:	be 01       	movw	r22, r28
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	0e 94 87 07 	call	0xf0e	; 0xf0e <__itoa_ncheck>
		itoa( AVG_mereni_napon , bafer, 10);
		send_str(bafer);
 166:	ce 01       	movw	r24, r28
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
		
		send_str("  ");
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
		itoa( merena_struja , bafer, 10);
 176:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <merena_struja>
 17a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <merena_struja+0x1>
 17e:	4a e0       	ldi	r20, 0x0A	; 10
 180:	be 01       	movw	r22, r28
 182:	6f 5f       	subi	r22, 0xFF	; 255
 184:	7f 4f       	sbci	r23, 0xFF	; 255
 186:	0e 94 87 07 	call	0xf0e	; 0xf0e <__itoa_ncheck>
		send_str(bafer);
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
		itoa( suma_greske/100 , bafer, 10);
		send_str(bafer);
		*/
		
		
		send_str("  ");
 192:	80 e1       	ldi	r24, 0x10	; 16
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
		itoa( Upravljanje*10 , bafer, 10);
 19a:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <Upravljanje>
 19e:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 1a2:	c9 01       	movw	r24, r18
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	4a e0       	ldi	r20, 0x0A	; 10
 1b6:	be 01       	movw	r22, r28
 1b8:	6f 5f       	subi	r22, 0xFF	; 255
 1ba:	7f 4f       	sbci	r23, 0xFF	; 255
 1bc:	82 0f       	add	r24, r18
 1be:	93 1f       	adc	r25, r19
 1c0:	0e 94 87 07 	call	0xf0e	; 0xf0e <__itoa_ncheck>
		send_str(bafer);
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
		
		send_str("  ");
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
 1d4:	4a e0       	ldi	r20, 0x0A	; 10
 1d6:	be 01       	movw	r22, r28
 1d8:	6f 5f       	subi	r22, 0xFF	; 255
 1da:	7f 4f       	sbci	r23, 0xFF	; 255
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 87 07 	call	0xf0e	; 0xf0e <__itoa_ncheck>
		itoa( 0 , bafer, 10);
		send_str(bafer);
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
		
		send_str("  ");
 1ec:	80 e1       	ldi	r24, 0x10	; 16
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
 1f4:	4a e0       	ldi	r20, 0x0A	; 10
 1f6:	be 01       	movw	r22, r28
 1f8:	6f 5f       	subi	r22, 0xFF	; 255
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	88 e2       	ldi	r24, 0x28	; 40
 1fe:	93 e2       	ldi	r25, 0x23	; 35
 200:	0e 94 87 07 	call	0xf0e	; 0xf0e <__itoa_ncheck>
		itoa( 9000 , bafer, 10);
		send_str(bafer);
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
		*/

		
	
		
		send_str("\n");
 20c:	83 e1       	ldi	r24, 0x13	; 19
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 7d 05 	call	0xafa	; 0xafa <send_str>
 214:	66 cf       	rjmp	.-308    	; 0xe2 <main+0x3c>

00000216 <ADC_init>:
volatile void sumator();
volatile void _2x8bit_reg_2_1x16bit_reg();

void ADC_init()
{
	DDRD |= 1<<DDB7;
 216:	57 9a       	sbi	0x0a, 7	; 10
	
	PRR = 0;						//power reduction off
 218:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
 21c:	80 ec       	ldi	r24, 0xC0	; 192
 21e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
 222:	8e ee       	ldi	r24, 0xEE	; 238
 224:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
 228:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
 22c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ad_kanal>
 230:	08 95       	ret

00000232 <sumator>:
}



volatile void sumator()
{
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	//radi sumu po kolonama matrice, tj po kanalu, izvlaci prosek i upisuje u odgovarajucu promenljivu
	volatile static uint8_t i=0;


	
	if (ad_kanal == 0) //ref_napon_sa_pot
 23e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 242:	81 11       	cpse	r24, r1
 244:	4d c0       	rjmp	.+154    	; 0x2e0 <sumator+0xae>
	{
		ref_napon_sa_pot = 0; //nuliram da ne bi uticalo na sumiranje i prosek i stvarne vrednosti
 246:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ref_napon_sa_pot+0x1>
 24a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ref_napon_sa_pot>
		
		for (i=0; i<BR_SEMPLOVA; i++)
 24e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 252:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 256:	84 31       	cpi	r24, 0x14	; 20
 258:	18 f5       	brcc	.+70     	; 0x2a0 <sumator+0x6e>
		{
			ref_napon_sa_pot += adc_res[ad_kanal][i];		//suma po nultoj koloni (nultom kanalu)
 25a:	44 e1       	ldi	r20, 0x14	; 20
 25c:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 260:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 264:	4e 9f       	mul	r20, r30
 266:	f0 01       	movw	r30, r0
 268:	11 24       	eor	r1, r1
 26a:	e8 0f       	add	r30, r24
 26c:	f1 1d       	adc	r31, r1
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ef 5d       	subi	r30, 0xDF	; 223
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	20 81       	ld	r18, Z
 278:	31 81       	ldd	r19, Z+1	; 0x01
 27a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ref_napon_sa_pot>
 27e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ref_napon_sa_pot+0x1>
 282:	82 0f       	add	r24, r18
 284:	93 1f       	adc	r25, r19
 286:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ref_napon_sa_pot+0x1>
 28a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ref_napon_sa_pot>
	
	if (ad_kanal == 0) //ref_napon_sa_pot
	{
		ref_napon_sa_pot = 0; //nuliram da ne bi uticalo na sumiranje i prosek i stvarne vrednosti
		
		for (i=0; i<BR_SEMPLOVA; i++)
 28e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 298:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 29c:	84 31       	cpi	r24, 0x14	; 20
 29e:	f0 f2       	brcs	.-68     	; 0x25c <sumator+0x2a>
		{
			ref_napon_sa_pot += adc_res[ad_kanal][i];		//suma po nultoj koloni (nultom kanalu)
		}
		ref_napon_sa_pot = (ref_napon_sa_pot/BR_SEMPLOVA) * 19.613;  //1023 = 20000 mV
 2a0:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <ref_napon_sa_pot>
 2a4:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <ref_napon_sa_pot+0x1>
 2a8:	ad ec       	ldi	r26, 0xCD	; 205
 2aa:	bc ec       	ldi	r27, 0xCC	; 204
 2ac:	0e 94 64 07 	call	0xec8	; 0xec8 <__umulhisi3>
 2b0:	92 95       	swap	r25
 2b2:	82 95       	swap	r24
 2b4:	8f 70       	andi	r24, 0x0F	; 15
 2b6:	89 27       	eor	r24, r25
 2b8:	9f 70       	andi	r25, 0x0F	; 15
 2ba:	89 27       	eor	r24, r25
 2bc:	bc 01       	movw	r22, r24
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 33 06 	call	0xc66	; 0xc66 <__floatunsisf>
 2c6:	2d e6       	ldi	r18, 0x6D	; 109
 2c8:	37 ee       	ldi	r19, 0xE7	; 231
 2ca:	4c e9       	ldi	r20, 0x9C	; 156
 2cc:	51 e4       	ldi	r21, 0x41	; 65
 2ce:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 2d2:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 2d6:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <ref_napon_sa_pot+0x1>
 2da:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <ref_napon_sa_pot>
 2de:	b5 c0       	rjmp	.+362    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		
		//ref_napon_sa_pot = 9000; //za potrebe debagovanja
	}
	else if (ad_kanal == 1)	//merena struja
 2e0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	09 f0       	breq	.+2      	; 0x2ea <sumator+0xb8>
 2e8:	4d c0       	rjmp	.+154    	; 0x384 <sumator+0x152>
	{
		merena_struja = 0;
 2ea:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <merena_struja+0x1>
 2ee:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <merena_struja>
		
		for (i=0; i<BR_SEMPLOVA; i++)
 2f2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 2f6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 2fa:	84 31       	cpi	r24, 0x14	; 20
 2fc:	18 f5       	brcc	.+70     	; 0x344 <sumator+0x112>
		{
			merena_struja += adc_res[ad_kanal][i];
 2fe:	44 e1       	ldi	r20, 0x14	; 20
 300:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 304:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 308:	4e 9f       	mul	r20, r30
 30a:	f0 01       	movw	r30, r0
 30c:	11 24       	eor	r1, r1
 30e:	e8 0f       	add	r30, r24
 310:	f1 1d       	adc	r31, r1
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	ef 5d       	subi	r30, 0xDF	; 223
 318:	fe 4f       	sbci	r31, 0xFE	; 254
 31a:	20 81       	ld	r18, Z
 31c:	31 81       	ldd	r19, Z+1	; 0x01
 31e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <merena_struja>
 322:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <merena_struja+0x1>
 326:	82 0f       	add	r24, r18
 328:	93 1f       	adc	r25, r19
 32a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <merena_struja+0x1>
 32e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <merena_struja>
	}
	else if (ad_kanal == 1)	//merena struja
	{
		merena_struja = 0;
		
		for (i=0; i<BR_SEMPLOVA; i++)
 332:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 33c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 340:	84 31       	cpi	r24, 0x14	; 20
 342:	f0 f2       	brcs	.-68     	; 0x300 <sumator+0xce>
		{
			merena_struja += adc_res[ad_kanal][i];
		}
		merena_struja = (merena_struja/BR_SEMPLOVA) * 4.895;  // 1023 = 1093 mV, R=220 mOhm, I=V/R = 4968 mA (MAX); izracunato i skalirano da se za max input dobija ~5A
 344:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <merena_struja>
 348:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <merena_struja+0x1>
 34c:	ad ec       	ldi	r26, 0xCD	; 205
 34e:	bc ec       	ldi	r27, 0xCC	; 204
 350:	0e 94 64 07 	call	0xec8	; 0xec8 <__umulhisi3>
 354:	92 95       	swap	r25
 356:	82 95       	swap	r24
 358:	8f 70       	andi	r24, 0x0F	; 15
 35a:	89 27       	eor	r24, r25
 35c:	9f 70       	andi	r25, 0x0F	; 15
 35e:	89 27       	eor	r24, r25
 360:	bc 01       	movw	r22, r24
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 33 06 	call	0xc66	; 0xc66 <__floatunsisf>
 36a:	27 ed       	ldi	r18, 0xD7	; 215
 36c:	33 ea       	ldi	r19, 0xA3	; 163
 36e:	4c e9       	ldi	r20, 0x9C	; 156
 370:	50 e4       	ldi	r21, 0x40	; 64
 372:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 376:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 37a:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <merena_struja+0x1>
 37e:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <merena_struja>
 382:	63 c0       	rjmp	.+198    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
															  //malo je kompenzovan mnozitelj merenjem pomocu voltmetra
															 /***** Vref 1.1V je zapravo 1.093 V ******/
	}
	else if (ad_kanal == 2)	//mereni napon
 384:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	09 f0       	breq	.+2      	; 0x38e <sumator+0x15c>
 38c:	5e c0       	rjmp	.+188    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	{
		mereni_napon = 0;
 38e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <mereni_napon+0x1>
 392:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <mereni_napon>
		
		for (i=0; i<BR_SEMPLOVA; i++)
 396:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 39a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 39e:	84 31       	cpi	r24, 0x14	; 20
 3a0:	18 f5       	brcc	.+70     	; 0x3e8 <sumator+0x1b6>
		{
			mereni_napon += adc_res[ad_kanal][i];
 3a2:	44 e1       	ldi	r20, 0x14	; 20
 3a4:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 3a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3ac:	4e 9f       	mul	r20, r30
 3ae:	f0 01       	movw	r30, r0
 3b0:	11 24       	eor	r1, r1
 3b2:	e8 0f       	add	r30, r24
 3b4:	f1 1d       	adc	r31, r1
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	ef 5d       	subi	r30, 0xDF	; 223
 3bc:	fe 4f       	sbci	r31, 0xFE	; 254
 3be:	80 81       	ld	r24, Z
 3c0:	91 81       	ldd	r25, Z+1	; 0x01
 3c2:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <mereni_napon>
 3c6:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <mereni_napon+0x1>
 3ca:	82 0f       	add	r24, r18
 3cc:	93 1f       	adc	r25, r19
 3ce:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <mereni_napon+0x1>
 3d2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <mereni_napon>
	}
	else if (ad_kanal == 2)	//mereni napon
	{
		mereni_napon = 0;
		
		for (i=0; i<BR_SEMPLOVA; i++)
 3d6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3da:	8f 5f       	subi	r24, 0xFF	; 255
 3dc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 3e0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3e4:	84 31       	cpi	r24, 0x14	; 20
 3e6:	f0 f2       	brcs	.-68     	; 0x3a4 <sumator+0x172>
		{
			mereni_napon += adc_res[ad_kanal][i];
		}
		mereni_napon = ((mereni_napon/BR_SEMPLOVA) * 19.613) - (merena_struja * 0.22);  //1023 = 20000 mV - naposnki pad preko sant otpornika (220 mOhm)
 3e8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mereni_napon>
 3ec:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <mereni_napon+0x1>
 3f0:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <merena_struja>
 3f4:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <merena_struja+0x1>
 3f8:	64 e1       	ldi	r22, 0x14	; 20
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__divmodhi4>
 400:	07 2e       	mov	r0, r23
 402:	00 0c       	add	r0, r0
 404:	88 0b       	sbc	r24, r24
 406:	99 0b       	sbc	r25, r25
 408:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 40c:	2d e6       	ldi	r18, 0x6D	; 109
 40e:	37 ee       	ldi	r19, 0xE7	; 231
 410:	4c e9       	ldi	r20, 0x9C	; 156
 412:	51 e4       	ldi	r21, 0x41	; 65
 414:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 418:	6b 01       	movw	r12, r22
 41a:	7c 01       	movw	r14, r24
 41c:	be 01       	movw	r22, r28
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 33 06 	call	0xc66	; 0xc66 <__floatunsisf>
 426:	2e ea       	ldi	r18, 0xAE	; 174
 428:	37 e4       	ldi	r19, 0x47	; 71
 42a:	41 e6       	ldi	r20, 0x61	; 97
 42c:	5e e3       	ldi	r21, 0x3E	; 62
 42e:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 432:	9b 01       	movw	r18, r22
 434:	ac 01       	movw	r20, r24
 436:	c7 01       	movw	r24, r14
 438:	b6 01       	movw	r22, r12
 43a:	0e 94 90 05 	call	0xb20	; 0xb20 <__subsf3>
 43e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fixsfsi>
 442:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <mereni_napon+0x1>
 446:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <mereni_napon>
																				//na buck, ili pak zbog ne bas real time podataka sa ad ulaza jer im uzimam prosek
																				//Svakako trebam ovo jos malo razmotriti
	}


}
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	ff 90       	pop	r15
 450:	ef 90       	pop	r14
 452:	df 90       	pop	r13
 454:	cf 90       	pop	r12
 456:	08 95       	ret

00000458 <_2x8bit_reg_2_1x16bit_reg>:
	
	//upis adc rezultata u matricu
	
	
	//ADCL mora biti prvi procitan
	adc_low = (uint8_t)ADCL;    //koriste se dva 8-bit registra jer je rezultat AD konverzije 10-bitan
 458:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 45c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <adc_low>
	adc_high = (uint8_t)ADCH;
 460:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 464:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <adc_high>
	
	/**stapam rezultate iz dva registra u jednu promenljivu na ovaj nacin**/
	/**rezultat ad konverzije je 10-bit-an, tj. od 0 do 1023**/
	
	if(adc_high==0)
 468:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 46c:	81 11       	cpse	r24, r1
 46e:	14 c0       	rjmp	.+40     	; 0x498 <_2x8bit_reg_2_1x16bit_reg+0x40>
		adc_res[ad_kanal][brojac_sempla] = adc_low;
 470:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 474:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <brojac_sempla>
 478:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_low>
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	34 e1       	ldi	r19, 0x14	; 20
 480:	e3 9f       	mul	r30, r19
 482:	f0 01       	movw	r30, r0
 484:	11 24       	eor	r1, r1
 486:	e2 0f       	add	r30, r18
 488:	f1 1d       	adc	r31, r1
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	ef 5d       	subi	r30, 0xDF	; 223
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	91 83       	std	Z+1, r25	; 0x01
 494:	80 83       	st	Z, r24
 496:	08 95       	ret
	else if(adc_high==1)
 498:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	a9 f4       	brne	.+42     	; 0x4ca <_2x8bit_reg_2_1x16bit_reg+0x72>
		adc_res[ad_kanal][brojac_sempla] = 256 + adc_low;
 4a0:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 4a4:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <brojac_sempla>
 4a8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_low>
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	93 95       	inc	r25
 4b0:	34 e1       	ldi	r19, 0x14	; 20
 4b2:	e3 9f       	mul	r30, r19
 4b4:	f0 01       	movw	r30, r0
 4b6:	11 24       	eor	r1, r1
 4b8:	e2 0f       	add	r30, r18
 4ba:	f1 1d       	adc	r31, r1
 4bc:	ee 0f       	add	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	ef 5d       	subi	r30, 0xDF	; 223
 4c2:	fe 4f       	sbci	r31, 0xFE	; 254
 4c4:	91 83       	std	Z+1, r25	; 0x01
 4c6:	80 83       	st	Z, r24
 4c8:	08 95       	ret
	else if(adc_high==2)
 4ca:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	a9 f4       	brne	.+42     	; 0x4fc <_2x8bit_reg_2_1x16bit_reg+0xa4>
		adc_res[ad_kanal][brojac_sempla] = 512 + adc_low;	//256*2
 4d2:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 4d6:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <brojac_sempla>
 4da:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_low>
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9e 5f       	subi	r25, 0xFE	; 254
 4e2:	34 e1       	ldi	r19, 0x14	; 20
 4e4:	e3 9f       	mul	r30, r19
 4e6:	f0 01       	movw	r30, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	e2 0f       	add	r30, r18
 4ec:	f1 1d       	adc	r31, r1
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	ef 5d       	subi	r30, 0xDF	; 223
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	91 83       	std	Z+1, r25	; 0x01
 4f8:	80 83       	st	Z, r24
 4fa:	08 95       	ret
	else if(adc_high==3)
 4fc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_high>
 500:	83 30       	cpi	r24, 0x03	; 3
 502:	a1 f4       	brne	.+40     	; 0x52c <_2x8bit_reg_2_1x16bit_reg+0xd4>
		adc_res[ad_kanal][brojac_sempla] = 768 + adc_low;	//256*3
 504:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ad_kanal>
 508:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <brojac_sempla>
 50c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_low>
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	9d 5f       	subi	r25, 0xFD	; 253
 514:	34 e1       	ldi	r19, 0x14	; 20
 516:	e3 9f       	mul	r30, r19
 518:	f0 01       	movw	r30, r0
 51a:	11 24       	eor	r1, r1
 51c:	e2 0f       	add	r30, r18
 51e:	f1 1d       	adc	r31, r1
 520:	ee 0f       	add	r30, r30
 522:	ff 1f       	adc	r31, r31
 524:	ef 5d       	subi	r30, 0xDF	; 223
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	91 83       	std	Z+1, r25	; 0x01
 52a:	80 83       	st	Z, r24
 52c:	08 95       	ret

0000052e <__vector_21>:
	ad_kanal = 0; //prvo citam A0
	
}

ISR(ADC_vect)
{
 52e:	1f 92       	push	r1
 530:	0f 92       	push	r0
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	0f 92       	push	r0
 536:	11 24       	eor	r1, r1
 538:	2f 93       	push	r18
 53a:	3f 93       	push	r19
 53c:	4f 93       	push	r20
 53e:	5f 93       	push	r21
 540:	6f 93       	push	r22
 542:	7f 93       	push	r23
 544:	8f 93       	push	r24
 546:	9f 93       	push	r25
 548:	af 93       	push	r26
 54a:	bf 93       	push	r27
 54c:	ef 93       	push	r30
 54e:	ff 93       	push	r31
	AD konverzija
	ISR okine kada je gotova konverzija
	*/
	
	
	_2x8bit_reg_2_1x16bit_reg();   //upis adc rezultata u matricu
 550:	0e 94 2c 02 	call	0x458	; 0x458 <_2x8bit_reg_2_1x16bit_reg>



	
	if (ad_kanal==0)
 554:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 558:	81 11       	cpse	r24, r1
 55a:	03 c0       	rjmp	.+6      	; 0x562 <__vector_21+0x34>
			sumator();      //suma za dati kanal i izvucen prosek i upisan u odg promenljivu
 55c:	0e 94 19 01 	call	0x232	; 0x232 <sumator>
 560:	0d c0       	rjmp	.+26     	; 0x57c <__vector_21+0x4e>
	else if (ad_kanal==1)		
 562:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	19 f4       	brne	.+6      	; 0x570 <__vector_21+0x42>
			sumator();
 56a:	0e 94 19 01 	call	0x232	; 0x232 <sumator>
 56e:	06 c0       	rjmp	.+12     	; 0x57c <__vector_21+0x4e>
	else if (ad_kanal==2)
 570:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 574:	82 30       	cpi	r24, 0x02	; 2
 576:	11 f4       	brne	.+4      	; 0x57c <__vector_21+0x4e>
			sumator();
 578:	0e 94 19 01 	call	0x232	; 0x232 <sumator>
	//OCR1A = ref_napon_sa_pot * 20.0;  //top = 400
	//OCR1A = 200;

	
	
	ADCSRA &= ~(1<<ADEN);	//iskljucim adc da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
 57c:	ea e7       	ldi	r30, 0x7A	; 122
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	8f 77       	andi	r24, 0x7F	; 127
 584:	80 83       	st	Z, r24
	
	
	ad_kanal++;			//inkrementiraj kanal
 586:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 58a:	8f 5f       	subi	r24, 0xFF	; 255
 58c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ad_kanal>
	if(ad_kanal > 2)	//kreni opet od nule kad dodjes do poslednjeg; 2, da citam samo prva tri
 590:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 594:	83 30       	cpi	r24, 0x03	; 3
 596:	68 f0       	brcs	.+26     	; 0x5b2 <__vector_21+0x84>
	{
		ad_kanal = 0;
 598:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ad_kanal>
		
		brojac_sempla++; //kad dodjes do kraja kanala predji na sledeci red semplova
 59c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <brojac_sempla>
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <brojac_sempla>
		if(brojac_sempla >= BR_SEMPLOVA) //kad dodjes do kraja kreni opet od nule
 5a6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <brojac_sempla>
 5aa:	84 31       	cpi	r24, 0x14	; 20
 5ac:	10 f0       	brcs	.+4      	; 0x5b2 <__vector_21+0x84>
			brojac_sempla = 0;
 5ae:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <brojac_sempla>
	
	
	
	
	//multipleksiranje ad ulaza; tj. promena ad kanala
	switch(ad_kanal)
 5b2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ad_kanal>
 5b6:	81 30       	cpi	r24, 0x01	; 1
 5b8:	61 f0       	breq	.+24     	; 0x5d2 <__vector_21+0xa4>
 5ba:	28 f0       	brcs	.+10     	; 0x5c6 <__vector_21+0x98>
 5bc:	82 30       	cpi	r24, 0x02	; 2
 5be:	91 f0       	breq	.+36     	; 0x5e4 <__vector_21+0xb6>
 5c0:	83 30       	cpi	r24, 0x03	; 3
 5c2:	c9 f0       	breq	.+50     	; 0x5f6 <__vector_21+0xc8>
 5c4:	1d c0       	rjmp	.+58     	; 0x600 <__vector_21+0xd2>
	{
		case 0:
				ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
 5c6:	ec e7       	ldi	r30, 0x7C	; 124
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	8c 7f       	andi	r24, 0xFC	; 252
 5ce:	80 83       	st	Z, r24
		break;
 5d0:	17 c0       	rjmp	.+46     	; 0x600 <__vector_21+0xd2>
		
		case 1:
				ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
 5d2:	ec e7       	ldi	r30, 0x7C	; 124
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	8d 7f       	andi	r24, 0xFD	; 253
 5da:	80 83       	st	Z, r24
				ADMUX |= (0b1);
 5dc:	80 81       	ld	r24, Z
 5de:	81 60       	ori	r24, 0x01	; 1
 5e0:	80 83       	st	Z, r24
		break;
 5e2:	0e c0       	rjmp	.+28     	; 0x600 <__vector_21+0xd2>
		
		case 2:
				ADMUX &= ~(0b1);		//10;ref internal 1.1V, kanal A2
 5e4:	ec e7       	ldi	r30, 0x7C	; 124
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	8e 7f       	andi	r24, 0xFE	; 254
 5ec:	80 83       	st	Z, r24
				ADMUX |= (0b10);
 5ee:	80 81       	ld	r24, Z
 5f0:	82 60       	ori	r24, 0x02	; 2
 5f2:	80 83       	st	Z, r24
		break;
 5f4:	05 c0       	rjmp	.+10     	; 0x600 <__vector_21+0xd2>
		
		case 3:
				ADMUX |= (0b11);		//11;ref internal 1.1V, kanal A3
 5f6:	ec e7       	ldi	r30, 0x7C	; 124
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	83 60       	ori	r24, 0x03	; 3
 5fe:	80 83       	st	Z, r24
	}
	
	
	//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala. 
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
 600:	ea e7       	ldi	r30, 0x7A	; 122
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	80 6c       	ori	r24, 0xC0	; 192
 608:	80 83       	st	Z, r24
	
	
	
	PIND |= 1<<7;       //togle za osciloskop
 60a:	4f 9a       	sbi	0x09, 7	; 9

}
 60c:	ff 91       	pop	r31
 60e:	ef 91       	pop	r30
 610:	bf 91       	pop	r27
 612:	af 91       	pop	r26
 614:	9f 91       	pop	r25
 616:	8f 91       	pop	r24
 618:	7f 91       	pop	r23
 61a:	6f 91       	pop	r22
 61c:	5f 91       	pop	r21
 61e:	4f 91       	pop	r20
 620:	3f 91       	pop	r19
 622:	2f 91       	pop	r18
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <__vector_1>:
	
	
}

ISR(INT0_vect)
{
 62e:	1f 92       	push	r1
 630:	0f 92       	push	r0
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	0f 92       	push	r0
 636:	11 24       	eor	r1, r1
 638:	2f 93       	push	r18
 63a:	8f 93       	push	r24
 63c:	9f 93       	push	r25
	
		//interapt opali na rastucu ivicu INT0; ovo sam uradio zbog velike rezolucije enkodera -1024 * 57.5 na izlazu, tj na tocku zbog 2 reduktora
	
	brojac_ext_interaptova++;
 63e:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <brojac_ext_interaptova>
 642:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <brojac_ext_interaptova+0x1>
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <brojac_ext_interaptova+0x1>
 64c:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <brojac_ext_interaptova>
	

	
		if ( PIND & (1<<PORTD3) )	//smer 1; proverava se logicki nivo drugog kanala
 650:	4b 9b       	sbis	0x09, 3	; 9
 652:	0d c0       	rjmp	.+26     	; 0x66e <__vector_1+0x40>
		{
			smer_obrtanja = 1;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <smer_obrtanja>
			impulsi++;
 65a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <impulsi>
 65e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <impulsi+0x1>
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <impulsi+0x1>
 668:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <impulsi>
 66c:	0c c0       	rjmp	.+24     	; 0x686 <__vector_1+0x58>
		} 
		else								//smer 2
		{
			smer_obrtanja = 2;
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <smer_obrtanja>
			impulsi--;	
 674:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <impulsi>
 678:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <impulsi+0x1>
 67c:	01 97       	sbiw	r24, 0x01	; 1
 67e:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <impulsi+0x1>
 682:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <impulsi>
	
	
	
	
	
	if(impulsi > 58879)		//za apsolutno merenje ugla
 686:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <impulsi>
 68a:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <impulsi+0x1>
 68e:	81 15       	cp	r24, r1
 690:	96 4e       	sbci	r25, 0xE6	; 230
 692:	28 f0       	brcs	.+10     	; 0x69e <__vector_1+0x70>
		impulsi = 0;
 694:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <impulsi+0x1>
 698:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <impulsi>
 69c:	04 c0       	rjmp	.+8      	; 0x6a6 <__vector_1+0x78>
	else if(impulsi < 0 )
 69e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <impulsi>
 6a2:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <impulsi+0x1>
	//problem se javlja kada ove impulse zelim da iskoristim za merenje brzine, a pri prelazu preko granicne vrednosti sa 58879 na 0 i obrnuto
	//zato sam ubacio jos jedan brojac koji broji prekide "brojac_ext_interaptova" relativno, a ne apsolutno
		
	//ugao = impulsi / 57.5;	//skaliranje, 58879 impulsa po krugu odgovara 360 stepeni tocka; !!!atmega se ovde zaglavi pri umerenoj frekvenciji prekida!!!
	//ugao = 100;
}
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	2f 91       	pop	r18
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <pwm_init>:
#include "common.h"

void pwm_init()
{
	
	DDRB |= 1<<DDB0; //dig 8
 6b6:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << DDB1)|(1 << DDB2); //izlazni pinovi za PWM - D9 i D10 na Arduino Uno ploci
 6b8:	84 b1       	in	r24, 0x04	; 4
 6ba:	86 60       	ori	r24, 0x06	; 6
 6bc:	84 b9       	out	0x04, r24	; 4
	

	ICR1 = 400;			//frekvencija ~ 40 kHz
 6be:	80 e9       	ldi	r24, 0x90	; 144
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 6c6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0;		    //faktor ispune 0% 
 6ca:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 6ce:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//OCR1B = OCR1A;
	
	TCCR1A = 0b10000010;		//jedan izlaz, fast pwm
 6d2:	82 e8       	ldi	r24, 0x82	; 130
 6d4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B |= (1 << WGM13)|(1 << WGM12);		// set Fast PWM mode using ICR1 as TOP
 6d8:	e1 e8       	ldi	r30, 0x81	; 129
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	88 61       	ori	r24, 0x18	; 24
 6e0:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);		// START the timer with no prescaler	
 6e2:	80 81       	ld	r24, Z
 6e4:	81 60       	ori	r24, 0x01	; 1
 6e6:	80 83       	st	Z, r24
 6e8:	08 95       	ret

000006ea <__vector_11>:
	
	//upis i promena faktora ispune se vrsi u ad konverziji
}

ISR(TIMER1_COMPA_vect)
{
 6ea:	1f 92       	push	r1
 6ec:	0f 92       	push	r0
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	0f 92       	push	r0
 6f2:	11 24       	eor	r1, r1
	//ADCSRA |= 1<<ADSC; //start ad conversion
	
	PINB |= 0b1;
 6f4:	18 9a       	sbi	0x03, 0	; 3
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <tajmer0_init>:
//const volatile double stepeniPOms_to_rpm = 16.67;		//faktor konverzije izmedju izmerenog broja stepeni u prozoru od 10ms u obrtaje po minutu
//volatile double relativni_ugao = 0;

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
 700:	82 e0       	ldi	r24, 0x02	; 2
 702:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
 704:	93 e0       	ldi	r25, 0x03	; 3
 706:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
 708:	99 ef       	ldi	r25, 0xF9	; 249
 70a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
 70c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	DDRB |= 1<<PINB5;
 710:	25 9a       	sbi	0x04, 5	; 4
 712:	08 95       	ret

00000714 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
 714:	1f 92       	push	r1
 716:	0f 92       	push	r0
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	0f 92       	push	r0
 71c:	11 24       	eor	r1, r1
 71e:	cf 92       	push	r12
 720:	df 92       	push	r13
 722:	ef 92       	push	r14
 724:	ff 92       	push	r15
 726:	0f 93       	push	r16
 728:	1f 93       	push	r17
 72a:	2f 93       	push	r18
 72c:	3f 93       	push	r19
 72e:	4f 93       	push	r20
 730:	5f 93       	push	r21
 732:	6f 93       	push	r22
 734:	7f 93       	push	r23
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	af 93       	push	r26
 73c:	bf 93       	push	r27
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	ef 93       	push	r30
 744:	ff 93       	push	r31
	flag_tajmer0_prekid = 1;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;	//prekid okida svaki 1ms
 74c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <brojac_prekida_tajmera0>
 750:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <brojac_prekida_tajmera0+0x1>
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <brojac_prekida_tajmera0+0x1>
 75a:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <brojac_prekida_tajmera0>
	
		
	if(brojac_prekida_tajmera0 == 10)
 75e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <brojac_prekida_tajmera0>
 762:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <brojac_prekida_tajmera0+0x1>
 766:	0a 97       	sbiw	r24, 0x0a	; 10
 768:	41 f4       	brne	.+16     	; 0x77a <__vector_14+0x66>
	{
		brojac_prekida_tajmera0 = 0;
 76a:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <brojac_prekida_tajmera0+0x1>
 76e:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <brojac_prekida_tajmera0>
		flag_prekid_10ms = 1;
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <flag_prekid_10ms>
		PINB |= 1<<PINB5;					//toogle pin 5 - DIG13, test da vidim da li je korektna frekvencija
 778:	1d 9a       	sbi	0x03, 5	; 3
	
	/*Podsetnik: postoje inkrementalni i neki drugi PID zakon, pa ih malo prouci*/
	


			greska_prethodna = greska; //zapamtim proslu gresku pre racunanja nove
 77a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <greska>
 77e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <greska+0x1>
 782:	a0 91 d0 01 	lds	r26, 0x01D0	; 0x8001d0 <greska+0x2>
 786:	b0 91 d1 01 	lds	r27, 0x01D1	; 0x8001d1 <greska+0x3>
 78a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <greska_prethodna>
 78e:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <greska_prethodna+0x1>
 792:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <greska_prethodna+0x2>
 796:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <greska_prethodna+0x3>

			greska = (int32_t)ref_napon_sa_pot - mereni_napon;    //greska napona (u mV)
 79a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ref_napon_sa_pot>
 79e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ref_napon_sa_pot+0x1>
 7a2:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <mereni_napon>
 7a6:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <mereni_napon+0x1>
 7aa:	a0 e0       	ldi	r26, 0x00	; 0
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	05 2e       	mov	r0, r21
 7b0:	00 0c       	add	r0, r0
 7b2:	66 0b       	sbc	r22, r22
 7b4:	77 0b       	sbc	r23, r23
 7b6:	84 1b       	sub	r24, r20
 7b8:	95 0b       	sbc	r25, r21
 7ba:	a6 0b       	sbc	r26, r22
 7bc:	b7 0b       	sbc	r27, r23
 7be:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <greska>
 7c2:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <greska+0x1>
 7c6:	a0 93 d0 01 	sts	0x01D0, r26	; 0x8001d0 <greska+0x2>
 7ca:	b0 93 d1 01 	sts	0x01D1, r27	; 0x8001d1 <greska+0x3>
																 //desavao se overflow zato sto je ref_napon unsigned, posle kastovanja sve u redu
				
			Upravljanje = Kp*greska;	  //Proporcionalno dejstvo,      400 = max (~20V), 0 = min (0V)
 7ce:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <greska>
 7d2:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <greska+0x1>
 7d6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <greska+0x2>
 7da:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <greska+0x3>
 7de:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <Kp>
 7e2:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <Kp+0x1>
 7e6:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <Kp+0x2>
 7ea:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <Kp+0x3>
 7ee:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 7f2:	a7 01       	movw	r20, r14
 7f4:	96 01       	movw	r18, r12
 7f6:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 7fa:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fixsfsi>
 7fe:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <Upravljanje+0x1>
 802:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <Upravljanje>
			
			
			suma_greske += greska;
 806:	40 91 ce 01 	lds	r20, 0x01CE	; 0x8001ce <greska>
 80a:	50 91 cf 01 	lds	r21, 0x01CF	; 0x8001cf <greska+0x1>
 80e:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <greska+0x2>
 812:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <greska+0x3>
 816:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <suma_greske>
 81a:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <suma_greske+0x1>
 81e:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <suma_greske+0x2>
 822:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <suma_greske+0x3>
 826:	84 0f       	add	r24, r20
 828:	95 1f       	adc	r25, r21
 82a:	a6 1f       	adc	r26, r22
 82c:	b7 1f       	adc	r27, r23
 82e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <suma_greske>
 832:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <suma_greske+0x1>
 836:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <suma_greske+0x2>
 83a:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <suma_greske+0x3>
			
			if(suma_greske >= limit_sume)
 83e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <suma_greske>
 842:	50 91 cb 01 	lds	r21, 0x01CB	; 0x8001cb <suma_greske+0x1>
 846:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <suma_greske+0x2>
 84a:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <suma_greske+0x3>
 84e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 852:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 856:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 85a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 85e:	48 17       	cp	r20, r24
 860:	59 07       	cpc	r21, r25
 862:	6a 07       	cpc	r22, r26
 864:	7b 07       	cpc	r23, r27
 866:	8c f0       	brlt	.+34     	; 0x88a <__vector_14+0x176>
				suma_greske = limit_sume;
 868:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 86c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 870:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 874:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 878:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <suma_greske>
 87c:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <suma_greske+0x1>
 880:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <suma_greske+0x2>
 884:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <suma_greske+0x3>
 888:	15 c0       	rjmp	.+42     	; 0x8b4 <__vector_14+0x1a0>
			else if (suma_greske <= 0)
 88a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <suma_greske>
 88e:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <suma_greske+0x1>
 892:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <suma_greske+0x2>
 896:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <suma_greske+0x3>
 89a:	18 16       	cp	r1, r24
 89c:	19 06       	cpc	r1, r25
 89e:	1a 06       	cpc	r1, r26
 8a0:	1b 06       	cpc	r1, r27
 8a2:	44 f0       	brlt	.+16     	; 0x8b4 <__vector_14+0x1a0>
				suma_greske = 0;
 8a4:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <suma_greske>
 8a8:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <suma_greske+0x1>
 8ac:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <suma_greske+0x2>
 8b0:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <suma_greske+0x3>
			
			
			Upravljanje += Ki * suma_greske;		//Integralno dejstvo sabiram sa P dejstvom
 8b4:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <suma_greske>
 8b8:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <suma_greske+0x1>
 8bc:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <suma_greske+0x2>
 8c0:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <suma_greske+0x3>
 8c4:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <Ki>
 8c8:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <Ki+0x1>
 8cc:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <Ki+0x2>
 8d0:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <Ki+0x3>
 8d4:	c0 91 d2 01 	lds	r28, 0x01D2	; 0x8001d2 <Upravljanje>
 8d8:	d0 91 d3 01 	lds	r29, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 8dc:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 8e0:	a7 01       	movw	r20, r14
 8e2:	96 01       	movw	r18, r12
 8e4:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 8e8:	6b 01       	movw	r12, r22
 8ea:	7c 01       	movw	r14, r24
 8ec:	be 01       	movw	r22, r28
 8ee:	dd 0f       	add	r29, r29
 8f0:	88 0b       	sbc	r24, r24
 8f2:	99 0b       	sbc	r25, r25
 8f4:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 8f8:	9b 01       	movw	r18, r22
 8fa:	ac 01       	movw	r20, r24
 8fc:	c7 01       	movw	r24, r14
 8fe:	b6 01       	movw	r22, r12
 900:	0e 94 91 05 	call	0xb22	; 0xb22 <__addsf3>
 904:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fixsfsi>
 908:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <Upravljanje+0x1>
 90c:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <Upravljanje>
			
			
			Upravljanje += Kd * (greska - greska_prethodna);
 910:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <greska>
 914:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <greska+0x1>
 918:	a0 91 d0 01 	lds	r26, 0x01D0	; 0x8001d0 <greska+0x2>
 91c:	b0 91 d1 01 	lds	r27, 0x01D1	; 0x8001d1 <greska+0x3>
 920:	00 91 c6 01 	lds	r16, 0x01C6	; 0x8001c6 <greska_prethodna>
 924:	10 91 c7 01 	lds	r17, 0x01C7	; 0x8001c7 <greska_prethodna+0x1>
 928:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <greska_prethodna+0x2>
 92c:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <greska_prethodna+0x3>
 930:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <Kd>
 934:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <Kd+0x1>
 938:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <Kd+0x2>
 93c:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <Kd+0x3>
 940:	c0 91 d2 01 	lds	r28, 0x01D2	; 0x8001d2 <Upravljanje>
 944:	d0 91 d3 01 	lds	r29, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 948:	bc 01       	movw	r22, r24
 94a:	cd 01       	movw	r24, r26
 94c:	60 1b       	sub	r22, r16
 94e:	71 0b       	sbc	r23, r17
 950:	82 0b       	sbc	r24, r18
 952:	93 0b       	sbc	r25, r19
 954:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 958:	a7 01       	movw	r20, r14
 95a:	96 01       	movw	r18, r12
 95c:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 960:	6b 01       	movw	r12, r22
 962:	7c 01       	movw	r14, r24
 964:	be 01       	movw	r22, r28
 966:	dd 0f       	add	r29, r29
 968:	88 0b       	sbc	r24, r24
 96a:	99 0b       	sbc	r25, r25
 96c:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 970:	9b 01       	movw	r18, r22
 972:	ac 01       	movw	r20, r24
 974:	c7 01       	movw	r24, r14
 976:	b6 01       	movw	r22, r12
 978:	0e 94 91 05 	call	0xb22	; 0xb22 <__addsf3>
 97c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fixsfsi>
 980:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <Upravljanje+0x1>
 984:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <Upravljanje>
			
			
			if(Upravljanje>=400)
 988:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <Upravljanje>
 98c:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 990:	80 39       	cpi	r24, 0x90	; 144
 992:	91 40       	sbci	r25, 0x01	; 1
 994:	1c f1       	brlt	.+70     	; 0x9dc <__stack+0xdd>
			{
				Upravljanje = 400; //saturacija, tj ogranicenje
 996:	80 e9       	ldi	r24, 0x90	; 144
 998:	91 e0       	ldi	r25, 0x01	; 1
 99a:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <Upravljanje+0x1>
 99e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <Upravljanje>
				suma_greske -= greska;		//ako vec imas max upravljanje nemoj vise povecavati sumu greske; zastita od wind up-a
 9a2:	40 91 ce 01 	lds	r20, 0x01CE	; 0x8001ce <greska>
 9a6:	50 91 cf 01 	lds	r21, 0x01CF	; 0x8001cf <greska+0x1>
 9aa:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <greska+0x2>
 9ae:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <greska+0x3>
 9b2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <suma_greske>
 9b6:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <suma_greske+0x1>
 9ba:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <suma_greske+0x2>
 9be:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <suma_greske+0x3>
 9c2:	84 1b       	sub	r24, r20
 9c4:	95 0b       	sbc	r25, r21
 9c6:	a6 0b       	sbc	r26, r22
 9c8:	b7 0b       	sbc	r27, r23
 9ca:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <suma_greske>
 9ce:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <suma_greske+0x1>
 9d2:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <suma_greske+0x2>
 9d6:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <suma_greske+0x3>
 9da:	27 c0       	rjmp	.+78     	; 0xa2a <__stack+0x12b>
			}
			
			else if(Upravljanje<=0)
 9dc:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <Upravljanje>
 9e0:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 9e4:	18 16       	cp	r1, r24
 9e6:	19 06       	cpc	r1, r25
 9e8:	04 f1       	brlt	.+64     	; 0xa2a <__stack+0x12b>
			{
				Upravljanje = 0;
 9ea:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <Upravljanje+0x1>
 9ee:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <Upravljanje>
				suma_greske -= greska;		//ako vec imas min upravljanje nemoj vise povecavati sumu greske; zastita od wind up-a
 9f2:	40 91 ce 01 	lds	r20, 0x01CE	; 0x8001ce <greska>
 9f6:	50 91 cf 01 	lds	r21, 0x01CF	; 0x8001cf <greska+0x1>
 9fa:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <greska+0x2>
 9fe:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <greska+0x3>
 a02:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <suma_greske>
 a06:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <suma_greske+0x1>
 a0a:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <suma_greske+0x2>
 a0e:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <suma_greske+0x3>
 a12:	84 1b       	sub	r24, r20
 a14:	95 0b       	sbc	r25, r21
 a16:	a6 0b       	sbc	r26, r22
 a18:	b7 0b       	sbc	r27, r23
 a1a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <suma_greske>
 a1e:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <suma_greske+0x1>
 a22:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <suma_greske+0x2>
 a26:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <suma_greske+0x3>
			}
			
			
			OCR1A = (uint16_t)Upravljanje;
 a2a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <Upravljanje>
 a2e:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <Upravljanje+0x1>
 a32:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 a36:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	
 a3a:	ff 91       	pop	r31
 a3c:	ef 91       	pop	r30
 a3e:	df 91       	pop	r29
 a40:	cf 91       	pop	r28
 a42:	bf 91       	pop	r27
 a44:	af 91       	pop	r26
 a46:	9f 91       	pop	r25
 a48:	8f 91       	pop	r24
 a4a:	7f 91       	pop	r23
 a4c:	6f 91       	pop	r22
 a4e:	5f 91       	pop	r21
 a50:	4f 91       	pop	r20
 a52:	3f 91       	pop	r19
 a54:	2f 91       	pop	r18
 a56:	1f 91       	pop	r17
 a58:	0f 91       	pop	r16
 a5a:	ff 90       	pop	r15
 a5c:	ef 90       	pop	r14
 a5e:	df 90       	pop	r13
 a60:	cf 90       	pop	r12
 a62:	0f 90       	pop	r0
 a64:	0f be       	out	0x3f, r0	; 63
 a66:	0f 90       	pop	r0
 a68:	1f 90       	pop	r1
 a6a:	18 95       	reti

00000a6c <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 a6c:	1f 92       	push	r1
 a6e:	0f 92       	push	r0
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	0f 92       	push	r0
 a74:	11 24       	eor	r1, r1
	poslato=0;
 a76:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <poslato>
}
 a7a:	0f 90       	pop	r0
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	0f 90       	pop	r0
 a80:	1f 90       	pop	r1
 a82:	18 95       	reti

00000a84 <__vector_18>:

ISR(USART_RX_vect)
{
 a84:	1f 92       	push	r1
 a86:	0f 92       	push	r0
 a88:	0f b6       	in	r0, 0x3f	; 63
 a8a:	0f 92       	push	r0
 a8c:	11 24       	eor	r1, r1
 a8e:	8f 93       	push	r24
 a90:	ef 93       	push	r30
 a92:	ff 93       	push	r31
	input_char=UDR0;
 a94:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a98:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 a9c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <buff_size>
 aa0:	88 30       	cpi	r24, 0x08	; 8
 aa2:	98 f4       	brcc	.+38     	; 0xaca <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 aa4:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <buff_size>
 aa8:	f0 e0       	ldi	r31, 0x00	; 0
 aaa:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <input_char>
 aae:	e5 52       	subi	r30, 0x25	; 37
 ab0:	fe 4f       	sbci	r31, 0xFE	; 254
 ab2:	80 83       	st	Z, r24
		buff_size++;
 ab4:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <buff_size>
 ab8:	8f 5f       	subi	r24, 0xFF	; 255
 aba:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <buff_size>
		input_buffer[buff_size]='\0';
 abe:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <buff_size>
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	e5 52       	subi	r30, 0x25	; 37
 ac6:	fe 4f       	sbci	r31, 0xFE	; 254
 ac8:	10 82       	st	Z, r1
	}
}
 aca:	ff 91       	pop	r31
 acc:	ef 91       	pop	r30
 ace:	8f 91       	pop	r24
 ad0:	0f 90       	pop	r0
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	0f 90       	pop	r0
 ad6:	1f 90       	pop	r1
 ad8:	18 95       	reti

00000ada <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 ada:	82 e0       	ldi	r24, 0x02	; 2
 adc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 ae0:	88 ed       	ldi	r24, 0xD8	; 216
 ae2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 ae6:	86 e0       	ldi	r24, 0x06	; 6
 ae8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 aec:	8f ec       	ldi	r24, 0xCF	; 207
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 af4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 af8:	08 95       	ret

00000afa <send_str>:
}

void send_str(unsigned char *str)
{
 afa:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 afc:	90 81       	ld	r25, Z
 afe:	99 23       	and	r25, r25
 b00:	71 f0       	breq	.+28     	; 0xb1e <send_str+0x24>
 b02:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 b04:	a6 ec       	ldi	r26, 0xC6	; 198
 b06:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 b08:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 b0a:	9c 93       	st	X, r25
		poslato=1;
 b0c:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <poslato>
		while (poslato);
 b10:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <poslato>
 b14:	91 11       	cpse	r25, r1
 b16:	fc cf       	rjmp	.-8      	; 0xb10 <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 b18:	91 91       	ld	r25, Z+
 b1a:	91 11       	cpse	r25, r1
 b1c:	f6 cf       	rjmp	.-20     	; 0xb0a <send_str+0x10>
 b1e:	08 95       	ret

00000b20 <__subsf3>:
 b20:	50 58       	subi	r21, 0x80	; 128

00000b22 <__addsf3>:
 b22:	bb 27       	eor	r27, r27
 b24:	aa 27       	eor	r26, r26
 b26:	0e 94 a8 05 	call	0xb50	; 0xb50 <__addsf3x>
 b2a:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__fp_round>
 b2e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscA>
 b32:	38 f0       	brcs	.+14     	; 0xb42 <__addsf3+0x20>
 b34:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_pscB>
 b38:	20 f0       	brcs	.+8      	; 0xb42 <__addsf3+0x20>
 b3a:	39 f4       	brne	.+14     	; 0xb4a <__addsf3+0x28>
 b3c:	9f 3f       	cpi	r25, 0xFF	; 255
 b3e:	19 f4       	brne	.+6      	; 0xb46 <__addsf3+0x24>
 b40:	26 f4       	brtc	.+8      	; 0xb4a <__addsf3+0x28>
 b42:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_nan>
 b46:	0e f4       	brtc	.+2      	; 0xb4a <__addsf3+0x28>
 b48:	e0 95       	com	r30
 b4a:	e7 fb       	bst	r30, 7
 b4c:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>

00000b50 <__addsf3x>:
 b50:	e9 2f       	mov	r30, r25
 b52:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_split3>
 b56:	58 f3       	brcs	.-42     	; 0xb2e <__addsf3+0xc>
 b58:	ba 17       	cp	r27, r26
 b5a:	62 07       	cpc	r22, r18
 b5c:	73 07       	cpc	r23, r19
 b5e:	84 07       	cpc	r24, r20
 b60:	95 07       	cpc	r25, r21
 b62:	20 f0       	brcs	.+8      	; 0xb6c <__addsf3x+0x1c>
 b64:	79 f4       	brne	.+30     	; 0xb84 <__addsf3x+0x34>
 b66:	a6 f5       	brtc	.+104    	; 0xbd0 <__addsf3x+0x80>
 b68:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_zero>
 b6c:	0e f4       	brtc	.+2      	; 0xb70 <__addsf3x+0x20>
 b6e:	e0 95       	com	r30
 b70:	0b 2e       	mov	r0, r27
 b72:	ba 2f       	mov	r27, r26
 b74:	a0 2d       	mov	r26, r0
 b76:	0b 01       	movw	r0, r22
 b78:	b9 01       	movw	r22, r18
 b7a:	90 01       	movw	r18, r0
 b7c:	0c 01       	movw	r0, r24
 b7e:	ca 01       	movw	r24, r20
 b80:	a0 01       	movw	r20, r0
 b82:	11 24       	eor	r1, r1
 b84:	ff 27       	eor	r31, r31
 b86:	59 1b       	sub	r21, r25
 b88:	99 f0       	breq	.+38     	; 0xbb0 <__addsf3x+0x60>
 b8a:	59 3f       	cpi	r21, 0xF9	; 249
 b8c:	50 f4       	brcc	.+20     	; 0xba2 <__addsf3x+0x52>
 b8e:	50 3e       	cpi	r21, 0xE0	; 224
 b90:	68 f1       	brcs	.+90     	; 0xbec <__addsf3x+0x9c>
 b92:	1a 16       	cp	r1, r26
 b94:	f0 40       	sbci	r31, 0x00	; 0
 b96:	a2 2f       	mov	r26, r18
 b98:	23 2f       	mov	r18, r19
 b9a:	34 2f       	mov	r19, r20
 b9c:	44 27       	eor	r20, r20
 b9e:	58 5f       	subi	r21, 0xF8	; 248
 ba0:	f3 cf       	rjmp	.-26     	; 0xb88 <__addsf3x+0x38>
 ba2:	46 95       	lsr	r20
 ba4:	37 95       	ror	r19
 ba6:	27 95       	ror	r18
 ba8:	a7 95       	ror	r26
 baa:	f0 40       	sbci	r31, 0x00	; 0
 bac:	53 95       	inc	r21
 bae:	c9 f7       	brne	.-14     	; 0xba2 <__addsf3x+0x52>
 bb0:	7e f4       	brtc	.+30     	; 0xbd0 <__addsf3x+0x80>
 bb2:	1f 16       	cp	r1, r31
 bb4:	ba 0b       	sbc	r27, r26
 bb6:	62 0b       	sbc	r22, r18
 bb8:	73 0b       	sbc	r23, r19
 bba:	84 0b       	sbc	r24, r20
 bbc:	ba f0       	brmi	.+46     	; 0xbec <__addsf3x+0x9c>
 bbe:	91 50       	subi	r25, 0x01	; 1
 bc0:	a1 f0       	breq	.+40     	; 0xbea <__addsf3x+0x9a>
 bc2:	ff 0f       	add	r31, r31
 bc4:	bb 1f       	adc	r27, r27
 bc6:	66 1f       	adc	r22, r22
 bc8:	77 1f       	adc	r23, r23
 bca:	88 1f       	adc	r24, r24
 bcc:	c2 f7       	brpl	.-16     	; 0xbbe <__addsf3x+0x6e>
 bce:	0e c0       	rjmp	.+28     	; 0xbec <__addsf3x+0x9c>
 bd0:	ba 0f       	add	r27, r26
 bd2:	62 1f       	adc	r22, r18
 bd4:	73 1f       	adc	r23, r19
 bd6:	84 1f       	adc	r24, r20
 bd8:	48 f4       	brcc	.+18     	; 0xbec <__addsf3x+0x9c>
 bda:	87 95       	ror	r24
 bdc:	77 95       	ror	r23
 bde:	67 95       	ror	r22
 be0:	b7 95       	ror	r27
 be2:	f7 95       	ror	r31
 be4:	9e 3f       	cpi	r25, 0xFE	; 254
 be6:	08 f0       	brcs	.+2      	; 0xbea <__addsf3x+0x9a>
 be8:	b0 cf       	rjmp	.-160    	; 0xb4a <__addsf3+0x28>
 bea:	93 95       	inc	r25
 bec:	88 0f       	add	r24, r24
 bee:	08 f0       	brcs	.+2      	; 0xbf2 <__addsf3x+0xa2>
 bf0:	99 27       	eor	r25, r25
 bf2:	ee 0f       	add	r30, r30
 bf4:	97 95       	ror	r25
 bf6:	87 95       	ror	r24
 bf8:	08 95       	ret

00000bfa <__fixsfsi>:
 bfa:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 bfe:	68 94       	set
 c00:	b1 11       	cpse	r27, r1
 c02:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>
 c06:	08 95       	ret

00000c08 <__fixunssfsi>:
 c08:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_splitA>
 c0c:	88 f0       	brcs	.+34     	; 0xc30 <__fixunssfsi+0x28>
 c0e:	9f 57       	subi	r25, 0x7F	; 127
 c10:	98 f0       	brcs	.+38     	; 0xc38 <__fixunssfsi+0x30>
 c12:	b9 2f       	mov	r27, r25
 c14:	99 27       	eor	r25, r25
 c16:	b7 51       	subi	r27, 0x17	; 23
 c18:	b0 f0       	brcs	.+44     	; 0xc46 <__fixunssfsi+0x3e>
 c1a:	e1 f0       	breq	.+56     	; 0xc54 <__fixunssfsi+0x4c>
 c1c:	66 0f       	add	r22, r22
 c1e:	77 1f       	adc	r23, r23
 c20:	88 1f       	adc	r24, r24
 c22:	99 1f       	adc	r25, r25
 c24:	1a f0       	brmi	.+6      	; 0xc2c <__fixunssfsi+0x24>
 c26:	ba 95       	dec	r27
 c28:	c9 f7       	brne	.-14     	; 0xc1c <__fixunssfsi+0x14>
 c2a:	14 c0       	rjmp	.+40     	; 0xc54 <__fixunssfsi+0x4c>
 c2c:	b1 30       	cpi	r27, 0x01	; 1
 c2e:	91 f0       	breq	.+36     	; 0xc54 <__fixunssfsi+0x4c>
 c30:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_zero>
 c34:	b1 e0       	ldi	r27, 0x01	; 1
 c36:	08 95       	ret
 c38:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_zero>
 c3c:	67 2f       	mov	r22, r23
 c3e:	78 2f       	mov	r23, r24
 c40:	88 27       	eor	r24, r24
 c42:	b8 5f       	subi	r27, 0xF8	; 248
 c44:	39 f0       	breq	.+14     	; 0xc54 <__fixunssfsi+0x4c>
 c46:	b9 3f       	cpi	r27, 0xF9	; 249
 c48:	cc f3       	brlt	.-14     	; 0xc3c <__fixunssfsi+0x34>
 c4a:	86 95       	lsr	r24
 c4c:	77 95       	ror	r23
 c4e:	67 95       	ror	r22
 c50:	b3 95       	inc	r27
 c52:	d9 f7       	brne	.-10     	; 0xc4a <__fixunssfsi+0x42>
 c54:	3e f4       	brtc	.+14     	; 0xc64 <__fixunssfsi+0x5c>
 c56:	90 95       	com	r25
 c58:	80 95       	com	r24
 c5a:	70 95       	com	r23
 c5c:	61 95       	neg	r22
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	8f 4f       	sbci	r24, 0xFF	; 255
 c62:	9f 4f       	sbci	r25, 0xFF	; 255
 c64:	08 95       	ret

00000c66 <__floatunsisf>:
 c66:	e8 94       	clt
 c68:	09 c0       	rjmp	.+18     	; 0xc7c <__floatsisf+0x12>

00000c6a <__floatsisf>:
 c6a:	97 fb       	bst	r25, 7
 c6c:	3e f4       	brtc	.+14     	; 0xc7c <__floatsisf+0x12>
 c6e:	90 95       	com	r25
 c70:	80 95       	com	r24
 c72:	70 95       	com	r23
 c74:	61 95       	neg	r22
 c76:	7f 4f       	sbci	r23, 0xFF	; 255
 c78:	8f 4f       	sbci	r24, 0xFF	; 255
 c7a:	9f 4f       	sbci	r25, 0xFF	; 255
 c7c:	99 23       	and	r25, r25
 c7e:	a9 f0       	breq	.+42     	; 0xcaa <__floatsisf+0x40>
 c80:	f9 2f       	mov	r31, r25
 c82:	96 e9       	ldi	r25, 0x96	; 150
 c84:	bb 27       	eor	r27, r27
 c86:	93 95       	inc	r25
 c88:	f6 95       	lsr	r31
 c8a:	87 95       	ror	r24
 c8c:	77 95       	ror	r23
 c8e:	67 95       	ror	r22
 c90:	b7 95       	ror	r27
 c92:	f1 11       	cpse	r31, r1
 c94:	f8 cf       	rjmp	.-16     	; 0xc86 <__floatsisf+0x1c>
 c96:	fa f4       	brpl	.+62     	; 0xcd6 <__floatsisf+0x6c>
 c98:	bb 0f       	add	r27, r27
 c9a:	11 f4       	brne	.+4      	; 0xca0 <__floatsisf+0x36>
 c9c:	60 ff       	sbrs	r22, 0
 c9e:	1b c0       	rjmp	.+54     	; 0xcd6 <__floatsisf+0x6c>
 ca0:	6f 5f       	subi	r22, 0xFF	; 255
 ca2:	7f 4f       	sbci	r23, 0xFF	; 255
 ca4:	8f 4f       	sbci	r24, 0xFF	; 255
 ca6:	9f 4f       	sbci	r25, 0xFF	; 255
 ca8:	16 c0       	rjmp	.+44     	; 0xcd6 <__floatsisf+0x6c>
 caa:	88 23       	and	r24, r24
 cac:	11 f0       	breq	.+4      	; 0xcb2 <__floatsisf+0x48>
 cae:	96 e9       	ldi	r25, 0x96	; 150
 cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <__floatsisf+0x6a>
 cb2:	77 23       	and	r23, r23
 cb4:	21 f0       	breq	.+8      	; 0xcbe <__floatsisf+0x54>
 cb6:	9e e8       	ldi	r25, 0x8E	; 142
 cb8:	87 2f       	mov	r24, r23
 cba:	76 2f       	mov	r23, r22
 cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <__floatsisf+0x5e>
 cbe:	66 23       	and	r22, r22
 cc0:	71 f0       	breq	.+28     	; 0xcde <__floatsisf+0x74>
 cc2:	96 e8       	ldi	r25, 0x86	; 134
 cc4:	86 2f       	mov	r24, r22
 cc6:	70 e0       	ldi	r23, 0x00	; 0
 cc8:	60 e0       	ldi	r22, 0x00	; 0
 cca:	2a f0       	brmi	.+10     	; 0xcd6 <__floatsisf+0x6c>
 ccc:	9a 95       	dec	r25
 cce:	66 0f       	add	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	88 1f       	adc	r24, r24
 cd4:	da f7       	brpl	.-10     	; 0xccc <__floatsisf+0x62>
 cd6:	88 0f       	add	r24, r24
 cd8:	96 95       	lsr	r25
 cda:	87 95       	ror	r24
 cdc:	97 f9       	bld	r25, 7
 cde:	08 95       	ret

00000ce0 <__fp_inf>:
 ce0:	97 f9       	bld	r25, 7
 ce2:	9f 67       	ori	r25, 0x7F	; 127
 ce4:	80 e8       	ldi	r24, 0x80	; 128
 ce6:	70 e0       	ldi	r23, 0x00	; 0
 ce8:	60 e0       	ldi	r22, 0x00	; 0
 cea:	08 95       	ret

00000cec <__fp_nan>:
 cec:	9f ef       	ldi	r25, 0xFF	; 255
 cee:	80 ec       	ldi	r24, 0xC0	; 192
 cf0:	08 95       	ret

00000cf2 <__fp_pscA>:
 cf2:	00 24       	eor	r0, r0
 cf4:	0a 94       	dec	r0
 cf6:	16 16       	cp	r1, r22
 cf8:	17 06       	cpc	r1, r23
 cfa:	18 06       	cpc	r1, r24
 cfc:	09 06       	cpc	r0, r25
 cfe:	08 95       	ret

00000d00 <__fp_pscB>:
 d00:	00 24       	eor	r0, r0
 d02:	0a 94       	dec	r0
 d04:	12 16       	cp	r1, r18
 d06:	13 06       	cpc	r1, r19
 d08:	14 06       	cpc	r1, r20
 d0a:	05 06       	cpc	r0, r21
 d0c:	08 95       	ret

00000d0e <__fp_round>:
 d0e:	09 2e       	mov	r0, r25
 d10:	03 94       	inc	r0
 d12:	00 0c       	add	r0, r0
 d14:	11 f4       	brne	.+4      	; 0xd1a <__fp_round+0xc>
 d16:	88 23       	and	r24, r24
 d18:	52 f0       	brmi	.+20     	; 0xd2e <__fp_round+0x20>
 d1a:	bb 0f       	add	r27, r27
 d1c:	40 f4       	brcc	.+16     	; 0xd2e <__fp_round+0x20>
 d1e:	bf 2b       	or	r27, r31
 d20:	11 f4       	brne	.+4      	; 0xd26 <__fp_round+0x18>
 d22:	60 ff       	sbrs	r22, 0
 d24:	04 c0       	rjmp	.+8      	; 0xd2e <__fp_round+0x20>
 d26:	6f 5f       	subi	r22, 0xFF	; 255
 d28:	7f 4f       	sbci	r23, 0xFF	; 255
 d2a:	8f 4f       	sbci	r24, 0xFF	; 255
 d2c:	9f 4f       	sbci	r25, 0xFF	; 255
 d2e:	08 95       	ret

00000d30 <__fp_split3>:
 d30:	57 fd       	sbrc	r21, 7
 d32:	90 58       	subi	r25, 0x80	; 128
 d34:	44 0f       	add	r20, r20
 d36:	55 1f       	adc	r21, r21
 d38:	59 f0       	breq	.+22     	; 0xd50 <__fp_splitA+0x10>
 d3a:	5f 3f       	cpi	r21, 0xFF	; 255
 d3c:	71 f0       	breq	.+28     	; 0xd5a <__fp_splitA+0x1a>
 d3e:	47 95       	ror	r20

00000d40 <__fp_splitA>:
 d40:	88 0f       	add	r24, r24
 d42:	97 fb       	bst	r25, 7
 d44:	99 1f       	adc	r25, r25
 d46:	61 f0       	breq	.+24     	; 0xd60 <__fp_splitA+0x20>
 d48:	9f 3f       	cpi	r25, 0xFF	; 255
 d4a:	79 f0       	breq	.+30     	; 0xd6a <__fp_splitA+0x2a>
 d4c:	87 95       	ror	r24
 d4e:	08 95       	ret
 d50:	12 16       	cp	r1, r18
 d52:	13 06       	cpc	r1, r19
 d54:	14 06       	cpc	r1, r20
 d56:	55 1f       	adc	r21, r21
 d58:	f2 cf       	rjmp	.-28     	; 0xd3e <__fp_split3+0xe>
 d5a:	46 95       	lsr	r20
 d5c:	f1 df       	rcall	.-30     	; 0xd40 <__fp_splitA>
 d5e:	08 c0       	rjmp	.+16     	; 0xd70 <__fp_splitA+0x30>
 d60:	16 16       	cp	r1, r22
 d62:	17 06       	cpc	r1, r23
 d64:	18 06       	cpc	r1, r24
 d66:	99 1f       	adc	r25, r25
 d68:	f1 cf       	rjmp	.-30     	; 0xd4c <__fp_splitA+0xc>
 d6a:	86 95       	lsr	r24
 d6c:	71 05       	cpc	r23, r1
 d6e:	61 05       	cpc	r22, r1
 d70:	08 94       	sec
 d72:	08 95       	ret

00000d74 <__fp_zero>:
 d74:	e8 94       	clt

00000d76 <__fp_szero>:
 d76:	bb 27       	eor	r27, r27
 d78:	66 27       	eor	r22, r22
 d7a:	77 27       	eor	r23, r23
 d7c:	cb 01       	movw	r24, r22
 d7e:	97 f9       	bld	r25, 7
 d80:	08 95       	ret

00000d82 <__mulsf3>:
 d82:	0e 94 d4 06 	call	0xda8	; 0xda8 <__mulsf3x>
 d86:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__fp_round>
 d8a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscA>
 d8e:	38 f0       	brcs	.+14     	; 0xd9e <__mulsf3+0x1c>
 d90:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_pscB>
 d94:	20 f0       	brcs	.+8      	; 0xd9e <__mulsf3+0x1c>
 d96:	95 23       	and	r25, r21
 d98:	11 f0       	breq	.+4      	; 0xd9e <__mulsf3+0x1c>
 d9a:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>
 d9e:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_nan>
 da2:	11 24       	eor	r1, r1
 da4:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>

00000da8 <__mulsf3x>:
 da8:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_split3>
 dac:	70 f3       	brcs	.-36     	; 0xd8a <__mulsf3+0x8>

00000dae <__mulsf3_pse>:
 dae:	95 9f       	mul	r25, r21
 db0:	c1 f3       	breq	.-16     	; 0xda2 <__mulsf3+0x20>
 db2:	95 0f       	add	r25, r21
 db4:	50 e0       	ldi	r21, 0x00	; 0
 db6:	55 1f       	adc	r21, r21
 db8:	62 9f       	mul	r22, r18
 dba:	f0 01       	movw	r30, r0
 dbc:	72 9f       	mul	r23, r18
 dbe:	bb 27       	eor	r27, r27
 dc0:	f0 0d       	add	r31, r0
 dc2:	b1 1d       	adc	r27, r1
 dc4:	63 9f       	mul	r22, r19
 dc6:	aa 27       	eor	r26, r26
 dc8:	f0 0d       	add	r31, r0
 dca:	b1 1d       	adc	r27, r1
 dcc:	aa 1f       	adc	r26, r26
 dce:	64 9f       	mul	r22, r20
 dd0:	66 27       	eor	r22, r22
 dd2:	b0 0d       	add	r27, r0
 dd4:	a1 1d       	adc	r26, r1
 dd6:	66 1f       	adc	r22, r22
 dd8:	82 9f       	mul	r24, r18
 dda:	22 27       	eor	r18, r18
 ddc:	b0 0d       	add	r27, r0
 dde:	a1 1d       	adc	r26, r1
 de0:	62 1f       	adc	r22, r18
 de2:	73 9f       	mul	r23, r19
 de4:	b0 0d       	add	r27, r0
 de6:	a1 1d       	adc	r26, r1
 de8:	62 1f       	adc	r22, r18
 dea:	83 9f       	mul	r24, r19
 dec:	a0 0d       	add	r26, r0
 dee:	61 1d       	adc	r22, r1
 df0:	22 1f       	adc	r18, r18
 df2:	74 9f       	mul	r23, r20
 df4:	33 27       	eor	r19, r19
 df6:	a0 0d       	add	r26, r0
 df8:	61 1d       	adc	r22, r1
 dfa:	23 1f       	adc	r18, r19
 dfc:	84 9f       	mul	r24, r20
 dfe:	60 0d       	add	r22, r0
 e00:	21 1d       	adc	r18, r1
 e02:	82 2f       	mov	r24, r18
 e04:	76 2f       	mov	r23, r22
 e06:	6a 2f       	mov	r22, r26
 e08:	11 24       	eor	r1, r1
 e0a:	9f 57       	subi	r25, 0x7F	; 127
 e0c:	50 40       	sbci	r21, 0x00	; 0
 e0e:	9a f0       	brmi	.+38     	; 0xe36 <__mulsf3_pse+0x88>
 e10:	f1 f0       	breq	.+60     	; 0xe4e <__mulsf3_pse+0xa0>
 e12:	88 23       	and	r24, r24
 e14:	4a f0       	brmi	.+18     	; 0xe28 <__mulsf3_pse+0x7a>
 e16:	ee 0f       	add	r30, r30
 e18:	ff 1f       	adc	r31, r31
 e1a:	bb 1f       	adc	r27, r27
 e1c:	66 1f       	adc	r22, r22
 e1e:	77 1f       	adc	r23, r23
 e20:	88 1f       	adc	r24, r24
 e22:	91 50       	subi	r25, 0x01	; 1
 e24:	50 40       	sbci	r21, 0x00	; 0
 e26:	a9 f7       	brne	.-22     	; 0xe12 <__mulsf3_pse+0x64>
 e28:	9e 3f       	cpi	r25, 0xFE	; 254
 e2a:	51 05       	cpc	r21, r1
 e2c:	80 f0       	brcs	.+32     	; 0xe4e <__mulsf3_pse+0xa0>
 e2e:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>
 e32:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>
 e36:	5f 3f       	cpi	r21, 0xFF	; 255
 e38:	e4 f3       	brlt	.-8      	; 0xe32 <__mulsf3_pse+0x84>
 e3a:	98 3e       	cpi	r25, 0xE8	; 232
 e3c:	d4 f3       	brlt	.-12     	; 0xe32 <__mulsf3_pse+0x84>
 e3e:	86 95       	lsr	r24
 e40:	77 95       	ror	r23
 e42:	67 95       	ror	r22
 e44:	b7 95       	ror	r27
 e46:	f7 95       	ror	r31
 e48:	e7 95       	ror	r30
 e4a:	9f 5f       	subi	r25, 0xFF	; 255
 e4c:	c1 f7       	brne	.-16     	; 0xe3e <__mulsf3_pse+0x90>
 e4e:	fe 2b       	or	r31, r30
 e50:	88 0f       	add	r24, r24
 e52:	91 1d       	adc	r25, r1
 e54:	96 95       	lsr	r25
 e56:	87 95       	ror	r24
 e58:	97 f9       	bld	r25, 7
 e5a:	08 95       	ret

00000e5c <__divmodhi4>:
 e5c:	97 fb       	bst	r25, 7
 e5e:	07 2e       	mov	r0, r23
 e60:	16 f4       	brtc	.+4      	; 0xe66 <__divmodhi4+0xa>
 e62:	00 94       	com	r0
 e64:	07 d0       	rcall	.+14     	; 0xe74 <__divmodhi4_neg1>
 e66:	77 fd       	sbrc	r23, 7
 e68:	09 d0       	rcall	.+18     	; 0xe7c <__divmodhi4_neg2>
 e6a:	0e 94 73 07 	call	0xee6	; 0xee6 <__udivmodhi4>
 e6e:	07 fc       	sbrc	r0, 7
 e70:	05 d0       	rcall	.+10     	; 0xe7c <__divmodhi4_neg2>
 e72:	3e f4       	brtc	.+14     	; 0xe82 <__divmodhi4_exit>

00000e74 <__divmodhi4_neg1>:
 e74:	90 95       	com	r25
 e76:	81 95       	neg	r24
 e78:	9f 4f       	sbci	r25, 0xFF	; 255
 e7a:	08 95       	ret

00000e7c <__divmodhi4_neg2>:
 e7c:	70 95       	com	r23
 e7e:	61 95       	neg	r22
 e80:	7f 4f       	sbci	r23, 0xFF	; 255

00000e82 <__divmodhi4_exit>:
 e82:	08 95       	ret

00000e84 <__udivmodsi4>:
 e84:	a1 e2       	ldi	r26, 0x21	; 33
 e86:	1a 2e       	mov	r1, r26
 e88:	aa 1b       	sub	r26, r26
 e8a:	bb 1b       	sub	r27, r27
 e8c:	fd 01       	movw	r30, r26
 e8e:	0d c0       	rjmp	.+26     	; 0xeaa <__udivmodsi4_ep>

00000e90 <__udivmodsi4_loop>:
 e90:	aa 1f       	adc	r26, r26
 e92:	bb 1f       	adc	r27, r27
 e94:	ee 1f       	adc	r30, r30
 e96:	ff 1f       	adc	r31, r31
 e98:	a2 17       	cp	r26, r18
 e9a:	b3 07       	cpc	r27, r19
 e9c:	e4 07       	cpc	r30, r20
 e9e:	f5 07       	cpc	r31, r21
 ea0:	20 f0       	brcs	.+8      	; 0xeaa <__udivmodsi4_ep>
 ea2:	a2 1b       	sub	r26, r18
 ea4:	b3 0b       	sbc	r27, r19
 ea6:	e4 0b       	sbc	r30, r20
 ea8:	f5 0b       	sbc	r31, r21

00000eaa <__udivmodsi4_ep>:
 eaa:	66 1f       	adc	r22, r22
 eac:	77 1f       	adc	r23, r23
 eae:	88 1f       	adc	r24, r24
 eb0:	99 1f       	adc	r25, r25
 eb2:	1a 94       	dec	r1
 eb4:	69 f7       	brne	.-38     	; 0xe90 <__udivmodsi4_loop>
 eb6:	60 95       	com	r22
 eb8:	70 95       	com	r23
 eba:	80 95       	com	r24
 ebc:	90 95       	com	r25
 ebe:	9b 01       	movw	r18, r22
 ec0:	ac 01       	movw	r20, r24
 ec2:	bd 01       	movw	r22, r26
 ec4:	cf 01       	movw	r24, r30
 ec6:	08 95       	ret

00000ec8 <__umulhisi3>:
 ec8:	a2 9f       	mul	r26, r18
 eca:	b0 01       	movw	r22, r0
 ecc:	b3 9f       	mul	r27, r19
 ece:	c0 01       	movw	r24, r0
 ed0:	a3 9f       	mul	r26, r19
 ed2:	70 0d       	add	r23, r0
 ed4:	81 1d       	adc	r24, r1
 ed6:	11 24       	eor	r1, r1
 ed8:	91 1d       	adc	r25, r1
 eda:	b2 9f       	mul	r27, r18
 edc:	70 0d       	add	r23, r0
 ede:	81 1d       	adc	r24, r1
 ee0:	11 24       	eor	r1, r1
 ee2:	91 1d       	adc	r25, r1
 ee4:	08 95       	ret

00000ee6 <__udivmodhi4>:
 ee6:	aa 1b       	sub	r26, r26
 ee8:	bb 1b       	sub	r27, r27
 eea:	51 e1       	ldi	r21, 0x11	; 17
 eec:	07 c0       	rjmp	.+14     	; 0xefc <__udivmodhi4_ep>

00000eee <__udivmodhi4_loop>:
 eee:	aa 1f       	adc	r26, r26
 ef0:	bb 1f       	adc	r27, r27
 ef2:	a6 17       	cp	r26, r22
 ef4:	b7 07       	cpc	r27, r23
 ef6:	10 f0       	brcs	.+4      	; 0xefc <__udivmodhi4_ep>
 ef8:	a6 1b       	sub	r26, r22
 efa:	b7 0b       	sbc	r27, r23

00000efc <__udivmodhi4_ep>:
 efc:	88 1f       	adc	r24, r24
 efe:	99 1f       	adc	r25, r25
 f00:	5a 95       	dec	r21
 f02:	a9 f7       	brne	.-22     	; 0xeee <__udivmodhi4_loop>
 f04:	80 95       	com	r24
 f06:	90 95       	com	r25
 f08:	bc 01       	movw	r22, r24
 f0a:	cd 01       	movw	r24, r26
 f0c:	08 95       	ret

00000f0e <__itoa_ncheck>:
 f0e:	bb 27       	eor	r27, r27
 f10:	4a 30       	cpi	r20, 0x0A	; 10
 f12:	31 f4       	brne	.+12     	; 0xf20 <__itoa_ncheck+0x12>
 f14:	99 23       	and	r25, r25
 f16:	22 f4       	brpl	.+8      	; 0xf20 <__itoa_ncheck+0x12>
 f18:	bd e2       	ldi	r27, 0x2D	; 45
 f1a:	90 95       	com	r25
 f1c:	81 95       	neg	r24
 f1e:	9f 4f       	sbci	r25, 0xFF	; 255
 f20:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__utoa_common>

00000f24 <__utoa_ncheck>:
 f24:	bb 27       	eor	r27, r27

00000f26 <__utoa_common>:
 f26:	fb 01       	movw	r30, r22
 f28:	55 27       	eor	r21, r21
 f2a:	aa 27       	eor	r26, r26
 f2c:	88 0f       	add	r24, r24
 f2e:	99 1f       	adc	r25, r25
 f30:	aa 1f       	adc	r26, r26
 f32:	a4 17       	cp	r26, r20
 f34:	10 f0       	brcs	.+4      	; 0xf3a <__utoa_common+0x14>
 f36:	a4 1b       	sub	r26, r20
 f38:	83 95       	inc	r24
 f3a:	50 51       	subi	r21, 0x10	; 16
 f3c:	b9 f7       	brne	.-18     	; 0xf2c <__utoa_common+0x6>
 f3e:	a0 5d       	subi	r26, 0xD0	; 208
 f40:	aa 33       	cpi	r26, 0x3A	; 58
 f42:	08 f0       	brcs	.+2      	; 0xf46 <__utoa_common+0x20>
 f44:	a9 5d       	subi	r26, 0xD9	; 217
 f46:	a1 93       	st	Z+, r26
 f48:	00 97       	sbiw	r24, 0x00	; 0
 f4a:	79 f7       	brne	.-34     	; 0xf2a <__utoa_common+0x4>
 f4c:	b1 11       	cpse	r27, r1
 f4e:	b1 93       	st	Z+, r27
 f50:	11 92       	st	Z+, r1
 f52:	cb 01       	movw	r24, r22
 f54:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <strrev>

00000f58 <strrev>:
 f58:	dc 01       	movw	r26, r24
 f5a:	fc 01       	movw	r30, r24
 f5c:	67 2f       	mov	r22, r23
 f5e:	71 91       	ld	r23, Z+
 f60:	77 23       	and	r23, r23
 f62:	e1 f7       	brne	.-8      	; 0xf5c <strrev+0x4>
 f64:	32 97       	sbiw	r30, 0x02	; 2
 f66:	04 c0       	rjmp	.+8      	; 0xf70 <strrev+0x18>
 f68:	7c 91       	ld	r23, X
 f6a:	6d 93       	st	X+, r22
 f6c:	70 83       	st	Z, r23
 f6e:	62 91       	ld	r22, -Z
 f70:	ae 17       	cp	r26, r30
 f72:	bf 07       	cpc	r27, r31
 f74:	c8 f3       	brcs	.-14     	; 0xf68 <strrev+0x10>
 f76:	08 95       	ret

00000f78 <_exit>:
 f78:	f8 94       	cli

00000f7a <__stop_program>:
 f7a:	ff cf       	rjmp	.-2      	; 0xf7a <__stop_program>
