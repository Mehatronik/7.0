
serijska proba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001aa  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  0080010e  0080010e  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007db  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fa  00000000  00000000  00000ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ff  00000000  00000000  000011e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c3  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000116  00000000  00000000  0000195f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 39       	cpi	r26, 0x90	; 144
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  9e:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Rx_Tx_Enable>:
}


void Rx_Tx_Enable()
{
	cli();
  a6:	f8 94       	cli
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<TXCIE0)|(1<<RXCIE0); //Rx, Tx enable, Tx interrupt enable, Rx interrupt enable
  a8:	88 ed       	ldi	r24, 0xD8	; 216
  aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//1 stop bit, no parity
	
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); //Char size = 8 bit
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	//UBR je podeljen u dva registra
	UBRR0H = mojUBR>>8;  //LSB od mojUBR
  b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = mojUBR;  //MSB od mojUBR
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	sei();
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <addSerial>:
}

void addSerial(char c)     //dodaje karakter u bafer
{
	
	serialBuffer[writePozicija] = c;    //upisi pristigli karakter na poziciju writePozicija
  c2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
  c6:	e9 2f       	mov	r30, r25
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	e0 5f       	subi	r30, 0xF0	; 240
  cc:	fe 4f       	sbci	r31, 0xFE	; 254
  ce:	80 83       	st	Z, r24
	writePozicija++;                    //kad upises inkrementiraj "pokazivac" pozicije
  d0:	9f 5f       	subi	r25, 0xFF	; 255
	
	
	if(writePozicija >= buffer_size) //kad dodjes do kraja vrati se na pocetak
  d2:	1a f0       	brmi	.+6      	; 0xda <addSerial+0x18>

void addSerial(char c)     //dodaje karakter u bafer
{
	
	serialBuffer[writePozicija] = c;    //upisi pristigli karakter na poziciju writePozicija
	writePozicija++;                    //kad upises inkrementiraj "pokazivac" pozicije
  d4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <__data_end>
  d8:	08 95       	ret
	
	
	if(writePozicija >= buffer_size) //kad dodjes do kraja vrati se na pocetak
		writePozicija = 0;
  da:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
  de:	08 95       	ret

000000e0 <serialWrite>:
	
}

void serialWrite(char c[])
{
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
	
	for(uint8_t i=0; i<strlen(c); i++)
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	07 c0       	rjmp	.+14     	; 0xfa <serialWrite+0x1a>
	{
		addSerial(c[i]);
  ec:	fe 01       	movw	r30, r28
  ee:	e8 0f       	add	r30, r24
  f0:	f9 1f       	adc	r31, r25
  f2:	80 81       	ld	r24, Z
  f4:	0e 94 61 00 	call	0xc2	; 0xc2 <addSerial>
}

void serialWrite(char c[])
{
	
	for(uint8_t i=0; i<strlen(c); i++)
  f8:	1f 5f       	subi	r17, 0xFF	; 255
  fa:	81 2f       	mov	r24, r17
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fe 01       	movw	r30, r28
 100:	01 90       	ld	r0, Z+
 102:	00 20       	and	r0, r0
 104:	e9 f7       	brne	.-6      	; 0x100 <serialWrite+0x20>
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	ec 1b       	sub	r30, r28
 10a:	fd 0b       	sbc	r31, r29
 10c:	8e 17       	cp	r24, r30
 10e:	9f 07       	cpc	r25, r31
 110:	68 f3       	brcs	.-38     	; 0xec <serialWrite+0xc>
	{
		addSerial(c[i]);
	}
	
	if(UCSR0A & (1<<UDRE0))  //transmit buffer empty flag. ready to be written
 112:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 116:	85 fd       	sbrc	r24, 5
		UDR0 = 0;
 118:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	08 95       	ret

00000124 <serialRead>:

void serialRead()  //da ucitava u uC poslato sa kompa 
{
	
	if( (!(UCSR0A & (1<<UDRE0))) == 0 )
 124:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 128:	85 ff       	sbrs	r24, 5
 12a:	04 c0       	rjmp	.+8      	; 0x134 <serialRead+0x10>
		addSerial(UDR0);
 12c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <addSerial>
 134:	08 95       	ret

00000136 <main>:

int main(void)
{

	
	Rx_Tx_Enable();
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <Rx_Tx_Enable>
	
	

	
	
	serialWrite("Hello world\n\r");
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 70 00 	call	0xe0	; 0xe0 <serialWrite>
	//serialWrite("Dje ste Srbi\n\r");
	
	
    while (1) 
    {
		serialRead();
 142:	0e 94 92 00 	call	0x124	; 0x124 <serialRead>
 146:	fd cf       	rjmp	.-6      	; 0x142 <main+0xc>

00000148 <__vector_20>:
		addSerial(UDR0);
}


ISR(USART_TX_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	//prekid usled transmit complete flag
	
	
	if(readPozicija != writePozicija)
 158:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <readPozicija>
 15c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 160:	e8 17       	cp	r30, r24
 162:	79 f0       	breq	.+30     	; 0x182 <__vector_20+0x3a>
	{
		UDR0 = serialBuffer[readPozicija];
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e0 5f       	subi	r30, 0xF0	; 240
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	80 81       	ld	r24, Z
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		readPozicija++;
 170:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <readPozicija>
 174:	8f 5f       	subi	r24, 0xFF	; 255
		
		if(readPozicija >= buffer_size)
 176:	1a f0       	brmi	.+6      	; 0x17e <__vector_20+0x36>
	
	
	if(readPozicija != writePozicija)
	{
		UDR0 = serialBuffer[readPozicija];
		readPozicija++;
 178:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <readPozicija>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <__vector_20+0x3a>
		
		if(readPozicija >= buffer_size)
			readPozicija=0;
 17e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <readPozicija>
		
	}

	
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_18>:

ISR(USART_RX_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
	
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
