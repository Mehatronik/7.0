
Casovnik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000002f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fd  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000703  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a1  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d7  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d5  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  88:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
    }
	return 0;
}

ISR(TIMER1_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	//PORTB ^= 1<<5;
	
	sek++;
  9e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sek>
  a2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sek+0x1>
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <sek+0x1>
  ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sek>
	if(sat>=24)
	{
		sat=0;
	}*/
	
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <timer_init>:

void timer_init()
{
		TCCR1A = 0b0;
  be:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B |= 0b1100; //0b1100
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8c 60       	ori	r24, 0x0C	; 12
  ca:	80 83       	st	Z, r24
		
		
		
		OCR1A =62498;   //!!VRLO BITNO!!  u datasheet-u se navodi formula kojom se odredjuje frekvencija f = fclk/(2N(OCRxn-1)), gde je veoma bitno zapaziti
  cc:	82 e2       	ldi	r24, 0x22	; 34
  ce:	94 ef       	ldi	r25, 0xF4	; 244
  d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		
		//OCR1AL = 0x22; - bitno je i da broj u ovaj registar uneses odjednom, a ne ovako pojedinacno. Ovako se pravi potpuno pogresna frekvencija
		//OCR1AH = 0xF4; - u datasheet-u je naglaseno da se baci pogled na upisivanje u 16-bitne registre. Ovde takve zavrzlame nisu potrebne jer su programeri
		//                 Atmela resili to maskama, tako da korisnik samo upise kao da upisuje u obicni 8-bitni registar.
		
		TIMSK1 = 0b10;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  de:	08 95       	ret

000000e0 <uart_init>:
}

void uart_init()
{
	UBRR0H = (unsigned char)(mojUBR>>8);
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)mojUBR;
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B |= 1<<TXEN0;					//tx enable
  ea:	e1 ec       	ldi	r30, 0xC1	; 193
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ02);	//8 data bits
  f4:	e2 ec       	ldi	r30, 0xC2	; 194
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	84 60       	ori	r24, 0x04	; 4
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <SerialPrintInt>:
	
}

void SerialPrintInt(int a)
{
 100:	9c 01       	movw	r18, r24
			*/
			
			
			int pristigliBroj = a;
			
			if(a<10)
 102:	0a 97       	sbiw	r24, 0x0a	; 10
 104:	4c f4       	brge	.+18     	; 0x118 <SerialPrintInt+0x18>
			{
				while (!(UCSR0A & (1<<UDRE0)));
 106:	e0 ec       	ldi	r30, 0xC0	; 192
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	85 ff       	sbrs	r24, 5
 10e:	fd cf       	rjmp	.-6      	; 0x10a <SerialPrintInt+0xa>
				UDR0 = a+48;
 110:	20 5d       	subi	r18, 0xD0	; 208
 112:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 116:	08 95       	ret
			}
			
			if(a>9)
			{
				
				while (!(UCSR0A & (1<<UDRE0)));
 118:	e0 ec       	ldi	r30, 0xC0	; 192
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	85 ff       	sbrs	r24, 5
 120:	fd cf       	rjmp	.-6      	; 0x11c <SerialPrintInt+0x1c>
				UDR0 = (a/10)+48;				
 122:	c9 01       	movw	r24, r18
 124:	6a e0       	ldi	r22, 0x0A	; 10
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	0e 94 17 01 	call	0x22e	; 0x22e <__divmodhi4>
 12c:	60 5d       	subi	r22, 0xD0	; 208
 12e:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

				while (!(UCSR0A & (1<<UDRE0)));
 132:	e0 ec       	ldi	r30, 0xC0	; 192
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	85 ff       	sbrs	r24, 5
 13a:	fd cf       	rjmp	.-6      	; 0x136 <SerialPrintInt+0x36>
				UDR0 = (a%10)+48;					
 13c:	c9 01       	movw	r24, r18
 13e:	6a e0       	ldi	r22, 0x0A	; 10
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 17 01 	call	0x22e	; 0x22e <__divmodhi4>
 146:	80 5d       	subi	r24, 0xD0	; 208
 148:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 14c:	08 95       	ret

0000014e <main>:



int main(void)
{
    DDRB |= 1<<PORTB5;
 14e:	25 9a       	sbi	0x04, 5	; 4
	
	
	int broj = 10;
	
	timer_init();
 150:	0e 94 5f 00 	call	0xbe	; 0xbe <timer_init>
	uart_init();
 154:	0e 94 70 00 	call	0xe0	; 0xe0 <uart_init>
	
	
	sei();
 158:	78 94       	sei
		}
		
		
		
		SerialPrintInt(sat);
		while (!(UCSR0A & (1<<UDRE0)));
 15a:	c0 ec       	ldi	r28, 0xC0	; 192
 15c:	d0 e0       	ldi	r29, 0x00	; 0
		UDR0 = 0x3A; //dvotacka
 15e:	06 ec       	ldi	r16, 0xC6	; 198
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	0f 2e       	mov	r0, r31
 164:	fa e3       	ldi	r31, 0x3A	; 58
 166:	ff 2e       	mov	r15, r31
 168:	f0 2d       	mov	r31, r0
		
		SerialPrintInt(sek);
		while (!(UCSR0A & (1<<UDRE0)));

		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = '\n';
 16a:	0f 2e       	mov	r0, r31
 16c:	fa e0       	ldi	r31, 0x0A	; 10
 16e:	ef 2e       	mov	r14, r31
 170:	f0 2d       	mov	r31, r0
	
	
    while (1) 
    {
		
		if(sek>=60)
 172:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sek>
 176:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sek+0x1>
 17a:	cc 97       	sbiw	r24, 0x3c	; 60
 17c:	6c f0       	brlt	.+26     	; 0x198 <main+0x4a>
		{
			sek=0;
 17e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sek+0x1>
 182:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sek>
			min++;
 186:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <min>
 18a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <min+0x1>
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <min+0x1>
 194:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <min>
		}
		
		if(min>=60)
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <min>
 19c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <min+0x1>
 1a0:	cc 97       	sbiw	r24, 0x3c	; 60
 1a2:	6c f0       	brlt	.+26     	; 0x1be <main+0x70>
		{
			min=0;
 1a4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <min+0x1>
 1a8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <min>
			sat++;
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		
		if(sat>=24)
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1c6:	48 97       	sbiw	r24, 0x18	; 24
 1c8:	24 f0       	brlt	.+8      	; 0x1d2 <main+0x84>
		{
			sat=0;
 1ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		
		
		
		SerialPrintInt(sat);
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1da:	0e 94 80 00 	call	0x100	; 0x100 <SerialPrintInt>
		while (!(UCSR0A & (1<<UDRE0)));
 1de:	88 81       	ld	r24, Y
 1e0:	85 ff       	sbrs	r24, 5
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <main+0x90>
		UDR0 = 0x3A; //dvotacka
 1e4:	f8 01       	movw	r30, r16
 1e6:	f0 82       	st	Z, r15
		
		
		
		SerialPrintInt(min);
 1e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <min>
 1ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <min+0x1>
 1f0:	0e 94 80 00 	call	0x100	; 0x100 <SerialPrintInt>
		while (!(UCSR0A & (1<<UDRE0)));
 1f4:	88 81       	ld	r24, Y
 1f6:	85 ff       	sbrs	r24, 5
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <main+0xa6>
		UDR0 = 0x3A; //dvotacka
 1fa:	f8 01       	movw	r30, r16
 1fc:	f0 82       	st	Z, r15
		
		SerialPrintInt(sek);
 1fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sek>
 202:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sek+0x1>
 206:	0e 94 80 00 	call	0x100	; 0x100 <SerialPrintInt>
		while (!(UCSR0A & (1<<UDRE0)));
 20a:	88 81       	ld	r24, Y
 20c:	85 ff       	sbrs	r24, 5
 20e:	fd cf       	rjmp	.-6      	; 0x20a <main+0xbc>

		while (!(UCSR0A & (1<<UDRE0)));
 210:	88 81       	ld	r24, Y
 212:	85 ff       	sbrs	r24, 5
 214:	fd cf       	rjmp	.-6      	; 0x210 <main+0xc2>
		UDR0 = '\n';
 216:	f8 01       	movw	r30, r16
 218:	e0 82       	st	Z, r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	ff ef       	ldi	r31, 0xFF	; 255
 21c:	20 e7       	ldi	r18, 0x70	; 112
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	f1 50       	subi	r31, 0x01	; 1
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0xd2>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0xdc>
 22a:	00 00       	nop
 22c:	a2 cf       	rjmp	.-188    	; 0x172 <main+0x24>

0000022e <__divmodhi4>:
 22e:	97 fb       	bst	r25, 7
 230:	07 2e       	mov	r0, r23
 232:	16 f4       	brtc	.+4      	; 0x238 <__divmodhi4+0xa>
 234:	00 94       	com	r0
 236:	07 d0       	rcall	.+14     	; 0x246 <__divmodhi4_neg1>
 238:	77 fd       	sbrc	r23, 7
 23a:	09 d0       	rcall	.+18     	; 0x24e <__divmodhi4_neg2>
 23c:	0e 94 2b 01 	call	0x256	; 0x256 <__udivmodhi4>
 240:	07 fc       	sbrc	r0, 7
 242:	05 d0       	rcall	.+10     	; 0x24e <__divmodhi4_neg2>
 244:	3e f4       	brtc	.+14     	; 0x254 <__divmodhi4_exit>

00000246 <__divmodhi4_neg1>:
 246:	90 95       	com	r25
 248:	81 95       	neg	r24
 24a:	9f 4f       	sbci	r25, 0xFF	; 255
 24c:	08 95       	ret

0000024e <__divmodhi4_neg2>:
 24e:	70 95       	com	r23
 250:	61 95       	neg	r22
 252:	7f 4f       	sbci	r23, 0xFF	; 255

00000254 <__divmodhi4_exit>:
 254:	08 95       	ret

00000256 <__udivmodhi4>:
 256:	aa 1b       	sub	r26, r26
 258:	bb 1b       	sub	r27, r27
 25a:	51 e1       	ldi	r21, 0x11	; 17
 25c:	07 c0       	rjmp	.+14     	; 0x26c <__udivmodhi4_ep>

0000025e <__udivmodhi4_loop>:
 25e:	aa 1f       	adc	r26, r26
 260:	bb 1f       	adc	r27, r27
 262:	a6 17       	cp	r26, r22
 264:	b7 07       	cpc	r27, r23
 266:	10 f0       	brcs	.+4      	; 0x26c <__udivmodhi4_ep>
 268:	a6 1b       	sub	r26, r22
 26a:	b7 0b       	sbc	r27, r23

0000026c <__udivmodhi4_ep>:
 26c:	88 1f       	adc	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	5a 95       	dec	r21
 272:	a9 f7       	brne	.-22     	; 0x25e <__udivmodhi4_loop>
 274:	80 95       	com	r24
 276:	90 95       	com	r25
 278:	bc 01       	movw	r22, r24
 27a:	cd 01       	movw	r24, r26
 27c:	08 95       	ret

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
