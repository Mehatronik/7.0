
i2c eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b24  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000836  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a8  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044b  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000295  00000000  00000000  00002447  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  9e:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
  a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  aa:	88 e4       	ldi	r24, 0x48	; 72
  ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  b0:	08 95       	ret

000000b2 <i2c_start_wait>:
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	ec eb       	ldi	r30, 0xBC	; 188
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	24 ea       	ldi	r18, 0xA4	; 164
  bc:	a9 eb       	ldi	r26, 0xB9	; 185
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	cb eb       	ldi	r28, 0xBB	; 187
  c2:	d0 e0       	ldi	r29, 0x00	; 0
  c4:	34 e8       	ldi	r19, 0x84	; 132
  c6:	44 e9       	ldi	r20, 0x94	; 148
  c8:	20 83       	st	Z, r18
  ca:	90 81       	ld	r25, Z
  cc:	99 23       	and	r25, r25
  ce:	ec f7       	brge	.-6      	; 0xca <i2c_start_wait+0x18>
  d0:	9c 91       	ld	r25, X
  d2:	98 7f       	andi	r25, 0xF8	; 248
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	11 f0       	breq	.+4      	; 0xdc <i2c_start_wait+0x2a>
  d8:	90 31       	cpi	r25, 0x10	; 16
  da:	b1 f7       	brne	.-20     	; 0xc8 <i2c_start_wait+0x16>
  dc:	88 83       	st	Y, r24
  de:	30 83       	st	Z, r19
  e0:	90 81       	ld	r25, Z
  e2:	99 23       	and	r25, r25
  e4:	ec f7       	brge	.-6      	; 0xe0 <i2c_start_wait+0x2e>
  e6:	9c 91       	ld	r25, X
  e8:	98 7f       	andi	r25, 0xF8	; 248
  ea:	90 32       	cpi	r25, 0x20	; 32
  ec:	11 f0       	breq	.+4      	; 0xf2 <i2c_start_wait+0x40>
  ee:	98 35       	cpi	r25, 0x58	; 88
  f0:	29 f4       	brne	.+10     	; 0xfc <i2c_start_wait+0x4a>
  f2:	40 83       	st	Z, r20
  f4:	90 81       	ld	r25, Z
  f6:	94 fd       	sbrc	r25, 4
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <i2c_start_wait+0x42>
  fa:	e6 cf       	rjmp	.-52     	; 0xc8 <i2c_start_wait+0x16>
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <i2c_stop>:
 102:	84 e9       	ldi	r24, 0x94	; 148
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	84 fd       	sbrc	r24, 4
 110:	fd cf       	rjmp	.-6      	; 0x10c <i2c_stop+0xa>
 112:	08 95       	ret

00000114 <i2c_write>:
 114:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <i2c_write+0xe>
 128:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 12c:	98 7f       	andi	r25, 0xF8	; 248
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	98 32       	cpi	r25, 0x28	; 40
 132:	09 f4       	brne	.+2      	; 0x136 <i2c_write+0x22>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret

00000138 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 138:	84 e8       	ldi	r24, 0x84	; 132
 13a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 13e:	ec eb       	ldi	r30, 0xBC	; 188
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	ec f7       	brge	.-6      	; 0x142 <i2c_readNak+0xa>
	
    return TWDR;
 148:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
 14c:	08 95       	ret

0000014e <main>:
#define atmel24C08A_adr  0b1010000      // device address of EEPROM 24C08a, see datasheet



int main(void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	2f 97       	sbiw	r28, 0x0f	; 15
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
	unsigned char ret;
	char bafer[15];
	int i=0;
	
    i2c_init();                                // init I2C interface
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	uart_init();
 166:	0e 94 14 01 	call	0x228	; 0x228 <uart_init>
	sei();
 16a:	78 94       	sei
    
	//PB5 = dig13 = led - izlaz
	DDRB |= 1<<PORTB5;
 16c:	25 9a       	sbi	0x04, 5	; 4
	
	
	
	/* write 93 to eeprom address 0x05 (Byte Write) */
	 i2c_start_wait( (atmel24C08A_adr << 1) + I2C_WRITE);       // set device address and write mode, last bit is Read-1, Write-0; shift zato sto je addr 7-bit-na
 16e:	80 ea       	ldi	r24, 0xA0	; 160
 170:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_wait>
			
	
	/* issuing start condition ok, device accessible */
	//i2c_write(0x01);                       // write address = 0
	//i2c_write(111);                       // ret=0 -> Ok, ret=1 -> no ACK 
	i2c_stop();                            // set stop conditon = release bus
 174:	0e 94 81 00 	call	0x102	; 0x102 <i2c_stop>
               
 
	
	
	/* podesim pocetnu adresu za citanje */
	i2c_start_wait( (atmel24C08A_adr << 1) + I2C_WRITE);
 178:	80 ea       	ldi	r24, 0xA0	; 160
 17a:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_wait>
	i2c_write(0x00);										//pocetna adresa = 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_write>
 184:	00 e0       	ldi	r16, 0x00	; 0
 186:	14 e0       	ldi	r17, 0x04	; 4
	
	for(i=0; i<1024; i++)
	{
		
		
		i2c_start_wait( (atmel24C08A_adr << 1) + I2C_READ);    //citanje
 188:	81 ea       	ldi	r24, 0xA1	; 161
 18a:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_wait>
		ret = i2c_readNak();                    // read one byte
 18e:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_readNak>
		//i2c_stop();
		
		
		/* slanje preko uarta */
		itoa( ret , bafer, 10);
 192:	4a e0       	ldi	r20, 0x0A	; 10
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	be 01       	movw	r22, r28
 198:	6f 5f       	subi	r22, 0xFF	; 255
 19a:	7f 4f       	sbci	r23, 0xFF	; 255
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 37 01 	call	0x26e	; 0x26e <itoa>
		send_str(bafer);
 1a2:	ce 01       	movw	r24, r28
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	0e 94 24 01 	call	0x248	; 0x248 <send_str>

		send_str("\n");  //novi red
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 24 01 	call	0x248	; 0x248 <send_str>
 1b2:	01 50       	subi	r16, 0x01	; 1
 1b4:	11 09       	sbc	r17, r1
	i2c_write(0x00);										//pocetna adresa = 0
	
	
	
	
	for(i=0; i<1024; i++)
 1b6:	41 f7       	brne	.-48     	; 0x188 <main+0x3a>
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <main+0x6a>

000001ba <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
	poslato=0;
 1c4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <poslato>
}
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__vector_18>:

ISR(USART_RX_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	8f 93       	push	r24
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
	input_char=UDR0;
 1e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1e6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 1ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1ee:	88 30       	cpi	r24, 0x08	; 8
 1f0:	98 f4       	brcc	.+38     	; 0x218 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 1f2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <input_char>
 1fc:	eb 5f       	subi	r30, 0xFB	; 251
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	80 83       	st	Z, r24
		buff_size++;
 202:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		input_buffer[buff_size]='\0';
 20c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	eb 5f       	subi	r30, 0xFB	; 251
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	10 82       	st	Z, r1
	}
}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 22e:	88 ed       	ldi	r24, 0xD8	; 216
 230:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 23a:	8f ec       	ldi	r24, 0xCF	; 207
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 242:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 246:	08 95       	ret

00000248 <send_str>:
}

void send_str(unsigned char *str)
{
 248:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 24a:	90 81       	ld	r25, Z
 24c:	99 23       	and	r25, r25
 24e:	71 f0       	breq	.+28     	; 0x26c <send_str+0x24>
 250:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 252:	a6 ec       	ldi	r26, 0xC6	; 198
 254:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 256:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 258:	9c 93       	st	X, r25
		poslato=1;
 25a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <poslato>
		while (poslato);
 25e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <poslato>
 262:	91 11       	cpse	r25, r1
 264:	fc cf       	rjmp	.-8      	; 0x25e <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 266:	91 91       	ld	r25, Z+
 268:	91 11       	cpse	r25, r1
 26a:	f6 cf       	rjmp	.-20     	; 0x258 <send_str+0x10>
 26c:	08 95       	ret

0000026e <itoa>:
 26e:	45 32       	cpi	r20, 0x25	; 37
 270:	51 05       	cpc	r21, r1
 272:	20 f4       	brcc	.+8      	; 0x27c <itoa+0xe>
 274:	42 30       	cpi	r20, 0x02	; 2
 276:	10 f0       	brcs	.+4      	; 0x27c <itoa+0xe>
 278:	0c 94 42 01 	jmp	0x284	; 0x284 <__itoa_ncheck>
 27c:	fb 01       	movw	r30, r22
 27e:	10 82       	st	Z, r1
 280:	cb 01       	movw	r24, r22
 282:	08 95       	ret

00000284 <__itoa_ncheck>:
 284:	bb 27       	eor	r27, r27
 286:	4a 30       	cpi	r20, 0x0A	; 10
 288:	31 f4       	brne	.+12     	; 0x296 <__itoa_ncheck+0x12>
 28a:	99 23       	and	r25, r25
 28c:	22 f4       	brpl	.+8      	; 0x296 <__itoa_ncheck+0x12>
 28e:	bd e2       	ldi	r27, 0x2D	; 45
 290:	90 95       	com	r25
 292:	81 95       	neg	r24
 294:	9f 4f       	sbci	r25, 0xFF	; 255
 296:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__utoa_common>

0000029a <__utoa_ncheck>:
 29a:	bb 27       	eor	r27, r27

0000029c <__utoa_common>:
 29c:	fb 01       	movw	r30, r22
 29e:	55 27       	eor	r21, r21
 2a0:	aa 27       	eor	r26, r26
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	aa 1f       	adc	r26, r26
 2a8:	a4 17       	cp	r26, r20
 2aa:	10 f0       	brcs	.+4      	; 0x2b0 <__utoa_common+0x14>
 2ac:	a4 1b       	sub	r26, r20
 2ae:	83 95       	inc	r24
 2b0:	50 51       	subi	r21, 0x10	; 16
 2b2:	b9 f7       	brne	.-18     	; 0x2a2 <__utoa_common+0x6>
 2b4:	a0 5d       	subi	r26, 0xD0	; 208
 2b6:	aa 33       	cpi	r26, 0x3A	; 58
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <__utoa_common+0x20>
 2ba:	a9 5d       	subi	r26, 0xD9	; 217
 2bc:	a1 93       	st	Z+, r26
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	79 f7       	brne	.-34     	; 0x2a0 <__utoa_common+0x4>
 2c2:	b1 11       	cpse	r27, r1
 2c4:	b1 93       	st	Z+, r27
 2c6:	11 92       	st	Z+, r1
 2c8:	cb 01       	movw	r24, r22
 2ca:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <strrev>

000002ce <strrev>:
 2ce:	dc 01       	movw	r26, r24
 2d0:	fc 01       	movw	r30, r24
 2d2:	67 2f       	mov	r22, r23
 2d4:	71 91       	ld	r23, Z+
 2d6:	77 23       	and	r23, r23
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <strrev+0x4>
 2da:	32 97       	sbiw	r30, 0x02	; 2
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <strrev+0x18>
 2de:	7c 91       	ld	r23, X
 2e0:	6d 93       	st	X+, r22
 2e2:	70 83       	st	Z, r23
 2e4:	62 91       	ld	r22, -Z
 2e6:	ae 17       	cp	r26, r30
 2e8:	bf 07       	cpc	r27, r31
 2ea:	c8 f3       	brcs	.-14     	; 0x2de <strrev+0x10>
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
