
i2c eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000934  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800112  00800112  000009da  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e90  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b9  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082b  00000000  00000000  00002289  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  00002cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a5  00000000  00000000  00003169  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000380e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  9e:	0c 94 98 04 	jmp	0x930	; 0x930 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}
  a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  aa:	88 e4       	ldi	r24, 0x48	; 72
  ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  b0:	08 95       	ret

000000b2 <i2c_start_wait>:
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	ec eb       	ldi	r30, 0xBC	; 188
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	24 ea       	ldi	r18, 0xA4	; 164
  bc:	a9 eb       	ldi	r26, 0xB9	; 185
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	cb eb       	ldi	r28, 0xBB	; 187
  c2:	d0 e0       	ldi	r29, 0x00	; 0
  c4:	34 e8       	ldi	r19, 0x84	; 132
  c6:	44 e9       	ldi	r20, 0x94	; 148
  c8:	20 83       	st	Z, r18
  ca:	90 81       	ld	r25, Z
  cc:	99 23       	and	r25, r25
  ce:	ec f7       	brge	.-6      	; 0xca <i2c_start_wait+0x18>
  d0:	9c 91       	ld	r25, X
  d2:	98 7f       	andi	r25, 0xF8	; 248
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	11 f0       	breq	.+4      	; 0xdc <i2c_start_wait+0x2a>
  d8:	90 31       	cpi	r25, 0x10	; 16
  da:	b1 f7       	brne	.-20     	; 0xc8 <i2c_start_wait+0x16>
  dc:	88 83       	st	Y, r24
  de:	30 83       	st	Z, r19
  e0:	90 81       	ld	r25, Z
  e2:	99 23       	and	r25, r25
  e4:	ec f7       	brge	.-6      	; 0xe0 <i2c_start_wait+0x2e>
  e6:	9c 91       	ld	r25, X
  e8:	98 7f       	andi	r25, 0xF8	; 248
  ea:	90 32       	cpi	r25, 0x20	; 32
  ec:	11 f0       	breq	.+4      	; 0xf2 <i2c_start_wait+0x40>
  ee:	98 35       	cpi	r25, 0x58	; 88
  f0:	29 f4       	brne	.+10     	; 0xfc <i2c_start_wait+0x4a>
  f2:	40 83       	st	Z, r20
  f4:	90 81       	ld	r25, Z
  f6:	94 fd       	sbrc	r25, 4
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <i2c_start_wait+0x42>
  fa:	e6 cf       	rjmp	.-52     	; 0xc8 <i2c_start_wait+0x16>
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 102:	84 e9       	ldi	r24, 0x94	; 148
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	84 fd       	sbrc	r24, 4
 110:	fd cf       	rjmp	.-6      	; 0x10c <i2c_stop+0xa>

}
 112:	08 95       	ret

00000114 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 114:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 128:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 12c:	98 7f       	andi	r25, 0xF8	; 248
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	98 32       	cpi	r25, 0x28	; 40
 132:	09 f4       	brne	.+2      	; 0x136 <i2c_write+0x22>
 134:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
 136:	08 95       	ret

00000138 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 138:	84 ec       	ldi	r24, 0xC4	; 196
 13a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
 13e:	ec eb       	ldi	r30, 0xBC	; 188
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	ec f7       	brge	.-6      	; 0x142 <i2c_readAck+0xa>

    return TWDR;
 148:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
 14c:	08 95       	ret

0000014e <eeprom_read_all_print>:
		
	}
}

void eeprom_read_all_print()
{
 14e:	8f 92       	push	r8
 150:	9f 92       	push	r9
 152:	af 92       	push	r10
 154:	bf 92       	push	r11
 156:	cf 92       	push	r12
 158:	df 92       	push	r13
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
	
	unsigned i=0;
	unsigned j=0;
	
	/* podesim pocetnu adresu za citanje */
	i2c_start_wait( atmel24C08A_adr_x0 + I2C_WRITE);
 166:	80 ea       	ldi	r24, 0xA0	; 160
 168:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_wait>
	i2c_write(0x00);									//pocetna adresa = 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_write>
	i2c_start_wait( atmel24C08A_adr_x0 + I2C_READ);    //citanje
 172:	81 ea       	ldi	r24, 0xA1	; 161
 174:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_wait>
	
	/* ispis na terrminal citavog sadrzaja. 64*16 = 1024. Tako ispisujem jer je takva interna organizacija memorije u eepromu */
	for(i=0; i<64; i++)		//i<64 za 8Kbit, i<8 za 1Kbit
 178:	c1 2c       	mov	r12, r1
 17a:	d1 2c       	mov	r13, r1
				{
					send_str("     ");  //5 razmaka
					for(j=0; j<16; j++)		
					{
						send_str("#");
						sprintf(bafer, "%2d", j);
 17c:	0f 2e       	mov	r0, r31
 17e:	f8 e0       	ldi	r31, 0x08	; 8
 180:	af 2e       	mov	r10, r31
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	bf 2e       	mov	r11, r31
 186:	f0 2d       	mov	r31, r0
 188:	03 e1       	ldi	r16, 0x13	; 19
 18a:	11 e0       	ldi	r17, 0x01	; 1
 18c:	80 2e       	mov	r8, r16
 18e:	91 2e       	mov	r9, r17
			ret = i2c_readAck();                    // read one byte, request more data from device
			
				
			/* slanje preko uarta */
			//itoa( ret , bafer, 10);
			sprintf(bafer, "%3d", ret);   //presao sam igricu. moze i sprintf umesto itoa. %3d znaci da sam formatirao ispis na minimum 3 mesta, za pregledniji ispis.
 190:	0f 2e       	mov	r0, r31
 192:	fe e0       	ldi	r31, 0x0E	; 14
 194:	ef 2e       	mov	r14, r31
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	ff 2e       	mov	r15, r31
 19a:	f0 2d       	mov	r31, r0
	
	/* ispis na terrminal citavog sadrzaja. 64*16 = 1024. Tako ispisujem jer je takva interna organizacija memorije u eepromu */
	for(i=0; i<64; i++)		//i<64 za 8Kbit, i<8 za 1Kbit
	{
		
				if(i==0)		//istampa redne brojeve kolona
 19c:	c1 14       	cp	r12, r1
 19e:	d1 04       	cpc	r13, r1
 1a0:	41 f5       	brne	.+80     	; 0x1f2 <eeprom_read_all_print+0xa4>
				{
					send_str("     ");  //5 razmaka
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>
					for(j=0; j<16; j++)		
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
					{
						send_str("#");
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>
						sprintf(bafer, "%2d", j);
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	bf 92       	push	r11
 1bc:	af 92       	push	r10
 1be:	1f 93       	push	r17
 1c0:	0f 93       	push	r16
 1c2:	0e 94 ae 01 	call	0x35c	; 0x35c <sprintf>
						send_str(bafer);
 1c6:	88 2d       	mov	r24, r8
 1c8:	99 2d       	mov	r25, r9
 1ca:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>
						
						
						send_str("  ");  //razmak
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>
	{
		
				if(i==0)		//istampa redne brojeve kolona
				{
					send_str("     ");  //5 razmaka
					for(j=0; j<16; j++)		
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	c0 31       	cpi	r28, 0x10	; 16
 1e6:	d1 05       	cpc	r29, r1
 1e8:	11 f7       	brne	.-60     	; 0x1ae <eeprom_read_all_print+0x60>
						send_str(bafer);
						
						
						send_str("  ");  //razmak
					}
					send_str("\n");  //novi red
 1ea:	8c e0       	ldi	r24, 0x0C	; 12
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>
				}
				
		//stampa redne brojeve vrsta
		send_str("#");
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>
		sprintf(bafer, "%2d", i);
 1fa:	df 92       	push	r13
 1fc:	cf 92       	push	r12
 1fe:	bf 92       	push	r11
 200:	af 92       	push	r10
 202:	1f 93       	push	r17
 204:	0f 93       	push	r16
 206:	0e 94 ae 01 	call	0x35c	; 0x35c <sprintf>
		send_str(bafer);
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>
		send_str("  ");  //razmak		
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	c0 e1       	ldi	r28, 0x10	; 16
 226:	d0 e0       	ldi	r29, 0x00	; 0
		
		
		for(j=0; j<16; j++)
		{
			ret = i2c_readAck();                    // read one byte, request more data from device
 228:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_readAck>
 22c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ret>
			
				
			/* slanje preko uarta */
			//itoa( ret , bafer, 10);
			sprintf(bafer, "%3d", ret);   //presao sam igricu. moze i sprintf umesto itoa. %3d znaci da sam formatirao ispis na minimum 3 mesta, za pregledniji ispis.
 230:	1f 92       	push	r1
 232:	8f 93       	push	r24
 234:	ff 92       	push	r15
 236:	ef 92       	push	r14
 238:	1f 93       	push	r17
 23a:	0f 93       	push	r16
 23c:	0e 94 ae 01 	call	0x35c	; 0x35c <sprintf>
			send_str(bafer);
 240:	88 2d       	mov	r24, r8
 242:	99 2d       	mov	r25, r9
 244:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>

			send_str("  ");  //razmak
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>
 250:	21 97       	sbiw	r28, 0x01	; 1
		sprintf(bafer, "%2d", i);
		send_str(bafer);
		send_str("  ");  //razmak		
		
		
		for(j=0; j<16; j++)
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	21 f7       	brne	.-56     	; 0x228 <eeprom_read_all_print+0xda>
			send_str(bafer);

			send_str("  ");  //razmak
		}
		
		send_str("\n");  //novi red
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 9b 01 	call	0x336	; 0x336 <send_str>
	i2c_start_wait( atmel24C08A_adr_x0 + I2C_WRITE);
	i2c_write(0x00);									//pocetna adresa = 0
	i2c_start_wait( atmel24C08A_adr_x0 + I2C_READ);    //citanje
	
	/* ispis na terrminal citavog sadrzaja. 64*16 = 1024. Tako ispisujem jer je takva interna organizacija memorije u eepromu */
	for(i=0; i<64; i++)		//i<64 za 8Kbit, i<8 za 1Kbit
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	c8 1a       	sub	r12, r24
 26c:	d8 0a       	sbc	r13, r24
 26e:	80 e4       	ldi	r24, 0x40	; 64
 270:	c8 16       	cp	r12, r24
 272:	d1 04       	cpc	r13, r1
 274:	09 f0       	breq	.+2      	; 0x278 <eeprom_read_all_print+0x12a>
 276:	92 cf       	rjmp	.-220    	; 0x19c <eeprom_read_all_print+0x4e>
		}
		
		send_str("\n");  //novi red
	}
	
	i2c_stop();
 278:	0e 94 81 00 	call	0x102	; 0x102 <i2c_stop>
	
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	df 90       	pop	r13
 28a:	cf 90       	pop	r12
 28c:	bf 90       	pop	r11
 28e:	af 90       	pop	r10
 290:	9f 90       	pop	r9
 292:	8f 90       	pop	r8
 294:	08 95       	ret

00000296 <main>:

int main(void)
{
	
	
    i2c_init();                                // init I2C interface
 296:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	uart_init();
 29a:	0e 94 8b 01 	call	0x316	; 0x316 <uart_init>
	sei();
 29e:	78 94       	sei
    
	//PB5 = dig13 = led - izlaz
	DDRB |= 1<<PORTB5;
 2a0:	25 9a       	sbi	0x04, 5	; 4
	{
		eeprom_write_byte(atmel24C08A_adr_x0, i+880, tajna_poruka[i]);
	}
	*/
	
	eeprom_read_all_print();  //procitaj ceo eeprom i odstampaj preko uarta
 2a2:	0e 94 a7 00 	call	0x14e	; 0x14e <eeprom_read_all_print>
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <main+0x10>

000002a8 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
	poslato=0;
 2b2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <poslato>
}
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <__vector_18>:

ISR(USART_RX_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	8f 93       	push	r24
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	input_char=UDR0;
 2d0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 2d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 2dc:	88 30       	cpi	r24, 0x08	; 8
 2de:	98 f4       	brcc	.+38     	; 0x306 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 2e0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <input_char>
 2ea:	eb 5d       	subi	r30, 0xDB	; 219
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	80 83       	st	Z, r24
		buff_size++;
 2f0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		input_buffer[buff_size]='\0';
 2fa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	eb 5d       	subi	r30, 0xDB	; 219
 302:	fe 4f       	sbci	r31, 0xFE	; 254
 304:	10 82       	st	Z, r1
	}
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	8f 91       	pop	r24
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <uart_init>:

void uart_init()
{
	UCSR0A = 0b10;		//dupla brzina slanja
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 31c:	88 ed       	ldi	r24, 0xD8	; 216
 31e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 207;	//Baud 9600 bps
 328:	8f ec       	ldi	r24, 0xCF	; 207
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 330:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 334:	08 95       	ret

00000336 <send_str>:
}

void send_str(unsigned char *str)
{
 336:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 338:	90 81       	ld	r25, Z
 33a:	99 23       	and	r25, r25
 33c:	71 f0       	breq	.+28     	; 0x35a <send_str+0x24>
 33e:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0=*str;
 340:	a6 ec       	ldi	r26, 0xC6	; 198
 342:	b0 e0       	ldi	r27, 0x00	; 0
		poslato=1;
 344:	81 e0       	ldi	r24, 0x01	; 1
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
	{
		UDR0=*str;
 346:	9c 93       	st	X, r25
		poslato=1;
 348:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <poslato>
		while (poslato);
 34c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <poslato>
 350:	91 11       	cpse	r25, r1
 352:	fc cf       	rjmp	.-8      	; 0x34c <send_str+0x16>
void send_str(unsigned char *str)
{
	//funkcija za slanje stringova
	
	
	while (*str!='\0')
 354:	91 91       	ld	r25, Z+
 356:	91 11       	cpse	r25, r1
 358:	f6 cf       	rjmp	.-20     	; 0x346 <send_str+0x10>
 35a:	08 95       	ret

0000035c <sprintf>:
 35c:	ae e0       	ldi	r26, 0x0E	; 14
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e4 eb       	ldi	r30, 0xB4	; 180
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__prologue_saves__+0x1c>
 368:	0d 89       	ldd	r16, Y+21	; 0x15
 36a:	1e 89       	ldd	r17, Y+22	; 0x16
 36c:	86 e0       	ldi	r24, 0x06	; 6
 36e:	8c 83       	std	Y+4, r24	; 0x04
 370:	1a 83       	std	Y+2, r17	; 0x02
 372:	09 83       	std	Y+1, r16	; 0x01
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	9f e7       	ldi	r25, 0x7F	; 127
 378:	9e 83       	std	Y+6, r25	; 0x06
 37a:	8d 83       	std	Y+5, r24	; 0x05
 37c:	ae 01       	movw	r20, r28
 37e:	47 5e       	subi	r20, 0xE7	; 231
 380:	5f 4f       	sbci	r21, 0xFF	; 255
 382:	6f 89       	ldd	r22, Y+23	; 0x17
 384:	78 8d       	ldd	r23, Y+24	; 0x18
 386:	ce 01       	movw	r24, r28
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <vfprintf>
 38e:	ef 81       	ldd	r30, Y+7	; 0x07
 390:	f8 85       	ldd	r31, Y+8	; 0x08
 392:	e0 0f       	add	r30, r16
 394:	f1 1f       	adc	r31, r17
 396:	10 82       	st	Z, r1
 398:	2e 96       	adiw	r28, 0x0e	; 14
 39a:	e4 e0       	ldi	r30, 0x04	; 4
 39c:	0c 94 8b 04 	jmp	0x916	; 0x916 <__stack+0x17>

000003a0 <vfprintf>:
 3a0:	ab e0       	ldi	r26, 0x0B	; 11
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	e6 ed       	ldi	r30, 0xD6	; 214
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__prologue_saves__>
 3ac:	6c 01       	movw	r12, r24
 3ae:	7b 01       	movw	r14, r22
 3b0:	8a 01       	movw	r16, r20
 3b2:	fc 01       	movw	r30, r24
 3b4:	17 82       	std	Z+7, r1	; 0x07
 3b6:	16 82       	std	Z+6, r1	; 0x06
 3b8:	83 81       	ldd	r24, Z+3	; 0x03
 3ba:	81 ff       	sbrs	r24, 1
 3bc:	cc c1       	rjmp	.+920    	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	3c 01       	movw	r6, r24
 3c4:	f6 01       	movw	r30, r12
 3c6:	93 81       	ldd	r25, Z+3	; 0x03
 3c8:	f7 01       	movw	r30, r14
 3ca:	93 fd       	sbrc	r25, 3
 3cc:	85 91       	lpm	r24, Z+
 3ce:	93 ff       	sbrs	r25, 3
 3d0:	81 91       	ld	r24, Z+
 3d2:	7f 01       	movw	r14, r30
 3d4:	88 23       	and	r24, r24
 3d6:	09 f4       	brne	.+2      	; 0x3da <vfprintf+0x3a>
 3d8:	ba c1       	rjmp	.+884    	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 3da:	85 32       	cpi	r24, 0x25	; 37
 3dc:	39 f4       	brne	.+14     	; 0x3ec <vfprintf+0x4c>
 3de:	93 fd       	sbrc	r25, 3
 3e0:	85 91       	lpm	r24, Z+
 3e2:	93 ff       	sbrs	r25, 3
 3e4:	81 91       	ld	r24, Z+
 3e6:	7f 01       	movw	r14, r30
 3e8:	85 32       	cpi	r24, 0x25	; 37
 3ea:	29 f4       	brne	.+10     	; 0x3f6 <vfprintf+0x56>
 3ec:	b6 01       	movw	r22, r12
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 3f4:	e7 cf       	rjmp	.-50     	; 0x3c4 <vfprintf+0x24>
 3f6:	91 2c       	mov	r9, r1
 3f8:	21 2c       	mov	r2, r1
 3fa:	31 2c       	mov	r3, r1
 3fc:	ff e1       	ldi	r31, 0x1F	; 31
 3fe:	f3 15       	cp	r31, r3
 400:	d8 f0       	brcs	.+54     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 402:	8b 32       	cpi	r24, 0x2B	; 43
 404:	79 f0       	breq	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 406:	38 f4       	brcc	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 408:	80 32       	cpi	r24, 0x20	; 32
 40a:	79 f0       	breq	.+30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 40c:	83 32       	cpi	r24, 0x23	; 35
 40e:	a1 f4       	brne	.+40     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 410:	23 2d       	mov	r18, r3
 412:	20 61       	ori	r18, 0x10	; 16
 414:	1d c0       	rjmp	.+58     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 416:	8d 32       	cpi	r24, 0x2D	; 45
 418:	61 f0       	breq	.+24     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 41a:	80 33       	cpi	r24, 0x30	; 48
 41c:	69 f4       	brne	.+26     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 41e:	23 2d       	mov	r18, r3
 420:	21 60       	ori	r18, 0x01	; 1
 422:	16 c0       	rjmp	.+44     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 424:	83 2d       	mov	r24, r3
 426:	82 60       	ori	r24, 0x02	; 2
 428:	38 2e       	mov	r3, r24
 42a:	e3 2d       	mov	r30, r3
 42c:	e4 60       	ori	r30, 0x04	; 4
 42e:	3e 2e       	mov	r3, r30
 430:	2a c0       	rjmp	.+84     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 432:	f3 2d       	mov	r31, r3
 434:	f8 60       	ori	r31, 0x08	; 8
 436:	1d c0       	rjmp	.+58     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 438:	37 fc       	sbrc	r3, 7
 43a:	2d c0       	rjmp	.+90     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 43c:	20 ed       	ldi	r18, 0xD0	; 208
 43e:	28 0f       	add	r18, r24
 440:	2a 30       	cpi	r18, 0x0A	; 10
 442:	40 f0       	brcs	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 444:	8e 32       	cpi	r24, 0x2E	; 46
 446:	b9 f4       	brne	.+46     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 448:	36 fc       	sbrc	r3, 6
 44a:	81 c1       	rjmp	.+770    	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 44c:	23 2d       	mov	r18, r3
 44e:	20 64       	ori	r18, 0x40	; 64
 450:	32 2e       	mov	r3, r18
 452:	19 c0       	rjmp	.+50     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 454:	36 fe       	sbrs	r3, 6
 456:	06 c0       	rjmp	.+12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 458:	8a e0       	ldi	r24, 0x0A	; 10
 45a:	98 9e       	mul	r9, r24
 45c:	20 0d       	add	r18, r0
 45e:	11 24       	eor	r1, r1
 460:	92 2e       	mov	r9, r18
 462:	11 c0       	rjmp	.+34     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 464:	ea e0       	ldi	r30, 0x0A	; 10
 466:	2e 9e       	mul	r2, r30
 468:	20 0d       	add	r18, r0
 46a:	11 24       	eor	r1, r1
 46c:	22 2e       	mov	r2, r18
 46e:	f3 2d       	mov	r31, r3
 470:	f0 62       	ori	r31, 0x20	; 32
 472:	3f 2e       	mov	r3, r31
 474:	08 c0       	rjmp	.+16     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 476:	8c 36       	cpi	r24, 0x6C	; 108
 478:	21 f4       	brne	.+8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 47a:	83 2d       	mov	r24, r3
 47c:	80 68       	ori	r24, 0x80	; 128
 47e:	38 2e       	mov	r3, r24
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	88 36       	cpi	r24, 0x68	; 104
 484:	41 f4       	brne	.+16     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 486:	f7 01       	movw	r30, r14
 488:	93 fd       	sbrc	r25, 3
 48a:	85 91       	lpm	r24, Z+
 48c:	93 ff       	sbrs	r25, 3
 48e:	81 91       	ld	r24, Z+
 490:	7f 01       	movw	r14, r30
 492:	81 11       	cpse	r24, r1
 494:	b3 cf       	rjmp	.-154    	; 0x3fc <vfprintf+0x5c>
 496:	98 2f       	mov	r25, r24
 498:	9f 7d       	andi	r25, 0xDF	; 223
 49a:	95 54       	subi	r25, 0x45	; 69
 49c:	93 30       	cpi	r25, 0x03	; 3
 49e:	28 f4       	brcc	.+10     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a0:	0c 5f       	subi	r16, 0xFC	; 252
 4a2:	1f 4f       	sbci	r17, 0xFF	; 255
 4a4:	9f e3       	ldi	r25, 0x3F	; 63
 4a6:	99 83       	std	Y+1, r25	; 0x01
 4a8:	0d c0       	rjmp	.+26     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4aa:	83 36       	cpi	r24, 0x63	; 99
 4ac:	31 f0       	breq	.+12     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4ae:	83 37       	cpi	r24, 0x73	; 115
 4b0:	71 f0       	breq	.+28     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4b2:	83 35       	cpi	r24, 0x53	; 83
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b6:	59 c0       	rjmp	.+178    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 4b8:	21 c0       	rjmp	.+66     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4ba:	f8 01       	movw	r30, r16
 4bc:	80 81       	ld	r24, Z
 4be:	89 83       	std	Y+1, r24	; 0x01
 4c0:	0e 5f       	subi	r16, 0xFE	; 254
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	88 24       	eor	r8, r8
 4c6:	83 94       	inc	r8
 4c8:	91 2c       	mov	r9, r1
 4ca:	53 01       	movw	r10, r6
 4cc:	13 c0       	rjmp	.+38     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4ce:	28 01       	movw	r4, r16
 4d0:	f2 e0       	ldi	r31, 0x02	; 2
 4d2:	4f 0e       	add	r4, r31
 4d4:	51 1c       	adc	r5, r1
 4d6:	f8 01       	movw	r30, r16
 4d8:	a0 80       	ld	r10, Z
 4da:	b1 80       	ldd	r11, Z+1	; 0x01
 4dc:	36 fe       	sbrs	r3, 6
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e0:	69 2d       	mov	r22, r9
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e6:	6f ef       	ldi	r22, 0xFF	; 255
 4e8:	7f ef       	ldi	r23, 0xFF	; 255
 4ea:	c5 01       	movw	r24, r10
 4ec:	0e 94 bc 03 	call	0x778	; 0x778 <strnlen>
 4f0:	4c 01       	movw	r8, r24
 4f2:	82 01       	movw	r16, r4
 4f4:	f3 2d       	mov	r31, r3
 4f6:	ff 77       	andi	r31, 0x7F	; 127
 4f8:	3f 2e       	mov	r3, r31
 4fa:	16 c0       	rjmp	.+44     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 4fc:	28 01       	movw	r4, r16
 4fe:	22 e0       	ldi	r18, 0x02	; 2
 500:	42 0e       	add	r4, r18
 502:	51 1c       	adc	r5, r1
 504:	f8 01       	movw	r30, r16
 506:	a0 80       	ld	r10, Z
 508:	b1 80       	ldd	r11, Z+1	; 0x01
 50a:	36 fe       	sbrs	r3, 6
 50c:	03 c0       	rjmp	.+6      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 50e:	69 2d       	mov	r22, r9
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 514:	6f ef       	ldi	r22, 0xFF	; 255
 516:	7f ef       	ldi	r23, 0xFF	; 255
 518:	c5 01       	movw	r24, r10
 51a:	0e 94 b1 03 	call	0x762	; 0x762 <strnlen_P>
 51e:	4c 01       	movw	r8, r24
 520:	f3 2d       	mov	r31, r3
 522:	f0 68       	ori	r31, 0x80	; 128
 524:	3f 2e       	mov	r3, r31
 526:	82 01       	movw	r16, r4
 528:	33 fc       	sbrc	r3, 3
 52a:	1b c0       	rjmp	.+54     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 52c:	82 2d       	mov	r24, r2
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	88 16       	cp	r8, r24
 532:	99 06       	cpc	r9, r25
 534:	b0 f4       	brcc	.+44     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 536:	b6 01       	movw	r22, r12
 538:	80 e2       	ldi	r24, 0x20	; 32
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 540:	2a 94       	dec	r2
 542:	f4 cf       	rjmp	.-24     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 544:	f5 01       	movw	r30, r10
 546:	37 fc       	sbrc	r3, 7
 548:	85 91       	lpm	r24, Z+
 54a:	37 fe       	sbrs	r3, 7
 54c:	81 91       	ld	r24, Z+
 54e:	5f 01       	movw	r10, r30
 550:	b6 01       	movw	r22, r12
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 558:	21 10       	cpse	r2, r1
 55a:	2a 94       	dec	r2
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	82 1a       	sub	r8, r18
 560:	91 08       	sbc	r9, r1
 562:	81 14       	cp	r8, r1
 564:	91 04       	cpc	r9, r1
 566:	71 f7       	brne	.-36     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 568:	e8 c0       	rjmp	.+464    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
 56a:	84 36       	cpi	r24, 0x64	; 100
 56c:	11 f0       	breq	.+4      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 56e:	89 36       	cpi	r24, 0x69	; 105
 570:	41 f5       	brne	.+80     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 572:	f8 01       	movw	r30, r16
 574:	37 fe       	sbrs	r3, 7
 576:	07 c0       	rjmp	.+14     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 578:	60 81       	ld	r22, Z
 57a:	71 81       	ldd	r23, Z+1	; 0x01
 57c:	82 81       	ldd	r24, Z+2	; 0x02
 57e:	93 81       	ldd	r25, Z+3	; 0x03
 580:	0c 5f       	subi	r16, 0xFC	; 252
 582:	1f 4f       	sbci	r17, 0xFF	; 255
 584:	08 c0       	rjmp	.+16     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 586:	60 81       	ld	r22, Z
 588:	71 81       	ldd	r23, Z+1	; 0x01
 58a:	07 2e       	mov	r0, r23
 58c:	00 0c       	add	r0, r0
 58e:	88 0b       	sbc	r24, r24
 590:	99 0b       	sbc	r25, r25
 592:	0e 5f       	subi	r16, 0xFE	; 254
 594:	1f 4f       	sbci	r17, 0xFF	; 255
 596:	f3 2d       	mov	r31, r3
 598:	ff 76       	andi	r31, 0x6F	; 111
 59a:	3f 2e       	mov	r3, r31
 59c:	97 ff       	sbrs	r25, 7
 59e:	09 c0       	rjmp	.+18     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5a0:	90 95       	com	r25
 5a2:	80 95       	com	r24
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	f0 68       	ori	r31, 0x80	; 128
 5b0:	3f 2e       	mov	r3, r31
 5b2:	2a e0       	ldi	r18, 0x0A	; 10
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	a3 01       	movw	r20, r6
 5b8:	0e 94 03 04 	call	0x806	; 0x806 <__ultoa_invert>
 5bc:	88 2e       	mov	r8, r24
 5be:	86 18       	sub	r8, r6
 5c0:	45 c0       	rjmp	.+138    	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 5c2:	85 37       	cpi	r24, 0x75	; 117
 5c4:	31 f4       	brne	.+12     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5c6:	23 2d       	mov	r18, r3
 5c8:	2f 7e       	andi	r18, 0xEF	; 239
 5ca:	b2 2e       	mov	r11, r18
 5cc:	2a e0       	ldi	r18, 0x0A	; 10
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	25 c0       	rjmp	.+74     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 5d2:	93 2d       	mov	r25, r3
 5d4:	99 7f       	andi	r25, 0xF9	; 249
 5d6:	b9 2e       	mov	r11, r25
 5d8:	8f 36       	cpi	r24, 0x6F	; 111
 5da:	c1 f0       	breq	.+48     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 5dc:	18 f4       	brcc	.+6      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5de:	88 35       	cpi	r24, 0x58	; 88
 5e0:	79 f0       	breq	.+30     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5e2:	b5 c0       	rjmp	.+362    	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 5e4:	80 37       	cpi	r24, 0x70	; 112
 5e6:	19 f0       	breq	.+6      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5e8:	88 37       	cpi	r24, 0x78	; 120
 5ea:	21 f0       	breq	.+8      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5ec:	b0 c0       	rjmp	.+352    	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 5ee:	e9 2f       	mov	r30, r25
 5f0:	e0 61       	ori	r30, 0x10	; 16
 5f2:	be 2e       	mov	r11, r30
 5f4:	b4 fe       	sbrs	r11, 4
 5f6:	0d c0       	rjmp	.+26     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 5f8:	fb 2d       	mov	r31, r11
 5fa:	f4 60       	ori	r31, 0x04	; 4
 5fc:	bf 2e       	mov	r11, r31
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 600:	34 fe       	sbrs	r3, 4
 602:	0a c0       	rjmp	.+20     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 604:	29 2f       	mov	r18, r25
 606:	26 60       	ori	r18, 0x06	; 6
 608:	b2 2e       	mov	r11, r18
 60a:	06 c0       	rjmp	.+12     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 60c:	28 e0       	ldi	r18, 0x08	; 8
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	05 c0       	rjmp	.+10     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 612:	20 e1       	ldi	r18, 0x10	; 16
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 618:	20 e1       	ldi	r18, 0x10	; 16
 61a:	32 e0       	ldi	r19, 0x02	; 2
 61c:	f8 01       	movw	r30, r16
 61e:	b7 fe       	sbrs	r11, 7
 620:	07 c0       	rjmp	.+14     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 622:	60 81       	ld	r22, Z
 624:	71 81       	ldd	r23, Z+1	; 0x01
 626:	82 81       	ldd	r24, Z+2	; 0x02
 628:	93 81       	ldd	r25, Z+3	; 0x03
 62a:	0c 5f       	subi	r16, 0xFC	; 252
 62c:	1f 4f       	sbci	r17, 0xFF	; 255
 62e:	06 c0       	rjmp	.+12     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 630:	60 81       	ld	r22, Z
 632:	71 81       	ldd	r23, Z+1	; 0x01
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 5f       	subi	r16, 0xFE	; 254
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	a3 01       	movw	r20, r6
 63e:	0e 94 03 04 	call	0x806	; 0x806 <__ultoa_invert>
 642:	88 2e       	mov	r8, r24
 644:	86 18       	sub	r8, r6
 646:	fb 2d       	mov	r31, r11
 648:	ff 77       	andi	r31, 0x7F	; 127
 64a:	3f 2e       	mov	r3, r31
 64c:	36 fe       	sbrs	r3, 6
 64e:	0d c0       	rjmp	.+26     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 650:	23 2d       	mov	r18, r3
 652:	2e 7f       	andi	r18, 0xFE	; 254
 654:	a2 2e       	mov	r10, r18
 656:	89 14       	cp	r8, r9
 658:	58 f4       	brcc	.+22     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 65a:	34 fe       	sbrs	r3, 4
 65c:	0b c0       	rjmp	.+22     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 65e:	32 fc       	sbrc	r3, 2
 660:	09 c0       	rjmp	.+18     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 662:	83 2d       	mov	r24, r3
 664:	8e 7e       	andi	r24, 0xEE	; 238
 666:	a8 2e       	mov	r10, r24
 668:	05 c0       	rjmp	.+10     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 66a:	b8 2c       	mov	r11, r8
 66c:	a3 2c       	mov	r10, r3
 66e:	03 c0       	rjmp	.+6      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 670:	b8 2c       	mov	r11, r8
 672:	01 c0       	rjmp	.+2      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 674:	b9 2c       	mov	r11, r9
 676:	a4 fe       	sbrs	r10, 4
 678:	0f c0       	rjmp	.+30     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 67a:	fe 01       	movw	r30, r28
 67c:	e8 0d       	add	r30, r8
 67e:	f1 1d       	adc	r31, r1
 680:	80 81       	ld	r24, Z
 682:	80 33       	cpi	r24, 0x30	; 48
 684:	21 f4       	brne	.+8      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 686:	9a 2d       	mov	r25, r10
 688:	99 7e       	andi	r25, 0xE9	; 233
 68a:	a9 2e       	mov	r10, r25
 68c:	09 c0       	rjmp	.+18     	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 68e:	a2 fe       	sbrs	r10, 2
 690:	06 c0       	rjmp	.+12     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 692:	b3 94       	inc	r11
 694:	b3 94       	inc	r11
 696:	04 c0       	rjmp	.+8      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 698:	8a 2d       	mov	r24, r10
 69a:	86 78       	andi	r24, 0x86	; 134
 69c:	09 f0       	breq	.+2      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 69e:	b3 94       	inc	r11
 6a0:	a3 fc       	sbrc	r10, 3
 6a2:	11 c0       	rjmp	.+34     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6a4:	a0 fe       	sbrs	r10, 0
 6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6a8:	b2 14       	cp	r11, r2
 6aa:	88 f4       	brcc	.+34     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6ac:	28 0c       	add	r2, r8
 6ae:	92 2c       	mov	r9, r2
 6b0:	9b 18       	sub	r9, r11
 6b2:	0e c0       	rjmp	.+28     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6b4:	b2 14       	cp	r11, r2
 6b6:	60 f4       	brcc	.+24     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6b8:	b6 01       	movw	r22, r12
 6ba:	80 e2       	ldi	r24, 0x20	; 32
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 6c2:	b3 94       	inc	r11
 6c4:	f7 cf       	rjmp	.-18     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6c6:	b2 14       	cp	r11, r2
 6c8:	18 f4       	brcc	.+6      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6ca:	2b 18       	sub	r2, r11
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6ce:	98 2c       	mov	r9, r8
 6d0:	21 2c       	mov	r2, r1
 6d2:	a4 fe       	sbrs	r10, 4
 6d4:	10 c0       	rjmp	.+32     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6d6:	b6 01       	movw	r22, r12
 6d8:	80 e3       	ldi	r24, 0x30	; 48
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 6e0:	a2 fe       	sbrs	r10, 2
 6e2:	17 c0       	rjmp	.+46     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6e4:	a1 fc       	sbrc	r10, 1
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6e8:	88 e7       	ldi	r24, 0x78	; 120
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6ee:	88 e5       	ldi	r24, 0x58	; 88
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	b6 01       	movw	r22, r12
 6f4:	0c c0       	rjmp	.+24     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 6f6:	8a 2d       	mov	r24, r10
 6f8:	86 78       	andi	r24, 0x86	; 134
 6fa:	59 f0       	breq	.+22     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fc:	a1 fe       	sbrs	r10, 1
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 700:	8b e2       	ldi	r24, 0x2B	; 43
 702:	01 c0       	rjmp	.+2      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 704:	80 e2       	ldi	r24, 0x20	; 32
 706:	a7 fc       	sbrc	r10, 7
 708:	8d e2       	ldi	r24, 0x2D	; 45
 70a:	b6 01       	movw	r22, r12
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 712:	89 14       	cp	r8, r9
 714:	38 f4       	brcc	.+14     	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 716:	b6 01       	movw	r22, r12
 718:	80 e3       	ldi	r24, 0x30	; 48
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 720:	9a 94       	dec	r9
 722:	f7 cf       	rjmp	.-18     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 724:	8a 94       	dec	r8
 726:	f3 01       	movw	r30, r6
 728:	e8 0d       	add	r30, r8
 72a:	f1 1d       	adc	r31, r1
 72c:	80 81       	ld	r24, Z
 72e:	b6 01       	movw	r22, r12
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 736:	81 10       	cpse	r8, r1
 738:	f5 cf       	rjmp	.-22     	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 73a:	22 20       	and	r2, r2
 73c:	09 f4       	brne	.+2      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 73e:	42 ce       	rjmp	.-892    	; 0x3c4 <vfprintf+0x24>
 740:	b6 01       	movw	r22, r12
 742:	80 e2       	ldi	r24, 0x20	; 32
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 74a:	2a 94       	dec	r2
 74c:	f6 cf       	rjmp	.-20     	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
 74e:	f6 01       	movw	r30, r12
 750:	86 81       	ldd	r24, Z+6	; 0x06
 752:	97 81       	ldd	r25, Z+7	; 0x07
 754:	02 c0       	rjmp	.+4      	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
 756:	8f ef       	ldi	r24, 0xFF	; 255
 758:	9f ef       	ldi	r25, 0xFF	; 255
 75a:	2b 96       	adiw	r28, 0x0b	; 11
 75c:	e2 e1       	ldi	r30, 0x12	; 18
 75e:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__epilogue_restores__>

00000762 <strnlen_P>:
 762:	fc 01       	movw	r30, r24
 764:	05 90       	lpm	r0, Z+
 766:	61 50       	subi	r22, 0x01	; 1
 768:	70 40       	sbci	r23, 0x00	; 0
 76a:	01 10       	cpse	r0, r1
 76c:	d8 f7       	brcc	.-10     	; 0x764 <strnlen_P+0x2>
 76e:	80 95       	com	r24
 770:	90 95       	com	r25
 772:	8e 0f       	add	r24, r30
 774:	9f 1f       	adc	r25, r31
 776:	08 95       	ret

00000778 <strnlen>:
 778:	fc 01       	movw	r30, r24
 77a:	61 50       	subi	r22, 0x01	; 1
 77c:	70 40       	sbci	r23, 0x00	; 0
 77e:	01 90       	ld	r0, Z+
 780:	01 10       	cpse	r0, r1
 782:	d8 f7       	brcc	.-10     	; 0x77a <strnlen+0x2>
 784:	80 95       	com	r24
 786:	90 95       	com	r25
 788:	8e 0f       	add	r24, r30
 78a:	9f 1f       	adc	r25, r31
 78c:	08 95       	ret

0000078e <fputc>:
 78e:	0f 93       	push	r16
 790:	1f 93       	push	r17
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	fb 01       	movw	r30, r22
 798:	23 81       	ldd	r18, Z+3	; 0x03
 79a:	21 fd       	sbrc	r18, 1
 79c:	03 c0       	rjmp	.+6      	; 0x7a4 <fputc+0x16>
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	9f ef       	ldi	r25, 0xFF	; 255
 7a2:	2c c0       	rjmp	.+88     	; 0x7fc <fputc+0x6e>
 7a4:	22 ff       	sbrs	r18, 2
 7a6:	16 c0       	rjmp	.+44     	; 0x7d4 <fputc+0x46>
 7a8:	46 81       	ldd	r20, Z+6	; 0x06
 7aa:	57 81       	ldd	r21, Z+7	; 0x07
 7ac:	24 81       	ldd	r18, Z+4	; 0x04
 7ae:	35 81       	ldd	r19, Z+5	; 0x05
 7b0:	42 17       	cp	r20, r18
 7b2:	53 07       	cpc	r21, r19
 7b4:	44 f4       	brge	.+16     	; 0x7c6 <fputc+0x38>
 7b6:	a0 81       	ld	r26, Z
 7b8:	b1 81       	ldd	r27, Z+1	; 0x01
 7ba:	9d 01       	movw	r18, r26
 7bc:	2f 5f       	subi	r18, 0xFF	; 255
 7be:	3f 4f       	sbci	r19, 0xFF	; 255
 7c0:	31 83       	std	Z+1, r19	; 0x01
 7c2:	20 83       	st	Z, r18
 7c4:	8c 93       	st	X, r24
 7c6:	26 81       	ldd	r18, Z+6	; 0x06
 7c8:	37 81       	ldd	r19, Z+7	; 0x07
 7ca:	2f 5f       	subi	r18, 0xFF	; 255
 7cc:	3f 4f       	sbci	r19, 0xFF	; 255
 7ce:	37 83       	std	Z+7, r19	; 0x07
 7d0:	26 83       	std	Z+6, r18	; 0x06
 7d2:	14 c0       	rjmp	.+40     	; 0x7fc <fputc+0x6e>
 7d4:	8b 01       	movw	r16, r22
 7d6:	ec 01       	movw	r28, r24
 7d8:	fb 01       	movw	r30, r22
 7da:	00 84       	ldd	r0, Z+8	; 0x08
 7dc:	f1 85       	ldd	r31, Z+9	; 0x09
 7de:	e0 2d       	mov	r30, r0
 7e0:	09 95       	icall
 7e2:	89 2b       	or	r24, r25
 7e4:	e1 f6       	brne	.-72     	; 0x79e <fputc+0x10>
 7e6:	d8 01       	movw	r26, r16
 7e8:	16 96       	adiw	r26, 0x06	; 6
 7ea:	8d 91       	ld	r24, X+
 7ec:	9c 91       	ld	r25, X
 7ee:	17 97       	sbiw	r26, 0x07	; 7
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	17 96       	adiw	r26, 0x07	; 7
 7f4:	9c 93       	st	X, r25
 7f6:	8e 93       	st	-X, r24
 7f8:	16 97       	sbiw	r26, 0x06	; 6
 7fa:	ce 01       	movw	r24, r28
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	08 95       	ret

00000806 <__ultoa_invert>:
 806:	fa 01       	movw	r30, r20
 808:	aa 27       	eor	r26, r26
 80a:	28 30       	cpi	r18, 0x08	; 8
 80c:	51 f1       	breq	.+84     	; 0x862 <__ultoa_invert+0x5c>
 80e:	20 31       	cpi	r18, 0x10	; 16
 810:	81 f1       	breq	.+96     	; 0x872 <__ultoa_invert+0x6c>
 812:	e8 94       	clt
 814:	6f 93       	push	r22
 816:	6e 7f       	andi	r22, 0xFE	; 254
 818:	6e 5f       	subi	r22, 0xFE	; 254
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	af 4f       	sbci	r26, 0xFF	; 255
 822:	b1 e0       	ldi	r27, 0x01	; 1
 824:	3e d0       	rcall	.+124    	; 0x8a2 <__ultoa_invert+0x9c>
 826:	b4 e0       	ldi	r27, 0x04	; 4
 828:	3c d0       	rcall	.+120    	; 0x8a2 <__ultoa_invert+0x9c>
 82a:	67 0f       	add	r22, r23
 82c:	78 1f       	adc	r23, r24
 82e:	89 1f       	adc	r24, r25
 830:	9a 1f       	adc	r25, r26
 832:	a1 1d       	adc	r26, r1
 834:	68 0f       	add	r22, r24
 836:	79 1f       	adc	r23, r25
 838:	8a 1f       	adc	r24, r26
 83a:	91 1d       	adc	r25, r1
 83c:	a1 1d       	adc	r26, r1
 83e:	6a 0f       	add	r22, r26
 840:	71 1d       	adc	r23, r1
 842:	81 1d       	adc	r24, r1
 844:	91 1d       	adc	r25, r1
 846:	a1 1d       	adc	r26, r1
 848:	20 d0       	rcall	.+64     	; 0x88a <__ultoa_invert+0x84>
 84a:	09 f4       	brne	.+2      	; 0x84e <__ultoa_invert+0x48>
 84c:	68 94       	set
 84e:	3f 91       	pop	r19
 850:	2a e0       	ldi	r18, 0x0A	; 10
 852:	26 9f       	mul	r18, r22
 854:	11 24       	eor	r1, r1
 856:	30 19       	sub	r19, r0
 858:	30 5d       	subi	r19, 0xD0	; 208
 85a:	31 93       	st	Z+, r19
 85c:	de f6       	brtc	.-74     	; 0x814 <__ultoa_invert+0xe>
 85e:	cf 01       	movw	r24, r30
 860:	08 95       	ret
 862:	46 2f       	mov	r20, r22
 864:	47 70       	andi	r20, 0x07	; 7
 866:	40 5d       	subi	r20, 0xD0	; 208
 868:	41 93       	st	Z+, r20
 86a:	b3 e0       	ldi	r27, 0x03	; 3
 86c:	0f d0       	rcall	.+30     	; 0x88c <__ultoa_invert+0x86>
 86e:	c9 f7       	brne	.-14     	; 0x862 <__ultoa_invert+0x5c>
 870:	f6 cf       	rjmp	.-20     	; 0x85e <__ultoa_invert+0x58>
 872:	46 2f       	mov	r20, r22
 874:	4f 70       	andi	r20, 0x0F	; 15
 876:	40 5d       	subi	r20, 0xD0	; 208
 878:	4a 33       	cpi	r20, 0x3A	; 58
 87a:	18 f0       	brcs	.+6      	; 0x882 <__ultoa_invert+0x7c>
 87c:	49 5d       	subi	r20, 0xD9	; 217
 87e:	31 fd       	sbrc	r19, 1
 880:	40 52       	subi	r20, 0x20	; 32
 882:	41 93       	st	Z+, r20
 884:	02 d0       	rcall	.+4      	; 0x88a <__ultoa_invert+0x84>
 886:	a9 f7       	brne	.-22     	; 0x872 <__ultoa_invert+0x6c>
 888:	ea cf       	rjmp	.-44     	; 0x85e <__ultoa_invert+0x58>
 88a:	b4 e0       	ldi	r27, 0x04	; 4
 88c:	a6 95       	lsr	r26
 88e:	97 95       	ror	r25
 890:	87 95       	ror	r24
 892:	77 95       	ror	r23
 894:	67 95       	ror	r22
 896:	ba 95       	dec	r27
 898:	c9 f7       	brne	.-14     	; 0x88c <__ultoa_invert+0x86>
 89a:	00 97       	sbiw	r24, 0x00	; 0
 89c:	61 05       	cpc	r22, r1
 89e:	71 05       	cpc	r23, r1
 8a0:	08 95       	ret
 8a2:	9b 01       	movw	r18, r22
 8a4:	ac 01       	movw	r20, r24
 8a6:	0a 2e       	mov	r0, r26
 8a8:	06 94       	lsr	r0
 8aa:	57 95       	ror	r21
 8ac:	47 95       	ror	r20
 8ae:	37 95       	ror	r19
 8b0:	27 95       	ror	r18
 8b2:	ba 95       	dec	r27
 8b4:	c9 f7       	brne	.-14     	; 0x8a8 <__ultoa_invert+0xa2>
 8b6:	62 0f       	add	r22, r18
 8b8:	73 1f       	adc	r23, r19
 8ba:	84 1f       	adc	r24, r20
 8bc:	95 1f       	adc	r25, r21
 8be:	a0 1d       	adc	r26, r0
 8c0:	08 95       	ret

000008c2 <__prologue_saves__>:
 8c2:	2f 92       	push	r2
 8c4:	3f 92       	push	r3
 8c6:	4f 92       	push	r4
 8c8:	5f 92       	push	r5
 8ca:	6f 92       	push	r6
 8cc:	7f 92       	push	r7
 8ce:	8f 92       	push	r8
 8d0:	9f 92       	push	r9
 8d2:	af 92       	push	r10
 8d4:	bf 92       	push	r11
 8d6:	cf 92       	push	r12
 8d8:	df 92       	push	r13
 8da:	ef 92       	push	r14
 8dc:	ff 92       	push	r15
 8de:	0f 93       	push	r16
 8e0:	1f 93       	push	r17
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	cd b7       	in	r28, 0x3d	; 61
 8e8:	de b7       	in	r29, 0x3e	; 62
 8ea:	ca 1b       	sub	r28, r26
 8ec:	db 0b       	sbc	r29, r27
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	f8 94       	cli
 8f2:	de bf       	out	0x3e, r29	; 62
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	cd bf       	out	0x3d, r28	; 61
 8f8:	09 94       	ijmp

000008fa <__epilogue_restores__>:
 8fa:	2a 88       	ldd	r2, Y+18	; 0x12
 8fc:	39 88       	ldd	r3, Y+17	; 0x11
 8fe:	48 88       	ldd	r4, Y+16	; 0x10
 900:	5f 84       	ldd	r5, Y+15	; 0x0f
 902:	6e 84       	ldd	r6, Y+14	; 0x0e
 904:	7d 84       	ldd	r7, Y+13	; 0x0d
 906:	8c 84       	ldd	r8, Y+12	; 0x0c
 908:	9b 84       	ldd	r9, Y+11	; 0x0b
 90a:	aa 84       	ldd	r10, Y+10	; 0x0a
 90c:	b9 84       	ldd	r11, Y+9	; 0x09
 90e:	c8 84       	ldd	r12, Y+8	; 0x08
 910:	df 80       	ldd	r13, Y+7	; 0x07
 912:	ee 80       	ldd	r14, Y+6	; 0x06
 914:	fd 80       	ldd	r15, Y+5	; 0x05
 916:	0c 81       	ldd	r16, Y+4	; 0x04
 918:	1b 81       	ldd	r17, Y+3	; 0x03
 91a:	aa 81       	ldd	r26, Y+2	; 0x02
 91c:	b9 81       	ldd	r27, Y+1	; 0x01
 91e:	ce 0f       	add	r28, r30
 920:	d1 1d       	adc	r29, r1
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	f8 94       	cli
 926:	de bf       	out	0x3e, r29	; 62
 928:	0f be       	out	0x3f, r0	; 63
 92a:	cd bf       	out	0x3d, r28	; 61
 92c:	ed 01       	movw	r28, r26
 92e:	08 95       	ret

00000930 <_exit>:
 930:	f8 94       	cli

00000932 <__stop_program>:
 932:	ff cf       	rjmp	.-2      	; 0x932 <__stop_program>
