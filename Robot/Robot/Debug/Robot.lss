
Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00802000  00001f44  00001fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000146  00802056  00802056  0000202e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002060  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008706  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e8f  00000000  00000000  0000a9b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c1  00000000  00000000  0000e845  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00010108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c13  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001021  00000000  00000000  00014243  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00015264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 01 	jmp	0x212	; 0x212 <__ctors_end>
       4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
       8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
       c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      10:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      14:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      18:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      1c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      20:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      24:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      28:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      2c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      30:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      34:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      38:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__vector_14>
      3c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      44:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      48:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      4c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      50:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      54:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      58:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      5c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      60:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      64:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      68:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      6c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      70:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      74:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      78:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      7c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      80:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      84:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      88:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      8c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      90:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      94:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      98:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      9c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      a0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      a4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      a8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      ac:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      b0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      b4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      b8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      bc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      c0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      c4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      c8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      cc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      d0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      d4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      d8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      dc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      e0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      e4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      e8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      ec:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      f0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      f4:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__vector_61>
      f8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      fc:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_63>
     100:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     104:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     108:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     10c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     110:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     114:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     118:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     11c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     120:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     124:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     128:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     12c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     130:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     134:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__vector_77>
     138:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     13c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     140:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     144:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     148:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     14c:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_83>
     150:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     154:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     158:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     15c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     160:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     164:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     168:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     16c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     170:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     174:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     178:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     17c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     180:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     184:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     188:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     18c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     190:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     194:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     198:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     19c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1a0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1a4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1a8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1ac:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1b0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1b4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1b8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1bc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1c0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1c4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1c8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1cc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1d0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1d4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1d8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1dc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1e0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1e4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1e8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1ec:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1f0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1f4:	05 a8       	ldd	r0, Z+53	; 0x35
     1f6:	4c cd       	rjmp	.-1384   	; 0xfffffc90 <__eeprom_end+0xff7efc90>
     1f8:	b2 d4       	rcall	.+2404   	; 0xb5e <robot_velocity_control+0x212>
     1fa:	4e b9       	out	0x0e, r20	; 14
     1fc:	38 36       	cpi	r19, 0x68	; 104
     1fe:	a9 02       	muls	r26, r25
     200:	0c 50       	subi	r16, 0x0C	; 12
     202:	b9 91       	ld	r27, Y+
     204:	86 88       	ldd	r8, Z+22	; 0x16
     206:	08 3c       	cpi	r16, 0xC8	; 200
     208:	a6 aa       	std	Z+54, r10	; 0x36
     20a:	aa 2a       	or	r10, r26
     20c:	be 00       	.word	0x00be	; ????
     20e:	00 00       	nop
     210:	80 3f       	cpi	r24, 0xF0	; 240

00000212 <__ctors_end>:
     212:	11 24       	eor	r1, r1
     214:	1f be       	out	0x3f, r1	; 63
     216:	cf ef       	ldi	r28, 0xFF	; 255
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	df e3       	ldi	r29, 0x3F	; 63
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0c bf       	out	0x3c, r16	; 60
     222:	18 be       	out	0x38, r1	; 56
     224:	19 be       	out	0x39, r1	; 57
     226:	1a be       	out	0x3a, r1	; 58
     228:	1b be       	out	0x3b, r1	; 59

0000022a <__do_copy_data>:
     22a:	10 e2       	ldi	r17, 0x20	; 32
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b0 e2       	ldi	r27, 0x20	; 32
     230:	e4 e4       	ldi	r30, 0x44	; 68
     232:	ff e1       	ldi	r31, 0x1F	; 31
     234:	00 e0       	ldi	r16, 0x00	; 0
     236:	0b bf       	out	0x3b, r16	; 59
     238:	02 c0       	rjmp	.+4      	; 0x23e <__do_copy_data+0x14>
     23a:	07 90       	elpm	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	a6 35       	cpi	r26, 0x56	; 86
     240:	b1 07       	cpc	r27, r17
     242:	d9 f7       	brne	.-10     	; 0x23a <__do_copy_data+0x10>
     244:	1b be       	out	0x3b, r1	; 59

00000246 <__do_clear_bss>:
     246:	21 e2       	ldi	r18, 0x21	; 33
     248:	a6 e5       	ldi	r26, 0x56	; 86
     24a:	b0 e2       	ldi	r27, 0x20	; 32
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	ac 39       	cpi	r26, 0x9C	; 156
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 40 01 	call	0x280	; 0x280 <main>
     25a:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <_exit>

0000025e <__bad_interrupt>:
     25e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000262 <enable_interrupts>:


void enable_interrupts()
{
	//XMega128A
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// Omoguci HIGH level prekida
     262:	e0 ea       	ldi	r30, 0xA0	; 160
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	82 81       	ldd	r24, Z+2	; 0x02
     268:	84 60       	ori	r24, 0x04	; 4
     26a:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// Omoguci MEDIUM level prekida
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	82 60       	ori	r24, 0x02	; 2
     270:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// Omoguci LOW level prekida
     272:	82 81       	ldd	r24, Z+2	; 0x02
     274:	81 60       	ori	r24, 0x01	; 1
     276:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_RREN_bm;		// Pokreni Round Robin algoritam
     278:	82 81       	ldd	r24, Z+2	; 0x02
     27a:	80 68       	ori	r24, 0x80	; 128
     27c:	82 83       	std	Z+2, r24	; 0x02
     27e:	08 95       	ret

00000280 <main>:
}

int main(void)
{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	6e 97       	sbiw	r28, 0x1e	; 30
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	de bf       	out	0x3e, r29	; 62
	char message[30];
	unsigned sekunde = 0;
	init_timer();
     28e:	0e 94 83 0b 	call	0x1706	; 0x1706 <init_timer>
	init_uart();
     292:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <init_uart>
	init_qdec();
     296:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <init_qdec>
	init_PWM();
     29a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <init_PWM>
	init_FSM();
     29e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <init_FSM>
	set_robot_control_gains();
     2a2:	0e 94 30 02 	call	0x460	; 0x460 <set_robot_control_gains>
	enable_interrupts();
     2a6:	0e 94 31 01 	call	0x262	; 0x262 <enable_interrupts>
	
	PORT_SetPinsAsInput(&PORTB, 0xFF);
     2aa:	1f ef       	ldi	r17, 0xFF	; 255
     2ac:	10 93 22 06 	sts	0x0622, r17	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
	PORT_ConfigurePins(&PORTB, 0xFF, false, false,  PORT_OPC_PULLDOWN_gc, PORT_ISC_RISING_gc);
     2b0:	ee 24       	eor	r14, r14
     2b2:	e3 94       	inc	r14
     2b4:	00 e1       	ldi	r16, 0x10	; 16
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	6f ef       	ldi	r22, 0xFF	; 255
     2bc:	80 e2       	ldi	r24, 0x20	; 32
     2be:	96 e0       	ldi	r25, 0x06	; 6
     2c0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <PORT_ConfigurePins>
													//totem pull down zbog SICK senzora; kod milutina je bilo pull up zbog nagaznih senzora-tastera
													//rastuca ivica  PORT_OPC_PULLDOWN_gc
													
	PORT_SetPinsAsOutput(&PORTC, 0xFF);	//za proveru okidanja tajmera-1ms na osciloskopu
     2c4:	10 93 41 06 	sts	0x0641, r17	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
													
													
	sei();
     2c8:	78 94       	sei

    while(1)
    {
	   add_event(EVENT_CINC);		//zeznem ga
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 3a 09 	call	0x1274	; 0x1274 <add_event>
       cycle_FSM();		//
     2d2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <cycle_FSM>
	   
	   
	  
	   
	   if(flag_1s == 1)
     2d6:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <flag_1s>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	b1 f7       	brne	.-20     	; 0x2ca <main+0x4a>
	   {
		   flag_1s = 0;			
     2de:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <flag_1s>
		   itoa(motor_count_R, message, 10);
		   send_str(message);
		   send_str("\n");
		   */
		   
		   send_str("Xd_mm: ");
     2e2:	88 e0       	ldi	r24, 0x08	; 8
     2e4:	90 e2       	ldi	r25, 0x20	; 32
     2e6:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   itoa(Xd_mm, message, 10);
     2ea:	60 91 2d 21 	lds	r22, 0x212D	; 0x80212d <Xd_mm>
     2ee:	70 91 2e 21 	lds	r23, 0x212E	; 0x80212e <Xd_mm+0x1>
     2f2:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <Xd_mm+0x2>
     2f6:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <Xd_mm+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     2fa:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fixsfsi>
     2fe:	dc 01       	movw	r26, r24
     300:	cb 01       	movw	r24, r22
     302:	4a e0       	ldi	r20, 0x0A	; 10
     304:	be 01       	movw	r22, r28
     306:	6f 5f       	subi	r22, 0xFF	; 255
     308:	7f 4f       	sbci	r23, 0xFF	; 255
     30a:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__itoa_ncheck>
		   send_str(message);
     30e:	ce 01       	movw	r24, r28
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   send_str("     ");
     316:	80 e1       	ldi	r24, 0x10	; 16
     318:	90 e2       	ldi	r25, 0x20	; 32
     31a:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   
		   
		   send_str("X_mm:");
     31e:	86 e1       	ldi	r24, 0x16	; 22
     320:	90 e2       	ldi	r25, 0x20	; 32
     322:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   itoa(X_mm, message, 10);
     326:	60 91 5e 20 	lds	r22, 0x205E	; 0x80205e <X_mm>
     32a:	70 91 5f 20 	lds	r23, 0x205F	; 0x80205f <X_mm+0x1>
     32e:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <X_mm+0x2>
     332:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <X_mm+0x3>
     336:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fixsfsi>
     33a:	dc 01       	movw	r26, r24
     33c:	cb 01       	movw	r24, r22
     33e:	4a e0       	ldi	r20, 0x0A	; 10
     340:	be 01       	movw	r22, r28
     342:	6f 5f       	subi	r22, 0xFF	; 255
     344:	7f 4f       	sbci	r23, 0xFF	; 255
     346:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__itoa_ncheck>
		   send_str(message);
     34a:	ce 01       	movw	r24, r28
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   send_str("     ");
     352:	80 e1       	ldi	r24, 0x10	; 16
     354:	90 e2       	ldi	r25, 0x20	; 32
     356:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   
		   send_str("xe: ");
     35a:	8c e1       	ldi	r24, 0x1C	; 28
     35c:	90 e2       	ldi	r25, 0x20	; 32
     35e:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   itoa(xe, message, 10);
     362:	60 91 e3 20 	lds	r22, 0x20E3	; 0x8020e3 <xe>
     366:	70 91 e4 20 	lds	r23, 0x20E4	; 0x8020e4 <xe+0x1>
     36a:	80 91 e5 20 	lds	r24, 0x20E5	; 0x8020e5 <xe+0x2>
     36e:	90 91 e6 20 	lds	r25, 0x20E6	; 0x8020e6 <xe+0x3>
     372:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fixsfsi>
     376:	dc 01       	movw	r26, r24
     378:	cb 01       	movw	r24, r22
     37a:	4a e0       	ldi	r20, 0x0A	; 10
     37c:	be 01       	movw	r22, r28
     37e:	6f 5f       	subi	r22, 0xFF	; 255
     380:	7f 4f       	sbci	r23, 0xFF	; 255
     382:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__itoa_ncheck>
		   send_str(message);
     386:	ce 01       	movw	r24, r28
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   send_str("    ");
     38e:	81 e1       	ldi	r24, 0x11	; 17
     390:	90 e2       	ldi	r25, 0x20	; 32
     392:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		  
		   
		   
		   send_str("fi_deg: ");
     396:	81 e2       	ldi	r24, 0x21	; 33
     398:	90 e2       	ldi	r25, 0x20	; 32
     39a:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   itoa(fi_deg, message, 10);
     39e:	60 91 66 20 	lds	r22, 0x2066	; 0x802066 <fi_deg>
     3a2:	70 91 67 20 	lds	r23, 0x2067	; 0x802067 <fi_deg+0x1>
     3a6:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <fi_deg+0x2>
     3aa:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <fi_deg+0x3>
     3ae:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fixsfsi>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	4a e0       	ldi	r20, 0x0A	; 10
     3b8:	be 01       	movw	r22, r28
     3ba:	6f 5f       	subi	r22, 0xFF	; 255
     3bc:	7f 4f       	sbci	r23, 0xFF	; 255
     3be:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__itoa_ncheck>
		   send_str(message);
     3c2:	ce 01       	movw	r24, r28
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   send_str("    ");
     3ca:	81 e1       	ldi	r24, 0x11	; 17
     3cc:	90 e2       	ldi	r25, 0x20	; 32
     3ce:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   
		   send_str("fi_inc: ");
     3d2:	8a e2       	ldi	r24, 0x2A	; 42
     3d4:	90 e2       	ldi	r25, 0x20	; 32
     3d6:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   utoa(fi_inc, message, 10);
     3da:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <fi_inc>
     3de:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <fi_inc+0x1>
     3e2:	a0 91 70 20 	lds	r26, 0x2070	; 0x802070 <fi_inc+0x2>
     3e6:	b0 91 71 20 	lds	r27, 0x2071	; 0x802071 <fi_inc+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     3ea:	4a e0       	ldi	r20, 0x0A	; 10
     3ec:	be 01       	movw	r22, r28
     3ee:	6f 5f       	subi	r22, 0xFF	; 255
     3f0:	7f 4f       	sbci	r23, 0xFF	; 255
     3f2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__utoa_ncheck>
		   send_str(message);
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   send_str("    ");
     3fe:	81 e1       	ldi	r24, 0x11	; 17
     400:	90 e2       	ldi	r25, 0x20	; 32
     402:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   
		   send_str("motor_count_L: ");
     406:	83 e3       	ldi	r24, 0x33	; 51
     408:	90 e2       	ldi	r25, 0x20	; 32
     40a:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   utoa(motor_count_L, message, 10);	//utoa
     40e:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <motor_count_L>
     412:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <motor_count_L+0x1>
     416:	4a e0       	ldi	r20, 0x0A	; 10
     418:	be 01       	movw	r22, r28
     41a:	6f 5f       	subi	r22, 0xFF	; 255
     41c:	7f 4f       	sbci	r23, 0xFF	; 255
     41e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__utoa_ncheck>
		   send_str(message);
     422:	ce 01       	movw	r24, r28
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   send_str("    ");
     42a:	81 e1       	ldi	r24, 0x11	; 17
     42c:	90 e2       	ldi	r25, 0x20	; 32
     42e:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   
		   
		   send_str("motor_count_R: ");
     432:	83 e4       	ldi	r24, 0x43	; 67
     434:	90 e2       	ldi	r25, 0x20	; 32
     436:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   utoa(motor_count_R, message, 10);	//utoa
     43a:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <motor_count_R>
     43e:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <motor_count_R+0x1>
     442:	4a e0       	ldi	r20, 0x0A	; 10
     444:	be 01       	movw	r22, r28
     446:	6f 5f       	subi	r22, 0xFF	; 255
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__utoa_ncheck>
		   send_str(message);
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
		   send_str("\n");
     456:	83 e5       	ldi	r24, 0x53	; 83
     458:	90 e2       	ldi	r25, 0x20	; 32
     45a:	0e 94 0e 0c 	call	0x181c	; 0x181c <send_str>
     45e:	35 cf       	rjmp	.-406    	; 0x2ca <main+0x4a>

00000460 <set_robot_control_gains>:
		return v+a;
	else if (v > v_des + a)
		return v-a;
	else
		return v_des;
}
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	a0 ef       	ldi	r26, 0xF0	; 240
     46a:	b1 e4       	ldi	r27, 0x41	; 65
     46c:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <sat_mav_R>
     470:	90 93 b7 20 	sts	0x20B7, r25	; 0x8020b7 <sat_mav_R+0x1>
     474:	a0 93 b8 20 	sts	0x20B8, r26	; 0x8020b8 <sat_mav_R+0x2>
     478:	b0 93 b9 20 	sts	0x20B9, r27	; 0x8020b9 <sat_mav_R+0x3>
     47c:	80 93 84 20 	sts	0x2084, r24	; 0x802084 <sat_mav_L>
     480:	90 93 85 20 	sts	0x2085, r25	; 0x802085 <sat_mav_L+0x1>
     484:	a0 93 86 20 	sts	0x2086, r26	; 0x802086 <sat_mav_L+0x2>
     488:	b0 93 87 20 	sts	0x2087, r27	; 0x802087 <sat_mav_L+0x3>
     48c:	00 e0       	ldi	r16, 0x00	; 0
     48e:	10 e0       	ldi	r17, 0x00	; 0
     490:	28 e4       	ldi	r18, 0x48	; 72
     492:	32 e4       	ldi	r19, 0x42	; 66
     494:	00 93 ac 20 	sts	0x20AC, r16	; 0x8020ac <Kp_R>
     498:	10 93 ad 20 	sts	0x20AD, r17	; 0x8020ad <Kp_R+0x1>
     49c:	20 93 ae 20 	sts	0x20AE, r18	; 0x8020ae <Kp_R+0x2>
     4a0:	30 93 af 20 	sts	0x20AF, r19	; 0x8020af <Kp_R+0x3>
     4a4:	4d ec       	ldi	r20, 0xCD	; 205
     4a6:	5c ec       	ldi	r21, 0xCC	; 204
     4a8:	6c e4       	ldi	r22, 0x4C	; 76
     4aa:	7e e3       	ldi	r23, 0x3E	; 62
     4ac:	40 93 a8 20 	sts	0x20A8, r20	; 0x8020a8 <Ki_R>
     4b0:	50 93 a9 20 	sts	0x20A9, r21	; 0x8020a9 <Ki_R+0x1>
     4b4:	60 93 aa 20 	sts	0x20AA, r22	; 0x8020aa <Ki_R+0x2>
     4b8:	70 93 ab 20 	sts	0x20AB, r23	; 0x8020ab <Ki_R+0x3>
     4bc:	10 92 a4 20 	sts	0x20A4, r1	; 0x8020a4 <Kd_R>
     4c0:	10 92 a5 20 	sts	0x20A5, r1	; 0x8020a5 <Kd_R+0x1>
     4c4:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <Kd_R+0x2>
     4c8:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <Kd_R+0x3>
     4cc:	00 93 7a 20 	sts	0x207A, r16	; 0x80207a <Kp_L>
     4d0:	10 93 7b 20 	sts	0x207B, r17	; 0x80207b <Kp_L+0x1>
     4d4:	20 93 7c 20 	sts	0x207C, r18	; 0x80207c <Kp_L+0x2>
     4d8:	30 93 7d 20 	sts	0x207D, r19	; 0x80207d <Kp_L+0x3>
     4dc:	40 93 76 20 	sts	0x2076, r20	; 0x802076 <Ki_L>
     4e0:	50 93 77 20 	sts	0x2077, r21	; 0x802077 <Ki_L+0x1>
     4e4:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <Ki_L+0x2>
     4e8:	70 93 79 20 	sts	0x2079, r23	; 0x802079 <Ki_L+0x3>
     4ec:	10 92 72 20 	sts	0x2072, r1	; 0x802072 <Kd_L>
     4f0:	10 92 73 20 	sts	0x2073, r1	; 0x802073 <Kd_L+0x1>
     4f4:	10 92 74 20 	sts	0x2074, r1	; 0x802074 <Kd_L+0x2>
     4f8:	10 92 75 20 	sts	0x2075, r1	; 0x802075 <Kd_L+0x3>
     4fc:	00 e0       	ldi	r16, 0x00	; 0
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	26 e9       	ldi	r18, 0x96	; 150
     502:	33 e4       	ldi	r19, 0x43	; 67
     504:	00 93 db 20 	sts	0x20DB, r16	; 0x8020db <Kp_or_R>
     508:	10 93 dc 20 	sts	0x20DC, r17	; 0x8020dc <Kp_or_R+0x1>
     50c:	20 93 dd 20 	sts	0x20DD, r18	; 0x8020dd <Kp_or_R+0x2>
     510:	30 93 de 20 	sts	0x20DE, r19	; 0x8020de <Kp_or_R+0x3>
     514:	40 93 03 21 	sts	0x2103, r20	; 0x802103 <KI_or_R>
     518:	50 93 04 21 	sts	0x2104, r21	; 0x802104 <KI_or_R+0x1>
     51c:	60 93 05 21 	sts	0x2105, r22	; 0x802105 <KI_or_R+0x2>
     520:	70 93 06 21 	sts	0x2106, r23	; 0x802106 <KI_or_R+0x3>
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	66 e9       	ldi	r22, 0x96	; 150
     52a:	73 ec       	ldi	r23, 0xC3	; 195
     52c:	40 93 fb 20 	sts	0x20FB, r20	; 0x8020fb <Kp_or_L>
     530:	50 93 fc 20 	sts	0x20FC, r21	; 0x8020fc <Kp_or_L+0x1>
     534:	60 93 fd 20 	sts	0x20FD, r22	; 0x8020fd <Kp_or_L+0x2>
     538:	70 93 fe 20 	sts	0x20FE, r23	; 0x8020fe <Kp_or_L+0x3>
     53c:	4d ec       	ldi	r20, 0xCD	; 205
     53e:	5c ec       	ldi	r21, 0xCC	; 204
     540:	6c e4       	ldi	r22, 0x4C	; 76
     542:	7e eb       	ldi	r23, 0xBE	; 190
     544:	40 93 e7 20 	sts	0x20E7, r20	; 0x8020e7 <KI_or_L>
     548:	50 93 e8 20 	sts	0x20E8, r21	; 0x8020e8 <KI_or_L+0x1>
     54c:	60 93 e9 20 	sts	0x20E9, r22	; 0x8020e9 <KI_or_L+0x2>
     550:	70 93 ea 20 	sts	0x20EA, r23	; 0x8020ea <KI_or_L+0x3>
     554:	10 92 13 21 	sts	0x2113, r1	; 0x802113 <Kp_pos_R>
     558:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <Kp_pos_R+0x1>
     55c:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <Kp_pos_R+0x2>
     560:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <Kp_pos_R+0x3>
     564:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <KI_pos_R>
     568:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <KI_pos_R+0x1>
     56c:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <KI_pos_R+0x2>
     570:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <KI_pos_R+0x3>
     574:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <Kp_pos_L>
     578:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <Kp_pos_L+0x1>
     57c:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <Kp_pos_L+0x2>
     580:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <Kp_pos_L+0x3>
     584:	10 92 f7 20 	sts	0x20F7, r1	; 0x8020f7 <KI_pos_L>
     588:	10 92 f8 20 	sts	0x20F8, r1	; 0x8020f8 <KI_pos_L+0x1>
     58c:	10 92 f9 20 	sts	0x20F9, r1	; 0x8020f9 <KI_pos_L+0x2>
     590:	10 92 fa 20 	sts	0x20FA, r1	; 0x8020fa <KI_pos_L+0x3>
     594:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <max_mav_R>
     598:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <max_mav_R+0x1>
     59c:	a0 93 b4 20 	sts	0x20B4, r26	; 0x8020b4 <max_mav_R+0x2>
     5a0:	b0 93 b5 20 	sts	0x20B5, r27	; 0x8020b5 <max_mav_R+0x3>
     5a4:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <max_mav_L>
     5a8:	90 93 81 20 	sts	0x2081, r25	; 0x802081 <max_mav_L+0x1>
     5ac:	a0 93 82 20 	sts	0x2082, r26	; 0x802082 <max_mav_L+0x2>
     5b0:	b0 93 83 20 	sts	0x2083, r27	; 0x802083 <max_mav_L+0x3>
     5b4:	8d ec       	ldi	r24, 0xCD	; 205
     5b6:	9c ec       	ldi	r25, 0xCC	; 204
     5b8:	ac e4       	ldi	r26, 0x4C	; 76
     5ba:	bd e3       	ldi	r27, 0x3D	; 61
     5bc:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <des_maa_R>
     5c0:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <des_maa_R+0x1>
     5c4:	a0 93 cc 20 	sts	0x20CC, r26	; 0x8020cc <des_maa_R+0x2>
     5c8:	b0 93 cd 20 	sts	0x20CD, r27	; 0x8020cd <des_maa_R+0x3>
     5cc:	80 93 98 20 	sts	0x2098, r24	; 0x802098 <des_maa_L>
     5d0:	90 93 99 20 	sts	0x2099, r25	; 0x802099 <des_maa_L+0x1>
     5d4:	a0 93 9a 20 	sts	0x209A, r26	; 0x80209a <des_maa_L+0x2>
     5d8:	b0 93 9b 20 	sts	0x209B, r27	; 0x80209b <des_maa_L+0x3>
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	08 95       	ret

000005e2 <sens_robot>:
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
     5ee:	90 91 21 09 	lds	r25, 0x0921	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
     5f2:	80 93 f5 20 	sts	0x20F5, r24	; 0x8020f5 <motor_count_R>
     5f6:	90 93 f6 20 	sts	0x20F6, r25	; 0x8020f6 <motor_count_R+0x1>
     5fa:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <MOTOR_QDEC_OWF_R>
     5fe:	81 11       	cpse	r24, r1
     600:	0f c0       	rjmp	.+30     	; 0x620 <sens_robot+0x3e>
     602:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <last_motor_count_R>
     606:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <last_motor_count_R+0x1>
     60a:	20 91 f5 20 	lds	r18, 0x20F5	; 0x8020f5 <motor_count_R>
     60e:	30 91 f6 20 	lds	r19, 0x20F6	; 0x8020f6 <motor_count_R+0x1>
     612:	82 1b       	sub	r24, r18
     614:	93 0b       	sbc	r25, r19
     616:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <motor_angular_velocity_R>
     61a:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <motor_angular_velocity_R+0x1>
     61e:	2a c0       	rjmp	.+84     	; 0x674 <sens_robot+0x92>
     620:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <MOTOR_QDEC_OWF_R>
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	89 f4       	brne	.+34     	; 0x64a <sens_robot+0x68>
     628:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <MOTOR_QDEC_OWF_R>
     62c:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <motor_count_R>
     630:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <motor_count_R+0x1>
     634:	20 91 3b 21 	lds	r18, 0x213B	; 0x80213b <last_motor_count_R>
     638:	30 91 3c 21 	lds	r19, 0x213C	; 0x80213c <last_motor_count_R+0x1>
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	82 1b       	sub	r24, r18
     640:	93 0b       	sbc	r25, r19
     642:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <motor_angular_velocity_R>
     646:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <motor_angular_velocity_R+0x1>
     64a:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <MOTOR_QDEC_OWF_R>
     64e:	82 30       	cpi	r24, 0x02	; 2
     650:	89 f4       	brne	.+34     	; 0x674 <sens_robot+0x92>
     652:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <MOTOR_QDEC_OWF_R>
     656:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <motor_count_R>
     65a:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <motor_count_R+0x1>
     65e:	20 91 3b 21 	lds	r18, 0x213B	; 0x80213b <last_motor_count_R>
     662:	30 91 3c 21 	lds	r19, 0x213C	; 0x80213c <last_motor_count_R+0x1>
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	82 1b       	sub	r24, r18
     66a:	93 0b       	sbc	r25, r19
     66c:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <motor_angular_velocity_R>
     670:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <motor_angular_velocity_R+0x1>
     674:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <motor_angular_velocity_R>
     678:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <motor_angular_velocity_R+0x1>
     67c:	40 91 33 21 	lds	r20, 0x2133	; 0x802133 <motor_angle_R>
     680:	50 91 34 21 	lds	r21, 0x2134	; 0x802134 <motor_angle_R+0x1>
     684:	60 91 35 21 	lds	r22, 0x2135	; 0x802135 <motor_angle_R+0x2>
     688:	70 91 36 21 	lds	r23, 0x2136	; 0x802136 <motor_angle_R+0x3>
     68c:	09 2e       	mov	r0, r25
     68e:	00 0c       	add	r0, r0
     690:	aa 0b       	sbc	r26, r26
     692:	bb 0b       	sbc	r27, r27
     694:	84 0f       	add	r24, r20
     696:	95 1f       	adc	r25, r21
     698:	a6 1f       	adc	r26, r22
     69a:	b7 1f       	adc	r27, r23
     69c:	80 93 33 21 	sts	0x2133, r24	; 0x802133 <motor_angle_R>
     6a0:	90 93 34 21 	sts	0x2134, r25	; 0x802134 <motor_angle_R+0x1>
     6a4:	a0 93 35 21 	sts	0x2135, r26	; 0x802135 <motor_angle_R+0x2>
     6a8:	b0 93 36 21 	sts	0x2136, r27	; 0x802136 <motor_angle_R+0x3>
     6ac:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <motor_count_R>
     6b0:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <motor_count_R+0x1>
     6b4:	80 93 3b 21 	sts	0x213B, r24	; 0x80213b <last_motor_count_R>
     6b8:	90 93 3c 21 	sts	0x213C, r25	; 0x80213c <last_motor_count_R+0x1>
     6bc:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <__TEXT_REGION_LENGTH__+0x700960>
     6c0:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <__TEXT_REGION_LENGTH__+0x700961>
     6c4:	80 93 27 21 	sts	0x2127, r24	; 0x802127 <motor_count_L>
     6c8:	90 93 28 21 	sts	0x2128, r25	; 0x802128 <motor_count_L+0x1>
     6cc:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <MOTOR_QDEC_OWF_L>
     6d0:	81 11       	cpse	r24, r1
     6d2:	0f c0       	rjmp	.+30     	; 0x6f2 <sens_robot+0x110>
     6d4:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <last_motor_count_L>
     6d8:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <last_motor_count_L+0x1>
     6dc:	20 91 27 21 	lds	r18, 0x2127	; 0x802127 <motor_count_L>
     6e0:	30 91 28 21 	lds	r19, 0x2128	; 0x802128 <motor_count_L+0x1>
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	80 93 df 20 	sts	0x20DF, r24	; 0x8020df <motor_angular_velocity_L>
     6ec:	90 93 e0 20 	sts	0x20E0, r25	; 0x8020e0 <motor_angular_velocity_L+0x1>
     6f0:	2a c0       	rjmp	.+84     	; 0x746 <sens_robot+0x164>
     6f2:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <MOTOR_QDEC_OWF_L>
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	89 f4       	brne	.+34     	; 0x71c <sens_robot+0x13a>
     6fa:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <MOTOR_QDEC_OWF_L>
     6fe:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <motor_count_L>
     702:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <motor_count_L+0x1>
     706:	20 91 e1 20 	lds	r18, 0x20E1	; 0x8020e1 <last_motor_count_L>
     70a:	30 91 e2 20 	lds	r19, 0x20E2	; 0x8020e2 <last_motor_count_L+0x1>
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	82 1b       	sub	r24, r18
     712:	93 0b       	sbc	r25, r19
     714:	80 93 df 20 	sts	0x20DF, r24	; 0x8020df <motor_angular_velocity_L>
     718:	90 93 e0 20 	sts	0x20E0, r25	; 0x8020e0 <motor_angular_velocity_L+0x1>
     71c:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <MOTOR_QDEC_OWF_L>
     720:	82 30       	cpi	r24, 0x02	; 2
     722:	89 f4       	brne	.+34     	; 0x746 <sens_robot+0x164>
     724:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <MOTOR_QDEC_OWF_L>
     728:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <motor_count_L>
     72c:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <motor_count_L+0x1>
     730:	20 91 e1 20 	lds	r18, 0x20E1	; 0x8020e1 <last_motor_count_L>
     734:	30 91 e2 20 	lds	r19, 0x20E2	; 0x8020e2 <last_motor_count_L+0x1>
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	82 1b       	sub	r24, r18
     73c:	93 0b       	sbc	r25, r19
     73e:	80 93 df 20 	sts	0x20DF, r24	; 0x8020df <motor_angular_velocity_L>
     742:	90 93 e0 20 	sts	0x20E0, r25	; 0x8020e0 <motor_angular_velocity_L+0x1>
     746:	80 91 df 20 	lds	r24, 0x20DF	; 0x8020df <motor_angular_velocity_L>
     74a:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <motor_angular_velocity_L+0x1>
     74e:	40 91 3d 21 	lds	r20, 0x213D	; 0x80213d <motor_angle_L>
     752:	50 91 3e 21 	lds	r21, 0x213E	; 0x80213e <motor_angle_L+0x1>
     756:	60 91 3f 21 	lds	r22, 0x213F	; 0x80213f <motor_angle_L+0x2>
     75a:	70 91 40 21 	lds	r23, 0x2140	; 0x802140 <motor_angle_L+0x3>
     75e:	09 2e       	mov	r0, r25
     760:	00 0c       	add	r0, r0
     762:	aa 0b       	sbc	r26, r26
     764:	bb 0b       	sbc	r27, r27
     766:	84 0f       	add	r24, r20
     768:	95 1f       	adc	r25, r21
     76a:	a6 1f       	adc	r26, r22
     76c:	b7 1f       	adc	r27, r23
     76e:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <motor_angle_L>
     772:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <motor_angle_L+0x1>
     776:	a0 93 3f 21 	sts	0x213F, r26	; 0x80213f <motor_angle_L+0x2>
     77a:	b0 93 40 21 	sts	0x2140, r27	; 0x802140 <motor_angle_L+0x3>
     77e:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <motor_count_L>
     782:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <motor_count_L+0x1>
     786:	80 93 e1 20 	sts	0x20E1, r24	; 0x8020e1 <last_motor_count_L>
     78a:	90 93 e2 20 	sts	0x20E2, r25	; 0x8020e2 <last_motor_count_L+0x1>
     78e:	20 91 f5 20 	lds	r18, 0x20F5	; 0x8020f5 <motor_count_R>
     792:	30 91 f6 20 	lds	r19, 0x20F6	; 0x8020f6 <motor_count_R+0x1>
     796:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <motor_count_L>
     79a:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <motor_count_L+0x1>
     79e:	82 1b       	sub	r24, r18
     7a0:	93 0b       	sbc	r25, r19
     7a2:	09 2e       	mov	r0, r25
     7a4:	00 0c       	add	r0, r0
     7a6:	aa 0b       	sbc	r26, r26
     7a8:	bb 0b       	sbc	r27, r27
     7aa:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <fi_inc>
     7ae:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <fi_inc+0x1>
     7b2:	a0 93 70 20 	sts	0x2070, r26	; 0x802070 <fi_inc+0x2>
     7b6:	b0 93 71 20 	sts	0x2071, r27	; 0x802071 <fi_inc+0x3>
     7ba:	60 91 6e 20 	lds	r22, 0x206E	; 0x80206e <fi_inc>
     7be:	70 91 6f 20 	lds	r23, 0x206F	; 0x80206f <fi_inc+0x1>
     7c2:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <fi_inc+0x2>
     7c6:	90 91 71 20 	lds	r25, 0x2071	; 0x802071 <fi_inc+0x3>
     7ca:	c0 90 04 20 	lds	r12, 0x2004	; 0x802004 <C_inc_2_rad>
     7ce:	d0 90 05 20 	lds	r13, 0x2005	; 0x802005 <C_inc_2_rad+0x1>
     7d2:	e0 90 06 20 	lds	r14, 0x2006	; 0x802006 <C_inc_2_rad+0x2>
     7d6:	f0 90 07 20 	lds	r15, 0x2007	; 0x802007 <C_inc_2_rad+0x3>
     7da:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__floatsisf>
     7de:	a7 01       	movw	r20, r14
     7e0:	96 01       	movw	r18, r12
     7e2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     7e6:	60 93 6a 20 	sts	0x206A, r22	; 0x80206a <fi_rad>
     7ea:	70 93 6b 20 	sts	0x206B, r23	; 0x80206b <fi_rad+0x1>
     7ee:	80 93 6c 20 	sts	0x206C, r24	; 0x80206c <fi_rad+0x2>
     7f2:	90 93 6d 20 	sts	0x206D, r25	; 0x80206d <fi_rad+0x3>
     7f6:	60 91 6a 20 	lds	r22, 0x206A	; 0x80206a <fi_rad>
     7fa:	70 91 6b 20 	lds	r23, 0x206B	; 0x80206b <fi_rad+0x1>
     7fe:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <fi_rad+0x2>
     802:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <fi_rad+0x3>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	44 e3       	ldi	r20, 0x34	; 52
     80c:	53 e4       	ldi	r21, 0x43	; 67
     80e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     812:	2b ed       	ldi	r18, 0xDB	; 219
     814:	3f e0       	ldi	r19, 0x0F	; 15
     816:	49 e4       	ldi	r20, 0x49	; 73
     818:	50 e4       	ldi	r21, 0x40	; 64
     81a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__divsf3>
     81e:	60 93 66 20 	sts	0x2066, r22	; 0x802066 <fi_deg>
     822:	70 93 67 20 	sts	0x2067, r23	; 0x802067 <fi_deg+0x1>
     826:	80 93 68 20 	sts	0x2068, r24	; 0x802068 <fi_deg+0x2>
     82a:	90 93 69 20 	sts	0x2069, r25	; 0x802069 <fi_deg+0x3>
     82e:	60 91 f5 20 	lds	r22, 0x20F5	; 0x8020f5 <motor_count_R>
     832:	70 91 f6 20 	lds	r23, 0x20F6	; 0x8020f6 <motor_count_R+0x1>
     836:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <motor_count_L>
     83a:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <motor_count_L+0x1>
     83e:	68 0f       	add	r22, r24
     840:	79 1f       	adc	r23, r25
     842:	71 95       	neg	r23
     844:	61 95       	neg	r22
     846:	71 09       	sbc	r23, r1
     848:	12 f4       	brpl	.+4      	; 0x84e <sens_robot+0x26c>
     84a:	6f 5f       	subi	r22, 0xFF	; 255
     84c:	7f 4f       	sbci	r23, 0xFF	; 255
     84e:	75 95       	asr	r23
     850:	67 95       	ror	r22
     852:	07 2e       	mov	r0, r23
     854:	00 0c       	add	r0, r0
     856:	88 0b       	sbc	r24, r24
     858:	99 0b       	sbc	r25, r25
     85a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__floatsisf>
     85e:	6b 01       	movw	r12, r22
     860:	7c 01       	movw	r14, r24
     862:	60 91 6a 20 	lds	r22, 0x206A	; 0x80206a <fi_rad>
     866:	70 91 6b 20 	lds	r23, 0x206B	; 0x80206b <fi_rad+0x1>
     86a:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <fi_rad+0x2>
     86e:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <fi_rad+0x3>
     872:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <cos>
     876:	9b 01       	movw	r18, r22
     878:	ac 01       	movw	r20, r24
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     882:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fixsfsi>
     886:	60 93 62 20 	sts	0x2062, r22	; 0x802062 <X_inc>
     88a:	70 93 63 20 	sts	0x2063, r23	; 0x802063 <X_inc+0x1>
     88e:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <X_inc+0x2>
     892:	90 93 65 20 	sts	0x2065, r25	; 0x802065 <X_inc+0x3>
     896:	60 91 6a 20 	lds	r22, 0x206A	; 0x80206a <fi_rad>
     89a:	70 91 6b 20 	lds	r23, 0x206B	; 0x80206b <fi_rad+0x1>
     89e:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <fi_rad+0x2>
     8a2:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <fi_rad+0x3>
     8a6:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sin>
     8aa:	9b 01       	movw	r18, r22
     8ac:	ac 01       	movw	r20, r24
     8ae:	c7 01       	movw	r24, r14
     8b0:	b6 01       	movw	r22, r12
     8b2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     8b6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fixsfsi>
     8ba:	60 93 5a 20 	sts	0x205A, r22	; 0x80205a <Y_inc>
     8be:	70 93 5b 20 	sts	0x205B, r23	; 0x80205b <Y_inc+0x1>
     8c2:	80 93 5c 20 	sts	0x205C, r24	; 0x80205c <Y_inc+0x2>
     8c6:	90 93 5d 20 	sts	0x205D, r25	; 0x80205d <Y_inc+0x3>
     8ca:	60 91 62 20 	lds	r22, 0x2062	; 0x802062 <X_inc>
     8ce:	70 91 63 20 	lds	r23, 0x2063	; 0x802063 <X_inc+0x1>
     8d2:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <X_inc+0x2>
     8d6:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <X_inc+0x3>
     8da:	c0 90 00 20 	lds	r12, 0x2000	; 0x802000 <C_inc_2_mm>
     8de:	d0 90 01 20 	lds	r13, 0x2001	; 0x802001 <C_inc_2_mm+0x1>
     8e2:	e0 90 02 20 	lds	r14, 0x2002	; 0x802002 <C_inc_2_mm+0x2>
     8e6:	f0 90 03 20 	lds	r15, 0x2003	; 0x802003 <C_inc_2_mm+0x3>
     8ea:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__floatsisf>
     8ee:	a7 01       	movw	r20, r14
     8f0:	96 01       	movw	r18, r12
     8f2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     8f6:	60 93 5e 20 	sts	0x205E, r22	; 0x80205e <X_mm>
     8fa:	70 93 5f 20 	sts	0x205F, r23	; 0x80205f <X_mm+0x1>
     8fe:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <X_mm+0x2>
     902:	90 93 61 20 	sts	0x2061, r25	; 0x802061 <X_mm+0x3>
     906:	60 91 5a 20 	lds	r22, 0x205A	; 0x80205a <Y_inc>
     90a:	70 91 5b 20 	lds	r23, 0x205B	; 0x80205b <Y_inc+0x1>
     90e:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <Y_inc+0x2>
     912:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <Y_inc+0x3>
     916:	c0 90 00 20 	lds	r12, 0x2000	; 0x802000 <C_inc_2_mm>
     91a:	d0 90 01 20 	lds	r13, 0x2001	; 0x802001 <C_inc_2_mm+0x1>
     91e:	e0 90 02 20 	lds	r14, 0x2002	; 0x802002 <C_inc_2_mm+0x2>
     922:	f0 90 03 20 	lds	r15, 0x2003	; 0x802003 <C_inc_2_mm+0x3>
     926:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__floatsisf>
     92a:	a7 01       	movw	r20, r14
     92c:	96 01       	movw	r18, r12
     92e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     932:	60 93 56 20 	sts	0x2056, r22	; 0x802056 <__data_end>
     936:	70 93 57 20 	sts	0x2057, r23	; 0x802057 <__data_end+0x1>
     93a:	80 93 58 20 	sts	0x2058, r24	; 0x802058 <__data_end+0x2>
     93e:	90 93 59 20 	sts	0x2059, r25	; 0x802059 <__data_end+0x3>
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	df 90       	pop	r13
     948:	cf 90       	pop	r12
     94a:	08 95       	ret

0000094c <robot_velocity_control>:

void robot_velocity_control()
{
     94c:	4f 92       	push	r4
     94e:	5f 92       	push	r5
     950:	6f 92       	push	r6
     952:	7f 92       	push	r7
     954:	8f 92       	push	r8
     956:	9f 92       	push	r9
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	28 97       	sbiw	r28, 0x08	; 8
     96e:	cd bf       	out	0x3d, r28	; 61
     970:	de bf       	out	0x3e, r29	; 62
	//max_mav_R (>0 <sat_mav_R) - desired cruising motor angular velocity for right wheel
	//max_mav_L (>0 <sat_mav_L) - desired cruising motor angular velocity for left wheel
	
	
	
	des_mav_R = saturacija(des_mav_R, max_mav_R);
     972:	c0 90 b2 20 	lds	r12, 0x20B2	; 0x8020b2 <max_mav_R>
     976:	d0 90 b3 20 	lds	r13, 0x20B3	; 0x8020b3 <max_mav_R+0x1>
     97a:	e0 90 b4 20 	lds	r14, 0x20B4	; 0x8020b4 <max_mav_R+0x2>
     97e:	f0 90 b5 20 	lds	r15, 0x20B5	; 0x8020b5 <max_mav_R+0x3>
     982:	80 90 ce 20 	lds	r8, 0x20CE	; 0x8020ce <des_mav_R>
     986:	90 90 cf 20 	lds	r9, 0x20CF	; 0x8020cf <des_mav_R+0x1>
     98a:	a0 90 d0 20 	lds	r10, 0x20D0	; 0x8020d0 <des_mav_R+0x2>
     98e:	b0 90 d1 20 	lds	r11, 0x20D1	; 0x8020d1 <des_mav_R+0x3>
}


float saturacija(float a, float max)
{
	if (a>max)
     992:	a5 01       	movw	r20, r10
     994:	94 01       	movw	r18, r8
     996:	c7 01       	movw	r24, r14
     998:	b6 01       	movw	r22, r12
     99a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
     99e:	88 23       	and	r24, r24
     9a0:	74 f0       	brlt	.+28     	; 0x9be <robot_velocity_control+0x72>
		return max;
	else if (a < -max)
     9a2:	f7 fa       	bst	r15, 7
     9a4:	f0 94       	com	r15
     9a6:	f7 f8       	bld	r15, 7
     9a8:	f0 94       	com	r15
     9aa:	a7 01       	movw	r20, r14
     9ac:	96 01       	movw	r18, r12
     9ae:	c5 01       	movw	r24, r10
     9b0:	b4 01       	movw	r22, r8
     9b2:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
     9b6:	88 23       	and	r24, r24
     9b8:	14 f0       	brlt	.+4      	; 0x9be <robot_velocity_control+0x72>
		return -max;
	else
		return a;	
     9ba:	75 01       	movw	r14, r10
     9bc:	64 01       	movw	r12, r8
	//max_mav_R (>0 <sat_mav_R) - desired cruising motor angular velocity for right wheel
	//max_mav_L (>0 <sat_mav_L) - desired cruising motor angular velocity for left wheel
	
	
	
	des_mav_R = saturacija(des_mav_R, max_mav_R);
     9be:	c0 92 ce 20 	sts	0x20CE, r12	; 0x8020ce <des_mav_R>
     9c2:	d0 92 cf 20 	sts	0x20CF, r13	; 0x8020cf <des_mav_R+0x1>
     9c6:	e0 92 d0 20 	sts	0x20D0, r14	; 0x8020d0 <des_mav_R+0x2>
     9ca:	f0 92 d1 20 	sts	0x20D1, r15	; 0x8020d1 <des_mav_R+0x3>
	ref_mav_R = trapez(ref_mav_R, des_mav_R, des_maa_R);	
     9ce:	40 90 ca 20 	lds	r4, 0x20CA	; 0x8020ca <des_maa_R>
     9d2:	50 90 cb 20 	lds	r5, 0x20CB	; 0x8020cb <des_maa_R+0x1>
     9d6:	60 90 cc 20 	lds	r6, 0x20CC	; 0x8020cc <des_maa_R+0x2>
     9da:	70 90 cd 20 	lds	r7, 0x20CD	; 0x8020cd <des_maa_R+0x3>
     9de:	c0 90 ce 20 	lds	r12, 0x20CE	; 0x8020ce <des_mav_R>
     9e2:	d0 90 cf 20 	lds	r13, 0x20CF	; 0x8020cf <des_mav_R+0x1>
     9e6:	e0 90 d0 20 	lds	r14, 0x20D0	; 0x8020d0 <des_mav_R+0x2>
     9ea:	f0 90 d1 20 	lds	r15, 0x20D1	; 0x8020d1 <des_mav_R+0x3>
     9ee:	80 90 d2 20 	lds	r8, 0x20D2	; 0x8020d2 <ref_mav_R>
     9f2:	90 90 d3 20 	lds	r9, 0x20D3	; 0x8020d3 <ref_mav_R+0x1>
     9f6:	a0 90 d4 20 	lds	r10, 0x20D4	; 0x8020d4 <ref_mav_R+0x2>
     9fa:	b0 90 d5 20 	lds	r11, 0x20D5	; 0x8020d5 <ref_mav_R+0x3>
		return a;	
}

float trapez(float v, float v_des, float a)
{
	if (v < v_des - a)
     9fe:	a3 01       	movw	r20, r6
     a00:	92 01       	movw	r18, r4
     a02:	c7 01       	movw	r24, r14
     a04:	b6 01       	movw	r22, r12
     a06:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
     a0a:	9b 01       	movw	r18, r22
     a0c:	ac 01       	movw	r20, r24
     a0e:	c5 01       	movw	r24, r10
     a10:	b4 01       	movw	r22, r8
     a12:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
     a16:	88 23       	and	r24, r24
     a18:	4c f4       	brge	.+18     	; 0xa2c <robot_velocity_control+0xe0>
		return v+a;
     a1a:	a5 01       	movw	r20, r10
     a1c:	94 01       	movw	r18, r8
     a1e:	c3 01       	movw	r24, r6
     a20:	b2 01       	movw	r22, r4
     a22:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
     a26:	6b 01       	movw	r12, r22
     a28:	7c 01       	movw	r14, r24
     a2a:	16 c0       	rjmp	.+44     	; 0xa58 <robot_velocity_control+0x10c>
	else if (v > v_des + a)
     a2c:	a7 01       	movw	r20, r14
     a2e:	96 01       	movw	r18, r12
     a30:	c3 01       	movw	r24, r6
     a32:	b2 01       	movw	r22, r4
     a34:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
     a38:	9b 01       	movw	r18, r22
     a3a:	ac 01       	movw	r20, r24
     a3c:	c5 01       	movw	r24, r10
     a3e:	b4 01       	movw	r22, r8
     a40:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     a44:	18 16       	cp	r1, r24
     a46:	44 f4       	brge	.+16     	; 0xa58 <robot_velocity_control+0x10c>
		return v-a;
     a48:	a3 01       	movw	r20, r6
     a4a:	92 01       	movw	r18, r4
     a4c:	c5 01       	movw	r24, r10
     a4e:	b4 01       	movw	r22, r8
     a50:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
     a54:	6b 01       	movw	r12, r22
     a56:	7c 01       	movw	r14, r24
	//max_mav_L (>0 <sat_mav_L) - desired cruising motor angular velocity for left wheel
	
	
	
	des_mav_R = saturacija(des_mav_R, max_mav_R);
	ref_mav_R = trapez(ref_mav_R, des_mav_R, des_maa_R);	
     a58:	c0 92 d2 20 	sts	0x20D2, r12	; 0x8020d2 <ref_mav_R>
     a5c:	d0 92 d3 20 	sts	0x20D3, r13	; 0x8020d3 <ref_mav_R+0x1>
     a60:	e0 92 d4 20 	sts	0x20D4, r14	; 0x8020d4 <ref_mav_R+0x2>
     a64:	f0 92 d5 20 	sts	0x20D5, r15	; 0x8020d5 <ref_mav_R+0x3>
	err_mav_R = ref_mav_R - motor_angular_velocity_R;
     a68:	c0 90 d2 20 	lds	r12, 0x20D2	; 0x8020d2 <ref_mav_R>
     a6c:	d0 90 d3 20 	lds	r13, 0x20D3	; 0x8020d3 <ref_mav_R+0x1>
     a70:	e0 90 d4 20 	lds	r14, 0x20D4	; 0x8020d4 <ref_mav_R+0x2>
     a74:	f0 90 d5 20 	lds	r15, 0x20D5	; 0x8020d5 <ref_mav_R+0x3>
     a78:	60 91 31 21 	lds	r22, 0x2131	; 0x802131 <motor_angular_velocity_R>
     a7c:	70 91 32 21 	lds	r23, 0x2132	; 0x802132 <motor_angular_velocity_R+0x1>
     a80:	07 2e       	mov	r0, r23
     a82:	00 0c       	add	r0, r0
     a84:	88 0b       	sbc	r24, r24
     a86:	99 0b       	sbc	r25, r25
     a88:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__floatsisf>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	c7 01       	movw	r24, r14
     a92:	b6 01       	movw	r22, r12
     a94:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
     a98:	60 93 c6 20 	sts	0x20C6, r22	; 0x8020c6 <err_mav_R>
     a9c:	70 93 c7 20 	sts	0x20C7, r23	; 0x8020c7 <err_mav_R+0x1>
     aa0:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <err_mav_R+0x2>
     aa4:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <err_mav_R+0x3>
	int_err_mav_R += err_mav_R;
     aa8:	60 91 c6 20 	lds	r22, 0x20C6	; 0x8020c6 <err_mav_R>
     aac:	70 91 c7 20 	lds	r23, 0x20C7	; 0x8020c7 <err_mav_R+0x1>
     ab0:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <err_mav_R+0x2>
     ab4:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <err_mav_R+0x3>
     ab8:	20 91 c2 20 	lds	r18, 0x20C2	; 0x8020c2 <int_err_mav_R>
     abc:	30 91 c3 20 	lds	r19, 0x20C3	; 0x8020c3 <int_err_mav_R+0x1>
     ac0:	40 91 c4 20 	lds	r20, 0x20C4	; 0x8020c4 <int_err_mav_R+0x2>
     ac4:	50 91 c5 20 	lds	r21, 0x20C5	; 0x8020c5 <int_err_mav_R+0x3>
     ac8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
     acc:	60 93 c2 20 	sts	0x20C2, r22	; 0x8020c2 <int_err_mav_R>
     ad0:	70 93 c3 20 	sts	0x20C3, r23	; 0x8020c3 <int_err_mav_R+0x1>
     ad4:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <int_err_mav_R+0x2>
     ad8:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <int_err_mav_R+0x3>
	derr_mav_R = err_mav_R - prev_err_mav_R;
     adc:	60 91 c6 20 	lds	r22, 0x20C6	; 0x8020c6 <err_mav_R>
     ae0:	70 91 c7 20 	lds	r23, 0x20C7	; 0x8020c7 <err_mav_R+0x1>
     ae4:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <err_mav_R+0x2>
     ae8:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <err_mav_R+0x3>
     aec:	20 91 ba 20 	lds	r18, 0x20BA	; 0x8020ba <prev_err_mav_R>
     af0:	30 91 bb 20 	lds	r19, 0x20BB	; 0x8020bb <prev_err_mav_R+0x1>
     af4:	40 91 bc 20 	lds	r20, 0x20BC	; 0x8020bc <prev_err_mav_R+0x2>
     af8:	50 91 bd 20 	lds	r21, 0x20BD	; 0x8020bd <prev_err_mav_R+0x3>
     afc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
     b00:	60 93 be 20 	sts	0x20BE, r22	; 0x8020be <derr_mav_R>
     b04:	70 93 bf 20 	sts	0x20BF, r23	; 0x8020bf <derr_mav_R+0x1>
     b08:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <derr_mav_R+0x2>
     b0c:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <derr_mav_R+0x3>
	prev_err_mav_R = err_mav_R;
     b10:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <err_mav_R>
     b14:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <err_mav_R+0x1>
     b18:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <err_mav_R+0x2>
     b1c:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <err_mav_R+0x3>
     b20:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <prev_err_mav_R>
     b24:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <prev_err_mav_R+0x1>
     b28:	a0 93 bc 20 	sts	0x20BC, r26	; 0x8020bc <prev_err_mav_R+0x2>
     b2c:	b0 93 bd 20 	sts	0x20BD, r27	; 0x8020bd <prev_err_mav_R+0x3>
	//int_err_mav_R = saturacija(int_err_mav_R, 2000*sat_mav_R);	//seljacki pokusaj zastite od wind up-a
	
	
	DuC_R = (int)(Kp_R*err_mav_R + Kd_R * derr_mav_R + Ki_R*int_err_mav_R);// + 7*( fi_e + 0.5 * fi_Ie ); //0.01 * fi_Ie
     b30:	60 91 ac 20 	lds	r22, 0x20AC	; 0x8020ac <Kp_R>
     b34:	70 91 ad 20 	lds	r23, 0x20AD	; 0x8020ad <Kp_R+0x1>
     b38:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <Kp_R+0x2>
     b3c:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <Kp_R+0x3>
     b40:	20 91 c6 20 	lds	r18, 0x20C6	; 0x8020c6 <err_mav_R>
     b44:	30 91 c7 20 	lds	r19, 0x20C7	; 0x8020c7 <err_mav_R+0x1>
     b48:	40 91 c8 20 	lds	r20, 0x20C8	; 0x8020c8 <err_mav_R+0x2>
     b4c:	50 91 c9 20 	lds	r21, 0x20C9	; 0x8020c9 <err_mav_R+0x3>
     b50:	2d 83       	std	Y+5, r18	; 0x05
     b52:	3e 83       	std	Y+6, r19	; 0x06
     b54:	4f 83       	std	Y+7, r20	; 0x07
     b56:	58 87       	std	Y+8, r21	; 0x08
     b58:	80 90 a4 20 	lds	r8, 0x20A4	; 0x8020a4 <Kd_R>
     b5c:	90 90 a5 20 	lds	r9, 0x20A5	; 0x8020a5 <Kd_R+0x1>
     b60:	a0 90 a6 20 	lds	r10, 0x20A6	; 0x8020a6 <Kd_R+0x2>
     b64:	b0 90 a7 20 	lds	r11, 0x20A7	; 0x8020a7 <Kd_R+0x3>
     b68:	40 90 be 20 	lds	r4, 0x20BE	; 0x8020be <derr_mav_R>
     b6c:	50 90 bf 20 	lds	r5, 0x20BF	; 0x8020bf <derr_mav_R+0x1>
     b70:	60 90 c0 20 	lds	r6, 0x20C0	; 0x8020c0 <derr_mav_R+0x2>
     b74:	70 90 c1 20 	lds	r7, 0x20C1	; 0x8020c1 <derr_mav_R+0x3>
     b78:	c0 90 a8 20 	lds	r12, 0x20A8	; 0x8020a8 <Ki_R>
     b7c:	d0 90 a9 20 	lds	r13, 0x20A9	; 0x8020a9 <Ki_R+0x1>
     b80:	e0 90 aa 20 	lds	r14, 0x20AA	; 0x8020aa <Ki_R+0x2>
     b84:	f0 90 ab 20 	lds	r15, 0x20AB	; 0x8020ab <Ki_R+0x3>
     b88:	20 91 c2 20 	lds	r18, 0x20C2	; 0x8020c2 <int_err_mav_R>
     b8c:	30 91 c3 20 	lds	r19, 0x20C3	; 0x8020c3 <int_err_mav_R+0x1>
     b90:	40 91 c4 20 	lds	r20, 0x20C4	; 0x8020c4 <int_err_mav_R+0x2>
     b94:	50 91 c5 20 	lds	r21, 0x20C5	; 0x8020c5 <int_err_mav_R+0x3>
     b98:	29 83       	std	Y+1, r18	; 0x01
     b9a:	3a 83       	std	Y+2, r19	; 0x02
     b9c:	4b 83       	std	Y+3, r20	; 0x03
     b9e:	5c 83       	std	Y+4, r21	; 0x04
     ba0:	2d 81       	ldd	r18, Y+5	; 0x05
     ba2:	3e 81       	ldd	r19, Y+6	; 0x06
     ba4:	4f 81       	ldd	r20, Y+7	; 0x07
     ba6:	58 85       	ldd	r21, Y+8	; 0x08
     ba8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     bac:	6d 83       	std	Y+5, r22	; 0x05
     bae:	7e 83       	std	Y+6, r23	; 0x06
     bb0:	8f 83       	std	Y+7, r24	; 0x07
     bb2:	98 87       	std	Y+8, r25	; 0x08
     bb4:	a3 01       	movw	r20, r6
     bb6:	92 01       	movw	r18, r4
     bb8:	c5 01       	movw	r24, r10
     bba:	b4 01       	movw	r22, r8
     bbc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     bc0:	9b 01       	movw	r18, r22
     bc2:	ac 01       	movw	r20, r24
     bc4:	6d 81       	ldd	r22, Y+5	; 0x05
     bc6:	7e 81       	ldd	r23, Y+6	; 0x06
     bc8:	8f 81       	ldd	r24, Y+7	; 0x07
     bca:	98 85       	ldd	r25, Y+8	; 0x08
     bcc:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
     bd0:	4b 01       	movw	r8, r22
     bd2:	5c 01       	movw	r10, r24
     bd4:	29 81       	ldd	r18, Y+1	; 0x01
     bd6:	3a 81       	ldd	r19, Y+2	; 0x02
     bd8:	4b 81       	ldd	r20, Y+3	; 0x03
     bda:	5c 81       	ldd	r21, Y+4	; 0x04
     bdc:	c7 01       	movw	r24, r14
     bde:	b6 01       	movw	r22, r12
     be0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     be4:	9b 01       	movw	r18, r22
     be6:	ac 01       	movw	r20, r24
     be8:	c5 01       	movw	r24, r10
     bea:	b4 01       	movw	r22, r8
     bec:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
     bf0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fixsfsi>
     bf4:	60 93 b0 20 	sts	0x20B0, r22	; 0x8020b0 <DuC_R>
     bf8:	70 93 b1 20 	sts	0x20B1, r23	; 0x8020b1 <DuC_R+0x1>
	
	DuC_R = saturacija(DuC_R, MAX_DuC);
     bfc:	60 91 b0 20 	lds	r22, 0x20B0	; 0x8020b0 <DuC_R>
     c00:	70 91 b1 20 	lds	r23, 0x20B1	; 0x8020b1 <DuC_R+0x1>
     c04:	07 2e       	mov	r0, r23
     c06:	00 0c       	add	r0, r0
     c08:	88 0b       	sbc	r24, r24
     c0a:	99 0b       	sbc	r25, r25
     c0c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__floatsisf>
     c10:	6b 01       	movw	r12, r22
     c12:	7c 01       	movw	r14, r24
}


float saturacija(float a, float max)
{
	if (a>max)
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	4a e7       	ldi	r20, 0x7A	; 122
     c1a:	55 e4       	ldi	r21, 0x45	; 69
     c1c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     c20:	18 16       	cp	r1, r24
     c22:	5c f0       	brlt	.+22     	; 0xc3a <robot_velocity_control+0x2ee>
		return max;
	else if (a < -max)
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	4a e7       	ldi	r20, 0x7A	; 122
     c2a:	55 ec       	ldi	r21, 0xC5	; 197
     c2c:	c7 01       	movw	r24, r14
     c2e:	b6 01       	movw	r22, r12
     c30:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
     c34:	88 23       	and	r24, r24
     c36:	94 f4       	brge	.+36     	; 0xc5c <robot_velocity_control+0x310>
     c38:	09 c0       	rjmp	.+18     	; 0xc4c <robot_velocity_control+0x300>


float saturacija(float a, float max)
{
	if (a>max)
		return max;
     c3a:	0f 2e       	mov	r0, r31
     c3c:	c1 2c       	mov	r12, r1
     c3e:	d1 2c       	mov	r13, r1
     c40:	fa e7       	ldi	r31, 0x7A	; 122
     c42:	ef 2e       	mov	r14, r31
     c44:	f5 e4       	ldi	r31, 0x45	; 69
     c46:	ff 2e       	mov	r15, r31
     c48:	f0 2d       	mov	r31, r0
     c4a:	08 c0       	rjmp	.+16     	; 0xc5c <robot_velocity_control+0x310>
	else if (a < -max)
		return -max;
     c4c:	0f 2e       	mov	r0, r31
     c4e:	c1 2c       	mov	r12, r1
     c50:	d1 2c       	mov	r13, r1
     c52:	fa e7       	ldi	r31, 0x7A	; 122
     c54:	ef 2e       	mov	r14, r31
     c56:	f5 ec       	ldi	r31, 0xC5	; 197
     c58:	ff 2e       	mov	r15, r31
     c5a:	f0 2d       	mov	r31, r0
	//int_err_mav_R = saturacija(int_err_mav_R, 2000*sat_mav_R);	//seljacki pokusaj zastite od wind up-a
	
	
	DuC_R = (int)(Kp_R*err_mav_R + Kd_R * derr_mav_R + Ki_R*int_err_mav_R);// + 7*( fi_e + 0.5 * fi_Ie ); //0.01 * fi_Ie
	
	DuC_R = saturacija(DuC_R, MAX_DuC);
     c5c:	c7 01       	movw	r24, r14
     c5e:	b6 01       	movw	r22, r12
     c60:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fixsfsi>
     c64:	60 93 b0 20 	sts	0x20B0, r22	; 0x8020b0 <DuC_R>
     c68:	70 93 b1 20 	sts	0x20B1, r23	; 0x8020b1 <DuC_R+0x1>
	if(DuC_R == MAX_DuC)
     c6c:	60 91 b0 20 	lds	r22, 0x20B0	; 0x8020b0 <DuC_R>
     c70:	70 91 b1 20 	lds	r23, 0x20B1	; 0x8020b1 <DuC_R+0x1>
     c74:	07 2e       	mov	r0, r23
     c76:	00 0c       	add	r0, r0
     c78:	88 0b       	sbc	r24, r24
     c7a:	99 0b       	sbc	r25, r25
     c7c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__floatsisf>
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4a e7       	ldi	r20, 0x7A	; 122
     c86:	55 e4       	ldi	r21, 0x45	; 69
     c88:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
     c8c:	81 11       	cpse	r24, r1
     c8e:	1a c0       	rjmp	.+52     	; 0xcc4 <robot_velocity_control+0x378>
		int_err_mav_R -= err_mav_R;		//moj pokusaj anti wind up-a, za sad radi savrseno.
     c90:	20 91 c6 20 	lds	r18, 0x20C6	; 0x8020c6 <err_mav_R>
     c94:	30 91 c7 20 	lds	r19, 0x20C7	; 0x8020c7 <err_mav_R+0x1>
     c98:	40 91 c8 20 	lds	r20, 0x20C8	; 0x8020c8 <err_mav_R+0x2>
     c9c:	50 91 c9 20 	lds	r21, 0x20C9	; 0x8020c9 <err_mav_R+0x3>
     ca0:	60 91 c2 20 	lds	r22, 0x20C2	; 0x8020c2 <int_err_mav_R>
     ca4:	70 91 c3 20 	lds	r23, 0x20C3	; 0x8020c3 <int_err_mav_R+0x1>
     ca8:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <int_err_mav_R+0x2>
     cac:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <int_err_mav_R+0x3>
     cb0:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
     cb4:	60 93 c2 20 	sts	0x20C2, r22	; 0x8020c2 <int_err_mav_R>
     cb8:	70 93 c3 20 	sts	0x20C3, r23	; 0x8020c3 <int_err_mav_R+0x1>
     cbc:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <int_err_mav_R+0x2>
     cc0:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <int_err_mav_R+0x3>
										//Opis: ako je vec maksimalno upravljanje(Max Duc Pwm 4000 = preopterecenje), prestani sa uvecavanjem integralne greske 
	
	
	
	des_mav_L = saturacija(des_mav_L, max_mav_L);		
     cc4:	c0 90 80 20 	lds	r12, 0x2080	; 0x802080 <max_mav_L>
     cc8:	d0 90 81 20 	lds	r13, 0x2081	; 0x802081 <max_mav_L+0x1>
     ccc:	e0 90 82 20 	lds	r14, 0x2082	; 0x802082 <max_mav_L+0x2>
     cd0:	f0 90 83 20 	lds	r15, 0x2083	; 0x802083 <max_mav_L+0x3>
     cd4:	80 90 9c 20 	lds	r8, 0x209C	; 0x80209c <des_mav_L>
     cd8:	90 90 9d 20 	lds	r9, 0x209D	; 0x80209d <des_mav_L+0x1>
     cdc:	a0 90 9e 20 	lds	r10, 0x209E	; 0x80209e <des_mav_L+0x2>
     ce0:	b0 90 9f 20 	lds	r11, 0x209F	; 0x80209f <des_mav_L+0x3>
}


float saturacija(float a, float max)
{
	if (a>max)
     ce4:	a5 01       	movw	r20, r10
     ce6:	94 01       	movw	r18, r8
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
     cf0:	88 23       	and	r24, r24
     cf2:	74 f0       	brlt	.+28     	; 0xd10 <robot_velocity_control+0x3c4>
		return max;
	else if (a < -max)
     cf4:	f7 fa       	bst	r15, 7
     cf6:	f0 94       	com	r15
     cf8:	f7 f8       	bld	r15, 7
     cfa:	f0 94       	com	r15
     cfc:	a7 01       	movw	r20, r14
     cfe:	96 01       	movw	r18, r12
     d00:	c5 01       	movw	r24, r10
     d02:	b4 01       	movw	r22, r8
     d04:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
     d08:	88 23       	and	r24, r24
     d0a:	14 f0       	brlt	.+4      	; 0xd10 <robot_velocity_control+0x3c4>
		return -max;
	else
		return a;	
     d0c:	75 01       	movw	r14, r10
     d0e:	64 01       	movw	r12, r8
		int_err_mav_R -= err_mav_R;		//moj pokusaj anti wind up-a, za sad radi savrseno.
										//Opis: ako je vec maksimalno upravljanje(Max Duc Pwm 4000 = preopterecenje), prestani sa uvecavanjem integralne greske 
	
	
	
	des_mav_L = saturacija(des_mav_L, max_mav_L);		
     d10:	c0 92 9c 20 	sts	0x209C, r12	; 0x80209c <des_mav_L>
     d14:	d0 92 9d 20 	sts	0x209D, r13	; 0x80209d <des_mav_L+0x1>
     d18:	e0 92 9e 20 	sts	0x209E, r14	; 0x80209e <des_mav_L+0x2>
     d1c:	f0 92 9f 20 	sts	0x209F, r15	; 0x80209f <des_mav_L+0x3>
	ref_mav_L = trapez(ref_mav_L, des_mav_L, des_maa_L);	
     d20:	40 90 98 20 	lds	r4, 0x2098	; 0x802098 <des_maa_L>
     d24:	50 90 99 20 	lds	r5, 0x2099	; 0x802099 <des_maa_L+0x1>
     d28:	60 90 9a 20 	lds	r6, 0x209A	; 0x80209a <des_maa_L+0x2>
     d2c:	70 90 9b 20 	lds	r7, 0x209B	; 0x80209b <des_maa_L+0x3>
     d30:	c0 90 9c 20 	lds	r12, 0x209C	; 0x80209c <des_mav_L>
     d34:	d0 90 9d 20 	lds	r13, 0x209D	; 0x80209d <des_mav_L+0x1>
     d38:	e0 90 9e 20 	lds	r14, 0x209E	; 0x80209e <des_mav_L+0x2>
     d3c:	f0 90 9f 20 	lds	r15, 0x209F	; 0x80209f <des_mav_L+0x3>
     d40:	80 90 a0 20 	lds	r8, 0x20A0	; 0x8020a0 <ref_mav_L>
     d44:	90 90 a1 20 	lds	r9, 0x20A1	; 0x8020a1 <ref_mav_L+0x1>
     d48:	a0 90 a2 20 	lds	r10, 0x20A2	; 0x8020a2 <ref_mav_L+0x2>
     d4c:	b0 90 a3 20 	lds	r11, 0x20A3	; 0x8020a3 <ref_mav_L+0x3>
		return a;	
}

float trapez(float v, float v_des, float a)
{
	if (v < v_des - a)
     d50:	a3 01       	movw	r20, r6
     d52:	92 01       	movw	r18, r4
     d54:	c7 01       	movw	r24, r14
     d56:	b6 01       	movw	r22, r12
     d58:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
     d5c:	9b 01       	movw	r18, r22
     d5e:	ac 01       	movw	r20, r24
     d60:	c5 01       	movw	r24, r10
     d62:	b4 01       	movw	r22, r8
     d64:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
     d68:	88 23       	and	r24, r24
     d6a:	4c f4       	brge	.+18     	; 0xd7e <robot_velocity_control+0x432>
		return v+a;
     d6c:	a5 01       	movw	r20, r10
     d6e:	94 01       	movw	r18, r8
     d70:	c3 01       	movw	r24, r6
     d72:	b2 01       	movw	r22, r4
     d74:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
     d78:	6b 01       	movw	r12, r22
     d7a:	7c 01       	movw	r14, r24
     d7c:	16 c0       	rjmp	.+44     	; 0xdaa <robot_velocity_control+0x45e>
	else if (v > v_des + a)
     d7e:	a7 01       	movw	r20, r14
     d80:	96 01       	movw	r18, r12
     d82:	c3 01       	movw	r24, r6
     d84:	b2 01       	movw	r22, r4
     d86:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
     d8a:	9b 01       	movw	r18, r22
     d8c:	ac 01       	movw	r20, r24
     d8e:	c5 01       	movw	r24, r10
     d90:	b4 01       	movw	r22, r8
     d92:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     d96:	18 16       	cp	r1, r24
     d98:	44 f4       	brge	.+16     	; 0xdaa <robot_velocity_control+0x45e>
		return v-a;
     d9a:	a3 01       	movw	r20, r6
     d9c:	92 01       	movw	r18, r4
     d9e:	c5 01       	movw	r24, r10
     da0:	b4 01       	movw	r22, r8
     da2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
     da6:	6b 01       	movw	r12, r22
     da8:	7c 01       	movw	r14, r24
										//Opis: ako je vec maksimalno upravljanje(Max Duc Pwm 4000 = preopterecenje), prestani sa uvecavanjem integralne greske 
	
	
	
	des_mav_L = saturacija(des_mav_L, max_mav_L);		
	ref_mav_L = trapez(ref_mav_L, des_mav_L, des_maa_L);	
     daa:	c0 92 a0 20 	sts	0x20A0, r12	; 0x8020a0 <ref_mav_L>
     dae:	d0 92 a1 20 	sts	0x20A1, r13	; 0x8020a1 <ref_mav_L+0x1>
     db2:	e0 92 a2 20 	sts	0x20A2, r14	; 0x8020a2 <ref_mav_L+0x2>
     db6:	f0 92 a3 20 	sts	0x20A3, r15	; 0x8020a3 <ref_mav_L+0x3>
	err_mav_L = ref_mav_L - motor_angular_velocity_L;
     dba:	c0 90 a0 20 	lds	r12, 0x20A0	; 0x8020a0 <ref_mav_L>
     dbe:	d0 90 a1 20 	lds	r13, 0x20A1	; 0x8020a1 <ref_mav_L+0x1>
     dc2:	e0 90 a2 20 	lds	r14, 0x20A2	; 0x8020a2 <ref_mav_L+0x2>
     dc6:	f0 90 a3 20 	lds	r15, 0x20A3	; 0x8020a3 <ref_mav_L+0x3>
     dca:	60 91 df 20 	lds	r22, 0x20DF	; 0x8020df <motor_angular_velocity_L>
     dce:	70 91 e0 20 	lds	r23, 0x20E0	; 0x8020e0 <motor_angular_velocity_L+0x1>
     dd2:	07 2e       	mov	r0, r23
     dd4:	00 0c       	add	r0, r0
     dd6:	88 0b       	sbc	r24, r24
     dd8:	99 0b       	sbc	r25, r25
     dda:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__floatsisf>
     dde:	9b 01       	movw	r18, r22
     de0:	ac 01       	movw	r20, r24
     de2:	c7 01       	movw	r24, r14
     de4:	b6 01       	movw	r22, r12
     de6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
     dea:	60 93 94 20 	sts	0x2094, r22	; 0x802094 <err_mav_L>
     dee:	70 93 95 20 	sts	0x2095, r23	; 0x802095 <err_mav_L+0x1>
     df2:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <err_mav_L+0x2>
     df6:	90 93 97 20 	sts	0x2097, r25	; 0x802097 <err_mav_L+0x3>
	int_err_mav_L += err_mav_L;
     dfa:	60 91 94 20 	lds	r22, 0x2094	; 0x802094 <err_mav_L>
     dfe:	70 91 95 20 	lds	r23, 0x2095	; 0x802095 <err_mav_L+0x1>
     e02:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <err_mav_L+0x2>
     e06:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <err_mav_L+0x3>
     e0a:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <int_err_mav_L>
     e0e:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <int_err_mav_L+0x1>
     e12:	40 91 92 20 	lds	r20, 0x2092	; 0x802092 <int_err_mav_L+0x2>
     e16:	50 91 93 20 	lds	r21, 0x2093	; 0x802093 <int_err_mav_L+0x3>
     e1a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
     e1e:	60 93 90 20 	sts	0x2090, r22	; 0x802090 <int_err_mav_L>
     e22:	70 93 91 20 	sts	0x2091, r23	; 0x802091 <int_err_mav_L+0x1>
     e26:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <int_err_mav_L+0x2>
     e2a:	90 93 93 20 	sts	0x2093, r25	; 0x802093 <int_err_mav_L+0x3>
	derr_mav_L = err_mav_L - prev_err_mav_L;
     e2e:	60 91 94 20 	lds	r22, 0x2094	; 0x802094 <err_mav_L>
     e32:	70 91 95 20 	lds	r23, 0x2095	; 0x802095 <err_mav_L+0x1>
     e36:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <err_mav_L+0x2>
     e3a:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <err_mav_L+0x3>
     e3e:	20 91 88 20 	lds	r18, 0x2088	; 0x802088 <prev_err_mav_L>
     e42:	30 91 89 20 	lds	r19, 0x2089	; 0x802089 <prev_err_mav_L+0x1>
     e46:	40 91 8a 20 	lds	r20, 0x208A	; 0x80208a <prev_err_mav_L+0x2>
     e4a:	50 91 8b 20 	lds	r21, 0x208B	; 0x80208b <prev_err_mav_L+0x3>
     e4e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
     e52:	60 93 8c 20 	sts	0x208C, r22	; 0x80208c <derr_mav_L>
     e56:	70 93 8d 20 	sts	0x208D, r23	; 0x80208d <derr_mav_L+0x1>
     e5a:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <derr_mav_L+0x2>
     e5e:	90 93 8f 20 	sts	0x208F, r25	; 0x80208f <derr_mav_L+0x3>
	prev_err_mav_L = err_mav_L;	
     e62:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <err_mav_L>
     e66:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <err_mav_L+0x1>
     e6a:	a0 91 96 20 	lds	r26, 0x2096	; 0x802096 <err_mav_L+0x2>
     e6e:	b0 91 97 20 	lds	r27, 0x2097	; 0x802097 <err_mav_L+0x3>
     e72:	80 93 88 20 	sts	0x2088, r24	; 0x802088 <prev_err_mav_L>
     e76:	90 93 89 20 	sts	0x2089, r25	; 0x802089 <prev_err_mav_L+0x1>
     e7a:	a0 93 8a 20 	sts	0x208A, r26	; 0x80208a <prev_err_mav_L+0x2>
     e7e:	b0 93 8b 20 	sts	0x208B, r27	; 0x80208b <prev_err_mav_L+0x3>
	//int_err_mav_L = saturacija(int_err_mav_L, 2000*sat_mav_L); //seljacki pokusaj zastite od wind up-a	
		
	DuC_L = (int)(Kp_L*err_mav_L + Kd_L * derr_mav_L + Ki_L*int_err_mav_L);// - 7*( fi_e + 0.5 * fi_Ie );		//prvoeri znakove za peglanje ugla; prvereno, u redu su
     e82:	60 91 7a 20 	lds	r22, 0x207A	; 0x80207a <Kp_L>
     e86:	70 91 7b 20 	lds	r23, 0x207B	; 0x80207b <Kp_L+0x1>
     e8a:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <Kp_L+0x2>
     e8e:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <Kp_L+0x3>
     e92:	20 91 94 20 	lds	r18, 0x2094	; 0x802094 <err_mav_L>
     e96:	30 91 95 20 	lds	r19, 0x2095	; 0x802095 <err_mav_L+0x1>
     e9a:	40 91 96 20 	lds	r20, 0x2096	; 0x802096 <err_mav_L+0x2>
     e9e:	50 91 97 20 	lds	r21, 0x2097	; 0x802097 <err_mav_L+0x3>
     ea2:	2d 83       	std	Y+5, r18	; 0x05
     ea4:	3e 83       	std	Y+6, r19	; 0x06
     ea6:	4f 83       	std	Y+7, r20	; 0x07
     ea8:	58 87       	std	Y+8, r21	; 0x08
     eaa:	80 90 72 20 	lds	r8, 0x2072	; 0x802072 <Kd_L>
     eae:	90 90 73 20 	lds	r9, 0x2073	; 0x802073 <Kd_L+0x1>
     eb2:	a0 90 74 20 	lds	r10, 0x2074	; 0x802074 <Kd_L+0x2>
     eb6:	b0 90 75 20 	lds	r11, 0x2075	; 0x802075 <Kd_L+0x3>
     eba:	40 90 8c 20 	lds	r4, 0x208C	; 0x80208c <derr_mav_L>
     ebe:	50 90 8d 20 	lds	r5, 0x208D	; 0x80208d <derr_mav_L+0x1>
     ec2:	60 90 8e 20 	lds	r6, 0x208E	; 0x80208e <derr_mav_L+0x2>
     ec6:	70 90 8f 20 	lds	r7, 0x208F	; 0x80208f <derr_mav_L+0x3>
     eca:	c0 90 76 20 	lds	r12, 0x2076	; 0x802076 <Ki_L>
     ece:	d0 90 77 20 	lds	r13, 0x2077	; 0x802077 <Ki_L+0x1>
     ed2:	e0 90 78 20 	lds	r14, 0x2078	; 0x802078 <Ki_L+0x2>
     ed6:	f0 90 79 20 	lds	r15, 0x2079	; 0x802079 <Ki_L+0x3>
     eda:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <int_err_mav_L>
     ede:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <int_err_mav_L+0x1>
     ee2:	40 91 92 20 	lds	r20, 0x2092	; 0x802092 <int_err_mav_L+0x2>
     ee6:	50 91 93 20 	lds	r21, 0x2093	; 0x802093 <int_err_mav_L+0x3>
     eea:	29 83       	std	Y+1, r18	; 0x01
     eec:	3a 83       	std	Y+2, r19	; 0x02
     eee:	4b 83       	std	Y+3, r20	; 0x03
     ef0:	5c 83       	std	Y+4, r21	; 0x04
     ef2:	2d 81       	ldd	r18, Y+5	; 0x05
     ef4:	3e 81       	ldd	r19, Y+6	; 0x06
     ef6:	4f 81       	ldd	r20, Y+7	; 0x07
     ef8:	58 85       	ldd	r21, Y+8	; 0x08
     efa:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     efe:	6d 83       	std	Y+5, r22	; 0x05
     f00:	7e 83       	std	Y+6, r23	; 0x06
     f02:	8f 83       	std	Y+7, r24	; 0x07
     f04:	98 87       	std	Y+8, r25	; 0x08
     f06:	a3 01       	movw	r20, r6
     f08:	92 01       	movw	r18, r4
     f0a:	c5 01       	movw	r24, r10
     f0c:	b4 01       	movw	r22, r8
     f0e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     f12:	9b 01       	movw	r18, r22
     f14:	ac 01       	movw	r20, r24
     f16:	6d 81       	ldd	r22, Y+5	; 0x05
     f18:	7e 81       	ldd	r23, Y+6	; 0x06
     f1a:	8f 81       	ldd	r24, Y+7	; 0x07
     f1c:	98 85       	ldd	r25, Y+8	; 0x08
     f1e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
     f22:	4b 01       	movw	r8, r22
     f24:	5c 01       	movw	r10, r24
     f26:	29 81       	ldd	r18, Y+1	; 0x01
     f28:	3a 81       	ldd	r19, Y+2	; 0x02
     f2a:	4b 81       	ldd	r20, Y+3	; 0x03
     f2c:	5c 81       	ldd	r21, Y+4	; 0x04
     f2e:	c7 01       	movw	r24, r14
     f30:	b6 01       	movw	r22, r12
     f32:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     f36:	9b 01       	movw	r18, r22
     f38:	ac 01       	movw	r20, r24
     f3a:	c5 01       	movw	r24, r10
     f3c:	b4 01       	movw	r22, r8
     f3e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
     f42:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fixsfsi>
     f46:	60 93 7e 20 	sts	0x207E, r22	; 0x80207e <DuC_L>
     f4a:	70 93 7f 20 	sts	0x207F, r23	; 0x80207f <DuC_L+0x1>
	if(DuC_L == MAX_DuC)
     f4e:	60 91 7e 20 	lds	r22, 0x207E	; 0x80207e <DuC_L>
     f52:	70 91 7f 20 	lds	r23, 0x207F	; 0x80207f <DuC_L+0x1>
     f56:	07 2e       	mov	r0, r23
     f58:	00 0c       	add	r0, r0
     f5a:	88 0b       	sbc	r24, r24
     f5c:	99 0b       	sbc	r25, r25
     f5e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__floatsisf>
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	4a e7       	ldi	r20, 0x7A	; 122
     f68:	55 e4       	ldi	r21, 0x45	; 69
     f6a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
     f6e:	81 11       	cpse	r24, r1
     f70:	1a c0       	rjmp	.+52     	; 0xfa6 <robot_velocity_control+0x65a>
		int_err_mav_L -= err_mav_L;		//moj pokusaj anti wind up-a, za sad radi savrseno.
     f72:	20 91 94 20 	lds	r18, 0x2094	; 0x802094 <err_mav_L>
     f76:	30 91 95 20 	lds	r19, 0x2095	; 0x802095 <err_mav_L+0x1>
     f7a:	40 91 96 20 	lds	r20, 0x2096	; 0x802096 <err_mav_L+0x2>
     f7e:	50 91 97 20 	lds	r21, 0x2097	; 0x802097 <err_mav_L+0x3>
     f82:	60 91 90 20 	lds	r22, 0x2090	; 0x802090 <int_err_mav_L>
     f86:	70 91 91 20 	lds	r23, 0x2091	; 0x802091 <int_err_mav_L+0x1>
     f8a:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <int_err_mav_L+0x2>
     f8e:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <int_err_mav_L+0x3>
     f92:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
     f96:	60 93 90 20 	sts	0x2090, r22	; 0x802090 <int_err_mav_L>
     f9a:	70 93 91 20 	sts	0x2091, r23	; 0x802091 <int_err_mav_L+0x1>
     f9e:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <int_err_mav_L+0x2>
     fa2:	90 93 93 20 	sts	0x2093, r25	; 0x802093 <int_err_mav_L+0x3>
										//Opis: ako je vec maksimalno upravljanje(Max Duc Pwm 4000 = preopterecenje), prestani sa uvecavanjem integralne greske
	
	if (DuC_R > 0) //direction 1
     fa6:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <DuC_R>
     faa:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <DuC_R+0x1>
     fae:	18 16       	cp	r1, r24
     fb0:	19 06       	cpc	r1, r25
     fb2:	7c f4       	brge	.+30     	; 0xfd2 <robot_velocity_control+0x686>
	{
		PORT_ClearPins(&PORTH, 0b00001000);	//IN_B1=0 //dir1
     fb4:	e0 ee       	ldi	r30, 0xE0	; 224
     fb6:	f6 e0       	ldi	r31, 0x06	; 6
     fb8:	88 e0       	ldi	r24, 0x08	; 8
     fba:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00000001);	//IN_A1=1 //dir1
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCABUF = DuC_R;//PWM duty cicle
     fc0:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <DuC_R>
     fc4:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <DuC_R+0x1>
     fc8:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <__TEXT_REGION_LENGTH__+0x700b78>
     fcc:	90 93 79 0b 	sts	0x0B79, r25	; 0x800b79 <__TEXT_REGION_LENGTH__+0x700b79>
     fd0:	1b c0       	rjmp	.+54     	; 0x1008 <robot_velocity_control+0x6bc>
	}
	else if (DuC_R < 0)	//direction 2
     fd2:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <DuC_R>
     fd6:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <DuC_R+0x1>
     fda:	99 23       	and	r25, r25
     fdc:	94 f4       	brge	.+36     	; 0x1002 <robot_velocity_control+0x6b6>
	{
		PORT_ClearPins(&PORTH, 0b00000001);	//IN_A1=0 //dir2
     fde:	e0 ee       	ldi	r30, 0xE0	; 224
     fe0:	f6 e0       	ldi	r31, 0x06	; 6
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00001000);	//IN_B1=1 //dir2
     fe6:	88 e0       	ldi	r24, 0x08	; 8
     fe8:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCABUF = - DuC_R;
     fea:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <DuC_R>
     fee:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <DuC_R+0x1>
     ff2:	91 95       	neg	r25
     ff4:	81 95       	neg	r24
     ff6:	91 09       	sbc	r25, r1
     ff8:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <__TEXT_REGION_LENGTH__+0x700b78>
     ffc:	90 93 79 0b 	sts	0x0B79, r25	; 0x800b79 <__TEXT_REGION_LENGTH__+0x700b79>
    1000:	03 c0       	rjmp	.+6      	; 0x1008 <robot_velocity_control+0x6bc>
	}
	else //break
	PORT_ClearPins(&PORTH, 0b00001001);	//IN_A1=0, IN_B1=0
    1002:	89 e0       	ldi	r24, 0x09	; 9
    1004:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
	
	//left wheel
	if (DuC_L < 0)	//direction 1
    1008:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <DuC_L>
    100c:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <DuC_L+0x1>
    1010:	99 23       	and	r25, r25
    1012:	94 f4       	brge	.+36     	; 0x1038 <robot_velocity_control+0x6ec>
	{
		PORT_ClearPins(&PORTH, 0b00010000);	//IN_A2=0
    1014:	e0 ee       	ldi	r30, 0xE0	; 224
    1016:	f6 e0       	ldi	r31, 0x06	; 6
    1018:	80 e1       	ldi	r24, 0x10	; 16
    101a:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b10000000);	//IN_B2=1
    101c:	80 e8       	ldi	r24, 0x80	; 128
    101e:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCBBUF = -DuC_L;
    1020:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <DuC_L>
    1024:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <DuC_L+0x1>
    1028:	91 95       	neg	r25
    102a:	81 95       	neg	r24
    102c:	91 09       	sbc	r25, r1
    102e:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <__TEXT_REGION_LENGTH__+0x700b7a>
    1032:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <__TEXT_REGION_LENGTH__+0x700b7b>
    1036:	19 c0       	rjmp	.+50     	; 0x106a <robot_velocity_control+0x71e>
	}
	else if (DuC_L > 0)	//direction 2
    1038:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <DuC_L>
    103c:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <DuC_L+0x1>
    1040:	18 16       	cp	r1, r24
    1042:	19 06       	cpc	r1, r25
    1044:	7c f4       	brge	.+30     	; 0x1064 <robot_velocity_control+0x718>
	{
		PORT_ClearPins(&PORTH, 0b10000000);	//IN_B2=0
    1046:	e0 ee       	ldi	r30, 0xE0	; 224
    1048:	f6 e0       	ldi	r31, 0x06	; 6
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00010000);	//IN_A2=1,
    104e:	80 e1       	ldi	r24, 0x10	; 16
    1050:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCBBUF =  DuC_L;
    1052:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <DuC_L>
    1056:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <DuC_L+0x1>
    105a:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <__TEXT_REGION_LENGTH__+0x700b7a>
    105e:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <__TEXT_REGION_LENGTH__+0x700b7b>
    1062:	03 c0       	rjmp	.+6      	; 0x106a <robot_velocity_control+0x71e>
	}
	else	//break
	PORT_ClearPins(&PORTH, 0b10010000);	//IN_A2=0, IN_B2=0
    1064:	80 e9       	ldi	r24, 0x90	; 144
    1066:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
	
	
}
    106a:	28 96       	adiw	r28, 0x08	; 8
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	bf 90       	pop	r11
    107e:	af 90       	pop	r10
    1080:	9f 90       	pop	r9
    1082:	8f 90       	pop	r8
    1084:	7f 90       	pop	r7
    1086:	6f 90       	pop	r6
    1088:	5f 90       	pop	r5
    108a:	4f 90       	pop	r4
    108c:	08 95       	ret

0000108e <robot_position_control>:
	
void robot_position_control()
{
    108e:	8f 92       	push	r8
    1090:	9f 92       	push	r9
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
	//moja funkcija
	
	xe = Xd_mm - X_mm;  //zeljeno - mereno
    109e:	60 91 2d 21 	lds	r22, 0x212D	; 0x80212d <Xd_mm>
    10a2:	70 91 2e 21 	lds	r23, 0x212E	; 0x80212e <Xd_mm+0x1>
    10a6:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <Xd_mm+0x2>
    10aa:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <Xd_mm+0x3>
    10ae:	20 91 5e 20 	lds	r18, 0x205E	; 0x80205e <X_mm>
    10b2:	30 91 5f 20 	lds	r19, 0x205F	; 0x80205f <X_mm+0x1>
    10b6:	40 91 60 20 	lds	r20, 0x2060	; 0x802060 <X_mm+0x2>
    10ba:	50 91 61 20 	lds	r21, 0x2061	; 0x802061 <X_mm+0x3>
    10be:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
    10c2:	60 93 e3 20 	sts	0x20E3, r22	; 0x8020e3 <xe>
    10c6:	70 93 e4 20 	sts	0x20E4, r23	; 0x8020e4 <xe+0x1>
    10ca:	80 93 e5 20 	sts	0x20E5, r24	; 0x8020e5 <xe+0x2>
    10ce:	90 93 e6 20 	sts	0x20E6, r25	; 0x8020e6 <xe+0x3>
	
	
	
	fi_e = fid_deg - fi_deg;	//zadato - mereno; greska u uglu
    10d2:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <fid_deg>
    10d6:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <fid_deg+0x1>
    10da:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <fid_deg+0x2>
    10de:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <fid_deg+0x3>
    10e2:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <fi_deg>
    10e6:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <fi_deg+0x1>
    10ea:	40 91 68 20 	lds	r20, 0x2068	; 0x802068 <fi_deg+0x2>
    10ee:	50 91 69 20 	lds	r21, 0x2069	; 0x802069 <fi_deg+0x3>
    10f2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
    10f6:	60 93 ff 20 	sts	0x20FF, r22	; 0x8020ff <fi_e>
    10fa:	70 93 00 21 	sts	0x2100, r23	; 0x802100 <fi_e+0x1>
    10fe:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <fi_e+0x2>
    1102:	90 93 02 21 	sts	0x2102, r25	; 0x802102 <fi_e+0x3>
	
	fi_Ie += fi_e;		//integralna greska ugla
    1106:	60 91 ff 20 	lds	r22, 0x20FF	; 0x8020ff <fi_e>
    110a:	70 91 00 21 	lds	r23, 0x2100	; 0x802100 <fi_e+0x1>
    110e:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <fi_e+0x2>
    1112:	90 91 02 21 	lds	r25, 0x2102	; 0x802102 <fi_e+0x3>
    1116:	20 91 17 21 	lds	r18, 0x2117	; 0x802117 <fi_Ie>
    111a:	30 91 18 21 	lds	r19, 0x2118	; 0x802118 <fi_Ie+0x1>
    111e:	40 91 19 21 	lds	r20, 0x2119	; 0x802119 <fi_Ie+0x2>
    1122:	50 91 1a 21 	lds	r21, 0x211A	; 0x80211a <fi_Ie+0x3>
    1126:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
    112a:	60 93 17 21 	sts	0x2117, r22	; 0x802117 <fi_Ie>
    112e:	70 93 18 21 	sts	0x2118, r23	; 0x802118 <fi_Ie+0x1>
    1132:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <fi_Ie+0x2>
    1136:	90 93 1a 21 	sts	0x211A, r25	; 0x80211a <fi_Ie+0x3>
	fi_Ie = saturacija(fi_Ie, 45);  //recimo ovako da ogranicim integralnu gresku na 45 stepeni
    113a:	c0 90 17 21 	lds	r12, 0x2117	; 0x802117 <fi_Ie>
    113e:	d0 90 18 21 	lds	r13, 0x2118	; 0x802118 <fi_Ie+0x1>
    1142:	e0 90 19 21 	lds	r14, 0x2119	; 0x802119 <fi_Ie+0x2>
    1146:	f0 90 1a 21 	lds	r15, 0x211A	; 0x80211a <fi_Ie+0x3>
}


float saturacija(float a, float max)
{
	if (a>max)
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	44 e3       	ldi	r20, 0x34	; 52
    1150:	52 e4       	ldi	r21, 0x42	; 66
    1152:	c7 01       	movw	r24, r14
    1154:	b6 01       	movw	r22, r12
    1156:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    115a:	18 16       	cp	r1, r24
    115c:	5c f0       	brlt	.+22     	; 0x1174 <robot_position_control+0xe6>
		return max;
	else if (a < -max)
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	44 e3       	ldi	r20, 0x34	; 52
    1164:	52 ec       	ldi	r21, 0xC2	; 194
    1166:	c7 01       	movw	r24, r14
    1168:	b6 01       	movw	r22, r12
    116a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
    116e:	88 23       	and	r24, r24
    1170:	94 f4       	brge	.+36     	; 0x1196 <robot_position_control+0x108>
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <robot_position_control+0xf8>


float saturacija(float a, float max)
{
	if (a>max)
		return max;
    1174:	0f 2e       	mov	r0, r31
    1176:	c1 2c       	mov	r12, r1
    1178:	d1 2c       	mov	r13, r1
    117a:	f4 e3       	ldi	r31, 0x34	; 52
    117c:	ef 2e       	mov	r14, r31
    117e:	f2 e4       	ldi	r31, 0x42	; 66
    1180:	ff 2e       	mov	r15, r31
    1182:	f0 2d       	mov	r31, r0
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <robot_position_control+0x108>
	else if (a < -max)
		return -max;
    1186:	0f 2e       	mov	r0, r31
    1188:	c1 2c       	mov	r12, r1
    118a:	d1 2c       	mov	r13, r1
    118c:	f4 e3       	ldi	r31, 0x34	; 52
    118e:	ef 2e       	mov	r14, r31
    1190:	f2 ec       	ldi	r31, 0xC2	; 194
    1192:	ff 2e       	mov	r15, r31
    1194:	f0 2d       	mov	r31, r0
	
	
	fi_e = fid_deg - fi_deg;	//zadato - mereno; greska u uglu
	
	fi_Ie += fi_e;		//integralna greska ugla
	fi_Ie = saturacija(fi_Ie, 45);  //recimo ovako da ogranicim integralnu gresku na 45 stepeni
    1196:	c0 92 17 21 	sts	0x2117, r12	; 0x802117 <fi_Ie>
    119a:	d0 92 18 21 	sts	0x2118, r13	; 0x802118 <fi_Ie+0x1>
    119e:	e0 92 19 21 	sts	0x2119, r14	; 0x802119 <fi_Ie+0x2>
    11a2:	f0 92 1a 21 	sts	0x211A, r15	; 0x80211a <fi_Ie+0x3>
	
	//za sada samo poziciju da regulise
	//max 30-ak
	//pozicioni regulator zadaje brzinu. Brzinski zadaje Duc
	des_mav_L = (0.05*xe) - (0.2 * fi_e);
    11a6:	60 91 e3 20 	lds	r22, 0x20E3	; 0x8020e3 <xe>
    11aa:	70 91 e4 20 	lds	r23, 0x20E4	; 0x8020e4 <xe+0x1>
    11ae:	80 91 e5 20 	lds	r24, 0x20E5	; 0x8020e5 <xe+0x2>
    11b2:	90 91 e6 20 	lds	r25, 0x20E6	; 0x8020e6 <xe+0x3>
    11b6:	80 90 ff 20 	lds	r8, 0x20FF	; 0x8020ff <fi_e>
    11ba:	90 90 00 21 	lds	r9, 0x2100	; 0x802100 <fi_e+0x1>
    11be:	a0 90 01 21 	lds	r10, 0x2101	; 0x802101 <fi_e+0x2>
    11c2:	b0 90 02 21 	lds	r11, 0x2102	; 0x802102 <fi_e+0x3>
    11c6:	2d ec       	ldi	r18, 0xCD	; 205
    11c8:	3c ec       	ldi	r19, 0xCC	; 204
    11ca:	4c e4       	ldi	r20, 0x4C	; 76
    11cc:	5d e3       	ldi	r21, 0x3D	; 61
    11ce:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    11d2:	6b 01       	movw	r12, r22
    11d4:	7c 01       	movw	r14, r24
    11d6:	2d ec       	ldi	r18, 0xCD	; 205
    11d8:	3c ec       	ldi	r19, 0xCC	; 204
    11da:	4c e4       	ldi	r20, 0x4C	; 76
    11dc:	5e e3       	ldi	r21, 0x3E	; 62
    11de:	c5 01       	movw	r24, r10
    11e0:	b4 01       	movw	r22, r8
    11e2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    11e6:	9b 01       	movw	r18, r22
    11e8:	ac 01       	movw	r20, r24
    11ea:	c7 01       	movw	r24, r14
    11ec:	b6 01       	movw	r22, r12
    11ee:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
    11f2:	60 93 9c 20 	sts	0x209C, r22	; 0x80209c <des_mav_L>
    11f6:	70 93 9d 20 	sts	0x209D, r23	; 0x80209d <des_mav_L+0x1>
    11fa:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <des_mav_L+0x2>
    11fe:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <des_mav_L+0x3>
	des_mav_R = (0.05*xe) + 0.2 * fi_e;
    1202:	60 91 e3 20 	lds	r22, 0x20E3	; 0x8020e3 <xe>
    1206:	70 91 e4 20 	lds	r23, 0x20E4	; 0x8020e4 <xe+0x1>
    120a:	80 91 e5 20 	lds	r24, 0x20E5	; 0x8020e5 <xe+0x2>
    120e:	90 91 e6 20 	lds	r25, 0x20E6	; 0x8020e6 <xe+0x3>
    1212:	80 90 ff 20 	lds	r8, 0x20FF	; 0x8020ff <fi_e>
    1216:	90 90 00 21 	lds	r9, 0x2100	; 0x802100 <fi_e+0x1>
    121a:	a0 90 01 21 	lds	r10, 0x2101	; 0x802101 <fi_e+0x2>
    121e:	b0 90 02 21 	lds	r11, 0x2102	; 0x802102 <fi_e+0x3>
    1222:	2d ec       	ldi	r18, 0xCD	; 205
    1224:	3c ec       	ldi	r19, 0xCC	; 204
    1226:	4c e4       	ldi	r20, 0x4C	; 76
    1228:	5d e3       	ldi	r21, 0x3D	; 61
    122a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    122e:	6b 01       	movw	r12, r22
    1230:	7c 01       	movw	r14, r24
    1232:	2d ec       	ldi	r18, 0xCD	; 205
    1234:	3c ec       	ldi	r19, 0xCC	; 204
    1236:	4c e4       	ldi	r20, 0x4C	; 76
    1238:	5e e3       	ldi	r21, 0x3E	; 62
    123a:	c5 01       	movw	r24, r10
    123c:	b4 01       	movw	r22, r8
    123e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    1242:	9b 01       	movw	r18, r22
    1244:	ac 01       	movw	r20, r24
    1246:	c7 01       	movw	r24, r14
    1248:	b6 01       	movw	r22, r12
    124a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
    124e:	60 93 ce 20 	sts	0x20CE, r22	; 0x8020ce <des_mav_R>
    1252:	70 93 cf 20 	sts	0x20CF, r23	; 0x8020cf <des_mav_R+0x1>
    1256:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <des_mav_R+0x2>
    125a:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <des_mav_R+0x3>
	
	
	robot_velocity_control();	
    125e:	0e 94 a6 04 	call	0x94c	; 0x94c <robot_velocity_control>
	
}
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	df 90       	pop	r13
    1268:	cf 90       	pop	r12
    126a:	bf 90       	pop	r11
    126c:	af 90       	pop	r10
    126e:	9f 90       	pop	r9
    1270:	8f 90       	pop	r8
    1272:	08 95       	ret

00001274 <add_event>:
		    //90
			break;	
		case TIMER_90S_EVENT:
			des_mav_L = 0;
			des_mav_R = 0;
			state = STATE_KRAJ;
    1274:	40 91 73 21 	lds	r20, 0x2173	; 0x802173 <queue_end>
    1278:	50 91 74 21 	lds	r21, 0x2174	; 0x802174 <queue_end+0x1>
    127c:	fa 01       	movw	r30, r20
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	e7 5b       	subi	r30, 0xB7	; 183
    1284:	fe 4d       	sbci	r31, 0xDE	; 222
    1286:	80 83       	st	Z, r24
    1288:	91 83       	std	Z+1, r25	; 0x01
    128a:	4f 5f       	subi	r20, 0xFF	; 255
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	9a 01       	movw	r18, r20
    1290:	ad ec       	ldi	r26, 0xCD	; 205
    1292:	bc ec       	ldi	r27, 0xCC	; 204
    1294:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__umulhisi3>
    1298:	96 95       	lsr	r25
    129a:	87 95       	ror	r24
    129c:	96 95       	lsr	r25
    129e:	87 95       	ror	r24
    12a0:	96 95       	lsr	r25
    12a2:	87 95       	ror	r24
    12a4:	9c 01       	movw	r18, r24
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	82 0f       	add	r24, r18
    12b8:	93 1f       	adc	r25, r19
    12ba:	48 1b       	sub	r20, r24
    12bc:	59 0b       	sbc	r21, r25
    12be:	40 93 73 21 	sts	0x2173, r20	; 0x802173 <queue_end>
    12c2:	50 93 74 21 	sts	0x2174, r21	; 0x802174 <queue_end+0x1>
    12c6:	08 95       	ret

000012c8 <get_event>:
    12c8:	cf 93       	push	r28
    12ca:	20 91 77 21 	lds	r18, 0x2177	; 0x802177 <queue_start>
    12ce:	30 91 78 21 	lds	r19, 0x2178	; 0x802178 <queue_start+0x1>
    12d2:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <queue_end>
    12d6:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <queue_end+0x1>
    12da:	82 17       	cp	r24, r18
    12dc:	93 07       	cpc	r25, r19
    12de:	51 f1       	breq	.+84     	; 0x1334 <get_event+0x6c>
    12e0:	f9 01       	movw	r30, r18
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	e7 5b       	subi	r30, 0xB7	; 183
    12e8:	fe 4d       	sbci	r31, 0xDE	; 222
    12ea:	c0 81       	ld	r28, Z
    12ec:	e1 81       	ldd	r30, Z+1	; 0x01
    12ee:	a9 01       	movw	r20, r18
    12f0:	4f 5f       	subi	r20, 0xFF	; 255
    12f2:	5f 4f       	sbci	r21, 0xFF	; 255
    12f4:	9a 01       	movw	r18, r20
    12f6:	ad ec       	ldi	r26, 0xCD	; 205
    12f8:	bc ec       	ldi	r27, 0xCC	; 204
    12fa:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__umulhisi3>
    12fe:	96 95       	lsr	r25
    1300:	87 95       	ror	r24
    1302:	96 95       	lsr	r25
    1304:	87 95       	ror	r24
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	9c 01       	movw	r18, r24
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	82 0f       	add	r24, r18
    131e:	93 1f       	adc	r25, r19
    1320:	9a 01       	movw	r18, r20
    1322:	28 1b       	sub	r18, r24
    1324:	39 0b       	sbc	r19, r25
    1326:	20 93 77 21 	sts	0x2177, r18	; 0x802177 <queue_start>
    132a:	30 93 78 21 	sts	0x2178, r19	; 0x802178 <queue_start+0x1>
    132e:	8c 2f       	mov	r24, r28
    1330:	9e 2f       	mov	r25, r30
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <get_event+0x70>
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	9f ef       	ldi	r25, 0xFF	; 255
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <timer_event>:
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	0d e5       	ldi	r16, 0x5D	; 93
    1346:	11 e2       	ldi	r17, 0x21	; 33
    1348:	c4 e6       	ldi	r28, 0x64	; 100
    134a:	d0 e0       	ldi	r29, 0x00	; 0
    134c:	f8 01       	movw	r30, r16
    134e:	81 91       	ld	r24, Z+
    1350:	91 91       	ld	r25, Z+
    1352:	a1 91       	ld	r26, Z+
    1354:	b1 91       	ld	r27, Z+
    1356:	8f 01       	movw	r16, r30
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	a1 05       	cpc	r26, r1
    135c:	b1 05       	cpc	r27, r1
    135e:	79 f0       	breq	.+30     	; 0x137e <timer_event+0x42>
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	a1 09       	sbc	r26, r1
    1364:	b1 09       	sbc	r27, r1
    1366:	34 97       	sbiw	r30, 0x04	; 4
    1368:	80 83       	st	Z, r24
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	a2 83       	std	Z+2, r26	; 0x02
    136e:	b3 83       	std	Z+3, r27	; 0x03
    1370:	89 2b       	or	r24, r25
    1372:	8a 2b       	or	r24, r26
    1374:	8b 2b       	or	r24, r27
    1376:	19 f4       	brne	.+6      	; 0x137e <timer_event+0x42>
    1378:	ce 01       	movw	r24, r28
    137a:	0e 94 3a 09 	call	0x1274	; 0x1274 <add_event>
    137e:	21 96       	adiw	r28, 0x01	; 1
    1380:	c9 36       	cpi	r28, 0x69	; 105
    1382:	d1 05       	cpc	r29, r1
    1384:	19 f7       	brne	.-58     	; 0x134c <timer_event+0x10>
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <pin_event>:
    1390:	cf 93       	push	r28
    1392:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <port_b>
    1396:	c0 91 28 06 	lds	r28, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    139a:	90 91 75 21 	lds	r25, 0x2175	; 0x802175 <port_b_old>
    139e:	98 27       	eor	r25, r24
    13a0:	c8 27       	eor	r28, r24
    13a2:	c0 95       	com	r28
    13a4:	c9 23       	and	r28, r25
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	8c 23       	and	r24, r28
    13aa:	21 f0       	breq	.+8      	; 0x13b4 <pin_event+0x24>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 3a 09 	call	0x1274	; 0x1274 <add_event>
    13b4:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <port_b>
    13b8:	82 70       	andi	r24, 0x02	; 2
    13ba:	8c 23       	and	r24, r28
    13bc:	21 f0       	breq	.+8      	; 0x13c6 <pin_event+0x36>
    13be:	83 e0       	ldi	r24, 0x03	; 3
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 3a 09 	call	0x1274	; 0x1274 <add_event>
    13c6:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <port_b>
    13ca:	84 70       	andi	r24, 0x04	; 4
    13cc:	c8 23       	and	r28, r24
    13ce:	21 f0       	breq	.+8      	; 0x13d8 <pin_event+0x48>
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 3a 09 	call	0x1274	; 0x1274 <add_event>
    13d8:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <port_b>
    13dc:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <port_b_old>
    13e0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    13e4:	80 93 76 21 	sts	0x2176, r24	; 0x802176 <port_b>
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <init_FSM>:
    13ec:	ed e5       	ldi	r30, 0x5D	; 93
    13ee:	f1 e2       	ldi	r31, 0x21	; 33
    13f0:	81 e7       	ldi	r24, 0x71	; 113
    13f2:	91 e2       	ldi	r25, 0x21	; 33
    13f4:	11 92       	st	Z+, r1
    13f6:	11 92       	st	Z+, r1
    13f8:	11 92       	st	Z+, r1
    13fa:	11 92       	st	Z+, r1
    13fc:	e8 17       	cp	r30, r24
    13fe:	f9 07       	cpc	r31, r25
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <init_FSM+0x8>
    1402:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <queue_end>
    1406:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <queue_end+0x1>
    140a:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <queue_start>
    140e:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <queue_start+0x1>
    1412:	8f ef       	ldi	r24, 0xFF	; 255
    1414:	80 93 76 21 	sts	0x2176, r24	; 0x802176 <port_b>
    1418:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <port_b_old>
    141c:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <state>
    1420:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <state+0x1>
    1424:	08 95       	ret

00001426 <start_proc>:
} 


void start_proc(int ev)
{
	switch (ev){
    1426:	89 2b       	or	r24, r25
    1428:	71 f5       	brne	.+92     	; 0x1486 <start_proc+0x60>
	return ev;
}

void set_timer(unsigned char timer_id, unsigned long int duration)
{
	timer[timer_id] = duration;
    142a:	80 e9       	ldi	r24, 0x90	; 144
    142c:	9f e5       	ldi	r25, 0x5F	; 95
    142e:	a1 e0       	ldi	r26, 0x01	; 1
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	80 93 5d 21 	sts	0x215D, r24	; 0x80215d <timer>
    1436:	90 93 5e 21 	sts	0x215E, r25	; 0x80215e <timer+0x1>
    143a:	a0 93 5f 21 	sts	0x215F, r26	; 0x80215f <timer+0x2>
    143e:	b0 93 60 21 	sts	0x2160, r27	; 0x802160 <timer+0x3>
{
	switch (ev){
		case EVENT_CINC:
			set_timer(TIMER_90S, 90000); //ms
			
			Xd_mm = 100;			//zeljeno
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a8 ec       	ldi	r26, 0xC8	; 200
    1448:	b2 e4       	ldi	r27, 0x42	; 66
    144a:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <Xd_mm>
    144e:	90 93 2e 21 	sts	0x212E, r25	; 0x80212e <Xd_mm+0x1>
    1452:	a0 93 2f 21 	sts	0x212F, r26	; 0x80212f <Xd_mm+0x2>
    1456:	b0 93 30 21 	sts	0x2130, r27	; 0x802130 <Xd_mm+0x3>
			Yd_mm = 0;
    145a:	10 92 eb 20 	sts	0x20EB, r1	; 0x8020eb <Yd_mm>
    145e:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <Yd_mm+0x1>
    1462:	10 92 ed 20 	sts	0x20ED, r1	; 0x8020ed <Yd_mm+0x2>
    1466:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <Yd_mm+0x3>
			fid_deg = 0;	//zeljeni ugao
    146a:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <fid_deg>
    146e:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <fid_deg+0x1>
    1472:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <fid_deg+0x2>
    1476:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <fid_deg+0x3>
			//des_mav_L = 0;	//10
			//des_mav_R = 0;
			state = STATE_NAPRED;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	80 93 71 21 	sts	0x2171, r24	; 0x802171 <state>
    1482:	90 93 72 21 	sts	0x2172, r25	; 0x802172 <state+0x1>
    1486:	08 95       	ret

00001488 <napred_proc>:
	}
}

void napred_proc(int ev)
{
	switch(ev){
    1488:	82 30       	cpi	r24, 0x02	; 2
    148a:	91 05       	cpc	r25, r1
    148c:	7c f1       	brlt	.+94     	; 0x14ec <napred_proc+0x64>
    148e:	84 30       	cpi	r24, 0x04	; 4
    1490:	91 05       	cpc	r25, r1
    1492:	d4 f0       	brlt	.+52     	; 0x14c8 <napred_proc+0x40>
    1494:	84 36       	cpi	r24, 0x64	; 100
    1496:	91 05       	cpc	r25, r1
    1498:	49 f5       	brne	.+82     	; 0x14ec <napred_proc+0x64>
		case TIMER_90S_EVENT:
			des_mav_L = 0;
    149a:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <des_mav_L>
    149e:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <des_mav_L+0x1>
    14a2:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <des_mav_L+0x2>
    14a6:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <des_mav_L+0x3>
			des_mav_R = 0;
    14aa:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <des_mav_R>
    14ae:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <des_mav_R+0x1>
    14b2:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <des_mav_R+0x2>
    14b6:	10 92 d1 20 	sts	0x20D1, r1	; 0x8020d1 <des_mav_R+0x3>
			
			state = STATE_KRAJ;
    14ba:	88 ee       	ldi	r24, 0xE8	; 232
    14bc:	93 e0       	ldi	r25, 0x03	; 3
    14be:	80 93 71 21 	sts	0x2171, r24	; 0x802171 <state>
    14c2:	90 93 72 21 	sts	0x2172, r25	; 0x802172 <state+0x1>
			break;
    14c6:	08 95       	ret
	return ev;
}

void set_timer(unsigned char timer_id, unsigned long int duration)
{
	timer[timer_id] = duration;
    14c8:	84 e6       	ldi	r24, 0x64	; 100
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a0 e0       	ldi	r26, 0x00	; 0
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <timer+0x4>
    14d4:	90 93 62 21 	sts	0x2162, r25	; 0x802162 <timer+0x5>
    14d8:	a0 93 63 21 	sts	0x2163, r26	; 0x802163 <timer+0x6>
    14dc:	b0 93 64 21 	sts	0x2164, r27	; 0x802164 <timer+0x7>
			state = STATE_KRAJ;
			break;
		case EVENT_LEVI_TASTER:
		case EVENT_DESNI_TASTER:
			set_timer(TIMER_300MS, 100);
			state =  STATE_LEVI_PRITISNUT;
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	80 93 71 21 	sts	0x2171, r24	; 0x802171 <state>
    14e8:	90 93 72 21 	sts	0x2172, r25	; 0x802172 <state+0x1>
    14ec:	08 95       	ret

000014ee <cycle_FSM>:
	
	state =  STATE_START;
}

void cycle_FSM(){
	int ev = get_event();
    14ee:	0e 94 64 09 	call	0x12c8	; 0x12c8 <get_event>
	
	switch (state){
    14f2:	20 91 71 21 	lds	r18, 0x2171	; 0x802171 <state>
    14f6:	30 91 72 21 	lds	r19, 0x2172	; 0x802172 <state+0x1>
    14fa:	21 15       	cp	r18, r1
    14fc:	31 05       	cpc	r19, r1
    14fe:	21 f0       	breq	.+8      	; 0x1508 <cycle_FSM+0x1a>
    1500:	21 30       	cpi	r18, 0x01	; 1
    1502:	31 05       	cpc	r19, r1
    1504:	21 f0       	breq	.+8      	; 0x150e <cycle_FSM+0x20>
    1506:	08 95       	ret
		case STATE_START:
			start_proc(ev);
    1508:	0e 94 13 0a 	call	0x1426	; 0x1426 <start_proc>
			break;
    150c:	08 95       	ret
		case STATE_NAPRED:
			napred_proc(ev);
    150e:	0e 94 44 0a 	call	0x1488	; 0x1488 <napred_proc>
    1512:	08 95       	ret

00001514 <init_PWM>:

#include "common.h"

void init_PWM(void)
{
	HIRESF_CTRLA = 0b00000010; //enable hi-res za TCF1
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	80 93 90 0b 	sts	0x0B90, r24	; 0x800b90 <__TEXT_REGION_LENGTH__+0x700b90>
	// Configure timer
	TCF1.PER = MAX_DuC; //bilo 800, sada 4000 zbog izmene F_CPU, sto daje   ~16kHz, i vecu rezoluciju pwm-a
    151a:	e0 e4       	ldi	r30, 0x40	; 64
    151c:	fb e0       	ldi	r31, 0x0B	; 11
    151e:	80 ea       	ldi	r24, 0xA0	; 160
    1520:	9f e0       	ldi	r25, 0x0F	; 15
    1522:	86 a3       	std	Z+38, r24	; 0x26
    1524:	97 a3       	std	Z+39, r25	; 0x27
	TCF1.CTRLB = TC1_CCBEN_bm | TC1_CCAEN_bm | TC_WGMODE_DS_T_gc;
    1526:	85 e3       	ldi	r24, 0x35	; 53
    1528:	81 83       	std	Z+1, r24	; 0x01
	TCF1.CTRLA = TC_CLKSEL_DIV1_gc;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	80 83       	st	Z, r24
	
	PORT_SetPinsAsOutput( &PORTF, 0b00110000 ); //PF5 - PWM_L, PF4 - PWM_D
    152e:	e0 ea       	ldi	r30, 0xA0	; 160
    1530:	f6 e0       	ldi	r31, 0x06	; 6
    1532:	80 e3       	ldi	r24, 0x30	; 48
    1534:	81 83       	std	Z+1, r24	; 0x01
		
	//pinovi za upravljanje mostovima
	PORT_SetPinsAsOutput(&PORTH, 0xFF); //PH0-IN_A1, PH1-EN_A1, PH2-EN_B1, PH3-IN_B1, PH4-IN_A2, PH5-EN_A2, PH6-EN_B2, PH7-IN_B2
    1536:	a0 ee       	ldi	r26, 0xE0	; 224
    1538:	b6 e0       	ldi	r27, 0x06	; 6
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	11 96       	adiw	r26, 0x01	; 1
    153e:	8c 93       	st	X, r24
    1540:	11 97       	sbiw	r26, 0x01	; 1
	PORT_ClearPins(&PORTH, 0xFF);
    1542:	16 96       	adiw	r26, 0x06	; 6
    1544:	8c 93       	st	X, r24
    1546:	16 97       	sbiw	r26, 0x06	; 6
	PORT_SetPins(&PORTH, 0b01100110); // EN ALL
    1548:	86 e6       	ldi	r24, 0x66	; 102
    154a:	15 96       	adiw	r26, 0x05	; 5
    154c:	8c 93       	st	X, r24

	//servo izlazi
	PORT_SetPinsAsOutput(&PORTF, 0x0F);
    154e:	8f e0       	ldi	r24, 0x0F	; 15
    1550:	81 83       	std	Z+1, r24	; 0x01
	PORT_ClearPins(&PORTF, 0x0F);
    1552:	86 83       	std	Z+6, r24	; 0x06
    1554:	08 95       	ret

00001556 <PORT_ConfigureInterrupt0>:
 *  \param pinMask    A mask that selects the pins to associate with port interrupt 0.
 */
void PORT_ConfigureInterrupt0( PORT_t * port,
                               PORT_INT0LVL_t intLevel,
                               uint8_t pinMask )
{
    1556:	fc 01       	movw	r30, r24
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT0LVL_gm ) | intLevel;
    1558:	81 85       	ldd	r24, Z+9	; 0x09
    155a:	8c 7f       	andi	r24, 0xFC	; 252
    155c:	68 2b       	or	r22, r24
    155e:	61 87       	std	Z+9, r22	; 0x09
	port->INT0MASK = pinMask;
    1560:	42 87       	std	Z+10, r20	; 0x0a
    1562:	08 95       	ret

00001564 <PORT_ConfigureInterrupt1>:
 *  \param pinMask    A mask that selects the pins to associate with port interrupt 1.
 */
void PORT_ConfigureInterrupt1( PORT_t * port,
                               PORT_INT1LVL_t intLevel,
                               uint8_t pinMask )
{
    1564:	fc 01       	movw	r30, r24
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT1LVL_gm ) | intLevel;
    1566:	81 85       	ldd	r24, Z+9	; 0x09
    1568:	83 7f       	andi	r24, 0xF3	; 243
    156a:	68 2b       	or	r22, r24
    156c:	61 87       	std	Z+9, r22	; 0x09
	port->INT1MASK = pinMask;
    156e:	43 87       	std	Z+11, r20	; 0x0b
    1570:	08 95       	ret

00001572 <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    1572:	ef 92       	push	r14
    1574:	0f 93       	push	r16
    1576:	fc 01       	movw	r30, r24
	// Build pin control register value
	// N.B. Look in iox126a1.h for description of bit and group masks
	uint8_t temp = (uint8_t) opc |
    1578:	0e 29       	or	r16, r14
    157a:	41 11       	cpse	r20, r1
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <PORT_ConfigurePins+0x10>
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <PORT_ConfigurePins+0x12>
    1582:	80 e8       	ldi	r24, 0x80	; 128
    1584:	08 2b       	or	r16, r24
    1586:	21 11       	cpse	r18, r1
    1588:	02 c0       	rjmp	.+4      	; 0x158e <PORT_ConfigurePins+0x1c>
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <PORT_ConfigurePins+0x1e>
    158e:	80 e4       	ldi	r24, 0x40	; 64
    1590:	08 2b       	or	r16, r24
	               (invertEnable ? PORT_INVEN_bm : 0);

	// Configure the pins in one atomic operation. 

	// Save status register. 
	uint8_t sreg = SREG;
    1592:	9f b7       	in	r25, 0x3f	; 63

	// Disable the global interrupt flag
	cli();	
    1594:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    1596:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	port->PIN0CTRL = temp;
    159a:	00 8b       	std	Z+16, r16	; 0x10

	// Restore status register. 
	SREG = sreg;
    159c:	9f bf       	out	0x3f, r25	; 63
}
    159e:	0f 91       	pop	r16
    15a0:	ef 90       	pop	r14
    15a2:	08 95       	ret

000015a4 <init_qdec>:

volatile unsigned char MOTOR_QDEC_OWF_R;
volatile unsigned char MOTOR_QDEC_OWF_L;

void init_qdec(void)
{
    15a4:	ef 92       	push	r14
    15a6:	0f 93       	push	r16
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
	//enkoderski ulazi
	PORT_ConfigurePins( &PORTD,
    15ac:	68 94       	set
    15ae:	ee 24       	eor	r14, r14
    15b0:	e1 f8       	bld	r14, 1
    15b2:	08 e1       	ldi	r16, 0x18	; 24
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	6f ef       	ldi	r22, 0xFF	; 255
    15ba:	80 e6       	ldi	r24, 0x60	; 96
    15bc:	96 e0       	ldi	r25, 0x06	; 6
    15be:	0e 94 b9 0a 	call	0x1572	; 0x1572 <PORT_ConfigurePins>
						0,
						0,
						PORT_OPC_PULLUP_gc,				//zasto sugavi pull up na enkodere kad sami daju aktivan signal? !!??
						PORT_ISC_FALLING_gc);			//wtf, zasto samo falling ako radi kvadraturno dekodiranje, trebalo bi obe ivice da hvata???
	
	PORT_SetPinsAsInput( &PORTD, 0xFF );		//bilo 0xfd iz nekog metafizickog razloga
    15c2:	c0 e6       	ldi	r28, 0x60	; 96
    15c4:	d6 e0       	ldi	r29, 0x06	; 6
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	8a 83       	std	Y+2, r24	; 0x02
	
			// Motor_desni PORTD6,7 - Event system 0 - TCD0
	PORTD.PIN6CTRL |= 0b01000000;		//invertuje se pin, da enkoder broji u drugom smeru
    15ca:	8e 89       	ldd	r24, Y+22	; 0x16
    15cc:	80 64       	ori	r24, 0x40	; 64
    15ce:	8e 8b       	std	Y+22, r24	; 0x16
	EVSYS.CH0MUX = 0b01101110;			// PORTD6 mux input -> MOTOR_QDEC.LEFT
    15d0:	e0 e8       	ldi	r30, 0x80	; 128
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	8e e6       	ldi	r24, 0x6E	; 110
    15d6:	80 83       	st	Z, r24
	EVSYS.CH0CTRL = 0b00001001;			//enable QDEC, filtering 2x
    15d8:	29 e0       	ldi	r18, 0x09	; 9
    15da:	20 87       	std	Z+8, r18	; 0x08
			//Timer/Counter TCD1
	TCD1.CTRLA = 0b00000001;			//clock source
    15dc:	a0 e4       	ldi	r26, 0x40	; 64
    15de:	b9 e0       	ldi	r27, 0x09	; 9
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	9c 93       	st	X, r25
	TCD1.CTRLD = 0b01101000;  			//event action=QDEC, event source=ch0 [01101000]
    15e4:	88 e6       	ldi	r24, 0x68	; 104
    15e6:	13 96       	adiw	r26, 0x03	; 3
    15e8:	8c 93       	st	X, r24
    15ea:	13 97       	sbiw	r26, 0x03	; 3
	TCD1.INTCTRLA = ( TCD1.INTCTRLA & ~TC1_OVFINTLVL_gm ) | 1;		//interapt na owerflov
    15ec:	16 96       	adiw	r26, 0x06	; 6
    15ee:	8c 91       	ld	r24, X
    15f0:	16 97       	sbiw	r26, 0x06	; 6
    15f2:	8c 7f       	andi	r24, 0xFC	; 252
    15f4:	81 60       	ori	r24, 0x01	; 1
    15f6:	16 96       	adiw	r26, 0x06	; 6
    15f8:	8c 93       	st	X, r24

				//Motor_levi	PORTD4,5 - Event system 2 - TCD1
				//PORTD.PIN4CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
	EVSYS.CH2MUX = 0b01101100; // PORTD4 mux input -> MOTOR_QDEC.RIGHT
    15fa:	3c e6       	ldi	r19, 0x6C	; 108
    15fc:	32 83       	std	Z+2, r19	; 0x02
	EVSYS.CH2CTRL = 0b00001001;	//enable QDEC, filtering 2x
    15fe:	22 87       	std	Z+10, r18	; 0x0a
				//Timer/Counter TCD0 -> QDEC.RIGHT
	TCD0.CTRLA = 0b00000001;	//clock source
    1600:	a0 e0       	ldi	r26, 0x00	; 0
    1602:	b9 e0       	ldi	r27, 0x09	; 9
    1604:	9c 93       	st	X, r25
	TCD0.CTRLD = 0b01101010;  	//event action=QDEC, event source=ch2
    1606:	4a e6       	ldi	r20, 0x6A	; 106
    1608:	13 96       	adiw	r26, 0x03	; 3
    160a:	4c 93       	st	X, r20
    160c:	13 97       	sbiw	r26, 0x03	; 3
	TCD0.INTCTRLA = ( TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | 1;
    160e:	16 96       	adiw	r26, 0x06	; 6
    1610:	8c 91       	ld	r24, X
    1612:	16 97       	sbiw	r26, 0x06	; 6
    1614:	8c 7f       	andi	r24, 0xFC	; 252
    1616:	81 60       	ori	r24, 0x01	; 1
    1618:	16 96       	adiw	r26, 0x06	; 6
    161a:	8c 93       	st	X, r24
	
				//Pasivni_levi	PORTD2,3 - Event system 4 - TCE0
				//PORTD.PIN2CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
	EVSYS.CH4MUX = 0b01101010; // PORTD2 mux input -> PASIVNI_LEVI
    161c:	44 83       	std	Z+4, r20	; 0x04
	EVSYS.CH4CTRL = 0b00001001;	//enable QDEC, filtering 2x
    161e:	24 87       	std	Z+12, r18	; 0x0c
				//Timer/Counter TCE0 -> QDEC.RIGHT
	TCE0.CTRLA = 0b00000001;				//clock source
    1620:	e0 e0       	ldi	r30, 0x00	; 0
    1622:	fa e0       	ldi	r31, 0x0A	; 10
    1624:	90 83       	st	Z, r25
	TCE0.CTRLD = 0b01101100;  				//event action=QDEC, event source=ch4
    1626:	33 83       	std	Z+3, r19	; 0x03
	TCE0.INTCTRLA = ( TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | 1;
    1628:	86 81       	ldd	r24, Z+6	; 0x06
    162a:	8c 7f       	andi	r24, 0xFC	; 252
    162c:	81 60       	ori	r24, 0x01	; 1
    162e:	86 83       	std	Z+6, r24	; 0x06
	
				//Pasivni_desni	PORTD0,1 - Pasivni_desni_CNT
	PORT_ConfigurePins( &PORTD,
    1630:	e1 2c       	mov	r14, r1
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	63 e0       	ldi	r22, 0x03	; 3
    1638:	80 e6       	ldi	r24, 0x60	; 96
    163a:	96 e0       	ldi	r25, 0x06	; 6
    163c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <PORT_ConfigurePins>
						0,
						0,
						PORT_OPC_PULLUP_gc,
						PORT_ISC_BOTHEDGES_gc);
	
	PORT_SetPinsAsInput( &PORTD, 0b00000011 );
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	8a 83       	std	Y+2, r24	; 0x02
				//PORTD.PIN0CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
				//Configure Interrupt0 to have HI interrupt level on PD0
	PORT_ConfigureInterrupt0( &PORTD, PORT_INT0LVL_HI_gc, 0b00000001 );
    1644:	41 e0       	ldi	r20, 0x01	; 1
    1646:	63 e0       	ldi	r22, 0x03	; 3
    1648:	80 e6       	ldi	r24, 0x60	; 96
    164a:	96 e0       	ldi	r25, 0x06	; 6
    164c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <PORT_ConfigureInterrupt0>
				//Configure Interrupt1 to have HI interrupt level on PD1
	PORT_ConfigureInterrupt1( &PORTD, PORT_INT1LVL_HI_gc, 0b00000010 );
    1650:	42 e0       	ldi	r20, 0x02	; 2
    1652:	6c e0       	ldi	r22, 0x0C	; 12
    1654:	80 e6       	ldi	r24, 0x60	; 96
    1656:	96 e0       	ldi	r25, 0x06	; 6
    1658:	0e 94 b2 0a 	call	0x1564	; 0x1564 <PORT_ConfigureInterrupt1>
}
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	0f 91       	pop	r16
    1662:	ef 90       	pop	r14
    1664:	08 95       	ret

00001666 <__vector_83>:

////LEVI MOTOR QDEC
ISR(TCD1_OVF_vect)
{
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	08 b6       	in	r0, 0x38	; 56
    1672:	0f 92       	push	r0
    1674:	18 be       	out	0x38, r1	; 56
    1676:	8f 93       	push	r24
	if((TCD1.CTRLFSET & TC1_DIR_bm) == 0)
    1678:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <__TEXT_REGION_LENGTH__+0x700949>
    167c:	80 fd       	sbrc	r24, 0
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <__vector_83+0x20>
	MOTOR_QDEC_OWF_L = 1;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <MOTOR_QDEC_OWF_L>
	
	if((TCD1.CTRLFSET & TC1_DIR_bm) == 1)
    1686:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <__TEXT_REGION_LENGTH__+0x700949>
    168a:	80 ff       	sbrs	r24, 0
    168c:	03 c0       	rjmp	.+6      	; 0x1694 <__vector_83+0x2e>
	MOTOR_QDEC_OWF_L = 2;
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <MOTOR_QDEC_OWF_L>
}
    1694:	8f 91       	pop	r24
    1696:	0f 90       	pop	r0
    1698:	08 be       	out	0x38, r0	; 56
    169a:	0f 90       	pop	r0
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	0f 90       	pop	r0
    16a0:	1f 90       	pop	r1
    16a2:	18 95       	reti

000016a4 <__vector_77>:

//DESNI MOTOR QDEC
ISR(TCD0_OVF_vect)
{
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	08 b6       	in	r0, 0x38	; 56
    16b0:	0f 92       	push	r0
    16b2:	18 be       	out	0x38, r1	; 56
    16b4:	8f 93       	push	r24
	if((TCD0.CTRLFSET & TC0_DIR_bm) == 0)
    16b6:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <__TEXT_REGION_LENGTH__+0x700909>
    16ba:	80 fd       	sbrc	r24, 0
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <__vector_77+0x20>
	MOTOR_QDEC_OWF_R = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <MOTOR_QDEC_OWF_R>
	
	if((TCD0.CTRLFSET & TC0_DIR_bm) == 1)
    16c4:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <__TEXT_REGION_LENGTH__+0x700909>
    16c8:	80 ff       	sbrs	r24, 0
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <__vector_77+0x2e>
	MOTOR_QDEC_OWF_R = 2;
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <MOTOR_QDEC_OWF_R>
}
    16d2:	8f 91       	pop	r24
    16d4:	0f 90       	pop	r0
    16d6:	08 be       	out	0x38, r0	; 56
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	0f 90       	pop	r0
    16de:	1f 90       	pop	r1
    16e0:	18 95       	reti

000016e2 <osc_init_32MHz>:

}

void osc_init_32MHz(void)
{
	OSC.CTRL = OSC_RC32MEN_bm;						// Startujemo interni RC oscilator od 32 MHz.
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

	while ( !( OSC.STATUS & OSC_RC32MRDY_bm ) );	// Cekamo da se oscilator stabilizuje.
    16e8:	e0 e5       	ldi	r30, 0x50	; 80
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	81 81       	ldd	r24, Z+1	; 0x01
    16ee:	81 ff       	sbrs	r24, 1
    16f0:	fd cf       	rjmp	.-6      	; 0x16ec <osc_init_32MHz+0xa>
		
	CCP = CCP_IOREG_gc;								/* Zastita slucajne promene sadrzaja registara.
    16f2:	88 ed       	ldi	r24, 0xD8	; 216
    16f4:	84 bf       	out	0x34, r24	; 52
													   Nakon upisa u CCP registar, imamo 4 ciklusa da
													   upisemo vrednost u registar koji zelimo da zastitimo
													   u toku rada. */
	CLK.PSCTRL = 0x08;				/* Podesavanje preskalera za osnovni takt kontrolera i za
    16f6:	e0 e4       	ldi	r30, 0x40	; 64
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	98 e0       	ldi	r25, 0x08	; 8
    16fc:	91 83       	std	Z+1, r25	; 0x01
													   takt vecine modula na kontroleru. Preskaleri B i C su 2,
													   tako da dobijemo (32 / 2) / 2 = 8 MHz. Ulazi/izlazi, tajmeri
													   i vecina ostale periferije sada radi na 8 MHz. */
	CCP = CCP_IOREG_gc;
    16fe:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;				// Postavljamo 32 MHz RC oscilator kao izvor osnovnog takta kontrolera.
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	80 83       	st	Z, r24
    1704:	08 95       	ret

00001706 <init_timer>:
volatile unsigned long systime=0;
volatile unsigned char f_20ms=0, flag_1s;

void init_timer()
{
	osc_init_32MHz();
    1706:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <osc_init_32MHz>

	TCC0.CTRLA |= (1 << 2);		//preskaler 8, 1ms, 32MHz osc.
    170a:	e0 e0       	ldi	r30, 0x00	; 0
    170c:	f8 e0       	ldi	r31, 0x08	; 8
    170e:	80 81       	ld	r24, Z
    1710:	84 60       	ori	r24, 0x04	; 4
    1712:	80 83       	st	Z, r24
	TCC0.INTCTRLA |= 0b10;//; //(1 << 0);	// dozvola prekida, interapt level
    1714:	86 81       	ldd	r24, Z+6	; 0x06
    1716:	82 60       	ori	r24, 0x02	; 2
    1718:	86 83       	std	Z+6, r24	; 0x06
	TCC0.PER = 4123;			// vrednost broja?a
    171a:	8b e1       	ldi	r24, 0x1B	; 27
    171c:	90 e1       	ldi	r25, 0x10	; 16
    171e:	86 a3       	std	Z+38, r24	; 0x26
    1720:	97 a3       	std	Z+39, r25	; 0x27
    1722:	08 95       	ret

00001724 <__vector_14>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;				// Postavljamo 32 MHz RC oscilator kao izvor osnovnog takta kontrolera.
}


ISR(TCC0_OVF_vect)//1ms   //ISR(TIMER1_OVF_vect)
{	
    1724:	1f 92       	push	r1
    1726:	0f 92       	push	r0
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	0f 92       	push	r0
    172c:	11 24       	eor	r1, r1
    172e:	08 b6       	in	r0, 0x38	; 56
    1730:	0f 92       	push	r0
    1732:	18 be       	out	0x38, r1	; 56
    1734:	09 b6       	in	r0, 0x39	; 57
    1736:	0f 92       	push	r0
    1738:	19 be       	out	0x39, r1	; 57
    173a:	0b b6       	in	r0, 0x3b	; 59
    173c:	0f 92       	push	r0
    173e:	1b be       	out	0x3b, r1	; 59
    1740:	2f 93       	push	r18
    1742:	3f 93       	push	r19
    1744:	4f 93       	push	r20
    1746:	5f 93       	push	r21
    1748:	6f 93       	push	r22
    174a:	7f 93       	push	r23
    174c:	8f 93       	push	r24
    174e:	9f 93       	push	r25
    1750:	af 93       	push	r26
    1752:	bf 93       	push	r27
    1754:	ef 93       	push	r30
    1756:	ff 93       	push	r31
	systime++;			//simulator meri da ovaj prekid okida na 314 us, umesto na 1 ms (tj. 1000 us)
    1758:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <systime>
    175c:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <systime+0x1>
    1760:	a0 91 d8 20 	lds	r26, 0x20D8	; 0x8020d8 <systime+0x2>
    1764:	b0 91 d9 20 	lds	r27, 0x20D9	; 0x8020d9 <systime+0x3>
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	a1 1d       	adc	r26, r1
    176c:	b1 1d       	adc	r27, r1
    176e:	80 93 d6 20 	sts	0x20D6, r24	; 0x8020d6 <systime>
    1772:	90 93 d7 20 	sts	0x20D7, r25	; 0x8020d7 <systime+0x1>
    1776:	a0 93 d8 20 	sts	0x20D8, r26	; 0x8020d8 <systime+0x2>
    177a:	b0 93 d9 20 	sts	0x20D9, r27	; 0x8020d9 <systime+0x3>
	
	PORT_TogglePins(&PORTC, 0xFF);	//toogle PC4 = fet5, za proveru okidanja tajmera na osciloskopu
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
	
	//upravljanje robotom na diferencijalni pogon sa odometrijom
	//odometrija	
	sens_robot();
    1784:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sens_robot>
	
	timer_event();
    1788:	0e 94 9e 09 	call	0x133c	; 0x133c <timer_event>
	pin_event();
    178c:	0e 94 c8 09 	call	0x1390	; 0x1390 <pin_event>
	DuC_L = 1000;
	robot_direct_drive();
	*/
	
	
	robot_position_control();
    1790:	0e 94 47 08 	call	0x108e	; 0x108e <robot_position_control>
	
	
	
	
	
	if(!(systime%100))
    1794:	60 91 d6 20 	lds	r22, 0x20D6	; 0x8020d6 <systime>
    1798:	70 91 d7 20 	lds	r23, 0x20D7	; 0x8020d7 <systime+0x1>
    179c:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <systime+0x2>
    17a0:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <systime+0x3>
    17a4:	24 e6       	ldi	r18, 0x64	; 100
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodsi4>
    17b0:	67 2b       	or	r22, r23
    17b2:	68 2b       	or	r22, r24
    17b4:	69 2b       	or	r22, r25
    17b6:	19 f4       	brne	.+6      	; 0x17be <__vector_14+0x9a>
		flag_1s=1;		
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <flag_1s>
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	4f 91       	pop	r20
    17d2:	3f 91       	pop	r19
    17d4:	2f 91       	pop	r18
    17d6:	0f 90       	pop	r0
    17d8:	0b be       	out	0x3b, r0	; 59
    17da:	0f 90       	pop	r0
    17dc:	09 be       	out	0x39, r0	; 57
    17de:	0f 90       	pop	r0
    17e0:	08 be       	out	0x38, r0	; 56
    17e2:	0f 90       	pop	r0
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	0f 90       	pop	r0
    17e8:	1f 90       	pop	r1
    17ea:	18 95       	reti

000017ec <init_uart>:
	
		USARTE1.DATA=*str;
		poslato=1;
		while(poslato);
	
}
    17ec:	e0 e8       	ldi	r30, 0x80	; 128
    17ee:	f6 e0       	ldi	r31, 0x06	; 6
    17f0:	80 81       	ld	r24, Z
    17f2:	80 68       	ori	r24, 0x80	; 128
    17f4:	80 83       	st	Z, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 7b       	andi	r24, 0xBF	; 191
    17fa:	80 83       	st	Z, r24
    17fc:	e0 eb       	ldi	r30, 0xB0	; 176
    17fe:	fa e0       	ldi	r31, 0x0A	; 10
    1800:	83 81       	ldd	r24, Z+3	; 0x03
    1802:	84 61       	ori	r24, 0x14	; 20
    1804:	83 83       	std	Z+3, r24	; 0x03
    1806:	84 81       	ldd	r24, Z+4	; 0x04
    1808:	88 61       	ori	r24, 0x18	; 24
    180a:	84 83       	std	Z+4, r24	; 0x04
    180c:	85 81       	ldd	r24, Z+5	; 0x05
    180e:	83 60       	ori	r24, 0x03	; 3
    1810:	85 83       	std	Z+5, r24	; 0x05
    1812:	83 e8       	ldi	r24, 0x83	; 131
    1814:	86 83       	std	Z+6, r24	; 0x06
    1816:	80 ed       	ldi	r24, 0xD0	; 208
    1818:	87 83       	std	Z+7, r24	; 0x07
    181a:	08 95       	ret

0000181c <send_str>:
    181c:	fc 01       	movw	r30, r24
    181e:	90 81       	ld	r25, Z
    1820:	99 23       	and	r25, r25
    1822:	71 f0       	breq	.+28     	; 0x1840 <send_str+0x24>
    1824:	31 96       	adiw	r30, 0x01	; 1
    1826:	a0 eb       	ldi	r26, 0xB0	; 176
    1828:	ba e0       	ldi	r27, 0x0A	; 10
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	9c 93       	st	X, r25
    182e:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <poslato>
    1832:	90 91 da 20 	lds	r25, 0x20DA	; 0x8020da <poslato>
    1836:	91 11       	cpse	r25, r1
    1838:	fc cf       	rjmp	.-8      	; 0x1832 <send_str+0x16>
    183a:	91 91       	ld	r25, Z+
    183c:	91 11       	cpse	r25, r1
    183e:	f6 cf       	rjmp	.-20     	; 0x182c <send_str+0x10>
    1840:	08 95       	ret

00001842 <__vector_63>:

ISR(USARTE1_TXC_vect)
{
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	08 b6       	in	r0, 0x38	; 56
    184e:	0f 92       	push	r0
    1850:	18 be       	out	0x38, r1	; 56
	poslato=0;
    1852:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <poslato>
}
    1856:	0f 90       	pop	r0
    1858:	08 be       	out	0x38, r0	; 56
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <__vector_61>:

ISR(USARTE1_RXC_vect)
{
    1864:	1f 92       	push	r1
    1866:	0f 92       	push	r0
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	08 b6       	in	r0, 0x38	; 56
    1870:	0f 92       	push	r0
    1872:	18 be       	out	0x38, r1	; 56
    1874:	0b b6       	in	r0, 0x3b	; 59
    1876:	0f 92       	push	r0
    1878:	1b be       	out	0x3b, r1	; 59
    187a:	8f 93       	push	r24
    187c:	ef 93       	push	r30
    187e:	ff 93       	push	r31
	input_char=USARTE1.DATA;
    1880:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <__TEXT_REGION_LENGTH__+0x700ab0>
    1884:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <input_char>
	
	if(buff_size<INPUT_BUFF_SIZE-1)
    1888:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <buff_size>
    188c:	8d 31       	cpi	r24, 0x1D	; 29
    188e:	98 f4       	brcc	.+38     	; 0x18b6 <__vector_61+0x52>
	{
		input_buffer[buff_size]=input_char;
    1890:	e0 91 9b 21 	lds	r30, 0x219B	; 0x80219b <buff_size>
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <input_char>
    189a:	e3 58       	subi	r30, 0x83	; 131
    189c:	fe 4d       	sbci	r31, 0xDE	; 222
    189e:	80 83       	st	Z, r24
		buff_size++;
    18a0:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <buff_size>
    18a4:	8f 5f       	subi	r24, 0xFF	; 255
    18a6:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <buff_size>
		input_buffer[buff_size]='\0';
    18aa:	e0 91 9b 21 	lds	r30, 0x219B	; 0x80219b <buff_size>
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	e3 58       	subi	r30, 0x83	; 131
    18b2:	fe 4d       	sbci	r31, 0xDE	; 222
    18b4:	10 82       	st	Z, r1
	}
    18b6:	ff 91       	pop	r31
    18b8:	ef 91       	pop	r30
    18ba:	8f 91       	pop	r24
    18bc:	0f 90       	pop	r0
    18be:	0b be       	out	0x3b, r0	; 59
    18c0:	0f 90       	pop	r0
    18c2:	08 be       	out	0x38, r0	; 56
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <__subsf3>:
    18ce:	50 58       	subi	r21, 0x80	; 128

000018d0 <__addsf3>:
    18d0:	bb 27       	eor	r27, r27
    18d2:	aa 27       	eor	r26, r26
    18d4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__addsf3x>
    18d8:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_round>
    18dc:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_pscA>
    18e0:	38 f0       	brcs	.+14     	; 0x18f0 <__addsf3+0x20>
    18e2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_pscB>
    18e6:	20 f0       	brcs	.+8      	; 0x18f0 <__addsf3+0x20>
    18e8:	39 f4       	brne	.+14     	; 0x18f8 <__addsf3+0x28>
    18ea:	9f 3f       	cpi	r25, 0xFF	; 255
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <__addsf3+0x24>
    18ee:	26 f4       	brtc	.+8      	; 0x18f8 <__addsf3+0x28>
    18f0:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__fp_nan>
    18f4:	0e f4       	brtc	.+2      	; 0x18f8 <__addsf3+0x28>
    18f6:	e0 95       	com	r30
    18f8:	e7 fb       	bst	r30, 7
    18fa:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_inf>

000018fe <__addsf3x>:
    18fe:	e9 2f       	mov	r30, r25
    1900:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_split3>
    1904:	58 f3       	brcs	.-42     	; 0x18dc <__addsf3+0xc>
    1906:	ba 17       	cp	r27, r26
    1908:	62 07       	cpc	r22, r18
    190a:	73 07       	cpc	r23, r19
    190c:	84 07       	cpc	r24, r20
    190e:	95 07       	cpc	r25, r21
    1910:	20 f0       	brcs	.+8      	; 0x191a <__addsf3x+0x1c>
    1912:	79 f4       	brne	.+30     	; 0x1932 <__addsf3x+0x34>
    1914:	a6 f5       	brtc	.+104    	; 0x197e <__addsf3x+0x80>
    1916:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_zero>
    191a:	0e f4       	brtc	.+2      	; 0x191e <__addsf3x+0x20>
    191c:	e0 95       	com	r30
    191e:	0b 2e       	mov	r0, r27
    1920:	ba 2f       	mov	r27, r26
    1922:	a0 2d       	mov	r26, r0
    1924:	0b 01       	movw	r0, r22
    1926:	b9 01       	movw	r22, r18
    1928:	90 01       	movw	r18, r0
    192a:	0c 01       	movw	r0, r24
    192c:	ca 01       	movw	r24, r20
    192e:	a0 01       	movw	r20, r0
    1930:	11 24       	eor	r1, r1
    1932:	ff 27       	eor	r31, r31
    1934:	59 1b       	sub	r21, r25
    1936:	99 f0       	breq	.+38     	; 0x195e <__addsf3x+0x60>
    1938:	59 3f       	cpi	r21, 0xF9	; 249
    193a:	50 f4       	brcc	.+20     	; 0x1950 <__addsf3x+0x52>
    193c:	50 3e       	cpi	r21, 0xE0	; 224
    193e:	68 f1       	brcs	.+90     	; 0x199a <__addsf3x+0x9c>
    1940:	1a 16       	cp	r1, r26
    1942:	f0 40       	sbci	r31, 0x00	; 0
    1944:	a2 2f       	mov	r26, r18
    1946:	23 2f       	mov	r18, r19
    1948:	34 2f       	mov	r19, r20
    194a:	44 27       	eor	r20, r20
    194c:	58 5f       	subi	r21, 0xF8	; 248
    194e:	f3 cf       	rjmp	.-26     	; 0x1936 <__addsf3x+0x38>
    1950:	46 95       	lsr	r20
    1952:	37 95       	ror	r19
    1954:	27 95       	ror	r18
    1956:	a7 95       	ror	r26
    1958:	f0 40       	sbci	r31, 0x00	; 0
    195a:	53 95       	inc	r21
    195c:	c9 f7       	brne	.-14     	; 0x1950 <__addsf3x+0x52>
    195e:	7e f4       	brtc	.+30     	; 0x197e <__addsf3x+0x80>
    1960:	1f 16       	cp	r1, r31
    1962:	ba 0b       	sbc	r27, r26
    1964:	62 0b       	sbc	r22, r18
    1966:	73 0b       	sbc	r23, r19
    1968:	84 0b       	sbc	r24, r20
    196a:	ba f0       	brmi	.+46     	; 0x199a <__addsf3x+0x9c>
    196c:	91 50       	subi	r25, 0x01	; 1
    196e:	a1 f0       	breq	.+40     	; 0x1998 <__addsf3x+0x9a>
    1970:	ff 0f       	add	r31, r31
    1972:	bb 1f       	adc	r27, r27
    1974:	66 1f       	adc	r22, r22
    1976:	77 1f       	adc	r23, r23
    1978:	88 1f       	adc	r24, r24
    197a:	c2 f7       	brpl	.-16     	; 0x196c <__addsf3x+0x6e>
    197c:	0e c0       	rjmp	.+28     	; 0x199a <__addsf3x+0x9c>
    197e:	ba 0f       	add	r27, r26
    1980:	62 1f       	adc	r22, r18
    1982:	73 1f       	adc	r23, r19
    1984:	84 1f       	adc	r24, r20
    1986:	48 f4       	brcc	.+18     	; 0x199a <__addsf3x+0x9c>
    1988:	87 95       	ror	r24
    198a:	77 95       	ror	r23
    198c:	67 95       	ror	r22
    198e:	b7 95       	ror	r27
    1990:	f7 95       	ror	r31
    1992:	9e 3f       	cpi	r25, 0xFE	; 254
    1994:	08 f0       	brcs	.+2      	; 0x1998 <__addsf3x+0x9a>
    1996:	b0 cf       	rjmp	.-160    	; 0x18f8 <__addsf3+0x28>
    1998:	93 95       	inc	r25
    199a:	88 0f       	add	r24, r24
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <__addsf3x+0xa2>
    199e:	99 27       	eor	r25, r25
    19a0:	ee 0f       	add	r30, r30
    19a2:	97 95       	ror	r25
    19a4:	87 95       	ror	r24
    19a6:	08 95       	ret

000019a8 <__cmpsf2>:
    19a8:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__fp_cmp>
    19ac:	08 f4       	brcc	.+2      	; 0x19b0 <__cmpsf2+0x8>
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	08 95       	ret

000019b2 <cos>:
    19b2:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fp_rempio2>
    19b6:	e3 95       	inc	r30
    19b8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_sinus>

000019bc <__divsf3>:
    19bc:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3x>
    19c0:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_round>
    19c4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_pscB>
    19c8:	58 f0       	brcs	.+22     	; 0x19e0 <__divsf3+0x24>
    19ca:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_pscA>
    19ce:	40 f0       	brcs	.+16     	; 0x19e0 <__divsf3+0x24>
    19d0:	29 f4       	brne	.+10     	; 0x19dc <__divsf3+0x20>
    19d2:	5f 3f       	cpi	r21, 0xFF	; 255
    19d4:	29 f0       	breq	.+10     	; 0x19e0 <__divsf3+0x24>
    19d6:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_inf>
    19da:	51 11       	cpse	r21, r1
    19dc:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>
    19e0:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__fp_nan>

000019e4 <__divsf3x>:
    19e4:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_split3>
    19e8:	68 f3       	brcs	.-38     	; 0x19c4 <__divsf3+0x8>

000019ea <__divsf3_pse>:
    19ea:	99 23       	and	r25, r25
    19ec:	b1 f3       	breq	.-20     	; 0x19da <__divsf3+0x1e>
    19ee:	55 23       	and	r21, r21
    19f0:	91 f3       	breq	.-28     	; 0x19d6 <__divsf3+0x1a>
    19f2:	95 1b       	sub	r25, r21
    19f4:	55 0b       	sbc	r21, r21
    19f6:	bb 27       	eor	r27, r27
    19f8:	aa 27       	eor	r26, r26
    19fa:	62 17       	cp	r22, r18
    19fc:	73 07       	cpc	r23, r19
    19fe:	84 07       	cpc	r24, r20
    1a00:	38 f0       	brcs	.+14     	; 0x1a10 <__divsf3_pse+0x26>
    1a02:	9f 5f       	subi	r25, 0xFF	; 255
    1a04:	5f 4f       	sbci	r21, 0xFF	; 255
    1a06:	22 0f       	add	r18, r18
    1a08:	33 1f       	adc	r19, r19
    1a0a:	44 1f       	adc	r20, r20
    1a0c:	aa 1f       	adc	r26, r26
    1a0e:	a9 f3       	breq	.-22     	; 0x19fa <__divsf3_pse+0x10>
    1a10:	35 d0       	rcall	.+106    	; 0x1a7c <__divsf3_pse+0x92>
    1a12:	0e 2e       	mov	r0, r30
    1a14:	3a f0       	brmi	.+14     	; 0x1a24 <__divsf3_pse+0x3a>
    1a16:	e0 e8       	ldi	r30, 0x80	; 128
    1a18:	32 d0       	rcall	.+100    	; 0x1a7e <__divsf3_pse+0x94>
    1a1a:	91 50       	subi	r25, 0x01	; 1
    1a1c:	50 40       	sbci	r21, 0x00	; 0
    1a1e:	e6 95       	lsr	r30
    1a20:	00 1c       	adc	r0, r0
    1a22:	ca f7       	brpl	.-14     	; 0x1a16 <__divsf3_pse+0x2c>
    1a24:	2b d0       	rcall	.+86     	; 0x1a7c <__divsf3_pse+0x92>
    1a26:	fe 2f       	mov	r31, r30
    1a28:	29 d0       	rcall	.+82     	; 0x1a7c <__divsf3_pse+0x92>
    1a2a:	66 0f       	add	r22, r22
    1a2c:	77 1f       	adc	r23, r23
    1a2e:	88 1f       	adc	r24, r24
    1a30:	bb 1f       	adc	r27, r27
    1a32:	26 17       	cp	r18, r22
    1a34:	37 07       	cpc	r19, r23
    1a36:	48 07       	cpc	r20, r24
    1a38:	ab 07       	cpc	r26, r27
    1a3a:	b0 e8       	ldi	r27, 0x80	; 128
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <__divsf3_pse+0x56>
    1a3e:	bb 0b       	sbc	r27, r27
    1a40:	80 2d       	mov	r24, r0
    1a42:	bf 01       	movw	r22, r30
    1a44:	ff 27       	eor	r31, r31
    1a46:	93 58       	subi	r25, 0x83	; 131
    1a48:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4a:	3a f0       	brmi	.+14     	; 0x1a5a <__divsf3_pse+0x70>
    1a4c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a4e:	51 05       	cpc	r21, r1
    1a50:	78 f0       	brcs	.+30     	; 0x1a70 <__divsf3_pse+0x86>
    1a52:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_inf>
    1a56:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>
    1a5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5c:	e4 f3       	brlt	.-8      	; 0x1a56 <__divsf3_pse+0x6c>
    1a5e:	98 3e       	cpi	r25, 0xE8	; 232
    1a60:	d4 f3       	brlt	.-12     	; 0x1a56 <__divsf3_pse+0x6c>
    1a62:	86 95       	lsr	r24
    1a64:	77 95       	ror	r23
    1a66:	67 95       	ror	r22
    1a68:	b7 95       	ror	r27
    1a6a:	f7 95       	ror	r31
    1a6c:	9f 5f       	subi	r25, 0xFF	; 255
    1a6e:	c9 f7       	brne	.-14     	; 0x1a62 <__divsf3_pse+0x78>
    1a70:	88 0f       	add	r24, r24
    1a72:	91 1d       	adc	r25, r1
    1a74:	96 95       	lsr	r25
    1a76:	87 95       	ror	r24
    1a78:	97 f9       	bld	r25, 7
    1a7a:	08 95       	ret
    1a7c:	e1 e0       	ldi	r30, 0x01	; 1
    1a7e:	66 0f       	add	r22, r22
    1a80:	77 1f       	adc	r23, r23
    1a82:	88 1f       	adc	r24, r24
    1a84:	bb 1f       	adc	r27, r27
    1a86:	62 17       	cp	r22, r18
    1a88:	73 07       	cpc	r23, r19
    1a8a:	84 07       	cpc	r24, r20
    1a8c:	ba 07       	cpc	r27, r26
    1a8e:	20 f0       	brcs	.+8      	; 0x1a98 <__divsf3_pse+0xae>
    1a90:	62 1b       	sub	r22, r18
    1a92:	73 0b       	sbc	r23, r19
    1a94:	84 0b       	sbc	r24, r20
    1a96:	ba 0b       	sbc	r27, r26
    1a98:	ee 1f       	adc	r30, r30
    1a9a:	88 f7       	brcc	.-30     	; 0x1a7e <__divsf3_pse+0x94>
    1a9c:	e0 95       	com	r30
    1a9e:	08 95       	ret

00001aa0 <__fixsfsi>:
    1aa0:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fixunssfsi>
    1aa4:	68 94       	set
    1aa6:	b1 11       	cpse	r27, r1
    1aa8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>
    1aac:	08 95       	ret

00001aae <__fixunssfsi>:
    1aae:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__fp_splitA>
    1ab2:	88 f0       	brcs	.+34     	; 0x1ad6 <__fixunssfsi+0x28>
    1ab4:	9f 57       	subi	r25, 0x7F	; 127
    1ab6:	98 f0       	brcs	.+38     	; 0x1ade <__fixunssfsi+0x30>
    1ab8:	b9 2f       	mov	r27, r25
    1aba:	99 27       	eor	r25, r25
    1abc:	b7 51       	subi	r27, 0x17	; 23
    1abe:	b0 f0       	brcs	.+44     	; 0x1aec <__fixunssfsi+0x3e>
    1ac0:	e1 f0       	breq	.+56     	; 0x1afa <__fixunssfsi+0x4c>
    1ac2:	66 0f       	add	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	1a f0       	brmi	.+6      	; 0x1ad2 <__fixunssfsi+0x24>
    1acc:	ba 95       	dec	r27
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__fixunssfsi+0x14>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <__fixunssfsi+0x4c>
    1ad2:	b1 30       	cpi	r27, 0x01	; 1
    1ad4:	91 f0       	breq	.+36     	; 0x1afa <__fixunssfsi+0x4c>
    1ad6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__fp_zero>
    1ada:	b1 e0       	ldi	r27, 0x01	; 1
    1adc:	08 95       	ret
    1ade:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_zero>
    1ae2:	67 2f       	mov	r22, r23
    1ae4:	78 2f       	mov	r23, r24
    1ae6:	88 27       	eor	r24, r24
    1ae8:	b8 5f       	subi	r27, 0xF8	; 248
    1aea:	39 f0       	breq	.+14     	; 0x1afa <__fixunssfsi+0x4c>
    1aec:	b9 3f       	cpi	r27, 0xF9	; 249
    1aee:	cc f3       	brlt	.-14     	; 0x1ae2 <__fixunssfsi+0x34>
    1af0:	86 95       	lsr	r24
    1af2:	77 95       	ror	r23
    1af4:	67 95       	ror	r22
    1af6:	b3 95       	inc	r27
    1af8:	d9 f7       	brne	.-10     	; 0x1af0 <__fixunssfsi+0x42>
    1afa:	3e f4       	brtc	.+14     	; 0x1b0a <__fixunssfsi+0x5c>
    1afc:	90 95       	com	r25
    1afe:	80 95       	com	r24
    1b00:	70 95       	com	r23
    1b02:	61 95       	neg	r22
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	8f 4f       	sbci	r24, 0xFF	; 255
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	08 95       	ret

00001b0c <__floatunsisf>:
    1b0c:	e8 94       	clt
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <__floatsisf+0x12>

00001b10 <__floatsisf>:
    1b10:	97 fb       	bst	r25, 7
    1b12:	3e f4       	brtc	.+14     	; 0x1b22 <__floatsisf+0x12>
    1b14:	90 95       	com	r25
    1b16:	80 95       	com	r24
    1b18:	70 95       	com	r23
    1b1a:	61 95       	neg	r22
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	99 23       	and	r25, r25
    1b24:	a9 f0       	breq	.+42     	; 0x1b50 <__floatsisf+0x40>
    1b26:	f9 2f       	mov	r31, r25
    1b28:	96 e9       	ldi	r25, 0x96	; 150
    1b2a:	bb 27       	eor	r27, r27
    1b2c:	93 95       	inc	r25
    1b2e:	f6 95       	lsr	r31
    1b30:	87 95       	ror	r24
    1b32:	77 95       	ror	r23
    1b34:	67 95       	ror	r22
    1b36:	b7 95       	ror	r27
    1b38:	f1 11       	cpse	r31, r1
    1b3a:	f8 cf       	rjmp	.-16     	; 0x1b2c <__floatsisf+0x1c>
    1b3c:	fa f4       	brpl	.+62     	; 0x1b7c <__floatsisf+0x6c>
    1b3e:	bb 0f       	add	r27, r27
    1b40:	11 f4       	brne	.+4      	; 0x1b46 <__floatsisf+0x36>
    1b42:	60 ff       	sbrs	r22, 0
    1b44:	1b c0       	rjmp	.+54     	; 0x1b7c <__floatsisf+0x6c>
    1b46:	6f 5f       	subi	r22, 0xFF	; 255
    1b48:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4e:	16 c0       	rjmp	.+44     	; 0x1b7c <__floatsisf+0x6c>
    1b50:	88 23       	and	r24, r24
    1b52:	11 f0       	breq	.+4      	; 0x1b58 <__floatsisf+0x48>
    1b54:	96 e9       	ldi	r25, 0x96	; 150
    1b56:	11 c0       	rjmp	.+34     	; 0x1b7a <__floatsisf+0x6a>
    1b58:	77 23       	and	r23, r23
    1b5a:	21 f0       	breq	.+8      	; 0x1b64 <__floatsisf+0x54>
    1b5c:	9e e8       	ldi	r25, 0x8E	; 142
    1b5e:	87 2f       	mov	r24, r23
    1b60:	76 2f       	mov	r23, r22
    1b62:	05 c0       	rjmp	.+10     	; 0x1b6e <__floatsisf+0x5e>
    1b64:	66 23       	and	r22, r22
    1b66:	71 f0       	breq	.+28     	; 0x1b84 <__floatsisf+0x74>
    1b68:	96 e8       	ldi	r25, 0x86	; 134
    1b6a:	86 2f       	mov	r24, r22
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	2a f0       	brmi	.+10     	; 0x1b7c <__floatsisf+0x6c>
    1b72:	9a 95       	dec	r25
    1b74:	66 0f       	add	r22, r22
    1b76:	77 1f       	adc	r23, r23
    1b78:	88 1f       	adc	r24, r24
    1b7a:	da f7       	brpl	.-10     	; 0x1b72 <__floatsisf+0x62>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	96 95       	lsr	r25
    1b80:	87 95       	ror	r24
    1b82:	97 f9       	bld	r25, 7
    1b84:	08 95       	ret

00001b86 <__fp_cmp>:
    1b86:	99 0f       	add	r25, r25
    1b88:	00 08       	sbc	r0, r0
    1b8a:	55 0f       	add	r21, r21
    1b8c:	aa 0b       	sbc	r26, r26
    1b8e:	e0 e8       	ldi	r30, 0x80	; 128
    1b90:	fe ef       	ldi	r31, 0xFE	; 254
    1b92:	16 16       	cp	r1, r22
    1b94:	17 06       	cpc	r1, r23
    1b96:	e8 07       	cpc	r30, r24
    1b98:	f9 07       	cpc	r31, r25
    1b9a:	c0 f0       	brcs	.+48     	; 0x1bcc <__fp_cmp+0x46>
    1b9c:	12 16       	cp	r1, r18
    1b9e:	13 06       	cpc	r1, r19
    1ba0:	e4 07       	cpc	r30, r20
    1ba2:	f5 07       	cpc	r31, r21
    1ba4:	98 f0       	brcs	.+38     	; 0x1bcc <__fp_cmp+0x46>
    1ba6:	62 1b       	sub	r22, r18
    1ba8:	73 0b       	sbc	r23, r19
    1baa:	84 0b       	sbc	r24, r20
    1bac:	95 0b       	sbc	r25, r21
    1bae:	39 f4       	brne	.+14     	; 0x1bbe <__fp_cmp+0x38>
    1bb0:	0a 26       	eor	r0, r26
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <__fp_cmp+0x46>
    1bb4:	23 2b       	or	r18, r19
    1bb6:	24 2b       	or	r18, r20
    1bb8:	25 2b       	or	r18, r21
    1bba:	21 f4       	brne	.+8      	; 0x1bc4 <__fp_cmp+0x3e>
    1bbc:	08 95       	ret
    1bbe:	0a 26       	eor	r0, r26
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <__fp_cmp+0x3e>
    1bc2:	a1 40       	sbci	r26, 0x01	; 1
    1bc4:	a6 95       	lsr	r26
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	81 1d       	adc	r24, r1
    1bca:	81 1d       	adc	r24, r1
    1bcc:	08 95       	ret

00001bce <__fp_inf>:
    1bce:	97 f9       	bld	r25, 7
    1bd0:	9f 67       	ori	r25, 0x7F	; 127
    1bd2:	80 e8       	ldi	r24, 0x80	; 128
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	08 95       	ret

00001bda <__fp_nan>:
    1bda:	9f ef       	ldi	r25, 0xFF	; 255
    1bdc:	80 ec       	ldi	r24, 0xC0	; 192
    1bde:	08 95       	ret

00001be0 <__fp_pscA>:
    1be0:	00 24       	eor	r0, r0
    1be2:	0a 94       	dec	r0
    1be4:	16 16       	cp	r1, r22
    1be6:	17 06       	cpc	r1, r23
    1be8:	18 06       	cpc	r1, r24
    1bea:	09 06       	cpc	r0, r25
    1bec:	08 95       	ret

00001bee <__fp_pscB>:
    1bee:	00 24       	eor	r0, r0
    1bf0:	0a 94       	dec	r0
    1bf2:	12 16       	cp	r1, r18
    1bf4:	13 06       	cpc	r1, r19
    1bf6:	14 06       	cpc	r1, r20
    1bf8:	05 06       	cpc	r0, r21
    1bfa:	08 95       	ret
    1bfc:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__fp_nan>

00001c00 <__fp_rempio2>:
    1c00:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__fp_splitA>
    1c04:	d8 f3       	brcs	.-10     	; 0x1bfc <__fp_pscB+0xe>
    1c06:	e8 94       	clt
    1c08:	e0 e0       	ldi	r30, 0x00	; 0
    1c0a:	bb 27       	eor	r27, r27
    1c0c:	9f 57       	subi	r25, 0x7F	; 127
    1c0e:	f0 f0       	brcs	.+60     	; 0x1c4c <__fp_rempio2+0x4c>
    1c10:	2a ed       	ldi	r18, 0xDA	; 218
    1c12:	3f e0       	ldi	r19, 0x0F	; 15
    1c14:	49 ec       	ldi	r20, 0xC9	; 201
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <__fp_rempio2+0x24>
    1c18:	ee 0f       	add	r30, r30
    1c1a:	bb 0f       	add	r27, r27
    1c1c:	66 1f       	adc	r22, r22
    1c1e:	77 1f       	adc	r23, r23
    1c20:	88 1f       	adc	r24, r24
    1c22:	28 f0       	brcs	.+10     	; 0x1c2e <__fp_rempio2+0x2e>
    1c24:	b2 3a       	cpi	r27, 0xA2	; 162
    1c26:	62 07       	cpc	r22, r18
    1c28:	73 07       	cpc	r23, r19
    1c2a:	84 07       	cpc	r24, r20
    1c2c:	28 f0       	brcs	.+10     	; 0x1c38 <__fp_rempio2+0x38>
    1c2e:	b2 5a       	subi	r27, 0xA2	; 162
    1c30:	62 0b       	sbc	r22, r18
    1c32:	73 0b       	sbc	r23, r19
    1c34:	84 0b       	sbc	r24, r20
    1c36:	e3 95       	inc	r30
    1c38:	9a 95       	dec	r25
    1c3a:	72 f7       	brpl	.-36     	; 0x1c18 <__fp_rempio2+0x18>
    1c3c:	80 38       	cpi	r24, 0x80	; 128
    1c3e:	30 f4       	brcc	.+12     	; 0x1c4c <__fp_rempio2+0x4c>
    1c40:	9a 95       	dec	r25
    1c42:	bb 0f       	add	r27, r27
    1c44:	66 1f       	adc	r22, r22
    1c46:	77 1f       	adc	r23, r23
    1c48:	88 1f       	adc	r24, r24
    1c4a:	d2 f7       	brpl	.-12     	; 0x1c40 <__fp_rempio2+0x40>
    1c4c:	90 48       	sbci	r25, 0x80	; 128
    1c4e:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__fp_mpack_finite>

00001c52 <__fp_round>:
    1c52:	09 2e       	mov	r0, r25
    1c54:	03 94       	inc	r0
    1c56:	00 0c       	add	r0, r0
    1c58:	11 f4       	brne	.+4      	; 0x1c5e <__fp_round+0xc>
    1c5a:	88 23       	and	r24, r24
    1c5c:	52 f0       	brmi	.+20     	; 0x1c72 <__fp_round+0x20>
    1c5e:	bb 0f       	add	r27, r27
    1c60:	40 f4       	brcc	.+16     	; 0x1c72 <__fp_round+0x20>
    1c62:	bf 2b       	or	r27, r31
    1c64:	11 f4       	brne	.+4      	; 0x1c6a <__fp_round+0x18>
    1c66:	60 ff       	sbrs	r22, 0
    1c68:	04 c0       	rjmp	.+8      	; 0x1c72 <__fp_round+0x20>
    1c6a:	6f 5f       	subi	r22, 0xFF	; 255
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c70:	9f 4f       	sbci	r25, 0xFF	; 255
    1c72:	08 95       	ret

00001c74 <__fp_sinus>:
    1c74:	ef 93       	push	r30
    1c76:	e0 ff       	sbrs	r30, 0
    1c78:	07 c0       	rjmp	.+14     	; 0x1c88 <__fp_sinus+0x14>
    1c7a:	a2 ea       	ldi	r26, 0xA2	; 162
    1c7c:	2a ed       	ldi	r18, 0xDA	; 218
    1c7e:	3f e0       	ldi	r19, 0x0F	; 15
    1c80:	49 ec       	ldi	r20, 0xC9	; 201
    1c82:	5f eb       	ldi	r21, 0xBF	; 191
    1c84:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__addsf3x>
    1c88:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__fp_round>
    1c8c:	0f 90       	pop	r0
    1c8e:	03 94       	inc	r0
    1c90:	01 fc       	sbrc	r0, 1
    1c92:	90 58       	subi	r25, 0x80	; 128
    1c94:	e4 ef       	ldi	r30, 0xF4	; 244
    1c96:	f1 e0       	ldi	r31, 0x01	; 1
    1c98:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__fp_powsodd>

00001c9c <__fp_split3>:
    1c9c:	57 fd       	sbrc	r21, 7
    1c9e:	90 58       	subi	r25, 0x80	; 128
    1ca0:	44 0f       	add	r20, r20
    1ca2:	55 1f       	adc	r21, r21
    1ca4:	59 f0       	breq	.+22     	; 0x1cbc <__fp_splitA+0x10>
    1ca6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca8:	71 f0       	breq	.+28     	; 0x1cc6 <__fp_splitA+0x1a>
    1caa:	47 95       	ror	r20

00001cac <__fp_splitA>:
    1cac:	88 0f       	add	r24, r24
    1cae:	97 fb       	bst	r25, 7
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	61 f0       	breq	.+24     	; 0x1ccc <__fp_splitA+0x20>
    1cb4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cb6:	79 f0       	breq	.+30     	; 0x1cd6 <__fp_splitA+0x2a>
    1cb8:	87 95       	ror	r24
    1cba:	08 95       	ret
    1cbc:	12 16       	cp	r1, r18
    1cbe:	13 06       	cpc	r1, r19
    1cc0:	14 06       	cpc	r1, r20
    1cc2:	55 1f       	adc	r21, r21
    1cc4:	f2 cf       	rjmp	.-28     	; 0x1caa <__fp_split3+0xe>
    1cc6:	46 95       	lsr	r20
    1cc8:	f1 df       	rcall	.-30     	; 0x1cac <__fp_splitA>
    1cca:	08 c0       	rjmp	.+16     	; 0x1cdc <__fp_splitA+0x30>
    1ccc:	16 16       	cp	r1, r22
    1cce:	17 06       	cpc	r1, r23
    1cd0:	18 06       	cpc	r1, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	f1 cf       	rjmp	.-30     	; 0x1cb8 <__fp_splitA+0xc>
    1cd6:	86 95       	lsr	r24
    1cd8:	71 05       	cpc	r23, r1
    1cda:	61 05       	cpc	r22, r1
    1cdc:	08 94       	sec
    1cde:	08 95       	ret

00001ce0 <__fp_zero>:
    1ce0:	e8 94       	clt

00001ce2 <__fp_szero>:
    1ce2:	bb 27       	eor	r27, r27
    1ce4:	66 27       	eor	r22, r22
    1ce6:	77 27       	eor	r23, r23
    1ce8:	cb 01       	movw	r24, r22
    1cea:	97 f9       	bld	r25, 7
    1cec:	08 95       	ret

00001cee <__gesf2>:
    1cee:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__fp_cmp>
    1cf2:	08 f4       	brcc	.+2      	; 0x1cf6 <__gesf2+0x8>
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	08 95       	ret

00001cf8 <__mulsf3>:
    1cf8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__mulsf3x>
    1cfc:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_round>
    1d00:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_pscA>
    1d04:	38 f0       	brcs	.+14     	; 0x1d14 <__mulsf3+0x1c>
    1d06:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_pscB>
    1d0a:	20 f0       	brcs	.+8      	; 0x1d14 <__mulsf3+0x1c>
    1d0c:	95 23       	and	r25, r21
    1d0e:	11 f0       	breq	.+4      	; 0x1d14 <__mulsf3+0x1c>
    1d10:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_inf>
    1d14:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__fp_nan>
    1d18:	11 24       	eor	r1, r1
    1d1a:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>

00001d1e <__mulsf3x>:
    1d1e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_split3>
    1d22:	70 f3       	brcs	.-36     	; 0x1d00 <__mulsf3+0x8>

00001d24 <__mulsf3_pse>:
    1d24:	95 9f       	mul	r25, r21
    1d26:	c1 f3       	breq	.-16     	; 0x1d18 <__mulsf3+0x20>
    1d28:	95 0f       	add	r25, r21
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	55 1f       	adc	r21, r21
    1d2e:	62 9f       	mul	r22, r18
    1d30:	f0 01       	movw	r30, r0
    1d32:	72 9f       	mul	r23, r18
    1d34:	bb 27       	eor	r27, r27
    1d36:	f0 0d       	add	r31, r0
    1d38:	b1 1d       	adc	r27, r1
    1d3a:	63 9f       	mul	r22, r19
    1d3c:	aa 27       	eor	r26, r26
    1d3e:	f0 0d       	add	r31, r0
    1d40:	b1 1d       	adc	r27, r1
    1d42:	aa 1f       	adc	r26, r26
    1d44:	64 9f       	mul	r22, r20
    1d46:	66 27       	eor	r22, r22
    1d48:	b0 0d       	add	r27, r0
    1d4a:	a1 1d       	adc	r26, r1
    1d4c:	66 1f       	adc	r22, r22
    1d4e:	82 9f       	mul	r24, r18
    1d50:	22 27       	eor	r18, r18
    1d52:	b0 0d       	add	r27, r0
    1d54:	a1 1d       	adc	r26, r1
    1d56:	62 1f       	adc	r22, r18
    1d58:	73 9f       	mul	r23, r19
    1d5a:	b0 0d       	add	r27, r0
    1d5c:	a1 1d       	adc	r26, r1
    1d5e:	62 1f       	adc	r22, r18
    1d60:	83 9f       	mul	r24, r19
    1d62:	a0 0d       	add	r26, r0
    1d64:	61 1d       	adc	r22, r1
    1d66:	22 1f       	adc	r18, r18
    1d68:	74 9f       	mul	r23, r20
    1d6a:	33 27       	eor	r19, r19
    1d6c:	a0 0d       	add	r26, r0
    1d6e:	61 1d       	adc	r22, r1
    1d70:	23 1f       	adc	r18, r19
    1d72:	84 9f       	mul	r24, r20
    1d74:	60 0d       	add	r22, r0
    1d76:	21 1d       	adc	r18, r1
    1d78:	82 2f       	mov	r24, r18
    1d7a:	76 2f       	mov	r23, r22
    1d7c:	6a 2f       	mov	r22, r26
    1d7e:	11 24       	eor	r1, r1
    1d80:	9f 57       	subi	r25, 0x7F	; 127
    1d82:	50 40       	sbci	r21, 0x00	; 0
    1d84:	9a f0       	brmi	.+38     	; 0x1dac <__mulsf3_pse+0x88>
    1d86:	f1 f0       	breq	.+60     	; 0x1dc4 <__mulsf3_pse+0xa0>
    1d88:	88 23       	and	r24, r24
    1d8a:	4a f0       	brmi	.+18     	; 0x1d9e <__mulsf3_pse+0x7a>
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	bb 1f       	adc	r27, r27
    1d92:	66 1f       	adc	r22, r22
    1d94:	77 1f       	adc	r23, r23
    1d96:	88 1f       	adc	r24, r24
    1d98:	91 50       	subi	r25, 0x01	; 1
    1d9a:	50 40       	sbci	r21, 0x00	; 0
    1d9c:	a9 f7       	brne	.-22     	; 0x1d88 <__mulsf3_pse+0x64>
    1d9e:	9e 3f       	cpi	r25, 0xFE	; 254
    1da0:	51 05       	cpc	r21, r1
    1da2:	80 f0       	brcs	.+32     	; 0x1dc4 <__mulsf3_pse+0xa0>
    1da4:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_inf>
    1da8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>
    1dac:	5f 3f       	cpi	r21, 0xFF	; 255
    1dae:	e4 f3       	brlt	.-8      	; 0x1da8 <__mulsf3_pse+0x84>
    1db0:	98 3e       	cpi	r25, 0xE8	; 232
    1db2:	d4 f3       	brlt	.-12     	; 0x1da8 <__mulsf3_pse+0x84>
    1db4:	86 95       	lsr	r24
    1db6:	77 95       	ror	r23
    1db8:	67 95       	ror	r22
    1dba:	b7 95       	ror	r27
    1dbc:	f7 95       	ror	r31
    1dbe:	e7 95       	ror	r30
    1dc0:	9f 5f       	subi	r25, 0xFF	; 255
    1dc2:	c1 f7       	brne	.-16     	; 0x1db4 <__mulsf3_pse+0x90>
    1dc4:	fe 2b       	or	r31, r30
    1dc6:	88 0f       	add	r24, r24
    1dc8:	91 1d       	adc	r25, r1
    1dca:	96 95       	lsr	r25
    1dcc:	87 95       	ror	r24
    1dce:	97 f9       	bld	r25, 7
    1dd0:	08 95       	ret

00001dd2 <sin>:
    1dd2:	9f 93       	push	r25
    1dd4:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fp_rempio2>
    1dd8:	0f 90       	pop	r0
    1dda:	07 fc       	sbrc	r0, 7
    1ddc:	ee 5f       	subi	r30, 0xFE	; 254
    1dde:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_sinus>

00001de2 <__fp_mpack>:
    1de2:	9f 3f       	cpi	r25, 0xFF	; 255
    1de4:	31 f0       	breq	.+12     	; 0x1df2 <__fp_mpack_finite+0xc>

00001de6 <__fp_mpack_finite>:
    1de6:	91 50       	subi	r25, 0x01	; 1
    1de8:	20 f4       	brcc	.+8      	; 0x1df2 <__fp_mpack_finite+0xc>
    1dea:	87 95       	ror	r24
    1dec:	77 95       	ror	r23
    1dee:	67 95       	ror	r22
    1df0:	b7 95       	ror	r27
    1df2:	88 0f       	add	r24, r24
    1df4:	91 1d       	adc	r25, r1
    1df6:	96 95       	lsr	r25
    1df8:	87 95       	ror	r24
    1dfa:	97 f9       	bld	r25, 7
    1dfc:	08 95       	ret

00001dfe <__fp_powsodd>:
    1dfe:	9f 93       	push	r25
    1e00:	8f 93       	push	r24
    1e02:	7f 93       	push	r23
    1e04:	6f 93       	push	r22
    1e06:	ff 93       	push	r31
    1e08:	ef 93       	push	r30
    1e0a:	9b 01       	movw	r18, r22
    1e0c:	ac 01       	movw	r20, r24
    1e0e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    1e12:	ef 91       	pop	r30
    1e14:	ff 91       	pop	r31
    1e16:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__fp_powser>
    1e1a:	2f 91       	pop	r18
    1e1c:	3f 91       	pop	r19
    1e1e:	4f 91       	pop	r20
    1e20:	5f 91       	pop	r21
    1e22:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__mulsf3>

00001e26 <__fp_powser>:
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	1f 93       	push	r17
    1e2c:	0f 93       	push	r16
    1e2e:	ff 92       	push	r15
    1e30:	ef 92       	push	r14
    1e32:	df 92       	push	r13
    1e34:	7b 01       	movw	r14, r22
    1e36:	8c 01       	movw	r16, r24
    1e38:	68 94       	set
    1e3a:	06 c0       	rjmp	.+12     	; 0x1e48 <__fp_powser+0x22>
    1e3c:	da 2e       	mov	r13, r26
    1e3e:	ef 01       	movw	r28, r30
    1e40:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__mulsf3x>
    1e44:	fe 01       	movw	r30, r28
    1e46:	e8 94       	clt
    1e48:	a5 91       	lpm	r26, Z+
    1e4a:	25 91       	lpm	r18, Z+
    1e4c:	35 91       	lpm	r19, Z+
    1e4e:	45 91       	lpm	r20, Z+
    1e50:	55 91       	lpm	r21, Z+
    1e52:	a6 f3       	brts	.-24     	; 0x1e3c <__fp_powser+0x16>
    1e54:	ef 01       	movw	r28, r30
    1e56:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__addsf3x>
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	97 01       	movw	r18, r14
    1e5e:	a8 01       	movw	r20, r16
    1e60:	da 94       	dec	r13
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <__fp_powser+0x18>
    1e64:	df 90       	pop	r13
    1e66:	ef 90       	pop	r14
    1e68:	ff 90       	pop	r15
    1e6a:	0f 91       	pop	r16
    1e6c:	1f 91       	pop	r17
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <__udivmodsi4>:
    1e74:	a1 e2       	ldi	r26, 0x21	; 33
    1e76:	1a 2e       	mov	r1, r26
    1e78:	aa 1b       	sub	r26, r26
    1e7a:	bb 1b       	sub	r27, r27
    1e7c:	fd 01       	movw	r30, r26
    1e7e:	0d c0       	rjmp	.+26     	; 0x1e9a <__udivmodsi4_ep>

00001e80 <__udivmodsi4_loop>:
    1e80:	aa 1f       	adc	r26, r26
    1e82:	bb 1f       	adc	r27, r27
    1e84:	ee 1f       	adc	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	a2 17       	cp	r26, r18
    1e8a:	b3 07       	cpc	r27, r19
    1e8c:	e4 07       	cpc	r30, r20
    1e8e:	f5 07       	cpc	r31, r21
    1e90:	20 f0       	brcs	.+8      	; 0x1e9a <__udivmodsi4_ep>
    1e92:	a2 1b       	sub	r26, r18
    1e94:	b3 0b       	sbc	r27, r19
    1e96:	e4 0b       	sbc	r30, r20
    1e98:	f5 0b       	sbc	r31, r21

00001e9a <__udivmodsi4_ep>:
    1e9a:	66 1f       	adc	r22, r22
    1e9c:	77 1f       	adc	r23, r23
    1e9e:	88 1f       	adc	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	1a 94       	dec	r1
    1ea4:	69 f7       	brne	.-38     	; 0x1e80 <__udivmodsi4_loop>
    1ea6:	60 95       	com	r22
    1ea8:	70 95       	com	r23
    1eaa:	80 95       	com	r24
    1eac:	90 95       	com	r25
    1eae:	9b 01       	movw	r18, r22
    1eb0:	ac 01       	movw	r20, r24
    1eb2:	bd 01       	movw	r22, r26
    1eb4:	cf 01       	movw	r24, r30
    1eb6:	08 95       	ret

00001eb8 <__umulhisi3>:
    1eb8:	a2 9f       	mul	r26, r18
    1eba:	b0 01       	movw	r22, r0
    1ebc:	b3 9f       	mul	r27, r19
    1ebe:	c0 01       	movw	r24, r0
    1ec0:	a3 9f       	mul	r26, r19
    1ec2:	70 0d       	add	r23, r0
    1ec4:	81 1d       	adc	r24, r1
    1ec6:	11 24       	eor	r1, r1
    1ec8:	91 1d       	adc	r25, r1
    1eca:	b2 9f       	mul	r27, r18
    1ecc:	70 0d       	add	r23, r0
    1ece:	81 1d       	adc	r24, r1
    1ed0:	11 24       	eor	r1, r1
    1ed2:	91 1d       	adc	r25, r1
    1ed4:	08 95       	ret

00001ed6 <__itoa_ncheck>:
    1ed6:	bb 27       	eor	r27, r27
    1ed8:	4a 30       	cpi	r20, 0x0A	; 10
    1eda:	31 f4       	brne	.+12     	; 0x1ee8 <__itoa_ncheck+0x12>
    1edc:	99 23       	and	r25, r25
    1ede:	22 f4       	brpl	.+8      	; 0x1ee8 <__itoa_ncheck+0x12>
    1ee0:	bd e2       	ldi	r27, 0x2D	; 45
    1ee2:	90 95       	com	r25
    1ee4:	81 95       	neg	r24
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__utoa_common>

00001eec <__utoa_ncheck>:
    1eec:	bb 27       	eor	r27, r27

00001eee <__utoa_common>:
    1eee:	fb 01       	movw	r30, r22
    1ef0:	55 27       	eor	r21, r21
    1ef2:	aa 27       	eor	r26, r26
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	aa 1f       	adc	r26, r26
    1efa:	a4 17       	cp	r26, r20
    1efc:	10 f0       	brcs	.+4      	; 0x1f02 <__utoa_common+0x14>
    1efe:	a4 1b       	sub	r26, r20
    1f00:	83 95       	inc	r24
    1f02:	50 51       	subi	r21, 0x10	; 16
    1f04:	b9 f7       	brne	.-18     	; 0x1ef4 <__utoa_common+0x6>
    1f06:	a0 5d       	subi	r26, 0xD0	; 208
    1f08:	aa 33       	cpi	r26, 0x3A	; 58
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <__utoa_common+0x20>
    1f0c:	a9 5d       	subi	r26, 0xD9	; 217
    1f0e:	a1 93       	st	Z+, r26
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	79 f7       	brne	.-34     	; 0x1ef2 <__utoa_common+0x4>
    1f14:	b1 11       	cpse	r27, r1
    1f16:	b1 93       	st	Z+, r27
    1f18:	11 92       	st	Z+, r1
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <strrev>

00001f20 <strrev>:
    1f20:	dc 01       	movw	r26, r24
    1f22:	fc 01       	movw	r30, r24
    1f24:	67 2f       	mov	r22, r23
    1f26:	71 91       	ld	r23, Z+
    1f28:	77 23       	and	r23, r23
    1f2a:	e1 f7       	brne	.-8      	; 0x1f24 <strrev+0x4>
    1f2c:	32 97       	sbiw	r30, 0x02	; 2
    1f2e:	04 c0       	rjmp	.+8      	; 0x1f38 <strrev+0x18>
    1f30:	7c 91       	ld	r23, X
    1f32:	6d 93       	st	X+, r22
    1f34:	70 83       	st	Z, r23
    1f36:	62 91       	ld	r22, -Z
    1f38:	ae 17       	cp	r26, r30
    1f3a:	bf 07       	cpc	r27, r31
    1f3c:	c8 f3       	brcs	.-14     	; 0x1f30 <strrev+0x10>
    1f3e:	08 95       	ret

00001f40 <_exit>:
    1f40:	f8 94       	cli

00001f42 <__stop_program>:
    1f42:	ff cf       	rjmp	.-2      	; 0x1f42 <__stop_program>
